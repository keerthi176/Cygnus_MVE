
ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003374  08003374  00004374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000043e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033ec  080033ec  000043ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080033fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080033fc  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009869  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b66  00000000  00000000  0000e89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000611  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010627  00000000  00000000  00011209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa76  00000000  00000000  00021830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062fa2  00000000  00000000  0002c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008f248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b10  00000000  00000000  0008f28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00090d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800335c 	.word	0x0800335c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800335c 	.word	0x0800335c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f9be 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f810 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8a8 	bl	8000608 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004b8:	f000 f878 	bl	80005ac <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DelayWithSleep(10);
 80004bc:	200a      	movs	r0, #10
 80004be:	f000 f8e5 	bl	800068c <DelayWithSleep>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  UART_Receive(rxbuffer, RX_BUFFER_SIZE);
 80004c2:	4b03      	ldr	r3, [pc, #12]	@ (80004d0 <main+0x28>)
 80004c4:	2110      	movs	r1, #16
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f8b4 	bl	8000634 <UART_Receive>

  while (1)
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	e7fd      	b.n	80004cc <main+0x24>
 80004d0:	200000b8 	.word	0x200000b8

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b099      	sub	sp, #100	@ 0x64
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	242c      	movs	r4, #44	@ 0x2c
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2334      	movs	r3, #52	@ 0x34
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 ff0d 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	2318      	movs	r3, #24
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 ff05 	bl	8003304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	2318      	movs	r3, #24
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fefe 	bl	8003304 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <SystemClock_Config+0xd0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a26      	ldr	r2, [pc, #152]	@ (80005a8 <SystemClock_Config+0xd4>)
 800050e:	401a      	ands	r2, r3
 8000510:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	0109      	lsls	r1, r1, #4
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2210      	movs	r2, #16
 8000520:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	22a0      	movs	r2, #160	@ 0xa0
 8000532:	0212      	lsls	r2, r2, #8
 8000534:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	187b      	adds	r3, r7, r1
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fd10 	bl	8000f64 <HAL_RCC_OscConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000548:	f000 f8b3 	bl	80006b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	2118      	movs	r1, #24
 800054e:	187b      	adds	r3, r7, r1
 8000550:	220f      	movs	r2, #15
 8000552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f001 f873 	bl	800165c <HAL_RCC_ClockConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057a:	f000 f89a 	bl	80006b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800057e:	003b      	movs	r3, r7
 8000580:	2204      	movs	r2, #4
 8000582:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000584:	003b      	movs	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fa89 	bl	8001aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000596:	f000 f88c 	bl	80006b2 <Error_Handler>
  }
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b019      	add	sp, #100	@ 0x64
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <MX_LPUART1_UART_Init+0x58>)
 80005b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005b8:	2296      	movs	r2, #150	@ 0x96
 80005ba:	01d2      	lsls	r2, r2, #7
 80005bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <MX_LPUART1_UART_Init+0x54>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fb86 	bl	8001cfc <HAL_UART_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f85d 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	20000028 	.word	0x20000028
 8000604:	40004800 	.word	0x40004800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_GPIO_Init+0x28>)
 8000610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <MX_GPIO_Init+0x28>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <MX_GPIO_Init+0x28>)
 800061c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	40021000 	.word	0x40021000

08000634 <UART_Receive>:
       The HAL library will call HAL_UART_TxCpltCallback when done. */
    return HAL_UART_Transmit_IT(&hlpuart1, tx_buf, tx_num);
}

HAL_StatusTypeDef UART_Receive(uint8_t *rx_buf, uint16_t rx_num)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	000a      	movs	r2, r1
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	801a      	strh	r2, [r3, #0]
    if (rx_num < 1)
 8000642:	1cbb      	adds	r3, r7, #2
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <UART_Receive+0x1a>
        return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e011      	b.n	8000672 <UART_Receive+0x3e>

    gp_uart1_rx_address = rx_buf;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <UART_Receive+0x48>)
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
    g_uart1_rx_count = 0;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <UART_Receive+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	801a      	strh	r2, [r3, #0]
    g_uart1_rx_length = rx_num;
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <UART_Receive+0x50>)
 800065c:	1cba      	adds	r2, r7, #2
 800065e:	8812      	ldrh	r2, [r2, #0]
 8000660:	801a      	strh	r2, [r3, #0]

    /* Start reception in IT mode.
       The HAL library will call HAL_UART_RxCpltCallback when done. */
    return HAL_UART_Receive_IT(&hlpuart1, rx_buf, rx_num);
 8000662:	1cbb      	adds	r3, r7, #2
 8000664:	881a      	ldrh	r2, [r3, #0]
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <UART_Receive+0x54>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 fb9a 	bl	8001da4 <HAL_UART_Receive_IT>
 8000670:	0003      	movs	r3, r0
}
 8000672:	0018      	movs	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	200000b0 	.word	0x200000b0
 8000680:	200000b4 	.word	0x200000b4
 8000684:	200000b6 	.word	0x200000b6
 8000688:	20000028 	.word	0x20000028

0800068c <DelayWithSleep>:

void DelayWithSleep(uint32_t iterations)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	while(iterations--)
 8000694:	e003      	b.n	800069e <DelayWithSleep+0x12>
	{
		// Optionally restart the watchdog here if using one:
		// HAL_IWDG_Refresh(&hiwdg);

	    // Enter Sleep mode, waiting for any interrupt.
	       HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000696:	2101      	movs	r1, #1
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fc0b 	bl	8000eb4 <HAL_PWR_EnterSLEEPMode>
	while(iterations--)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f6      	bne.n	8000696 <DelayWithSleep+0xa>

	    // Execution resumes here after an interrupt wakes the MCU.
	}
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	e7fd      	b.n	80006ba <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_MspInit+0x24>)
 80006c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HAL_MspInit+0x24>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <HAL_MspInit+0x24>)
 80006d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_MspInit+0x24>)
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	0549      	lsls	r1, r1, #21
 80006da:	430a      	orrs	r2, r1
 80006dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	240c      	movs	r4, #12
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fe02 	bl	8003304 <memset>
  if(huart->Instance==LPUART1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <HAL_UART_MspInit+0x90>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d131      	bne.n	800076e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_UART_MspInit+0x94>)
 800070c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_UART_MspInit+0x94>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	02c9      	lsls	r1, r1, #11
 8000714:	430a      	orrs	r2, r1
 8000716:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_UART_MspInit+0x94>)
 800071a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_UART_MspInit+0x94>)
 800071e:	2101      	movs	r1, #1
 8000720:	430a      	orrs	r2, r1
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_UART_MspInit+0x94>)
 8000726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000728:	2201      	movs	r2, #1
 800072a:	4013      	ands	r3, r2
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	220c      	movs	r2, #12
 8000736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2203      	movs	r2, #3
 8000748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2206      	movs	r2, #6
 800074e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	187a      	adds	r2, r7, r1
 8000752:	23a0      	movs	r3, #160	@ 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fa3d 	bl	8000bd8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	201d      	movs	r0, #29
 8000764:	f000 f97e 	bl	8000a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000768:	201d      	movs	r0, #29
 800076a:	f000 f990 	bl	8000a8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b009      	add	sp, #36	@ 0x24
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40004800 	.word	0x40004800
 800077c:	40021000 	.word	0x40021000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f894 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <LPUART1_IRQHandler+0x14>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fb50 	bl	8001e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000028 	.word	0x20000028

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff fff6 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	@ (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000806:	f002 fd85 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080a:	f7ff fe4d 	bl	80004a8 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
   ldr   r0, =_estack
 8000810:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	080033f0 	.word	0x080033f0
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	200000cc 	.word	0x200000cc

08000828 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_COMP_IRQHandler>
	...

0800082c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_Init+0x3c>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_Init+0x3c>)
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f811 	bl	800086c <HAL_InitTick>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d003      	beq.n	8000856 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e001      	b.n	800085a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000856:	f7ff ff33 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <HAL_InitTick+0x5c>)
 8000876:	681c      	ldr	r4, [r3, #0]
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_InitTick+0x60>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	0019      	movs	r1, r3
 800087e:	23fa      	movs	r3, #250	@ 0xfa
 8000880:	0098      	lsls	r0, r3, #2
 8000882:	f7ff fc41 	bl	8000108 <__udivsi3>
 8000886:	0003      	movs	r3, r0
 8000888:	0019      	movs	r1, r3
 800088a:	0020      	movs	r0, r4
 800088c:	f7ff fc3c 	bl	8000108 <__udivsi3>
 8000890:	0003      	movs	r3, r0
 8000892:	0018      	movs	r0, r3
 8000894:	f000 f90b 	bl	8000aae <HAL_SYSTICK_Config>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e00f      	b.n	80008c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d80b      	bhi.n	80008be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	2301      	movs	r3, #1
 80008aa:	425b      	negs	r3, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 f8d8 	bl	8000a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_InitTick+0x64>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	001a      	movs	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	18d2      	adds	r2, r2, r3
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <HAL_IncTick+0x20>)
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	20000008 	.word	0x20000008
 80008f4:	200000c8 	.word	0x200000c8

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	@ (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	200000c8 	.word	0x200000c8

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	0002      	movs	r2, r0
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b7f      	cmp	r3, #127	@ 0x7f
 800091e:	d809      	bhi.n	8000934 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001a      	movs	r2, r3
 8000926:	231f      	movs	r3, #31
 8000928:	401a      	ands	r2, r3
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_EnableIRQ+0x30>)
 800092c:	2101      	movs	r1, #1
 800092e:	4091      	lsls	r1, r2
 8000930:	000a      	movs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
  }
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b7f      	cmp	r3, #127	@ 0x7f
 8000954:	d828      	bhi.n	80009a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000956:	4a2f      	ldr	r2, [pc, #188]	@ (8000a14 <__NVIC_SetPriority+0xd4>)
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	33c0      	adds	r3, #192	@ 0xc0
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	589b      	ldr	r3, [r3, r2]
 8000966:	1dfa      	adds	r2, r7, #7
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	0011      	movs	r1, r2
 800096c:	2203      	movs	r2, #3
 800096e:	400a      	ands	r2, r1
 8000970:	00d2      	lsls	r2, r2, #3
 8000972:	21ff      	movs	r1, #255	@ 0xff
 8000974:	4091      	lsls	r1, r2
 8000976:	000a      	movs	r2, r1
 8000978:	43d2      	mvns	r2, r2
 800097a:	401a      	ands	r2, r3
 800097c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	019b      	lsls	r3, r3, #6
 8000982:	22ff      	movs	r2, #255	@ 0xff
 8000984:	401a      	ands	r2, r3
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0018      	movs	r0, r3
 800098c:	2303      	movs	r3, #3
 800098e:	4003      	ands	r3, r0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000994:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <__NVIC_SetPriority+0xd4>)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	33c0      	adds	r3, #192	@ 0xc0
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a6:	e031      	b.n	8000a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <__NVIC_SetPriority+0xd8>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0019      	movs	r1, r3
 80009b0:	230f      	movs	r3, #15
 80009b2:	400b      	ands	r3, r1
 80009b4:	3b08      	subs	r3, #8
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3306      	adds	r3, #6
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	1dfa      	adds	r2, r7, #7
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	0011      	movs	r1, r2
 80009c8:	2203      	movs	r2, #3
 80009ca:	400a      	ands	r2, r1
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	21ff      	movs	r1, #255	@ 0xff
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	43d2      	mvns	r2, r2
 80009d6:	401a      	ands	r2, r3
 80009d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	019b      	lsls	r3, r3, #6
 80009de:	22ff      	movs	r2, #255	@ 0xff
 80009e0:	401a      	ands	r2, r3
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0018      	movs	r0, r3
 80009e8:	2303      	movs	r3, #3
 80009ea:	4003      	ands	r3, r0
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <__NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	001c      	movs	r4, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	4023      	ands	r3, r4
 80009fc:	3b08      	subs	r3, #8
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	3306      	adds	r3, #6
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	18c3      	adds	r3, r0, r3
 8000a08:	3304      	adds	r3, #4
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b003      	add	sp, #12
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	045b      	lsls	r3, r3, #17
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d301      	bcc.n	8000a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a30:	2301      	movs	r3, #1
 8000a32:	e010      	b.n	8000a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <SysTick_Config+0x44>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
 8000a40:	2103      	movs	r1, #3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff ff7c 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <SysTick_Config+0x44>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SysTick_Config+0x44>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	0002      	movs	r2, r0
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff33 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ffaf 	bl	8000a1c <SysTick_Config>
 8000abe:	0003      	movs	r3, r0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2225      	movs	r2, #37	@ 0x25
 8000adc:	5c9b      	ldrb	r3, [r3, r2]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d008      	beq.n	8000af6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2224      	movs	r2, #36	@ 0x24
 8000aee:	2100      	movs	r1, #0
 8000af0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e024      	b.n	8000b40 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	210e      	movs	r1, #14
 8000b02:	438a      	bics	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	438a      	bics	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	221c      	movs	r2, #28
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	2101      	movs	r1, #1
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2225      	movs	r2, #37	@ 0x25
 8000b2e:	2101      	movs	r1, #1
 8000b30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2224      	movs	r2, #36	@ 0x24
 8000b36:	2100      	movs	r1, #0
 8000b38:	5499      	strb	r1, [r3, r2]

    return status;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b50:	210f      	movs	r1, #15
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2225      	movs	r2, #37	@ 0x25
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d006      	beq.n	8000b72 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2204      	movs	r2, #4
 8000b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e02a      	b.n	8000bc8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	210e      	movs	r1, #14
 8000b7e:	438a      	bics	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	221c      	movs	r2, #28
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2225      	movs	r2, #37	@ 0x25
 8000baa:	2101      	movs	r1, #1
 8000bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2224      	movs	r2, #36	@ 0x24
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	0010      	movs	r0, r2
 8000bc6:	4798      	blx	r3
    }
  }
  return status;
 8000bc8:	230f      	movs	r3, #15
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	781b      	ldrb	r3, [r3, #0]
}
 8000bce:	0018      	movs	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bee:	e149      	b.n	8000e84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d100      	bne.n	8000c08 <HAL_GPIO_Init+0x30>
 8000c06:	e13a      	b.n	8000e7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d005      	beq.n	8000c20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d130      	bne.n	8000c82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	43da      	mvns	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c56:	2201      	movs	r2, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2203      	movs	r2, #3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d017      	beq.n	8000cbe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d123      	bne.n	8000d12 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	0092      	lsls	r2, r2, #2
 8000cd4:	58d3      	ldr	r3, [r2, r3]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2207      	movs	r2, #7
 8000cdc:	4013      	ands	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	401a      	ands	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	23c0      	movs	r3, #192	@ 0xc0
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d100      	bne.n	8000d54 <HAL_GPIO_Init+0x17c>
 8000d52:	e094      	b.n	8000e7e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	4b51      	ldr	r3, [pc, #324]	@ (8000e9c <HAL_GPIO_Init+0x2c4>)
 8000d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d58:	4b50      	ldr	r3, [pc, #320]	@ (8000e9c <HAL_GPIO_Init+0x2c4>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d60:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	589b      	ldr	r3, [r3, r2]
 8000d6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	23a0      	movs	r3, #160	@ 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0x1de>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a44      	ldr	r2, [pc, #272]	@ (8000ea4 <HAL_GPIO_Init+0x2cc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00d      	beq.n	8000db2 <HAL_GPIO_Init+0x1da>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a43      	ldr	r2, [pc, #268]	@ (8000ea8 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x1d6>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a42      	ldr	r2, [pc, #264]	@ (8000eac <HAL_GPIO_Init+0x2d4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_Init+0x1d2>
 8000da6:	2305      	movs	r3, #5
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e004      	b.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000db6:	2300      	movs	r3, #0
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	2103      	movs	r1, #3
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4093      	lsls	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	4935      	ldr	r1, [pc, #212]	@ (8000ea0 <HAL_GPIO_Init+0x2c8>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd6:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	035b      	lsls	r3, r3, #13
 8000dee:	4013      	ands	r3, r2
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	039b      	lsls	r3, r3, #14
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	029b      	lsls	r3, r3, #10
 8000e42:	4013      	ands	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43da      	mvns	r2, r3
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	025b      	lsls	r3, r3, #9
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	40da      	lsrs	r2, r3
 8000e8c:	1e13      	subs	r3, r2, #0
 8000e8e:	d000      	beq.n	8000e92 <HAL_GPIO_Init+0x2ba>
 8000e90:	e6ae      	b.n	8000bf0 <HAL_GPIO_Init+0x18>
  }
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b006      	add	sp, #24
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	50000400 	.word	0x50000400
 8000ea8:	50000800 	.word	0x50000800
 8000eac:	50001c00 	.word	0x50001c00
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8000ed2:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_PWR_EnterSLEEPMode+0x40>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000eee:	491b      	ldr	r1, [pc, #108]	@ (8000f5c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4393      	bics	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_PWR_EnterSLEEPMode+0xac>)
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_PWR_EnterSLEEPMode+0xac>)
 8000f16:	2104      	movs	r1, #4
 8000f18:	438a      	bics	r2, r1
 8000f1a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000f1c:	1cfb      	adds	r3, r7, #3
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f24:	bf30      	wfi
 8000f26:	e002      	b.n	8000f2e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000f28:	bf40      	sev
    __WFE();
 8000f2a:	bf20      	wfe
    __WFE();
 8000f2c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d009      	beq.n	8000f48 <HAL_PWR_EnterSLEEPMode+0x94>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8000f48:	46c0      	nop			@ (mov r8, r8)

}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b006      	add	sp, #24
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	40007000 	.word	0x40007000
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	fffffdff 	.word	0xfffffdff
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 fb6c 	bl	8001650 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f78:	4bc8      	ldr	r3, [pc, #800]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f82:	4bc6      	ldr	r3, [pc, #792]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	025b      	lsls	r3, r3, #9
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x36>
 8000f98:	e07d      	b.n	8001096 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d007      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0c      	cmp	r3, #12
 8000fa4:	d112      	bne.n	8000fcc <HAL_RCC_OscConfig+0x68>
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	025b      	lsls	r3, r3, #9
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10d      	bne.n	8000fcc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb0:	4bba      	ldr	r3, [pc, #744]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	029b      	lsls	r3, r3, #10
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5a>
 8000fbc:	e06a      	b.n	8001094 <HAL_RCC_OscConfig+0x130>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d166      	bne.n	8001094 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f000 fb42 	bl	8001650 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d107      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x84>
 8000fd8:	4bb0      	ldr	r3, [pc, #704]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4baf      	ldr	r3, [pc, #700]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	0249      	lsls	r1, r1, #9
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e027      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	23a0      	movs	r3, #160	@ 0xa0
 8000fee:	02db      	lsls	r3, r3, #11
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d10e      	bne.n	8001012 <HAL_RCC_OscConfig+0xae>
 8000ff4:	4ba9      	ldr	r3, [pc, #676]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	02c9      	lsls	r1, r1, #11
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	4ba6      	ldr	r3, [pc, #664]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4ba5      	ldr	r3, [pc, #660]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	0249      	lsls	r1, r1, #9
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e012      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8001012:	4ba2      	ldr	r3, [pc, #648]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4ba1      	ldr	r3, [pc, #644]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001018:	49a1      	ldr	r1, [pc, #644]	@ (80012a0 <HAL_RCC_OscConfig+0x33c>)
 800101a:	400a      	ands	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	4b9f      	ldr	r3, [pc, #636]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	025b      	lsls	r3, r3, #9
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4b9b      	ldr	r3, [pc, #620]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b9a      	ldr	r3, [pc, #616]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001032:	499c      	ldr	r1, [pc, #624]	@ (80012a4 <HAL_RCC_OscConfig+0x340>)
 8001034:	400a      	ands	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d014      	beq.n	800106a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc5a 	bl	80008f8 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104a:	f7ff fc55 	bl	80008f8 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	@ 0x64
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e2f9      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800105c:	4b8f      	ldr	r3, [pc, #572]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0xe6>
 8001068:	e015      	b.n	8001096 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fc45 	bl	80008f8 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fc40 	bl	80008f8 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	@ 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e2e4      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001086:	4b85      	ldr	r3, [pc, #532]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	029b      	lsls	r3, r3, #10
 800108e:	4013      	ands	r3, r2
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x110>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d100      	bne.n	80010a2 <HAL_RCC_OscConfig+0x13e>
 80010a0:	e099      	b.n	80011d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	2220      	movs	r2, #32
 80010ac:	4013      	ands	r3, r2
 80010ae:	d009      	beq.n	80010c4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80010b0:	4b7a      	ldr	r3, [pc, #488]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b79      	ldr	r3, [pc, #484]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80010b6:	2120      	movs	r1, #32
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	2220      	movs	r2, #32
 80010c0:	4393      	bics	r3, r2
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d005      	beq.n	80010d6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d13e      	bne.n	800114e <HAL_RCC_OscConfig+0x1ea>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d13b      	bne.n	800114e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010d6:	4b71      	ldr	r3, [pc, #452]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2204      	movs	r2, #4
 80010dc:	4013      	ands	r3, r2
 80010de:	d004      	beq.n	80010ea <HAL_RCC_OscConfig+0x186>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e2b2      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b6c      	ldr	r3, [pc, #432]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	@ (80012a8 <HAL_RCC_OscConfig+0x344>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	0019      	movs	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	021a      	lsls	r2, r3, #8
 80010fa:	4b68      	ldr	r3, [pc, #416]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80010fc:	430a      	orrs	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2209      	movs	r2, #9
 8001106:	4393      	bics	r3, r2
 8001108:	0019      	movs	r1, r3
 800110a:	4b64      	ldr	r3, [pc, #400]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800110c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001112:	f000 fbeb 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001116:	0001      	movs	r1, r0
 8001118:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	220f      	movs	r2, #15
 8001120:	4013      	ands	r3, r2
 8001122:	4a62      	ldr	r2, [pc, #392]	@ (80012ac <HAL_RCC_OscConfig+0x348>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	000a      	movs	r2, r1
 8001128:	40da      	lsrs	r2, r3
 800112a:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <HAL_RCC_OscConfig+0x34c>)
 800112c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800112e:	4b61      	ldr	r3, [pc, #388]	@ (80012b4 <HAL_RCC_OscConfig+0x350>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2513      	movs	r5, #19
 8001134:	197c      	adds	r4, r7, r5
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff fb98 	bl	800086c <HAL_InitTick>
 800113c:	0003      	movs	r3, r0
 800113e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001140:	197b      	adds	r3, r7, r5
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d046      	beq.n	80011d6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001148:	197b      	adds	r3, r7, r5
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	e280      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d027      	beq.n	80011a4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2209      	movs	r2, #9
 800115a:	4393      	bics	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	4b4f      	ldr	r3, [pc, #316]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fbc7 	bl	80008f8 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fbc2 	bl	80008f8 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e266      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001182:	4b46      	ldr	r3, [pc, #280]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2204      	movs	r2, #4
 8001188:	4013      	ands	r3, r2
 800118a:	d0f1      	beq.n	8001170 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b43      	ldr	r3, [pc, #268]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	@ (80012a8 <HAL_RCC_OscConfig+0x344>)
 8001192:	4013      	ands	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	021a      	lsls	r2, r3, #8
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a4:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b3c      	ldr	r3, [pc, #240]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fba2 	bl	80008f8 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fb9d 	bl	80008f8 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e241      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011cc:	4b33      	ldr	r3, [pc, #204]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2204      	movs	r2, #4
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f1      	bne.n	80011ba <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2210      	movs	r2, #16
 80011dc:	4013      	ands	r3, r2
 80011de:	d100      	bne.n	80011e2 <HAL_RCC_OscConfig+0x27e>
 80011e0:	e0a1      	b.n	8001326 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d140      	bne.n	800126a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e8:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_OscConfig+0x29c>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e227      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <HAL_RCC_OscConfig+0x354>)
 8001206:	4013      	ands	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	0a19      	lsrs	r1, r3, #8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	061a      	lsls	r2, r3, #24
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	0b5b      	lsrs	r3, r3, #13
 800122e:	3301      	adds	r3, #1
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	0212      	lsls	r2, r2, #8
 8001234:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	210f      	movs	r1, #15
 800123e:	400b      	ands	r3, r1
 8001240:	491a      	ldr	r1, [pc, #104]	@ (80012ac <HAL_RCC_OscConfig+0x348>)
 8001242:	5ccb      	ldrb	r3, [r1, r3]
 8001244:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_RCC_OscConfig+0x34c>)
 8001248:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_RCC_OscConfig+0x350>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2513      	movs	r5, #19
 8001250:	197c      	adds	r4, r7, r5
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff fb0a 	bl	800086c <HAL_InitTick>
 8001258:	0003      	movs	r3, r0
 800125a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800125c:	197b      	adds	r3, r7, r5
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d060      	beq.n	8001326 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001264:	197b      	adds	r3, r7, r5
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	e1f2      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03f      	beq.n	80012f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_RCC_OscConfig+0x338>)
 8001278:	2180      	movs	r1, #128	@ 0x80
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fb3a 	bl	80008f8 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001288:	e018      	b.n	80012bc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128a:	f7ff fb35 	bl	80008f8 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d911      	bls.n	80012bc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1d9      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
 800129c:	40021000 	.word	0x40021000
 80012a0:	fffeffff 	.word	0xfffeffff
 80012a4:	fffbffff 	.word	0xfffbffff
 80012a8:	ffffe0ff 	.word	0xffffe0ff
 80012ac:	08003374 	.word	0x08003374
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
 80012b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012bc:	4bc9      	ldr	r3, [pc, #804]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d0e0      	beq.n	800128a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	4bc6      	ldr	r3, [pc, #792]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4ac6      	ldr	r2, [pc, #792]	@ (80015e8 <HAL_RCC_OscConfig+0x684>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1a      	ldr	r2, [r3, #32]
 80012d6:	4bc3      	ldr	r3, [pc, #780]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012dc:	4bc1      	ldr	r3, [pc, #772]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	0a19      	lsrs	r1, r3, #8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	061a      	lsls	r2, r3, #24
 80012ea:	4bbe      	ldr	r3, [pc, #760]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e019      	b.n	8001326 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f2:	4bbc      	ldr	r3, [pc, #752]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4bbb      	ldr	r3, [pc, #748]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80012f8:	49bc      	ldr	r1, [pc, #752]	@ (80015ec <HAL_RCC_OscConfig+0x688>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fafb 	bl	80008f8 <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001308:	f7ff faf6 	bl	80008f8 <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e19a      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800131a:	4bb2      	ldr	r3, [pc, #712]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2208      	movs	r2, #8
 800132c:	4013      	ands	r3, r2
 800132e:	d036      	beq.n	800139e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d019      	beq.n	800136c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001338:	4baa      	ldr	r3, [pc, #680]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800133a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800133c:	4ba9      	ldr	r3, [pc, #676]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fad8 	bl	80008f8 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fad3 	bl	80008f8 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e177      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001360:	4ba0      	ldr	r3, [pc, #640]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d0f1      	beq.n	800134e <HAL_RCC_OscConfig+0x3ea>
 800136a:	e018      	b.n	800139e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136c:	4b9d      	ldr	r3, [pc, #628]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800136e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001370:	4b9c      	ldr	r3, [pc, #624]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fabe 	bl	80008f8 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fab9 	bl	80008f8 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e15d      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001394:	4b93      	ldr	r3, [pc, #588]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d1f1      	bne.n	8001382 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2204      	movs	r2, #4
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x446>
 80013a8:	e0ae      	b.n	8001508 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2023      	movs	r0, #35	@ 0x23
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b8c      	ldr	r3, [pc, #560]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80013b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	4013      	ands	r3, r2
 80013bc:	d109      	bne.n	80013d2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80013c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0549      	lsls	r1, r1, #21
 80013c8:	430a      	orrs	r2, r1
 80013ca:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80013cc:	183b      	adds	r3, r7, r0
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	4b87      	ldr	r3, [pc, #540]	@ (80015f0 <HAL_RCC_OscConfig+0x68c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	@ 0x80
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d11a      	bne.n	8001414 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013de:	4b84      	ldr	r3, [pc, #528]	@ (80015f0 <HAL_RCC_OscConfig+0x68c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b83      	ldr	r3, [pc, #524]	@ (80015f0 <HAL_RCC_OscConfig+0x68c>)
 80013e4:	2180      	movs	r1, #128	@ 0x80
 80013e6:	0049      	lsls	r1, r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fa84 	bl	80008f8 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fa7f 	bl	80008f8 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	@ 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e123      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b79      	ldr	r3, [pc, #484]	@ (80015f0 <HAL_RCC_OscConfig+0x68c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	429a      	cmp	r2, r3
 800141e:	d107      	bne.n	8001430 <HAL_RCC_OscConfig+0x4cc>
 8001420:	4b70      	ldr	r3, [pc, #448]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001424:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0049      	lsls	r1, r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	651a      	str	r2, [r3, #80]	@ 0x50
 800142e:	e031      	b.n	8001494 <HAL_RCC_OscConfig+0x530>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x4ee>
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800143a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800143c:	4b69      	ldr	r3, [pc, #420]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800143e:	496b      	ldr	r1, [pc, #428]	@ (80015ec <HAL_RCC_OscConfig+0x688>)
 8001440:	400a      	ands	r2, r1
 8001442:	651a      	str	r2, [r3, #80]	@ 0x50
 8001444:	4b67      	ldr	r3, [pc, #412]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001448:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800144a:	496a      	ldr	r1, [pc, #424]	@ (80015f4 <HAL_RCC_OscConfig+0x690>)
 800144c:	400a      	ands	r2, r1
 800144e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001450:	e020      	b.n	8001494 <HAL_RCC_OscConfig+0x530>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	23a0      	movs	r3, #160	@ 0xa0
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	429a      	cmp	r2, r3
 800145c:	d10e      	bne.n	800147c <HAL_RCC_OscConfig+0x518>
 800145e:	4b61      	ldr	r3, [pc, #388]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001462:	4b60      	ldr	r3, [pc, #384]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	00c9      	lsls	r1, r1, #3
 8001468:	430a      	orrs	r2, r1
 800146a:	651a      	str	r2, [r3, #80]	@ 0x50
 800146c:	4b5d      	ldr	r3, [pc, #372]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800146e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001470:	4b5c      	ldr	r3, [pc, #368]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	0049      	lsls	r1, r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	651a      	str	r2, [r3, #80]	@ 0x50
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x530>
 800147c:	4b59      	ldr	r3, [pc, #356]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800147e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001480:	4b58      	ldr	r3, [pc, #352]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001482:	495a      	ldr	r1, [pc, #360]	@ (80015ec <HAL_RCC_OscConfig+0x688>)
 8001484:	400a      	ands	r2, r1
 8001486:	651a      	str	r2, [r3, #80]	@ 0x50
 8001488:	4b56      	ldr	r3, [pc, #344]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800148a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148c:	4b55      	ldr	r3, [pc, #340]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800148e:	4959      	ldr	r1, [pc, #356]	@ (80015f4 <HAL_RCC_OscConfig+0x690>)
 8001490:	400a      	ands	r2, r1
 8001492:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fa2c 	bl	80008f8 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a4:	e009      	b.n	80014ba <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fa27 	bl	80008f8 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a51      	ldr	r2, [pc, #324]	@ (80015f8 <HAL_RCC_OscConfig+0x694>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0ca      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ba:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80014bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d0ef      	beq.n	80014a6 <HAL_RCC_OscConfig+0x542>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fa16 	bl	80008f8 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014d0:	e009      	b.n	80014e6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fa11 	bl	80008f8 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a46      	ldr	r2, [pc, #280]	@ (80015f8 <HAL_RCC_OscConfig+0x694>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0b4      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014e6:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80014e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d1ef      	bne.n	80014d2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014f2:	2323      	movs	r3, #35	@ 0x23
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80014fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001502:	493e      	ldr	r1, [pc, #248]	@ (80015fc <HAL_RCC_OscConfig+0x698>)
 8001504:	400a      	ands	r2, r1
 8001506:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x5ae>
 8001510:	e09d      	b.n	800164e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x5b6>
 8001518:	e076      	b.n	8001608 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	2b02      	cmp	r3, #2
 8001520:	d145      	bne.n	80015ae <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001528:	4935      	ldr	r1, [pc, #212]	@ (8001600 <HAL_RCC_OscConfig+0x69c>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff f9e3 	bl	80008f8 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff f9de 	bl	80008f8 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e082      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <HAL_RCC_OscConfig+0x6a0>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	431a      	orrs	r2, r3
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001572:	430a      	orrs	r2, r1
 8001574:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0449      	lsls	r1, r1, #17
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff f9b8 	bl	80008f8 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff f9b3 	bl	80008f8 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e057      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	049b      	lsls	r3, r3, #18
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x62a>
 80015ac:	e04f      	b.n	800164e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80015b4:	4912      	ldr	r1, [pc, #72]	@ (8001600 <HAL_RCC_OscConfig+0x69c>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f99d 	bl	80008f8 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f998 	bl	80008f8 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e03c      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015d6:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_RCC_OscConfig+0x680>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x660>
 80015e2:	e034      	b.n	800164e <HAL_RCC_OscConfig+0x6ea>
 80015e4:	40021000 	.word	0x40021000
 80015e8:	ffff1fff 	.word	0xffff1fff
 80015ec:	fffffeff 	.word	0xfffffeff
 80015f0:	40007000 	.word	0x40007000
 80015f4:	fffffbff 	.word	0xfffffbff
 80015f8:	00001388 	.word	0x00001388
 80015fc:	efffffff 	.word	0xefffffff
 8001600:	feffffff 	.word	0xfeffffff
 8001604:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_RCC_OscConfig+0x6f4>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	429a      	cmp	r2, r3
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	23f0      	movs	r3, #240	@ 0xf0
 800162e:	039b      	lsls	r3, r3, #14
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d107      	bne.n	800164a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b00a      	add	sp, #40	@ 0x28
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e128      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b96      	ldr	r3, [pc, #600]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d91e      	bls.n	80016bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b93      	ldr	r3, [pc, #588]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4393      	bics	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	4b90      	ldr	r3, [pc, #576]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001690:	f7ff f932 	bl	80008f8 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001698:	e009      	b.n	80016ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7ff f92d 	bl	80008f8 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a8a      	ldr	r2, [pc, #552]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e109      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b87      	ldr	r3, [pc, #540]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1ee      	bne.n	800169a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c6:	4b83      	ldr	r3, [pc, #524]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	22f0      	movs	r2, #240	@ 0xf0
 80016cc:	4393      	bics	r3, r2
 80016ce:	0019      	movs	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	4b7f      	ldr	r3, [pc, #508]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x8a>
 80016e4:	e089      	b.n	80017fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ee:	4b79      	ldr	r3, [pc, #484]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	029b      	lsls	r3, r3, #10
 80016f6:	4013      	ands	r3, r2
 80016f8:	d120      	bne.n	800173c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0e1      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001706:	4b73      	ldr	r3, [pc, #460]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d114      	bne.n	800173c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0d5      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d106      	bne.n	800172c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171e:	4b6d      	ldr	r3, [pc, #436]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d109      	bne.n	800173c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0ca      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800172c:	4b69      	ldr	r3, [pc, #420]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0c2      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173c:	4b65      	ldr	r3, [pc, #404]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2203      	movs	r2, #3
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4b62      	ldr	r3, [pc, #392]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff f8d2 	bl	80008f8 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f8c9 	bl	80008f8 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0a5      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001776:	4b57      	ldr	r3, [pc, #348]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b08      	cmp	r3, #8
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_ClockConfig+0x106>
 8001782:	e03a      	b.n	80017fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d111      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff f8b3 	bl	80008f8 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e08f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a2:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_ClockConfig+0x132>
 80017ae:	e024      	b.n	80017fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d11b      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f89d 	bl	80008f8 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a42      	ldr	r2, [pc, #264]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e079      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	220c      	movs	r2, #12
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_ClockConfig+0x15e>
 80017da:	e00e      	b.n	80017fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff f88c 	bl	80008f8 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	4a3a      	ldr	r2, [pc, #232]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e068      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017f0:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	220c      	movs	r2, #12
 80017f6:	4013      	ands	r3, r2
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4013      	ands	r3, r2
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d21e      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800181a:	f7ff f86d 	bl	80008f8 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	e009      	b.n	8001838 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f868 	bl	80008f8 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4a28      	ldr	r2, [pc, #160]	@ (80018d0 <HAL_RCC_ClockConfig+0x274>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e044      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_RCC_ClockConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d1ee      	bne.n	8001824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d009      	beq.n	8001864 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_RCC_ClockConfig+0x27c>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	4013      	ands	r3, r2
 800186c:	d00a      	beq.n	8001884 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <HAL_RCC_ClockConfig+0x280>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	00da      	lsls	r2, r3, #3
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001884:	f000 f832 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001888:	0001      	movs	r1, r0
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_RCC_ClockConfig+0x278>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	220f      	movs	r2, #15
 8001892:	4013      	ands	r3, r2
 8001894:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x284>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	000a      	movs	r2, r1
 800189a:	40da      	lsrs	r2, r3
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_ClockConfig+0x288>)
 800189e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_RCC_ClockConfig+0x28c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	250b      	movs	r5, #11
 80018a6:	197c      	adds	r4, r7, r5
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7fe ffdf 	bl	800086c <HAL_InitTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018b2:	197b      	adds	r3, r7, r5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018ba:	197b      	adds	r3, r7, r5
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	e000      	b.n	80018c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b004      	add	sp, #16
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	40022000 	.word	0x40022000
 80018d0:	00001388 	.word	0x00001388
 80018d4:	40021000 	.word	0x40021000
 80018d8:	fffff8ff 	.word	0xfffff8ff
 80018dc:	ffffc7ff 	.word	0xffffc7ff
 80018e0:	08003374 	.word	0x08003374
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b08e      	sub	sp, #56	@ 0x38
 80018f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fa:	230c      	movs	r3, #12
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d014      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001902:	d900      	bls.n	8001906 <HAL_RCC_GetSysClockFreq+0x1a>
 8001904:	e07b      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x112>
 8001906:	2b04      	cmp	r3, #4
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x24>
 800190a:	2b08      	cmp	r3, #8
 800190c:	d00b      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800190e:	e076      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001910:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2210      	movs	r2, #16
 8001916:	4013      	ands	r3, r2
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800191a:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 800191c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800191e:	e07c      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001920:	4b42      	ldr	r3, [pc, #264]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x140>)
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001924:	e079      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b42      	ldr	r3, [pc, #264]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x144>)
 8001928:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800192a:	e076      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800192c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192e:	0c9a      	lsrs	r2, r3, #18
 8001930:	230f      	movs	r3, #15
 8001932:	401a      	ands	r2, r3
 8001934:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x148>)
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800193a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193c:	0d9a      	lsrs	r2, r3, #22
 800193e:	2303      	movs	r3, #3
 8001940:	4013      	ands	r3, r2
 8001942:	3301      	adds	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4013      	ands	r3, r2
 8001950:	d01a      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	4a35      	ldr	r2, [pc, #212]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x144>)
 800195c:	2300      	movs	r3, #0
 800195e:	69b8      	ldr	r0, [r7, #24]
 8001960:	69f9      	ldr	r1, [r7, #28]
 8001962:	f7fe fc7d 	bl	8000260 <__aeabi_lmul>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f7fe fc51 	bl	8000220 <__aeabi_uldivmod>
 800197e:	0002      	movs	r2, r0
 8001980:	000b      	movs	r3, r1
 8001982:	0013      	movs	r3, r2
 8001984:	637b      	str	r3, [r7, #52]	@ 0x34
 8001986:	e037      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001988:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x138>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d01a      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 800199c:	2300      	movs	r3, #0
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	f7fe fc5d 	bl	8000260 <__aeabi_lmul>
 80019a6:	0002      	movs	r2, r0
 80019a8:	000b      	movs	r3, r1
 80019aa:	0010      	movs	r0, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f7fe fc31 	bl	8000220 <__aeabi_uldivmod>
 80019be:	0002      	movs	r2, r0
 80019c0:	000b      	movs	r3, r1
 80019c2:	0013      	movs	r3, r2
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019c6:	e017      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ca:	0018      	movs	r0, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	0019      	movs	r1, r3
 80019d0:	4a16      	ldr	r2, [pc, #88]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x140>)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f7fe fc44 	bl	8000260 <__aeabi_lmul>
 80019d8:	0002      	movs	r2, r0
 80019da:	000b      	movs	r3, r1
 80019dc:	0010      	movs	r0, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	001c      	movs	r4, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	001d      	movs	r5, r3
 80019e8:	0022      	movs	r2, r4
 80019ea:	002b      	movs	r3, r5
 80019ec:	f7fe fc18 	bl	8000220 <__aeabi_uldivmod>
 80019f0:	0002      	movs	r2, r0
 80019f2:	000b      	movs	r3, r1
 80019f4:	0013      	movs	r3, r2
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80019f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019fc:	e00d      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0b5b      	lsrs	r3, r3, #13
 8001a04:	2207      	movs	r2, #7
 8001a06:	4013      	ands	r3, r2
 8001a08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	0212      	lsls	r2, r2, #8
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a18:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b00e      	add	sp, #56	@ 0x38
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	003d0900 	.word	0x003d0900
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	007a1200 	.word	0x007a1200
 8001a34:	0800338c 	.word	0x0800338c

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a50:	f7ff fff2 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a54:	0001      	movs	r1, r0
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	40d9      	lsrs	r1, r3
 8001a66:	000b      	movs	r3, r1
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08003384 	.word	0x08003384

08001a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a7c:	f7ff ffdc 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a80:	0001      	movs	r1, r0
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	0adb      	lsrs	r3, r3, #11
 8001a88:	2207      	movs	r2, #7
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	000b      	movs	r3, r1
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08003384 	.word	0x08003384

08001aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001aac:	2017      	movs	r0, #23
 8001aae:	183b      	adds	r3, r7, r0
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	4013      	ands	r3, r2
 8001abc:	d100      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001abe:	e0c7      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac0:	4b84      	ldr	r3, [pc, #528]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	055b      	lsls	r3, r3, #21
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b81      	ldr	r3, [pc, #516]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad0:	4b80      	ldr	r3, [pc, #512]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0549      	lsls	r1, r1, #21
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ada:	183b      	adds	r3, r7, r0
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d11a      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aec:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b79      	ldr	r3, [pc, #484]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001af2:	2180      	movs	r1, #128	@ 0x80
 8001af4:	0049      	lsls	r1, r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7fe fefd 	bl	80008f8 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	e008      	b.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b04:	f7fe fef8 	bl	80008f8 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0d9      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b70      	ldr	r3, [pc, #448]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b22:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	23c0      	movs	r3, #192	@ 0xc0
 8001b28:	039b      	lsls	r3, r3, #14
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	23c0      	movs	r3, #192	@ 0xc0
 8001b34:	039b      	lsls	r3, r3, #14
 8001b36:	4013      	ands	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d013      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	23c0      	movs	r3, #192	@ 0xc0
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	401a      	ands	r2, r3
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	029b      	lsls	r3, r3, #10
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10a      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b50:	4b60      	ldr	r3, [pc, #384]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d101      	bne.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0b1      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b66:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b6a:	23c0      	movs	r3, #192	@ 0xc0
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d03b      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	23c0      	movs	r3, #192	@ 0xc0
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d033      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d02e      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b92:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	4a51      	ldr	r2, [pc, #324]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ba2:	2180      	movs	r1, #128	@ 0x80
 8001ba4:	0309      	lsls	r1, r1, #12
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bae:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bb0:	494b      	ldr	r1, [pc, #300]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bb6:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d014      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fe97 	bl	80008f8 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bce:	e009      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7fe fe92 	bl	80008f8 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	4a42      	ldr	r2, [pc, #264]	@ (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e072      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001be4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	23c0      	movs	r3, #192	@ 0xc0
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	401a      	ands	r2, r3
 8001c04:	23c0      	movs	r3, #192	@ 0xc0
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001c0c:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a35      	ldr	r2, [pc, #212]	@ (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	23c0      	movs	r3, #192	@ 0xc0
 8001c1c:	039b      	lsls	r3, r3, #14
 8001c1e:	401a      	ands	r2, r3
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	401a      	ands	r2, r3
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c3a:	2317      	movs	r3, #23
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c48:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c4a:	4928      	ldr	r1, [pc, #160]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2204      	movs	r2, #4
 8001c74:	4013      	ands	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	4013      	ands	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2280      	movs	r2, #128	@ 0x80
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b006      	add	sp, #24
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	fffcffff 	.word	0xfffcffff
 8001ce0:	fff7ffff 	.word	0xfff7ffff
 8001ce4:	00001388 	.word	0x00001388
 8001ce8:	ffcfffff 	.word	0xffcfffff
 8001cec:	efffffff 	.word	0xefffffff
 8001cf0:	fffff3ff 	.word	0xfffff3ff
 8001cf4:	ffffcfff 	.word	0xffffcfff
 8001cf8:	fff3ffff 	.word	0xfff3ffff

08001cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e044      	b.n	8001d98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2278      	movs	r2, #120	@ 0x78
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7fe fce1 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2224      	movs	r2, #36	@ 0x24
 8001d2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2101      	movs	r1, #1
 8001d38:	438a      	bics	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 fb94 	bl	800246c <UART_SetConfig>
 8001d44:	0003      	movs	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e024      	b.n	8001d98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fdd1 	bl	8002900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	490d      	ldr	r1, [pc, #52]	@ (8001da0 <HAL_UART_Init+0xa4>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	212a      	movs	r1, #42	@ 0x2a
 8001d7a:	438a      	bics	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 fe69 	bl	8002a68 <UART_CheckIdleState>
 8001d96:	0003      	movs	r3, r0
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	ffffb7ff 	.word	0xffffb7ff

08001da4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	589b      	ldr	r3, [r3, r2]
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d14a      	bne.n	8001e52 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_UART_Receive_IT+0x26>
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e042      	b.n	8001e54 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d109      	bne.n	8001dee <HAL_UART_Receive_IT+0x4a>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d001      	beq.n	8001dee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e032      	b.n	8001e54 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_UART_Receive_IT+0xb8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d020      	beq.n	8001e40 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d019      	beq.n	8001e40 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e10:	613b      	str	r3, [r7, #16]
  return(result);
 8001e12:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	2301      	movs	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f383 8810 	msr	PRIMASK, r3
}
 8001e20:	46c0      	nop			@ (mov r8, r8)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	04c9      	lsls	r1, r1, #19
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f383 8810 	msr	PRIMASK, r3
}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e40:	1dbb      	adds	r3, r7, #6
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 ff1f 	bl	8002c8c <UART_Start_Receive_IT>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	e000      	b.n	8001e54 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
  }
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b008      	add	sp, #32
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004800 	.word	0x40004800

08001e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b0ab      	sub	sp, #172	@ 0xac
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	22a4      	movs	r2, #164	@ 0xa4
 8001e70:	18b9      	adds	r1, r7, r2
 8001e72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	20a0      	movs	r0, #160	@ 0xa0
 8001e7c:	1839      	adds	r1, r7, r0
 8001e7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	219c      	movs	r1, #156	@ 0x9c
 8001e88:	1879      	adds	r1, r7, r1
 8001e8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	18bb      	adds	r3, r7, r2
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a99      	ldr	r2, [pc, #612]	@ (80020f8 <HAL_UART_IRQHandler+0x298>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	2298      	movs	r2, #152	@ 0x98
 8001e98:	18bc      	adds	r4, r7, r2
 8001e9a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001e9c:	18bb      	adds	r3, r7, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d114      	bne.n	8001ece <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00f      	beq.n	8001ece <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001eae:	183b      	adds	r3, r7, r0
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d00a      	beq.n	8001ece <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d100      	bne.n	8001ec2 <HAL_UART_IRQHandler+0x62>
 8001ec0:	e2a0      	b.n	8002404 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	0010      	movs	r0, r2
 8001eca:	4798      	blx	r3
      }
      return;
 8001ecc:	e29a      	b.n	8002404 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ece:	2398      	movs	r3, #152	@ 0x98
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d100      	bne.n	8001eda <HAL_UART_IRQHandler+0x7a>
 8001ed8:	e114      	b.n	8002104 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001eda:	239c      	movs	r3, #156	@ 0x9c
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d106      	bne.n	8001ef4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001ee6:	23a0      	movs	r3, #160	@ 0xa0
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a83      	ldr	r2, [pc, #524]	@ (80020fc <HAL_UART_IRQHandler+0x29c>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <HAL_UART_IRQHandler+0x94>
 8001ef2:	e107      	b.n	8002104 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ef4:	23a4      	movs	r3, #164	@ 0xa4
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d012      	beq.n	8001f26 <HAL_UART_IRQHandler+0xc6>
 8001f00:	23a0      	movs	r3, #160	@ 0xa0
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d00b      	beq.n	8001f26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2284      	movs	r2, #132	@ 0x84
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2184      	movs	r1, #132	@ 0x84
 8001f24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f26:	23a4      	movs	r3, #164	@ 0xa4
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d011      	beq.n	8001f56 <HAL_UART_IRQHandler+0xf6>
 8001f32:	239c      	movs	r3, #156	@ 0x9c
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2202      	movs	r2, #2
 8001f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2284      	movs	r2, #132	@ 0x84
 8001f4a:	589b      	ldr	r3, [r3, r2]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2184      	movs	r1, #132	@ 0x84
 8001f54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f56:	23a4      	movs	r3, #164	@ 0xa4
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d011      	beq.n	8001f86 <HAL_UART_IRQHandler+0x126>
 8001f62:	239c      	movs	r3, #156	@ 0x9c
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2284      	movs	r2, #132	@ 0x84
 8001f7a:	589b      	ldr	r3, [r3, r2]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2184      	movs	r1, #132	@ 0x84
 8001f84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f86:	23a4      	movs	r3, #164	@ 0xa4
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d017      	beq.n	8001fc2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f92:	23a0      	movs	r3, #160	@ 0xa0
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d105      	bne.n	8001faa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f9e:	239c      	movs	r3, #156	@ 0x9c
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2284      	movs	r2, #132	@ 0x84
 8001fb6:	589b      	ldr	r3, [r3, r2]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2184      	movs	r1, #132	@ 0x84
 8001fc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fc2:	23a4      	movs	r3, #164	@ 0xa4
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x198>
 8001fd0:	23a0      	movs	r3, #160	@ 0xa0
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	04db      	lsls	r3, r3, #19
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2284      	movs	r2, #132	@ 0x84
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2184      	movs	r1, #132	@ 0x84
 8001ff6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2284      	movs	r2, #132	@ 0x84
 8001ffc:	589b      	ldr	r3, [r3, r2]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d100      	bne.n	8002004 <HAL_UART_IRQHandler+0x1a4>
 8002002:	e201      	b.n	8002408 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002004:	23a4      	movs	r3, #164	@ 0xa4
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2220      	movs	r2, #32
 800200c:	4013      	ands	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002010:	23a0      	movs	r3, #160	@ 0xa0
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2220      	movs	r2, #32
 8002018:	4013      	ands	r3, r2
 800201a:	d008      	beq.n	800202e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	0010      	movs	r0, r2
 800202c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2284      	movs	r2, #132	@ 0x84
 8002032:	589b      	ldr	r3, [r3, r2]
 8002034:	2194      	movs	r1, #148	@ 0x94
 8002036:	187a      	adds	r2, r7, r1
 8002038:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2240      	movs	r2, #64	@ 0x40
 8002042:	4013      	ands	r3, r2
 8002044:	2b40      	cmp	r3, #64	@ 0x40
 8002046:	d004      	beq.n	8002052 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002048:	187b      	adds	r3, r7, r1
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2228      	movs	r2, #40	@ 0x28
 800204e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002050:	d047      	beq.n	80020e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f000 fee3 	bl	8002e20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2240      	movs	r2, #64	@ 0x40
 8002062:	4013      	ands	r3, r2
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d137      	bne.n	80020d8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002068:	f3ef 8310 	mrs	r3, PRIMASK
 800206c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800206e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002070:	2090      	movs	r0, #144	@ 0x90
 8002072:	183a      	adds	r2, r7, r0
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800207c:	f383 8810 	msr	PRIMASK, r3
}
 8002080:	46c0      	nop			@ (mov r8, r8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	@ 0x40
 800208e:	438a      	bics	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	183b      	adds	r3, r7, r0
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800209a:	f383 8810 	msr	PRIMASK, r3
}
 800209e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <HAL_UART_IRQHandler+0x2a0>)
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7fe fd47 	bl	8000b48 <HAL_DMA_Abort_IT>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d01a      	beq.n	80020f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c8:	0018      	movs	r0, r3
 80020ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020cc:	e012      	b.n	80020f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 f9b7 	bl	8002444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d6:	e00d      	b.n	80020f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f9b2 	bl	8002444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e0:	e008      	b.n	80020f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f9ad 	bl	8002444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2284      	movs	r2, #132	@ 0x84
 80020ee:	2100      	movs	r1, #0
 80020f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80020f2:	e189      	b.n	8002408 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f4:	46c0      	nop			@ (mov r8, r8)
    return;
 80020f6:	e187      	b.n	8002408 <HAL_UART_IRQHandler+0x5a8>
 80020f8:	0000080f 	.word	0x0000080f
 80020fc:	04000120 	.word	0x04000120
 8002100:	08002ee9 	.word	0x08002ee9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002108:	2b01      	cmp	r3, #1
 800210a:	d000      	beq.n	800210e <HAL_UART_IRQHandler+0x2ae>
 800210c:	e13b      	b.n	8002386 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800210e:	23a4      	movs	r3, #164	@ 0xa4
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	4013      	ands	r3, r2
 8002118:	d100      	bne.n	800211c <HAL_UART_IRQHandler+0x2bc>
 800211a:	e134      	b.n	8002386 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800211c:	23a0      	movs	r3, #160	@ 0xa0
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2210      	movs	r2, #16
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_UART_IRQHandler+0x2ca>
 8002128:	e12d      	b.n	8002386 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2240      	movs	r2, #64	@ 0x40
 800213a:	4013      	ands	r3, r2
 800213c:	2b40      	cmp	r3, #64	@ 0x40
 800213e:	d000      	beq.n	8002142 <HAL_UART_IRQHandler+0x2e2>
 8002140:	e0a1      	b.n	8002286 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	217e      	movs	r1, #126	@ 0x7e
 800214c:	187b      	adds	r3, r7, r1
 800214e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002150:	187b      	adds	r3, r7, r1
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d100      	bne.n	800215a <HAL_UART_IRQHandler+0x2fa>
 8002158:	e158      	b.n	800240c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2258      	movs	r2, #88	@ 0x58
 800215e:	5a9b      	ldrh	r3, [r3, r2]
 8002160:	187a      	adds	r2, r7, r1
 8002162:	8812      	ldrh	r2, [r2, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d300      	bcc.n	800216a <HAL_UART_IRQHandler+0x30a>
 8002168:	e150      	b.n	800240c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	187a      	adds	r2, r7, r1
 800216e:	215a      	movs	r1, #90	@ 0x5a
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2220      	movs	r2, #32
 800217e:	4013      	ands	r3, r2
 8002180:	d16f      	bne.n	8002262 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002182:	f3ef 8310 	mrs	r3, PRIMASK
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800218a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800218c:	2301      	movs	r3, #1
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	499e      	ldr	r1, [pc, #632]	@ (800241c <HAL_UART_IRQHandler+0x5bc>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b4:	f3ef 8310 	mrs	r3, PRIMASK
 80021b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80021ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80021be:	2301      	movs	r3, #1
 80021c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c4:	f383 8810 	msr	PRIMASK, r3
}
 80021c8:	46c0      	nop			@ (mov r8, r8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e0:	f383 8810 	msr	PRIMASK, r3
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80021ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80021f0:	2301      	movs	r3, #1
 80021f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f6:	f383 8810 	msr	PRIMASK, r3
}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	438a      	bics	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800220e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2280      	movs	r2, #128	@ 0x80
 800221c:	2120      	movs	r1, #32
 800221e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002226:	f3ef 8310 	mrs	r3, PRIMASK
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002230:	2301      	movs	r3, #1
 8002232:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002236:	f383 8810 	msr	PRIMASK, r3
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2110      	movs	r1, #16
 8002248:	438a      	bics	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800224e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225c:	0018      	movs	r0, r3
 800225e:	f7fe fc33 	bl	8000ac8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2258      	movs	r2, #88	@ 0x58
 800226c:	5a9a      	ldrh	r2, [r3, r2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	215a      	movs	r1, #90	@ 0x5a
 8002272:	5a5b      	ldrh	r3, [r3, r1]
 8002274:	b29b      	uxth	r3, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f000 f8e8 	bl	8002454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002284:	e0c2      	b.n	800240c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2258      	movs	r2, #88	@ 0x58
 800228a:	5a99      	ldrh	r1, [r3, r2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	225a      	movs	r2, #90	@ 0x5a
 8002290:	5a9b      	ldrh	r3, [r3, r2]
 8002292:	b29a      	uxth	r2, r3
 8002294:	208e      	movs	r0, #142	@ 0x8e
 8002296:	183b      	adds	r3, r7, r0
 8002298:	1a8a      	subs	r2, r1, r2
 800229a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	225a      	movs	r2, #90	@ 0x5a
 80022a0:	5a9b      	ldrh	r3, [r3, r2]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d100      	bne.n	80022aa <HAL_UART_IRQHandler+0x44a>
 80022a8:	e0b2      	b.n	8002410 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d100      	bne.n	80022b4 <HAL_UART_IRQHandler+0x454>
 80022b2:	e0ad      	b.n	8002410 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b4:	f3ef 8310 	mrs	r3, PRIMASK
 80022b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022bc:	2488      	movs	r4, #136	@ 0x88
 80022be:	193a      	adds	r2, r7, r4
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f383 8810 	msr	PRIMASK, r3
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4951      	ldr	r1, [pc, #324]	@ (8002420 <HAL_UART_IRQHandler+0x5c0>)
 80022da:	400a      	ands	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ec:	f3ef 8310 	mrs	r3, PRIMASK
 80022f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80022f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f4:	2484      	movs	r4, #132	@ 0x84
 80022f6:	193a      	adds	r2, r7, r4
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	438a      	bics	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	193b      	adds	r3, r7, r4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2280      	movs	r2, #128	@ 0x80
 8002328:	2120      	movs	r1, #32
 800232a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002338:	f3ef 8310 	mrs	r3, PRIMASK
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	2480      	movs	r4, #128	@ 0x80
 8002342:	193a      	adds	r2, r7, r4
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	f383 8810 	msr	PRIMASK, r3
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2110      	movs	r1, #16
 800235e:	438a      	bics	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	193b      	adds	r3, r7, r4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002376:	183b      	adds	r3, r7, r0
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f000 f868 	bl	8002454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002384:	e044      	b.n	8002410 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002386:	23a4      	movs	r3, #164	@ 0xa4
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	035b      	lsls	r3, r3, #13
 8002390:	4013      	ands	r3, r2
 8002392:	d010      	beq.n	80023b6 <HAL_UART_IRQHandler+0x556>
 8002394:	239c      	movs	r3, #156	@ 0x9c
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	03db      	lsls	r3, r3, #15
 800239e:	4013      	ands	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	0352      	lsls	r2, r2, #13
 80023aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 ffa0 	bl	80032f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023b4:	e02f      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80023b6:	23a4      	movs	r3, #164	@ 0xa4
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	4013      	ands	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80023c2:	23a0      	movs	r3, #160	@ 0xa0
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2280      	movs	r2, #128	@ 0x80
 80023ca:	4013      	ands	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01e      	beq.n	8002414 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	0010      	movs	r0, r2
 80023de:	4798      	blx	r3
    }
    return;
 80023e0:	e018      	b.n	8002414 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80023e2:	23a4      	movs	r3, #164	@ 0xa4
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	4013      	ands	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_UART_IRQHandler+0x5b6>
 80023ee:	23a0      	movs	r3, #160	@ 0xa0
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	@ 0x40
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fd8a 	bl	8002f16 <UART_EndTransmit_IT>
    return;
 8002402:	e008      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	e006      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	e004      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
      return;
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	e002      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	e000      	b.n	8002416 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002414:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002416:	46bd      	mov	sp, r7
 8002418:	b02b      	add	sp, #172	@ 0xac
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	fffffeff 	.word	0xfffffeff
 8002420:	fffffedf 	.word	0xfffffedf

08002424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	000a      	movs	r2, r1
 800245e:	1cbb      	adds	r3, r7, #2
 8002460:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800246c:	b5b0      	push	{r4, r5, r7, lr}
 800246e:	b08e      	sub	sp, #56	@ 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002474:	231a      	movs	r3, #26
 8002476:	2218      	movs	r2, #24
 8002478:	189b      	adds	r3, r3, r2
 800247a:	19db      	adds	r3, r3, r7
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	4313      	orrs	r3, r2
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4ab4      	ldr	r2, [pc, #720]	@ (8002770 <UART_SetConfig+0x304>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4aaf      	ldr	r2, [pc, #700]	@ (8002774 <UART_SetConfig+0x308>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4aa9      	ldr	r2, [pc, #676]	@ (8002778 <UART_SetConfig+0x30c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024dc:	4313      	orrs	r3, r2
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4aa5      	ldr	r2, [pc, #660]	@ (800277c <UART_SetConfig+0x310>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4aa1      	ldr	r2, [pc, #644]	@ (8002780 <UART_SetConfig+0x314>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d131      	bne.n	8002564 <UART_SetConfig+0xf8>
 8002500:	4ba0      	ldr	r3, [pc, #640]	@ (8002784 <UART_SetConfig+0x318>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002504:	220c      	movs	r2, #12
 8002506:	4013      	ands	r3, r2
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d01d      	beq.n	8002548 <UART_SetConfig+0xdc>
 800250c:	d823      	bhi.n	8002556 <UART_SetConfig+0xea>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d00c      	beq.n	800252c <UART_SetConfig+0xc0>
 8002512:	d820      	bhi.n	8002556 <UART_SetConfig+0xea>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <UART_SetConfig+0xb2>
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00e      	beq.n	800253a <UART_SetConfig+0xce>
 800251c:	e01b      	b.n	8002556 <UART_SetConfig+0xea>
 800251e:	231b      	movs	r3, #27
 8002520:	2218      	movs	r2, #24
 8002522:	189b      	adds	r3, r3, r2
 8002524:	19db      	adds	r3, r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e065      	b.n	80025f8 <UART_SetConfig+0x18c>
 800252c:	231b      	movs	r3, #27
 800252e:	2218      	movs	r2, #24
 8002530:	189b      	adds	r3, r3, r2
 8002532:	19db      	adds	r3, r3, r7
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e05e      	b.n	80025f8 <UART_SetConfig+0x18c>
 800253a:	231b      	movs	r3, #27
 800253c:	2218      	movs	r2, #24
 800253e:	189b      	adds	r3, r3, r2
 8002540:	19db      	adds	r3, r3, r7
 8002542:	2204      	movs	r2, #4
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e057      	b.n	80025f8 <UART_SetConfig+0x18c>
 8002548:	231b      	movs	r3, #27
 800254a:	2218      	movs	r2, #24
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	2208      	movs	r2, #8
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e050      	b.n	80025f8 <UART_SetConfig+0x18c>
 8002556:	231b      	movs	r3, #27
 8002558:	2218      	movs	r2, #24
 800255a:	189b      	adds	r3, r3, r2
 800255c:	19db      	adds	r3, r3, r7
 800255e:	2210      	movs	r2, #16
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e049      	b.n	80025f8 <UART_SetConfig+0x18c>
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a83      	ldr	r2, [pc, #524]	@ (8002778 <UART_SetConfig+0x30c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d13e      	bne.n	80025ec <UART_SetConfig+0x180>
 800256e:	4b85      	ldr	r3, [pc, #532]	@ (8002784 <UART_SetConfig+0x318>)
 8002570:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002572:	23c0      	movs	r3, #192	@ 0xc0
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	4013      	ands	r3, r2
 8002578:	22c0      	movs	r2, #192	@ 0xc0
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	4293      	cmp	r3, r2
 800257e:	d027      	beq.n	80025d0 <UART_SetConfig+0x164>
 8002580:	22c0      	movs	r2, #192	@ 0xc0
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	4293      	cmp	r3, r2
 8002586:	d82a      	bhi.n	80025de <UART_SetConfig+0x172>
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	4293      	cmp	r3, r2
 800258e:	d011      	beq.n	80025b4 <UART_SetConfig+0x148>
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	4293      	cmp	r3, r2
 8002596:	d822      	bhi.n	80025de <UART_SetConfig+0x172>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <UART_SetConfig+0x13a>
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	00d2      	lsls	r2, r2, #3
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <UART_SetConfig+0x156>
 80025a4:	e01b      	b.n	80025de <UART_SetConfig+0x172>
 80025a6:	231b      	movs	r3, #27
 80025a8:	2218      	movs	r2, #24
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	19db      	adds	r3, r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e021      	b.n	80025f8 <UART_SetConfig+0x18c>
 80025b4:	231b      	movs	r3, #27
 80025b6:	2218      	movs	r2, #24
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	19db      	adds	r3, r3, r7
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e01a      	b.n	80025f8 <UART_SetConfig+0x18c>
 80025c2:	231b      	movs	r3, #27
 80025c4:	2218      	movs	r2, #24
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	19db      	adds	r3, r3, r7
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e013      	b.n	80025f8 <UART_SetConfig+0x18c>
 80025d0:	231b      	movs	r3, #27
 80025d2:	2218      	movs	r2, #24
 80025d4:	189b      	adds	r3, r3, r2
 80025d6:	19db      	adds	r3, r3, r7
 80025d8:	2208      	movs	r2, #8
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e00c      	b.n	80025f8 <UART_SetConfig+0x18c>
 80025de:	231b      	movs	r3, #27
 80025e0:	2218      	movs	r2, #24
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	19db      	adds	r3, r3, r7
 80025e6:	2210      	movs	r2, #16
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e005      	b.n	80025f8 <UART_SetConfig+0x18c>
 80025ec:	231b      	movs	r3, #27
 80025ee:	2218      	movs	r2, #24
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	19db      	adds	r3, r3, r7
 80025f4:	2210      	movs	r2, #16
 80025f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002778 <UART_SetConfig+0x30c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d000      	beq.n	8002604 <UART_SetConfig+0x198>
 8002602:	e084      	b.n	800270e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002604:	231b      	movs	r3, #27
 8002606:	2218      	movs	r2, #24
 8002608:	189b      	adds	r3, r3, r2
 800260a:	19db      	adds	r3, r3, r7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b08      	cmp	r3, #8
 8002610:	d01d      	beq.n	800264e <UART_SetConfig+0x1e2>
 8002612:	dc20      	bgt.n	8002656 <UART_SetConfig+0x1ea>
 8002614:	2b04      	cmp	r3, #4
 8002616:	d015      	beq.n	8002644 <UART_SetConfig+0x1d8>
 8002618:	dc1d      	bgt.n	8002656 <UART_SetConfig+0x1ea>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <UART_SetConfig+0x1b8>
 800261e:	2b02      	cmp	r3, #2
 8002620:	d005      	beq.n	800262e <UART_SetConfig+0x1c2>
 8002622:	e018      	b.n	8002656 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002624:	f7ff fa12 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8002628:	0003      	movs	r3, r0
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800262c:	e01c      	b.n	8002668 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800262e:	4b55      	ldr	r3, [pc, #340]	@ (8002784 <UART_SetConfig+0x318>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2210      	movs	r2, #16
 8002634:	4013      	ands	r3, r2
 8002636:	d002      	beq.n	800263e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002638:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <UART_SetConfig+0x31c>)
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800263c:	e014      	b.n	8002668 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800263e:	4b53      	ldr	r3, [pc, #332]	@ (800278c <UART_SetConfig+0x320>)
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002642:	e011      	b.n	8002668 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002644:	f7ff f952 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8002648:	0003      	movs	r3, r0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800264c:	e00c      	b.n	8002668 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002654:	e008      	b.n	8002668 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800265a:	231a      	movs	r3, #26
 800265c:	2218      	movs	r2, #24
 800265e:	189b      	adds	r3, r3, r2
 8002660:	19db      	adds	r3, r3, r7
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
        break;
 8002666:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d100      	bne.n	8002670 <UART_SetConfig+0x204>
 800266e:	e12f      	b.n	80028d0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	0013      	movs	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	189b      	adds	r3, r3, r2
 800267a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800267c:	429a      	cmp	r2, r3
 800267e:	d305      	bcc.n	800268c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002688:	429a      	cmp	r2, r3
 800268a:	d906      	bls.n	800269a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800268c:	231a      	movs	r3, #26
 800268e:	2218      	movs	r2, #24
 8002690:	189b      	adds	r3, r3, r2
 8002692:	19db      	adds	r3, r3, r7
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e11a      	b.n	80028d0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	000b      	movs	r3, r1
 80026a8:	0e1b      	lsrs	r3, r3, #24
 80026aa:	0010      	movs	r0, r2
 80026ac:	0205      	lsls	r5, r0, #8
 80026ae:	431d      	orrs	r5, r3
 80026b0:	000b      	movs	r3, r1
 80026b2:	021c      	lsls	r4, r3, #8
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	1900      	adds	r0, r0, r4
 80026c6:	4169      	adcs	r1, r5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f7fd fda3 	bl	8000220 <__aeabi_uldivmod>
 80026da:	0002      	movs	r2, r0
 80026dc:	000b      	movs	r3, r1
 80026de:	0013      	movs	r3, r2
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026e4:	23c0      	movs	r3, #192	@ 0xc0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d309      	bcc.n	8002700 <UART_SetConfig+0x294>
 80026ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	035b      	lsls	r3, r3, #13
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d204      	bcs.n	8002700 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e0e7      	b.n	80028d0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002700:	231a      	movs	r3, #26
 8002702:	2218      	movs	r2, #24
 8002704:	189b      	adds	r3, r3, r2
 8002706:	19db      	adds	r3, r3, r7
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e0e0      	b.n	80028d0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	429a      	cmp	r2, r3
 8002718:	d000      	beq.n	800271c <UART_SetConfig+0x2b0>
 800271a:	e082      	b.n	8002822 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800271c:	231b      	movs	r3, #27
 800271e:	2218      	movs	r2, #24
 8002720:	189b      	adds	r3, r3, r2
 8002722:	19db      	adds	r3, r3, r7
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d834      	bhi.n	8002794 <UART_SetConfig+0x328>
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <UART_SetConfig+0x324>)
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002734:	f7ff f98a 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8002738:	0003      	movs	r3, r0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800273c:	e033      	b.n	80027a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800273e:	f7ff f99b 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 8002742:	0003      	movs	r3, r0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002746:	e02e      	b.n	80027a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002748:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <UART_SetConfig+0x318>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d002      	beq.n	8002758 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <UART_SetConfig+0x31c>)
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002756:	e026      	b.n	80027a6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <UART_SetConfig+0x320>)
 800275a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800275c:	e023      	b.n	80027a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800275e:	f7ff f8c5 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8002762:	0003      	movs	r3, r0
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002766:	e01e      	b.n	80027a6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800276e:	e01a      	b.n	80027a6 <UART_SetConfig+0x33a>
 8002770:	efff69f3 	.word	0xefff69f3
 8002774:	ffffcfff 	.word	0xffffcfff
 8002778:	40004800 	.word	0x40004800
 800277c:	fffff4ff 	.word	0xfffff4ff
 8002780:	40004400 	.word	0x40004400
 8002784:	40021000 	.word	0x40021000
 8002788:	003d0900 	.word	0x003d0900
 800278c:	00f42400 	.word	0x00f42400
 8002790:	08003398 	.word	0x08003398
      default:
        pclk = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002798:	231a      	movs	r3, #26
 800279a:	2218      	movs	r2, #24
 800279c:	189b      	adds	r3, r3, r2
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
        break;
 80027a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d100      	bne.n	80027ae <UART_SetConfig+0x342>
 80027ac:	e090      	b.n	80028d0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	18d2      	adds	r2, r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0019      	movs	r1, r3
 80027c0:	0010      	movs	r0, r2
 80027c2:	f7fd fca1 	bl	8000108 <__udivsi3>
 80027c6:	0003      	movs	r3, r0
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d921      	bls.n	8002814 <UART_SetConfig+0x3a8>
 80027d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d21c      	bcs.n	8002814 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027dc:	b29a      	uxth	r2, r3
 80027de:	200e      	movs	r0, #14
 80027e0:	2418      	movs	r4, #24
 80027e2:	1903      	adds	r3, r0, r4
 80027e4:	19db      	adds	r3, r3, r7
 80027e6:	210f      	movs	r1, #15
 80027e8:	438a      	bics	r2, r1
 80027ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2207      	movs	r2, #7
 80027f4:	4013      	ands	r3, r2
 80027f6:	b299      	uxth	r1, r3
 80027f8:	1903      	adds	r3, r0, r4
 80027fa:	19db      	adds	r3, r3, r7
 80027fc:	1902      	adds	r2, r0, r4
 80027fe:	19d2      	adds	r2, r2, r7
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1902      	adds	r2, r0, r4
 800280c:	19d2      	adds	r2, r2, r7
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	e05d      	b.n	80028d0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002814:	231a      	movs	r3, #26
 8002816:	2218      	movs	r2, #24
 8002818:	189b      	adds	r3, r3, r2
 800281a:	19db      	adds	r3, r3, r7
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e056      	b.n	80028d0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002822:	231b      	movs	r3, #27
 8002824:	2218      	movs	r2, #24
 8002826:	189b      	adds	r3, r3, r2
 8002828:	19db      	adds	r3, r3, r7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d822      	bhi.n	8002876 <UART_SetConfig+0x40a>
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <UART_SetConfig+0x484>)
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800283a:	f7ff f907 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 800283e:	0003      	movs	r3, r0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002842:	e021      	b.n	8002888 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002844:	f7ff f918 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 8002848:	0003      	movs	r3, r0
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800284c:	e01c      	b.n	8002888 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800284e:	4b29      	ldr	r3, [pc, #164]	@ (80028f4 <UART_SetConfig+0x488>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2210      	movs	r2, #16
 8002854:	4013      	ands	r3, r2
 8002856:	d002      	beq.n	800285e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002858:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <UART_SetConfig+0x48c>)
 800285a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800285c:	e014      	b.n	8002888 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800285e:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <UART_SetConfig+0x490>)
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002862:	e011      	b.n	8002888 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002864:	f7ff f842 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8002868:	0003      	movs	r3, r0
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800286c:	e00c      	b.n	8002888 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002874:	e008      	b.n	8002888 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800287a:	231a      	movs	r3, #26
 800287c:	2218      	movs	r2, #24
 800287e:	189b      	adds	r3, r3, r2
 8002880:	19db      	adds	r3, r3, r7
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
        break;
 8002886:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d020      	beq.n	80028d0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	085a      	lsrs	r2, r3, #1
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	18d2      	adds	r2, r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0019      	movs	r1, r3
 800289e:	0010      	movs	r0, r2
 80028a0:	f7fd fc32 	bl	8000108 <__udivsi3>
 80028a4:	0003      	movs	r3, r0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	d90a      	bls.n	80028c4 <UART_SetConfig+0x458>
 80028ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	025b      	lsls	r3, r3, #9
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d205      	bcs.n	80028c4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	e005      	b.n	80028d0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80028c4:	231a      	movs	r3, #26
 80028c6:	2218      	movs	r2, #24
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	19db      	adds	r3, r3, r7
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2200      	movs	r2, #0
 80028d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2200      	movs	r2, #0
 80028da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80028dc:	231a      	movs	r3, #26
 80028de:	2218      	movs	r2, #24
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	19db      	adds	r3, r3, r7
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b00e      	add	sp, #56	@ 0x38
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	080033bc 	.word	0x080033bc
 80028f4:	40021000 	.word	0x40021000
 80028f8:	003d0900 	.word	0x003d0900
 80028fc:	00f42400 	.word	0x00f42400

08002900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	d00b      	beq.n	800292a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a4a      	ldr	r2, [pc, #296]	@ (8002a44 <UART_AdvFeatureConfig+0x144>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a43      	ldr	r2, [pc, #268]	@ (8002a48 <UART_AdvFeatureConfig+0x148>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2204      	movs	r2, #4
 8002952:	4013      	ands	r3, r2
 8002954:	d00b      	beq.n	800296e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a4c <UART_AdvFeatureConfig+0x14c>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	2208      	movs	r2, #8
 8002974:	4013      	ands	r3, r2
 8002976:	d00b      	beq.n	8002990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a34      	ldr	r2, [pc, #208]	@ (8002a50 <UART_AdvFeatureConfig+0x150>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	2210      	movs	r2, #16
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <UART_AdvFeatureConfig+0x154>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2220      	movs	r2, #32
 80029b8:	4013      	ands	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4a25      	ldr	r2, [pc, #148]	@ (8002a58 <UART_AdvFeatureConfig+0x158>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <UART_AdvFeatureConfig+0x15c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	035b      	lsls	r3, r3, #13
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d10b      	bne.n	8002a1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <UART_AdvFeatureConfig+0x160>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a64 <UART_AdvFeatureConfig+0x164>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	fffdffff 	.word	0xfffdffff
 8002a48:	fffeffff 	.word	0xfffeffff
 8002a4c:	fffbffff 	.word	0xfffbffff
 8002a50:	ffff7fff 	.word	0xffff7fff
 8002a54:	ffffefff 	.word	0xffffefff
 8002a58:	ffffdfff 	.word	0xffffdfff
 8002a5c:	ffefffff 	.word	0xffefffff
 8002a60:	ff9fffff 	.word	0xff9fffff
 8002a64:	fff7ffff 	.word	0xfff7ffff

08002a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b092      	sub	sp, #72	@ 0x48
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2284      	movs	r2, #132	@ 0x84
 8002a74:	2100      	movs	r1, #0
 8002a76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a78:	f7fd ff3e 	bl	80008f8 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d12c      	bne.n	8002ae8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	0391      	lsls	r1, r2, #14
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4a46      	ldr	r2, [pc, #280]	@ (8002bb0 <UART_CheckIdleState+0x148>)
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f000 f88c 	bl	8002bb8 <UART_WaitOnFlagUntilTimeout>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d021      	beq.n	8002ae8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aae:	2301      	movs	r3, #1
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	f383 8810 	msr	PRIMASK, r3
}
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2278      	movs	r2, #120	@ 0x78
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e05f      	b.n	8002ba8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d146      	bne.n	8002b84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	03d1      	lsls	r1, r2, #15
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb0 <UART_CheckIdleState+0x148>)
 8002b00:	9200      	str	r2, [sp, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f000 f858 	bl	8002bb8 <UART_WaitOnFlagUntilTimeout>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d03b      	beq.n	8002b84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b16:	2301      	movs	r3, #1
 8002b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f383 8810 	msr	PRIMASK, r3
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4921      	ldr	r1, [pc, #132]	@ (8002bb4 <UART_CheckIdleState+0x14c>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b42:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	438a      	bics	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2280      	movs	r2, #128	@ 0x80
 8002b74:	2120      	movs	r1, #32
 8002b76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2278      	movs	r2, #120	@ 0x78
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e011      	b.n	8002ba8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	2120      	movs	r1, #32
 8002b90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2278      	movs	r2, #120	@ 0x78
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b010      	add	sp, #64	@ 0x40
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	01ffffff 	.word	0x01ffffff
 8002bb4:	fffffedf 	.word	0xfffffedf

08002bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc8:	e04b      	b.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	d048      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fd fe92 	bl	80008f8 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04b      	b.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d035      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d111      	bne.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2208      	movs	r2, #8
 8002c0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f906 	bl	8002e20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2284      	movs	r2, #132	@ 0x84
 8002c18:	2108      	movs	r1, #8
 8002c1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2278      	movs	r2, #120	@ 0x78
 8002c20:	2100      	movs	r1, #0
 8002c22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e02c      	b.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	401a      	ands	r2, r3
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d112      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f8e9 	bl	8002e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2284      	movs	r2, #132	@ 0x84
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2278      	movs	r2, #120	@ 0x78
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e00f      	b.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	425a      	negs	r2, r3
 8002c72:	4153      	adcs	r3, r2
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	001a      	movs	r2, r3
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d0a4      	beq.n	8002bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	@ 0x40
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1dba      	adds	r2, r7, #6
 8002ca4:	2158      	movs	r1, #88	@ 0x58
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1dba      	adds	r2, r7, #6
 8002cae:	215a      	movs	r1, #90	@ 0x5a
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	015b      	lsls	r3, r3, #5
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10d      	bne.n	8002ce2 <UART_Start_Receive_IT+0x56>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <UART_Start_Receive_IT+0x4c>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	225c      	movs	r2, #92	@ 0x5c
 8002cd2:	4950      	ldr	r1, [pc, #320]	@ (8002e14 <UART_Start_Receive_IT+0x188>)
 8002cd4:	5299      	strh	r1, [r3, r2]
 8002cd6:	e02e      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	225c      	movs	r2, #92	@ 0x5c
 8002cdc:	21ff      	movs	r1, #255	@ 0xff
 8002cde:	5299      	strh	r1, [r3, r2]
 8002ce0:	e029      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <UART_Start_Receive_IT+0x7a>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <UART_Start_Receive_IT+0x70>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	225c      	movs	r2, #92	@ 0x5c
 8002cf6:	21ff      	movs	r1, #255	@ 0xff
 8002cf8:	5299      	strh	r1, [r3, r2]
 8002cfa:	e01c      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	225c      	movs	r2, #92	@ 0x5c
 8002d00:	217f      	movs	r1, #127	@ 0x7f
 8002d02:	5299      	strh	r1, [r3, r2]
 8002d04:	e017      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	055b      	lsls	r3, r3, #21
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10d      	bne.n	8002d2e <UART_Start_Receive_IT+0xa2>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <UART_Start_Receive_IT+0x98>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	225c      	movs	r2, #92	@ 0x5c
 8002d1e:	217f      	movs	r1, #127	@ 0x7f
 8002d20:	5299      	strh	r1, [r3, r2]
 8002d22:	e008      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	225c      	movs	r2, #92	@ 0x5c
 8002d28:	213f      	movs	r1, #63	@ 0x3f
 8002d2a:	5299      	strh	r1, [r3, r2]
 8002d2c:	e003      	b.n	8002d36 <UART_Start_Receive_IT+0xaa>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	225c      	movs	r2, #92	@ 0x5c
 8002d32:	2100      	movs	r1, #0
 8002d34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2284      	movs	r2, #132	@ 0x84
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2280      	movs	r2, #128	@ 0x80
 8002d42:	2122      	movs	r1, #34	@ 0x22
 8002d44:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d46:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	f383 8810 	msr	PRIMASK, r3
}
 8002d76:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d107      	bne.n	8002d94 <UART_Start_Receive_IT+0x108>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <UART_Start_Receive_IT+0x18c>)
 8002d90:	669a      	str	r2, [r3, #104]	@ 0x68
 8002d92:	e002      	b.n	8002d9a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a21      	ldr	r2, [pc, #132]	@ (8002e1c <UART_Start_Receive_IT+0x190>)
 8002d98:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da2:	f3ef 8310 	mrs	r3, PRIMASK
 8002da6:	61fb      	str	r3, [r7, #28]
  return(result);
 8002da8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dac:	2301      	movs	r3, #1
 8002dae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2190      	movs	r1, #144	@ 0x90
 8002dc4:	0049      	lsls	r1, r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	e018      	b.n	8002e08 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	613b      	str	r3, [r7, #16]
  return(result);
 8002ddc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002de0:	2301      	movs	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f383 8810 	msr	PRIMASK, r3
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2120      	movs	r1, #32
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b010      	add	sp, #64	@ 0x40
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	000001ff 	.word	0x000001ff
 8002e18:	08003131 	.word	0x08003131
 8002e1c:	08002f6d 	.word	0x08002f6d

08002e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	@ 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e32:	2301      	movs	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4926      	ldr	r1, [pc, #152]	@ (8002ee4 <UART_EndRxTransfer+0xc4>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	623b      	str	r3, [r7, #32]
  return(result);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e64:	2301      	movs	r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d118      	bne.n	8002ec6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2110      	movs	r1, #16
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	2120      	movs	r1, #32
 8002ecc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b00e      	add	sp, #56	@ 0x38
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	fffffedf 	.word	0xfffffedf

08002ee8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	225a      	movs	r2, #90	@ 0x5a
 8002efa:	2100      	movs	r1, #0
 8002efc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2252      	movs	r2, #82	@ 0x52
 8002f02:	2100      	movs	r1, #0
 8002f04:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fa9b 	bl	8002444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f24:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f383 8810 	msr	PRIMASK, r3
}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fa60 	bl	8002424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b006      	add	sp, #24
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b094      	sub	sp, #80	@ 0x50
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002f74:	204e      	movs	r0, #78	@ 0x4e
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	215c      	movs	r1, #92	@ 0x5c
 8002f7c:	5a52      	ldrh	r2, [r2, r1]
 8002f7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2280      	movs	r2, #128	@ 0x80
 8002f84:	589b      	ldr	r3, [r3, r2]
 8002f86:	2b22      	cmp	r3, #34	@ 0x22
 8002f88:	d000      	beq.n	8002f8c <UART_RxISR_8BIT+0x20>
 8002f8a:	e0bf      	b.n	800310c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f92:	214c      	movs	r1, #76	@ 0x4c
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b2d9      	uxtb	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	400a      	ands	r2, r1
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	225a      	movs	r2, #90	@ 0x5a
 8002fbc:	5a9b      	ldrh	r3, [r3, r2]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b299      	uxth	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	225a      	movs	r2, #90	@ 0x5a
 8002fc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	225a      	movs	r2, #90	@ 0x5a
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d000      	beq.n	8002fd8 <UART_RxISR_8BIT+0x6c>
 8002fd6:	e0a1      	b.n	800311c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			@ (mov r8, r8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	494a      	ldr	r1, [pc, #296]	@ (8003124 <UART_RxISR_8BIT+0x1b8>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300a:	f3ef 8310 	mrs	r3, PRIMASK
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003012:	647b      	str	r3, [r7, #68]	@ 0x44
 8003014:	2301      	movs	r3, #1
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	2120      	movs	r1, #32
 8003042:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a34      	ldr	r2, [pc, #208]	@ (8003128 <UART_RxISR_8BIT+0x1bc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	4013      	ands	r3, r2
 8003066:	d018      	beq.n	800309a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	61bb      	str	r3, [r7, #24]
  return(result);
 800306e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003070:	643b      	str	r3, [r7, #64]	@ 0x40
 8003072:	2301      	movs	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4928      	ldr	r1, [pc, #160]	@ (800312c <UART_RxISR_8BIT+0x1c0>)
 800308a:	400a      	ands	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d12f      	bne.n	8003102 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80030ae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030b2:	2301      	movs	r3, #1
 80030b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2110      	movs	r1, #16
 80030ca:	438a      	bics	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d103      	bne.n	80030f0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2258      	movs	r2, #88	@ 0x58
 80030f4:	5a9a      	ldrh	r2, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0011      	movs	r1, r2
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7ff f9aa 	bl	8002454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003100:	e00c      	b.n	800311c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff f995 	bl	8002434 <HAL_UART_RxCpltCallback>
}
 800310a:	e007      	b.n	800311c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2108      	movs	r1, #8
 8003118:	430a      	orrs	r2, r1
 800311a:	619a      	str	r2, [r3, #24]
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b014      	add	sp, #80	@ 0x50
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fffffedf 	.word	0xfffffedf
 8003128:	40004800 	.word	0x40004800
 800312c:	fbffffff 	.word	0xfbffffff

08003130 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b094      	sub	sp, #80	@ 0x50
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003138:	204e      	movs	r0, #78	@ 0x4e
 800313a:	183b      	adds	r3, r7, r0
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	215c      	movs	r1, #92	@ 0x5c
 8003140:	5a52      	ldrh	r2, [r2, r1]
 8003142:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	589b      	ldr	r3, [r3, r2]
 800314a:	2b22      	cmp	r3, #34	@ 0x22
 800314c:	d000      	beq.n	8003150 <UART_RxISR_16BIT+0x20>
 800314e:	e0bf      	b.n	80032d0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003156:	214c      	movs	r1, #76	@ 0x4c
 8003158:	187b      	adds	r3, r7, r1
 800315a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003160:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003162:	187b      	adds	r3, r7, r1
 8003164:	183a      	adds	r2, r7, r0
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	4013      	ands	r3, r2
 800316c:	b29a      	uxth	r2, r3
 800316e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003170:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	225a      	movs	r2, #90	@ 0x5a
 8003180:	5a9b      	ldrh	r3, [r3, r2]
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b299      	uxth	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	225a      	movs	r2, #90	@ 0x5a
 800318c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	225a      	movs	r2, #90	@ 0x5a
 8003192:	5a9b      	ldrh	r3, [r3, r2]
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d000      	beq.n	800319c <UART_RxISR_16BIT+0x6c>
 800319a:	e0a1      	b.n	80032e0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	623b      	str	r3, [r7, #32]
  return(result);
 80031a2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a6:	2301      	movs	r3, #1
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	494a      	ldr	r1, [pc, #296]	@ (80032e8 <UART_RxISR_16BIT+0x1b8>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ce:	f3ef 8310 	mrs	r3, PRIMASK
 80031d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80031d8:	2301      	movs	r3, #1
 80031da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	438a      	bics	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fa:	f383 8810 	msr	PRIMASK, r3
}
 80031fe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	2120      	movs	r1, #32
 8003206:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a34      	ldr	r2, [pc, #208]	@ (80032ec <UART_RxISR_16BIT+0x1bc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	4013      	ands	r3, r2
 800322a:	d018      	beq.n	800325e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322c:	f3ef 8310 	mrs	r3, PRIMASK
 8003230:	617b      	str	r3, [r7, #20]
  return(result);
 8003232:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f383 8810 	msr	PRIMASK, r3
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4928      	ldr	r1, [pc, #160]	@ (80032f0 <UART_RxISR_16BIT+0x1c0>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	2b01      	cmp	r3, #1
 8003264:	d12f      	bne.n	80032c6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326c:	f3ef 8310 	mrs	r3, PRIMASK
 8003270:	60bb      	str	r3, [r7, #8]
  return(result);
 8003272:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003276:	2301      	movs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2110      	movs	r1, #16
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f383 8810 	msr	PRIMASK, r3
}
 800329c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2210      	movs	r2, #16
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d103      	bne.n	80032b4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2210      	movs	r2, #16
 80032b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2258      	movs	r2, #88	@ 0x58
 80032b8:	5a9a      	ldrh	r2, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0011      	movs	r1, r2
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff f8c8 	bl	8002454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032c4:	e00c      	b.n	80032e0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff f8b3 	bl	8002434 <HAL_UART_RxCpltCallback>
}
 80032ce:	e007      	b.n	80032e0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2108      	movs	r1, #8
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b014      	add	sp, #80	@ 0x50
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	fffffedf 	.word	0xfffffedf
 80032ec:	40004800 	.word	0x40004800
 80032f0:	fbffffff 	.word	0xfbffffff

080032f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <memset>:
 8003304:	0003      	movs	r3, r0
 8003306:	1882      	adds	r2, r0, r2
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	7019      	strb	r1, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2600      	movs	r6, #0
 8003318:	4c0c      	ldr	r4, [pc, #48]	@ (800334c <__libc_init_array+0x38>)
 800331a:	4d0d      	ldr	r5, [pc, #52]	@ (8003350 <__libc_init_array+0x3c>)
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	2600      	movs	r6, #0
 8003326:	f000 f819 	bl	800335c <_init>
 800332a:	4c0a      	ldr	r4, [pc, #40]	@ (8003354 <__libc_init_array+0x40>)
 800332c:	4d0a      	ldr	r5, [pc, #40]	@ (8003358 <__libc_init_array+0x44>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	00b3      	lsls	r3, r6, #2
 800333a:	58eb      	ldr	r3, [r5, r3]
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	00b3      	lsls	r3, r6, #2
 8003344:	58eb      	ldr	r3, [r5, r3]
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080033e8 	.word	0x080033e8
 8003350:	080033e8 	.word	0x080033e8
 8003354:	080033ec 	.word	0x080033ec
 8003358:	080033e8 	.word	0x080033e8

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
