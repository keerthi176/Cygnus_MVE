/*******************************************************************************
*
* E M B E D D E D   W I Z A R D   P R O J E C T
*
*                                                Copyright (c) TARA Systems GmbH
*                                    written by Paul Banach and Manfred Schweyer
*
********************************************************************************
*
* This file was generated automatically by Embedded Wizard Studio.
*
* Please do not make any modifications of this file! The modifications are lost
* when the file is generated again by Embedded Wizard Studio!
*
* The template of this heading text can be found in the file 'head.ewt' in the
* directory 'Platforms' of your Embedded Wizard installation directory. If you
* wish to adapt this text, please copy the template file 'head.ewt' into your
* project directory and edit the copy only. Please avoid any modifications of
* the original template file!
*
* Version  : 9.00
* Profile  : STM32F746
* Platform : STM.STM32.RGB565
*
*******************************************************************************/

#include "ewlocale.h"
#include "_ApplicationAccess.h"
#include "_ApplicationAccesssPopup.h"
#include "_ApplicationAlarmRowItem.h"
#include "_ApplicationAlarms.h"
#include "_ApplicationApplication.h"
#include "_ApplicationButton.h"
#include "_ApplicationCAEAction.h"
#include "_ApplicationCAECompare.h"
#include "_ApplicationCAEComponent.h"
#include "_ApplicationCAEDayNight.h"
#include "_ApplicationCAEDevice.h"
#include "_ApplicationCAEGate.h"
#include "_ApplicationCAEGateAND.h"
#include "_ApplicationCAEGateOR.h"
#include "_ApplicationCAEModule.h"
#include "_ApplicationCAEName.h"
#include "_ApplicationCAEZone.h"
#include "_ApplicationCAEZoneFireAlarm.h"
#include "_ApplicationCAEZoneSmokeDetectors.h"
#include "_ApplicationCauseAndEffects.h"
#include "_ApplicationConfirmPopup.h"
#include "_ApplicationDFUPopup.h"
#include "_ApplicationDatePicker.h"
#include "_ApplicationDevice.h"
#include "_ApplicationDeviceClass.h"
#include "_ApplicationDeviceConfig.h"
#include "_ApplicationDeviceInfo.h"
#include "_ApplicationDeviceItem.h"
#include "_ApplicationDisable.h"
#include "_ApplicationDisableChannelItem.h"
#include "_ApplicationDisableItem.h"
#include "_ApplicationDisablePopup.h"
#include "_ApplicationDisableUnitItem.h"
#include "_ApplicationDisableZoneItem.h"
#include "_ApplicationDisablementItem.h"
#include "_ApplicationDisablements.h"
#include "_ApplicationDisplayPopup.h"
#include "_ApplicationDropDownMenu.h"
#include "_ApplicationDropMenuItem.h"
#include "_ApplicationDynamicAreaHead.h"
#include "_ApplicationEnableDisable.h"
#include "_ApplicationEventItem.h"
#include "_ApplicationEvents.h"
#include "_ApplicationExportConfigPopup.h"
#include "_ApplicationFaultItem.h"
#include "_ApplicationFaults.h"
#include "_ApplicationFlatCheckBox.h"
#include "_ApplicationImportConfigPopup.h"
#include "_ApplicationInputAction.h"
#include "_ApplicationInputChannel.h"
#include "_ApplicationInputChannels.h"
#include "_ApplicationInputDelay.h"
#include "_ApplicationInputItem.h"
#include "_ApplicationInputSignal.h"
#include "_ApplicationKey.h"
#include "_ApplicationKeyBmp.h"
#include "_ApplicationKeyLetter.h"
#include "_ApplicationKeySwitch.h"
#include "_ApplicationKeyboard.h"
#include "_ApplicationKeypadKey.h"
#include "_ApplicationKeypadPopup.h"
#include "_ApplicationLEDPopup.h"
#include "_ApplicationLevelAccess.h"
#include "_ApplicationLibClass.h"
#include "_ApplicationLogItem.h"
#include "_ApplicationLogPopup.h"
#include "_ApplicationMattsKeyboard.h"
#include "_ApplicationMenuItem.h"
#include "_ApplicationMeshNCU.h"
#include "_ApplicationMeshTree.h"
#include "_ApplicationMeshUnit.h"
#include "_ApplicationMeshUnitItem.h"
#include "_ApplicationModify.h"
#include "_ApplicationModifyPopup.h"
#include "_ApplicationNumboard.h"
#include "_ApplicationOnTest.h"
#include "_ApplicationOnTestItem.h"
#include "_ApplicationOutputAction.h"
#include "_ApplicationOutputChannel.h"
#include "_ApplicationOutputChannels.h"
#include "_ApplicationOutputDelays.h"
#include "_ApplicationOutputItem.h"
#include "_ApplicationOutputSignal.h"
#include "_ApplicationParamSlider.h"
#include "_ApplicationParamSpecific.h"
#include "_ApplicationParamToggle.h"
#include "_ApplicationParameter.h"
#include "_ApplicationPhoneNumber.h"
#include "_ApplicationPopup.h"
#include "_ApplicationProgress.h"
#include "_ApplicationProgressArrow.h"
#include "_ApplicationProgressPopup.h"
#include "_ApplicationRoundBox.h"
#include "_ApplicationSaveSitePopup.h"
#include "_ApplicationSetTimePopup.h"
#include "_ApplicationSettings.h"
#include "_ApplicationSmallDropDownMenu.h"
#include "_ApplicationSmallDropDownMenuList.h"
#include "_ApplicationSmallDropMenuItem.h"
#include "_ApplicationSystemPage.h"
#include "_ApplicationTabButton.h"
#include "_ApplicationTabButtonPull.h"
#include "_ApplicationTest.h"
#include "_ApplicationTestChannelItem.h"
#include "_ApplicationTestItem.h"
#include "_ApplicationTestPopup.h"
#include "_ApplicationTestUnitItem.h"
#include "_ApplicationTestZoneItem.h"
#include "_ApplicationTextEditor.h"
#include "_ApplicationTextPopup.h"
#include "_ApplicationTimePicker.h"
#include "_ApplicationTreeView.h"
#include "_ApplicationWritable.h"
#include "_ApplicationZoneToggle.h"
#include "_CoreGroup.h"
#include "_CoreKeyPressHandler.h"
#include "_CoreOutline.h"
#include "_CoreRoot.h"
#include "_CoreSimpleTouchHandler.h"
#include "_CoreSlideTouchHandler.h"
#include "_CoreSystemEvent.h"
#include "_CoreSystemEventHandler.h"
#include "_CoreTime.h"
#include "_CoreTimer.h"
#include "_CoreVerticalList.h"
#include "_CoreView.h"
#include "_EffectsBoolEffect.h"
#include "_EffectsInt32Effect.h"
#include "_EffectsPointEffect.h"
#include "_FlatActionButton.h"
#include "_GraphicsAttrSet.h"
#include "_GraphicsCanvas.h"
#include "_GraphicsPath.h"
#include "_ResourcesBitmap.h"
#include "_ResourcesFont.h"
#include "_ViewsAttrText.h"
#include "_ViewsBevel.h"
#include "_ViewsBorder.h"
#include "_ViewsFillPath.h"
#include "_ViewsImage.h"
#include "_ViewsLine.h"
#include "_ViewsRectangle.h"
#include "_ViewsStrokePath.h"
#include "_ViewsText.h"
#include "_ViewsWarpGroup.h"
#include "_WidgetSetHorizontalSlider.h"
#include "_WidgetSetHorizontalSliderConfig.h"
#include "_WidgetSetHorizontalValueBar.h"
#include "_WidgetSetHorizontalValueBarConfig.h"
#include "_WidgetSetPushButton.h"
#include "_WidgetSetPushButtonConfig.h"
#include "_WidgetSetRadioButton.h"
#include "_WidgetSetRadioButtonConfig.h"
#include "_WidgetSetToggleButton.h"
#include "_WidgetSetToggleButtonConfig.h"
#include "_WidgetSetVerticalScrollbar.h"
#include "_WidgetSetVerticalScrollbarConfig.h"
#include "_XFlatCheckBox.h"
#include "Application.h"
#include "Core.h"
#include "Effects.h"
#include "Flat.h"
#include "Graphics.h"
#include "OldResources.h"
#include "Resources.h"
#include "Steel.h"
#include "Templates.h"
#include "Views.h"
#include "WidgetSet.h"
#include "XFlat.h"

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault0[] =
{
  0x00000434, /* ratio 52.04 % */
  0xB8001500, 0x00000452, 0x00DE002D, 0x0CA00370, 0x62001000, 0x60D00418, 0x43004160,
  0x0869B000, 0x39000C20, 0xD104010F, 0x05A0D248, 0x0065068B, 0x05C00180, 0x012D1C80,
  0x112964A8, 0x2A894426, 0x30044475, 0x9ECE8003, 0x40560D12, 0x000F6009, 0xD0010B33,
  0x4FA00991, 0x48630051, 0xD4E89482, 0x1F348008, 0x2899CE39, 0x3851A881, 0x7546B31D,
  0xD84ED05A, 0x2EC275A8, 0x83706875, 0x9749A3D7, 0x35FA74B2, 0x00B1C82C, 0xBB48009A,
  0xBD90A436, 0xE604F400, 0x5BE4D208, 0xAA970CA4, 0xEA550BA4, 0xD361AACE, 0xD5BA5C6E,
  0x71C38760, 0xBA8D3F1F, 0x90D36A71, 0xD802AE44, 0x490C51EA, 0x26386D87, 0x02F13D1E,
  0x378BD5E6, 0xE00AA63B, 0x54885249, 0xC89D2AB4, 0x9EEEF5E1, 0xA567398C, 0x1A297B6D,
  0xAACB21C2, 0xC0195DDE, 0x3D60B783, 0x452CFDDE, 0x06A5C3B7, 0xDBB74049, 0xD114E9D8,
  0x8C321D1B, 0x4845F0EA, 0x7F7F88A3, 0x4D75191E, 0x4E778552, 0xE0032003, 0x1083470C,
  0x0EEF4BB6, 0xFAC24980, 0x90C6D921, 0x64110241, 0x398D7B10, 0x5D7355B4, 0x41400819,
  0x9F26950C, 0x4561A179, 0x85A6001A, 0x0E50D137, 0x5A51E466, 0xD104395B, 0x07D10C48,
  0x21484151, 0x945450E5, 0x5100844D, 0x9BB829B9, 0xF5100C41, 0x61BB75DD, 0xCD7D90C5,
  0x7FE1D455, 0x9585210C, 0xC481697D, 0x5E050016, 0xAC1E5DF4, 0x811A95F5, 0x10A5E944,
  0xC521587D, 0x101341A4, 0x48000255, 0x96C004F8, 0xE5B4B97A, 0xE96D1077, 0x8C009951,
  0x0644DF30, 0x9B1C6510, 0x1D856D44, 0x583A6D00, 0x820E9C22, 0x07419F44, 0x69A68510,
  0xE0E44106, 0x75A50A77, 0x6D1E4427, 0x5B6A5FB4, 0x42948441, 0x90E44120, 0xA5A11E59,
  0x310A6896, 0x1144C3F4, 0x8C9D5510, 0x64B44238, 0xB6A51C93, 0x5E0D41A9, 0xF6429FE4,
  0x91921A65, 0x1801C400, 0xF9EEB056, 0x64495125, 0x114810E6, 0x55910492, 0x1C76B28A,
  0x14861644, 0xF558481F, 0x20581105, 0x8B17D429, 0x113AD91C, 0x00010100, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault1[] =
{
  0x00000406, /* ratio 50.49 % */
  0xB8000B00, 0x00000452, 0x54010610, 0xC0105818, 0x0063001E, 0x072001B0, 0x7D000C40,
  0x50015000, 0x001E0006, 0x043A0E74, 0x1B800660, 0x60600090, 0xA180884C, 0x66001441,
  0x229004C4, 0x2F8240A1, 0x99A4BA6D, 0x8DCEC2F0, 0xAC863F1D, 0x448C2003, 0x02384491,
  0x22910398, 0xE0003480, 0xC6FA84A0, 0x4A9FCB24, 0xB0942685, 0xAA800B53, 0xBC223B27,
  0x558AB088, 0xCA1121A8, 0x2B906998, 0xD6008B4E, 0x132998EA, 0x2F8BCCA1, 0x7BCDAEE0,
  0x05424711, 0x2000853B, 0xD824321A, 0x06B00F84, 0x21F08945, 0xCE0036D4, 0xB0695CA4,
  0x62A35601, 0x8C260800, 0x0EC1B0F2, 0x3D14913B, 0xE8CEF13A, 0x8858003C, 0x70F4E234,
  0x8999005A, 0xE6489D42, 0x6AC955A9, 0x99D84613, 0xCC532A14, 0x3002C547, 0x48AD127B,
  0x3A761483, 0x68D22AF9, 0xED5090C4, 0x74684528, 0x908AD1A2, 0xB05C1A99, 0xA6528A53,
  0xAC9E8955, 0x71277DBD, 0x56AC6B00, 0x60D27D35, 0xC3CCAE82, 0xFDC0071E, 0x67B2C22D,
  0x6DE6EB19, 0xE0EC37FB, 0x98757922, 0x801D0670, 0x15525555, 0x561253B8, 0x42106421,
  0x9CC10D6F, 0x5555FA78, 0x89A47512, 0x556414C4, 0x6D5C27A5, 0xD1D4851D, 0xA455CC73,
  0xC00E001D, 0x0C48A037, 0x6715249E, 0xC505BDE5, 0x344DF268, 0xBE294256, 0x1C000535,
  0x001D37A2, 0xD2A5263B, 0x14ED9545, 0x51088644, 0x8089DC68, 0x55A025BD, 0xD090D9C2,
  0x24153B06, 0x8D83739D, 0xB148A226, 0x835864A1, 0x11D53951, 0x44754C53, 0xC989001E,
  0x3652A348, 0x9862D002, 0xD3B7D230, 0x28D5468C, 0x31065AD2, 0x146B13B0, 0x55954892,
  0x16F95106, 0x09F5A313, 0x55221A00, 0x1E445554, 0x4214C4A2, 0x5C66994C, 0x68DE8844,
  0x1D6F6ED0, 0x157C94A1, 0x55A2C755, 0xE794A22F, 0x8A4A3B4E, 0x1122A512, 0x0D934009,
  0x421C679D, 0x50942652, 0x00000040, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault2[] =
{
  0x00000418, /* ratio 50.38 % */
  0xB8001500, 0x00000452, 0x00DE002D, 0x0CA00370, 0x68001000, 0x60800418, 0x4F004160,
  0x4001D400, 0x0844E1E7, 0x690A0D16, 0x800C2008, 0x7A170931, 0x0D200264, 0xD0003380,
  0x21189C70, 0x24220024, 0x493CB4ED, 0x8DC66212, 0x9C68E11D, 0x41241069, 0xA24D2491,
  0xE210C854, 0x620021C8, 0x63200544, 0x00A3C0A2, 0xD974A8AA, 0x898DE211, 0x01366C1F,
  0x0025E730, 0x00451E1D, 0x677312A0, 0xDF2E8859, 0x10E994CE, 0x65921B62, 0xE9849ACB,
  0xB5000430, 0x29426D45, 0x1B21D2A9, 0x0A673F8F, 0x26D34A05, 0x8400B8CE, 0xD638F0BA,
  0x7CC25E61, 0xC9B06227, 0x8646E4D2, 0x94426528, 0x1AE51293, 0x92E51D92, 0xCF384C36,
  0x8F360944, 0x90E86490, 0x3EC3C9B4, 0x3DD50687, 0xC2608171, 0x06E001B4, 0x03626330,
  0xDC00539B, 0xB431D9D9, 0x0D55A947, 0x3509B032, 0x10828008, 0xEBBE109D, 0xAC4560D0,
  0x34929908, 0x4666C068, 0xD80F1329, 0xA71DAEB4, 0xB53604C1, 0xD1EAE432, 0x529B0160,
  0xE9C56303, 0x944BA750, 0x84900175, 0x05118B4A, 0xA5E06F80, 0x52441C14, 0x7C5BD0D5,
  0x5104CD5B, 0xE419C555, 0xEC464D80, 0xD6479AB4, 0x6912661D, 0x80F41977, 0x8615E14D,
  0x76056F18, 0x5871D064, 0x479C2875, 0xD6570625, 0x38BDEB8A, 0x91CC7C9C, 0x29721C65,
  0x1900067D, 0xE0C69124, 0xE561F744, 0xB13647C3, 0x37849965, 0x8BD915B9, 0x2346B926,
  0xD8EA4A56, 0x152C0015, 0x008CD384, 0x7A1587A8, 0x5EF9010E, 0xE86C006C, 0xD9DE4310,
  0x1B61D234, 0x58A07775, 0x9336CD98, 0x05626949, 0xA1266B95, 0x1755C009, 0x61D24165,
  0xDCB42987, 0xA8BE7698, 0x6E6E5950, 0x63726640, 0x4B9C9441, 0x9B743130, 0xC5D15047,
  0x0D1069D3, 0x0A4EDB56, 0x85C00989, 0x1A448D58, 0x24756DA4, 0xF1D28EA3, 0x6C95D0E8,
  0x8EDDC4B9, 0xC006B5FB, 0x4768000B, 0x4E2A4CAA, 0x00405064, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault3[] =
{
  0x00000410, /* ratio 46.15 % */
  0xB8001F00, 0x80000452, 0x1C9A0029, 0x80020004, 0x00750013, 0x062001B4, 0x72001940,
  0x0831CC00, 0x82C0C200, 0x61D22F0B, 0x800A0008, 0x90DC0034, 0x0DE0021C, 0x39163200,
  0x3068F826, 0x2889C906, 0x499C1A55, 0x9B8D60D0, 0x54725327, 0x0C801340, 0xE6803000,
  0xA8A0B8E4, 0xC72E8CC9, 0xD308BCC4, 0x009ED120, 0x2A118658, 0x8E1B22F5, 0x01128A13,
  0x800F35B0, 0x00CF28AF, 0x64600340, 0xED5B8DC3, 0xD6A95504, 0x2CAC5360, 0x78CC6623,
  0x8348E551, 0xA42EC40D, 0xC8E11242, 0x02FF19AD, 0x2C720BB8, 0x0B0DC242, 0xA00AACAA,
  0x1C1D5140, 0x69FD632D, 0x1CC83350, 0x08DE8B99, 0x6906958D, 0x1B4E3890, 0x68DAA1B4,
  0x93AD19EB, 0xD8203C1A, 0x58C0C72B, 0x998DB725, 0xA5C9A1B1, 0xB5141106, 0xE9B61479,
  0x2A9345E0, 0x4191CA47, 0xA40020D1, 0x67000576, 0xB5A1D537, 0xDEBCA285, 0x990AA8B9,
  0xC45F0945, 0x77689BB3, 0x172BE6AC, 0x40D1C12D, 0xBC005051, 0x1E7F96B4, 0x20ABFA64,
  0xBBEDCA0B, 0xA2D5A37B, 0xD1059046, 0x8781FD59, 0xF1288055, 0xE15311A5, 0x48D1B4C5,
  0x0005D54B, 0x8429204F, 0xB95246D2, 0x586D11C0, 0x878000B5, 0x9454EE1E, 0x65F9317E,
  0x6E014820, 0x8A57D115, 0x50607709, 0x9587220A, 0x654A0B85, 0x89085157, 0x1C845BB4,
  0x001C91FD, 0x1C6001C4, 0x36B13F00, 0x25A06A5A, 0x4590E415, 0x00247002, 0x1AE90249,
  0x09180093, 0x2DCC9200, 0x4D698009, 0x92A5193E, 0x64496E53, 0x095E4E95, 0x72619665,
  0x6897A649, 0x97662716, 0xA5A94666, 0xB962569A, 0xD6639CDC, 0x6E982679, 0x9DA659D2,
  0xE799F652, 0x2A067B9F, 0xC66B9BE4, 0x208C9CC9, 0x75566611, 0x51C47117, 0x00000040,
  0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault4[] =
{
  0x00000768, /* ratio 41.56 % */
  0xB8001F00, 0x00000452, 0x120A0026, 0x00073001, 0x00610008, 0x10E891B0, 0x6E0013C0,
  0x3080020C, 0x84C1E0B0, 0x7C361600, 0xC4E27118, 0x98006F87, 0x4131A951, 0x15088347,
  0x50C13802, 0x009782E3, 0x693C5082, 0x834AE591, 0x34EA700A, 0x4662F159, 0xEE709083,
  0x0F3118A1, 0x60001900, 0x02C00544, 0x7D000A80, 0x031D2C00, 0xACC4E520, 0xA466574B,
  0x56AB14F3, 0xCA275C00, 0xACC31001, 0x00690011, 0xE0036DAC, 0x00B9440E, 0x93B454CA,
  0xB8C36F17, 0xED6E3329, 0xCB2C114A, 0x986600B1, 0xAD96AC1D, 0xA62EB6D9, 0x37AA5D4A,
  0x4CC59923, 0x2A853801, 0xABD56A55, 0xC57AB986, 0x5900162C, 0xAE29A1A8, 0x88759B6D,
  0x30670066, 0xF353A802, 0x7B29C5E1, 0x4BFDAEFB, 0xC25A3058, 0x2696CF5F, 0x637538AB,
  0x77238ED6, 0xC0195B3E, 0x0D41ACE5, 0xD87A515E, 0x78E35974, 0x3B8DBF91, 0xB5DDEEB7,
  0xD5F21F7A, 0xEF6E1BBB, 0x0325908A, 0x69DAEA08, 0x3371BB6C, 0x5B8006DA, 0x809AEEBC,
  0xBF4C3F65, 0x88C2283C, 0xD0F5910D, 0x4001DC4A, 0x81115D97, 0x706D1157, 0x59177738,
  0x039639E1, 0xB8503700, 0xE00C469E, 0x7A798564, 0x4210F5D9, 0xD066C529, 0x56B93804,
  0xE0627992, 0x15841115, 0x6D184151, 0x51A1A15C, 0x15BD3804, 0xA5645711, 0x0F5396B4,
  0x4357D149, 0x9065917A, 0xE6E13804, 0xD17D8054, 0xD68FE3D5, 0x4197D8E9, 0x51375040,
  0xF72D6553, 0x15A26619, 0xA76C9C26, 0x639AA961, 0xD7876D59, 0x65F5DF81, 0x9DF8791F,
  0x8668D837, 0x9798970D, 0xD06599C7, 0x4419045B, 0x9DCF6C99, 0x9C6BE535, 0x6A65754D,
  0x18896E6C, 0x95A5676A, 0xC1ED599D, 0x236D1B26, 0x001F54F5, 0x5E65F9E3, 0x47028560,
  0x626F971A, 0x179C9AB7, 0x9E1CC9D6, 0x00074566, 0xBA78012F, 0xA99B9ED4, 0x81A567F7,
  0xA1298586, 0x159A1D8C, 0x5001F414, 0x02498B45, 0x2B9A20D0, 0x5E9786CE, 0x2AE96A6B,
  0x1A55C562, 0xF8285667, 0xB21AD19A, 0x465764A5, 0x196A7C29, 0xE956A866, 0xB65E55A7,
  0x9A975D5A, 0x6D13D982, 0x6E083564, 0x468E1B45, 0x01B14456, 0x6EB69BFB, 0xA6EB1B16,
  0x000B2AC8, 0x2B3919B3, 0x4E77B45B, 0x7DB5586B, 0xA02D867A, 0x9D7B6EC2, 0x947EB2B1,
  0xE9974452, 0xE543D975, 0xA2AE7452, 0xDC1966EA, 0xFBB9D6B0, 0x2400B1DB, 0xCDB2DB4B,
  0xB4AD077A, 0x577BEE0E, 0xCBFE56AA, 0xC26EC06A, 0xB7C1717A, 0xC1D13466, 0xAE4C2A0E,
  0x7BA70FA5, 0x5B02C4F2, 0x19BC286C, 0x612F4BCB, 0x6F8002CF, 0x39EAFA5F, 0x82FEB5B2,
  0x83A5F376, 0x10B059C2, 0x26875A0F, 0x89A6BF8F, 0x71194464, 0x6DA5B115, 0x97F3AA62,
  0xDB2C69C8, 0x9C7EF6CF, 0x5346C86F, 0x26552FD9, 0xCA738B07, 0x750CF34E, 0x58EE2CAF,
  0x31D6D5D1, 0xC4D774BA, 0x6BADEDC6, 0x5745D129, 0x44D72FA3, 0x6A79D9D6, 0x004051A4,
  0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault5[] =
{
  0x0000040C, /* ratio 45.95 % */
  0xB8001100, 0x80000452, 0x24DE0023, 0x20C64004, 0x0B030380, 0xF0B26002, 0x1106438E,
  0x20010E0D, 0x001A4007, 0x18023C74, 0x000C2003, 0x64270E36, 0xE4448004, 0x00680019,
  0xA008E080, 0x2239800C, 0xE9348671, 0x874D6466, 0x8C6E560F, 0x4BE3B269, 0x94CD339B,
  0xA0D28914, 0x00289584, 0xB3D001D4, 0x3690CDA1, 0xD911B63B, 0x14C366D3, 0xB4AC0B0E,
  0xCAC0D0E2, 0x1806A9AD, 0xCF72B1FC, 0x0079A5C9, 0x830000C8, 0x0016002E, 0x03E80054,
  0x85492DC0, 0x55BAF928, 0x5CE433DA, 0x76513EC1, 0x0017B18C, 0x00530014, 0x80099154,
  0x70ADCFCA, 0x1934767E, 0x9B476A72, 0xEE06177E, 0x4830800B, 0x871A3300, 0x31800C56,
  0x560B835F, 0xD1B002C2, 0x8DAACDAD, 0xFB68FA0D, 0xB9DC64D6, 0xD5E2EB75, 0x5BEFF88B,
  0xAB0DA6C4, 0x35D34C4E, 0x4F522780, 0x721A9E67, 0xA7C05926, 0x6D251E4D, 0xAA60F47C,
  0x7F1753A7, 0x003738BB, 0xDF496305, 0x377E6866, 0x516E8341, 0x576B96FA, 0xDDE5DE78,
  0x3FA72797, 0x8A73B59E, 0x1564990A, 0x9689D67B, 0x85DB001D, 0xE0721D86, 0x771E2485,
  0x1E66B5E4, 0x07C9BC10, 0xDDF56FC0, 0x0B78DF75, 0x61DFB692, 0xD8D7FA10, 0x14A13D64,
  0x515E7B20, 0x3B5BDD76, 0x8293F821, 0x20D879C7, 0xE845F86A, 0xF009419C, 0xAF435EB6,
  0x85442001, 0x9C17D170, 0xD841C486, 0xF18577E1, 0x8D736217, 0x69D9C8FD, 0xD9485D59,
  0x74E53767, 0x81244F60, 0xA591D3E6, 0x6AE0F8CD, 0x9EE8F64C, 0x0905F144, 0xD5C35D9C,
  0x3587E5C8, 0x9397C88A, 0x534561A7, 0xB4E9335C, 0xC2556754, 0x49975DE8, 0x795CC97E,
  0x1EF4423D, 0x656E3F7B, 0x92835890, 0x2BA1C221, 0x43A8B195, 0x00040506, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault6[] =
{
  0x0000040E, /* ratio 54.34 % */
  0xB8001B00, 0x00000452, 0x00EA0014, 0xCD600370, 0x006F0042, 0xC29879DC, 0x03070020,
  0x10044A0B, 0x001A4006, 0x3C3E3C74, 0xC945C003, 0x64810693, 0x0007B834, 0xE4008E1C,
  0x4003E800, 0x6C968001, 0x2001E660, 0x9F0C0003, 0x50005800, 0x8026F331, 0xE4011031,
  0xCCD2D9A4, 0x993D90C3, 0x131A551E, 0x47A28C40, 0xD0014C00, 0xAD080004, 0xEC324922,
  0xD225B398, 0x3A8D4B88, 0x46721865, 0x6554B351, 0x3069A55E, 0x2E96412B, 0x69A4CA61,
  0x9E4EA713, 0x250A7F40, 0x552CF52A, 0x02416BA9, 0x6AD71C2E, 0x91302151, 0x91F9CC3A,
  0x5FC51A24, 0x19CD24ED, 0x32C923B2, 0x6DA70D46, 0x5B8014FA, 0x16E539C6, 0x2EF18835,
  0x44648280, 0x050AFC86, 0x39D04326, 0x1004AF59, 0xD8EC4004, 0x0000895F, 0x5223F9AD,
  0xEC1106D0, 0xB98001FE, 0x760C8B73, 0xB48A4933, 0x118FC863, 0xB0AC1A19, 0x97C3C93B,
  0x1803670A, 0x4772E002, 0xCEA9B786, 0xA4D26939, 0x9FBB0B41, 0x1E0C5424, 0xB6F2F8F3,
  0xB006E21F, 0x004A3DBE, 0x02B6EC11, 0x08103400, 0xE0000DC0, 0x400E4000, 0x5B93D55D,
  0x8000D605, 0x56EDD00D, 0x211D6690, 0xC37590A5, 0x6EC09459, 0x1EB87452, 0x24192168,
  0x88466B90, 0x217AD324, 0x489BC0B5, 0xC0B419B1, 0xB47DC26E, 0x5062475E, 0xD1001C85,
  0x6815B6B9, 0x51F5561A, 0x64193B48, 0x85DE6B93, 0x5E1B5A04, 0x45823001, 0xE0C6EC07,
  0xE8CD1694, 0x31F3139A, 0x3B5802F9, 0x01506931, 0x5D2955CB, 0x59292187, 0x3D067AD5,
  0x60155BB0, 0x56D5F641, 0x93244521, 0xD41A1D67, 0x6E6C46A3, 0x480026E5, 0x45A2C524,
  0x4546EC10, 0x09E55F52, 0x11C29EC0, 0x6A8ED227, 0x446836BA, 0x64D9B685, 0x69FD119F,
  0x01F10190, 0xCA4584B0, 0x669308F9, 0x69E93E3B, 0xE936A047, 0xE51F4754, 0x00701A04,
  0x7915F8B8, 0x50D90197, 0x19EE8693, 0x75C6A29B, 0x56001EE8, 0x7E6B046A, 0x0006E5E9,
  0x673DAEA6, 0x2A4887D0, 0x269364B6, 0xADD0F9AE, 0x51F53800, 0x645A317A, 0x00004050,
  0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault7[] =
{
  0x00000422, /* ratio 48.39 % */
  0xB8001700, 0x80000452, 0x00CA0023, 0x80109370, 0x0061001C, 0x800831B0, 0x0082C0C2,
  0xE348008C, 0x000821B0, 0x01BC0052, 0x9D000750, 0x9C010B8D, 0x0831F001, 0xD6003180,
  0xD1706C50, 0x0F8E46A0, 0x096498E7, 0x324725C0, 0xECD42314, 0xCF2632F9, 0xA0A73C17,
  0x2190A89C, 0x2106854C, 0x12924D0C, 0x2D9DC90E, 0x38E49E8B, 0xA9D46192, 0xFC9EAF55,
  0x4AE394A8, 0x1A271186, 0xA1960064, 0x4F0F869D, 0x76BA042A, 0x3B881328, 0xC941A261,
  0x0B41A570, 0xC8008543, 0x446AC003, 0x3E3F3A9D, 0x80185B11, 0x1A449E0B, 0xD8488C4E,
  0x8DB683E0, 0x10058E4B, 0xC1E4E159, 0xB6603114, 0x64B219AA, 0xA23F84BC, 0xA7830000,
  0x7530854E, 0x9528A0A6, 0x23C8C1A0, 0xE8918A4B, 0x9492C011, 0x34CA6123, 0xD2A86138,
  0x464F3A92, 0x2E70C8E4, 0x490CAA4F, 0xD42834EF, 0x99E80036, 0x4D3E72B1, 0x836AE799,
  0x7C7E860A, 0xC536545D, 0xB63FD6F0, 0xBCC00BE1, 0x0B430441, 0xD278E502, 0x43EB40A0,
  0x2ADD5AF0, 0xEB5D6532, 0xD2347450, 0x84290F4A, 0x694379D8, 0xCE6F1CB4, 0x55DC67D9,
  0xDED53D30, 0xB50DD484, 0x6DD26958, 0xFC4C12E6, 0x85941575, 0x1498658C, 0xA5E1674A,
  0x59970016, 0x29831657, 0x6ED11849, 0x01A4514C, 0x548E2558, 0x79404F20, 0x1F84DA86,
  0x4319B445, 0x57B00166, 0x8754007D, 0x893B85D1, 0xBC6751F8, 0x4193A775, 0x537759A2,
  0xA699C947, 0xB1AA7763, 0xB1435AE6, 0x419B3001, 0x5B083C19, 0xB5010C7F, 0x65A07724,
  0x5C78DAD9, 0x9165F84E, 0x9394A209, 0x967E4C76, 0x01DF001A, 0x45988120, 0x76E66879,
  0x2789A657, 0x1485436D, 0xADFD9951, 0x578291F7, 0x91A4444D, 0x52180506, 0x50005441,
  0x2DDB1390, 0x0015544A, 0x57E955DC, 0x0590022A, 0x5A554A00, 0x693C1350, 0x9EA712E4,
  0x406AE452, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault8[] =
{
  0x00000408, /* ratio 51.94 % */
  0xB8002B00, 0x00000452, 0x00DE002D, 0x0CA00370, 0x6A001000, 0xB1487C44, 0x690042CA,
  0x28A1D000, 0x8F000611, 0x2C0C1306, 0x45C92008, 0x68EA0038, 0xC1800834, 0x003C8348,
  0x72A86458, 0x6400434E, 0x2960F800, 0x29C1A092, 0x0424DA00, 0x41A6E6B0, 0x20012F04,
  0xA56619B9, 0x87490341, 0xF2C27800, 0x25285240, 0xE9614801, 0xA6802A20, 0x8584006C,
  0x46615288, 0x2E0D1B86, 0x26E47A48, 0x30728743, 0x52C31802, 0x2AAA5241, 0xCBCCA237,
  0x004FAD72, 0x64AA1540, 0xDD6E1398, 0xCE9842A4, 0xA0D0CA1D, 0xAD40BFD5, 0x15D83564,
  0x38C1D0F2, 0x017DC66F, 0x8349B240, 0x911A9210, 0xC421D71B, 0x9E5782AD, 0x65867005,
  0xA510A483, 0xF17AF9A2, 0x068A58AD, 0xDAC5FF5F, 0xACD8F6D4, 0x2C1AA99C, 0x4B0FD490,
  0x3A977F97, 0x6211BA6C, 0xB4310010, 0xB8AE4E1E, 0x06C48039, 0xC935FEED, 0x884AEF70,
  0x5CA6EF6A, 0xF67ADDE9, 0x968526A4, 0x2D371005, 0x0B24ED00, 0xBEB001E2, 0x4907CB3D,
  0x6A6C6E81, 0x3CD0221F, 0x82E5D117, 0x150DA26B, 0xC9CC5097, 0x006350A5, 0x73D24654,
  0x91946D74, 0xC849B41D, 0x3D497DD8, 0x104E5397, 0x85137111, 0x90E5D119, 0x05FDE74D,
  0x50006AA1, 0xF96810E8, 0x0004E001, 0x9CF64A03, 0xF80D1E87, 0xE6370003, 0x490512C8,
  0x4DE0B421, 0x11244910, 0x65C93344, 0x1D13909D, 0x2E54E3D5, 0x00124002, 0x9125FD50,
  0xF5212C0D, 0x9A2F4597, 0x49554544, 0x0024994D, 0x65B49256, 0xF5600016, 0xBD966864,
  0x33002318, 0x74A3047E, 0x12074589, 0x80AD4994, 0xFDC44B23, 0x4970E765, 0x04D067CD,
  0x9528BD49, 0x06711045, 0xD9371351, 0xCA441B34, 0x419396D1, 0xC4C52412, 0x16FD3787,
  0x898B739D, 0x244D8008, 0xA52927BE, 0xDE16FD0E, 0xA5D2985F, 0x452CA729, 0xF41ED490,
  0x5D1716D1, 0xA930007D, 0x4441AD42, 0xE0001995, 0x035FE4AA, 0x4B26FAF6, 0x0004052C,
  0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault9[] =
{
  0x0000037E, /* ratio 51.45 % */
  0xB8001300, 0x00000452, 0x00C20026, 0x0CA00310, 0x01063600, 0x10581820, 0x4E0014C0,
  0xA0014800, 0x8A03A223, 0x1C3A2F06, 0x000DE003, 0x24C80037, 0x40072004, 0x17118E1E,
  0x8008B480, 0x759B4ACE, 0x6981CC00, 0x214CC190, 0x64366B37, 0x002792E9, 0x220D0481,
  0xCEC0034C, 0x91068ED0, 0x72684456, 0x47A84DA7, 0x293C8A67, 0xA4CFAB14, 0x24927334,
  0x4EE770E9, 0x66660DAC, 0x04136934, 0x01252300, 0x32A944E4, 0x26B84CEA, 0x38F4A6E7,
  0x955EC833, 0x35326D4C, 0x44215289, 0x36C11F83, 0x6774C001, 0xD124A09B, 0xC00BAD0C,
  0x40954CC0, 0xD998160D, 0xB065A222, 0x36840025, 0x63EC1138, 0xDA7728A6, 0x2F392B05,
  0x2F12D551, 0x5B097CAF, 0x433BC1AA, 0x19D1AE1D, 0xC7CCC151, 0x864A8584, 0x632EE19D,
  0x2B718FA2, 0x6DD0E96C, 0x00700015, 0x50AA219C, 0x8B007365, 0x188F5A4D, 0x885338C1,
  0x54B66DD7, 0x99801A98, 0x4A0D2DA1, 0xFAF44EF0, 0x21109590, 0x5A893746, 0x6E99E928,
  0x12241621, 0x2B4CC291, 0x9394EDC7, 0x95B80061, 0x01805704, 0x36429240, 0x001E9499,
  0x98B4CC15, 0xF82E0943, 0xBC008150, 0x717CA047, 0x7A9367D5, 0x94E41533, 0xA5B92442,
  0xD21C85E1, 0x0087D5C7, 0x13D607AC, 0x5D150972, 0x14696D4E, 0xA1C78D17, 0x334F5D34,
  0x791927BD, 0x9104395C, 0x44CD885B, 0x615650C5, 0x746B9178, 0x145605F1, 0x50E53231,
  0x6596478D, 0x5589001F, 0x244AE224, 0x60D4280D, 0x90663C00, 0xF0023D05, 0x09285723,
  0xCB746189, 0x94D8F4AD, 0x9066F1E8, 0xE7F1607F, 0x31245390, 0x54861645, 0x98141829,
  0x51144528, 0x00000040, 0x00000000
};

/* Constant values used in this 'C' module only. */
static const XRect _Const0000 = {{ 0, 0 }, { 595, 55 }};
static const XRect _Const0001 = {{ 10, 20 }, { 40, 50 }};
static const XRect _Const0002 = {{ 61, 10 }, { 360, 55 }};
static const XStringRes _Const0003 = { _StringsDefault0, 0x0003 };
static const XPoint _Const0004 = { 0, 15 };
static const XPoint _Const0005 = { 50, 15 };
static const XPoint _Const0006 = { 50, 60 };
static const XPoint _Const0007 = { 0, 60 };
static const XRect _Const0008 = {{ 438, 8 }, { 583, 48 }};
static const XStringRes _Const0009 = { _StringsDefault0, 0x000D };
static const XColor _Const000A = { 0xFF, 0xFF, 0xFF, 0xFF };
static const XColor _Const000B = { 0x56, 0x56, 0x56, 0xFF };
static const XRect _Const000C = {{ 0, 0 }, { 800, 480 }};
static const XRect _Const000D = {{ 0, 50 }, { 800, 480 }};
static const XColor _Const000E = { 0x38, 0x38, 0x38, 0xFF };
static const XColor _Const000F = { 0x66, 0x66, 0x66, 0xFF };
static const XColor _Const0010 = { 0x20, 0x20, 0x20, 0xFF };
static const XColor _Const0011 = { 0x21, 0x21, 0x21, 0xFF };
static const XRect _Const0012 = {{ 0, 45 }, { 800, 50 }};
static const XColor _Const0013 = { 0x78, 0xAA, 0xFF, 0xFF };
static const XColor _Const0014 = { 0x2B, 0x38, 0x44, 0xFF };
static const XColor _Const0015 = { 0x8B, 0xB8, 0xE8, 0xFF };
static const XRect _Const0016 = {{ 622, 455 }, { 796, 472 }};
static const XStringRes _Const0017 = { _StringsDefault0, 0x001A };
static const XColor _Const0018 = { 0x00, 0x00, 0x00, 0xFF };
static const XRect _Const0019 = {{ 0, 0 }, { 133, 45 }};
static const XStringRes _Const001A = { _StringsDefault0, 0x0030 };
static const XRect _Const001B = {{ 130, 425 }, { 250, 470 }};
static const XStringRes _Const001C = { _StringsDefault0, 0x0045 };
static const XRect _Const001D = {{ 5, 425 }, { 125, 470 }};
static const XStringRes _Const001E = { _StringsDefault0, 0x0057 };
static const XRect _Const001F = {{ 612, 350 }, { 792, 410 }};
static const XRect _Const0020 = {{ 133, 0 }, { 266, 45 }};
static const XStringRes _Const0021 = { _StringsDefault0, 0x0072 };
static const XRect _Const0022 = {{ 400, 0 }, { 533, 45 }};
static const XStringRes _Const0023 = { _StringsDefault0, 0x0088 };
static const XRect _Const0024 = {{ 533, 0 }, { 666, 45 }};
static const XStringRes _Const0025 = { _StringsDefault0, 0x00A5 };
static const XRect _Const0026 = {{ 266, 0 }, { 400, 45 }};
static const XStringRes _Const0027 = { _StringsDefault0, 0x00BC };
static const XRect _Const0028 = {{ 380, 425 }, { 500, 470 }};
static const XStringRes _Const0029 = { _StringsDefault0, 0x00D8 };
static const XRect _Const002A = {{ 505, 425 }, { 625, 470 }};
static const XStringRes _Const002B = { _StringsDefault0, 0x00E7 };
static const XRect _Const002C = {{ 255, 425 }, { 375, 470 }};
static const XStringRes _Const002D = { _StringsDefault0, 0x010B };
static const XRect _Const002E = {{ 10, 60 }, { 800, 420 }};
static const XRect _Const002F = {{ 10, 60 }, { 790, 410 }};
static const XRect _Const0030 = {{ 10, 60 }, { 800, 410 }};
static const XRect _Const0031 = {{ 10, 60 }, { 795, 410 }};
static const XRect _Const0032 = {{ 5, 55 }, { 795, 405 }};
static const XRect _Const0033 = {{ 662, 431 }, { 797, 446 }};
static const XRect _Const0034 = {{ 5, 60 }, { 795, 410 }};
static const XRect _Const0035 = {{ 5, 55 }, { 605, 405 }};
static const XRect _Const0036 = {{ 2, 55 }, { 799, 405 }};
static const XRect _Const0037 = {{ 170, 140 }, { 600, 370 }};
static const XRect _Const0038 = {{ 630, 0 }, { 800, 340 }};
static const XStringRes _Const0039 = { _StringsDefault0, 0x011B };
static const XRect _Const003A = {{ 170, 140 }, { 600, 350 }};
static const XStringRes _Const003B = { _StringsDefault0, 0x0125 };
static const XStringRes _Const003C = { _StringsDefault0, 0x0137 };
static const XStringRes _Const003D = { _StringsDefault0, 0x014C };
static const XStringRes _Const003E = { _StringsDefault0, 0x0154 };
static const XStringRes _Const003F = { _StringsDefault0, 0x0160 };
static const XStringRes _Const0040 = { _StringsDefault0, 0x016D };
static const XStringRes _Const0041 = { _StringsDefault0, 0x0177 };
static const XColor _Const0042 = { 0x93, 0xC2, 0xFF, 0xFF };
static const XStringRes _Const0043 = { _StringsDefault0, 0x0181 };
static const XStringRes _Const0044 = { _StringsDefault0, 0x0194 };
static const XStringRes _Const0045 = { _StringsDefault0, 0x019A };
static const XStringRes _Const0046 = { _StringsDefault0, 0x01A0 };
static const XStringRes _Const0047 = { _StringsDefault0, 0x01A6 };
static const XStringRes _Const0048 = { _StringsDefault0, 0x01AC };
static const XStringRes _Const0049 = { _StringsDefault0, 0x01B3 };
static const XStringRes _Const004A = { _StringsDefault0, 0x01D3 };
static const XStringRes _Const004B = { _StringsDefault0, 0x01E4 };
static const XColor _Const004C = { 0xFF, 0x00, 0x00, 0xFF };
static const XColor _Const004D = { 0x3C, 0x00, 0x00, 0xFF };
static const XStringRes _Const004E = { _StringsDefault0, 0x01F6 };
static const XStringRes _Const004F = { _StringsDefault1, 0x0003 };
static const XRect _Const0050 = {{ 1, 1 }, { 134, 44 }};
static const XColor _Const0051 = { 0xEC, 0xEC, 0xEC, 0xFF };
static const XColor _Const0052 = { 0x73, 0x73, 0x73, 0xFF };
static const XColor _Const0053 = { 0x30, 0x30, 0x30, 0xFF };
static const XPoint _Const0054 = { 0, 0 };
static const XPoint _Const0055 = { 133, 0 };
static const XPoint _Const0056 = { 133, 45 };
static const XPoint _Const0057 = { 0, 45 };
static const XStringRes _Const0058 = { _StringsDefault1, 0x0008 };
static const XRect _Const0059 = {{ 0, 0 }, { 40, 45 }};
static const XRect _Const005A = {{ 40, 20 }, { 85, 45 }};
static const XStringRes _Const005B = { _StringsDefault1, 0x001D };
static const XColor _Const005C = { 0x0A, 0x06, 0x37, 0xFF };
static const XRect _Const005D = {{ 39, 5 }, { 132, 45 }};
static const XColor _Const005E = { 0x11, 0x11, 0x11, 0xFF };
static const XStringRes _Const005F = { _StringsDefault1, 0x0025 };
static const XStringRes _Const0060 = { _StringsDefault1, 0x002A };
static const XColor _Const0061 = { 0xBB, 0xBB, 0xBB, 0xFF };
static const XColor _Const0062 = { 0xCC, 0xCC, 0xCC, 0xFF };
static const XColor _Const0063 = { 0xDC, 0xDC, 0xDC, 0xFF };
static const XRect _Const0064 = {{ 0, 0 }, { 510, 45 }};
static const XColor _Const0065 = { 0xE2, 0xE2, 0xE2, 0xFF };
static const XRect _Const0066 = {{ 68, 22 }, { 468, 44 }};
static const XStringRes _Const0067 = { _StringsDefault1, 0x002F };
static const XColor _Const0068 = { 0x16, 0x16, 0x16, 0xFF };
static const XRect _Const0069 = {{ 0, 0 }, { 65, 45 }};
static const XStringRes _Const006A = { _StringsDefault1, 0x0046 };
static const XRect _Const006B = {{ 70, 2 }, { 250, 20 }};
static const XStringRes _Const006C = { _StringsDefault1, 0x004E };
static const XRect _Const006D = {{ 295, 2 }, { 465, 23 }};
static const XStringRes _Const006E = { _StringsDefault1, 0x0060 };
static const XRect _Const006F = {{ 467, 0 }, { 505, 45 }};
static const XColor _Const0070 = { 0xD4, 0xD4, 0xD4, 0xFF };
static const XRect _Const0071 = {{ 0, 0 }, { 120, 45 }};
static const XStringRes _Const0072 = { _StringsDefault1, 0x0072 };
static const XRect _Const0073 = {{ 40, 0 }, { 120, 45 }};
static const XStringRes _Const0074 = { _StringsDefault1, 0x007C };
static const XColor _Const0075 = { 0x75, 0x75, 0x75, 0xFF };
static const XColor _Const0076 = { 0x64, 0x64, 0x64, 0xFF };
static const XPoint _Const0077 = { 120, 0 };
static const XPoint _Const0078 = { 120, 45 };
static const XRect _Const0079 = {{ 0, 0 }, { 170, 285 }};
static const XRect _Const007A = {{ 37, 1 }, { 169, 44 }};
static const XRect _Const007B = {{ 36, 0 }, { 170, 45 }};
static const XColor _Const007C = { 0x30, 0x30, 0x30, 0xFF };
static const XStringRes _Const007D = { _StringsDefault1, 0x008B };
static const XRect _Const007E = {{ 44, 0 }, { 119, 25 }};
static const XRect _Const007F = {{ 135, 0 }, { 167, 29 }};
static const XPoint _Const0080 = { 35, 0 };
static const XPoint _Const0081 = { 169, 0 };
static const XPoint _Const0082 = { 169, 45 };
static const XPoint _Const0083 = { 35, 45 };
static const XRect _Const0084 = {{ 0, 45 }, { 170, 285 }};
static const XRect _Const0085 = {{ 42, 20 }, { 162, 46 }};
static const XPoint _Const0086 = { 630, 0 };
static const XPoint _Const0087 = { 630, 325 };
static const XPoint _Const0088 = { 0, 325 };
static const XPoint _Const0089 = { 800, 325 };
static const XPoint _Const008A = { 800, 480 };
static const XPoint _Const008B = { 0, 480 };
static const XColor _Const008C = { 0xAA, 0xAA, 0xAA, 0xFF };
static const XRect _Const008D = {{ 0, 0 }, { 150, 35 }};
static const XPoint _Const008E = { 0, 35 };
static const XPoint _Const008F = { 150, 35 };
static const XPoint _Const0090 = { 150, 0 };
static const XRect _Const0091 = {{ 0, 0 }, { 40, 35 }};
static const XRect _Const0092 = {{ 0, 0 }, { 140, 35 }};
static const XRect _Const0093 = {{ 35, 0 }, { 140, 35 }};
static const XRect _Const0094 = {{ 0, 0 }, { 520, 50 }};
static const XRect _Const0095 = {{ -1, 0 }, { 60, 50 }};
static const XRect _Const0096 = {{ 49, 2 }, { 189, 22 }};
static const XRect _Const0097 = {{ 48, 17 }, { 463, 47 }};
static const XStringRes _Const0098 = { _StringsDefault1, 0x0098 };
static const XRect _Const0099 = {{ 472, 5 }, { 512, 45 }};
static const XStringRes _Const009A = { _StringsDefault1, 0x00B5 };
static const XRect _Const009B = {{ 0, 0 }, { 780, 350 }};
static const XRect _Const009C = {{ 0, 0 }, { 550, 350 }};
static const XRect _Const009D = {{ -10, 0 }, { 550, 350 }};
static const XPoint _Const009E = { 0, 40 };
static const XRect _Const009F = {{ 80, 140 }, { 690, 195 }};
static const XStringRes _Const00A0 = { _StringsDefault1, 0x00C6 };
static const XRect _Const00A1 = {{ 551, 0 }, { 590, 350 }};
static const XRect _Const00A2 = {{ 600, 0 }, { 780, 50 }};
static const XStringRes _Const00A3 = { _StringsDefault1, 0x00DA };
static const XStringRes _Const00A4 = { _StringsDefault1, 0x00E5 };
static const XStringRes _Const00A5 = { _StringsDefault1, 0x00F0 };
static const XStringRes _Const00A6 = { _StringsDefault1, 0x00F9 };
static const XRect _Const00A7 = {{ 0, 0 }, { 790, 350 }};
static const XRect _Const00A8 = {{ 550, 0 }, { 600, 350 }};
static const XRect _Const00A9 = {{ 2, 0 }, { 550, 350 }};
static const XColor _Const00AA = { 0x35, 0x35, 0x35, 0xFF };
static const XRect _Const00AB = {{ 2, 2 }, { 550, 350 }};
static const XRect _Const00AC = {{ 2, 0 }, { 548, 60 }};
static const XStringRes _Const00AD = { _StringsDefault1, 0x0104 };
static const XRect _Const00AE = {{ 2, 60 }, { 548, 326 }};
static const XRect _Const00AF = {{ 2, 60 }, { 550, 350 }};
static const XColor _Const00B0 = { 0xAE, 0xAE, 0xAE, 0xFF };
static const XColor _Const00B1 = { 0x90, 0x90, 0x90, 0xFF };
static const XColor _Const00B2 = { 0x2C, 0x2C, 0x2C, 0xFF };
static const XRect _Const00B3 = {{ 550, 0 }, { 599, 350 }};
static const XRect _Const00B4 = {{ 0, 0 }, { 170, 40 }};
static const XRect _Const00B5 = {{ 260, 40 }, { 430, 80 }};
static const XColor _Const00B6 = { 0x41, 0x41, 0x41, 0xFF };
static const XColor _Const00B7 = { 0x82, 0x82, 0x82, 0xFF };
static const XColor _Const00B8 = { 0xDB, 0xDB, 0xDB, 0xFF };
static const XPoint _Const00B9 = { 170, 0 };
static const XPoint _Const00BA = { 170, 40 };
static const XRect _Const00BB = {{ 0, 0 }, { 515, 280 }};
static const XRect _Const00BC = {{ 0, 0 }, { 792, 360 }};
static const XRect _Const00BD = {{ 0, 0 }, { 530, 360 }};
static const XRect _Const00BE = {{ 2, 0 }, { 530, 360 }};
static const XRect _Const00BF = {{ 0, 0 }, { 550, 120 }};
static const XRect _Const00C0 = {{ 2, 320 }, { 530, 480 }};
static const XRect _Const00C1 = {{ 2, 320 }, { 530, 470 }};
static const XRect _Const00C2 = {{ 580, 0 }, { 790, 240 }};
static const XPoint _Const00C3 = { 0, 30 };
static const XPoint _Const00C4 = { 580, 0 };
static const XPoint _Const00C5 = { 790, 0 };
static const XPoint _Const00C6 = { 790, 240 };
static const XPoint _Const00C7 = { 580, 240 };
static const XRect _Const00C8 = {{ 530, 0 }, { 580, 360 }};
static const XRect _Const00C9 = {{ 577, 248 }, { 677, 293 }};
static const XStringRes _Const00CA = { _StringsDefault1, 0x0115 };
static const XRect _Const00CB = {{ 679, 247 }, { 734, 292 }};
static const XRect _Const00CC = {{ 737, 247 }, { 792, 292 }};
static const XPoint _Const00CD = { 0, 10 };
static const XStringRes _Const00CE = { _StringsDefault1, 0x011C };
static const XStringRes _Const00CF = { _StringsDefault1, 0x0123 };
static const XStringRes _Const00D0 = { _StringsDefault1, 0x0143 };
static const XStringRes _Const00D1 = { _StringsDefault1, 0x0151 };
static const XStringRes _Const00D2 = { _StringsDefault1, 0x015C };
static const XStringRes _Const00D3 = { _StringsDefault1, 0x016A };
static const XStringRes _Const00D4 = { _StringsDefault1, 0x0177 };
static const XStringRes _Const00D5 = { _StringsDefault1, 0x0181 };
static const XStringRes _Const00D6 = { _StringsDefault1, 0x019C };
static const XStringRes _Const00D7 = { _StringsDefault1, 0x01AB };
static const XStringRes _Const00D8 = { _StringsDefault1, 0x01B6 };
static const XStringRes _Const00D9 = { _StringsDefault1, 0x01C2 };
static const XStringRes _Const00DA = { _StringsDefault1, 0x01DD };
static const XStringRes _Const00DB = { _StringsDefault1, 0x01EE };
static const XStringRes _Const00DC = { _StringsDefault1, 0x01FA };
static const XStringRes _Const00DD = { _StringsDefault2, 0x0003 };
static const XStringRes _Const00DE = { _StringsDefault2, 0x000D };
static const XStringRes _Const00DF = { _StringsDefault2, 0x0015 };
static const XStringRes _Const00E0 = { _StringsDefault2, 0x0025 };
static const XStringRes _Const00E1 = { _StringsDefault2, 0x0036 };
static const XStringRes _Const00E2 = { _StringsDefault2, 0x0046 };
static const XStringRes _Const00E3 = { _StringsDefault2, 0x0050 };
static const XStringRes _Const00E4 = { _StringsDefault2, 0x006F };
static const XStringRes _Const00E5 = { _StringsDefault2, 0x007F };
static const XStringRes _Const00E6 = { _StringsDefault2, 0x0090 };
static const XStringRes _Const00E7 = { _StringsDefault2, 0x00A8 };
static const XStringRes _Const00E8 = { _StringsDefault2, 0x00BA };
static const XStringRes _Const00E9 = { _StringsDefault2, 0x00C5 };
static const XStringRes _Const00EA = { _StringsDefault2, 0x00D2 };
static const XPoint _Const00EB = { 0, 1 };
static const XPoint _Const00EC = { 1, 0 };
static const XPoint _Const00ED = { 18, 18 };
static const XRect _Const00EE = {{ 0, 0 }, { 36, 36 }};
static const XStringRes _Const00EF = { _StringsDefault2, 0x00DE };
static const XPoint _Const00F0 = { -14, -27 };
static const XPoint _Const00F1 = { -20, -40 };
static const XPoint _Const00F2 = { 100, 14 };
static const XPoint _Const00F3 = { 100, -10 };
static const XPoint _Const00F4 = { 100, 30 };
static const XRect _Const00F5 = {{ 0, 0 }, { 100, 60 }};
static const XStringRes _Const00F6 = { _StringsDefault2, 0x00E6 };
static const XPoint _Const00F7 = { -28, -34 };
static const XStringRes _Const00F8 = { _StringsDefault2, 0x00EC };
static const XPoint _Const00F9 = { 54, 0 };
static const XPoint _Const00FA = { 90, 36 };
static const XStringRes _Const00FB = { _StringsDefault2, 0x00F3 };
static const XPoint _Const00FC = { 0, -13 };
static const XPoint _Const00FD = { 0, -27 };
static const XRect _Const00FE = {{ 0, 0 }, { 550, 35 }};
static const XColor _Const00FF = { 0xC9, 0xC9, 0xC9, 0xFF };
static const XColor _Const0100 = { 0x23, 0x23, 0x23, 0xFF };
static const XRect _Const0101 = {{ 0, 5 }, { 50, 30 }};
static const XStringRes _Const0102 = { _StringsDefault2, 0x00FC };
static const XRect _Const0103 = {{ 58, 0 }, { 124, 15 }};
static const XRect _Const0104 = {{ 57, 13 }, { 518, 33 }};
static const XRect _Const0105 = {{ 514, 0 }, { 549, 35 }};
static const XRect _Const0106 = {{ 387, 0 }, { 507, 15 }};
static const XStringRes _Const0107 = { _StringsDefault2, 0x0101 };
static const XRect _Const0108 = {{ 129, 0 }, { 194, 15 }};
static const XStringRes _Const0109 = { _StringsDefault2, 0x0111 };
static const XRect _Const010A = {{ 209, 0 }, { 279, 15 }};
static const XStringRes _Const010B = { _StringsDefault2, 0x011C };
static const XRect _Const010C = {{ 289, 0 }, { 384, 15 }};
static const XRect _Const010D = {{ 1, 5 }, { 51, 30 }};
static const XRect _Const010E = {{ 59, 0 }, { 125, 15 }};
static const XRect _Const010F = {{ 58, 13 }, { 519, 33 }};
static const XStringRes _Const0110 = { _StringsDefault2, 0x0127 };
static const XStringRes _Const0111 = { _StringsDefault2, 0x0135 };
static const XRect _Const0112 = {{ 130, 0 }, { 195, 15 }};
static const XStringRes _Const0113 = { _StringsDefault2, 0x0144 };
static const XRect _Const0114 = {{ 210, 0 }, { 280, 15 }};
static const XStringRes _Const0115 = { _StringsDefault2, 0x0151 };
static const XRect _Const0116 = {{ 290, 0 }, { 414, 15 }};
static const XStringRes _Const0117 = { _StringsDefault2, 0x015E };
static const XPoint _Const0118 = { 50, 30 };
static const XPoint _Const0119 = { 10, 0 };
static const XStringRes _Const011A = { _StringsDefault2, 0x016B };
static const XPoint _Const011B = { -15, -20 };
static const XPoint _Const011C = { 60, 30 };
static const XRect _Const011D = {{ 620, 0 }, { 780, 50 }};
static const XStringRes _Const011E = { _StringsDefault2, 0x0170 };
static const XRect _Const011F = {{ 620, 61 }, { 780, 111 }};
static const XStringRes _Const0120 = { _StringsDefault2, 0x0180 };
static const XRect _Const0121 = {{ 0, 0 }, { 600, 350 }};
static const XRect _Const0122 = {{ 0, 0 }, { 680, 460 }};
static const XRect _Const0123 = {{ 650, 10 }, { 680, 430 }};
static const XColor _Const0124 = { 0x19, 0x19, 0x19, 0xBC };
static const XColor _Const0125 = { 0x19, 0x19, 0x19, 0x00 };
static const XRect _Const0126 = {{ 650, 430 }, { 680, 460 }};
static const XRect _Const0127 = {{ 10, 430 }, { 650, 460 }};
static const XRect _Const0128 = {{ 650, 0 }, { 680, 10 }};
static const XRect _Const0129 = {{ 0, 430 }, { 10, 460 }};
static const XRect _Const012A = {{ 10, 0 }, { 650, 10 }};
static const XRect _Const012B = {{ 0, 0 }, { 10, 10 }};
static const XRect _Const012C = {{ 0, 10 }, { 10, 430 }};
static const XRect _Const012D = {{ 10, 10 }, { 650, 430 }};
static const XColor _Const012E = { 0x7F, 0x7F, 0x7F, 0xFF };
static const XPoint _Const012F = { 800, 0 };
static const XColor _Const0130 = { 0x00, 0x00, 0x00, 0x20 };
static const XRect _Const0131 = {{ 20, 320 }, { 640, 360 }};
static const XRect _Const0132 = {{ 20, 20 }, { 220, 160 }};
static const XRect _Const0133 = {{ 230, 20 }, { 430, 160 }};
static const XColor _Const0134 = { 0x00, 0xFF, 0x00, 0xFF };
static const XRect _Const0135 = {{ 440, 20 }, { 640, 160 }};
static const XColor _Const0136 = { 0x00, 0x00, 0xFF, 0xFF };
static const XRect _Const0137 = {{ 20, 170 }, { 220, 310 }};
static const XColor _Const0138 = { 0x00, 0xFF, 0xFF, 0xFF };
static const XRect _Const0139 = {{ 230, 170 }, { 430, 310 }};
static const XColor _Const013A = { 0xFF, 0x00, 0xFF, 0xFF };
static const XRect _Const013B = {{ 440, 170 }, { 640, 310 }};
static const XColor _Const013C = { 0xFF, 0xFF, 0x00, 0xFF };
static const XStringRes _Const013D = { _StringsDefault2, 0x018D };
static const XStringRes _Const013E = { _StringsDefault2, 0x0194 };
static const XStringRes _Const013F = { _StringsDefault2, 0x019D };
static const XStringRes _Const0140 = { _StringsDefault2, 0x01A5 };
static const XStringRes _Const0141 = { _StringsDefault2, 0x01B0 };
static const XStringRes _Const0142 = { _StringsDefault2, 0x01B8 };
static const XRect _Const0143 = {{ 440, 280 }, { 640, 310 }};
static const XRect _Const0144 = {{ 230, 280 }, { 430, 310 }};
static const XRect _Const0145 = {{ 20, 280 }, { 220, 310 }};
static const XRect _Const0146 = {{ 440, 130 }, { 640, 160 }};
static const XRect _Const0147 = {{ 230, 130 }, { 430, 160 }};
static const XRect _Const0148 = {{ 20, 130 }, { 220, 160 }};
static const XRect _Const0149 = {{ 250, 370 }, { 400, 420 }};
static const XStringRes _Const014A = { _StringsDefault2, 0x01C2 };
static const XRect _Const014B = {{ 120, 940 }, { 666, 1296 }};
static const XRect _Const014C = {{ -1, 10 }, { 254, 45 }};
static const XStringRes _Const014D = { _StringsDefault2, 0x01CB };
static const XRect _Const014E = {{ 10, 76 }, { 110, 106 }};
static const XStringRes _Const014F = { _StringsDefault2, 0x01E6 };
static const XRect _Const0150 = {{ 130, 70 }, { 480, 119 }};
static const XStringRes _Const0151 = { _StringsDefault2, 0x01F4 };
static const XRect _Const0152 = {{ 620, 60 }, { 780, 110 }};
static const XStringRes _Const0153 = { _StringsDefault2, 0x0200 };
static const XRect _Const0154 = {{ 620, 120 }, { 780, 170 }};
static const XStringRes _Const0155 = { _StringsDefault3, 0x0003 };
static const XRect _Const0156 = {{ 620, 180 }, { 780, 230 }};
static const XStringRes _Const0157 = { _StringsDefault3, 0x0012 };
static const XRect _Const0158 = {{ 260, 0 }, { 380, 50 }};
static const XStringRes _Const0159 = { _StringsDefault3, 0x0022 };
static const XRect _Const015A = {{ 380, 0 }, { 500, 50 }};
static const XStringRes _Const015B = { _StringsDefault3, 0x002B };
static const XRect _Const015C = {{ 490, 0 }, { 610, 50 }};
static const XStringRes _Const015D = { _StringsDefault3, 0x0034 };
static const XRect _Const015E = {{ 0, 0 }, { 670, 330 }};
static const XColor _Const015F = { 0xCD, 0xCD, 0xCD, 0xFF };
static const XRect _Const0160 = {{ 26, 30 }, { 216, 180 }};
static const XRect _Const0161 = {{ 231, 30 }, { 461, 180 }};
static const XRect _Const0162 = {{ 30, 240 }, { 180, 290 }};
static const XStringRes _Const0163 = { _StringsDefault3, 0x003E };
static const XRect _Const0164 = {{ 460, 240 }, { 610, 290 }};
static const XStringRes _Const0165 = { _StringsDefault3, 0x0049 };
static const XRect _Const0166 = {{ 30, 185 }, { 210, 235 }};
static const XStringRes _Const0167 = { _StringsDefault3, 0x0053 };
static const XRect _Const0168 = {{ 480, 20 }, { 630, 70 }};
static const XStringRes _Const0169 = { _StringsDefault3, 0x0066 };
static const XRect _Const016A = {{ 480, 80 }, { 630, 130 }};
static const XStringRes _Const016B = { _StringsDefault3, 0x0071 };
static const XRect _Const016C = {{ 480, 140 }, { 630, 190 }};
static const XStringRes _Const016D = { _StringsDefault3, 0x007E };
static const XRect _Const016E = {{ 0, 0 }, { 190, 150 }};
static const XRect _Const016F = {{ 10, 59 }, { 180, 91 }};
static const XColor _Const0170 = { 0xE1, 0xE1, 0xE1, 0xFF };
static const XRect _Const0171 = {{ 130, 0 }, { 180, 150 }};
static const XRect _Const0172 = {{ 70, 0 }, { 120, 150 }};
static const XRect _Const0173 = {{ 10, 0 }, { 60, 150 }};
static const XRect _Const0174 = {{ 0, 0 }, { 10, 150 }};
static const XColor _Const0175 = { 0x1B, 0xFF, 0x52, 0x00 };
static const XColor _Const0176 = { 0x87, 0xB6, 0xDB, 0xFF };
static const XColor _Const0177 = { 0x00, 0x00, 0x00, 0x00 };
static const XColor _Const0178 = { 0xFF, 0xFF, 0xFF, 0x00 };
static const XRect _Const0179 = {{ 60, 0 }, { 70, 150 }};
static const XRect _Const017A = {{ 120, 0 }, { 130, 150 }};
static const XRect _Const017B = {{ 180, 0 }, { 190, 150 }};
static const XRect _Const017C = {{ 0, 88 }, { 190, 150 }};
static const XColor _Const017D = { 0xC6, 0xC6, 0xC6, 0xFF };
static const XColor _Const017E = { 0xFF, 0xFF, 0xFF, 0x22 };
static const XRect _Const017F = {{ 0, 0 }, { 190, 58 }};
static const XRect _Const0180 = {{ 113, 57 }, { 136, 89 }};
static const XStringRes _Const0181 = { _StringsDefault3, 0x0089 };
static const XColor _Const0182 = { 0x83, 0x80, 0x83, 0xFF };
static const XRect _Const0183 = {{ 53, 57 }, { 76, 89 }};
static const XColor _Const0184 = { 0xC1, 0xC1, 0xC1, 0xFF };
static const XRect _Const0185 = {{ 0, 0 }, { 230, 150 }};
static const XRect _Const0186 = {{ 10, 59 }, { 220, 91 }};
static const XRect _Const0187 = {{ 150, 0 }, { 220, 150 }};
static const XRect _Const0188 = {{ 70, 0 }, { 140, 150 }};
static const XRect _Const0189 = {{ 140, 0 }, { 150, 150 }};
static const XRect _Const018A = {{ 220, 0 }, { 230, 150 }};
static const XRect _Const018B = {{ 0, 88 }, { 230, 150 }};
static const XColor _Const018C = { 0xD7, 0xD7, 0xD7, 0xFF };
static const XColor _Const018D = { 0xCF, 0xCF, 0xCF, 0xFF };
static const XRect _Const018E = {{ 0, 0 }, { 230, 58 }};
static const XRect _Const018F = {{ 0, 0 }, { 630, 340 }};
static const XColor _Const0190 = { 0x37, 0x55, 0xAF, 0xFF };
static const XRect _Const0191 = {{ 30, 110 }, { 580, 190 }};
static const XRect _Const0192 = {{ 30, 250 }, { 180, 300 }};
static const XRect _Const0193 = {{ 425, 250 }, { 575, 300 }};
static const XColor _Const0194 = { 0x00, 0x00, 0x00, 0x30 };
static const XRect _Const0195 = {{ 0, 0 }, { 480, 390 }};
static const XColor _Const0196 = { 0xCB, 0xCB, 0xCB, 0xFF };
static const XRect _Const0197 = {{ 290, 100 }, { 350, 150 }};
static const XStringRes _Const0198 = { _StringsDefault3, 0x008E };
static const XRect _Const0199 = {{ 360, 40 }, { 420, 90 }};
static const XStringRes _Const019A = { _StringsDefault3, 0x0093 };
static const XRect _Const019B = {{ 220, 40 }, { 280, 90 }};
static const XStringRes _Const019C = { _StringsDefault3, 0x0098 };
static const XRect _Const019D = {{ 220, 100 }, { 280, 150 }};
static const XStringRes _Const019E = { _StringsDefault3, 0x009D };
static const XRect _Const019F = {{ 290, 40 }, { 350, 90 }};
static const XStringRes _Const01A0 = { _StringsDefault3, 0x00A2 };
static const XRect _Const01A1 = {{ 360, 100 }, { 420, 150 }};
static const XStringRes _Const01A2 = { _StringsDefault3, 0x00A7 };
static const XRect _Const01A3 = {{ 220, 160 }, { 280, 210 }};
static const XRect _Const01A4 = {{ 290, 160 }, { 350, 210 }};
static const XStringRes _Const01A5 = { _StringsDefault3, 0x00AC };
static const XRect _Const01A6 = {{ 360, 160 }, { 420, 210 }};
static const XStringRes _Const01A7 = { _StringsDefault3, 0x00B1 };
static const XRect _Const01A8 = {{ 220, 220 }, { 280, 270 }};
static const XStringRes _Const01A9 = { _StringsDefault3, 0x00B6 };
static const XRect _Const01AA = {{ 290, 220 }, { 420, 270 }};
static const XStringRes _Const01AB = { _StringsDefault3, 0x00BB };
static const XRect _Const01AC = {{ 40, 84 }, { 140, 124 }};
static const XRect _Const01AD = {{ 40, 51 }, { 130, 80 }};
static const XStringRes _Const01AE = { _StringsDefault3, 0x00C2 };
static const XColor _Const01AF = { 0x02, 0x02, 0x02, 0xFF };
static const XStringRes _Const01B0 = { _StringsDefault3, 0x00CF };
static const XStringRes _Const01B1 = { _StringsDefault3, 0x00D7 };
static const XRect _Const01B2 = {{ 40, 134 }, { 140, 164 }};
static const XStringRes _Const01B3 = { _StringsDefault3, 0x00DF };
static const XStringRes _Const01B4 = { _StringsDefault3, 0x00EB };
static const XRect _Const01B5 = {{ 280, 300 }, { 420, 350 }};
static const XRect _Const01B6 = {{ 40, 300 }, { 180, 350 }};
static const XStringRes _Const01B7 = { _StringsDefault3, 0x00F5 };
static const XRect _Const01B8 = {{ 0, 0 }, { 60, 50 }};
static const XRect _Const01B9 = {{ 5, 5 }, { 55, 45 }};
static const XColor _Const01BA = { 0xBA, 0xBA, 0xBA, 0xFF };
static const XColor _Const01BB = { 0x42, 0x42, 0x42, 0xFF };
static const XColor _Const01BC = { 0xA6, 0xD2, 0xFF, 0x92 };
static const XRect _Const01BD = {{ 0, 0 }, { 150, 50 }};
static const XColor _Const01BE = { 0x33, 0x33, 0x33, 0xFF };
static const XColor _Const01BF = { 0xB5, 0xB5, 0xB5, 0xFF };
static const XRect _Const01C0 = {{ 3, 3 }, { 147, 47 }};
static const XRect _Const01C1 = {{ 0, 0 }, { 160, 120 }};
static const XPoint _Const01C2 = { 0, 120 };
static const XPoint _Const01C3 = { 160, 120 };
static const XPoint _Const01C4 = { 160, 0 };
static const XRect _Const01C5 = {{ 2, 2 }, { 157, 117 }};
static const XStringRes _Const01C6 = { _StringsDefault3, 0x00FA };
static const XPoint _Const01C7 = { 50, 70 };
static const XPoint _Const01C8 = { 50, 50 };
static const XPoint _Const01C9 = { 20, 20 };
static const XPoint _Const01CA = { -10, -10 };
static const XColor _Const01CB = { 0xEE, 0xEE, 0xEE, 0xCC };
static const XStringRes _Const01CC = { _StringsDefault3, 0x0103 };
static const XStringRes _Const01CD = { _StringsDefault3, 0x0108 };
static const XStringRes _Const01CE = { _StringsDefault3, 0x010D };
static const XStringRes _Const01CF = { _StringsDefault3, 0x0113 };
static const XStringRes _Const01D0 = { _StringsDefault3, 0x0118 };
static const XRect _Const01D1 = {{ 0, 0 }, { 520, 190 }};
static const XRect _Const01D2 = {{ 490, 10 }, { 520, 160 }};
static const XRect _Const01D3 = {{ 490, 160 }, { 520, 190 }};
static const XRect _Const01D4 = {{ 10, 160 }, { 490, 190 }};
static const XRect _Const01D5 = {{ 10, 10 }, { 490, 160 }};
static const XColor _Const01D6 = { 0x7F, 0x37, 0x31, 0xFF };
static const XRect _Const01D7 = {{ 490, 0 }, { 520, 10 }};
static const XRect _Const01D8 = {{ 0, 160 }, { 10, 190 }};
static const XRect _Const01D9 = {{ 10, 0 }, { 490, 10 }};
static const XRect _Const01DA = {{ 0, 10 }, { 10, 160 }};
static const XRect _Const01DB = {{ 30, 55 }, { 470, 100 }};
static const XRect _Const01DC = {{ 0, 0 }, { 800, 470 }};
static const XRect _Const01DD = {{ 10, 360 }, { 770, 440 }};
static const XRect _Const01DE = {{ 10, 10 }, { 720, 360 }};
static const XRect _Const01DF = {{ 727, 10 }, { 766, 360 }};
static const XRect _Const01E0 = {{ 599, 376 }, { 749, 426 }};
static const XRect _Const01E1 = {{ 30, 360 }, { 138, 400 }};
static const XStringRes _Const01E2 = { _StringsDefault3, 0x011D };
static const XRect _Const01E3 = {{ 160, 360 }, { 268, 400 }};
static const XStringRes _Const01E4 = { _StringsDefault3, 0x0127 };
static const XRect _Const01E5 = {{ 290, 360 }, { 398, 400 }};
static const XRect _Const01E6 = {{ 430, 360 }, { 538, 400 }};
static const XStringRes _Const01E7 = { _StringsDefault3, 0x0131 };
static const XRect _Const01E8 = {{ 30, 400 }, { 138, 440 }};
static const XRect _Const01E9 = {{ 160, 400 }, { 268, 440 }};
static const XRect _Const01EA = {{ 290, 400 }, { 398, 440 }};
static const XStringRes _Const01EB = { _StringsDefault3, 0x013A };
static const XRect _Const01EC = {{ 430, 400 }, { 538, 440 }};
static const XStringRes _Const01ED = { _StringsDefault3, 0x0145 };
static const XStringRes _Const01EE = { _StringsDefault3, 0x014E };
static const XStringRes _Const01EF = { _StringsDefault3, 0x0155 };
static const XStringRes _Const01F0 = { _StringsDefault3, 0x015E };
static const XStringRes _Const01F1 = { _StringsDefault3, 0x0167 };
static const XStringRes _Const01F2 = { _StringsDefault3, 0x016F };
static const XStringRes _Const01F3 = { _StringsDefault3, 0x0177 };
static const XRect _Const01F4 = {{ 0, 0 }, { 605, 25 }};
static const XRect _Const01F5 = {{ 0, 0 }, { 30, 25 }};
static const XRect _Const01F6 = {{ 95, 0 }, { 610, 25 }};
static const XStringRes _Const01F7 = { _StringsDefault3, 0x0182 };
static const XRect _Const01F8 = {{ 37, 0 }, { 100, 25 }};
static const XStringRes _Const01F9 = { _StringsDefault3, 0x0201 };
static const XRect _Const01FA = {{ 0, 0 }, { 370, 210 }};
static const XColor _Const01FB = { 0xB1, 0xB1, 0xB1, 0xFF };
static const XRect _Const01FC = {{ 28, 30 }, { 220, 80 }};
static const XStringRes _Const01FD = { _StringsDefault4, 0x0003 };
static const XStringRes _Const01FE = { _StringsDefault4, 0x0012 };
static const XStringRes _Const01FF = { _StringsDefault4, 0x0022 };
static const XRect _Const0200 = {{ 200, 120 }, { 330, 170 }};
static const XRect _Const0201 = {{ 237, 39 }, { 328, 72 }};
static const XStringRes _Const0202 = { _StringsDefault4, 0x002B };
static const XStringRes _Const0203 = { _StringsDefault4, 0x0036 };
static const XColor _Const0204 = { 0xE5, 0xE5, 0xE5, 0xFF };
static const XRect _Const0205 = {{ 0, 0 }, { 785, 350 }};
static const XRect _Const0206 = {{ 10, 10 }, { 510, 60 }};
static const XStringRes _Const0207 = { _StringsDefault4, 0x0040 };
static const XRect _Const0208 = {{ 10, 71 }, { 380, 304 }};
static const XStringRes _Const0209 = { _StringsDefault4, 0x00D0 };
static const XColor _Const020A = { 0x6F, 0x95, 0x38, 0xFF };
static const XColor _Const020B = { 0xFF, 0x46, 0x4D, 0xFF };
static const XColor _Const020C = { 0xD4, 0x9D, 0xB4, 0xFF };
static const XColor _Const020D = { 0x40, 0x40, 0x40, 0xFF };
static const XColor _Const020E = { 0x64, 0x64, 0xFB, 0xFF };
static const XRect _Const020F = {{ 615, 0 }, { 785, 50 }};
static const XStringRes _Const0210 = { _StringsDefault4, 0x0127 };
static const XRect _Const0211 = {{ 615, 60 }, { 785, 110 }};
static const XStringRes _Const0212 = { _StringsDefault4, 0x0133 };
static const XRect _Const0213 = {{ 615, 120 }, { 785, 170 }};
static const XStringRes _Const0214 = { _StringsDefault4, 0x0146 };
static const XRect _Const0215 = {{ 615, 180 }, { 785, 230 }};
static const XStringRes _Const0216 = { _StringsDefault4, 0x0157 };
static const XStringRes _Const0217 = { _StringsDefault4, 0x0169 };
static const XStringRes _Const0218 = { _StringsDefault4, 0x01A9 };
static const XStringRes _Const0219 = { _StringsDefault4, 0x01EF };
static const XStringRes _Const021A = { _StringsDefault4, 0x01F9 };
static const XStringRes _Const021B = { _StringsDefault5, 0x0003 };
static const XStringRes _Const021C = { _StringsDefault5, 0x000B };
static const XStringRes _Const021D = { _StringsDefault5, 0x0012 };
static const XStringRes _Const021E = { _StringsDefault5, 0x001E };
static const XStringRes _Const021F = { _StringsDefault5, 0x0031 };
static const XStringRes _Const0220 = { _StringsDefault5, 0x0040 };
static const XStringRes _Const0221 = { _StringsDefault5, 0x0052 };
static const XStringRes _Const0222 = { _StringsDefault5, 0x0057 };
static const XStringRes _Const0223 = { _StringsDefault5, 0x005D };
static const XStringRes _Const0224 = { _StringsDefault5, 0x009C };
static const XStringRes _Const0225 = { _StringsDefault5, 0x00A7 };
static const XStringRes _Const0226 = { _StringsDefault5, 0x00E5 };
static const XStringRes _Const0227 = { _StringsDefault5, 0x00EF };
static const XStringRes _Const0228 = { _StringsDefault5, 0x012D };
static const XStringRes _Const0229 = { _StringsDefault5, 0x016D };
static const XStringRes _Const022A = { _StringsDefault5, 0x0176 };
static const XStringRes _Const022B = { _StringsDefault5, 0x01B8 };
static const XStringRes _Const022C = { _StringsDefault5, 0x01F6 };
static const XStringRes _Const022D = { _StringsDefault5, 0x01FD };
static const XStringRes _Const022E = { _StringsDefault5, 0x0202 };
static const XStringRes _Const022F = { _StringsDefault6, 0x0003 };
static const XStringRes _Const0230 = { _StringsDefault6, 0x0010 };
static const XStringRes _Const0231 = { _StringsDefault6, 0x001E };
static const XStringRes _Const0232 = { _StringsDefault6, 0x005E };
static const XRect _Const0233 = {{ 0, 0 }, { 554, 350 }};
static const XRect _Const0234 = {{ 551, 0 }, { 600, 350 }};
static const XRect _Const0235 = {{ 610, 0 }, { 780, 50 }};
static const XStringRes _Const0236 = { _StringsDefault6, 0x00A5 };
static const XRect _Const0237 = {{ 2, 2 }, { 552, 348 }};
static const XRect _Const0238 = {{ 610, 60 }, { 780, 110 }};
static const XStringRes _Const0239 = { _StringsDefault6, 0x00B3 };
static const XRect _Const023A = {{ 60, 0 }, { 420, 350 }};
static const XStringRes _Const023B = { _StringsDefault6, 0x00C1 };
static const XRect _Const023C = {{ 0, 0 }, { 720, 450 }};
static const XRect _Const023D = {{ 680, 10 }, { 710, 400 }};
static const XRect _Const023E = {{ 680, 400 }, { 710, 430 }};
static const XRect _Const023F = {{ 10, 400 }, { 680, 435 }};
static const XRect _Const0240 = {{ 680, 0 }, { 710, 10 }};
static const XRect _Const0241 = {{ 0, 400 }, { 10, 430 }};
static const XRect _Const0242 = {{ 10, 0 }, { 680, 10 }};
static const XRect _Const0243 = {{ 0, 10 }, { 10, 400 }};
static const XRect _Const0244 = {{ 10, 10 }, { 680, 400 }};
static const XColor _Const0245 = { 0xC7, 0xC7, 0xC7, 0xFF };
static const XRect _Const0246 = {{ 30, 160 }, { 588, 368 }};
static const XRect _Const0247 = {{ 128, 100 }, { 588, 137 }};
static const XRect _Const0248 = {{ 31, 108 }, { 118, 132 }};
static const XStringRes _Const0249 = { _StringsDefault6, 0x00C9 };
static const XRect _Const024A = {{ 532, 327 }, { 657, 382 }};
static const XRect _Const024B = {{ 220, 23 }, { 425, 78 }};
static const XStringRes _Const024C = { _StringsDefault6, 0x00D5 };
static const XRect _Const024D = {{ 446, 23 }, { 651, 78 }};
static const XStringRes _Const024E = { _StringsDefault6, 0x00EA };
static const XRect _Const024F = {{ 24, 22 }, { 180, 880 }};
static const XRect _Const0250 = {{ 533, 256 }, { 658, 311 }};
static const XRect _Const0251 = {{ 0, 0 }, { 660, 460 }};
static const XRect _Const0252 = {{ 15, 14 }, { 625, 374 }};
static const XRect _Const0253 = {{ 499, 384 }, { 619, 419 }};
static const XRect _Const0254 = {{ 19, 385 }, { 144, 420 }};
static const XRect _Const0255 = {{ 0, 0 }, { 660, 465 }};
static const XRect _Const0256 = {{ 15, 15 }, { 625, 375 }};
static const XRect _Const0257 = {{ 20, 385 }, { 145, 425 }};
static const XRect _Const0258 = {{ 490, 385 }, { 615, 425 }};
static const XRect _Const0259 = {{ 0, 0 }, { 750, 30 }};
static const XRect _Const025A = {{ 0, 0 }, { 180, 30 }};
static const XStringRes _Const025B = { _StringsDefault6, 0x0100 };
static const XRect _Const025C = {{ 160, 0 }, { 220, 30 }};
static const XRect _Const025D = {{ 230, 0 }, { 290, 30 }};
static const XRect _Const025E = {{ 310, 0 }, { 370, 30 }};
static const XRect _Const025F = {{ 390, 0 }, { 450, 30 }};
static const XRect _Const0260 = {{ 460, 0 }, { 520, 30 }};
static const XRect _Const0261 = {{ 540, 0 }, { 600, 30 }};
static const XRect _Const0262 = {{ 610, 0 }, { 670, 30 }};
static const XRect _Const0263 = {{ 690, 0 }, { 750, 30 }};
static const XRect _Const0264 = {{ 0, 0 }, { 800, 435 }};
static const XRect _Const0265 = {{ 177, 15 }, { 237, 35 }};
static const XRect _Const0266 = {{ 545, 15 }, { 625, 35 }};
static const XStringRes _Const0267 = { _StringsDefault6, 0x0111 };
static const XRect _Const0268 = {{ 478, 15 }, { 538, 35 }};
static const XRect _Const0269 = {{ 328, 15 }, { 388, 35 }};
static const XStringRes _Const026A = { _StringsDefault6, 0x011D };
static const XRect _Const026B = {{ 244, 15 }, { 314, 35 }};
static const XStringRes _Const026C = { _StringsDefault6, 0x0126 };
static const XRect _Const026D = {{ 406, 15 }, { 466, 35 }};
static const XStringRes _Const026E = { _StringsDefault6, 0x0133 };
static const XRect _Const026F = {{ 630, 15 }, { 690, 35 }};
static const XRect _Const0270 = {{ 696, 15 }, { 771, 35 }};
static const XStringRes _Const0271 = { _StringsDefault6, 0x013E };
static const XRect _Const0272 = {{ 17, 41 }, { 756, 341 }};
static const XRect _Const0273 = {{ 310, 350 }, { 460, 400 }};
static const XStringRes _Const0274 = { _StringsDefault6, 0x014A };
static const XRect _Const0275 = {{ 0, 0 }, { 500, 30 }};
static const XColor _Const0276 = { 0x22, 0x22, 0x22, 0xFF };
static const XRect _Const0277 = {{ 2, 2 }, { 496, 28 }};
static const XColor _Const0278 = { 0x81, 0x81, 0x81, 0xFF };
static const XRect _Const0279 = {{ 30, 0 }, { 500, 30 }};
static const XRect _Const027A = {{ 0, 0 }, { 25, 20 }};
static const XStringRes _Const027B = { _StringsDefault6, 0x0154 };
static const XColor _Const027C = { 0x77, 0x77, 0x77, 0xFF };
static const XPoint _Const027D = { 31, 2 };
static const XPoint _Const027E = { 30, 0 };
static const XRect _Const027F = {{ 0, 0 }, { 450, 160 }};
static const XRect _Const0280 = {{ 0, 0 }, { 40, 40 }};
static const XRect _Const0281 = {{ 40, 0 }, { 80, 40 }};
static const XRect _Const0282 = {{ 80, 0 }, { 120, 40 }};
static const XRect _Const0283 = {{ 120, 0 }, { 160, 40 }};
static const XRect _Const0284 = {{ 160, 0 }, { 200, 40 }};
static const XRect _Const0285 = {{ 200, 0 }, { 240, 40 }};
static const XRect _Const0286 = {{ 240, 0 }, { 280, 40 }};
static const XRect _Const0287 = {{ 280, 0 }, { 320, 40 }};
static const XRect _Const0288 = {{ 320, 0 }, { 360, 40 }};
static const XRect _Const0289 = {{ 360, 0 }, { 400, 40 }};
static const XRect _Const028A = {{ 20, 40 }, { 60, 80 }};
static const XRect _Const028B = {{ 60, 40 }, { 100, 80 }};
static const XRect _Const028C = {{ 100, 40 }, { 140, 80 }};
static const XRect _Const028D = {{ 140, 40 }, { 180, 80 }};
static const XRect _Const028E = {{ 180, 40 }, { 220, 80 }};
static const XRect _Const028F = {{ 220, 40 }, { 260, 80 }};
static const XRect _Const0290 = {{ 260, 40 }, { 300, 80 }};
static const XRect _Const0291 = {{ 300, 40 }, { 340, 80 }};
static const XRect _Const0292 = {{ 340, 40 }, { 380, 80 }};
static const XRect _Const0293 = {{ 40, 80 }, { 80, 120 }};
static const XRect _Const0294 = {{ 80, 80 }, { 120, 120 }};
static const XRect _Const0295 = {{ 120, 80 }, { 160, 120 }};
static const XRect _Const0296 = {{ 160, 80 }, { 200, 120 }};
static const XRect _Const0297 = {{ 200, 80 }, { 240, 120 }};
static const XRect _Const0298 = {{ 240, 80 }, { 280, 120 }};
static const XRect _Const0299 = {{ 280, 80 }, { 320, 120 }};
static const XRect _Const029A = {{ 100, 120 }, { 340, 160 }};
static const XRect _Const029B = {{ 320, 80 }, { 370, 120 }};
static const XRect _Const029C = {{ 400, 0 }, { 450, 40 }};
static const XRect _Const029D = {{ 0, 120 }, { 80, 160 }};
static const XStringRes _Const029E = { _StringsDefault6, 0x015B };
static const XPoint _Const029F = { 450, 0 };
static const XPoint _Const02A0 = { 450, 160 };
static const XPoint _Const02A1 = { 0, 160 };
static const XRect _Const02A2 = {{ 0, 0 }, { 300, 200 }};
static const XRect _Const02A3 = {{ 4, 0 }, { 296, 196 }};
static const XColor _Const02A4 = { 0xDD, 0xDD, 0xDD, 0xFF };
static const XRect _Const02A5 = {{ 0, -10 }, { 300, 200 }};
static const XColor _Const02A6 = { 0x99, 0x99, 0x99, 0xFF };
static const XColor _Const02A7 = { 0x88, 0xCC, 0xFF, 0xFF };
static const XColor _Const02A8 = { 0x3A, 0x3A, 0x3A, 0xFF };
static const XStringRes _Const02A9 = { _StringsDefault6, 0x0166 };
static const XRect _Const02AA = {{ 0, 0 }, { 330, 160 }};
static const XRect _Const02AB = {{ 210, 0 }, { 250, 40 }};
static const XRect _Const02AC = {{ 40, 40 }, { 80, 80 }};
static const XRect _Const02AD = {{ 80, 40 }, { 120, 80 }};
static const XRect _Const02AE = {{ 120, 40 }, { 160, 80 }};
static const XRect _Const02AF = {{ 210, 40 }, { 250, 80 }};
static const XRect _Const02B0 = {{ 80, 120 }, { 160, 160 }};
static const XRect _Const02B1 = {{ 250, 40 }, { 290, 80 }};
static const XRect _Const02B2 = {{ 250, 80 }, { 290, 120 }};
static const XRect _Const02B3 = {{ 290, 40 }, { 330, 80 }};
static const XRect _Const02B4 = {{ 210, 120 }, { 250, 160 }};
static const XRect _Const02B5 = {{ 210, 80 }, { 250, 120 }};
static const XRect _Const02B6 = {{ 410, 80 }, { 460, 120 }};
static const XStringRes _Const02B7 = { _StringsDefault6, 0x016B };
static const XRect _Const02B8 = {{ 250, 120 }, { 290, 160 }};
static const XRect _Const02B9 = {{ 290, 0 }, { 330, 40 }};
static const XRect _Const02BA = {{ 290, 80 }, { 330, 120 }};
static const XRect _Const02BB = {{ 250, 0 }, { 290, 40 }};
static const XRect _Const02BC = {{ 290, 120 }, { 330, 160 }};
static const XPoint _Const02BD = { 330, 0 };
static const XPoint _Const02BE = { 330, 160 };
static const XRect _Const02BF = {{ 0, 0 }, { 500, 330 }};
static const XRect _Const02C0 = {{ 470, 0 }, { 500, 10 }};
static const XRect _Const02C1 = {{ 10, 0 }, { 470, 10 }};
static const XRect _Const02C2 = {{ 290, 50 }, { 395, 135 }};
static const XRect _Const02C3 = {{ 80, 50 }, { 185, 125 }};
static const XRect _Const02C4 = {{ 170, 240 }, { 310, 290 }};
static const XRect _Const02C5 = {{ 50, 150 }, { 200, 195 }};
static const XStringRes _Const02C6 = { _StringsDefault6, 0x0176 };
static const XRect _Const02C7 = {{ 270, 150 }, { 420, 195 }};
static const XStringRes _Const02C8 = { _StringsDefault6, 0x0185 };
static const XRect _Const02C9 = {{ 303, 38 }, { 408, 123 }};
static const XRect _Const02CA = {{ 70, 43 }, { 175, 118 }};
static const XRect _Const02CB = {{ 49, 138 }, { 189, 178 }};
static const XStringRes _Const02CC = { _StringsDefault6, 0x0191 };
static const XRect _Const02CD = {{ 285, 138 }, { 425, 178 }};
static const XStringRes _Const02CE = { _StringsDefault6, 0x01A1 };
static const XRect _Const02CF = {{ 42, 191 }, { 432, 236 }};
static const XRect _Const02D0 = {{ 162, 243 }, { 312, 293 }};
static const XStringRes _Const02D1 = { _StringsDefault6, 0x01B0 };
static const XRect _Const02D2 = {{ 0, 0 }, { 710, 410 }};
static const XRect _Const02D3 = {{ 39, 124 }, { 649, 354 }};
static const XRect _Const02D4 = {{ 39, 43 }, { 530, 93 }};
static const XRect _Const02D5 = {{ 553, 41 }, { 663, 93 }};
static const XStringRes _Const02D6 = { _StringsDefault6, 0x01B6 };
static const XRect _Const02D7 = {{ 550, 310 }, { 660, 362 }};
static const XColor _Const02D8 = { 0x15, 0x15, 0x15, 0xFF };
static const XColor _Const02D9 = { 0xF5, 0xF5, 0xF5, 0xFF };
static const XStringRes _Const02DA = { _StringsDefault6, 0x01BE };
static const XColor _Const02DB = { 0x6C, 0x6E, 0x70, 0xFF };
static const XColor _Const02DC = { 0xA8, 0xAB, 0xAB, 0xAA };
static const XPoint _Const02DD = { 39, 39 };
static const XColor _Const02DE = { 0xAE, 0xAE, 0xAE, 0xB0 };
static const XColor _Const02DF = { 0xFF, 0x00, 0x7A, 0xFF };
static const XColor _Const02E0 = { 0xB2, 0xB2, 0xB2, 0xB1 };
static const XColor _Const02E1 = { 0xB1, 0xB1, 0xB1, 0xB3 };
static const XPoint _Const02E2 = { 45, 39 };
static const XRect _Const02E3 = {{ 10, 10 }, { 770, 450 }};
static const XColor _Const02E4 = { 0xC3, 0xC3, 0xC3, 0xFF };
static const XRect _Const02E5 = {{ 24, 20 }, { 130, 50 }};
static const XStringRes _Const02E6 = { _StringsDefault6, 0x01E1 };
static const XRect _Const02E7 = {{ 177, 20 }, { 727, 440 }};
static const XRect _Const02E8 = {{ 729, 20 }, { 769, 440 }};
static const XRect _Const02E9 = {{ 30, 300 }, { 155, 355 }};
static const XRect _Const02EA = {{ 30, 370 }, { 155, 425 }};
static const XRect _Const02EB = {{ 177, 20 }, { 727, 220 }};
static const XRect _Const02EC = {{ 17, 20 }, { 172, 360 }};
static const XRect _Const02ED = {{ 177, 240 }, { 727, 350 }};
static const XRect _Const02EE = {{ 177, 320 }, { 727, 500 }};
static const XStringRes _Const02EF = { _StringsDefault6, 0x01EC };
static const XRect _Const02F0 = {{ 0, 0 }, { 240, 390 }};
static const XRect _Const02F1 = {{ 2, 7 }, { 188, 47 }};
static const XRect _Const02F2 = {{ 0, 5 }, { 190, 49 }};
static const XColor _Const02F3 = { 0x1C, 0x1C, 0x1C, 0xFF };
static const XColor _Const02F4 = { 0xBF, 0xBF, 0xBF, 0xFF };
static const XPoint _Const02F5 = { 240, 1 };
static const XPoint _Const02F6 = { 240, 50 };
static const XPoint _Const02F7 = { 0, 50 };
static const XRect _Const02F8 = {{ 8, 11 }, { 185, 43 }};
static const XRect _Const02F9 = {{ 0, 50 }, { 200, 390 }};
static const XRect _Const02FA = {{ 0, 48 }, { 200, 390 }};
static const XPoint _Const02FB = { 0, 47 };
static const XPoint _Const02FC = { 200, 47 };
static const XPoint _Const02FD = { 200, 575 };
static const XPoint _Const02FE = { 0, 575 };
static const XRect _Const02FF = {{ 189, 0 }, { 239, 55 }};
static const XStringRes _Const0300 = { _StringsDefault6, 0x01F2 };
static const XRect _Const0301 = {{ 0, 0 }, { 550, 210 }};
static const XRect _Const0302 = {{ 10, 42 }, { 120, 90 }};
static const XRect _Const0303 = {{ 130, 45 }, { 260, 90 }};
static const XRect _Const0304 = {{ 410, 92 }, { 550, 139 }};
static const XStringRes _Const0305 = { _StringsDefault6, 0x01FB };
static const XRect _Const0306 = {{ 410, 42 }, { 550, 87 }};
static const XStringRes _Const0307 = { _StringsDefault7, 0x0003 };
static const XRect _Const0308 = {{ 10, 92 }, { 160, 137 }};
static const XRect _Const0309 = {{ 270, 42 }, { 400, 87 }};
static const XRect _Const030A = {{ 10, 142 }, { 210, 187 }};
static const XStringRes _Const030B = { _StringsDefault7, 0x000E };
static const XRect _Const030C = {{ 270, 92 }, { 420, 137 }};
static const XRect _Const030D = {{ 130, 92 }, { 280, 137 }};
static const XStringRes _Const030E = { _StringsDefault7, 0x0022 };
static const XRect _Const030F = {{ 270, 142 }, { 445, 187 }};
static const XStringRes _Const0310 = { _StringsDefault7, 0x002F };
static const XRect _Const0311 = {{ 9, 1 }, { 299, 36 }};
static const XStringRes _Const0312 = { _StringsDefault7, 0x0040 };
static const XPoint _Const0313 = { 540, 20 };
static const XPoint _Const0314 = { 150, 20 };
static const XRect _Const0315 = {{ 0, 0 }, { 550, 170 }};
static const XRect _Const0316 = {{ 9, 1 }, { 190, 35 }};
static const XStringRes _Const0317 = { _StringsDefault7, 0x0050 };
static const XRect _Const0318 = {{ 206, 50 }, { 335, 95 }};
static const XStringRes _Const0319 = { _StringsDefault7, 0x0060 };
static const XRect _Const031A = {{ 397, 50 }, { 517, 95 }};
static const XStringRes _Const031B = { _StringsDefault7, 0x006C };
static const XRect _Const031C = {{ 10, 50 }, { 159, 95 }};
static const XStringRes _Const031D = { _StringsDefault7, 0x0078 };
static const XRect _Const031E = {{ 0, 0 }, { 550, 140 }};
static const XRect _Const031F = {{ 9, 0 }, { 140, 36 }};
static const XStringRes _Const0320 = { _StringsDefault7, 0x008E };
static const XPoint _Const0321 = { 140, 20 };
static const XRect _Const0322 = {{ 13, 44 }, { 215, 74 }};
static const XStringRes _Const0323 = { _StringsDefault7, 0x009D };
static const XRect _Const0324 = {{ 226, 40 }, { 543, 82 }};
static const XRect _Const0325 = {{ 11, 92 }, { 201, 135 }};
static const XStringRes _Const0326 = { _StringsDefault7, 0x00B5 };
static const XRect _Const0327 = {{ 268, 88 }, { 467, 137 }};
static const XStringRes _Const0328 = { _StringsDefault7, 0x00C5 };
static const XStringRes _Const0329 = { _StringsDefault7, 0x00D8 };
static const XStringRes _Const032A = { _StringsDefault7, 0x00E9 };
static const XStringRes _Const032B = { _StringsDefault7, 0x00F3 };
static const XColor _Const032C = { 0x93, 0x93, 0x93, 0xFF };
static const XPoint _Const032D = { 70, 39 };
static const XRect _Const032E = {{ 0, 0 }, { 550, 40 }};
static const XRect _Const032F = {{ 60, 0 }, { 200, 17 }};
static const XRect _Const0330 = {{ 60, 15 }, { 415, 40 }};
static const XRect _Const0331 = {{ 510, 0 }, { 550, 40 }};
static const XRect _Const0332 = {{ 7, 5 }, { 37, 35 }};
static const XRect _Const0333 = {{ 60, 5 }, { 230, 36 }};
static const XPoint _Const0334 = { 50, 0 };
static const XPoint _Const0335 = { 50, 40 };
static const XRect _Const0336 = {{ 420, 0 }, { 505, 40 }};
static const XStringRes _Const0337 = { _StringsDefault7, 0x00FD };
static const XRect _Const0338 = {{ 0, 0 }, { 220, 40 }};
static const XRect _Const0339 = {{ 10, 0 }, { 210, 40 }};
static const XStringRes _Const033A = { _StringsDefault7, 0x0105 };
static const XColor _Const033B = { 0x88, 0x88, 0x88, 0xFF };
static const XColor _Const033C = { 0x44, 0x44, 0x44, 0xFF };
static const XRect _Const033D = {{ 0, 0 }, { 430, 230 }};
static const XRect _Const033E = {{ 38, 80 }, { 368, 125 }};
static const XRect _Const033F = {{ 38, 43 }, { 218, 68 }};
static const XStringRes _Const0340 = { _StringsDefault7, 0x0110 };
static const XRect _Const0341 = {{ 148, 149 }, { 260, 190 }};
static const XStringRes _Const0342 = { _StringsDefault7, 0x011C };
static const XStringRes _Const0343 = { _StringsDefault7, 0x0126 };
static const XRect _Const0344 = {{ 30, 379 }, { 155, 434 }};
static const XRect _Const0345 = {{ 180, 20 }, { 730, 180 }};
static const XRect _Const0346 = {{ 180, 180 }, { 730, 300 }};
static const XRect _Const0347 = {{ 180, 300 }, { 730, 445 }};
static const XRect _Const0348 = {{ 0, 0 }, { 550, 150 }};
static const XStringRes _Const0349 = { _StringsDefault7, 0x0131 };
static const XPoint _Const034A = { 155, 20 };
static const XRect _Const034B = {{ 10, 46 }, { 110, 86 }};
static const XRect _Const034C = {{ 130, 47 }, { 260, 87 }};
static const XRect _Const034D = {{ 270, 44 }, { 400, 84 }};
static const XRect _Const034E = {{ 410, 44 }, { 540, 84 }};
static const XRect _Const034F = {{ 10, 93 }, { 110, 133 }};
static const XRect _Const0350 = {{ 130, 94 }, { 250, 134 }};
static const XRect _Const0351 = {{ 0, 0 }, { 550, 115 }};
static const XRect _Const0352 = {{ 9, 1 }, { 195, 35 }};
static const XStringRes _Const0353 = { _StringsDefault7, 0x0142 };
static const XPoint _Const0354 = { 165, 20 };
static const XRect _Const0355 = {{ 157, 50 }, { 307, 95 }};
static const XStringRes _Const0356 = { _StringsDefault7, 0x0153 };
static const XRect _Const0357 = {{ 8, 50 }, { 150, 95 }};
static const XRect _Const0358 = {{ 335, 50 }, { 532, 95 }};
static const XStringRes _Const0359 = { _StringsDefault7, 0x0162 };
static const XRect _Const035A = {{ 0, 0 }, { 550, 145 }};
static const XRect _Const035B = {{ 9, 0 }, { 160, 35 }};
static const XStringRes _Const035C = { _StringsDefault7, 0x017C };
static const XPoint _Const035D = { 170, 20 };
static const XRect _Const035E = {{ 13, 46 }, { 215, 76 }};
static const XStringRes _Const035F = { _StringsDefault7, 0x018D };
static const XRect _Const0360 = {{ 230, 42 }, { 543, 81 }};
static const XRect _Const0361 = {{ 12, 95 }, { 225, 124 }};
static const XStringRes _Const0362 = { _StringsDefault7, 0x01A5 };
static const XRect _Const0363 = {{ 230, 90 }, { 530, 131 }};
static const XStringRes _Const0364 = { _StringsDefault7, 0x01BE };
static const XStringRes _Const0365 = { _StringsDefault7, 0x01CF };
static const XRect _Const0366 = {{ 0, 0 }, { 555, 50 }};
static const XRect _Const0367 = {{ 10, 15 }, { 40, 45 }};
static const XRect _Const0368 = {{ 60, 10 }, { 210, 49 }};
static const XRect _Const0369 = {{ 450, 10 }, { 535, 46 }};
static const XRect _Const036A = {{ 108, 15 }, { 340, 45 }};
static const XRect _Const036B = {{ 340, 15 }, { 415, 45 }};
static const XRect _Const036C = {{ 60, 0 }, { 205, 50 }};
static const XRect _Const036D = {{ 0, 0 }, { 550, 50 }};
static const XRect _Const036E = {{ 135, 1 }, { 295, 25 }};
static const XColor _Const036F = { 0x3D, 0x3D, 0x3D, 0xFF };
static const XRect _Const0370 = {{ 135, 19 }, { 505, 46 }};
static const XRect _Const0371 = {{ 39, 11 }, { 69, 41 }};
static const XPoint _Const0372 = { 29, 1 };
static const XPoint _Const0373 = { 79, 1 };
static const XPoint _Const0374 = { 79, 50 };
static const XPoint _Const0375 = { 29, 50 };
static const XRect _Const0376 = {{ 80, 0 }, { 140, 50 }};
static const XRect _Const0377 = {{ 116, 10 }, { 265, 40 }};
static const XRect _Const0378 = {{ 435, 10 }, { 485, 42 }};
static const XRect _Const0379 = {{ 432, 0 }, { 482, 50 }};
static const XRect _Const037A = {{ 275, 5 }, { 400, 45 }};
static const XRect _Const037B = {{ 63, 0 }, { 113, 50 }};
static const XRect _Const037C = {{ 500, 0 }, { 550, 50 }};
static const XRect _Const037D = {{ 0, 0 }, { 135, 40 }};
static const XRect _Const037E = {{ 2, 5 }, { 95, 35 }};
static const XRect _Const037F = {{ 0, 5 }, { 95, 35 }};
static const XPoint _Const0380 = { 135, 0 };
static const XPoint _Const0381 = { 135, 40 };
static const XRect _Const0382 = {{ 5, 5 }, { 90, 32 }};
static const XRect _Const0383 = {{ 95, 0 }, { 136, 40 }};
static const XRect _Const0384 = {{ 0, 0 }, { 90, 35 }};
static const XPoint _Const0385 = { 95, 35 };
static const XPoint _Const0386 = { 95, 0 };
static const XRect _Const0387 = {{ 4, 0 }, { 89, 35 }};
static const XRect _Const0388 = {{ 0, 0 }, { 78, 320 }};
static const XRect _Const0389 = {{ 0, 0 }, { 78, 322 }};
static const XStringRes _Const038A = { _StringsDefault7, 0x01E1 };
static const XStringRes _Const038B = { _StringsDefault7, 0x01F1 };
static const XRect _Const038C = {{ 0, 0 }, { 550, 45 }};
static const XRect _Const038D = {{ 363, 3 }, { 543, 23 }};
static const XRect _Const038E = {{ 180, 2 }, { 400, 24 }};
static const XStringRes _Const038F = { _StringsDefault7, 0x0202 };
static const XRect _Const0390 = {{ 2, 24 }, { 410, 44 }};
static const XRect _Const0391 = {{ 5, 3 }, { 145, 23 }};
static const XStringRes _Const0392 = { _StringsDefault8, 0x0003 };
static const XRect _Const0393 = {{ 69, 22 }, { 469, 44 }};
static const XRect _Const0394 = {{ 70, 1 }, { 250, 19 }};
static const XRect _Const0395 = {{ 467, 0 }, { 510, 45 }};
static const XColor _Const0396 = { 0x94, 0x94, 0x94, 0x99 };
static const XColor _Const0397 = { 0x94, 0x94, 0x94, 0x93 };
static const XColor _Const0398 = { 0x85, 0x85, 0x85, 0x87 };
static const XPoint _Const0399 = { 30, 30 };
static const XStringRes _Const039A = { _StringsDefault8, 0x0018 };
static const XStringRes _Const039B = { _StringsDefault8, 0x0021 };
static const XStringRes _Const039C = { _StringsDefault8, 0x002D };
static const XStringRes _Const039D = { _StringsDefault8, 0x0036 };
static const XStringRes _Const039E = { _StringsDefault8, 0x003E };
static const XStringRes _Const039F = { _StringsDefault8, 0x0044 };
static const XStringRes _Const03A0 = { _StringsDefault8, 0x004B };
static const XStringRes _Const03A1 = { _StringsDefault8, 0x0059 };
static const XStringRes _Const03A2 = { _StringsDefault8, 0x0064 };
static const XStringRes _Const03A3 = { _StringsDefault8, 0x006E };
static const XStringRes _Const03A4 = { _StringsDefault8, 0x0079 };
static const XStringRes _Const03A5 = { _StringsDefault8, 0x0083 };
static const XStringRes _Const03A6 = { _StringsDefault8, 0x008A };
static const XStringRes _Const03A7 = { _StringsDefault8, 0x0098 };
static const XStringRes _Const03A8 = { _StringsDefault8, 0x00A8 };
static const XRect _Const03A9 = {{ 12, 20 }, { 330, 44 }};
static const XRect _Const03AA = {{ 13, 0 }, { 320, 20 }};
static const XRect _Const03AB = {{ 340, 0 }, { 500, 19 }};
static const XRect _Const03AC = {{ 9, 21 }, { 459, 43 }};
static const XRect _Const03AD = {{ 10, 0 }, { 190, 18 }};
static const XStringRes _Const03AE = { _StringsDefault8, 0x00B5 };
static const XStringRes _Const03AF = { _StringsDefault8, 0x00C2 };
static const XStringRes _Const03B0 = { _StringsDefault8, 0x00C7 };
static const XStringRes _Const03B1 = { _StringsDefault8, 0x00D3 };
static const XStringRes _Const03B2 = { _StringsDefault8, 0x00DD };
static const XStringRes _Const03B3 = { _StringsDefault8, 0x00E7 };
static const XRect _Const03B4 = {{ 210, 10 }, { 355, 40 }};
static const XRect _Const03B5 = {{ 130, 0 }, { 180, 50 }};
static const XRect _Const03B6 = {{ 0, 0 }, { 800, 350 }};
static const XPoint _Const03B7 = { -20, 24 };
static const XRect _Const03B8 = {{ 565, 0 }, { 605, 350 }};
static const XPoint _Const03B9 = { 40, 30 };
static const XRect _Const03BA = {{ 0, 0 }, { 547, 350 }};
static const XRect _Const03BB = {{ 0, 0 }, { 565, 350 }};
static const XRect _Const03BC = {{ 860, 0 }, { 960, 50 }};
static const XStringRes _Const03BD = { _StringsDefault8, 0x00F2 };
static const XRect _Const03BE = {{ 970, 0 }, { 1070, 50 }};
static const XStringRes _Const03BF = { _StringsDefault8, 0x00FC };
static const XRect _Const03C0 = {{ 639, 4 }, { 744, 36 }};
static const XStringRes _Const03C1 = { _StringsDefault8, 0x0106 };
static const XRect _Const03C2 = {{ 640, 50 }, { 745, 85 }};
static const XStringRes _Const03C3 = { _StringsDefault8, 0x0115 };
static const XRect _Const03C4 = {{ 640, 100 }, { 745, 134 }};
static const XStringRes _Const03C5 = { _StringsDefault8, 0x0122 };
static const XRect _Const03C6 = {{ 615, 200 }, { 795, 249 }};
static const XStringRes _Const03C7 = { _StringsDefault8, 0x0130 };
static const XRect _Const03C8 = {{ 744, 6 }, { 785, 185 }};
static const XRect _Const03C9 = {{ 640, 150 }, { 745, 180 }};
static const XColor _Const03CA = { 0x4C, 0x4C, 0x4C, 0x83 };
static const XColor _Const03CB = { 0xAA, 0xD1, 0xFF, 0x87 };
static const XStringRes _Const03CC = { _StringsDefault8, 0x013F };
static const XRect _Const03CD = {{ 360, 5 }, { 560, 220 }};
static const XPoint _Const03CE = { 565, 0 };
static const XPoint _Const03CF = { 565, 350 };
static const XPoint _Const03D0 = { 0, 350 };
static const XStringRes _Const03D1 = { _StringsDefault8, 0x0149 };
static const XRect _Const03D2 = {{ 0, 0 }, { 385, 25 }};
static const XRect _Const03D3 = {{ 160, 50 }, { 330, 70 }};
static const XStringRes _Const03D4 = { _StringsDefault8, 0x0159 };
static const XRect _Const03D5 = {{ 0, 0 }, { 255, 26 }};
static const XColor _Const03D6 = { 0x1B, 0xFF, 0x00, 0x00 };
static const XColor _Const03D7 = { 0x3F, 0xFF, 0x37, 0xFF };
static const XColor _Const03D8 = { 0xFF, 0x1D, 0x34, 0x93 };
static const XRect _Const03D9 = {{ 0, 0 }, { 255, 25 }};
static const XRect _Const03DA = {{ 4, 6 }, { 41, 16 }};
static const XStringRes _Const03DB = { _StringsDefault8, 0x016D };
static const XRect _Const03DC = {{ 42, 5 }, { 63, 20 }};
static const XStringRes _Const03DD = { _StringsDefault8, 0x0175 };
static const XRect _Const03DE = {{ 64, 6 }, { 93, 16 }};
static const XStringRes _Const03DF = { _StringsDefault8, 0x017B };
static const XRect _Const03E0 = {{ 95, 5 }, { 124, 19 }};
static const XStringRes _Const03E1 = { _StringsDefault8, 0x0183 };
static const XRect _Const03E2 = {{ 125, 6 }, { 154, 16 }};
static const XStringRes _Const03E3 = { _StringsDefault8, 0x018A };
static const XRect _Const03E4 = {{ 156, 5 }, { 250, 19 }};
static const XStringRes _Const03E5 = { _StringsDefault8, 0x0192 };
static const XRect _Const03E6 = {{ 255, 0 }, { 280, 25 }};
static const XStringRes _Const03E7 = { _StringsDefault8, 0x01A2 };
static const XColor _Const03E8 = { 0x22, 0x00, 0x22, 0xFF };
static const XColor _Const03E9 = { 0x11, 0x22, 0xFF, 0x80 };
static const XStringRes _Const03EA = { _StringsDefault8, 0x01A8 };
static const XColor _Const03EB = { 0x00, 0x22, 0x22, 0xFF };
static const XColor _Const03EC = { 0x00, 0x55, 0xBB, 0x80 };
static const XStringRes _Const03ED = { _StringsDefault8, 0x01AD };
static const XColor _Const03EE = { 0x22, 0x00, 0x00, 0xFF };
static const XColor _Const03EF = { 0xFF, 0x22, 0xFF, 0x80 };
static const XColor _Const03F0 = { 0x11, 0x88, 0x22, 0x80 };
static const XColor _Const03F1 = { 0x00, 0x00, 0x00, 0x50 };
static const XRect _Const03F2 = {{ 0, 0 }, { 600, 25 }};
static const XRect _Const03F3 = {{ 10, 0 }, { 600, 25 }};
static const XRect _Const03F4 = {{ 0, 0 }, { 145, 25 }};
static const XRect _Const03F5 = {{ 0, 0 }, { 220, 25 }};
static const XRect _Const03F6 = {{ 0, 0 }, { 220, 26 }};
static const XColor _Const03F7 = { 0x5F, 0xEE, 0xFF, 0x82 };
static const XColor _Const03F8 = { 0xED, 0x76, 0xFF, 0xFF };
static const XRect _Const03F9 = {{ 0, 5 }, { 220, 20 }};
static const XStringRes _Const03FA = { _StringsDefault8, 0x01B2 };
static const XRect _Const03FB = {{ 0, 0 }, { 135, 15 }};
static const XRect _Const03FC = {{ 0, 1 }, { 132, 16 }};
static const XStringRes _Const03FD = { _StringsDefault8, 0x01C5 };
static const XStringRes _Const03FE = { _StringsDefault8, 0x01D7 };
static const XStringRes _Const03FF = { _StringsDefault8, 0x01E1 };
static const XStringRes _Const0400 = { _StringsDefault8, 0x01EC };
static const XColor _Const0401 = { 0xA8, 0xAB, 0xAB, 0xFF };
static const XPoint _Const0402 = { 23, 23 };
static const XRect _Const0403 = {{ 0, 0 }, { 45, 185 }};
static const XPoint _Const0404 = { 15, 165 };
static const XPoint _Const0405 = { 15, 14 };
static const XPoint _Const0406 = { 15, 15 };
static const XPoint _Const0407 = { 0, 65 };
static const XPoint _Const0408 = { 15, 65 };
static const XPoint _Const0409 = { 1, 115 };
static const XPoint _Const040A = { 16, 115 };
static const XPoint _Const040B = { 44, 13 };
static const XPoint _Const040C = { 24, 13 };
static const XPoint _Const040D = { 1, 165 };
static const XPoint _Const040E = { 16, 165 };
static const XRect _Const040F = {{ 0, 0 }, { 270, 210 }};
static const XColor _Const0410 = { 0xFF, 0x00, 0xB2, 0xFF };
static const XColor _Const0411 = { 0xFF, 0x43, 0x99, 0xFF };
static const XStringRes _Const0412 = { _StringsDefault8, 0x01FD };
static const XColor _Const0413 = { 0x37, 0x37, 0x37, 0xFF };
static const XStringRes _Const0414 = { _StringsDefault9, 0x0003 };
static const XRect _Const0415 = {{ 0, 0 }, { 200, 215 }};
static const XColor _Const0416 = { 0xE0, 0xE0, 0xE0, 0xFF };
static const XRect _Const0417 = {{ 10, 10 }, { 55, 35 }};
static const XStringRes _Const0418 = { _StringsDefault9, 0x000C };
static const XRect _Const0419 = {{ 10, 35 }, { 100, 60 }};
static const XStringRes _Const041A = { _StringsDefault9, 0x0014 };
static const XRect _Const041B = {{ 10, 60 }, { 100, 85 }};
static const XStringRes _Const041C = { _StringsDefault9, 0x0022 };
static const XRect _Const041D = {{ 10, 85 }, { 100, 110 }};
static const XStringRes _Const041E = { _StringsDefault9, 0x002D };
static const XRect _Const041F = {{ 93, 10 }, { 141, 35 }};
static const XRect _Const0420 = {{ 93, 35 }, { 190, 60 }};
static const XRect _Const0421 = {{ 93, 60 }, { 190, 85 }};
static const XRect _Const0422 = {{ 93, 85 }, { 190, 110 }};
static const XRect _Const0423 = {{ 10, 110 }, { 100, 135 }};
static const XStringRes _Const0424 = { _StringsDefault9, 0x0039 };
static const XRect _Const0425 = {{ 93, 110 }, { 190, 135 }};
static const XRect _Const0426 = {{ 10, 160 }, { 100, 185 }};
static const XStringRes _Const0427 = { _StringsDefault9, 0x0042 };
static const XRect _Const0428 = {{ 93, 135 }, { 190, 160 }};
static const XRect _Const0429 = {{ 10, 135 }, { 100, 160 }};
static const XStringRes _Const042A = { _StringsDefault9, 0x004B };
static const XRect _Const042B = {{ 10, 185 }, { 100, 210 }};
static const XStringRes _Const042C = { _StringsDefault9, 0x0054 };
static const XRect _Const042D = {{ 93, 160 }, { 190, 185 }};
static const XRect _Const042E = {{ 93, 185 }, { 190, 210 }};
static const XStringRes _Const042F = { _StringsDefault9, 0x0060 };
static const XStringRes _Const0430 = { _StringsDefault9, 0x006D };
static const XStringRes _Const0431 = { _StringsDefault9, 0x0076 };
static const XStringRes _Const0432 = { _StringsDefault9, 0x0084 };
static const XStringRes _Const0433 = { _StringsDefault9, 0x0092 };
static const XStringRes _Const0434 = { _StringsDefault9, 0x0098 };
static const XStringRes _Const0435 = { _StringsDefault9, 0x009D };
static const XStringRes _Const0436 = { _StringsDefault9, 0x00A3 };
static const XStringRes _Const0437 = { _StringsDefault9, 0x00AB };
static const XStringRes _Const0438 = { _StringsDefault9, 0x00B4 };
static const XStringRes _Const0439 = { _StringsDefault9, 0x00BC };
static const XStringRes _Const043A = { _StringsDefault9, 0x00C5 };
static const XRect _Const043B = {{ 0, 0 }, { 430, 210 }};
static const XRect _Const043C = {{ 37, 105 }, { 367, 150 }};
static const XRect _Const043D = {{ 38, 21 }, { 279, 54 }};
static const XStringRes _Const043E = { _StringsDefault9, 0x00CF };
static const XRect _Const043F = {{ 42, 84 }, { 290, 105 }};
static const XStringRes _Const0440 = { _StringsDefault9, 0x00E8 };
static const XStringRes _Const0441 = { _StringsDefault9, 0x00F9 };
static const XStringRes _Const0442 = { _StringsDefault9, 0x010B };
static const XStringRes _Const0443 = { _StringsDefault9, 0x0113 };
static const XStringRes _Const0444 = { _StringsDefault9, 0x0127 };
static const XStringRes _Const0445 = { _StringsDefault9, 0x013C };
static const XStringRes _Const0446 = { _StringsDefault9, 0x014E };
static const XStringRes _Const0447 = { _StringsDefault9, 0x0160 };
static const XStringRes _Const0448 = { _StringsDefault9, 0x016C };
static const XStringRes _Const0449 = { _StringsDefault9, 0x017A };
static const XStringRes _Const044A = { _StringsDefault9, 0x0188 };
static const XRect _Const044B = {{ 0, 0 }, { 550, 70 }};
static const XRect _Const044C = {{ 10, 16 }, { 212, 46 }};
static const XRect _Const044D = {{ 221, 10 }, { 538, 52 }};
static const XRect _Const044E = {{ 0, 0 }, { 550, 60 }};
static const XRect _Const044F = {{ 270, 10 }, { 355, 55 }};
static const XStringRes _Const0450 = { _StringsDefault9, 0x0196 };
static const XPoint _Const0451 = { 542, 20 };
static const XPoint _Const0452 = { 222, 20 };
static const XRect _Const0453 = {{ 11, 46 }, { 213, 76 }};
static const XStringRes _Const0454 = { _StringsDefault9, 0x01AC };

#ifndef EW_DONT_CHECK_INDEX
  /* This function is used to check the indices when accessing an array.
     If you don't want this verification add the define EW_DONT_CHECK_INDEX
     to your Makefile or project settings. */
  static int EwCheckIndex( int aIndex, int aRange, const char* aFile, int aLine )
  {
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
    {
      EwPrint( "[FATAL ERROR in %s:%d] Array index %d out of bounds %d",
                aFile, aLine, aIndex, aRange );
      EwPanic();
    }
    return aIndex;
  }

  #define EwCheckIndex( aIndex, aRange ) \
    EwCheckIndex( aIndex, aRange, __FILE__, __LINE__ )
#else
  #define EwCheckIndex( aIndex, aRange ) aIndex
#endif

/* User defined inline code: 'Application::Inline1' */
#include "stm32f7xx_hal_rtc.h"

#include "MM_Command2.h"
#include "MM_CUtils.h"

#include "CO_Site.h"
#include "CO_RBU.h"
#include "MM_Device.h" 

#include <stdio.h>
#include <string.h>


/* Initializer for the class 'Application::DynamicAreaHead' */
void ApplicationDynamicAreaHead__Init( ApplicationDynamicAreaHead _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  XFlatCheckBox__Init( &_this->CheckBox, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDynamicAreaHead );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0000 );
  CoreRectView__OnSetBounds( &_this->Image, _Const0001 );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const0002 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
  XFlatCheckBox_OnSetCaption( &_this->CheckBox, EwLoadString( &_Const0003 ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0004 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0005 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0006 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0007 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0008 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0009 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  _this->CheckBox.OnChange = EwNewSlot( _this, ApplicationDynamicAreaHead_GreyAll 
  );
  XFlatCheckBox_OnSetOutlet( &_this->CheckBox, EwNewRef( _this, ApplicationDynamicAreaHead_OnGetZoneEnabled, 
  ApplicationDynamicAreaHead_OnSetZoneEnabled ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationDynamicAreaHead_ToggleHandler 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationDynamicAreaHead_ClearAll 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::DynamicAreaHead' */
void ApplicationDynamicAreaHead__ReInit( ApplicationDynamicAreaHead _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  XFlatCheckBox__ReInit( &_this->CheckBox );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'Application::DynamicAreaHead' */
void ApplicationDynamicAreaHead__Done( ApplicationDynamicAreaHead _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDynamicAreaHead );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  XFlatCheckBox__Done( &_this->CheckBox );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Release all used strings */
  EwReleaseString( &_this->stringstart );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DynamicAreaHead' */
void ApplicationDynamicAreaHead__Mark( ApplicationDynamicAreaHead _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->CheckBox );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDynamicAreaHead_UpdateLayout( ApplicationDynamicAreaHead _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDynamicAreaHead_UpdateViewState( ApplicationDynamicAreaHead _this, 
  XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->CheckBox.CaptionText, EwConcatString( _this->stringstart, 
  EwNewStringInt( _this->ZoneNum, 0, 10 )));

  if ( _this->Expanded )
  {
    ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationCollapseBitmap, 
    ResourcesBitmap ));
  }
  else
  {
    ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationExpandBitmap, 
    ResourcesBitmap ));
  }
}

/* 'C' function for method : 'Application::DynamicAreaHead.ToggleHandler()' */
void ApplicationDynamicAreaHead_ToggleHandler( ApplicationDynamicAreaHead _this, 
  XObject sender )
{
  CoreVerticalList lst;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->Expanded = (XBool)!_this->Expanded;
  lst = EwCastObject( _this->Super3.next, CoreVerticalList );

  if ( lst != 0 )
  {
    CoreGroup_OnSetVisible((CoreGroup)lst, _this->Expanded );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'Application::DynamicAreaHead.OnSetZoneEnabled()' */
void ApplicationDynamicAreaHead_OnSetZoneEnabled( ApplicationDynamicAreaHead _this, 
  XBool value )
{
  if ( _this->ZoneEnabled == value )
    return;

  _this->ZoneEnabled = value;
}

/* 'C' function for method : 'Application::DynamicAreaHead.OnGetZoneEnabled()' */
XBool ApplicationDynamicAreaHead_OnGetZoneEnabled( ApplicationDynamicAreaHead _this )
{
  return _this->ZoneEnabled;
}

/* 'C' function for method : 'Application::DynamicAreaHead.ClearAll()' */
void ApplicationDynamicAreaHead_ClearAll( ApplicationDynamicAreaHead _this, XObject 
  sender )
{
  CoreVerticalList vl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  vl = EwCastObject( _this->Super3.next, CoreVerticalList );

  if ( vl != 0 )
  {
    ApplicationDeviceItem di = EwCastObject( vl->Super1.first, ApplicationDeviceItem 
      );

    while ( di != 0 )
    {
      if ( CoreGroup_OnGetEnabled((CoreGroup)&di->FlatCheckBox0 ))
        FlatCheckBox_OnSetChecked((FlatCheckBox)&di->FlatCheckBox0, 0 );

      di = EwCastObject( di->Super3.next, ApplicationDeviceItem );
    }
  }
}

/* 'C' function for method : 'Application::DynamicAreaHead.GreyAll()' */
void ApplicationDynamicAreaHead_GreyAll( ApplicationDynamicAreaHead _this, XObject 
  sender )
{
  CoreVerticalList vl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  vl = EwCastObject( _this->Super3.next, CoreVerticalList );

  if ( vl != 0 )
  {
    ApplicationDeviceItem di = EwCastObject( vl->Super1.first, ApplicationDeviceItem 
      );

    while ( di != 0 )
    {
      CoreGroup_OnSetEnabled((CoreGroup)&di->FlatCheckBox0, (XBool)!_this->CheckBox.Checked 
      );
      di = EwCastObject( di->Super3.next, ApplicationDeviceItem );
    }
  }
}

/* Variants derived from the class : 'Application::DynamicAreaHead' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDynamicAreaHead )
EW_END_OF_CLASS_VARIANTS( ApplicationDynamicAreaHead )

/* Virtual Method Table (VMT) for the class : 'Application::DynamicAreaHead' */
EW_DEFINE_CLASS( ApplicationDynamicAreaHead, CoreGroup, "Application::DynamicAreaHead" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDynamicAreaHead_UpdateLayout,
  ApplicationDynamicAreaHead_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDynamicAreaHead )

/* Bitmap resource : 'Application::Circle55Bitmap' */
EW_DEFINE_BITMAP_RES( ApplicationCircle55Bitmap )
  EW_BITMAP_FRAMES( ApplicationCircle55Bitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 55, 55, 0 )
    EW_BITMAP_FRAME( 21, 0, 13, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationCircle55Bitmap, Default )    /* ratio 5.02 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x0088C4E2,
    0x98D41A32, 0x8DC76091, 0x0C8A391E, 0xC9A41249, 0x5A2F148F, 0x6232C94C, 0x632E95CB,
    0xB2A99CC2, 0x329B4BE6, 0xF92C8271, 0x93C8E7B1, 0x0CF27D3F, 0x42A8744A, 0xE693379A,
    0xA9748A54, 0x6B50A6D3, 0x946A050A, 0x09A9D5AA, 0x7A2D6AA7, 0x9D532B95, 0x7D8ABF60,
    0xD6EC961A, 0x8EC958AA, 0xEB959A8D, 0xCB6B9359, 0x774B55B2, 0x6FB7C5AE, 0x2BADEAE3,
    0xAF5A23B7, 0xEDDAF77C, 0x4FEF15FB, 0x2B0384C1, 0x24B869A6, 0xA58BC7E2, 0x191C3DBA,
    0x60CB60F2, 0xCCADC31B, 0x9466B079, 0x0E5F139D, 0x46B3F88D, 0x6A07A8CC, 0xB5BA3D4E,
    0x5771D7E8, 0xDB2C8E93, 0xB3D86B35, 0x8DACE76D, 0xDCDE75DB, 0x1EDF83BD, 0x6EB01AAE,
    0x0385C6CF, 0x395C7E27, 0x79B7E4E3, 0x7D4E7733, 0x47C9E97A, 0x6E6EFFA9, 0xEE77B97D,
    0x16D3A118, 0xF57CBE0F, 0x6EA3E7EF, 0x7D1D2BEF, 0x83EFF377, 0x355E7FB7, 0xF8F77DBE,
    0xB9BFAF9B, 0xFFFA7F3F, 0xDFD799F7, 0xE801E45D, 0x0A06805F, 0x0980E058, 0x83E08836,
    0x20C8317C, 0x681DF084, 0x4DC96FA1, 0x1B83A178, 0x761EC852, 0x62287956, 0xD7D22487,
    0x72257D55, 0x2A8AE158, 0x639A644A, 0xA2C88E29, 0x9881998C, 0xE6318CD6, 0x367EA388,
    0x8B63B652, 0x5BB90634, 0xF909D98F, 0x0E4091A3, 0x478C17F9, 0x936498EA, 0xA2192E18,
    0x09564893, 0x419B8BDC, 0x5696E4F9, 0x8DE52812, 0xA629525C, 0xA6825896, 0x9E619765,
    0x3E97DC59, 0x9A26E9A6, 0xA1A7ADD3, 0xE9BE749A, 0xC205849F, 0xEA9DA639, 0x9EE7982D,
    0xD859D67A, 0x294D3B9F, 0x2288A028, 0x8B9F6287, 0xA068E9F2, 0x1FCA3592, 0xBA569088,
    0x4A357CE1, 0x7BA3E89A, 0xA6A1F9CE, 0xA9CA8687, 0x476A8697, 0x2A96A6E9, 0x849C6528,
    0x746AEA8E, 0xEA0AC2AD, 0x378EA8AB, 0xA6987C6B, 0x9EA92B4A, 0xA8AA7AE2, 0xEABA4EBA,
    0x9B0658A6, 0xF2B5B162, 0x5BAEEBFA, 0x686C0B22, 0x598B32CE, 0x7A2AC6B4, 0xFAD5A962,
    0xD9982D75, 0xB6244B4E, 0x6DCB7EC7, 0x29966EB2, 0xB2E69B6E, 0x68B92B79, 0xB9EDBBA6,
    0xECF416EA, 0xFBC2E5BC, 0x62F4B0EE, 0x00001016, 0x00000000

  EW_BITMAPS_TABLE( ApplicationCircle55Bitmap )
    EW_BITMAP( ApplicationCircle55Bitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationCircle55Bitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::Circle55Bitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationCircle55Bitmap )

/* User defined auto object: 'Application::NormalPushButton' */
EW_DEFINE_AUTOOBJECT( ApplicationNormalPushButton, WidgetSetPushButtonConfig )

/* Initializer for the auto object 'Application::NormalPushButton' */
void ApplicationNormalPushButton__Init( WidgetSetPushButtonConfig _this )
{
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const000A );
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const000B );
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( _this, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameFocused( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( _this, 0 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( _this, 1 );
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
}

/* Table with links to derived variants of the auto object : 'Application::NormalPushButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationNormalPushButton )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationNormalPushButton )

/* Bitmap resource : 'Application::FireBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationFireBitmap )
  EW_BITMAP_FRAMES( ApplicationFireBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 20, 28, 0 )
    EW_BITMAP_FRAME( 7, 8, 3, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationFireBitmap, Default )        /* ratio 37.14 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0x9F2F87B4, 0xD4E77082, 0x1148487D, 0x187F40E1,
    0x165AF405, 0x52A3086D, 0x83B0E8AF, 0x45428F27, 0xAA152783, 0x5F8FC94C, 0x488B023F,
    0x82F3AAB9, 0x0D689BCB, 0xC94821F5, 0x3D41A2D3, 0x6A194697, 0x3CCAE410, 0xE15AA244,
    0x4074C7E9, 0x013E944F, 0x00986BDC, 0xB8401BC9, 0xF280E402, 0x461F4B2F, 0x8CAE9EA7,
    0x3B9D509A, 0x6C041678, 0xAB95A7F5, 0x6C813892, 0x3649DCE5, 0x954399AA, 0xB7FDB534,
    0x451ECAD7, 0x8E0AC4AA, 0x160840EA, 0x86F77B79, 0x93E91419, 0xC8E06C58, 0xB5B018A1,
    0xFFADE25F, 0x92F1242E, 0x04BE6A6E, 0x182EA6F5, 0x59A0D50C, 0xEEB997B4, 0x5FC50B55,
    0x66DC6C33, 0x49E424A4, 0x7CD49F15, 0x747DEF31, 0x6B9C562A, 0x70A5C6DF, 0x1498EBF5,
    0xC53800D2, 0x370645D2, 0x40933B6E, 0x45594A29, 0xCE55A24F, 0x211E6375, 0x69B74CC5,
    0x80B5C0DC, 0xA41388F3, 0xEDF6FA94, 0x48B09033, 0xB2BB3F1B, 0x44CCC6AB, 0x295A20CE,
    0x9F97C3DD, 0xBBD73E7B, 0x5411ED79, 0x73810921, 0x0C203A4E, 0xBD1F46B1, 0x1000B424,
    0xDFC3D456, 0x11C0495E, 0x45292DC8, 0xAF218761, 0x571DA84C, 0x4B53F9AC, 0x512CCC31,
    0x88370050, 0x7B324741, 0x8791D46D, 0x0683FDFE, 0x92609622, 0x74901C92, 0xFD8C08E2,
    0x37CD68F5, 0x8BC0A8E2, 0x8110D132, 0x543F029B, 0x50650F61, 0x8F61F658, 0xCB728D7B,
    0x74A45D2F, 0x64C22E8A, 0xB66E23C1, 0x128CC318, 0xE5B6D9B4, 0xE0257B93, 0xBCF71503,
    0x113D0F23, 0x3BCEB4A4, 0x804054F1, 0x33F0510E, 0x721A5726, 0xA9278838, 0x0EDFC1F4,
    0x4C51DC65, 0x5191B888, 0x209C24C8, 0x77561567, 0xA0A808F6, 0x8AC259FC, 0x56E06A2D,
    0xEC520EC0, 0xE7390DD3, 0x88DC808C, 0x68DA3625, 0xF350CE30, 0xD44F6E03, 0xC82C4851,
    0x3F918425, 0x44C06C02, 0x86E0E518, 0xE0540F40, 0xCC662A23, 0x0D0DB35C, 0xC5F12C19,
    0x22757B39, 0xB4632ECB, 0x8C18151A, 0x1BDB8281, 0x49126C8E, 0x31E0670F, 0x24BBA34C,
    0x58114D03, 0x2A08B1F0, 0x4D43257B, 0x5B283736, 0x851F001A, 0xB3279B84, 0x39C622F0,
    0x4193B8EC, 0xB1744705, 0x8C8A8F0E, 0xC61D8AE2, 0x0E8D7348, 0x8CB3F64C, 0x60D4DB35,
    0xBAEC4AAE, 0x1183D7BB, 0x3C8F13B6, 0xCA442413, 0xC170C02D, 0x995F16A3, 0x94A49092,
    0x2E4B026A, 0x509C1C66, 0xB2D4AC25, 0xCD315EC6, 0x310054F4, 0x33C70174, 0x0C5A067F,
    0x20112E4B, 0x4AD040F2, 0x992306CB, 0x58A27250, 0xCBE2D4A1, 0x90B1FC17, 0xDCD41B45,
    0xC54A6E7C, 0x0ECD7344, 0x8F53CB07, 0xC01C0E3D, 0xE0F914C3, 0x4ACBF2D6, 0x5D74B58F,
    0x400D875F, 0xF6E22B8A, 0xA75D5C56, 0x5B4AB60D, 0x2948D1F8, 0x942501B8, 0x0DD362DA,
    0x50861940, 0xC76E09B2, 0x0E4D834C, 0x151E0776, 0xB2988CC6, 0xD0610D97, 0x75E08CA1,
    0x0CDC8DAF, 0x8CD1C45F, 0x5C0F58D5, 0x675EE330, 0x10C39C8E, 0x95E6899B, 0xFA2E6259,
    0x412EA040, 0xF0D6344C, 0x0141BA30, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( ApplicationFireBitmap )
    EW_BITMAP( ApplicationFireBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationFireBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::FireBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationFireBitmap )

/* Initializer for the class 'Application::Application' */
void ApplicationApplication__Init( ApplicationApplication _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreRoot__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Seperator, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeDateText, &_this->_XObject, 0 );
  ApplicationTabButton__Init( &_this->AlarmsTabButton, &_this->_XObject, 0 );
  ApplicationButton__Init( &_this->EvacuateButton, &_this->_XObject, 0 );
  ApplicationButton__Init( &_this->MuteButton, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ApplicationTabButton__Init( &_this->FaultsTabButton, &_this->_XObject, 0 );
  ApplicationTabButton__Init( &_this->DisablementsTabButton, &_this->_XObject, 0 );
  ApplicationTabButton__Init( &_this->OnTestTabButton, &_this->_XObject, 0 );
  ApplicationTabButton__Init( &_this->EventsTabButton, &_this->_XObject, 0 );
  ApplicationButton__Init( &_this->ResetButton, &_this->_XObject, 0 );
  ApplicationButton__Init( &_this->ViewLogButton, &_this->_XObject, 0 );
  ApplicationButton__Init( &_this->LogOnButton, &_this->_XObject, 0 );
  ApplicationEvents__Init( &_this->DeviceList, &_this->_XObject, 0 );
  ApplicationAlarms__Init( &_this->Alarms, &_this->_XObject, 0 );
  ApplicationCauseAndEffects__Init( &_this->CauseAndEffects, &_this->_XObject, 0 );
  ApplicationTest__Init( &_this->Test, &_this->_XObject, 0 );
  ApplicationSettings__Init( &_this->Settings, &_this->_XObject, 0 );
  ApplicationSystemPage__Init( &_this->SystemPage, &_this->_XObject, 0 );
  ApplicationModify__Init( &_this->Modify, &_this->_XObject, 0 );
  ApplicationFaults__Init( &_this->Faults, &_this->_XObject, 0 );
  ApplicationLevelAccess__Init( &_this->LevelAccess, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->FireListChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->StartProgressEventHandler, &_this->_XObject, 0 );
  ApplicationDisablements__Init( &_this->Disablements, &_this->_XObject, 0 );
  ApplicationOnTest__Init( &_this->OnTest, &_this->_XObject, 0 );
  ApplicationDisable__Init( &_this->EnableDisable, &_this->_XObject, 0 );
  ApplicationMeshTree__Init( &_this->MeshTree, &_this->_XObject, 0 );
  ApplicationProgressPopup__Init( &_this->ProgressPopup, &_this->_XObject, 0 );
  ApplicationTabButtonPull__Init( &_this->TabButtonPull, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->WriteProtectedEventHandler, &_this->_XObject, 0 );
  ApplicationDFUPopup__Init( &_this->DFUPopup, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->DFUEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationApplication );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const000C );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const000D );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const000E );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const000F );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const0010 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const0011 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const000A );
  ViewsRectangle_OnSetAlphaBlended( &_this->Rectangle, 1 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 1 );
  CoreRectView__OnSetBounds( &_this->Seperator, _Const0012 );
  ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const0013 );
  ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const0014 );
  ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const0014 );
  ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const0013 );
  ViewsRectangle_OnSetColor( &_this->Seperator, _Const0015 );
  CoreRectView__OnSetBounds( &_this->TimeDateText, _Const0016 );
  ViewsText_OnSetAlignment( &_this->TimeDateText, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertBottom );
  ViewsText_OnSetString( &_this->TimeDateText, EwLoadString( &_Const0017 ));
  ViewsText_OnSetColor( &_this->TimeDateText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->AlarmsTabButton, _Const0019 );
  EwRetainString( &_this->AlarmsTabButton.Text, EwLoadString( &_Const001A ));
  ApplicationTabButton_OnSetpressed( &_this->AlarmsTabButton, 1 );
  _this->AlarmsTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->EvacuateButton, _Const001B );
  EwRetainString( &_this->EvacuateButton.ButtonText, EwLoadString( &_Const001C ));
  CoreRectView__OnSetBounds( &_this->MuteButton, _Const001D );
  EwRetainString( &_this->MuteButton.ButtonText, EwLoadString( &_Const001E ));
  CoreRectView__OnSetBounds( &_this->Image, _Const001F );
  ViewsImage_OnSetAutoSize( &_this->Image, 1 );
  CoreRectView__OnSetBounds( &_this->FaultsTabButton, _Const0020 );
  EwRetainString( &_this->FaultsTabButton.Text, EwLoadString( &_Const0021 ));
  _this->FaultsTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->DisablementsTabButton, _Const0022 );
  EwRetainString( &_this->DisablementsTabButton.Text, EwLoadString( &_Const0023 
  ));
  _this->DisablementsTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->OnTestTabButton, _Const0024 );
  EwRetainString( &_this->OnTestTabButton.Text, EwLoadString( &_Const0025 ));
  _this->OnTestTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->EventsTabButton, _Const0026 );
  EwRetainString( &_this->EventsTabButton.Text, EwLoadString( &_Const0027 ));
  _this->EventsTabButton.NumberOf = 0;
  EwRetainString( &_this->SelectedTab, EwLoadString( &_Const001A ));
  CoreRectView__OnSetBounds( &_this->ResetButton, _Const0028 );
  EwRetainString( &_this->ResetButton.ButtonText, EwLoadString( &_Const0029 ));
  CoreRectView__OnSetBounds( &_this->ViewLogButton, _Const002A );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ViewLogButton, 1 );
  EwRetainString( &_this->ViewLogButton.ButtonText, EwLoadString( &_Const002B ));
  CoreRectView__OnSetBounds( &_this->LogOnButton, _Const002C );
  EwRetainString( &_this->LogOnButton.ButtonText, EwLoadString( &_Const002D ));
  CoreRectView__OnSetBounds( &_this->DeviceList, _Const002E );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceList, 0 );
  CoreRectView__OnSetBounds( &_this->Alarms, _Const002F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Alarms, 1 );
  CoreRectView__OnSetBounds( &_this->CauseAndEffects, _Const0030 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CauseAndEffects, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->CauseAndEffects, 0 );
  CoreRectView__OnSetBounds( &_this->Test, _Const002F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Test, 0 );
  CoreRectView__OnSetBounds( &_this->Settings, _Const002F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Settings, 0 );
  CoreRectView__OnSetBounds( &_this->SystemPage, _Const0031 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->SystemPage, 0 );
  CoreRectView__OnSetBounds( &_this->Modify, _Const002F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 0 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Modify, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Modify, 0 );
  CoreRectView__OnSetBounds( &_this->Faults, _Const0032 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Faults, 0 );
  CoreRectView__OnSetBounds( &_this->LevelAccess, _Const0033 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const000A );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  CoreSystemEventHandler_OnSetEnabled( &_this->StartProgressEventHandler, 1 );
  CoreRectView__OnSetBounds( &_this->Disablements, _Const0034 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Disablements, 0 );
  CoreRectView__OnSetBounds( &_this->OnTest, _Const0032 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->OnTest, 0 );
  CoreRectView__OnSetBounds( &_this->EnableDisable, _Const0035 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->EnableDisable, 0 );
  CoreRectView__OnSetBounds( &_this->MeshTree, _Const0036 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->MeshTree, 0 );
  CoreRectView__OnSetBounds( &_this->ProgressPopup, _Const0037 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->ProgressPopup, 0 );
  CoreRectView__OnSetBounds( &_this->TabButtonPull, _Const0038 );
  EwRetainString( &_this->TabButtonPull.Text, EwLoadString( &_Const0039 ));
  CoreSystemEventHandler_OnSetEnabled( &_this->WriteProtectedEventHandler, 1 );
  CoreRectView__OnSetBounds( &_this->DFUPopup, _Const003A );
  CoreGroup_OnSetVisible((CoreGroup)&_this->DFUPopup, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Seperator ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeDateText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AlarmsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EvacuateButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MuteButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->FaultsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisablementsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OnTestTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EventsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ResetButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ViewLogButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->LogOnButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DeviceList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Alarms ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CauseAndEffects ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Test ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Settings ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SystemPage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Modify ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Faults ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->LevelAccess ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Disablements ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OnTest ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EnableDisable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshTree ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ProgressPopup ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TabButtonPull ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DFUPopup ), 0 );
  ViewsText_OnSetFont( &_this->TimeDateText, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  _this->AlarmsTabButton.OnActivate = EwNewSlot( _this, ApplicationApplication_AlarmsEnter 
  );
  _this->AlarmsTabButton.Icon = EwLoadResource( &ApplicationFire4Bitmap, ResourcesBitmap 
  );
  _this->AlarmsTabButton.Selected = EwNewRef( _this, ApplicationApplication_OnGetSelectedTab, 
  ApplicationApplication_OnSetSelectedTab );
  _this->AlarmsTabButton.OnDeactivate = EwNewSlot( _this, ApplicationApplication_AlarmsExit 
  );
  _this->EvacuateButton.Icon = EwLoadResource( &ApplicationEvacuateBitmap, ResourcesBitmap 
  );
  _this->EvacuateButton.Action = EwNewSlot( _this, ApplicationApplication_Evacuate 
  );
  _this->MuteButton.Icon = EwLoadResource( &ApplicationMuteBitmap, ResourcesBitmap 
  );
  _this->MuteButton.Action = EwNewSlot( _this, ApplicationApplication_Mute );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationSiteNet, ResourcesBitmap 
  ));
  _this->FaultsTabButton.OnActivate = EwNewSlot( _this, ApplicationApplication_FaultsEnter 
  );
  _this->FaultsTabButton.Icon = EwLoadResource( &ApplicationFaultBitmap, ResourcesBitmap 
  );
  _this->FaultsTabButton.Selected = EwNewRef( _this, ApplicationApplication_OnGetSelectedTab, 
  ApplicationApplication_OnSetSelectedTab );
  _this->FaultsTabButton.OnDeactivate = EwNewSlot( _this, ApplicationApplication_FaultsExit 
  );
  _this->DisablementsTabButton.OnActivate = EwNewSlot( _this, ApplicationApplication_DisablementsEnter 
  );
  _this->DisablementsTabButton.Icon = EwLoadResource( &ApplicationDisableBitmap, 
  ResourcesBitmap );
  _this->DisablementsTabButton.Selected = EwNewRef( _this, ApplicationApplication_OnGetSelectedTab, 
  ApplicationApplication_OnSetSelectedTab );
  _this->DisablementsTabButton.OnDeactivate = EwNewSlot( _this, ApplicationApplication_DisablementsExit 
  );
  _this->OnTestTabButton.OnActivate = EwNewSlot( _this, ApplicationApplication_OnTestEnter 
  );
  _this->OnTestTabButton.Icon = EwLoadResource( &ApplicationOnTestBitmap, ResourcesBitmap 
  );
  _this->OnTestTabButton.Selected = EwNewRef( _this, ApplicationApplication_OnGetSelectedTab, 
  ApplicationApplication_OnSetSelectedTab );
  _this->OnTestTabButton.OnDeactivate = EwNewSlot( _this, ApplicationApplication_OnTestExit 
  );
  _this->EventsTabButton.OnActivate = EwNewSlot( _this, ApplicationApplication_EventsEnter 
  );
  _this->EventsTabButton.Icon = EwLoadResource( &ApplicationAlertBitmap, ResourcesBitmap 
  );
  _this->EventsTabButton.Selected = EwNewRef( _this, ApplicationApplication_OnGetSelectedTab, 
  ApplicationApplication_OnSetSelectedTab );
  _this->EventsTabButton.OnDeactivate = EwNewSlot( _this, ApplicationApplication_EventsExit 
  );
  _this->ResetButton.Icon = EwLoadResource( &ApplicationResetBitmap, ResourcesBitmap 
  );
  _this->ResetButton.Action = EwNewSlot( _this, ApplicationApplication_Reset );
  _this->ViewLogButton.Icon = EwLoadResource( &ApplicationViewLogBitmap, ResourcesBitmap 
  );
  _this->ViewLogButton.Action = EwNewSlot( _this, ApplicationApplication_Silence 
  );
  _this->LogOnButton.Icon = EwLoadResource( &ApplicationKeyBitmap, ResourcesBitmap 
  );
  _this->LogOnButton.Action = EwNewSlot( _this, ApplicationApplication_LogOn );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationApplication_Tick );
  _this->FireListChangeEventHandler.OnEvent = EwNewSlot( _this, ApplicationApplication_onFireEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->FireListChangeEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->FireListChangeEvent );
  _this->StartProgressEventHandler.OnEvent = EwNewSlot( _this, ApplicationApplication_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->StartProgressEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->StartProgressEvent );
  _this->TabButtonPull.Icon = EwLoadResource( &ApplicationAccessBitmap, ResourcesBitmap 
  );
  _this->TabButtonPull.OnSelectItem = EwNewSlot( _this, ApplicationApplication_PageSelection 
  );
  _this->WriteProtectedEventHandler.OnEvent = EwNewSlot( _this, ApplicationApplication_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->WriteProtectedEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->WriteProtectedEvent );
  _this->DFUEventHandler.OnEvent = EwNewSlot( _this, ApplicationApplication_onEvent2 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->DFUEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->DFUEvent );

  /* Call the user defined constructor */
  ApplicationApplication_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Application' */
void ApplicationApplication__ReInit( ApplicationApplication _this )
{
  /* At first re-initialize the super class ... */
  CoreRoot__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Seperator );
  ViewsText__ReInit( &_this->TimeDateText );
  ApplicationTabButton__ReInit( &_this->AlarmsTabButton );
  ApplicationButton__ReInit( &_this->EvacuateButton );
  ApplicationButton__ReInit( &_this->MuteButton );
  ViewsImage__ReInit( &_this->Image );
  ApplicationTabButton__ReInit( &_this->FaultsTabButton );
  ApplicationTabButton__ReInit( &_this->DisablementsTabButton );
  ApplicationTabButton__ReInit( &_this->OnTestTabButton );
  ApplicationTabButton__ReInit( &_this->EventsTabButton );
  ApplicationButton__ReInit( &_this->ResetButton );
  ApplicationButton__ReInit( &_this->ViewLogButton );
  ApplicationButton__ReInit( &_this->LogOnButton );
  ApplicationEvents__ReInit( &_this->DeviceList );
  ApplicationAlarms__ReInit( &_this->Alarms );
  ApplicationCauseAndEffects__ReInit( &_this->CauseAndEffects );
  ApplicationTest__ReInit( &_this->Test );
  ApplicationSettings__ReInit( &_this->Settings );
  ApplicationSystemPage__ReInit( &_this->SystemPage );
  ApplicationModify__ReInit( &_this->Modify );
  ApplicationFaults__ReInit( &_this->Faults );
  ApplicationLevelAccess__ReInit( &_this->LevelAccess );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  CoreTimer__ReInit( &_this->Timer );
  CoreSystemEventHandler__ReInit( &_this->FireListChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->StartProgressEventHandler );
  ApplicationDisablements__ReInit( &_this->Disablements );
  ApplicationOnTest__ReInit( &_this->OnTest );
  ApplicationDisable__ReInit( &_this->EnableDisable );
  ApplicationMeshTree__ReInit( &_this->MeshTree );
  ApplicationProgressPopup__ReInit( &_this->ProgressPopup );
  ApplicationTabButtonPull__ReInit( &_this->TabButtonPull );
  CoreSystemEventHandler__ReInit( &_this->WriteProtectedEventHandler );
  ApplicationDFUPopup__ReInit( &_this->DFUPopup );
  CoreSystemEventHandler__ReInit( &_this->DFUEventHandler );
}

/* Finalizer method for the class 'Application::Application' */
void ApplicationApplication__Done( ApplicationApplication _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationApplication );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Seperator );
  ViewsText__Done( &_this->TimeDateText );
  ApplicationTabButton__Done( &_this->AlarmsTabButton );
  ApplicationButton__Done( &_this->EvacuateButton );
  ApplicationButton__Done( &_this->MuteButton );
  ViewsImage__Done( &_this->Image );
  ApplicationTabButton__Done( &_this->FaultsTabButton );
  ApplicationTabButton__Done( &_this->DisablementsTabButton );
  ApplicationTabButton__Done( &_this->OnTestTabButton );
  ApplicationTabButton__Done( &_this->EventsTabButton );
  ApplicationButton__Done( &_this->ResetButton );
  ApplicationButton__Done( &_this->ViewLogButton );
  ApplicationButton__Done( &_this->LogOnButton );
  ApplicationEvents__Done( &_this->DeviceList );
  ApplicationAlarms__Done( &_this->Alarms );
  ApplicationCauseAndEffects__Done( &_this->CauseAndEffects );
  ApplicationTest__Done( &_this->Test );
  ApplicationSettings__Done( &_this->Settings );
  ApplicationSystemPage__Done( &_this->SystemPage );
  ApplicationModify__Done( &_this->Modify );
  ApplicationFaults__Done( &_this->Faults );
  ApplicationLevelAccess__Done( &_this->LevelAccess );
  GraphicsAttrSet__Done( &_this->AttrSet );
  CoreTimer__Done( &_this->Timer );
  CoreSystemEventHandler__Done( &_this->FireListChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->StartProgressEventHandler );
  ApplicationDisablements__Done( &_this->Disablements );
  ApplicationOnTest__Done( &_this->OnTest );
  ApplicationDisable__Done( &_this->EnableDisable );
  ApplicationMeshTree__Done( &_this->MeshTree );
  ApplicationProgressPopup__Done( &_this->ProgressPopup );
  ApplicationTabButtonPull__Done( &_this->TabButtonPull );
  CoreSystemEventHandler__Done( &_this->WriteProtectedEventHandler );
  ApplicationDFUPopup__Done( &_this->DFUPopup );
  CoreSystemEventHandler__Done( &_this->DFUEventHandler );

  /* Release all used strings */
  EwReleaseString( &_this->SelectedTab );

  /* Don't forget to deinitialize the super class ... */
  CoreRoot__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Application' */
void ApplicationApplication__Mark( ApplicationApplication _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Seperator );
  EwMarkObject( &_this->TimeDateText );
  EwMarkObject( &_this->AlarmsTabButton );
  EwMarkObject( &_this->EvacuateButton );
  EwMarkObject( &_this->MuteButton );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->FaultsTabButton );
  EwMarkObject( &_this->DisablementsTabButton );
  EwMarkObject( &_this->OnTestTabButton );
  EwMarkObject( &_this->EventsTabButton );
  EwMarkObject( &_this->ResetButton );
  EwMarkObject( &_this->ViewLogButton );
  EwMarkObject( &_this->LogOnButton );
  EwMarkObject( &_this->DeviceList );
  EwMarkObject( &_this->Alarms );
  EwMarkObject( &_this->CauseAndEffects );
  EwMarkObject( &_this->Test );
  EwMarkObject( &_this->Settings );
  EwMarkObject( &_this->SystemPage );
  EwMarkObject( &_this->Modify );
  EwMarkObject( &_this->Faults );
  EwMarkObject( &_this->LevelAccess );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->Timer );
  EwMarkObject( _this->TestPop );
  EwMarkObject( _this->DisablePop );
  EwMarkObject( &_this->FireListChangeEventHandler );
  EwMarkObject( &_this->StartProgressEventHandler );
  EwMarkObject( &_this->Disablements );
  EwMarkObject( &_this->OnTest );
  EwMarkObject( &_this->EnableDisable );
  EwMarkObject( &_this->MeshTree );
  EwMarkObject( &_this->ProgressPopup );
  EwMarkObject( &_this->TabButtonPull );
  EwMarkObject( &_this->WriteProtectedEventHandler );
  EwMarkObject( &_this->DFUPopup );
  EwMarkObject( &_this->DFUEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreRoot__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationApplication_Init( ApplicationApplication _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  _this->TestPop = ((ApplicationPopup)EwNewObject( ApplicationTestPopup, 0 ));
  _this->DisablePop = ((ApplicationPopup)EwNewObject( ApplicationDisablePopup, 0 
  ));
}

/* 'C' function for method : 'Application::Application.AlarmsEnter()' */
void ApplicationApplication_AlarmsEnter( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Alarms, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms, 1 );
}

/* 'C' function for method : 'Application::Application.DisablementsEnter()' */
void ApplicationApplication_DisablementsEnter( ApplicationApplication _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Disablements, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 1 );
}

/* 'C' function for method : 'Application::Application.DisablementsExit()' */
void ApplicationApplication_DisablementsExit( ApplicationApplication _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Disablements, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 0 );
}

/* 'C' function for method : 'Application::Application.EventsEnter()' */
void ApplicationApplication_EventsEnter( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceList, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 1 );
}

/* 'C' function for method : 'Application::Application.EventsExit()' */
void ApplicationApplication_EventsExit( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceList, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 0 );
}

/* 'C' function for method : 'Application::Application.AlarmsExit()' */
void ApplicationApplication_AlarmsExit( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Alarms, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms, 0 );
}

/* 'C' function for method : 'Application::Application.PageSelection()' */
void ApplicationApplication_PageSelection( ApplicationApplication _this, XObject 
  sender )
{
  ApplicationMenuItem i = EwCastObject( sender, ApplicationMenuItem );

  if ( !EwCompString( i->Text1.String, EwLoadString( &_Const003B )))
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 1 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->EnableDisable, 1 );
  }
  else
    if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003C )))
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->CauseAndEffects, 1 );
      CoreGroup_OnSetVisible((CoreGroup)&_this->CauseAndEffects, 1 );
    }
    else
      if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003D )))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 1 );
        CoreGroup_OnSetVisible((CoreGroup)&_this->Test, 1 );
      }
      else
        if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003E )))
        {
          CoreGroup_OnSetVisible((CoreGroup)&_this->Settings, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 1 );
        }
        else
          if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003F )))
          {
            CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 1 );
            CoreGroup_OnSetVisible((CoreGroup)&_this->MeshTree, 1 );
          }
          else
            if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0040 )))
            {
              CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 1 );
              CoreGroup_OnSetVisible((CoreGroup)&_this->SystemPage, 1 );
              CoreTimer_OnSetEnabled( &_this->SystemPage.Timer, 1 );
            }
            else
              if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0041 
                  )))
              {
                CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 1 );
                CoreGroup_OnSetVisible((CoreGroup)&_this->Modify, 1 );
              }
}

/* 'C' function for method : 'Application::Application.PageDeselection()' */
void ApplicationApplication_PageDeselection( ApplicationApplication _this )
{
  XObject v = ((XObject)_this->Super2.first );

  while ( v != (XObject)_this->Super2.last )
  {
    XClass tc = EwCastClass( EwClassOf( v ), ApplicationTabButton );

    if ( tc != 0 )
    {
      ApplicationTabButton tb = EwCastObject( v, ApplicationTabButton );

      if ( !EwCompString( tb->Text1.String, _this->SelectedTab ))
      {
        ApplicationTabButton_OnSetpressed( tb, 0 );
        EwPostSignal( tb->OnDeactivate, ((XObject)_this ));
        return;
      }
    }

    v = ((XObject)EwCastObject( v, CoreView )->next );
  }

  ViewsText_OnSetString( &_this->TabButtonPull.Text2, 0 );
  ViewsRectangle_OnSetColor( &_this->TabButtonPull.Background, _Const0042 );

  if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003B )))
  {
    CoreGroup_OnSetVisible((CoreGroup)&_this->EnableDisable, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 0 );
  }
  else
    if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003E )))
    {
      CoreGroup_OnSetVisible((CoreGroup)&_this->Settings, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 0 );
    }
    else
      if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003C )))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&_this->CauseAndEffects, 0 );
        CoreGroup_OnSetVisible((CoreGroup)&_this->CauseAndEffects, 0 );
      }
      else
        if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003D )))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 0 );
          CoreGroup_OnSetVisible((CoreGroup)&_this->Test, 0 );
        }
        else
          if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const003F )))
          {
            CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 0 );
            CoreGroup_OnSetVisible((CoreGroup)&_this->MeshTree, 0 );
          }
          else
            if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0040 )))
            {
              CoreGroup_OnSetVisible((CoreGroup)&_this->SystemPage, 0 );
              CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
              CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
              CoreTimer_OnSetEnabled( &_this->SystemPage.Timer, 0 );
            }
            else
              if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0041 
                  )))
              {
                CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 0 );
                CoreGroup_OnSetVisible((CoreGroup)&_this->Modify, 0 );
              }

  return;
}

/* 'C' function for method : 'Application::Application.FaultsEnter()' */
void ApplicationApplication_FaultsEnter( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Faults, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 1 );
}

/* 'C' function for method : 'Application::Application.FaultsExit()' */
void ApplicationApplication_FaultsExit( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->Faults, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 0 );
}

/* 'C' function for method : 'Application::Application.OnTestEnter()' */
void ApplicationApplication_OnTestEnter( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->OnTest, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 1 );
}

/* 'C' function for method : 'Application::Application.OnTestExit()' */
void ApplicationApplication_OnTestExit( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->OnTest, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 0 );
}

/* 'C' function for method : 'Application::Application.Mute()' */
void ApplicationApplication_Mute( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_MUTE_BUZZER, &cmd );
  }
}

/* 'C' function for method : 'Application::Application.Tick()' */
void ApplicationApplication_Tick( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    CoreTime Time = EwNewObject( CoreTime, 0 );
    XString pf;
    Time = CoreTime_OnGetCurrentTime( Time );
    ViewsText_OnSetString( &_this->TimeDateText, CoreTime_Format( Time, EwLoadString( 
    &_Const0043 )));

    if (( Time->Day > 3 ) && ( Time->Day < 21 ))
    {
      pf = EwLoadString( &_Const0044 );
    }
    else
      switch ( Time->Day % 10 )
      {
        case 1 :
          pf = EwLoadString( &_Const0045 );
        break;

        case 2 :
          pf = EwLoadString( &_Const0046 );
        break;

        case 3 :
          pf = EwLoadString( &_Const0047 );
        break;

        default : 
          pf = EwLoadString( &_Const0044 );
      }

    ViewsText_OnSetString( &_this->TimeDateText, EwConcatString( EwConcatString( 
    _this->TimeDateText.String, pf ), CoreTime_Format( Time, EwLoadString( &_Const0048 
    ))));
  }
}

/* 'C' function for method : 'Application::Application.Evacuate()' */
void ApplicationApplication_Evacuate( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->LevelAccess.Level > 1 )
  {
    ApplicationConfirmPopup popup = EwNewObject( ApplicationConfirmPopup, 0 );
    ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const0049 ));
    ApplicationConfirmPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( 
    _this, ApplicationApplication_Evacuate1 ));
  }
  else
  {
    ApplicationApplication_LowLevel( _this );
  }
}

/* 'C' function for method : 'Application::Application.LogOn()' */
void ApplicationApplication_LogOn( ApplicationApplication _this, XObject sender )
{
  ApplicationKeypadPopup popup;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( ApplicationKeypadPopup, 0 );

  if ( !EwCompString( _this->LogOnButton.ButtonText, EwLoadString( &_Const002D )))
  {
    ApplicationPopup_Show((ApplicationPopup)popup, CoreView__GetRoot( _this ));
    CoreGroup_ObtainFocus((CoreGroup)&popup->Writable );
  }
  else
  {
    ApplicationLevelAccess_OnSetLevel( &_this->LevelAccess, 1 );
  }
}

/* 'C' function for method : 'Application::Application.Reset()' */
void ApplicationApplication_Reset( ApplicationApplication _this, XObject sender )
{
  ApplicationConfirmPopup popup;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( ApplicationConfirmPopup, 0 );
  ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const004A ));
  ApplicationConfirmPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( 
  _this, ApplicationApplication_Reset1 ));
}

/* 'C' function for method : 'Application::Application.LowLevel()' */
void ApplicationApplication_LowLevel( ApplicationApplication _this )
{
  ApplicationAccesssPopup ll = EwNewObject( ApplicationAccesssPopup, 0 );

  ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const004B ));
  ApplicationAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationApplication_onFireEvent( ApplicationApplication _this, XObject sender )
{
  XUInt16 fires;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_GET_NUM_FIRES, &cmd );  

    fires = cmd.int0;
  }

  if ( fires > 0 )
  {
    ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const004C );
    ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const004D );
    ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const004C );
    ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const004D );
    ViewsText_OnSetVisible( &_this->Alarms.NoActiveAlarmsText, 0 );
  }
  else
  {
    ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const0013 );
    ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const0014 );
    ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const0013 );
    ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const0014 );
    ViewsText_OnSetVisible( &_this->Alarms.NoActiveAlarmsText, 1 );
  }

  _this->AlarmsTabButton.NumberOf = fires;
  CoreGroup_InvalidateViewState((CoreGroup)&_this->AlarmsTabButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->Alarms );
  CoreVerticalList_OnSetNoOfItems( &_this->Alarms.VerticalList, fires );
  CoreVerticalList_InvalidateItems( &_this->Alarms.VerticalList, 0, fires - 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->Alarms.VertScrollbar, fires 
  * _this->Alarms.VerticalList.ItemHeight );

  if ( fires != 0 )
  {
    EwPostSignal( EwNewSlot( &_this->AlarmsTabButton, ApplicationTabButton_OnPress 
      ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'Application::Application.Reset1()' */
void ApplicationApplication_Reset1( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_RESET_BUTTON, &cmd );
  }
  _this->Alarms.EvacPressed = 0;
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.ResoundAlarmsButton, 1 );
}

/* 'C' function for method : 'Application::Application.Evacuate1()' */
void ApplicationApplication_Evacuate1( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->Alarms.EvacPressed = 1;
  {
    Command cmd;

    Command0( CMD_EVACUATE_BUTTON, &cmd );
  }
}

/* 'C' function for method : 'Application::Application.Silence()' */
void ApplicationApplication_Silence( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Alarms.EvacPressed )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.ResoundAlarmsButton, 1 );
  }

  {
    Command cmd;

    Command0( CMD_SILENCE_ACK_BUTTON, &cmd );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationApplication_onEvent( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->ProgressPopup.HorizontalValueBar, 
  0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->ProgressPopup, 1 );
  CoreTimer_OnSetEnabled( &_this->ProgressPopup.Timer, 1 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationApplication_onEvent1( ApplicationApplication _this, XObject sender )
{
  ApplicationAccesssPopup ll;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ll = EwNewObject( ApplicationAccesssPopup, 0 );
  ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const004E ));
  ApplicationAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationApplication_onEvent2( ApplicationApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->DFUPopup, 1 );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
  ViewsText_OnSetString( &_this->DFUPopup.Text, EwConcatString( _this->DFUPopup.Text.String, 
  EwLoadString( &_Const004F )));
  CoreGroup_InvalidateViewState((CoreGroup)_this );
  CoreTimer_OnSetEnabled( &_this->DFUPopup.Timer, 1 );
}

/* Default onget method for the property 'SelectedTab' */
XString ApplicationApplication_OnGetSelectedTab( ApplicationApplication _this )
{
  return _this->SelectedTab;
}

/* Default onset method for the property 'SelectedTab' */
void ApplicationApplication_OnSetSelectedTab( ApplicationApplication _this, XString 
  value )
{
  EwRetainString( &_this->SelectedTab, value );
}

/* Variants derived from the class : 'Application::Application' */
EW_DEFINE_CLASS_VARIANTS( ApplicationApplication )
EW_END_OF_CLASS_VARIANTS( ApplicationApplication )

/* Virtual Method Table (VMT) for the class : 'Application::Application' */
EW_DEFINE_CLASS( ApplicationApplication, CoreRoot, "Application::Application" )
  CoreRectView_initLayoutContext,
  CoreRoot_GetRoot,
  CoreRoot_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreRoot_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreRoot_OnSetFocus,
  CoreRoot_OnSetBuffered,
  CoreRoot_OnSetOpacity,
  CoreRoot_DispatchEvent,
  CoreRoot_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreRoot_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreRoot_RestackBehind,
  CoreRoot_RestackTop,
  CoreRoot_Restack,
  CoreGroup_Remove,
  CoreRoot_Add,
EW_END_OF_CLASS( ApplicationApplication )

/* Initializer for the class 'Application::TabButton' */
void ApplicationTabButton__Init( ApplicationTabButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->Text1, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTabButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)_this, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( _this, _Const0019 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const0050 );
  ViewsRectangle_OnSetColorBL( &_this->Background, _Const0051 );
  ViewsRectangle_OnSetColorBR( &_this->Background, _Const0051 );
  ViewsRectangle_OnSetColorTR( &_this->Background, _Const0051 );
  ViewsRectangle_OnSetColorTL( &_this->Background, _Const0051 );
  ViewsRectangle_OnSetColor( &_this->Background, _Const0051 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0019 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0052 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0053 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0053 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0052 );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0055 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0056 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0057 );
  EwRetainString( &_this->Text, EwLoadString( &_Const0058 ));
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToLeft | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0059 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const005A );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const005B ));
  ViewsText_OnSetColor( &_this->Text2, _Const005C );
  CoreRectView__OnSetBounds( &_this->Text1, _Const005D );
  ViewsAttrText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->Text1, 0 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet1, _Const0018 );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet1, _Const005E );
  CoreTimer_OnSetPeriod( &_this->Timer, 400 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  _this->TouchHandler.OnLeave = EwNullSlot;
  _this->TouchHandler.OnRelease = EwNullSlot;
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationTabButton_OnPress );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  ViewsAttrText_OnSetAttrSet( &_this->Text1, &_this->AttrSet1 );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet1, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet1, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet1, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet1, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationTabButton_TimerSlot );
}

/* Re-Initializer for the class 'Application::TabButton' */
void ApplicationTabButton__ReInit( ApplicationTabButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->Text2 );
  ViewsAttrText__ReInit( &_this->Text1 );
  GraphicsAttrSet__ReInit( &_this->AttrSet1 );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'Application::TabButton' */
void ApplicationTabButton__Done( ApplicationTabButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTabButton );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->Text2 );
  ViewsAttrText__Done( &_this->Text1 );
  GraphicsAttrSet__Done( &_this->AttrSet1 );
  CoreTimer__Done( &_this->Timer );

  /* Release all used strings */
  EwReleaseString( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TabButton' */
void ApplicationTabButton__Mark( ApplicationTabButton _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->TouchHandler );
  EwMarkSlot( _this->OnActivate );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->Image );
  EwMarkRef( _this->Selected );
  EwMarkSlot( _this->OnDeactivate );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->AttrSet1 );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationTabButton_UpdateLayout( ApplicationTabButton _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTabButton_UpdateViewState( ApplicationTabButton _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsAttrText_OnSetString( &_this->Text1, _this->Text );
  ViewsImage_OnSetBitmap( &_this->Image, _this->Icon );

  if ( _this->NumberOf > 0 )
  {
    ViewsText_OnSetString( &_this->Text2, EwConcatString( EwConcatString( EwLoadString( 
    &_Const005F ), EwNewStringInt( _this->NumberOf, 0, 10 )), EwLoadString( &_Const0060 
    )));
  }
  else
  {
    ViewsText_OnSetString( &_this->Text2, 0 );
  }
}

/* 'C' function for method : 'Application::TabButton.OnPress()' */
void ApplicationTabButton_OnPress( ApplicationTabButton _this, XObject sender )
{
  ApplicationApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsImage_OnSetVisible( &_this->Image, 1 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );

  if ( !EwCompString( EwOnGetString( _this->Selected ), _this->Text1.String ))
    return;

  app = EwCastObject( _this->Super3.Owner, ApplicationApplication );
  ApplicationApplication_PageDeselection( app );
  EwRetainString( &app->SelectedTab, _this->Text1.String );
  ApplicationTabButton_OnSetpressed( _this, 1 );
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
}

/* 'C' function for method : 'Application::TabButton.OnSetpressed()' */
void ApplicationTabButton_OnSetpressed( ApplicationTabButton _this, XBool value )
{
  XColor t;

  if ( _this->pressed == value )
    return;

  _this->pressed = value;
  t = _this->Bevel.ColorB;
  ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
  ViewsBevel_OnSetColorT( &_this->Bevel, t );
  t = _this->Bevel.ColorL;
  ViewsBevel_OnSetColorL( &_this->Bevel, _this->Bevel.ColorR );
  ViewsBevel_OnSetColorR( &_this->Bevel, t );

  if ( _this->pressed )
  {
    ViewsRectangle_OnSetColorBL( &_this->Background, _Const0061 );
    ViewsRectangle_OnSetColorBR( &_this->Background, _Const0062 );
    ViewsRectangle_OnSetColorTL( &_this->Background, _Const0063 );
    ViewsRectangle_OnSetColorTR( &_this->Background, _Const0063 );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y + 2 ));
    CoreRectView__OnSetBounds( &_this->Text2, EwSetRectX1( _this->Text2.Super1.Bounds, 
    _this->Text2.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Text2, EwSetRectY1( _this->Text2.Super1.Bounds, 
    _this->Text2.Super1.Bounds.Point1.Y + 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectX1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectY1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.Y + 2 ));
  }
  else
  {
    ViewsRectangle_OnSetColorBL( &_this->Background, _Const0051 );
    ViewsRectangle_OnSetColorBR( &_this->Background, _Const0051 );
    ViewsRectangle_OnSetColorTL( &_this->Background, _Const0051 );
    ViewsRectangle_OnSetColorTR( &_this->Background, _Const0051 );
    CoreRectView__OnSetBounds( &_this->Text2, EwSetRectX1( _this->Text2.Super1.Bounds, 
    _this->Text2.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text2, EwSetRectY1( _this->Text2.Super1.Bounds, 
    _this->Text2.Super1.Bounds.Point1.Y - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectX1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectY1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.Y - 2 ));
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'Application::TabButton.TimerSlot()' */
void ApplicationTabButton_TimerSlot( ApplicationTabButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsImage_OnSetVisible( &_this->Image, (XBool)!ViewsImage_OnGetVisible( &_this->Image 
  ));
}

/* Variants derived from the class : 'Application::TabButton' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTabButton )
EW_END_OF_CLASS_VARIANTS( ApplicationTabButton )

/* Virtual Method Table (VMT) for the class : 'Application::TabButton' */
EW_DEFINE_CLASS( ApplicationTabButton, CoreGroup, "Application::TabButton" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationTabButton_UpdateLayout,
  ApplicationTabButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTabButton )

/* Bitmap resource : 'Application::AlertBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationAlertBitmap )
  EW_BITMAP_FRAMES( ApplicationAlertBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 27, 0 )
    EW_BITMAP_FRAME( 5, 15, 7, 11, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationAlertBitmap, Default )       /* ratio 26.30 % */
    0xAB418700, 0x1504A3D6, 0xF00CDB34, 0x410FA290, 0x1CF82A0F, 0xF1189442, 0x1689C561,
    0xC8CC6A29, 0x8BC7A311, 0x147E3720, 0x4823B219, 0x220D0C85, 0x9AACF614, 0xDE5C178F,
    0x03900B44, 0x369A3FCA, 0xB9ACDE71, 0x9D4F2733, 0xF50A7F40, 0xD1A7B449, 0x1E9145A0,
    0x2934BA1D, 0xDC5B1753, 0xB4A8A348, 0x4EAB532A, 0x8ADD36B3, 0xAFD5EB95, 0x98F00F45,
    0xD4AA0F92, 0x7AC168AE, 0xA6A029B5, 0xEE651DBF, 0x2681F314, 0x3501B08F, 0xBAD5A5FB,
    0x2D0B6B77, 0xD29DA66D, 0xDF4B2C25, 0x42F16AC3, 0x18AB57E9, 0x22FF25B3, 0x0FFC8803,
    0xD1652F00, 0x11D01088, 0xBE621F85, 0xCA9A756A, 0xE50B4C15, 0xE0CC3C00, 0xED79F621,
    0xEC641CD6, 0x593CA31C, 0x42DA6D32, 0xD5F1F0D6, 0xB95C35BA, 0xBB3369A7, 0x62868DB6,
    0x6B93A1BD, 0x0DA59165, 0xA3B6DBB5, 0x6601AE57, 0xCADEB2CE, 0x665F1DFF, 0xE80D5B6D,
    0x218B6995, 0x7613C924, 0x750545D0, 0x1F67E542, 0xDE057E3F, 0x88B023F7, 0xE73AAB94,
    0x3304EB5D, 0xF0281228, 0x192785B5, 0x83BCED3A, 0x60420381, 0x7D7E4F21, 0x15C41035,
    0x210838F3, 0x3849D983, 0xB4EB398F, 0x1C8001A3, 0x2888964A, 0xA141DCAD, 0x910C0F56,
    0x80863C45, 0x291E8AB2, 0x128188AE, 0xE233A05F, 0xD1EA2D56, 0x063880A1, 0xFA3E4008,
    0x090073EC, 0xCDC19C53, 0x10D93A8C, 0x00CA1D06, 0x7F1B8468, 0x4F2442E8, 0x86614822,
    0x88F0F837, 0x623A8DC0, 0xC8304B09, 0x4DA4F140, 0x08B1F058, 0x819E002A, 0x7C992548,
    0xBE2B4FF9, 0x96053318, 0x23A74A70, 0xC1F46C11, 0x5C7A8CCB, 0x00218A32, 0x1E220222,
    0xC6A10633, 0x99C4BF1E, 0x4E3AA1A3, 0x2D380DC3, 0x1483B014, 0x49C7E4FB, 0x0190BA2C,
    0x0CBB2A60, 0x9B7E4573, 0x368D0675, 0xE880C0DE, 0xB6D272A8, 0x549822C6, 0xCC2F9F92,
    0x80042348, 0x8DA354CA, 0x8999F90D, 0x9687A926, 0xED8E6BAA, 0x04CF23C4, 0x85B11412,
    0x7381AD3B, 0x00203A4E, 0xF13BCEB8, 0x041AD054, 0x8F016844, 0x63C0EE3A, 0xEE59AE01,
    0x95AE6D9A, 0x2CCA9249, 0xC0A5F46E, 0xE3D8550F, 0x6002B9CF, 0x7DB0EC19, 0x2C0A5235,
    0xAF2B6073, 0x07B9B4B6, 0xAC580A9F, 0x27574D61, 0x36469154, 0xC5D0C288, 0x6574D01B,
    0x68681542, 0x063EE3D3, 0xB6EDCBCC, 0x0B996310, 0xD11CCE32, 0x74470555, 0xFEB9CEB1,
    0x006BBBA4, 0x8631381E, 0x32CD5D38, 0x384D328C, 0x2CBD311C, 0x1CC4DC3F, 0x55D2CC83,
    0xB27C931D, 0xE0F73D48, 0x0D9540B3, 0x29C9C201, 0xC4757480, 0xA2E47F1B, 0x432DD1F2,
    0xE5388DAC, 0x59162098, 0xA9D71D5D, 0x0A396A67, 0x88DE3569, 0x0FD202B3, 0x6572BD73,
    0x88C79474, 0xA2306D9A, 0xA75E24C9, 0xF180349D, 0x03CF53D0, 0x45E12417, 0x604DF93A,
    0xB8ED16C4, 0x123CCF13, 0xDAF5DDA8, 0x09BC3F80, 0x9194BA2C, 0xD0AA24DF, 0x5FDF86D2,
    0x3F78CE37, 0x43100F90, 0xD33C7017, 0xB0590AD7, 0x047C8D51, 0xE079EE30, 0x0CE30710,
    0xA5F43F35, 0x18CF324B, 0xACDFF9F1, 0x803A0E3B, 0x0AF2948C, 0x68C62F1D, 0xA85D1201,
    0xAEEAE353, 0x00101657, 0x00000000

  EW_BITMAPS_TABLE( ApplicationAlertBitmap )
    EW_BITMAP( ApplicationAlertBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationAlertBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::AlertBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationAlertBitmap )

/* Initializer for the class 'Application::AlarmRowItem' */
void ApplicationAlarmRowItem__Init( ApplicationAlarmRowItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->OrderPos, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationAlarmRowItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0064 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0064 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0065 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0066 );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0067 ));
  ViewsText_OnSetColor( &_this->Text, _Const0068 );
  CoreView_OnSetLayout((CoreView)&_this->OrderPos, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->OrderPos, _Const0069 );
  ViewsText_OnSetString( &_this->OrderPos, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->OrderPos, _Const0068 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const006B );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0068 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const006D );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006E ));
  ViewsText_OnSetColor( &_this->TimeText, _Const0068 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const006F );
  ViewsImage_OnSetAlignment( &_this->Image, ViewsImageAlignmentAlignHorzCenter | 
  ViewsImageAlignmentAlignVertCenter );
  CoreTimer_OnSetPeriod( &_this->Timer, 600 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  _this->Flashing = 1;
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0064 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0070 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OrderPos ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->OrderPos, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationFireBitmap, 
  ResourcesBitmap ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationAlarmRowItem_Trigger );
}

/* Re-Initializer for the class 'Application::AlarmRowItem' */
void ApplicationAlarmRowItem__ReInit( ApplicationAlarmRowItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->OrderPos );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->TimeText );
  ViewsImage__ReInit( &_this->Image );
  CoreTimer__ReInit( &_this->Timer );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'Application::AlarmRowItem' */
void ApplicationAlarmRowItem__Done( ApplicationAlarmRowItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationAlarmRowItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->OrderPos );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->TimeText );
  ViewsImage__Done( &_this->Image );
  CoreTimer__Done( &_this->Timer );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::AlarmRowItem' */
void ApplicationAlarmRowItem__Mark( ApplicationAlarmRowItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->OrderPos );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationAlarmRowItem_UpdateLayout( ApplicationAlarmRowItem _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationAlarmRowItem_UpdateViewState( ApplicationAlarmRowItem _this, XSet 
  aState )
{
  XString s;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  s = EwNewStringInt( _this->OrderPosition, 0, 10 );

  switch ( _this->OrderPosition )
  {
    case 1 :
      s = EwConcatString( s, EwLoadString( &_Const0045 ));
    break;

    case 2 :
      s = EwConcatString( s, EwLoadString( &_Const0046 ));
    break;

    case 3 :
      s = EwConcatString( s, EwLoadString( &_Const0047 ));
    break;

    default : 
      s = EwConcatString( s, EwLoadString( &_Const0044 ));
  }

  ViewsText_OnSetString( &_this->OrderPos, s );
}

/* 'C' function for method : 'Application::AlarmRowItem.Trigger()' */
void ApplicationAlarmRowItem_Trigger( ApplicationAlarmRowItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Flashing )
  {
    ViewsText_OnSetVisible( &_this->OrderPos, (XBool)!ViewsText_OnGetVisible( &_this->OrderPos 
    ));
  }
}

/* 'C' function for method : 'Application::AlarmRowItem.OnSetOrderPosition()' */
void ApplicationAlarmRowItem_OnSetOrderPosition( ApplicationAlarmRowItem _this, 
  XInt32 value )
{
  if ( _this->OrderPosition == value )
    return;

  _this->OrderPosition = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'Application::AlarmRowItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationAlarmRowItem )
EW_END_OF_CLASS_VARIANTS( ApplicationAlarmRowItem )

/* Virtual Method Table (VMT) for the class : 'Application::AlarmRowItem' */
EW_DEFINE_CLASS( ApplicationAlarmRowItem, CoreGroup, "Application::AlarmRowItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationAlarmRowItem_UpdateLayout,
  ApplicationAlarmRowItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationAlarmRowItem )

/* Bitmap resource : 'Application::FireAlarmBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationFireAlarmBitmap )
  EW_BITMAP_FRAMES( ApplicationFireAlarmBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationFireAlarmBitmap, Default )   /* ratio 27.08 % */
    0x518D7500, 0x9AE04013, 0x08C3060E, 0xA16D7354, 0x20FF85BF, 0x91181C4A, 0x153544E2,
    0xC8CC5E31, 0x8B47A371, 0xEC863520, 0x1AA3F238, 0x19B90B7E, 0x817063CC, 0x1600978D,
    0x6AE85832, 0x24933EE1, 0xC9CCEA45, 0x92CFA713, 0x14FE7740, 0xC2DFB41A, 0x2C2D0652,
    0x6510B3BC, 0x874F9ED0, 0x754A2542, 0x43A955AA, 0xC3598E1F, 0xAC366168, 0x0556C351,
    0x55EC563B, 0x2DA343B3, 0x1CB107CC, 0xECFF63B1, 0x0FF75BA9, 0xFF77BB9F, 0xF6EB6DDE,
    0x5D2D9BEF, 0x29F58CFF, 0xE1ACB674, 0xB4C8BB7F, 0xDD4E9B89, 0xE4F17CBF, 0x593C8E3D,
    0x94CB6432, 0x9CDE572F, 0xC2A2D0AC, 0xDC8ED953, 0xBFDECF67, 0xAB53A8D3, 0x5FAFED3E,
    0xA2EB7FBF, 0xEC37FB51, 0x64D01F4E, 0xCD5DDEEB, 0xD46FB7BB, 0x5621B97A, 0x692CDB8C,
    0xA393BFD3, 0x99CFFE3E, 0xABC54A23, 0xE9D4BB46, 0xCAD7EB5F, 0xC6A727B3, 0xAB745429,
    0xFB5DA8EC, 0xB61AEEE7, 0xCDFF7BBC, 0x1FEE772B, 0x7CFED6F3, 0xEFA7D3F7, 0x8D44329F,
    0x939307BE, 0x7CBF1FE7, 0xA02768F9, 0xC2F99A72, 0xE5DF1CC6, 0x652ED106, 0x7ECFF1B0,
    0xC9B74DFD, 0xC328E73F, 0xECFD3FCC, 0xF73FCFB3, 0x3FCEE3B4, 0x0721A8BE, 0x023CCE68,
    0x0A2880DD, 0xBE2ECE18, 0x33D4F824, 0x0FF26092, 0x4314C239, 0x90DA361E, 0xFF36CD97,
    0x320C5398, 0x494340FF, 0x630D1C26, 0x38EA6DC7, 0xDB3FCD03, 0x890B12B4, 0xA528A626,
    0x73FDD772, 0xB886200C, 0x222F5188, 0x268D33FE, 0xE493FC9F, 0xA86E1992, 0xFDB36C5C,
    0x1C1D06D2, 0x54A44909, 0xE5389E25, 0x63B5BF9C, 0x9A0A79CD, 0xCF921B55, 0x3D1D9348,
    0xE467B4E6, 0x49C5B96D, 0x24FE94A7, 0x0C731BEA, 0x351B983A, 0x4FF2809B, 0x024C8D33,
    0x8D1B9762, 0xD930CC13, 0x3C4F03E1, 0x483320FF, 0x79CA5022, 0xDCDF80A8, 0x9F5D4BB2,
    0x19A8C6AA, 0x1145A28E, 0xF995A973, 0x54D33B0F, 0x8C330FF3, 0x62DC3248, 0x8B02B0DA,
    0xA7C9AE75, 0xE4E03FE1, 0xFC83CBD2, 0xA9E864F1, 0xCAF37203, 0xF3C4FF2C, 0x96AE384D,
    0xDFAC1886, 0xA25C9AD1, 0xDE3785F1, 0x932CFFA0, 0x00FF23C8, 0xB6729EDA, 0x33CCC3A6,
    0x2CF7F6CC, 0x2375DAB4, 0x5ED52D8B, 0xBB69AD9B, 0x3E9B9B70, 0xA733D4F5, 0x6C08F43E,
    0x2D89BA2E, 0xDAA5A946, 0x3FCAE2A8, 0xCD0C3F0D, 0x39723224, 0xD2F34422, 0xF8BD9CAB,
    0xB6EFB706, 0x11061EB1, 0x6344FF84, 0x18E784C9, 0x007F8C93, 0x805FF766, 0x89022CCC,
    0xA945CD96, 0xFF1C7671, 0x4B334E93, 0xC86AF6A6, 0x8C044334, 0x93FC761B, 0xE0F83F33,
    0xC4B6A8B3, 0x77C7F1E0, 0x8811E8C5, 0x63B6DA7B, 0xDE358CDE, 0xFFBDF46C, 0x6A6328C0,
    0x63C368EE, 0xB2F93B9E, 0x8E2188C6, 0x47917098, 0x6F6398DE, 0xEB29E276, 0x14436B4E,
    0xF3616AB1, 0xF33CCFA8, 0x443398A0, 0xC8C21CCA, 0x01A0BD3F, 0xBF85CD07, 0xB6BE35B1,
    0xD5B02C02, 0x8A2359E7, 0x29778429, 0xF8C12F4E, 0x14D070B6, 0x60D81A35, 0x78A1A384,
    0xBB25AADC, 0xFDA9ADAC, 0xCBCD373D, 0xC10FF7E0, 0x9EB6F8F4, 0x5308FF39, 0x78FF1F07,
    0xAA2E4B53, 0xE70D1925, 0x3B5E2587, 0x3E547A1D, 0xA5F57CE2, 0x56D935CE, 0xD362D8AD,
    0x4C84434F, 0x8D508820, 0x74F06F1C, 0x8BB6CDF3, 0xCACC7399, 0x38AE87C8, 0x1971B9F3,
    0xA9F48607, 0xABC8BAA6, 0xDDFE1733, 0x89534110, 0xDA29D626, 0x8C9F351B, 0x871A7842,
    0xF40FFECF, 0xF98D03C0, 0xD43C97D0, 0x10802FAC, 0xC26AD6F1, 0x41658BA1, 0xE9BD63C4,
    0x717887D0, 0x8A843706, 0xDA88FF7A, 0xBAB7C8D4, 0x794F8601, 0x5560E2F8, 0xEE1D9824,
    0x5F626778, 0x10774EDB, 0xF4629668, 0x3C171061, 0x00F30644, 0x8FAA0208, 0xD2CA576B,
    0x324864F4, 0x68AD0DE6, 0x85C648E7, 0x8B19A37A, 0xDE1E03FD, 0xEC6F5ED8, 0xB85F9782,
    0xAC2C0EA1, 0x81CE3D0A, 0x05B8D50E, 0x4740F52E, 0x9F17EA3A, 0x840955BB, 0x2D8BEC51,
    0x371BD778, 0xD5104A85, 0xF83F07EB, 0xFD711BE1, 0x14168283, 0x58A64F21, 0xEDA59CC5,
    0xD92B4E7F, 0xA9713825, 0x4D89A911, 0x01DEDBD9, 0xDF1108E5, 0xAB5526A9, 0x3C350882,
    0xF22FBFA1, 0xF32B7BC6, 0x4229211C, 0xAB092647, 0x84B8916B, 0x8F53530D, 0x18116C73,
    0xC79A286F, 0x9C3AB906, 0x7B0E8308, 0x7E3961B0, 0xDD8393C4, 0x60D61A8A, 0x93528059,
    0x31C195B2, 0xC6DC9580, 0x0E01E325, 0x1B07296C, 0x7A0558A7, 0xF64A4384, 0xC8429319,
    0x2E3FC658, 0x08A93997, 0xBB66648F, 0x929F2958, 0x85EA4BCB, 0xC6B1CA2F, 0xCC314E28,
    0x237185C5, 0xE487FC26, 0x63C939B8, 0xC39AA4E2, 0xF2E0DC0A, 0x81BE8F21, 0xBA3C3D0B,
    0x379728E3, 0xF31CD137, 0x61E08118, 0x4B89CAB3, 0x5545F62A, 0x31A1AC33, 0x661840FC,
    0x1A666228, 0xB0BE680C, 0x189CCC55, 0x68C82065, 0xBA273F0A, 0xACDE4ABA, 0xC70117A1,
    0x90B0D242, 0x9CD45077, 0xB90AACD3, 0x8543418A, 0x2786B492, 0x53496935, 0xFE2844EA,
    0x58820D64, 0xB28E0548, 0xF47C7D10, 0xA9C5219B, 0x1061941A, 0x2062E40E, 0x42083002,
    0x858722B6, 0xF5216300, 0x7352A9B8, 0x1876143A, 0xC1061084, 0x100242C0, 0x00000010,
    0x00000000

  EW_BITMAPS_TABLE( ApplicationFireAlarmBitmap )
    EW_BITMAP( ApplicationFireAlarmBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationFireAlarmBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::FireAlarmBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationFireAlarmBitmap )

/* Initializer for the class 'Application::Button' */
void ApplicationButton__Init( ApplicationButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->StrokePath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0071 );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const0071 );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const0065 );
  ViewsFillPath_OnSetQuality( &_this->FillPath, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToLeft | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0059 );
  EwRetainString( &_this->ButtonText, EwLoadString( &_Const0072 ));
  CoreView_OnSetLayout((CoreView)&_this->AttrText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const0073 );
  ViewsAttrText_OnSetAlignment( &_this->AttrText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const0074 ));
  GraphicsAttrSet_OnSetColor2( &_this->AttrSet, _Const0018 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const0075 );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->StrokePath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->StrokePath, _Const0071 );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _Const0076 );
  ViewsStrokePath_OnSetQuality( &_this->StrokePath, 1 );
  ViewsStrokePath_OnSetJoinPoints( &_this->StrokePath, GraphicsPathJoinRound );
  ViewsStrokePath_OnSetWidth( &_this->StrokePath, 2.000000f );
  _this->Radius = 5;
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0077 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0078 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0057 );
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StrokePath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path1 );
  ViewsImage_OnSetBitmap( &_this->Image, 0 );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, &_this->AttrSet );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &SteelFontArial12, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdanaProSemiBold18, 
  ResourcesFont ));
  ViewsStrokePath_OnSetPath( &_this->StrokePath, &_this->Path1 );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, ApplicationButton_Release 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationButton_Touch 
  );

  /* Call the user defined constructor */
  ApplicationButton_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Button' */
void ApplicationButton__ReInit( ApplicationButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  ViewsImage__ReInit( &_this->Image );
  ViewsAttrText__ReInit( &_this->AttrText );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  ViewsStrokePath__ReInit( &_this->StrokePath );
  GraphicsPath__ReInit( &_this->Path1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'Application::Button' */
void ApplicationButton__Done( ApplicationButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationButton );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  ViewsImage__Done( &_this->Image );
  ViewsAttrText__Done( &_this->AttrText );
  GraphicsAttrSet__Done( &_this->AttrSet );
  ViewsStrokePath__Done( &_this->StrokePath );
  GraphicsPath__Done( &_this->Path1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Release all used strings */
  EwReleaseString( &_this->ButtonText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Button' */
void ApplicationButton__Mark( ApplicationButton _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->Image );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->StrokePath );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkSlot( _this->Action );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationButton_UpdateLayout( ApplicationButton _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationButton_UpdateViewState( ApplicationButton _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsImage_OnSetBitmap( &_this->Image, _this->Icon );
  ViewsAttrText_OnSetString( &_this->AttrText, _this->ButtonText );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationButton_Init( ApplicationButton _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Translate( &_this->Path1, 1.000000f, 1.000000f );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)_this->Radius, 0.000000f );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)(( EwGetRectH( _this->Super2.Bounds ) - 3 ) 
  - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 0.000000f, 90.000000f, 
  5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)(( EwGetRectH( 
  _this->Super2.Bounds ) - 3 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  (XFloat)_this->Radius, (XFloat)_this->Radius, 180.000000f, 270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
  return;
}

/* 'C' function for method : 'Application::Button.Touch()' */
void ApplicationButton_Touch( ApplicationButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwPostSignal( _this->Action, ((XObject)_this ));
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const0015 );
}

/* 'C' function for method : 'Application::Button.Release()' */
void ApplicationButton_Release( ApplicationButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsFillPath_OnSetColor( &_this->FillPath, _Const0065 );
}

/* Variants derived from the class : 'Application::Button' */
EW_DEFINE_CLASS_VARIANTS( ApplicationButton )
EW_END_OF_CLASS_VARIANTS( ApplicationButton )

/* Virtual Method Table (VMT) for the class : 'Application::Button' */
EW_DEFINE_CLASS( ApplicationButton, CoreGroup, "Application::Button" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationButton_UpdateLayout,
  ApplicationButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationButton )

/* Bitmap resource : 'Application::KeyBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationKeyBitmap )
  EW_BITMAP_FRAMES( ApplicationKeyBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationKeyBitmap, Default )         /* ratio 17.00 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0xB74553F1, 0xC4ABFDCE, 0x54BFDCCB, 0xCBFDD2C8, 0xBFDDAD35, 0xFDDCD962, 0xDE0DE66B,
    0xE6E269BF, 0x4E168BFD, 0xDD663FDE, 0x66BB0B5C, 0x763416FA, 0x43154AFF, 0x2ED24FF7,
    0x3F9395CD, 0xCC64F0ED, 0xF589BA38, 0x39A5D242, 0xB0E03396, 0x87A3BF6D, 0xEFBF9FEF,
    0x1F8BC305, 0xF97CBE4F, 0xA9FFE87E, 0x76EF6783, 0x88C8CFEE, 0x59E5C233, 0x8DE85DF9,
    0xBCCA2ED9, 0x7C3FF5BA, 0xDE63ECF9, 0x68160480, 0xCDE181E0, 0xFF3E4F63, 0x700D32EC,
    0xDF9659F6, 0x32F49A4B, 0x6618820E, 0xFB86E1A8, 0x224FF874, 0xE12390B5, 0xB2661188,
    0x6A1B37CB, 0xB580A008, 0x305C033C, 0x2296A8D7, 0xF3F9DF86, 0x84B3220F, 0x3C746243,
    0x8A22646E, 0x4D782233, 0xE4BDB239, 0x04F73C8E, 0x378D6049, 0x84E3B8E6, 0xA3F3FE3D,
    0x535A0792, 0xB1503D4E, 0xE6952483, 0x8EA38931, 0xD6B98611, 0x68125C94, 0x692F9625,
    0xE3996499, 0x98A4E979, 0x2647E650, 0x999DE59B, 0x867496E5, 0x519826E7, 0x9CD6C9C2,
    0x0C378A79, 0x5365506F, 0x16813C4E, 0x8C93E7B4, 0x9E6805EA, 0x2583A4DF, 0xF4C5C866,
    0xC4FF7508, 0x74830F53, 0xA7E7EA2E, 0xA74A3D31, 0xB840D42F, 0xC8E43596, 0x5F7829D6,
    0x98E7DA36, 0x502A2627, 0x62296C76, 0xC0E9678B, 0x9E9B26B3, 0x62A71ABE, 0xCFC9B2A2,
    0x02E0FFB0, 0x30FF3A8D, 0xFF394B72, 0x32D9E74C, 0x6898C8DC, 0x4A82BFAF, 0x0AB2B055,
    0xFF3F21D4, 0xB66DCB0C, 0xA6FAB28A, 0x4552AEAF, 0xEECC2EC9, 0xECB82C43, 0x770F0812,
    0xEE5A50FF, 0x428963BC, 0x80D0688C, 0xB2BB6883, 0x3FEEA3EA, 0xCEF368C7, 0x52F8983F,
    0x46E4B569, 0x9A2E48E8, 0x7827A931, 0xDB6390D7, 0xA7B4F13A, 0xE25CC5CF, 0xE93FE003,
    0x376493BC, 0x9E63D0E8, 0x4C26F49A, 0x830DC2EE, 0xFD7A1E17, 0x7D08D540, 0xEE824CFF,
    0x43049D3F, 0x68C2279C, 0xA230C9F6, 0x710C026D, 0x5FB67B32, 0x4285217D, 0x91E5B20C,
    0xBFC96D6C, 0xCA9DECA2, 0x34CCB105, 0x4D23465B, 0x2326D29E, 0x4E4AF5AC, 0x7A751C3B,
    0xF5558F4B, 0x9D865BC8, 0x435D88F5, 0x66D4902D, 0xD2763553, 0xB6DD9F65, 0x2B7B4E62,
    0x32CA931E, 0xA347F73B, 0x795A2314, 0xF729A31D, 0x53CEBFE0, 0x7DE5774F, 0x2FD4F392,
    0x795C06F9, 0x37BC8B20, 0x63658AE1, 0x25E4AA8E, 0x73C0CDB3, 0x3A4E0BCB, 0x9BB78F98,
    0x1D6F936A, 0xACCC2C21, 0x02C5DE63, 0xD2DC4E2A, 0xF56334B2, 0xF26B7678, 0x53A6D10B,
    0x9A7CE11E, 0x7B4EF3A1, 0x8F63C9E5, 0x3284FF3E, 0xBE51EBCC, 0xF9B20CC2, 0x349E6BF8,
    0x3A5A20E1, 0xACE251E3, 0x97CE3E19, 0xD080A1D7, 0x2A5AE37C, 0x99CB20C9, 0xF67B0567,
    0x6AC832CA, 0x056D8E63, 0x774F33BE, 0x3D4C1DC6, 0x72E08B55, 0xE7B9520E, 0x2BB23E07,
    0xBBDE1BF2, 0x3044DA0C, 0x97BD3344, 0xCC7EEFD4, 0x9F014E71, 0x686009C2, 0x10EA1C46,
    0x546CAAD9, 0x2A20710D, 0x4C53F368, 0x98F1C702, 0x3F302CC8, 0xB20640A8, 0xDB0E019E,
    0xF53DAC74, 0x0C9247B0, 0xAC719ED7, 0xD8C86443, 0x86703FDC, 0xEBCDFCBC, 0x0508F031,
    0x1162E660, 0x83F065FC, 0x5FD28C3F, 0x9E032214, 0xF21B2308, 0x97100430, 0xBCC4BBA8,
    0xE95F10A5, 0xA1860049, 0x27E04295, 0x22643688, 0xC552B055, 0x8A3144AE, 0x0E01913A,
    0x2BC1B143, 0x6C8B116A, 0xC706CA39, 0x0E2FC618, 0x00002024, 0x00000000

  EW_BITMAPS_TABLE( ApplicationKeyBitmap )
    EW_BITMAP( ApplicationKeyBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationKeyBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::KeyBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationKeyBitmap )

/* Bitmap resource : 'Application::SmokeBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationSmokeBitmap )
  EW_BITMAP_FRAMES( ApplicationSmokeBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationSmokeBitmap, Default )       /* ratio 22.15 % */
    0x1C080100, 0x418E3028, 0xEA12721E, 0x9F27284A, 0x1EFB38C1, 0xD14893E2, 0xFF87BEA0,
    0xB84C6618, 0x8FC74E51, 0xFC88F71A, 0x3FE4A767, 0x1A230F8C, 0x62B2B89C, 0x5D2F961C,
    0x92999CC2, 0x0B863E61, 0xC820F613, 0x2D43E073, 0xE50A3512, 0x5163D438, 0x1A934490,
    0x8E91FA55, 0xA2CC7FD3, 0x1543FBFE, 0x56ABD2E9, 0xCADD1EB3, 0x8216E5D1, 0x65047D0C,
    0xC6AB15CA, 0xE1FF683E, 0xAC95AB59, 0xE2A98F5B, 0xF74763FE, 0x6DBBA21F, 0xCBCDBECD,
    0x860FE5D7, 0x3DF2CAB2, 0xBFF0A73A, 0x11FF8867, 0xEF783C5A, 0xEEFFC79D, 0xAEA7FE49,
    0x7B913FF2, 0xACDDEB1A, 0x9AACAAD9, 0x8E0B057B, 0xBB5FEA9B, 0xF6D0FFD3, 0x99B47CE9,
    0x61B07FEB, 0x3ACD9B57, 0x29CE6DB4, 0xBD167341, 0x7FEF8F97, 0xBBFF82FB, 0x5636BC46,
    0x2B63C855, 0x39A98D87, 0x42FFCC5F, 0x359E3749, 0xBC7DC1B7, 0x67FEDF77, 0x4BF2FBAE,
    0x1A53A9E0, 0xB6F95CBF, 0xF20D27F3, 0x1FFEC635, 0x35D4F7AE, 0x3D98875A, 0xD7E2473E,
    0x4FDB1F96, 0xF2FF90FD, 0xCFB705B1, 0xC814793F, 0x2E0823D7, 0xD482CA57, 0x76DD87CD,
    0xDE751DF5, 0x638DCB36, 0x648D7521, 0x93796008, 0x3D19D874, 0xCF63FE20, 0x548D9788,
    0x4211839F, 0x2C3C54C8, 0x8BCEF72E, 0xE32271D4, 0x1749CB86, 0x2E13674A, 0x9D8ECB37,
    0x76A2A8A1, 0x24222958, 0x438E168D, 0xD0B87BDD, 0x9D8D9CA8, 0x72E4E349, 0x9D78F5F8,
    0xB671F66E, 0x223495CB, 0xDF7525A3, 0x6C64A974, 0x19D251E3, 0x972E6439, 0x425299CE,
    0x9C8A6544, 0x3FC79815, 0xA343D220, 0x36767427, 0xF0FF9DC8, 0xFD8D27A3, 0x1E8FF9F4,
    0x9255F280, 0x63E4FF1D, 0x9E6899A8, 0x6C75E538, 0xA3CB95F2, 0xE923C234, 0xDA54753F,
    0x7E982F99, 0xE4991B09, 0x27232674, 0x6A236634, 0xF7D12A9A, 0x0E775663, 0x1B64D912,
    0x676AE2BA, 0xEABAC47E, 0x03FE9A3D, 0xCD9DADCB, 0x8F8D0D56, 0x9AEA42E6, 0xCD446AA7,
    0x639634B0, 0xD696A52C, 0xB5B2CC27, 0x3FCF9A1A, 0x17C1FAB1, 0xB9E6D423, 0x648B86E7,
    0xC1A32BFB, 0xB7CA3472, 0xEE23EA34, 0xD236193F, 0x588BB659, 0xBFAD4FCB, 0xA899DBB4,
    0xCD68D0D9, 0x6A2E0DBC, 0xAD1F902A, 0x2C3FC785, 0x2DA343C6, 0xCDC75300, 0x63CEB5C0,
    0x09998970, 0x7D86E4C6, 0x86AE43F6, 0xAF88FA8D, 0x7B16BD46, 0x747453AC, 0xB5C6CAC6,
    0xC7CA772A, 0xCF248DCF, 0x630234C8, 0xA9E99572, 0x95BE2DC9, 0xC18FF1D6, 0xF0D72CF3,
    0xDCD4913F, 0xFC7F5519, 0xB5CECF53, 0x6773E346, 0x63431DFB, 0xF3FCEA65, 0x4B281DD8,
    0x4C26D7CC, 0xD3CCE8D3, 0x4D1CF9D4, 0x03CB23AD, 0x3982ACAD, 0x333FF5A2, 0xBAE7A72B,
    0xB2823E08, 0x883EF67C, 0xD0B6C02F, 0x1D676618, 0x9FB5C24E, 0x77227E9A, 0x4DD4D367,
    0x8CBFBB63, 0x82D294CD, 0x72CBEA61, 0x6F075271, 0x87D73FCF, 0xC1CBBAB3, 0x58DEB08C,
    0xE38FC43D, 0xF922DDF5, 0xDE54DE72, 0x348A9099, 0x9C20687B, 0xE7CA8677, 0xA8DC06FF,
    0xF3F471A2, 0xB5F53F50, 0xAC389CBD, 0x2DF92677, 0x0BB95EB5, 0x2ED4BD75, 0x8F879FB3,
    0xFE43DDBE, 0xC0EA7E40, 0xCF83FCDC, 0x2CBAC8F0, 0xD3C83858, 0xD2D5E028, 0x72F78A36,
    0x78C3B174, 0x3EF9EA5F, 0x079C4731, 0xDF6A1A62, 0x6497C28E, 0xCD086EB4, 0xB69328F8,
    0x0BD3A71C, 0xD4CAD286, 0x968FFB45, 0xD26490C8, 0xF86FCB51, 0x032829F1, 0xFFACC7AA,
    0xFA4F0A48, 0xBDDF597B, 0xACA837A6, 0x341EC88C, 0xA62459AA, 0x2E068AD7, 0x00882EE7,
    0xD20CE360, 0xEEE9F63B, 0x86E91E7A, 0x2D446906, 0x1FF04846, 0x3247FB68, 0xB241F846,
    0x18580E95, 0x54720EA4, 0xB84AA341, 0x711C84B0, 0x93522561, 0xC7560B96, 0x895B8F20,
    0x32D51B0D, 0x394658CA, 0x0C2208B2, 0xB1C36853, 0x3B15A1C8, 0xB44796EC, 0x911108E6,
    0x24497D08, 0xD2F312A2, 0x80C0878A, 0x2288F221, 0xC5C12475, 0x39AC1D97, 0x07E21898,
    0x2B0F321F, 0x5821E412, 0x1B16A320, 0xFC4218B5, 0x94701883, 0x38D6A11F, 0xF190A3C5,
    0x49E85921, 0xC7C0DE4F, 0x15843C18, 0x2095292E, 0xB2C8441D, 0x3890EE39, 0x721CCC2C,
    0x0E460718, 0x549090D2, 0x391F2499, 0x82BA2349, 0x81886F8F, 0x1010011E, 0x00000000

  EW_BITMAPS_TABLE( ApplicationSmokeBitmap )
    EW_BITMAP( ApplicationSmokeBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationSmokeBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::SmokeBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationSmokeBitmap )

/* Bitmap resource : 'Application::MuteBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationMuteBitmap )
  EW_BITMAP_FRAMES( ApplicationMuteBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationMuteBitmap, Default )        /* ratio 20.13 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0x98CAE271, 0xDBBE6B2F, 0x7198C9E1, 0xECAF3774, 0xBFDD6C34, 0xFDDCCA54, 0x71B969A3,
    0xEF99D7EB, 0x92FD7686, 0xFF7631D4, 0x57EBF1F4, 0x7335E050, 0xB235FEF6, 0xEC745B08,
    0xC78DB4E2, 0x5E4DA61C, 0xA5BDE7EF, 0x1AB7AB8D, 0x8ED7BA17, 0x47235388, 0x79B6D8DD,
    0xBAE91EFF, 0xF2BCBC7E, 0x19452AE4, 0x1F6FADC3, 0x9BD0E86F, 0xDAF7A381, 0x02F86953,
    0xF7CBBDCB, 0x7530130F, 0x1E6805C8, 0xE2BD2B7A, 0xECFB6A8C, 0xC873DF86, 0x5E9F4374,
    0xDA63109F, 0x73CD0582, 0xA0FF3F0F, 0x023B4CA2, 0x8121D79E, 0xCEF344B4, 0x8828FC3F,
    0xFE283F5F, 0x63739593, 0x85213845, 0x9BC825CF, 0xF3C4D72F, 0x42038DE1, 0x34751D25,
    0x350B98DA, 0xE283FCF0, 0xF90DF07B, 0xD8D62F4F, 0x308B92F8, 0x35502936, 0xC90704E5,
    0xE8E0E92E, 0x3CB171E1, 0xBB91A233, 0x310A06F1, 0x6428F5B8, 0xF975F88A, 0x04D32E0F,
    0x4E9311F9, 0x3A0FF9B6, 0x25F7F0F0, 0x02F8966E, 0xDA779D60, 0x7A254FF9, 0x95DE470E,
    0x8FF9F9A2, 0xF3E8F43B, 0xBDC1941C, 0x63734C44, 0x895D0912, 0xCD02CDBC, 0x63049B88,
    0x666E919A, 0xF33B29AA, 0x44898A18, 0xA066BA56, 0xE3E5BD6A, 0x7EA07F5E, 0xFFA4CB44,
    0x32623818, 0xA4D780DD, 0x333AAD8C, 0xD0DE32A2, 0x9AAEE9A7, 0xA85DF316, 0x1CFA218A,
    0xF4AE5135, 0x59D72EC8, 0xBC7B6188, 0x3FDB728D, 0x2BA384CE, 0xB6F2A68C, 0x3DAA32CA,
    0xBC750E13, 0x32E0BB76, 0xA8083CDF, 0xB3D0EF6B, 0x8E9273CF, 0x5A2C91F8, 0x3E4F673E,
    0x4BD24E18, 0xF7588C95, 0x39DC34CF, 0x196E8F89, 0xB121C326, 0xF02B79C1, 0x4B8AE03F,
    0x56536560, 0xA473ECC9, 0x7C91F699, 0x30040AD3, 0x73628254, 0xBE30C04E, 0xB86DA18B,
    0x3DCE7365, 0x305AEF03, 0x5BC963B0, 0xE24691A5, 0xC03612B9, 0x782BE73D, 0xDE323963,
    0x03A4DD3F, 0x5CF49372, 0xB87A8FF8, 0xCDCEA375, 0x7238C321, 0xC2497A8E, 0x3E90954B,
    0x00304997, 0x73E3B47E, 0xD8A7CCCC, 0xC385D7B1, 0xC64E3E0E, 0xA1B9CF63, 0x389B8314,
    0xDF8D0757, 0x55B2E3D0, 0xE0F475EF, 0xAA6F6183, 0x9212B86C, 0x8EB6F636, 0xAD9E863C,
    0xFF472458, 0xFC3B8E53, 0xB9E84935, 0x9FB39A4C, 0x7D9105D8, 0xACDF68B0, 0xC76F7583,
    0x48730370, 0x0FF7FC99, 0x92DDBDAD, 0xE49362A6, 0x6F8489ED, 0x8C37D3C6, 0x0FFA74EB,
    0x63C4E993, 0x9386C868, 0xBD9894FC, 0xB9CF53C1, 0x11B9FDD9, 0x5B70E234, 0xB138C2D0,
    0xA3E9BA45, 0xE9FA1E73, 0x1FC9C230, 0xBF029C93, 0xAB06836B, 0x559F154E, 0xA38FA3E6,
    0xE492F0FF, 0xF950914A, 0x3E7139CF, 0x89CB2467, 0x4166C4C6, 0x79CF0DFA, 0x4936E7B9,
    0xCCFFDF0E, 0xE5EB8FF9, 0x862FB8C3, 0xBCAD78A0, 0x5ACAB062, 0x83E9FBD0, 0x55E652B9,
    0x91B20C7A, 0xF7CA83C5, 0x768E23A0, 0xB86BA7F0, 0x9CD6C791, 0x71B08E04, 0xB9A61842,
    0xF8246A96, 0x225E0A0F, 0x4E3B6555, 0xBBF1FEC2, 0x6B9028E7, 0xCF097BF2, 0xEF34D550,
    0x3E49AE71, 0xD308D903, 0x711836B6, 0x88FF66C3, 0x1688FCDD, 0x23FD8693, 0x08142D67,
    0x0D817EFE, 0x764788E7, 0x9BA13BBA, 0x11B2D1AC, 0x1649CC6A, 0x68A09903, 0x6CD73878,
    0x28ED34CE, 0xA7C282D4, 0x482E0198, 0x45D9BC37, 0x12149435, 0x1FEBF853, 0xD3D26BF8,
    0x19C4C6EC, 0x5568C486, 0x146E5882, 0x40FE1094, 0x91D08848, 0xE5CE3DC7, 0x458D0E45,
    0x47FAD815, 0x0C949CB5, 0x89AE3C6F, 0xF30BBC66, 0xBD41B1FE, 0x8674B06C, 0x2F0C06DA,
    0x1D514258, 0x82267268, 0x5358FE0F, 0xF0664AC6, 0xD5595492, 0x9BD69288, 0x92CD6202,
    0x20650480, 0x640A62D9, 0x368B4870, 0x80BCC4A2, 0x9C5C08B5, 0xC4A12903, 0x394528E4,
    0xB2BE5696, 0xA5A19F33, 0x4B19752C, 0x1C6678CE, 0x2F0C898F, 0x594BB967, 0xA11E063E,
    0x2C5CCC00, 0xF6624B02, 0xFA0199D2, 0xC064428B, 0x43646113, 0xA618861E, 0xC8098B36,
    0x2BE214B7, 0x7300093D, 0xD98851E6, 0xCF9B7340, 0xB456097C, 0x80A0CDF2, 0x913A9C13,
    0x814331C1, 0x1330D04B, 0xCB5CE79D, 0xCF39EA51, 0x2073BE78, 0x00000101, 0x00000000

  EW_BITMAPS_TABLE( ApplicationMuteBitmap )
    EW_BITMAP( ApplicationMuteBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationMuteBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::MuteBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationMuteBitmap )

/* Bitmap resource : 'Application::FaultBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationFaultBitmap )
  EW_BITMAP_FRAMES( ApplicationFaultBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 3, 8, 7, 14, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationFaultBitmap, Default )       /* ratio 24.11 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xEED7444A, 0x168A061D,
    0x28DC421B, 0x88C76351, 0x1C82431E, 0xC96451C9, 0xEDF4F988, 0x5448903B, 0x840E3BAB,
    0x73179160, 0x2997CB66, 0x78FC9A57, 0x9FCF27B2, 0x9492833B, 0x32182B08, 0x9CA62428,
    0x072016E1, 0x9F4D7F94, 0xF4EA8546, 0x45A5D25F, 0xB9F50A8F, 0xAED0E815, 0x0371A709,
    0x9B0882D7, 0xAAA6BC3E, 0x2A56BAAD, 0xCD4FB7DB, 0x2DD6A5A2, 0x5FB00B1C, 0xDA1D72F3,
    0x09BC9E2E, 0xAA61166B, 0x94876054, 0xBAA96D7D, 0x71B8AC5D, 0x0F85A9E2, 0xF7DC1E07,
    0x98BDDE2F, 0xC7E3EE25, 0x54A480AF, 0x2848DCB3, 0x63DDC5B2, 0x9F518EB8, 0x0961AA7E,
    0x5FAD7318, 0x64609E27, 0xA1CFBB4B, 0x7023F739, 0x5CC72BD9, 0x591D9CC8, 0xB54D8591,
    0x2319A9D5, 0xA9C02C4F, 0x5CA3453F, 0x9A8E59D9, 0xC2E071B8, 0x56F4277B, 0x26889D0E,
    0xA2CD0673, 0xF9B55CAE, 0x3CE18CF2, 0xCEA904E2, 0xC88B4FA4, 0x84EC6F27, 0xDC59210E,
    0xC40577BD, 0xF92014E9, 0x9F379E00, 0x21B85B0B, 0xE4F83D8D, 0x4D0700A3, 0x804E4188,
    0x9FC635E8, 0xF7F5FB7F, 0xCE10809F, 0x3E025897, 0x588F7150, 0x4CA2F164, 0x28644434,
    0x548084DF, 0x18899FE8, 0x2454F8B6, 0x1091BDA0, 0x02448318, 0x4E118B0A, 0x178AA285,
    0x86A2E8E6, 0x06F121A8, 0x1414B820, 0xD60A8200, 0x408E0F24, 0x5EA3B53E, 0xA4C8A000,
    0xD120167C, 0xB0E73A85, 0x09064EE3, 0x308BA29D, 0xE3F94C59, 0xF9499993, 0x08B29323,
    0x1E138C93, 0x2087212D, 0xA3E988B5, 0x28F21693, 0x20687CE7, 0x1E260962, 0x3C0ED3A5,
    0xD8864417, 0x46328499, 0x5A516FA6, 0x2954E778, 0x35C6B15C, 0xD1E02A48, 0x9026093D,
    0x5E97089F, 0x6815025A, 0xA1E7736C, 0x6739993B, 0xC01CFF93, 0x34F914C3, 0x33370D83,
    0x33D03768, 0xC31378D9, 0x3A8155A2, 0x22A4A894, 0x861D8517, 0x11DD82BC, 0x0D8AFEBF,
    0xB0A0E438, 0x688D1B93, 0x74AD0922, 0xAE250852, 0xCAE7CECC, 0xE148C72F, 0x50074E51,
    0xEC170470, 0x4FAB6B44, 0x6B9A16D0, 0xE1241755, 0x759B3A45, 0xBE2B11E6, 0xB4454314,
    0xACF9D63A, 0xE866E2A2, 0xB93B7C1E, 0xB5BC2709, 0xBD265BCA, 0xCD7932A3, 0xE0A4E337,
    0xB4EA3951, 0x3A0101B3, 0xBF0FC144, 0x2508A6CD, 0x8364D432, 0xA8560A03, 0x3CB44D81,
    0x31078198, 0x12E2213B, 0x83FF101E, 0x54C9C6B1, 0xE96F437C, 0x2988E016, 0x0111C8B1,
    0xC3BC5A11, 0xF0B427E4, 0x01498612, 0x1A45509C, 0x7339DCD9, 0x129C8FCD, 0xBB2D1C4B,
    0xEF3AD3EA, 0x19C153C4, 0x09925488, 0x37230EC3, 0x88FD5380, 0x5E2F8B62, 0xD7AD5B4C,
    0x8A824052, 0x4930702C, 0xEE793F35, 0x4AD3B4C9, 0x3453BA23, 0x02F37CDB, 0x01EC6A10,
    0x05C8C94C, 0x702FF751, 0xDFF6DDCB, 0x6EEBB250, 0xF1945108, 0x4822B44D, 0xAD378661,
    0x14CC62F8, 0xF9166780, 0x83EA094F, 0xA89F2140, 0x410347B2, 0x7C8F315C, 0xB98E7B9C,
    0x302395E6, 0x7650E9F9, 0x5EC2B085, 0x2888F204, 0x4FE141CD, 0xFEB4FEEC, 0xB4EB39BA,
    0x92EA01A3, 0xEF7BEEA7, 0xCD9CA53E, 0xFCAFC20D, 0x27C7DBBB, 0x00001014, 0x00000000

  EW_BITMAPS_TABLE( ApplicationFaultBitmap )
    EW_BITMAP( ApplicationFaultBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationFaultBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::FaultBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationFaultBitmap )

/* Bitmap resource : 'Application::DisableBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationDisableBitmap )
  EW_BITMAP_FRAMES( ApplicationDisableBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 28, 0 )
    EW_BITMAP_FRAME( 15, 8, 5, 4, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationDisableBitmap, Default )     /* ratio 30.25 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x8DC7A311, 0xEC8A351F, 0xC8E4B208, 0x9A4F2490, 0xE512C94C, 0xBAD400C7,
    0x2C416385, 0x351E359A, 0x69C4E66F, 0x9ECEA793, 0x1D02833B, 0xCFA8B3FA, 0x81B13BA3,
    0xE5A28723, 0xFF4F974A, 0x28330005, 0x3900A812, 0xBACD48A0, 0xAF562B55, 0x1D76BF5C,
    0xD86CB62B, 0x92D360B3, 0xCE2FFB45, 0x9C8F4E23, 0x109B9CAA, 0x1877BB5D, 0xA290F00C,
    0x290EC0AF, 0x817462FB, 0x98068CF3, 0x1C6ACC39, 0x0E78A65E, 0xBC32C5E3, 0x186671C4,
    0x8EC7E371, 0x3C9E472F, 0x669C4BE3, 0x96434397, 0xD6406CEC, 0xF4A1A67E, 0x1EEF67A3,
    0x23B0B903, 0xAEB74B8E, 0xFEAC8083, 0xB2E91C2A, 0x7E3F1F6E, 0xA5476205, 0x8340350B,
    0x89E65720, 0x5E2EF75D, 0x2DC4E105, 0x1B7DAECE, 0xEBDDEE4A, 0x0023F77E, 0x85543BBD,
    0xE72B91C6, 0x7439DCCA, 0xF1549E42, 0xDAED1629, 0x6DD3948E, 0xA480B6E3, 0xDCED3A8B,
    0x4E1F7BBF, 0xB1727C31, 0xCF03B4E9, 0x53C97205, 0x1C0E3D8F, 0xF914C3C0, 0x16C45048,
    0xCE3370EE, 0x14642439, 0xD0FE755F, 0xFB7E1F67, 0x360CD449, 0x8830CCDC, 0x41F4A927,
    0x70C02DCA, 0xF23C4ED1, 0x7F94E04C, 0xDE5569E3, 0x97E1DF73, 0xDC540F80, 0x55099623,
    0x5D8DA1A0, 0xE1742578, 0xC7DDF57C, 0x0A1D76CF, 0x3E354CF3, 0x1584002C, 0x95A598F5,
    0x62307D16, 0x3C0C8BCA, 0xCD72CF49, 0x40DFC8D1, 0x4611301B, 0xE3FE5239, 0x486E16C2,
    0xF23C0EC3, 0x19DF8050, 0x89925488, 0x06F9BC6E, 0x84D9741C, 0x1309CE43, 0x3B45B118,
    0x88958A65, 0xF1DCAD28, 0x91FF71E2, 0x3F7425D7, 0x3047A1A0, 0x42B57281, 0x23546C16,
    0x78EB3A0E, 0x97005050, 0x1A4B72B4, 0x803A84FD, 0x33C4EE5C, 0xFA3C048F, 0x0E56A918,
    0x3C858108, 0x1E2A1E33, 0x37E9E697, 0x1CBF2B90, 0xFD6A4523, 0x984FFAAC, 0x8DA34263,
    0x67403037, 0x28F93E0F, 0x76190390, 0x58ABE31C, 0x4B42A893, 0x08C1C21B, 0xDA0480A0,
    0x961E516A, 0xB3C87288, 0x0569655C, 0x52F4AB3D, 0xE529154C, 0x073ECFA3, 0x1F86D114,
    0x15AB80BB, 0xC1F46C11, 0x69C19D8B, 0xB5A2AD6B, 0x3F91697E, 0xC7000B00, 0xE860905B,
    0x4C76AF2B, 0xEB228A02, 0xB20063EE, 0x049020FA, 0x22DC811C, 0x399B3FEF, 0xF43CCF03,
    0x005FB040, 0xAFC96EE2, 0x14A9D197, 0xA89F2140, 0x17AF07B2, 0x1DC650EF, 0xE8FA34C5,
    0xAA5693C5, 0x58F03B8E, 0x88A6E1D0, 0xAC4FF8C6, 0x0AAC96DA, 0x1158C42F, 0xA717C5F2,
    0xD71AC570, 0x3B8EC39C, 0xD0FCEC19, 0x1A2E32BE, 0x60CE7434, 0x210C8DD3, 0x37C65144,
    0x34A5B348, 0x206240D3, 0xFF544975, 0x6780E013, 0x2CC9EC97, 0x306188BC, 0xD022BE5B,
    0xE8F81503, 0x8628C971, 0xDB608818, 0x323ACF3C, 0x3BE111E0, 0x349E2447, 0x8CDD32C2,
    0x062655AB, 0x8E817C4A, 0xE2CCA924, 0x7C08C406, 0x57E0F47C, 0x37CD7487, 0x1950A4E3,
    0xC8631733, 0x506D1642, 0x1C5AB613, 0x39062134, 0xB0DE5B94, 0x83DD0901, 0x861F026C,
    0x4E0CFB98, 0xC92B4942, 0xB28BE1D0, 0x78E637CA, 0x543F02B1, 0xB5284F61, 0xA6C5F2F8,
    0xB908A627, 0x558FABE4, 0x6C681502, 0xE237CD63, 0x6A2A10A8, 0xC621381D, 0x686A6538,
    0xC3419224, 0x50320C12, 0x1A8560A0, 0x7A7F54D8, 0x94CD31EA, 0xD00EDF92, 0x8C278921,
    0xF5778DD8, 0x42539270, 0x4D08C0DA, 0x5805424C, 0x7C358358, 0x083C8680, 0xE9722763,
    0x31A232C5, 0x8F558C84, 0x44606C57, 0xAC712826, 0x42487564, 0x1EC2BA14, 0xBF0A9114,
    0x5357C600, 0x5A2203C0, 0xB88B3841, 0x13D55E0B, 0xE182610C, 0xA0FC6A0C, 0x59B92285,
    0x3716DECE, 0x11C1FC2E, 0x18C1C0A4, 0x1E0C80EA, 0x0987018A, 0x6802A0E9, 0xB04AC368,
    0xD06B16A2, 0x90D2FF1F, 0x625C4B88, 0x4650C316, 0x0FE60013, 0x73B12001, 0x17D92AFE,
    0x314638C3, 0x648CD182, 0xCB19633C, 0x00001018, 0x00000000

  EW_BITMAPS_TABLE( ApplicationDisableBitmap )
    EW_BITMAP( ApplicationDisableBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationDisableBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::DisableBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationDisableBitmap )

/* Bitmap resource : 'Application::OnTestBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationOnTestBitmap )
  EW_BITMAP_FRAMES( ApplicationOnTestBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 33, 30, 0 )
    EW_BITMAP_FRAME( 5, 28, 20, 1, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationOnTestBitmap, Default )      /* ratio 28.28 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0x1BB0984C, 0x562373B9, 0xE5562AF5, 0x59612E94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0x6247288F, 0xD86BB54C, 0xC2DD6A15,
    0xB08860B1, 0x0A9B42E6, 0xE834D273, 0x3580A7AF, 0x1A55308B, 0xBF4A0390, 0x21FF4500,
    0xE934A285, 0x9F4CA6D2, 0x354A754A, 0x58A8556A, 0x9ADD5AA7, 0x3C952935, 0xCBE15888,
    0x4EC10FA7, 0x26CF389D, 0x164A8484, 0x4CFFAD1C, 0xCDA34154, 0xD23716C5, 0x9BD5E2EC,
    0xBDDF6EF7, 0x7DF2F97E, 0x344DE5C1, 0x031381C1, 0xB1B7FC5E, 0xAC6B2C0A, 0x94FA3511,
    0x8C4F248E, 0x7CDDA6D4, 0xC36120D3, 0x62850F4F, 0x67734795, 0xA34DA7B4, 0xECFAAD5E,
    0xBABF5BA8, 0x64609D3C, 0x0182BB4B, 0x89CE735A, 0x7417C941, 0xF3659F4F, 0xEA774316,
    0xDDEB09DD, 0xB700B7C3, 0xD538D671, 0x416783B9, 0x4F7F5140, 0x6EDF239D, 0xA7EFF7B0,
    0x7381B6D2, 0x40FCBCF1, 0x59308A35, 0x98EBF572, 0x4FC7F314, 0x1D6EA74B, 0xDAA4F60A,
    0xED3F43E3, 0xF0D2781D, 0x1FB7C1E3, 0x64C93000, 0xE8520F00, 0x621341C3, 0x3D0F1390,
    0xE0203CF5, 0x7755F359, 0xE502765D, 0xFD80DDC6, 0x791E2781, 0x40171A1B, 0xF1EC6A10,
    0x20675C0B, 0x13264952, 0x859D3746, 0x54A861F6, 0xE6F9FC8B, 0x8200531F, 0x2C73DFA8,
    0x53D704B9, 0xCBD3F9F5, 0x410CD132, 0x06150023, 0x3B86A329, 0x7FE1D86E, 0x4F391E1F,
    0xB034F63D, 0x5E3F8360, 0x64140205, 0x950F2380, 0xE498080E, 0x7865F885, 0xE24F4264,
    0x38886518, 0x26C8E1BD, 0x15C96491, 0x7210625C, 0x2A2F9899, 0x6C8CE659, 0x3FE697EA,
    0xCCC80A39, 0x50D0DB35, 0xEC520EC0, 0x5C576723, 0x304B0905, 0xE1B530C8, 0xC9EE3198,
    0xFDAA80E4, 0xFC86E819, 0x010FD3F0, 0x87117832, 0x7A968B33, 0x74470555, 0xEC39CEB1,
    0x6A8193B8, 0xA927DE94, 0xA6AE7D99, 0x1A4D9AE9, 0xA6691A24, 0x0F809532, 0xD933DC54,
    0x85C15751, 0xE0801BC4, 0x023F93D2, 0x99279850, 0x2B99F2B3, 0x187A3687, 0x7CD76EE0,
    0x0A0A4E33, 0x3D8550FC, 0x4A63FEBD, 0x9168C12E, 0x1CCE320B, 0x5F12C191, 0x23EE139C,
    0x8712C4A7, 0x5B41F4B3, 0xEE98B490, 0xA7B5EB76, 0x00EFE3F5, 0x07518C38, 0xC1B6E132,
    0x9C932688, 0xF03B4E95, 0x1C04905C, 0xE8B2DC81, 0x914C3C01, 0x74D8338F, 0xB1424323,
    0x40E6792E, 0x5398EAFB, 0xB2A89F21, 0xA03FB847, 0xFA3047A1, 0x018FB3EC, 0x802B2DAA,
    0x22C4A623, 0xC316C507, 0x1C5855F5, 0xB4695B3F, 0x72191E97, 0xC360CD42, 0xE7380CCD,
    0x530928B3, 0x3B0DC19C, 0xC143C8F0, 0x7D1F4591, 0x64691542, 0x503459F3, 0xBD73DD4B,
    0x741BDF3F, 0x38DA68AD, 0xACE838AC, 0xCC7281E3, 0x1A8560A1, 0x9B4A2CD8, 0x4384D96D,
    0x9F1F09CE, 0xF73D8F46, 0x3C4ED030, 0x2F404CF2, 0x9D8AB28C, 0xEDFD0037, 0x7540DA5A,
    0xB768B65E, 0x0D331EDF, 0x7E1C3936, 0x1E96C764, 0x2D2B33BE, 0x2D8A2CBF, 0xE8B178BE,
    0x72E20981, 0x5848338C, 0x608BB64E, 0xBE5F9E17, 0x9633D9FA, 0x00323902, 0xC0F41584,
    0xB23EBA45, 0x138C9308, 0x1CFB4FAA, 0xEE1F40E6, 0x48F33C4E, 0x70D3B4C0, 0xA468FD25,
    0x3D2EC3C1, 0x19076ADA, 0x7602EBE4, 0x6B10A9FA, 0x5C0BE1F0, 0xCF5EDC0B, 0xF436E9B9,
    0xCF5508D0, 0x46FAFE90, 0xFB3EDFAB, 0x7EEFC347, 0x4FD7EFFC, 0x50C8D1FF, 0x520E0D93,
    0x2B8871DC, 0xE1CBE14F, 0x488830C0, 0x0E2E0280, 0x943A42F3, 0xD86D0D51, 0xF0AD2120,
    0x80A63185, 0x01501E80, 0x60CAE11F, 0xA73836B1, 0x166B0CAB, 0x134650C3, 0x4987648E,
    0x70114280, 0xCC37CBE1, 0xF8108E91, 0xB0031FAB, 0xA16C2B04, 0x4011A486, 0xC7E05107,
    0x43B8730D, 0x87D0E21D, 0x0F61FC3C, 0x22C42887, 0x4088F106, 0x02D2624C, 0x145AB036,
    0x384B1983, 0x813A2092, 0x05C03F0A, 0x04587C0B, 0xA554A62A, 0x757179E8, 0x0049B3C2,
    0x508940EE, 0xB629E224, 0x5E265DC3, 0x60338B81, 0xFBD28C0F, 0x18E71862, 0xC594B180,
    0x47D8088E, 0xC7200AA7, 0x8FB1C238, 0x20A3FC80, 0x69C7E8E7, 0x00000405, 0x00000000

  EW_BITMAPS_TABLE( ApplicationOnTestBitmap )
    EW_BITMAP( ApplicationOnTestBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationOnTestBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::OnTestBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationOnTestBitmap )

/* Initializer for the class 'Application::TabButtonPull' */
void ApplicationTabButtonPull__Init( ApplicationTabButtonPull _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->Menu, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTabButtonPull );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)_this, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( _this, _Const0079 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const007A );
  ViewsRectangle_OnSetColorBL( &_this->Background, _Const0042 );
  ViewsRectangle_OnSetColorBR( &_this->Background, _Const0042 );
  ViewsRectangle_OnSetColorTR( &_this->Background, _Const0042 );
  ViewsRectangle_OnSetColorTL( &_this->Background, _Const0042 );
  ViewsRectangle_OnSetColor( &_this->Background, _Const0042 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const007B );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0052 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const007C );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const007C );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0052 );
  EwRetainString( &_this->Text, EwLoadString( &_Const007D ));
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const007E );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0039 ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const007F );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0080 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0081 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0082 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0083 );
  CoreView_OnSetLayout((CoreView)&_this->Menu, CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  );
  CoreRectView__OnSetBounds( &_this->Menu, _Const0084 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Menu, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->Menu, 40 );
  CoreVerticalList_OnSetNoOfItems( &_this->Menu, 6 );
  CoreVerticalList_OnSetItemClass( &_this->Menu, EW_CLASS( ApplicationMenuItem ));
  CoreView_OnSetLayout((CoreView)&_this->Text2, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0085 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Menu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationDropdownBitmap, 
  ResourcesBitmap ));
  _this->TouchHandler.OnLeave = EwNullSlot;
  _this->TouchHandler.OnRelease = EwNullSlot;
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationTabButtonPull_OnPress 
  );
  _this->Menu.OnLoadItem = EwNewSlot( _this, ApplicationTabButtonPull_OnLoadItem 
  );
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::TabButtonPull' */
void ApplicationTabButtonPull__ReInit( ApplicationTabButtonPull _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->Text1 );
  ViewsImage__ReInit( &_this->Image );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  CoreVerticalList__ReInit( &_this->Menu );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'Application::TabButtonPull' */
void ApplicationTabButtonPull__Done( ApplicationTabButtonPull _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTabButtonPull );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->Text1 );
  ViewsImage__Done( &_this->Image );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  CoreVerticalList__Done( &_this->Menu );
  ViewsText__Done( &_this->Text2 );

  /* Release all used strings */
  EwReleaseString( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TabButtonPull' */
void ApplicationTabButtonPull__Mark( ApplicationTabButtonPull _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->Menu );
  EwMarkSlot( _this->OnSelectItem );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( _this->outside1 );
  EwMarkObject( _this->outside2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationTabButtonPull_UpdateLayout( ApplicationTabButtonPull _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTabButtonPull_UpdateViewState( ApplicationTabButtonPull _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text1, _this->Text );
}

/* 'C' function for method : 'Application::TabButtonPull.OnPress()' */
void ApplicationTabButtonPull_OnPress( ApplicationTabButtonPull _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->pressed )
  {
    ApplicationApplication ap = EwCastObject( CoreView__GetRoot( _this ), ApplicationApplication 
      );

    if ( ap->LevelAccess.Level > 1 )
    {
      ApplicationTabButtonPull_OnSetpressed( _this, 1 );
      CoreGroup_OnSetVisible((CoreGroup)&_this->Menu, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 1 );
      _this->outside1 = EwNewObject( CoreSimpleTouchHandler, 0 );
      _this->outside2 = EwNewObject( CoreSimpleTouchHandler, 0 );
      CoreQuadView__OnSetPoint1( _this->outside1, _Const0054 );
      CoreQuadView__OnSetPoint2( _this->outside1, _Const0086 );
      CoreQuadView__OnSetPoint3( _this->outside1, _Const0087 );
      CoreQuadView__OnSetPoint4( _this->outside1, _Const0088 );
      CoreQuadView__OnSetPoint1( _this->outside2, _Const0088 );
      CoreQuadView__OnSetPoint2( _this->outside2, _Const0089 );
      CoreQuadView__OnSetPoint3( _this->outside2, _Const008A );
      CoreQuadView__OnSetPoint4( _this->outside2, _Const008B );
      _this->outside1->OnPress = EwNewSlot( _this, ApplicationTabButtonPull_OutsidePress 
      );
      _this->outside2->OnPress = EwNewSlot( _this, ApplicationTabButtonPull_OutsidePress 
      );
      CoreGroup__Add( _this->Super3.Owner, ((CoreView)_this->outside1 ), 0 );
      CoreGroup__Add( _this->Super3.Owner, ((CoreView)_this->outside2 ), 0 );
      CoreGroup_InvalidateViewState((CoreGroup)_this );
    }
    else
    {
      ApplicationApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), 
      ApplicationApplication ));
    }
  }
}

/* 'C' function for method : 'Application::TabButtonPull.OnSetpressed()' */
void ApplicationTabButtonPull_OnSetpressed( ApplicationTabButtonPull _this, XBool 
  value )
{
  XColor t;

  if ( _this->pressed == value )
    return;

  _this->pressed = value;
  t = _this->Bevel.ColorB;
  ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
  ViewsBevel_OnSetColorT( &_this->Bevel, t );
  t = _this->Bevel.ColorL;
  ViewsBevel_OnSetColorL( &_this->Bevel, _this->Bevel.ColorR );
  ViewsBevel_OnSetColorR( &_this->Bevel, t );

  if ( _this->pressed )
  {
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y + 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectX1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectY1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.Y + 2 ));
  }
  else
  {
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectX1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Image, EwSetRectY1( _this->Image.Super1.Bounds, 
    _this->Image.Super1.Bounds.Point1.Y - 2 ));
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationTabButtonPull_OnLoadItem( ApplicationTabButtonPull _this, XObject 
  sender )
{
  XInt32 itemNo;
  ApplicationMenuItem item;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->Menu.Item;
  item = EwCastObject( _this->Menu.View, ApplicationMenuItem );

  if ( item == 0 )
    return;

  switch ( itemNo )
  {
    case 0 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const003B ));
    break;

    case 1 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const003D ));
    break;

    case 2 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0040 ));
    break;

    case 3 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0041 ));
    break;

    case 4 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const003F ));
    break;

    case 5 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const003E ));
    break;
  }

  CoreRectView__OnSetBounds( item, EwSetRectSize( item->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->Menu.Super2.Bounds ), _this->Menu.ItemHeight )));
}

/* 'C' function for method : 'Application::TabButtonPull.MenuChoice()' */
void ApplicationTabButtonPull_MenuChoice( ApplicationTabButtonPull _this, ApplicationMenuItem 
  choice )
{
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside1 ));
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside2 ));
  ApplicationApplication_PageDeselection( EwCastObject( _this->Super3.Owner, ApplicationApplication 
  ));
  ViewsText_OnSetString( &_this->Text2, choice->Text1.String );
  ViewsRectangle_OnSetColorBL( &_this->Background, _Const008C );
  ViewsRectangle_OnSetColorBR( &_this->Background, _Const008C );
  ViewsRectangle_OnSetColorTL( &_this->Background, _Const008C );
  ViewsRectangle_OnSetColorTR( &_this->Background, _Const008C );
  EwRetainString( &EwCastObject( _this->Super3.Owner, ApplicationApplication )->SelectedTab, 
  _this->Text2.String );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Menu, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  ApplicationTabButtonPull_OnSetpressed( _this, 0 );
  EwPostSignal( _this->OnSelectItem, ((XObject)choice ));
  return;
}

/* 'C' function for method : 'Application::TabButtonPull.OutsidePress()' */
void ApplicationTabButtonPull_OutsidePress( ApplicationTabButtonPull _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside1 ));
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside2 ));
  CoreGroup_OnSetVisible((CoreGroup)&_this->Menu, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  ApplicationTabButtonPull_OnSetpressed( _this, 0 );
}

/* Variants derived from the class : 'Application::TabButtonPull' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTabButtonPull )
EW_END_OF_CLASS_VARIANTS( ApplicationTabButtonPull )

/* Virtual Method Table (VMT) for the class : 'Application::TabButtonPull' */
EW_DEFINE_CLASS( ApplicationTabButtonPull, CoreGroup, "Application::TabButtonPull" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationTabButtonPull_UpdateLayout,
  ApplicationTabButtonPull_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTabButtonPull )

/* Bitmap resource : 'Application::AccessBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationAccessBitmap )
  EW_BITMAP_FRAMES( ApplicationAccessBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 29, 29, 0 )
    EW_BITMAP_FRAME( 20, 3, 7, 22, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationAccessBitmap, Default )      /* ratio 30.68 % */
    0x1C09FB00, 0xC11FB020, 0x1A0F0581, 0xE070C84C, 0x1AF67ABC, 0xEC35DAA4, 0x883C14CA,
    0x555A515A, 0x85C34D8B, 0x1C824308, 0x47E4B0A9, 0x1A512293, 0x4052C7F4, 0xFAFC7E42,
    0x93298011, 0x0498CCE6, 0xC7BBD9E8, 0x632F95A0, 0x59F0B053, 0x10018A84, 0xE402F42B,
    0x294FF280, 0x5AA24453, 0x1549B1E1, 0x569AD567, 0x7ADD62B3, 0xAED5EB93, 0xB4DA4F60,
    0x829F2F87, 0x3D92C258, 0xD1E802E9, 0xB24307A8, 0x74DA73C4, 0x74A65D69, 0xA4FA16E9,
    0xB2BDCF6A, 0xB3458809, 0x613043C6, 0x270785C3, 0xDB6D1C26, 0x235F17B7, 0xF5FB056B,
    0x934218E4, 0xB228493A, 0xBB5E5DC5, 0x1E82F19F, 0xA0A99A2D, 0x9CFCA84E, 0x432EE763,
    0xE9B0BBE8, 0x479340FA, 0x93AF6498, 0x8978136F, 0x290EC0B3, 0x270B5EFB, 0x20389B1D,
    0xFD00A74E, 0xD5C097CD, 0x9C5263AF, 0xEC057F43, 0xD6EA1458, 0x63596055, 0xDD6D766D,
    0xE4E373E0, 0xF037D32D, 0xA78BA5E1, 0x5327DD7F, 0xB9E141A9, 0x678338F6, 0xE2DB7798,
    0x8CA7EB71, 0x013FA593, 0x83C01936, 0xA7A0FA14, 0xE9AF81DE, 0x8628C971, 0x7CD607C4,
    0xE0E7DDF5, 0x94B5FD84, 0x1A048090, 0x747121A8, 0x288951E1, 0x13285088, 0x7198C384,
    0xD89A2548, 0xE1374D44, 0x7F2220B0, 0xD2E7F932, 0xC8161840, 0xE1EB8DE1, 0x931D4FF8,
    0x8BC8B27C, 0xCB32A491, 0x83E9651B, 0x60D331C0, 0x53090393, 0x8BCDC19C, 0x0074A595,
    0xB3E4530F, 0xC2588E61, 0x9E244736, 0x4E250234, 0x01092A48, 0x43C05A11, 0xB05C11C1,
    0x275725F3, 0x95E5594D, 0xC708EA08, 0xF2409C23, 0x8C399862, 0x675D2659, 0x4F13A9A6,
    0xE810327F, 0x5A093BA0, 0x2127A068, 0xF81503D0, 0x5DA8E9C0, 0x89A2346E, 0x231A0E24,
    0xE83A35CD, 0x59A3CF09, 0x52C026BE, 0x5303ECFE, 0xCA290901, 0xA671A728, 0x9822C6B7,
    0xA59BA254, 0x2A8A6A98, 0x11429FAA, 0x2509A8EA, 0xF71503E0, 0x075C4ACC, 0x8E31884E,
    0x62047112, 0x58881A0B, 0xB057C982, 0x5C9700EA, 0x63AA76BE, 0x43F2B7AD, 0xFC0A40EA,
    0xD13D8550, 0x8320A6C2, 0x8E8394DE, 0x42186508, 0xD53626C9, 0xC002D7F3, 0xB76DDB0A,
    0x5094DAD4, 0x6BBEDBB6, 0x30E3BB57, 0xB420C721, 0x57D9965C, 0x973B3D88, 0x17A6F68E,
    0x2D0378EF, 0x053D5470, 0x20C6081F, 0x5BA28091, 0x2C0D71C0, 0xFEA9C5ED, 0x094CB073,
    0xC3056C29, 0xA59C8704, 0x223C8117, 0x4314838A, 0x9EC6722B, 0xB5AA2A82, 0x54851909,
    0xF171AFC3, 0xBCA42387, 0xFFC5B298, 0x43CEC9F4, 0x9103C911, 0x50374003, 0x1910D1F4,
    0x3249F49D, 0xAA32B527, 0xC8C1F459, 0xB0126B29, 0x74470573, 0xF2D54EB1, 0x1040D4A6,
    0x3343CC57, 0xA1EC5671, 0x3E2F2A88, 0x712C4A72, 0x3ECFA3E4, 0x82262007, 0xC3786614,
    0x3924C235, 0xF2160420, 0x45DE9D8C, 0x0398BD19, 0x931C7619, 0x5C972246, 0xDA341362,
    0xDDC30378, 0x37A4A71C, 0x16C37EDF, 0xBC861D85, 0xC7E13822, 0x8C1F9848, 0x63257FA0,
    0x4E570242, 0x10741397, 0x85E6CB22, 0xD55FBE7B, 0xFA540FA3, 0xB533B4D3, 0xD4821C84,
    0x840EA2F2, 0xE87AE31B, 0xBB16EB9F, 0xCED6B241, 0xC0495DB2, 0x362DC811, 0x28052749,
    0x0602F4B5, 0x0F53D2F4, 0xA0540946, 0x90EFCDB1, 0x21129587, 0x47C2A89E, 0xF1EC6A10,
    0x1ADCBD0B, 0x6E119AFF, 0x4D8BA1FC, 0xC6B15C29, 0x1F727035, 0xA66CFDFC, 0x665915F4,
    0x354CF309, 0xF89F003E, 0x3F86F08E, 0x616BE2E4, 0xD8111033, 0xD85E07D0, 0x38E31B84,
    0xE1AA0907, 0x80AC710D, 0xC6B41682, 0x02A1C437, 0x1BF0720D, 0x084748E6, 0x95A517BA,
    0x27252858, 0xDC8C9191, 0x5064B706, 0x60371B23, 0x415E2944, 0x0EA9D407, 0x6148AD70,
    0x92A7864B, 0x8544261E, 0x49213C3B, 0x8092D87E, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( ApplicationAccessBitmap )
    EW_BITMAP( ApplicationAccessBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationAccessBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::AccessBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationAccessBitmap )

/* Bitmap resource : 'Application::DropdownBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationDropdownBitmap )
  EW_BITMAP_FRAMES( ApplicationDropdownBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 32, 0 )
    EW_BITMAP_FRAME( 2, 6, 2, 22, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationDropdownBitmap, Default )    /* ratio 10.64 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x8DC7A311, 0xEC8A351F, 0xC8E4B208, 0x9A4F2490, 0xA512C94C, 0x552F95CB,
    0xB3096CCA, 0x3498CCE6, 0xC9CCDA6F, 0x9DCFA713, 0x80E40311, 0x51284FF2, 0x268745A3,
    0xA914AA3D, 0x9950A6D3, 0xF54A5D4A, 0x05AB54E9, 0x89956A81, 0xAAD46BB5, 0x0D5EBD5F,
    0xD12C764B, 0x62535B9E, 0xADB3AB45, 0xE36CAFDA, 0x402A5506, 0x727F1447, 0xB894FED3,
    0xBE5E6F76, 0x9DE2ED74, 0x5DEEB44B, 0x21FD86A4, 0xF0F8BC16, 0x3348C4D7, 0x194BD5F6,
    0x92C16170, 0xCC4DDF03, 0xCD643059, 0x765F3EFE, 0xD530967C, 0xBB277FBF, 0xA0DACBF5,
    0x5F7BD46A, 0x55BD5EB7, 0xB6B66576, 0x6B058801, 0xC8EFB796, 0x9EDF81A6, 0xC5B078DD,
    0x83199BCE, 0x3418AE46, 0xA799C4D6, 0x7C5CAEC2, 0xB9B6ED3A, 0xAE64A7AD, 0xE95BF67D,
    0x573F7731, 0xF979BA3E, 0xFB49E3E2, 0x3D8FFD16, 0xC370F473, 0x3F4CF63F, 0xEEE67AB9,
    0x5FD687EB, 0xF9F3BDFC, 0x9A7791F7, 0x0521BD7C, 0x18400B40, 0xF16FE084, 0x5720E70D,
    0xA058420D, 0x5831D152, 0x59DD83DA, 0x11705D94, 0x865BE77E, 0x9C2879D7, 0xD7520384,
    0x9A2877A1, 0x4A86A1B4, 0x0EC2A001, 0x22E75D59, 0x6882238C, 0x59968ADD, 0x366EE3A8,
    0x8D6398A6, 0xD6578921, 0x479A008E, 0x0A4379E4, 0x2485E139, 0x8EA4792A, 0x9EC7E9F8,
    0x889E5493, 0x5E3D8FA1, 0x588865A9, 0x9665B976, 0x65E97E5C, 0x69826498, 0x8A6798E6,
    0x689966A9, 0x4E66B9B6, 0x00000101, 0x00000000

  EW_BITMAPS_TABLE( ApplicationDropdownBitmap )
    EW_BITMAP( ApplicationDropdownBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationDropdownBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::DropdownBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationDropdownBitmap )

/* Bitmap resource : 'Application::EvacuateBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationEvacuateBitmap )
  EW_BITMAP_FRAMES( ApplicationEvacuateBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationEvacuateBitmap, Default )    /* ratio 17.56 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0xB2B65DAD, 0x67FBB99E,
    0x7FBCDB8C, 0x6BB592A8, 0xE12EB6BB, 0x268F2FBB, 0xA1D0C7D4, 0x0B90C328, 0x0D15AC87,
    0xFE81415E, 0xC7E3FF32, 0x62281FF9, 0x8E8B0EEB, 0x2DAD788C, 0xD942F169, 0xF47A4724,
    0xE8DF665A, 0xEFECCBFD, 0x96D3EDB2, 0x5C96EB5B, 0x2787655A, 0xE5D1C663, 0x332EFAED,
    0x176DB270, 0x770FFDA4, 0x7BBBE7F1, 0x3D2E1BFF, 0xC9E3DB3A, 0xECBE6B97, 0xE277BADC,
    0x8F83ABDF, 0x76F67D89, 0x8FBBB5ED, 0xFA1ECF17, 0x6154F77A, 0x5E7CC767, 0xABAA7AA0,
    0x4775ED98, 0x78BFDF6F, 0x4F07F8F6, 0x17FCFA3D, 0x120281A0, 0x033FE088, 0x7FA00816,
    0xCF73A0DB, 0x92F0923F, 0x86187C0E, 0xCC7952B7, 0x439F6729, 0x9C83396C, 0x67A21D6D,
    0x95976D5E, 0xBF731CA8, 0x864F2360, 0x51F869EF, 0xD89E1E79, 0x3963881C, 0x2A6C8E13,
    0x8F6358DA, 0x4FF7D629, 0x25FCDB31, 0x6E488C63, 0x42891F24, 0x889507DE, 0x21E8F9F3,
    0x365E2690, 0x6DFE3DCF, 0x47684C22, 0x8721A7B6, 0x8CB65E42, 0xB8E5B237, 0xB5CA94A3,
    0xC02622F8, 0x260FF3A8, 0xA7085CBF, 0x19BE6D9C, 0x588E3FE7, 0x4997A304, 0x8FE4B542,
    0x4F039E42, 0x8298FF3E, 0x411F60CC, 0x4E8DA359, 0xA3E7B976, 0xCCE2BD86, 0x83F19C5E,
    0xF5B59326, 0xD53FE9A3, 0x3FCF6394, 0x69F39CD9, 0xD4162890, 0xA68E9F68, 0xCA2A16BA,
    0x3CCEC60C, 0xE98A9205, 0x987E54A2, 0xF2B8AA1B, 0x8E542BA9, 0x3FCE82E8, 0x62F368C4,
    0x5A58FB3E, 0x9EB2A5EB, 0xCBAAABBA, 0x270FFAE6, 0x8EB3FE5B, 0x3956B13C, 0x3A389365,
    0x965B2CCB, 0x37E6E2F8, 0x4EF84CEB, 0x5B8DFE3D, 0x98FFB92E, 0xEABA2E9B, 0x29205ABE,
    0xD2B3B0C7, 0x93DCFF9C, 0x5A61B18F, 0xC53ED02B, 0xB6ED1B3E, 0x4C24C700, 0x7B1E2F36,
    0x54BC8D6C, 0xDD4ACF13, 0xC1A133A4, 0x66340AF9, 0x2C56DA99, 0xFD8229DD, 0xFD3F0FA3,
    0xA9680ACC, 0xF096D5F4, 0xF344B4C2, 0xDAFAB20E, 0x903FE0D6, 0xC5A90AF8, 0xCBE25218,
    0x5BC99F85, 0xD8C467B3, 0x9EA7339C, 0x36CC6A5E, 0x8F83D22F, 0xAAD31FA5, 0x9CCE2C19,
    0x4CB3701C, 0x6C4CB68B, 0xB1B3E28B, 0xCACF20D1, 0x372FC38D, 0x3F68B4BD, 0xD16B28BF,
    0xA96D4B45, 0xF970C126, 0xFCB82314, 0xB8880B7A, 0xDA19634C, 0x772D6EBF, 0x05FD7D4C,
    0x175FD571, 0x86C2D434, 0xA5E2E301, 0xAB7350B9, 0x16B730D6, 0xE2D7D7AC, 0x84B4F29D,
    0x53F71AF6, 0xF629BA6C, 0x3358BDA2, 0xB798D678, 0xF2314A16, 0xC74FB3EA, 0x4A9ACF77,
    0x2369A2AB, 0x3EEAA2E1, 0x84E3CBB2, 0xD91A2EB7, 0xE2FDF9A1, 0x3E26A3D5, 0xA71DB16B,
    0xBA814F13, 0x3FFBBEF3, 0x0EA3FFBD, 0xE3FF54B5, 0xCD7B334A, 0xA74BFAED, 0xE831BC9D,
    0x3A1A5F11, 0x836FB6D8, 0xC799F2B5, 0xA130C9D4, 0xE2AF8BF1, 0xCE86DB21, 0x4424FFA0,
    0x462BDE68, 0xFA3E5CCF, 0xF67B0C74, 0x4C85AFCB, 0x2FAA3C37, 0x5B9E7324, 0x342EC91A,
    0x28CFFE73, 0x001790C6, 0xFFC01805, 0x06807015, 0xE0BCA024, 0x61EC26E4, 0xA8E41A6F,
    0x67D0F147, 0xEFC2061B, 0x04596382, 0x1481CE2E, 0x63CEC9D7, 0x3D4CBB29, 0x469FE1F0,
    0x3081C9E8, 0x7F0720D3, 0x516D9C13, 0xA21717A2, 0x16883DC7, 0xE50D1342, 0xDF8C2845,
    0x8E385846, 0x6B66A4D3, 0x3AD7939B, 0xDC28B560, 0xDD18E3FD, 0x96E15230, 0x84DC1778,
    0xB1733162, 0x082F0748, 0xF1047FB7, 0xCBDBA31F, 0x43942F0B, 0x3144860C, 0x4F01910A,
    0x430F2606, 0x4C8CF174, 0x0A5BCA84, 0x049E95F1, 0x295A1860, 0xA8BC7504, 0x05423A43,
    0x4AEC712B, 0x13A8DB1B, 0x87913819, 0x1D634473, 0x1E1472C7, 0x7B8FB13A, 0x0040481C,
    0x00000000

  EW_BITMAPS_TABLE( ApplicationEvacuateBitmap )
    EW_BITMAP( ApplicationEvacuateBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationEvacuateBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::EvacuateBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationEvacuateBitmap )

/* Bitmap resource : 'Application::ResetBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationResetBitmap )
  EW_BITMAP_FRAMES( ApplicationResetBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationResetBitmap, Default )       /* ratio 16.19 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0x98CAE271, 0xDBBE6B2F, 0x7198C9E1, 0x6E5B3774, 0x3013350C, 0x395EFF75, 0x574FF77B,
    0x7CFF78B5, 0x18FD835D, 0xC9533FDE, 0xB47BFDDA, 0xDFE8DD0B, 0x25222D7E, 0xA534999D,
    0x0DFEE95E, 0x1FEF26D3, 0x0AFA79BB, 0xBD4E9F4A, 0xFD7E3EBA, 0x774B71FE, 0x662B5FEF,
    0x2E8B80EE, 0xAF349E2E, 0xE9F0FFD7, 0xBDBD5ECB, 0xC7EFF7FB, 0xCFF7C3B9, 0xE575B0D3,
    0x0CAF93F3, 0x6DF25769, 0xDF0774E8, 0x48160480, 0x64FB3E5D, 0xAC340B37, 0x83DE37ED,
    0x8BA23D54, 0x43B0E26F, 0xD0FF819F, 0xFF3F0F83, 0x3D0DF32C, 0x4FF781DE, 0xA3FDF727,
    0x89F83049, 0xFF3B0C62, 0x6C0D42E4, 0x5DD3A8DD, 0x4812343F, 0xE9B57663, 0x1B8EA107,
    0x3D8E5355, 0xDD83F204, 0x336CC63F, 0xF1BD6ECF, 0xC5280FF8, 0x3BCE58B0, 0xCFB810F9,
    0xA320A690, 0xEDC4839B, 0xAC33CB08, 0x7ACF980D, 0x4CB2A8FF, 0xD5B25878, 0x50FF4588,
    0x043D4E43, 0x744F43BA, 0xE656FA12, 0xF4D1319C, 0xECF43BCF, 0xFF8DDEE3, 0x990CD2B8,
    0x08C6563B, 0x28C5BE2E, 0x5CBF7C20, 0x599D1CD3, 0x970B15DE, 0x0E334604, 0x67E68C9B,
    0xDDA82F89, 0xF07B9D73, 0x9DA7A3D8, 0xCD899695, 0x27B64039, 0x9C987664, 0xC8A564A6,
    0x80E47374, 0xE8195E55, 0xC8691BAC, 0xACE07B61, 0xB4A85F43, 0x7E0C47D6, 0x68B72E03,
    0xE251E4AF, 0xB67C724B, 0x2B918C57, 0x8F9F889D, 0x0E234240, 0xC725C79B, 0xE4F55DEB,
    0xD6756B73, 0x8EEAB8FC, 0x604AFC9F, 0xA3791F8E, 0x84CF7BAB, 0x6BB12943, 0xAE251425,
    0xE8DB7E16, 0x38B24C4A, 0xAD2B4E20, 0x867B9D03, 0x39D8ABCA, 0x5D5BBCF0, 0xFB5EF138,
    0x1298255B, 0xFBBE6C28, 0xC1AFD7B6, 0xCF73D163, 0x6361D4B6, 0x8B10900E, 0xD3C52D96,
    0xBE921C3D, 0xA32C39D1, 0x826D63BF, 0x1ECB8122, 0x00BCF199, 0x94DD4A1E, 0x1A8A5DD9,
    0xBC8EFCC8, 0x0F0B4AF2, 0xF3A02628, 0x344B4C1A, 0x0CD7C25D, 0x2CD22038, 0x4B377772,
    0xB6724BC2, 0x873127BA, 0x6EC9CA67, 0x823921CF, 0xBA9E3C66, 0x08765D87, 0xC79D57B2,
    0x2D05DF54, 0x5CDECCCA, 0x1E188E66, 0xAD48724D, 0x3CDF0ABE, 0xC919E8F7, 0x65DF6BD2,
    0x04D96A1A, 0x5193CFF8, 0x9437BDF2, 0x780398FF, 0x040B69B2, 0x48977E76, 0x36CB4FF4,
    0x9FCAD8D6, 0x54362B75, 0xFE578573, 0x556BCDB5, 0x222B0FFB, 0x3FED3346, 0x0C0DA75D,
    0xAD86C336, 0xA796E4E4, 0xEBB49D2E, 0x378CA552, 0xF85E1220, 0x16CDB1D6, 0xA3897939,
    0xFFC5CD76, 0x944EE390, 0x7BFF03BE, 0x4F07C3EF, 0x1FC8F0BC, 0x08D8CFFF, 0x2392F6A3,
    0x4FA3FE13, 0xF3B7A982, 0xE4A83FE6, 0xDBD4FB76, 0xC34ED693, 0x6EE9F1D5, 0x66D8D48B,
    0x9BA6D4B5, 0xB9997DCD, 0x7A0BB3FF, 0x7776B20B, 0x9FABF4F7, 0x2FDCFAFE, 0xC339CB82,
    0xFDFF8FD5, 0xFE8B6400, 0xCF99D7F8, 0x017FCFD8, 0xC7015834, 0x1CC898F1, 0xCBFF81F0,
    0x01426D4F, 0x0708B998, 0x608C0982, 0x10A2FE99, 0x1844F019, 0x218790D9, 0x12C08830,
    0x852DE4BE, 0x024F4AF8, 0x14799CB0, 0x8C193422, 0x82D709A1, 0x30A4AD15, 0xA1542A28,
    0xC130644E, 0x8670C205, 0x70941432, 0x1DC13816, 0x012070E6, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( ApplicationResetBitmap )
    EW_BITMAP( ApplicationResetBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationResetBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::ResetBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationResetBitmap )

/* Font resource : 'Application::FontVerdana16' */
EW_DEFINE_FONT_RES( ApplicationFontVerdana16, 13, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 2, -10, 10, 10, 13, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x000000CC ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -9, 1, 9, 5, 0x000000CC ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 3, 4, 5, 0x000000E6 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 8, 8, 10, 0x00000110 ),              /* '#' */
  EW_GLYPH( 0x0024, 1, -10, 6, 12, 8, 0x000001FD ),             /* '$' */
  EW_GLYPH( 0x0025, 1, -9, 11, 9, 13, 0x000002F2 ),             /* '%' */
  EW_GLYPH( 0x0026, 1, -9, 9, 9, 9, 0x0000046B ),               /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 1, 4, 3, 0x0000059E ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -10, 4, 13, 6, 0x000005AE ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 4, 13, 6, 0x0000065D ),             /* ')' */
  EW_GLYPH( 0x002A, 2, -10, 5, 5, 9, 0x0000070C ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -8, 7, 7, 9, 0x00000775 ),               /* '+' */
  EW_GLYPH( 0x002C, 1, -2, 3, 4, 5, 0x000007DA ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -5, 5, 1, 7, 0x0000080D ),               /* '-' */
  EW_GLYPH( 0x002E, 2, -2, 1, 2, 5, 0x00000826 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 7, 12, 6, 0x0000082C ),             /* '/' */
  EW_GLYPH( 0x0030, 1, -9, 6, 9, 8, 0x000008D3 ),               /* '0' */
  EW_GLYPH( 0x0031, 2, -9, 5, 9, 8, 0x0000098C ),               /* '1' */
  EW_GLYPH( 0x0032, 1, -9, 6, 9, 8, 0x000009E4 ),               /* '2' */
  EW_GLYPH( 0x0033, 1, -9, 6, 9, 8, 0x00000ABE ),               /* '3' */
  EW_GLYPH( 0x0034, 1, -9, 7, 9, 8, 0x00000B90 ),               /* '4' */
  EW_GLYPH( 0x0035, 1, -9, 6, 9, 8, 0x00000C3A ),               /* '5' */
  EW_GLYPH( 0x0036, 1, -9, 6, 9, 8, 0x00000CEC ),               /* '6' */
  EW_GLYPH( 0x0037, 1, -9, 6, 9, 8, 0x00000DC3 ),               /* '7' */
  EW_GLYPH( 0x0038, 1, -9, 6, 9, 8, 0x00000E66 ),               /* '8' */
  EW_GLYPH( 0x0039, 1, -9, 6, 9, 8, 0x00000F68 ),               /* '9' */
  EW_GLYPH( 0x003A, 2, -7, 1, 7, 6, 0x00001041 ),               /* ':' */
  EW_GLYPH( 0x003B, 1, -7, 3, 9, 6, 0x00001054 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 7, 9, 9, 0x0000109E ),               /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 7, 4, 9, 0x00001180 ),               /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 7, 9, 9, 0x000011F0 ),               /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 5, 9, 7, 0x000012D2 ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 11, 11, 13, 0x0000135F ),            /* '@' */
  EW_GLYPH( 0x0041, 0, -9, 9, 9, 9, 0x00001545 ),               /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 6, 9, 8, 0x00001637 ),               /* 'B' */
  EW_GLYPH( 0x0043, 1, -9, 7, 9, 9, 0x000016F2 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 7, 9, 9, 0x000017CD ),               /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 6, 9, 8, 0x0000188C ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 6, 9, 8, 0x0000192A ),               /* 'F' */
  EW_GLYPH( 0x0047, 1, -9, 7, 9, 9, 0x000019AC ),               /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 7, 9, 9, 0x00001A94 ),               /* 'H' */
  EW_GLYPH( 0x0049, 1, -9, 3, 9, 5, 0x00001B03 ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 5, 9, 6, 0x00001B3A ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 6, 9, 8, 0x00001B99 ),               /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 6, 9, 7, 0x00001C41 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 9, 9, 11, 0x00001C8F ),              /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 7, 9, 9, 0x00001D67 ),               /* 'N' */
  EW_GLYPH( 0x004F, 1, -9, 8, 9, 10, 0x00001DFE ),              /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 6, 9, 8, 0x00001F0A ),               /* 'P' */
  EW_GLYPH( 0x0051, 1, -9, 8, 11, 10, 0x00001FA3 ),             /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 8, 9, 8, 0x000020EA ),               /* 'R' */
  EW_GLYPH( 0x0053, 1, -9, 7, 9, 9, 0x000021C1 ),               /* 'S' */
  EW_GLYPH( 0x0054, 1, -9, 7, 9, 9, 0x000022DD ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 7, 9, 9, 0x00002350 ),               /* 'U' */
  EW_GLYPH( 0x0056, 0, -9, 9, 9, 9, 0x000023D9 ),               /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 13, 9, 13, 0x000024C8 ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 9, 9, 9, 0x00002637 ),               /* 'X' */
  EW_GLYPH( 0x0059, 1, -9, 7, 9, 9, 0x0000274F ),               /* 'Y' */
  EW_GLYPH( 0x005A, 1, -9, 7, 9, 9, 0x000027F2 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 2, -10, 3, 12, 6, 0x000028CD ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 6, 12, 6, 0x0000290D ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 3, 12, 6, 0x000029A8 ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 9, 5, 11, 0x000029E8 ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 8, 1, 8, 0x00002A82 ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 3, 2, 8, 0x00002AAA ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -7, 6, 7, 8, 0x00002AC8 ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 6, 10, 8, 0x00002B73 ),             /* 'b' */
  EW_GLYPH( 0x0063, 1, -7, 6, 7, 8, 0x00002C12 ),               /* 'c' */
  EW_GLYPH( 0x0064, 1, -10, 6, 10, 8, 0x00002CB5 ),             /* 'd' */
  EW_GLYPH( 0x0065, 1, -7, 6, 7, 8, 0x00002D54 ),               /* 'e' */
  EW_GLYPH( 0x0066, 1, -10, 5, 10, 5, 0x00002E0A ),             /* 'f' */
  EW_GLYPH( 0x0067, 1, -7, 6, 10, 8, 0x00002E7E ),              /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 6, 10, 8, 0x00002F51 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 1, 10, 3, 0x00002FCD ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -10, 4, 13, 4, 0x00002FE3 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 6, 10, 7, 0x00003045 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 1, 10, 3, 0x000030D2 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 9, 7, 11, 0x000030E0 ),              /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 6, 7, 8, 0x00003179 ),               /* 'n' */
  EW_GLYPH( 0x006F, 1, -7, 6, 7, 8, 0x000031E3 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 6, 10, 8, 0x0000327B ),              /* 'p' */
  EW_GLYPH( 0x0071, 1, -7, 6, 10, 8, 0x0000332A ),              /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 4, 7, 5, 0x000033DD ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x0000341D ),               /* 's' */
  EW_GLYPH( 0x0074, 1, -9, 4, 9, 6, 0x000034D0 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 6, 7, 8, 0x00003524 ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 8, 7, 8, 0x0000357B ),               /* 'v' */
  EW_GLYPH( 0x0077, 1, -7, 9, 7, 11, 0x00003626 ),              /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 7, 7, 7, 0x00003725 ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -7, 8, 10, 8, 0x000037D8 ),              /* 'y' */
  EW_GLYPH( 0x007A, 1, -7, 5, 7, 7, 0x000038C9 ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 5, 12, 8, 0x0000395D ),             /* '{' */
  EW_GLYPH( 0x007C, 3, -10, 1, 12, 7, 0x000039FE ),             /* '|' */
  EW_GLYPH( 0x007D, 2, -10, 5, 12, 8, 0x00003A0E ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -6, 8, 3, 11, 0x00003AAF ),              /* '~' */

  EW_FONT_PIXEL( ApplicationFontVerdana16, 0x00003B14 )         /* ratio 76.80 % */
    0xEF7BDEF7, 0xF7BAF7BD, 0x05EF7BDE, 0x00000000, 0x00000000, 0x7BDEF7B8, 0x7E2975EF,
    0xB18775D7, 0x5FC410AC, 0x8AA551FE, 0xCEFBCDFB, 0x79B9E6EB, 0xE11910AE, 0x71FFBC9E,
    0xE7DEF9DD, 0x82A954BB, 0x9DFC600B, 0xECE39EFD, 0x6F560633, 0xBFBAF30F, 0x37DF7C32,
    0xEBDCF583, 0xF8F7BF7F, 0x7D8C01BF, 0xDC7E60F7, 0xEFC57DBE, 0x7C3528C7, 0x8D4A306F,
    0x6FB70A27, 0x77D9EFBF, 0xBEEFB18F, 0xE2FB7DDD, 0x0D4A3519, 0x528D7DE2, 0xFB735F83,
    0xFEFB1DF6, 0xF7DF4E0B, 0xA12A5183, 0xB83F3D56, 0xDE59FFFF, 0xFFBDFDE5, 0x308CB99D,
    0x8353FDEF, 0xF3DEF829, 0xC6FC7F8F, 0x3CB50B1D, 0xCCFF4567, 0x731FEC27, 0xC1CC4890,
    0x109F31FE, 0x6B39E3FD, 0xFC3CEB15, 0xF933C43A, 0x2244C66D, 0x16DF9319, 0x58EBF4CF,
    0x7BE5C1E7, 0x7CFEDF3C, 0xFDBE7F7B, 0x170F9E3D, 0xD7BDC000, 0xEBDEF7BD, 0xF8000BDE,
    0x59F31CCF, 0x7BDEE7F6, 0x001605EF, 0xCC0409AC, 0xF3C24407, 0xFD427F80, 0x3F501EC0,
    0xE7D007B0, 0xB273967C, 0x655F1F7F, 0x01101992, 0xEFE64991, 0xE715ABE3, 0xEE1C6BE4,
    0x0005EE0E, 0xDD7B8000, 0xF9CEFCFB, 0xFCE7DBE2, 0xD558B5BF, 0x2E750318, 0x5543BF73,
    0xC22FF797, 0x6E73FF9C, 0x717CE7BD, 0xF7F673BE, 0x1541660D, 0xF71F7EF7, 0xF3E60FF6,
    0x3EED660D, 0x2E787EE7, 0x17BC868C, 0xEFC49EF1, 0xF7FE784D, 0x7BDEF7BA, 0xB8000BDD,
    0xBDCBDEF7, 0xF70002F7, 0xE7BDD2FC, 0x37E6607F, 0x3DF6EA78, 0x73BF27FB, 0x78E739C4,
    0xCFB3C2DF, 0xCFFE45F9, 0x3D629FD9, 0x86F7E023, 0xECF72E67, 0x7BDEF7BE, 0x1777BDEF,
    0x8591177C, 0x983F6079, 0xD44FF87F, 0xFCE77E46, 0xFE73ECF2, 0xDF332727, 0xD9F398F5,
    0xBEF7FFFF, 0xABEFFFDD, 0xAC9AACC1, 0xFCE7DBE7, 0x5A73DE7F, 0xCD6373EF, 0x620FF447,
    0x3BE50F3C, 0x7E33FCE7, 0x8C1FFCE7, 0x27D39D7E, 0x82E5CBAE, 0x399FF00B, 0x0FECB3E6,
    0x25DF9090, 0xF9FFBBBF, 0xFE9FFDDD, 0x9FF13FF3, 0xEEFC89FF, 0x77E44FFE, 0xBBF21FF7,
    0xEF7BDEF7, 0x7BDEF7BD, 0x7BDEE02F, 0xDC09BDEF, 0xEFBFE12F, 0x7DFF9897, 0xCFFCC4BF,
    0xFE7FE63F, 0x5FBEFFCD, 0x92FDF7FE, 0x7DCC25FB, 0xEFFEE37F, 0x02786FB9, 0x418D61CF,
    0x00B85C4F, 0xFCF7FFB2, 0xBEEF750A, 0xEF94F6E7, 0xFBFBBF5D, 0xFBF1BFFD, 0x8AFBDF65,
    0x79E5ADF7, 0x2432B524, 0x2010CC88, 0x1E5A96A2, 0xB2FDFA9E, 0xFEF3277F, 0x73ADF64E,
    0xF2DEFFD6, 0xFDEF7BDC, 0x58027103, 0xFBFF80B1, 0xF84A6907, 0xD41FFEFE, 0xB8D41F34,
    0x7E7166F7, 0x11DFDEF7, 0x7B8AA855, 0xF7B8BFEF, 0x3C06A17D, 0x08DFBDC5, 0xC1FDDEF7,
    0xBDCAB053, 0xEFC9FFE7, 0x7BCCDF9C, 0xFBFDE9CF, 0x16AF8C3D, 0xA01100C8, 0xC3DFE816,
    0x73DCF2F8, 0xFBDEFFEF, 0xEF7B837F, 0x5F9C81DD, 0x12205983, 0xC8598244, 0xEF7BB5F5,
    0xBDEF71D9, 0xDEF7BAF7, 0xBDEE000B, 0xDEF7BAF7, 0xBDEE000B, 0xEF7BDEF7, 0xF7BDEEBD,
    0xEF7B8002, 0x017BDEE5, 0x73BF2000, 0x9EF799BE, 0xF7FBFEF3, 0x40B57E30, 0xDEE08804,
    0xF57B8B5B, 0xB9E521EF, 0xC1759EE7, 0xEE000005, 0xEF72F7BD, 0x000017BD, 0x175EF7B8,
    0x72EB8000, 0x005EE5EF, 0xEB300000, 0x2F7ECF7F, 0xCD39E356, 0x7EF12FB8, 0xFF786FF8,
    0x81D7CF03, 0x79C60FE8, 0x0000002F, 0xBDC00000, 0xC1BBDEF7, 0x0541E2BE, 0x98FF46BF,
    0xDF898AA6, 0xFA60FF4F, 0xF3DF8262, 0xC04F6603, 0x35C2FB82, 0xB906E806, 0x805F5827,
    0x0CF3C1B7, 0x93182F70, 0x37E73BF1, 0x9CE739E4, 0x787BFD93, 0x560B5D7E, 0x04444045,
    0x5582D444, 0x7E787BFD, 0x739CE79D, 0xCF7BDE4E, 0x7CF7BDCB, 0x90105588, 0x6AF7BA73,
    0x0017FEF7, 0xFCE77E30, 0x9CE73C86, 0x0F7FB273, 0xC16BAFCF, 0x888808AA, 0xB05AC880,
    0xCF0F7FAA, 0x9CE797EF, 0xFC69BDFB, 0xF405CDCE, 0xCF7BDCFF, 0xFCF7B817, 0x1015603F,
    0xDC5FA209, 0xDEE14E7B, 0xCE300DFD, 0x3BEE3029, 0xDFFEFFF5, 0xEFFFFBE7, 0x21E79FFE,
    0x047357EA, 0x79CF73BE, 0x7DDF7A33, 0xDFCAE40E, 0xECEB3C13, 0xF7FFFF7D, 0xBDEF7BDE,
    0x5EF75EF7, 0x00000000, 0x5C170000, 0x00000000, 0xFDF22064, 0xB5BDF885, 0xE6B7DDF7,
    0x2B39DE0B, 0x133D3510, 0xE1FDE1F3, 0xD4B312F7, 0x79C7BC0C, 0x0731CC61, 0x4C07CEF8,
    0x0B0BCF13, 0xF90AA7DE, 0x2662AA26, 0x0CC47F5F, 0x5166317B, 0xED9EDA9B, 0x918BFD37,
    0x19F3C7DE, 0xA948F903, 0x87EFF602, 0xE2A1BBDF, 0xF58B93C1, 0x62B5BF03, 0xFDF2C661,
    0x387FFC86, 0xFE42FBD7, 0xF7213B7E, 0xAFBC276F, 0xA7FBE0F7, 0x262B3EFC, 0x83DFAC66,
    0x5F17EBF9, 0xD0D6A50F, 0x2D6A6DD7, 0x650DDD03, 0x7BDC0000, 0xDEF7BDEF, 0xA0BBEF7B,
    0x87EF2376, 0xDEF83F78, 0xBE89D7C0, 0xEF77D603, 0xEBDEF7BD, 0x0000005E, 0x1EC1B7B8,
    0x12703F50, 0xCC0403E6, 0x133C0109, 0xC15F80F2, 0x7BDEF7D8, 0xE0000001, 0x03EE785E,
    0x881EBFB2, 0x83739E7B, 0x7F461DEF, 0x6EA17FDE, 0xBDEF7BDF, 0xB313CEF7, 0x7BB9F67F,
    0x077EE7D8, 0xFFEF4666, 0x5F67BFF5, 0xEF8F1959, 0x00BA7FDC, 0xBE7D8C00, 0x6ECFFCF0,
    0x0205CC33, 0xF79541A4, 0xDF8EF19C, 0xCFA7BFB9, 0x879F7DB9, 0xF04805F1, 0xE2B7C64D,
    0x5C1FEF7F, 0xE7FEB000, 0xB4FFE567, 0x904861EF, 0xBCB11EA0, 0x9D60ECF7, 0x4E72C5F3,
    0x95E8B7F6, 0x791BDEF7, 0x9BF7BDEE, 0xDF65BF21, 0x3DDFC8F7, 0x7A8F73DE, 0xDD75EEB8,
    0x8000000B, 0x3BBF3FF5, 0x2DFB4FFD, 0xD6010486, 0xCF7D3F23, 0xF677C579, 0xFF2E9348,
    0x002FB273, 0x7BBECF00, 0x77EFFFF8, 0x00039875, 0x175EE000, 0xEE05C5C0, 0x000002E5,
    0xBEE719E0, 0x800002F7, 0x1E79E0F5, 0xA81649F2, 0x57F3181A, 0x005E77D0, 0xF599F6B7,
    0xEFEC653F, 0xB5EFFF1D, 0x0012A594, 0xEE000000, 0xFE1EEFB3, 0x1D5DFBFF, 0x000000E6,
    0xEAF39EF0, 0x67EDCE7B, 0x4C849F32, 0x9F3267C8, 0xBEDCE7BE, 0x10BE7FF3, 0x0ADBFCFB,
    0x6900816B, 0x139F4B30, 0x0B39DFAF, 0x7CE75800, 0x5E73DD77, 0x4824335F, 0xDEBE4B50,
    0xBE3F79FF, 0xE0001BF3, 0xFF2BFF3E, 0xC00002D7, 0x72F3DDF8, 0x2983DEFA, 0xBBB9EF16,
    0x3F7DDFA8, 0x7B839866, 0x702E1F6F, 0x0BDD7BDD, 0xFFD06200, 0x0002E173, 0x96298C00,
    0xF27FDDFB, 0x818D3783, 0xF31FBF4C, 0xC1FB0630, 0xEB0FF2BF, 0x11884DFF, 0x53714EC1,
    0x78A95FEE, 0xDD73DFAC, 0xA64FDB77, 0x1A6466B9, 0xF0733CAB, 0xEF7E7F7B, 0xC8C3918F,
    0x93F63721, 0x63D4F4DF, 0xAFC6FF5E, 0x87FAF83F, 0xFC9777F9, 0xCF1BF31E, 0x567CDF07,
    0x7DFA6B92, 0xE1F31F7C, 0x7CE6F899, 0x3EFBF302, 0xE2099A88, 0xBC039105, 0xF7BDEE17,
    0xC9BF7BDE, 0x1FE8AFB8, 0x37BC37BF, 0x97BDDF99, 0xF7DE5FFA, 0x9AC08592, 0xFFDCDDDC,
    0x0020B98B, 0xEFB7078C, 0x17FDC005, 0x09517DF7, 0x7FA17301, 0xBF2E7997, 0x833C0244,
    0x67DC97DB, 0xF677F4E1, 0x7E9AACCF, 0x000D7CFB
EW_END_OF_FONT_RES( ApplicationFontVerdana16 )

/* Table with links to derived variants of the font resource : 'Application::FontVerdana16' */
EW_RES_WITHOUT_VARIANTS( ApplicationFontVerdana16 )

/* Bitmap resource : 'Application::ExpandBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationExpandBitmap )
  EW_BITMAP_FRAMES( ApplicationExpandBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 5, 0, 19, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationExpandBitmap, Default )      /* ratio 29.44 % */
    0x2409F700, 0x011F7020, 0x7417087A, 0x89E6285A, 0x222F5843, 0x71416342, 0x1616451A,
    0x88CC5E2B, 0x8D47A371, 0xE4863B20, 0xC8A3F248, 0xA85AD393, 0x65A42694, 0xF330432F,
    0xA1599BA8, 0x387E0120, 0xC704D807, 0x9F8E03F3, 0xF50802C7, 0xBFE8A007, 0x1A8E00A2,
    0x2934AA45, 0xA34BA7D3, 0xB4DA953A, 0x58A9D42A, 0xFABD52AD, 0x71D7838F, 0xC0DEC2C8,
    0x42006FC9, 0xE27E0B7A, 0x8095C638, 0xE21F7DDB, 0xB7411382, 0x76115D1B, 0xCBD88EEB,
    0xBC5E6EED, 0x1DEEFD7E, 0x606EB7D1, 0x17077CBD, 0x31186C06, 0x2209BF61, 0xA17AE3DB,
    0x98723A32, 0x24EC2C37, 0xA2006846, 0x90B65546, 0x0D34ACB6, 0xCC1BA879, 0xF560CD5B,
    0xE5A8063C, 0x3B3D8835, 0xACD6EBB5, 0xCDBED369, 0xDDEA773B, 0xFEEB6FAC, 0x719C7A9D,
    0xC7924E0E, 0xB9A71AE2, 0x604F8723, 0xB04B7531, 0x361A32F4, 0x6ED40FB3, 0xEDC13B90,
    0xFF87BBE0, 0xF93CBE2E, 0xA9F536F3, 0xE6DDE02F, 0x2A10F7BB, 0x34C7405F, 0x116F7D84,
    0x1A63405F, 0xDA3803F7, 0xA0178DED, 0x67ADE979, 0x24B80D1D, 0x0C3D4478, 0x79E0302A,
    0x9EC3E9EA, 0x5845E380, 0xDA181240, 0x1C0094C2, 0x5311B3F6, 0xE0F6DD7E, 0x141A1488,
    0x581E89CE, 0x053A62A0, 0x298FA8B4, 0xA0F16630, 0x38122485, 0xCA381350, 0x4687D5C2,
    0x8D5AC885, 0xDE7895E8, 0xC0A24435, 0xF6482095, 0x428D1DE1, 0x93C4C902, 0x1158ECB3,
    0xD8017588, 0x1A3695E4, 0x2996CD64, 0x8164991C, 0x24090212, 0x48E84D8E, 0x29498F15,
    0x41966566, 0x016609B2, 0x24635E44, 0xD20A4855, 0x626E9307, 0x647AE109, 0x9A15999A,
    0x66B5F8FF, 0xB92E849B, 0xCE714D9E, 0x8C205599, 0x9EA621FA, 0x2529F66F, 0x25E25446,
    0x1E15A422, 0x5CA25E3A, 0xA3881A31, 0xE6C9E698, 0x79444C93, 0xD63D94E6, 0x7BA8A975,
    0x96E42986, 0xE74974D6, 0xCABA9997, 0x9AA483EA, 0x49AA27FA, 0x9BDA9A09, 0x41E38627,
    0x90A6B0A2, 0x1645B1E8, 0x48B2CB7B, 0xB3C70570, 0x2C5B148F, 0xCB1272B2, 0x96D836A5,
    0x08B6CF70, 0xA4E39A44, 0xE6A530D3, 0xA81D03AF, 0x70E905A2, 0xEC56EEA5, 0xBBAEB566,
    0x2F201D54, 0x3BD49C3E, 0x8265B786, 0xAB37695B, 0x2E209012, 0x8058B447, 0x056AEF3E,
    0x2706C1EF, 0x7F53305C, 0xBE080C34, 0xA805567E, 0xC4D9AF8F, 0xC00A3D60, 0x75164A68,
    0xC771D1F6, 0x7211FA9E, 0xF1C2CFC7, 0x092D5708, 0x49C7CBD1, 0xC768DC82, 0xC7CCC483,
    0xB1B33424, 0x7814CDCE, 0xA9BEAB97, 0xA863FA5A, 0x6849E004, 0xF9DA5EB1, 0xEDE3ADE8,
    0x46A52A7C, 0x901B2B8D, 0xF4483F42, 0x0D0346AC, 0x2EDF9F35, 0x7CD36E1D, 0xADA86A0D,
    0x21640E85, 0x692B54A7, 0x4A169EB5, 0xFDBEF5AA, 0x90F479BE, 0xE8DA7645, 0xA84B57DB,
    0xF74CAEF6, 0x06CFEAAA, 0x41B67D45, 0x31D56764, 0x8D2B40DD, 0xE37AD6F7, 0x48DF9B45,
    0x567539B3, 0x07C20F31, 0x60138DE1, 0xFEBCC4B8, 0x940374E3, 0xB6106D87, 0xEF2094DA,
    0x4530F801, 0x746C24F3, 0xF9D6233E, 0x349A2552, 0x37FD7AFB, 0x83DEDBA1, 0x346266C0,
    0x372007FC, 0xECF393AF, 0x39784BAB, 0xC2F72953, 0xD8096454, 0x1C38DC63, 0xF3FC0EA8,
    0xBD23E6AC, 0x9F542601, 0x6415530D, 0x864C0EAF, 0x7255C1E4, 0xDEF2C44E, 0xDE30103B,
    0x9A9AC0EA, 0xE9FAE167, 0xD83ECF9F, 0x7D285A6F, 0x61F4063E, 0x695C20BF, 0x33297FA1,
    0x578153A9, 0x6507181C, 0x24A1832C, 0xB94FA2D8, 0x730293EA, 0xE604AB94, 0x6A658168,
    0x28209420, 0xC942040B, 0x52841181, 0x3D704CF5, 0x83E018AA, 0x088690F9, 0xB093605B,
    0xF206E320, 0x14BB4FA1, 0xB585C2B6, 0x730885F0, 0x683E5261, 0x2C687C80, 0x4019640B,
    0x1988730E, 0x39A06C72, 0x7D847071, 0x0E0DE042, 0x321FA009, 0x610C6164, 0x6626C4A8,
    0xD0EA02AF, 0x214A169F, 0x20B46942, 0xA2C8FD87, 0x00020200, 0x00000000

  EW_BITMAPS_TABLE( ApplicationExpandBitmap )
    EW_BITMAP( ApplicationExpandBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationExpandBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::ExpandBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationExpandBitmap )

/* Bitmap resource : 'Application::CollapseBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationCollapseBitmap )
  EW_BITMAP_FRAMES( ApplicationCollapseBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 5, 0, 19, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationCollapseBitmap, Default )    /* ratio 29.44 % */
    0x2409F700, 0x011F7020, 0x7417087A, 0x89E6285A, 0x222F5843, 0x71416342, 0x1616451A,
    0x88CC5E2B, 0x8D47A371, 0xE4863B20, 0xC8A3F248, 0xA85AD393, 0x65A42694, 0xF330432F,
    0xA1599BA8, 0x387E0120, 0xC704D807, 0x9F8E03F3, 0xF50802C7, 0xBFE8A007, 0x1A8E00A2,
    0x2934AA45, 0xA34BA7D3, 0xB4DA953A, 0x58A9D42A, 0xFABD52AD, 0x71D7838F, 0xC0DEC2C8,
    0x42006FC9, 0xE27E0B7A, 0x8095C638, 0xE21F7DDB, 0xB7411382, 0x76115D1B, 0xCBD88EEB,
    0xBC5E6EED, 0x1DEEFD7E, 0x606EB7D1, 0x17077CBD, 0x31186C06, 0x2209BF61, 0xA17AE3DB,
    0x98723A32, 0x24EC2C37, 0xA2006846, 0x90B65546, 0x0D34ACB6, 0xCC1BA879, 0xF560CD5B,
    0xE5A8063C, 0x3B3D8835, 0xACD6EBB5, 0xCDBED369, 0xDDEA773B, 0xFEEB6FAC, 0x719C7A9D,
    0xC7924E0E, 0xB9A71AE2, 0x604F8723, 0xB04B7531, 0x361A32F4, 0x6ED40FB3, 0x9CCDFB90,
    0xEF840764, 0xF9005E47, 0x8FC2027E, 0x805E7F2F, 0x0BF07D77, 0xAEF9B778, 0x17CA843E,
    0xC10D31D0, 0x17C45BDF, 0xD71530D0, 0x36D0E007, 0x760876DF, 0x03412097, 0x5260E3FD,
    0x94783A0F, 0x184E1084, 0xD94785E1, 0xF23E9F04, 0x7C5EF82D, 0x0B688449, 0xD8940253,
    0xF94C46CF, 0x0A81DB75, 0x8BA0C8B6, 0x232851E1, 0x38D61586, 0x761B51E3, 0x2F8B22E8,
    0x8FC4D012, 0xA28570B2, 0xC6B22A51, 0xC50391E3, 0x368DE348, 0x9220F92E, 0xC4C82E3B,
    0x5908B394, 0x19758A51, 0x5196E1E8, 0x85A4A41A, 0x26193660, 0xE8F65093, 0x044D8FDD,
    0x4990D549, 0x9765A629, 0x5DF97266, 0xE9D64C59, 0x7E659864, 0x6A9A21C8, 0x3FE6C566,
    0x2719BD7E, 0x39DA3C9C, 0xE6359DE6, 0x7C8E60B9, 0x9611895A, 0x2728AD78, 0x297E398F,
    0x0286A5E6, 0x539C28A0, 0x9AE55132, 0x97591257, 0x1A2E84A4, 0x66964D9F, 0x9393EAAA,
    0xA7506AB6, 0x6A19FA9F, 0xA6A68152, 0xE4E17C61, 0xBC35C1EA, 0xAFCD60A2, 0x0D7AF029,
    0x80A2C20A, 0x6827B1CD, 0xCA096CA3, 0xB2ECC36A, 0x6CEB3ECD, 0x5B46D1B1, 0x5ABFB16C,
    0xF7B44293, 0xADC08B74, 0xE8E9027B, 0x69B94C34, 0xD1D640EB, 0xE9BAC160, 0x56EEE570,
    0xAEF566F0, 0x601D54BC, 0xE49C3E2F, 0x05B8063B, 0xA3EA0A34, 0xE46A46A2, 0x7C14B840,
    0xEB080144, 0xF456AF33, 0xC3F0CC36, 0xC7F5330B, 0xEBF080C4, 0xD300ACAF, 0x06C0EA3A,
    0x02B1E3D5, 0x859C84A6, 0x41F72420, 0x972620B2, 0x7ECAC81C, 0x1F881CAC, 0xC8B1F727,
    0x620C74CC, 0x0F361F33, 0x2ECC47C2, 0xCEF391FB, 0xF31CB32A, 0xCD1493CF, 0x53483AC6,
    0xE3AC1DE0, 0xA90DDA42, 0x639D4683, 0x482E6499, 0xDB51A6E1, 0xE4BFF4C4, 0x6CAE651A,
    0x6AED4E65, 0x39E2AB8F, 0x5DF1A536, 0x5F9FD55C, 0x87368037, 0x2A97C761, 0x2D9F57A2,
    0x72E2A327, 0xFCD434ED, 0x4E6A8D62, 0x376A2765, 0xD9A7789C, 0x734FC074, 0xA5D8804C,
    0x00E73E36, 0x78EDD781, 0xDC635B99, 0xD178C6B5, 0x83D678C6, 0x8D374D93, 0xF959CB7E,
    0xD3FEB3DA, 0x3793E876, 0xA9D9B9F8, 0xDE769E13, 0x8D268959, 0x1EA282D3, 0xE4F07875,
    0xE1AE40FE, 0xDC7B6078, 0x54CE8E1C, 0xC2F4424B, 0xD8096454, 0x1C38DC63, 0xF3B9DEFC,
    0xCF9013AD, 0x609806F4, 0x554C367D, 0x303ABDA0, 0x57079219, 0x4B1139C9, 0xB040EF7D,
    0x9C059EB9, 0xEC8E503F, 0x872A6A9F, 0x7EFDC3ED, 0x9F4DF1FA, 0xE47D018F, 0x5A57082F,
    0x4CCA5FF4, 0x5780A8EA, 0xCA0E3038, 0x49442658, 0x609F05B0, 0x0206A7C5, 0x040C5609,
    0x04D30392, 0x504D2A41, 0x52A40B16, 0x25482904, 0x7B0099EB, 0x08803154, 0x128D21F3,
    0x6126C0B6, 0xF00DC641, 0x41789FA3, 0x831185CC, 0x161D0CA1, 0xD088A4C3, 0x9908F900,
    0x1EA0B229, 0x3304E4F0, 0x7340D8E4, 0xFE08E0E2, 0x251BC084, 0x5F0D4F32, 0x3219C348,
    0xABDA89F1, 0xA7FA3A80, 0x50945285, 0x0F582D1A, 0x0002027A, 0x00000000

  EW_BITMAPS_TABLE( ApplicationCollapseBitmap )
    EW_BITMAP( ApplicationCollapseBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationCollapseBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::CollapseBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationCollapseBitmap )

/* Initializer for the class 'Application::FlatCheckBox' */
void ApplicationFlatCheckBox__Init( ApplicationFlatCheckBox _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  FlatCheckBox__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationFlatCheckBox );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const008D );
  CoreQuadView__OnSetPoint4( &_this->Super1.TouchHandler, _Const008E );
  CoreQuadView__OnSetPoint3( &_this->Super1.TouchHandler, _Const008F );
  CoreQuadView__OnSetPoint2( &_this->Super1.TouchHandler, _Const0090 );
  CoreRectView__OnSetBounds( &_this->Super1.BoxImage, _Const0091 );
  CoreRectView__OnSetBounds( &_this->Super1.CheckImage, _Const0092 );
  CoreRectView__OnSetBounds( &_this->Super1.CaptionText, _Const0093 );
  ViewsText_OnSetFont( &_this->Super1.CaptionText, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::FlatCheckBox' */
void ApplicationFlatCheckBox__ReInit( ApplicationFlatCheckBox _this )
{
  /* At first re-initialize the super class ... */
  FlatCheckBox__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::FlatCheckBox' */
void ApplicationFlatCheckBox__Done( ApplicationFlatCheckBox _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationFlatCheckBox );

  /* Don't forget to deinitialize the super class ... */
  FlatCheckBox__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::FlatCheckBox' */
void ApplicationFlatCheckBox__Mark( ApplicationFlatCheckBox _this )
{
  /* Give the super class a chance to mark its objects and references */
  FlatCheckBox__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationFlatCheckBox_UpdateLayout( ApplicationFlatCheckBox _this, XPoint 
  aSize )
{
  FlatCheckBox_UpdateLayout((FlatCheckBox)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationFlatCheckBox_UpdateViewState( ApplicationFlatCheckBox _this, XSet 
  aState )
{
  FlatCheckBox_UpdateViewState((FlatCheckBox)_this, aState );
}

/* Variants derived from the class : 'Application::FlatCheckBox' */
EW_DEFINE_CLASS_VARIANTS( ApplicationFlatCheckBox )
EW_END_OF_CLASS_VARIANTS( ApplicationFlatCheckBox )

/* Virtual Method Table (VMT) for the class : 'Application::FlatCheckBox' */
EW_DEFINE_CLASS( ApplicationFlatCheckBox, FlatCheckBox, "Application::FlatCheckBox" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationFlatCheckBox_UpdateLayout,
  ApplicationFlatCheckBox_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationFlatCheckBox )

/* Initializer for the class 'Application::DeviceItem' */
void ApplicationDeviceItem__Init( ApplicationDeviceItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationFlatCheckBox__Init( &_this->FlatCheckBox0, &_this->_XObject, 0 );
  ViewsText__Init( &_this->UnitNumberText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDeviceItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0094 );
  CoreView_OnSetLayout((CoreView)&_this->FlatCheckBox0, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FlatCheckBox0, _Const0095 );
  FlatCheckBox_OnSetCaption((FlatCheckBox)&_this->FlatCheckBox0, 0 );
  CoreRectView__OnSetBounds( &_this->UnitNumberText, _Const0096 );
  ViewsText_OnSetAlignment( &_this->UnitNumberText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->UnitNumberText, EwLoadString( &_Const006C ));
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0097 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0098 ));
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0099 );
  ViewsImage_OnSetScrollOffset( &_this->Image, _Const0054 );
  CoreGroup__Add( _this, ((CoreView)&_this->FlatCheckBox0 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitNumberText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  _this->FlatCheckBox0.Super1.OnChange = EwNewSlot( _this, ApplicationDeviceItem_OnChangeSlot 
  );
  ViewsText_OnSetFont( &_this->UnitNumberText, EwLoadResource( &ApplicationFontVerdanaProSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationFireAlarmBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'Application::DeviceItem' */
void ApplicationDeviceItem__ReInit( ApplicationDeviceItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationFlatCheckBox__ReInit( &_this->FlatCheckBox0 );
  ViewsText__ReInit( &_this->UnitNumberText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'Application::DeviceItem' */
void ApplicationDeviceItem__Done( ApplicationDeviceItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDeviceItem );

  /* Finalize all embedded objects */
  ApplicationFlatCheckBox__Done( &_this->FlatCheckBox0 );
  ViewsText__Done( &_this->UnitNumberText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DeviceItem' */
void ApplicationDeviceItem__Mark( ApplicationDeviceItem _this )
{
  EwMarkObject( &_this->FlatCheckBox0 );
  EwMarkObject( &_this->UnitNumberText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDeviceItem_UpdateLayout( ApplicationDeviceItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDeviceItem_UpdateViewState( ApplicationDeviceItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->UnitNumberText, EwConcatString( EwLoadString( &_Const009A 
  ), EwNewStringInt( _this->UnitNum, 0, 10 )));
}

/* 'C' function for method : 'Application::DeviceItem.OnChangeSlot()' */
void ApplicationDeviceItem_OnChangeSlot( ApplicationDeviceItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* Variants derived from the class : 'Application::DeviceItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDeviceItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDeviceItem )

/* Virtual Method Table (VMT) for the class : 'Application::DeviceItem' */
EW_DEFINE_CLASS( ApplicationDeviceItem, CoreGroup, "Application::DeviceItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDeviceItem_UpdateLayout,
  ApplicationDeviceItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDeviceItem )

/* Initializer for the class 'Application::Alarms' */
void ApplicationAlarms__Init( ApplicationAlarms _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NoActiveAlarmsText, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ResoundAlarmsButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationAlarms );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const009B );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const009C );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 11 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationAlarmRowItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009D );
  CoreSlideTouchHandler_OnSetSnapLast( &_this->SlideTouchHandler, _Const009E );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->SlideTouchHandler, _Const009E );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 1 );
  CoreRectView__OnSetBounds( &_this->NoActiveAlarmsText, _Const009F );
  ViewsText_OnSetAlignment( &_this->NoActiveAlarmsText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NoActiveAlarmsText, EwLoadString( &_Const00A0 ));
  ViewsText_OnSetColor( &_this->NoActiveAlarmsText, _Const0018 );
  ViewsText_OnSetVisible( &_this->NoActiveAlarmsText, 0 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A1 );
  CoreRectView__OnSetBounds( &_this->ResoundAlarmsButton, _Const00A2 );
  WidgetSetPushButton_OnSetLabel( &_this->ResoundAlarmsButton, EwLoadString( &_Const00A3 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NoActiveAlarmsText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ResoundAlarmsButton ), 0 );
  _this->VerticalList.OnUpdate = EwNewSlot( _this, ApplicationAlarms_OnScroll );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationAlarms_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  ViewsText_OnSetFont( &_this->NoActiveAlarmsText, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationAlarms_PressScroll 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->ResoundAlarmsButton.OnRelease = EwNewSlot( _this, ApplicationAlarms_ResoundSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->ResoundAlarmsButton, EwGetAutoObject( 
  &ApplicationNormalPushButton, WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::Alarms' */
void ApplicationAlarms__ReInit( ApplicationAlarms _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ViewsText__ReInit( &_this->NoActiveAlarmsText );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  WidgetSetPushButton__ReInit( &_this->ResoundAlarmsButton );
}

/* Finalizer method for the class 'Application::Alarms' */
void ApplicationAlarms__Done( ApplicationAlarms _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationAlarms );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ViewsText__Done( &_this->NoActiveAlarmsText );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  WidgetSetPushButton__Done( &_this->ResoundAlarmsButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Alarms' */
void ApplicationAlarms__Mark( ApplicationAlarms _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->NoActiveAlarmsText );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->ResoundAlarmsButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationAlarms_UpdateLayout( ApplicationAlarms _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationAlarms_UpdateViewState( ApplicationAlarms _this, XSet aState )
{
  XInt32 fires;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  fires = 7;
  {
    Command cmd;

    Command0( CMD_GET_NUM_FIRES, &cmd );  

    fires = cmd.int0;
  }

  if ( fires == 0 )
  {
    ViewsText_OnSetVisible( &_this->NoActiveAlarmsText, 1 );
    CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 0 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->VertScrollbar, 0 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 0 );
  }
  else
  {
    ViewsText_OnSetVisible( &_this->NoActiveAlarmsText, 0 );
    CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 1 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->VertScrollbar, 1 );
    CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, fires );
    CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, fires - 1 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ResoundAlarmsButton, 1 );
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationAlarms_OnLoadItem( ApplicationAlarms _this, XObject sender )
{
  XInt16 itemNo;
  ApplicationAlarmRowItem row;
  XInt16 order;
  XInt16 type;
  XString location;
  XString time;
  XInt16 zone;
  XInt16 yunit;
  XInt16 fires;
  XInt32 lastchan;
  XInt32 lastdev;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->VerticalList.Item;
  row = EwCastObject( _this->VerticalList.View, ApplicationAlarmRowItem );

  if ( itemNo == 0 )
  {
    row->Flashing = 1;
  }
  else
  {
    row->Flashing = 0;
  }

  order = itemNo;
  type = (XInt16)( 1 + ( itemNo % 7 ));
  location = EwLoadString( &_Const00A4 );
  time = 0;
  zone = 0;
  yunit = 0;
  fires = 0;
  lastchan = 0;
  lastdev = 0;
  {
    Command cmd;

    Command0( CMD_GET_NUM_FIRES, &cmd );  

    fires = cmd.int0;

    if ( fires != 0 )
    {
      if ( itemNo == 0 )
      {
         cmd.int0 = 0;
         Command0( CMD_GET_LAST_DETAILS, &cmd );
         order = fires;
      }
      else
      {
        int n;

        cmd.int0 = lastdev;
        cmd.int1 = lastchan;

        for( n = 0; n < itemNo; n++ )
        { 
          Command0( CMD_GET_FIRE_DETAILS, &cmd );
        }
        order = itemNo;
      }

      Device* d = (Device*) cmd.int0;

      location = EwNewStringAnsi( (char*) d->config->location );

      time     = EwNewStringAnsi( (char*) cmd.int2 );
      zone  =  d->config->zone;
      yunit =  d->config->unit;
      type =   d->config->input[ cmd.int1 ].type;
     }
  }
  ApplicationAlarmRowItem_OnSetOrderPosition( row, order );
  ViewsImage_OnSetBitmap( &row->Image, ApplicationLibClass_TypeBitmap( EwGetAutoObject( 
  &ApplicationLib, ApplicationLibClass ), (XEnum)type ));
  ViewsText_OnSetString( &row->Text, location );
  ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const00A5 ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const00A6 
  )), EwNewStringInt( yunit, 0, 10 )));
  ViewsText_OnSetString( &row->TimeText, time );
  CoreRectView__OnSetBounds( row, EwSetRectW( row->Super2.Bounds, EwGetRectW( _this->VerticalList.Super2.Bounds 
  )));
}

/* 'C' function for method : 'Application::Alarms.OnScroll()' */
void ApplicationAlarms_OnScroll( ApplicationAlarms _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Alarms.PressScroll()' */
void ApplicationAlarms_PressScroll( ApplicationAlarms _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
}

/* 'C' function for method : 'Application::Alarms.ResoundSlot()' */
void ApplicationAlarms_ResoundSlot( ApplicationAlarms _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_RESOUND_ALARMS, &cmd );
  }
}

/* Variants derived from the class : 'Application::Alarms' */
EW_DEFINE_CLASS_VARIANTS( ApplicationAlarms )
EW_END_OF_CLASS_VARIANTS( ApplicationAlarms )

/* Virtual Method Table (VMT) for the class : 'Application::Alarms' */
EW_DEFINE_CLASS( ApplicationAlarms, CoreGroup, "Application::Alarms" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationAlarms_UpdateLayout,
  ApplicationAlarms_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationAlarms )

/* Initializer for the class 'Application::Events' */
void ApplicationEvents__Init( ApplicationEvents _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationEvents );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A7 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const009C );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationEventItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  _this->VerticalList.OnUpdate = EwNewSlot( _this, ApplicationEvents_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationEvents_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationEvents_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, ApplicationEvents_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->EventListChangedEvent );
}

/* Re-Initializer for the class 'Application::Events' */
void ApplicationEvents__ReInit( ApplicationEvents _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
}

/* Finalizer method for the class 'Application::Events' */
void ApplicationEvents__Done( ApplicationEvents _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationEvents );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Events' */
void ApplicationEvents__Mark( ApplicationEvents _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->SystemEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationEvents_UpdateLayout( ApplicationEvents _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationEvents_UpdateViewState( ApplicationEvents _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Events.ScrollDragSlot()' */
void ApplicationEvents_ScrollDragSlot( ApplicationEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Events.ScrollPressSlot()' */
void ApplicationEvents_ScrollPressSlot( ApplicationEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationEvents_OnLoadItem( ApplicationEvents _this, XObject sender )
{
  XInt16 itemNo;
  ApplicationEventItem row;
  XInt16 order;
  XInt16 type;
  XString location;
  XString time;
  XInt16 zone;
  XInt16 yunit;
  XInt16 fires;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->VerticalList.Item;
  row = EwCastObject( _this->VerticalList.View, ApplicationEventItem );

  if ( itemNo == 0 )
  {
    row->Flashing = 1;
  }
  else
  {
    row->Flashing = 0;
  }

  order = (XInt16)( itemNo + 1 );
  type = 0;
  location = EwLoadString( &_Const00A4 );
  time = 0;
  zone = 0;
  yunit = 0;
  fires = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_OTHER_EVENTS, &cmd );  

    fires = cmd.int0;

    if ( fires != 0 )
    {
      if ( itemNo == 0 )
      {
        cmd.int0 = fires - 1;
      }
      else
      {
        cmd.int0 = itemNo - 1;
      }

      order = cmd.int0 + 1;

      Command0( CMD_GET_OTHER_EVENTS_DETAILS, &cmd );

      location = EwNewStringAnsi( (char*) cmd.int0 );
      time = EwNewStringAnsi( (char*) cmd.int3);
      zone  = cmd.short2;
      yunit = cmd.short3;
      type = cmd.short4;
     }
  }
  ApplicationEventItem_OnSetOrderPosition( row, order );

  if ( type == 1 )
  {
    ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &ApplicationGreenCallpointBitmap, 
    ResourcesBitmap ));
  }
  else
    if ( type == 4 )
    {
      ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &ApplicationPIRBitmap, 
      ResourcesBitmap ));
    }
    else
      if ( type == 3 )
      {
        ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &ApplicationEvacEvent, 
        ResourcesBitmap ));
      }

  ViewsText_OnSetString( &row->Text, location );
  ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const00A5 ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const00A6 
  )), EwNewStringInt( yunit, 0, 10 )));
  ViewsText_OnSetString( &row->TimeText, time );
  CoreRectView__OnSetBounds( row, EwSetRectW( row->Super2.Bounds, EwGetRectW( _this->VerticalList.Super2.Bounds 
  )));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationEvents_onEvent( ApplicationEvents _this, XObject sender )
{
  XInt32 numItems;
  ApplicationApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );

    numItems = cmd.int0;
  }
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numItems );
  ap = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( ap != 0 )
  {
    ap->EventsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->EventsTabButton );

    if (((( ap->AlarmsTabButton.NumberOf == 0 ) || ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const001A )) != 0 )) && (( ap->FaultsTabButton.NumberOf 
        == 0 ) || ( EwCompString( ap->SelectedTab, EwLoadString( &_Const0021 )) 
        != 0 ))) && (( EwCompString( ap->SelectedTab, EwLoadString( &_Const0027 
        )) != 0 ) && ( numItems != 0 )))
    {
      EwPostSignal( EwNewSlot( &ap->EventsTabButton, ApplicationTabButton_OnPress 
        ), ((XObject)_this ));
    }
    else
      if (( numItems > 0 ) && ( EwCompString( ap->SelectedTab, EwLoadString( &_Const0027 
          )) != 0 ))
      {
        CoreTimer_OnSetEnabled( &ap->EventsTabButton.Timer, 1 );
      }
      else
      {
        CoreTimer_OnSetEnabled( &ap->EventsTabButton.Timer, 0 );
        ViewsImage_OnSetVisible( &ap->EventsTabButton.Image, 1 );
      }
  }

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numItems - 1 );
}

/* Variants derived from the class : 'Application::Events' */
EW_DEFINE_CLASS_VARIANTS( ApplicationEvents )
EW_END_OF_CLASS_VARIANTS( ApplicationEvents )

/* Virtual Method Table (VMT) for the class : 'Application::Events' */
EW_DEFINE_CLASS( ApplicationEvents, CoreGroup, "Application::Events" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationEvents_UpdateLayout,
  ApplicationEvents_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationEvents )

/* Font resource : 'Application::VerdanaProSemiBold16' */
EW_DEFINE_FONT_RES( ApplicationVerdanaProSemiBold16, 13, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -10, 11, 10, 13, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x000000E0 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -9, 3, 9, 5, 0x000000E0 ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 5, 4, 7, 0x00000146 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 9, 9, 11, 0x00000199 ),              /* '#' */
  EW_GLYPH( 0x0024, 0, -9, 8, 11, 9, 0x000002ED ),              /* '$' */
  EW_GLYPH( 0x0025, 0, -9, 15, 9, 15, 0x00000461 ),             /* '%' */
  EW_GLYPH( 0x0026, 0, -9, 11, 9, 11, 0x00000644 ),             /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 2, 4, 4, 0x000007C0 ),              /* ''' */
  EW_GLYPH( 0x0028, 0, -10, 6, 13, 7, 0x000007E8 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 5, 13, 7, 0x000008B9 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -10, 7, 6, 9, 0x00000973 ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -9, 9, 9, 11, 0x00000A12 ),              /* '+' */
  EW_GLYPH( 0x002C, 0, -2, 4, 4, 5, 0x00000AEA ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -5, 6, 2, 6, 0x00000B2C ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 3, 3, 5, 0x00000B63 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 7, 12, 7, 0x00000B82 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -9, 8, 9, 9, 0x00000C62 ),               /* '0' */
  EW_GLYPH( 0x0031, 1, -9, 7, 9, 9, 0x00000D65 ),               /* '1' */
  EW_GLYPH( 0x0032, 0, -9, 8, 9, 9, 0x00000E05 ),               /* '2' */
  EW_GLYPH( 0x0033, 0, -9, 8, 9, 9, 0x00000F14 ),               /* '3' */
  EW_GLYPH( 0x0034, 0, -9, 9, 9, 9, 0x00001033 ),               /* '4' */
  EW_GLYPH( 0x0035, 0, -9, 8, 9, 9, 0x00001122 ),               /* '5' */
  EW_GLYPH( 0x0036, 0, -9, 8, 9, 9, 0x0000123E ),               /* '6' */
  EW_GLYPH( 0x0037, 0, -9, 8, 9, 9, 0x00001367 ),               /* '7' */
  EW_GLYPH( 0x0038, 0, -9, 8, 9, 9, 0x00001454 ),               /* '8' */
  EW_GLYPH( 0x0039, 0, -9, 8, 9, 9, 0x000015A5 ),               /* '9' */
  EW_GLYPH( 0x003A, 1, -7, 3, 7, 6, 0x000016CC ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -7, 4, 9, 6, 0x00001715 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 9, 8, 11, 0x0000178C ),              /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 9, 4, 11, 0x00001891 ),              /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 9, 8, 11, 0x00001931 ),              /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 6, 9, 8, 0x00001A3A ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 11, 10, 13, 0x00001B09 ),            /* '@' */
  EW_GLYPH( 0x0041, 0, -9, 10, 9, 10, 0x00001CDB ),             /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 8, 9, 9, 0x00001E0A ),               /* 'B' */
  EW_GLYPH( 0x0043, 0, -9, 9, 9, 9, 0x00001F05 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 9, 9, 11, 0x0000202E ),              /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 7, 9, 9, 0x0000212D ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 7, 9, 8, 0x00002226 ),               /* 'F' */
  EW_GLYPH( 0x0047, 0, -9, 10, 9, 11, 0x000022DF ),             /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 8, 9, 10, 0x00002443 ),              /* 'H' */
  EW_GLYPH( 0x0049, 0, -9, 6, 9, 7, 0x000024EF ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 6, 9, 7, 0x00002588 ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 9, 9, 10, 0x00002615 ),              /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 7, 9, 8, 0x00002709 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 10, 9, 12, 0x00002784 ),             /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 9, 9, 10, 0x00002879 ),              /* 'N' */
  EW_GLYPH( 0x004F, 0, -9, 11, 9, 11, 0x00002934 ),             /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 8, 9, 9, 0x00002A95 ),               /* 'P' */
  EW_GLYPH( 0x0051, 0, -9, 11, 12, 11, 0x00002B6E ),            /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 9, 9, 10, 0x00002D2B ),              /* 'R' */
  EW_GLYPH( 0x0053, 0, -9, 9, 9, 9, 0x00002E33 ),               /* 'S' */
  EW_GLYPH( 0x0054, 0, -9, 9, 9, 9, 0x00002FAA ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 8, 9, 10, 0x00003063 ),              /* 'U' */
  EW_GLYPH( 0x0056, 0, -9, 10, 9, 9, 0x0000310F ),              /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 14, 9, 14, 0x0000321F ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 10, 9, 9, 0x000033BC ),              /* 'X' */
  EW_GLYPH( 0x0059, 0, -9, 9, 9, 9, 0x000034F4 ),               /* 'Y' */
  EW_GLYPH( 0x005A, 0, -9, 9, 9, 9, 0x000035D5 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 1, -10, 5, 12, 7, 0x000036F8 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 7, 12, 7, 0x0000377D ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 4, 12, 7, 0x0000385F ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 9, 5, 11, 0x000038D5 ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 9, 2, 9, 0x00003972 ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 4, 2, 9, 0x000039CC ),              /* '`' */
  EW_GLYPH( 0x0061, 0, -7, 8, 7, 8, 0x000039EB ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 7, 10, 9, 0x00003AC5 ),             /* 'b' */
  EW_GLYPH( 0x0063, 0, -7, 7, 7, 7, 0x00003B95 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -10, 8, 10, 9, 0x00003C5D ),             /* 'd' */
  EW_GLYPH( 0x0065, 0, -7, 8, 7, 8, 0x00003D3C ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -10, 6, 10, 5, 0x00003E44 ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -7, 8, 10, 9, 0x00003EE9 ),              /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 7, 10, 9, 0x00004010 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 3, 10, 4, 0x000040A7 ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -10, 5, 13, 5, 0x000040EB ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 8, 10, 8, 0x00004195 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 2, 10, 4, 0x0000425F ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 12, 7, 13, 0x0000427D ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 7, 7, 9, 0x00004357 ),               /* 'n' */
  EW_GLYPH( 0x006F, 0, -7, 8, 7, 9, 0x000043D7 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 7, 10, 9, 0x000044B9 ),              /* 'p' */
  EW_GLYPH( 0x0071, 0, -7, 8, 10, 9, 0x0000459E ),              /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 5, 7, 6, 0x0000468E ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x000046ED ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -9, 6, 9, 6, 0x000047D8 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 7, 7, 9, 0x00004873 ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 8, 7, 8, 0x000048E3 ),               /* 'v' */
  EW_GLYPH( 0x0077, 0, -7, 12, 7, 11, 0x000049B4 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 8, 7, 8, 0x00004AEF ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -7, 8, 10, 8, 0x00004BCD ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -7, 7, 7, 8, 0x00004CCC ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 7, 12, 9, 0x00004DAF ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -10, 3, 12, 7, 0x00004EAD ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -10, 7, 12, 9, 0x00004EDD ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -6, 9, 4, 11, 0x00004FDE ),              /* '~' */

  EW_FONT_PIXEL( ApplicationVerdanaProSemiBold16, 0x00005087 )  /* ratio 82.34 % */
    0xDEF7BDCF, 0xF47DEF7B, 0x7BDEF7BD, 0x0000001B, 0x00000000, 0xF7D00000, 0x6DEF7BDE,
    0x5C85FDCF, 0xE370C420, 0x39AEF1AE, 0xFEEFFFF7, 0x25AC6422, 0xF075A646, 0xF507D6BE,
    0xDEE2BBF7, 0xFDF1DDFC, 0xEF38F4E3, 0x8A9C5B38, 0x3C4444F3, 0xFB09C627, 0x9F54F78C,
    0xEEE37FF8, 0x9FEC37BC, 0x07E3015F, 0xFFAFF7E3, 0xDEBFE32F, 0x78C88BF1, 0x31BF359E,
    0xDF9FFE6A, 0x98D7B7E4, 0xEAFC62EF, 0xAADF8F6F, 0xAF8CFF6C, 0xDF19DEAB, 0x009ED77F,
    0x0BFEFFD4, 0xFCEF06FF, 0x5E3597CD, 0x53B5DC88, 0xE4406FBC, 0x2C7A9DAE, 0xF9BF9DE0,
    0xF7DCECE6, 0xFDFFA93F, 0x379E3BD7, 0xAA01D57E, 0x8FF559AE, 0xB30CFD04, 0x93C244EA,
    0xD5BF1BCD, 0xF773BE21, 0xEFCF7E03, 0xE6604BEF, 0x9C6F018A, 0x1805F9F7, 0xDEF3F663,
    0xF3EEFE21, 0xE33190BE, 0x90C6B9EB, 0x11995D51, 0xF99FFC43, 0x3FFB67EB, 0xCC4733FF,
    0xC939C411, 0xAA34BF17, 0xA5073E1E, 0x08041990, 0x83CA1320, 0x7AAA83BF, 0xDF2FC5F0,
    0x0D63BCDB, 0xC959535A, 0x03247163, 0xA3C91C06, 0xED685654, 0xFC606B1D, 0x37E24EF0,
    0xEFCEE77E, 0xB9F4018C, 0x9DE33BF3, 0x9E206FC4, 0x004BF200, 0xBBDEF000, 0xEFDF7BED,
    0xDF7F5AFB, 0xD4A79E37, 0x88000CF3, 0xF5F7180A, 0x995A9F8B, 0xDEF713F9, 0xF77744FB,
    0x4F73118A, 0xE330D380, 0x181AFF07, 0x4C5F87F5, 0xFC661398, 0xA3035FE0, 0x098BF0FE,
    0x1F8CC273, 0xFDDCF788, 0xF8EACDF0, 0xD6F8D446, 0x8F0F4BEB, 0x81310267, 0x278F0F48,
    0xF5EB7C6A, 0x7C7566F9, 0xFBBF3C63, 0xEF057DF0, 0x0000009D, 0x771EB500, 0xA787BFC5,
    0x7E7BEF53, 0x53E6B583, 0xBDFFF0FF, 0x112911BF, 0x06F9D091, 0xFC45CD7A, 0xAEC4BF66,
    0xE993D6B2, 0xDDE3EEE9, 0x9AC5EEE7, 0xE74F476F, 0xF027EB5B, 0x7C4E5FAC, 0x39C09E3D,
    0xD888BD73, 0x577FF19E, 0xAAB97EBF, 0xF782F457, 0x602F40FE, 0xFA781FCE, 0xAFDFA82B,
    0x7BBE3FC0, 0x777F8DD4, 0x6B51D92F, 0x005CD7AD, 0xEF7BDDF8, 0xFBBAB17D, 0x55AD778F,
    0xF8BFF7B8, 0xBA37BFBF, 0xA3CCF9CD, 0xEFF15840, 0xF51B8EB9, 0x15FCEFBC, 0x09EFFDF9,
    0x9DE7AF63, 0xC767BB5C, 0xE73BF918, 0x3DFEC535, 0xF3E6A5F3, 0xC8C24B59, 0x7CF9FAA7,
    0xF5BF35BE, 0xBDEF71AE, 0xBBB3FEF7, 0xD6B111FB, 0xA9E1A15A, 0x6178E82A, 0x1BE44AE5,
    0xA06F1D0D, 0xBF20B19E, 0xADCDFF73, 0x8DEB9BF7, 0x46BCF5CC, 0xF3ABD8D4, 0xACFD19D5,
    0x9FFCFFC8, 0x218ACE7E, 0x73158C56, 0xF93C5F3D, 0xAE6FDE7F, 0xEEE77C4F, 0x8EACFD87,
    0x779F2AAF, 0x860C371D, 0xD3D6B159, 0x4BFD97C4, 0xFE7BED53, 0xAFCE6AFE, 0x9DF7CA6B,
    0x0FEE33FD, 0x44227CE3, 0xB8C1F38C, 0x47CE303F, 0xF5F71804, 0x995A9F8B, 0xEF8C03F9,
    0x8577B981, 0xF7AEF3EC, 0xB9CFFAD4, 0x0908937F, 0xDED77DE6, 0xDFFEB113, 0xF3C14F7A,
    0x7B9E2BDB, 0x3EF7BDEF, 0xEFBEFBEB, 0x6005BEFB, 0x7DF7DF7D, 0x779EB7DF, 0xEFF6B100,
    0xFAEFBA81, 0xB9882BFE, 0x04EF7AF7, 0xDBF98229, 0x9D57FE73, 0x53A7BD77, 0x7C27BDAC,
    0x58BE7BFF, 0xFDF3D74F, 0xDA167D7B, 0x4DFA9C67, 0xDCF16E33, 0xC857E781, 0x7FF7C80A,
    0xEF30AFCF, 0xBB73DFFE, 0xFF8EDF8D, 0xEABBBFF9, 0x4F66F9FD, 0x45557FBE, 0x40F3CDCF,
    0xE5ACF2C0, 0x9FB13F9D, 0x7E7DE3DB, 0xD5FCCF2B, 0x7FFCF3B7, 0x3AD27BFF, 0xC0D3DCE7,
    0x45F007BA, 0xC6F9504C, 0x8D678E07, 0xDB91A881, 0x4F3F1987, 0xDEFA7C2C, 0x7C72A988,
    0x1DFCB7DF, 0x3D3CF3EF, 0xBDEEFC6A, 0xBAB037E7, 0x9F5DE0EA, 0x8BCB1A81, 0xB9C2776F,
    0x6C417AA7, 0xB6ACF587, 0xDE37BF79, 0xF7FF7C87, 0x67B1A6FC, 0x6E7F35CC, 0x7FDF7EF4,
    0x4F0588E7, 0x40184018, 0x6E50588E, 0xFF7DEFF4, 0x9CE7B1AF, 0xDEEFF56B, 0x581EFFFB,
    0xE2F7D56B, 0x2CE76FED, 0xA40D9F90, 0xFC805200, 0xDBFB78FC, 0xAD6B06B9, 0xEF77EDDA,
    0xBAB2F7BD, 0x5AD779BB, 0x4F3CF58B, 0x77DF7EF1, 0x8F9CE7D9, 0x5DE0888C, 0x77562D6B,
    0x7BDEEFF7, 0xEEEACBEF, 0xAB5AEF3F, 0x6F7B9C00, 0x783BBAB0, 0x00005AD7, 0xECF7FFA2,
    0xB9AEF215, 0xE274EAE6, 0xFEFF75FD, 0x64272399, 0xEF7BC984, 0x7DF2615D, 0x31F2392F,
    0xDF1B859E, 0xB8C3FAB7, 0xEB5CF66B, 0xFFC0DDF9, 0x9EB00002, 0xFBF781E7, 0xF7B7C4BE,
    0x0318D44E, 0xF7B88000, 0x30F45FDE, 0x1EF8F58F, 0xEB000000, 0xC3D13DF1, 0x77BDD63C,
    0xB58C2EA9, 0x97000001, 0xB2A77DF7, 0x77E37E66, 0xC0FEE783, 0xF20FD5F8, 0xCDE41F9F,
    0x021DC07F, 0xA07E3DBC, 0x7817ACE6, 0xCBE02E6B, 0x00377E7E, 0x00000000, 0xFBEF7E00,
    0xCE733C3E, 0xEC1FBBFD, 0x3524F2FB, 0x82DC7EA0, 0x039F22BB, 0x26B7F395, 0x03F5DF78,
    0xE024F19E, 0x7E0003FF, 0xC1BBF1B7, 0x02F3C04C, 0x7201E7DE, 0xC02DA036, 0x7CC05DEF,
    0xBE41A006, 0xC0EFFBFF, 0x5AF56BD8, 0xFBF1B83B, 0x93F9D7D6, 0x78AC1F23, 0x08860984,
    0x23910C13, 0x6E28CC1F, 0x76F5DEFC, 0x56BD8CBE, 0x77E9DAD7, 0x81BFFDEF, 0x8FF35DF7,
    0x0231BF35, 0xF1BF3580, 0xD6BBEF04, 0x0DFF7387, 0xFEF10000, 0x7903BFEF, 0x76B5EAD7,
    0x5BEFC6F0, 0x544FE75F, 0xD251583E, 0x4C222304, 0x8591C830, 0xBE370A8A, 0x2F17F4F5,
    0xB7EF5FE3, 0x77C6276A, 0xE94049DA, 0xC6F180B9, 0x7BDDF9FB, 0xF560AFCF, 0xAEF02FAA,
    0x98C122B7, 0x8EEE7031, 0x1ACBBC3F, 0x17A9FAB0, 0xC05CC6F8, 0xDF91FB3F, 0x23DFFFB9,
    0xE7DFBD76, 0x59EB58A8, 0xDEB4CFBF, 0xCBF18527, 0x0FFFFDF9, 0xE4F7CFB5, 0xF3C4322F,
    0xEFBAE455, 0x6319FA7C, 0x67BFA7AD, 0xBDEFFDFE, 0xFEFBDEF7, 0xFBA787BA, 0xDC7AD73F,
    0x00000AB5, 0x00000000, 0x17B85FF8, 0x00000000, 0xE4315310, 0xDFEFBDF1, 0x9ACF7CF7,
    0x0EEFCEF9, 0x1F1DFFF8, 0x0B2A7E46, 0x072F879F, 0x33E3C955, 0x7CAB20F2, 0xAAC9C0F1,
    0xFCE89E09, 0x818C6B01, 0xFEE32775, 0xA6C78FB1, 0xCC8F9264, 0x8A947EC5, 0xEE78654D,
    0xAB6286B8, 0x63B2AA8A, 0xC463FE50, 0x62167CCE, 0xBF152ED4, 0xCF1BF0D8, 0x4A0A59E6,
    0x50463B14, 0x7EE787F7, 0xBF12D56A, 0x8EF1E8FC, 0x5FE381CF, 0x115C80EF, 0xD1158C0B,
    0x0AB5D8E0, 0x8DF2FE6F, 0x1F39CC37, 0xDDF3F9D9, 0x2FF6F307, 0xF8ECBF1A, 0xF2F95B65,
    0x53EF1CD4, 0x20FDFD78, 0x2E01BC67, 0xBDC00000, 0x877BDEF7, 0xC229EEEE, 0x7E3E6B5A,
    0x07E8DF09, 0xD60B9ADE, 0x1E9E17AC, 0x679FC83F, 0x8446B5AD, 0xCF5DDDD9, 0xBF3177BD,
    0x0024FD87, 0xD8000000, 0x67BF324F, 0x3E3301DE, 0xC5F81730, 0xF81F5184, 0x3E33018F,
    0xC5F81730, 0xF81F5184, 0xBE33018F, 0xFDF7BDFF, 0x00167A86, 0x67A80000, 0xEB01BF79,
    0xF1BC603E, 0xEFE3384B, 0xFC77CDE0, 0xCAB9AB46, 0x7BDD56B3, 0xDEF7BDEF, 0x7BDEF7BD,
    0xF9B7EDEF, 0xEFFEF6AD, 0xFBF10FD9, 0x67A97E75, 0xDF3C29CD, 0x73EA2CFF, 0x6786936E,
    0x9FFAE733, 0x0001FEE4, 0x979FFAC0, 0x25CE5FDC, 0x41F8EB7F, 0x98D3080A, 0xFF8C73F3,
    0xBC47DF3B, 0x3FE9EEE7, 0x8C7B57D7, 0xA6FE9F7A, 0xC6A03084, 0xFCFACFD3, 0x1B7EFCE7,
    0x0001773C, 0x179CEF88, 0x937F33DF, 0x973F4F51, 0x03A60FE9, 0x5F35AE46, 0x217FEC9C,
    0xC3F773DE, 0xF5BF7EB7, 0xA9F351CB, 0xEEB4DF1B, 0x9E6989FD, 0xB18F4E73, 0xF2EF3E66,
    0xC6FEDF5F, 0xCA73BE23, 0x34DFBCFB, 0xDCB7CAAC, 0xAF7D2FBF, 0x000053C1, 0xCE77C400,
    0xA9EF9777, 0xDF551837, 0x4C1B4C3A, 0xD6A2307F, 0xFECFF17C, 0xFDDF630A, 0x667AE617,
    0xD7DF12C7, 0x0FF71FF3, 0xFFD60000, 0x2AFE42FE, 0x7DFB95EB, 0x0000580D, 0x3BA37B80,
    0x00BFF2D6, 0x9FEE2000, 0xB4D61FE8, 0x5E79FDEE, 0x000002E4, 0x72D3E418, 0xFEFAAAFE,
    0xF8000001, 0xF3DF019D, 0x174FBC0D, 0x5F884A72, 0xC751897E, 0x9F9D180D, 0xE00005FF,
    0xBCFFD7FE, 0x43FF9DF1, 0xAAF31AEE, 0xF7BF91FC, 0x8ABEFDE7, 0x00000180, 0xFB800000,
    0x91F3FF5F, 0x92CF1ABF, 0x581D7DFB, 0xF1000000, 0xFE1FBB9E, 0x357D7DEB, 0xB8F35AC6,
    0x70CD21D3, 0x5AC6B348, 0xD7FAEBCF, 0xEEAFADFB, 0x4BCFFD7F, 0x4B9CBFFE, 0x07EFEB7E,
    0x634D2021, 0x7FF0E3CE, 0xDF8C7DE3, 0x80004FFD, 0xDDF9CEF8, 0x2FE67BE5, 0x73F4F518,
    0x3A60FE99, 0xF5EAE460, 0x3DFAE4E2, 0x0DEEFB18, 0x3FFDC000, 0x3D746DFF, 0x017DFFC6,
    0xEFB3C000, 0x3DF18DF9, 0x1A731BFB, 0x59E7E9EB, 0xD4BF3BF5, 0x9EFD7767, 0xF1CCE12E,
    0xFE5ADFED, 0xEE9BC017, 0xBEFA5F1D, 0x004F3C1C, 0xD0E7A980, 0x7FBAF563, 0x00017DC6,
    0xD7E46000, 0xFA9E3B87, 0xF790FBE8, 0x5F1E5CFD, 0xC31BF156, 0xF1F1CA89, 0x8589FFC4,
    0xF02B7EB9, 0xDEF1F18B, 0xEFCBEE30, 0x5151EFEF, 0xDB62A53C, 0xCD88E66F, 0x9EB35153,
    0x58F61E27, 0x07DF7B15, 0x4F56DF8F, 0x1966646D, 0x3F3A8B23, 0x6B7ACEFA, 0x7AD39AD5,
    0x745EAFDE, 0xF91385C4, 0xCEF8EF06, 0x35D9CCF8, 0xC3EFBABA, 0xF0E7EFB8, 0x985565F3,
    0x13E63863, 0x4EFC4F1F, 0x2B51CC2C, 0xC603E3F0, 0x5107D780, 0xBDEE30B1, 0xBEFCDEF7,
    0x79E2786F, 0xD3C7D472, 0xF2FC63E3, 0x4F1FF21F, 0xEB0ACF3D, 0xB9F43EFB, 0xDF3D678B,
    0x0127EA43, 0xFDC18BF2, 0xC73D1FC7, 0x333EF587, 0x30002FE1, 0x7AD493F4, 0x01BDE7BE,
    0xE0000000, 0x7DE1777F, 0x15CD43F3, 0x7ED80C01, 0xBEEBBCF0, 0x3FAC6FC4, 0x8E2EDF33,
    0x95CD4007, 0x81E6FBC1, 0xFDE2ECEF, 0x1BE327CF, 0xEFB1D89E, 0x6FC6FFF8, 0xF53EF23E,
    0x0000002C
EW_END_OF_FONT_RES( ApplicationVerdanaProSemiBold16 )

/* Table with links to derived variants of the font resource : 'Application::VerdanaProSemiBold16' */
EW_RES_WITHOUT_VARIANTS( ApplicationVerdanaProSemiBold16 )

/* Bitmap resource : 'Application::ViewLogBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationViewLogBitmap )
  EW_BITMAP_FRAMES( ApplicationViewLogBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationViewLogBitmap, Default )     /* ratio 13.19 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x79FF87BE, 0x1FEEB61A, 0xF6E95EA5, 0xD54C2E4A,
    0xA178B496, 0x3CA3926C, 0x47673139, 0x5B79FF16, 0xBF5FEF87, 0xF1F4FFD3, 0xD7EFF7EB,
    0x119D7935, 0xE1D95ECB, 0x747198C9, 0xAD9EEB3D, 0x79B75917, 0x669F51A6, 0xEB383C3D,
    0x7380DB62, 0x3734FE5E, 0xD9B1DDEF, 0xEED63A96, 0xC6D5BEDF, 0x8EDF17B3, 0xE872B91A,
    0x8F8B9FCC, 0x2E91F7AE, 0xCDD8FF74, 0xB85DA7D3, 0xB3EFE27B, 0x3B06CB0B, 0xF8F0793C,
    0xF6647FC7, 0xF87B5E8D, 0x6027FE00, 0x5368C371, 0xE9F77E5F, 0xA858E087, 0x6ADD5324,
    0x61177201, 0xE80A127C, 0xDA18825D, 0x904C61A7, 0x3B9912EC, 0x2033ECF4, 0x684E2485,
    0x66067CA2, 0xB38AE0B8, 0x3D4E2341, 0xE1589E23, 0x380A258C, 0xE60A81DF, 0xAB5DE2A8,
    0x8C4EE32C, 0x0F83D240, 0x8298FF3F, 0xD8F1754C, 0x328D2223, 0x86E177C6, 0x92B9423A,
    0x0644BC24, 0x3240928F, 0xD02C8FF9, 0x2712B3BC, 0x0F2634C2, 0x89965A96, 0xC4D52EDA,
    0xF69AE3B3, 0x8C0E4351, 0x8D789E66, 0xD5B0F639, 0x24FF6309, 0x5A8D64B9, 0x3DCE836A,
    0xD928B26C, 0x1978CE2B, 0xDCF380A7, 0x9163E223, 0x3049B5E9, 0x67B95D8D, 0xA3E5AC93,
    0x56466B0F, 0x6BA6E527, 0xA24FFA31, 0x1F196693, 0x07DA5EA1, 0xC66498A6, 0xAC3ECF97,
    0xA68CA2A5, 0xD77A7282, 0x5A1E759C, 0x066F34E1, 0x8D9DD1BA, 0x3D1EC7A9, 0x8AA910F7,
    0x3B16BA8F, 0x8A5D2CD6, 0xFFA4A27A, 0xAC68D950, 0xA08946D0, 0xF3A8BE25, 0xDA44908F,
    0x3F8F5F1A, 0xB46C6ACA, 0xA809FA18, 0x08BA01B6, 0x82E8B7A3, 0xF0659F6B, 0x3BE02B28,
    0xE1D3FE21, 0xFBD6D2B3, 0x48988EAD, 0xF93D8FF4, 0x7C67CB64, 0x20D3FE10, 0x5BA6F6AC,
    0xA8DE8230, 0x27BFEE33, 0xBDDFD32E, 0x992C1B10, 0x49A8D42E, 0xFEBE766E, 0x127A1E63,
    0x53EEAC77, 0x0FFA409A, 0x5BB9AA3E, 0x91D83F1C, 0x113B0C72, 0x6CF07C7F, 0xDA53B0E1,
    0xF31DC5C5, 0xE32FCB5B, 0x1E2456CC, 0x3A5F1C9A, 0xC8E7B0F1, 0x9C7B3A79, 0xBAE65EB3,
    0xA16B1D7B, 0xD1B2C314, 0x192CBB45, 0x2B625E97, 0x42293120, 0xF6D4B5AD, 0x7F0FF4D9,
    0x48D85DFE, 0xCD1F5B68, 0xA766D9F5, 0xB822F3AD, 0xDA94839C, 0x23AD4765, 0x76D76EDB,
    0xA378DC5B, 0xE3DD9D1D, 0xDE598658, 0xAEBDEB70, 0x3600A143, 0xCB6F4597, 0x2BE038AD,
    0x0C90A5FD, 0x0868DD3C, 0x1E0B94E3, 0x7C855BD2, 0x050053D5, 0x738853CE, 0x339E5B8B,
    0x1E655A56, 0xEB9AE694, 0xA1BB0324, 0xE57A0DF0, 0x14755381, 0x8EABACDF, 0x010140FA,
    0x00000000

  EW_BITMAPS_TABLE( ApplicationViewLogBitmap )
    EW_BITMAP( ApplicationViewLogBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationViewLogBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::ViewLogBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationViewLogBitmap )

/* Bitmap resource : 'Application::HeatSensorBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationHeatSensorBitmap )
  EW_BITMAP_FRAMES( ApplicationHeatSensorBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationHeatSensorBitmap, Default )  /* ratio 27.31 % */
    0x04086D00, 0x8006D020, 0xF0F07C51, 0x8F27D518, 0xF279862E, 0x6FB3C421, 0xF83B9ED4,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0x9E47288F, 0x64B29954, 0x1B1584CA,
    0x8BA86C4A, 0x051EC254, 0x39CC0E09, 0x86C88B51, 0x050620FF, 0xD128B42A, 0x268679A3,
    0xA914BA35, 0xA14CA7D2, 0x754A8D3A, 0x4BA6D5AA, 0x92DC3643, 0x1F45D493, 0x154AB13F,
    0x53AC955B, 0xFCF87F53, 0xD2C995BB, 0x5AAF63BF, 0x4B464BFD, 0xA8613FD6, 0x2593FD4C,
    0xBFD8D1E9, 0x155F0165, 0x1EA3759C, 0xCA203F3B, 0xB078CC0A, 0x028454D0, 0x6C56B3FD,
    0xF27B3FD8, 0xA7E3FDE4, 0x7BBFDF4F, 0x965DE6F3, 0xBE5FEF17, 0x7736F77B, 0x1D2EF7FE,
    0xFF71B7BA, 0xDB4C7291, 0x4AC26DAC, 0x7C6CC317, 0x45ABB03B, 0xFEBB5888, 0xBC1E2F57,
    0xD96ECC7F, 0x520B17FA, 0xF47DD923, 0x67E52BFC, 0x8153BFCF, 0xA5C3FCFA, 0x6D3FD2E9,
    0xD3FD90CA, 0x3FDF2F97, 0x4DA2D370, 0x779B8EAF, 0x77BBA9FB, 0x34BF7ED7, 0xDC73BFE1,
    0x7773FDB6, 0x563FDCEE, 0x14F21489, 0xE3CD765D, 0xD9A63B4E, 0xE43FCF63, 0x3FCD8364,
    0xC89230AE, 0xB278BB53, 0x3E0B8249, 0xF42E4BA3, 0x44DEE875, 0xDBD7C915, 0x62D5427C,
    0x79AA24C9, 0x9926CB96, 0x2B0C553C, 0x2328A4AA, 0xF8D19E67, 0xA4EA3C0F, 0x4F765D73,
    0x2F4BE345, 0xCEF3C1C4, 0x487DD67A, 0x51F163A2, 0x4988E464, 0x3FE30311, 0x0F53D4F8,
    0xF7D94191, 0xD9FE3A0E, 0x5B6AE5A8, 0x2A8C367A, 0xA16850A7, 0xB84E118C, 0x29F087A4,
    0xB79A2229, 0x9464F30D, 0x56A5A253, 0xA648852A, 0xCCF83E0F, 0x359EE5C8, 0x8721A6AE,
    0x49F2F142, 0xC7026427, 0x2545A1E6, 0x1D931319, 0x254982DA, 0x0942D232, 0xF1E25524,
    0x8CE33ACF, 0x9C9F67A3, 0x2C4C88CA, 0xCD053CAE, 0xF3CE1C2E, 0x31D03B8E, 0x8A63267A,
    0x6CD83AAE, 0xE08819D2, 0xF2F8C034, 0x00BF3494, 0x32A6E5D9, 0x75290A3A, 0x23A8E1D6,
    0x8314C736, 0xB5BD91E8, 0xA3876C8A, 0x66998872, 0x083218AA, 0x32309073, 0xDABC795E,
    0x4F399FC8, 0xA84B0321, 0xDCD799E4, 0x8AAAAE73, 0x2E4A9AA4, 0x912A1EEB, 0x36643905,
    0xD13788C9, 0xD33CDC3F, 0xFDABB64C, 0xFF284A32, 0x21C8A2B4, 0x994669A3, 0x4B1EE565,
    0x26E6B296, 0xAA3114FC, 0x3ECFF2A0, 0x0A32F6D8, 0x32A0FF28, 0x19C42008, 0xC2352327,
    0x9C8FF304, 0xCDF3A4FF, 0x5961AC37, 0x187F20B1, 0xE8A272AC, 0x7CF2BA2E, 0xCCE340DD,
    0x829DA568, 0xCA398DF2, 0x312B4C58, 0x300C1352, 0x8FF6859F, 0x6C1694A4, 0xA6219A74,
    0xCDC170AB, 0x2AE36B59, 0xA3ACE201, 0x58C73B8D, 0xD0D9368E, 0x2F330CEB, 0xC2224D2F,
    0xDF65435D, 0xE23CB0BC, 0x1CAA6AF4, 0x3AD48842, 0xD5CFFCF3, 0x0CD36F59, 0xAD7B47D7,
    0x7F75D82A, 0xEC3FD69C, 0x3B69A390, 0x725390E5, 0xCDAB6896, 0xC36ED536, 0x74DC8FFD,
    0xD2F8EBAB, 0x14FE3F78, 0x3351E7B0, 0x50E13FCD, 0x0E830D43, 0x220AB8CA, 0xB6DB0A02,
    0x3E2F58D5, 0xB379D877, 0xA9CBB49C, 0xD9F6560F, 0x7A1D419E, 0x1E9388CE, 0xDBADE9F7,
    0xBAE4580D, 0xD3696AB3, 0x7A2D479E, 0xCE976FED, 0x5392EA38, 0x20CABBC5, 0x69A0A3E7,
    0x67878DA8, 0xBD4FB3F0, 0xDFC5D55A, 0x94A338DE, 0x8BD6E5B3, 0x4A930E31, 0x6E18AB98,
    0xC305F2F4, 0xC134CFFA, 0xCFFEB2FC, 0x9E2BC0FF, 0x7BFCAC8D, 0x1B89F5F8, 0xDB7CFB8F,
    0xB5CCA330, 0x8C9381E6, 0x411A2340, 0xE8556A11, 0xCCEB9E4B, 0x01FAA326, 0xB3F8786C,
    0xB7B6E99D, 0x297D4B3B, 0x9012004C, 0x8A5180FA, 0x5B0C3C51, 0x6CCD79AD, 0xDCB2D720,
    0x8D15E53D, 0x503FC450, 0x745D42A8, 0xB3F442E2, 0x833D041F, 0xCF1DC53D, 0x8750F184,
    0x1D84643A, 0x8128783F, 0xC41903BA, 0xFA2BB3CC, 0xFF866A19, 0x28FEA1A8, 0x9C7A3798,
    0xFA54602A, 0x350F1010, 0xADBA24C2, 0x0558AE18, 0xC0D39472, 0x822ED223, 0xD8609BD9,
    0xD5C3085C, 0xD01A237C, 0x4D14D440, 0xB51942C8, 0xA3F74242, 0x87B4FE61, 0x4985F11B,
    0xD8A89C50, 0x0BD1FEC5, 0x1FE27850, 0x689A0AB2, 0x400A7780, 0x7A57C768, 0x4AF28B53,
    0x54B140A8, 0xF8A217B1, 0x06271F04, 0xE8D8B91B, 0xA242138D, 0x1818E912, 0x18C3206C,
    0xA60CF2F8, 0x14226534, 0x0F41ABCD, 0x843106AA, 0x406F8FF1, 0x5C1519E3, 0x8885099D,
    0x910D1B2D, 0xA38C294C, 0xC3782515, 0x1FEEBCF9, 0x2684E0B9, 0x549CE2F6, 0x807D453D,
    0xFC5F1C13, 0x80708EA2, 0x32209623, 0xB7BC50A1, 0x83FCB696, 0x91B41E83, 0xC9A9722B,
    0x7F70D927, 0x2F4F9BBD, 0x98C92142, 0x98456CCD, 0xC256A680, 0x04DFB0A9, 0x49DC46C7,
    0x616A32A7, 0x436C7317, 0x8449FF1B, 0x9F93EE21, 0x196331C5, 0x542763C8, 0x690AD9D6,
    0xF172860E, 0xD30EC758, 0x41920E01, 0xF1DC9252, 0x98009FCE, 0x34062CC4, 0x084D05A0,
    0x0F22200C, 0x1666DE83, 0x3354A093, 0x022BB99F, 0xBC1A03FE, 0x3D3185D0, 0xCC3C46AA,
    0xE0302263, 0x30B04249, 0xF2369791, 0x10139F50, 0xD2C728F0, 0x2274B9F3, 0x5089C859,
    0x8B8A2207, 0xAC2260C4, 0x96AB4910, 0xCAA6425A, 0x84D1A9D2, 0x4A9B54AA, 0xD3AE5955,
    0x43BD4515, 0x906A860C, 0x00000080, 0x00000000

  EW_BITMAPS_TABLE( ApplicationHeatSensorBitmap )
    EW_BITMAP( ApplicationHeatSensorBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationHeatSensorBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::HeatSensorBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationHeatSensorBitmap )

/* Bitmap resource : 'Application::GreenCallpointBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationGreenCallpointBitmap )
  EW_BITMAP_FRAMES( ApplicationGreenCallpointBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 1, 30, 33, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationGreenCallpointBitmap, Default )/* ratio 24.07 % */
    0x04086D00, 0x9D912640, 0x3CED0500, 0xE12EE849, 0x0D10873F, 0xD118943E, 0x158B44CE,
    0x789199FF, 0x8B47A386, 0xFC7E411D, 0xC8E49217, 0xAA292892, 0x62F2B8C4, 0x127584BD,
    0x0368101E, 0x06824D00, 0x92AC2407, 0x7F425AD0, 0x14B68319, 0x24A2D2CA, 0xCDFE9C55,
    0x294F47B3, 0xECF47FD3, 0x74DA73D5, 0x56A7D569, 0x9ACD6AA9, 0x793CDE35, 0xD230D4FF,
    0x512CB173, 0x25B50976, 0x8CB372BC, 0xE1092BC1, 0xD447EC25, 0x45BBD0EC, 0x056A5ACB,
    0xBFBF9FEA, 0x1E0B02FF, 0xE1B0B84C, 0x01FB84C3, 0x92EA5466, 0xF344BCDD, 0x10975C25,
    0x98BADA42, 0xBB2E3EF1, 0x67B062D1, 0x4602FCC7, 0xE934BA4C, 0x59FEFEBF, 0xA34D96FB,
    0xF676CCE6, 0xD6E61C25, 0xB8D7DD0E, 0x77FEE721, 0x7FABD72A, 0x1E9B82FD, 0xF0749C4E,
    0x9918FF7E, 0xF619B4C2, 0xA3CE7E45, 0xCFFCEEEF, 0xA2743A9C, 0xCEDF1753, 0x73B8307D,
    0xBA2A48E3, 0x74B77CD3, 0x5BCBE8DD, 0xDE2EEEA4, 0xE3F0EEBB, 0x29B7FF1F, 0xF8F52916,
    0x2E9FE7CF, 0xF8FBFDB1, 0xDA871600, 0xE3C0ED3F, 0xED63584E, 0x0C7E9E97, 0x7B9EC44A,
    0xDDB84601, 0x6304AF80, 0x3618828B, 0xB544A0B8, 0x849FE3FD, 0x8E976E20, 0x743CEA3B,
    0x9A191D48, 0x1686E2A7, 0x8861F875, 0xCE280DDD, 0x43FCE439, 0x64E73A4E, 0xEE3A9847,
    0x8A2263B0, 0xE2C8A61A, 0x08422E66, 0x04B18023, 0xB73FCB83, 0x8E8BE31C, 0x23E8F183,
    0x690A2719, 0x20659065, 0x478BD162, 0x92E497C2, 0x0C0320B9, 0x78FE5262, 0xAE678AE5,
    0x5D919FD7, 0x3FE5F776, 0x8C1324BA, 0x4995865F, 0x06689025, 0xFF915FA9, 0x2C9DC9B5,
    0xCBC92CC2, 0xD990C332, 0x75CE99A3, 0x0F9A27A8, 0x3EA037BE, 0x4FF3ECFB, 0xE3E4FA3E,
    0xE6806167, 0xCC2F4FF2, 0x60A50310, 0xE8B95676, 0x244A5890, 0x00D536CD, 0xC42D5C27,
    0x3ACFF2E8, 0x2973B4EF, 0xE25E6F61, 0x22AA284A, 0xEB88D837, 0xAFE79A20, 0xC6866AA4,
    0x73FC7922, 0xB8852587, 0xE1365166, 0x3EE3A374, 0xCD7A48FC, 0xEA7CDA37, 0xFECA92A6,
    0xA82D09E3, 0x340C53FC, 0x0943FCC9, 0x69A49F2B, 0xC99BA8EE, 0xFF204921, 0x85CC02B8,
    0xC9B2A490, 0x32F4AA3F, 0x46038E8B, 0xB2AC1535, 0x9129961E, 0x301B9EC0, 0xF1B90EBA,
    0x28FF1F48, 0xFF338D53, 0x3FDE037C, 0xAF32A891, 0x8320D030, 0x124BA018, 0xC1C6F03C,
    0x5E700C76, 0x717C54C3, 0xAC7B02A0, 0x6F1CC9B1, 0x87C5B216, 0xC97279BD, 0xD19CBF30,
    0x9CB988CA, 0xDE8A4672, 0xE9CA33AC, 0x30AFECD1, 0x73BCCA9A, 0x3D161D59, 0x00885074,
    0x3E99B499, 0xD2F2E61B, 0x750D4064, 0xFCF339C0, 0x20901BCF, 0xCF358CCC, 0x35CCC3FC,
    0xF60D78D0, 0x92647C3F, 0x7C84CC08, 0xEF3FC902, 0xDB0F03C8, 0x8C03FF6E, 0xE3FCC633,
    0x02F8A74B, 0x702DE496, 0xDBF6DDBF, 0x4A32BC98, 0x31CF01CC, 0x0DF3BB09, 0x863FDDA6,
    0xCC092284, 0x89328887, 0xE2E4A68E, 0x38853FCA, 0x941D4FFE, 0x98A70208, 0x358BFCFF,
    0xFE0899C2, 0xE0F93E0F, 0xA72CEDA3, 0xE1A43E10, 0x0981EEEC, 0x121CFF22, 0x12B9244A,
    0x7C25E036, 0xED3B23FD, 0x88425476, 0x3E4F9195, 0xD367D960, 0xD43FF9D1, 0x3FCD7370,
    0x4FFF44FC, 0x5580F43C, 0xA0FFE58A, 0xF53FDE31, 0xEACF63DC, 0x579D0BAD, 0xC350C887,
    0x178BDE4C, 0x80FAE036, 0x36CE0361, 0x5F8D54FF, 0xFF223AF1, 0x58DCFB8F, 0x9270989B,
    0xF7BDCBC8, 0xC7DD73E0, 0x66BE51FE, 0xEF1B2974, 0xE89A1F8B, 0x6C3F2037, 0xAA931142,
    0x840670D4, 0xE2F4628B, 0xA000F61F, 0x2DD16627, 0x224D11F1, 0xFB1F3BE5, 0xC03BA7D2,
    0x097EF08C, 0x01030FD4, 0xA071BF63, 0x1BFA1CC3, 0xB352628C, 0x27DC5809, 0x60DBDF83,
    0x940638F8, 0x5D8BA8DD, 0x2184B879, 0xDCB6A730, 0xE3300E29, 0x8710572A, 0xA9CF3CA8,
    0x33F57250, 0xD1023FDB, 0x83FC4609, 0x0C01C057, 0x8FC1FA3F, 0x4E42EC7F, 0xFFD62161,
    0x1D8B4872, 0xBA212D5A, 0xF43D8848, 0x0A233B03, 0x7B8D7166, 0x9856BA1C, 0x828C451A,
    0x03B0FF12, 0x07978625, 0x14A72564, 0x2087F896, 0x3C88D13A, 0xFF106252, 0x711F83C0,
    0xA632ADA8, 0x09091CC9, 0x915C4241, 0xC7387D10, 0x86230860, 0x316934C8, 0x0F23FE4E,
    0xE4043898, 0xDCC338A0, 0xC294E7CD, 0x54722541, 0xB04E8FF9, 0x48E1484E, 0x82120E48,
    0x20C48310, 0x13D8D421, 0x46797687, 0x8C41A4CD, 0x30564AC7, 0x61C7E58D, 0xC898B31A,
    0xD71FA614, 0x283D88D0, 0xB9091E88, 0x726F2D01, 0x20788493, 0xA0F0CB21, 0x97868F36,
    0x0564246D, 0x40481CD3, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( ApplicationGreenCallpointBitmap )
    EW_BITMAP( ApplicationGreenCallpointBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationGreenCallpointBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::GreenCallpointBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationGreenCallpointBitmap )

/* Bitmap resource : 'Application::PIRBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationPIRBitmap )
  EW_BITMAP_FRAMES( ApplicationPIRBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationPIRBitmap, Default )         /* ratio 24.31 % */
    0x04086D00, 0xC106D020, 0x0C010581, 0xC2CB64FA, 0xF6A7461A, 0x8A54499C, 0xA4439958,
    0x8461B1D8, 0x8EC6DFEA, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x0678CC5D, 0x1187C551, 0xC84C3617, 0x834FA113, 0x71BA0D3D, 0xC4CDAA94, 0xC93AF452,
    0xCD4FF62A, 0x9F4D53A2, 0x94EA8546, 0x53AAD4AA, 0x7ADD62B3, 0xAFD5ABB5, 0x0586BD5A,
    0x52AC15CB, 0xD14D13A6, 0x9528D36B, 0x8107A09B, 0x86F004FE, 0x9A3EA6A8, 0x5BDD8D64,
    0xBED8AF96, 0x260AFF80, 0x612FD83B, 0xFEF27EA8, 0xD508D373, 0x8709B826, 0x578362A6,
    0x86C3E06F, 0x5CD65F33, 0xCEE7B378, 0x65EB1352, 0x202136EB, 0xA42EB14D, 0x7319F79D,
    0xA8D3BDEB, 0x2D97FB51, 0xD87FB71B, 0x2BDB69B0, 0x7FB99C2E, 0xFB95C4E1, 0x37DB8DC7,
    0x6341AECE, 0x10AF4B4E, 0xD4195CA8, 0x69E3DC70, 0xD8D7D316, 0x067B42A5, 0xE3F16F6D,
    0xFBA1C6E4, 0xB9DC6E37, 0x81BADDBD, 0x7C7E17FB, 0xD37DF3F9, 0x3C3E0FAF, 0xDB7FB6F7,
    0xFB0767BB, 0x7FB19689, 0x1691F538, 0x4721FB31, 0x89EC6D9B, 0xD7358FF7, 0x7E559360,
    0xDED78E09, 0x7350D53F, 0x58D7564D, 0x1384E0E3, 0x7ADC55F6, 0xA1382A1C, 0x6771F87C,
    0x99355620, 0xEC4CCC72, 0x3519B814, 0xE32845B1, 0x27EA257B, 0xA5B76D55, 0x16850E17,
    0x355B25EE, 0xD7B83214, 0x2780DB36, 0x2A1291E2, 0xD3344D28, 0x1995289C, 0xD1A29487,
    0xB72A2E48, 0x4E328360, 0x5571E448, 0x34D98726, 0x2386CCD2, 0x2791E679, 0x02567C0E,
    0x213F5106, 0x37CFF975, 0x1C438CDF, 0x65F5EB37, 0x39BA6E1F, 0x2633D509, 0x340D1562,
    0xDB13FCD2, 0xA9F0CE6C, 0x02303FE7, 0x054C66E9, 0x78E219DE, 0x57DA1E3A, 0x738DBF6F,
    0xCA3F5666, 0xF7368D98, 0x7DE9B561, 0x1BB35CD7, 0xC5F66E84, 0xE5529A68, 0x32A3DBB6,
    0x5F5B3982, 0xE6FA14CE, 0x2ACCE237, 0x6E195627, 0x58A660A8, 0x565DF8D1, 0xA1FAB2BF,
    0xEA9D62A4, 0x364B5EE5, 0xC3380E19, 0xA74D8365, 0xE729C256, 0x8366A184, 0x66058C69,
    0xDD88E91A, 0x54AA58EC, 0xA63666C6, 0x53FED29B, 0xCAE633E8, 0xE637A44A, 0x662DFA1A,
    0x2C93FEE7, 0xDB8560B1, 0x9633AB97, 0x9B83AA19, 0x7D23296D, 0x4D2BCE87, 0xC7767C8C,
    0x15586DE9, 0xF681AF4C, 0xB5A0D58A, 0xEF184EAC, 0xE37A9166, 0x522FAD4D, 0x88AE6403,
    0x566948C6, 0x0D079E96, 0x79CCD134, 0x68D5C7DC, 0x2AA9B0B8, 0xC5A99819, 0x0E1386B5,
    0xECA57B39, 0xBF25C8E0, 0xD535AF16, 0x38CE2838, 0x713561BF, 0xC6D33861, 0xBDBB9E29,
    0xC7C3559B, 0xB531F6BE, 0xD7DB58D7, 0x48D24DC0, 0x36A8CAF5, 0x18D3185D, 0xC6A88A8A,
    0x617CA606, 0x5BF20CB9, 0xDB239DD8, 0x61345608, 0xA65B781E, 0x7716EEA1, 0xCD2A1790,
    0xC19B4B32, 0x1C82A59C, 0xCCB0A9BB, 0x681C9334, 0xEAAA995F, 0x3359B632, 0xC366F2DC,
    0xB42CEAB2, 0xF1FD1550, 0x8C7185B8, 0x1F8F5F6F, 0xAF8C31CA, 0xD719BE26, 0xF7BC1D58,
    0x93769C78, 0x16ACBC55, 0x4DC9158D, 0xE197BCDA, 0x640C66F3, 0x270AFFC8, 0x43586CA8,
    0x9954BA05, 0x388E2B96, 0xD7DA45BF, 0x3924E438, 0x0D59E71E, 0x39C9232A, 0xD9B3C54B,
    0xE1785598, 0x8F223484, 0x2FCF8915, 0x98D6BBBC, 0x667CCC29, 0x30A3FED5, 0x2A938656,
    0x12819FD5, 0xF2F15EEF, 0xB0D98E22, 0x7DB817D9, 0x6BA2EDEE, 0xCF03583E, 0xD1EAF576,
    0x54ABCC94, 0xEDDF52E5, 0xE03DC73A, 0x6D504B30, 0xC8FCCD7B, 0xFDC02797, 0xC9BF67E3,
    0x35009F9C, 0x2E61F623, 0xDDA1F71B, 0x95261105, 0x40AEB909, 0xA1D933F9, 0xAB952816,
    0x7B820AB1, 0xB0B51729, 0xC4A93521, 0xDBF7522B, 0xB1FEC3CB, 0xE6CDC3AE, 0x5C5A8B57,
    0xAAC81CE2, 0x532541FF, 0xE796F2DC, 0x1A35172A, 0x7D5D836E, 0x486CDB61, 0xB090B4A4,
    0x1BD240A8, 0xF1C03FDD, 0xCAC19A0D, 0xA02C435D, 0xB1A5FCEB, 0x8B31310B, 0x1A11617B,
    0x648A6112, 0xE55229B8, 0x94FD191B, 0x81E13AE6, 0x29353371, 0xD29F1985, 0xC7FCFE87,
    0x63CC6F6E, 0x1508F101, 0x0FC54E3B, 0x18CD49A7, 0x35C7C2D5, 0x9890D1EA, 0xFA3D6419,
    0x645B0980, 0xE06D2120, 0xB0FE1C48, 0xF2205989, 0xCC948592, 0x2063483F, 0x16826C40,
    0x23C378FF, 0xC8074154, 0x9B2AA40C, 0x0B2824A0, 0x1643CAC9, 0x5CAB93C8, 0x01486384,
    0xC008660A, 0x87F90694, 0x4910032E, 0x9061C454, 0x2B63F0F6, 0x2B4AE8F7, 0xC716A27D,
    0x3F3007F8, 0xFE5D0712, 0x8CB80023, 0xC34D348B, 0xC0605909, 0x43E0A829, 0x22918F1C,
    0x989314D6, 0x374BDCE0, 0x53C738E3, 0x9C1041F4, 0xA20685A0, 0x00809099, 0x00000000

  EW_BITMAPS_TABLE( ApplicationPIRBitmap )
    EW_BITMAP( ApplicationPIRBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationPIRBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::PIRBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationPIRBitmap )

/* Initializer for the class 'Application::EnableDisable' */
void ApplicationEnableDisable__Init( ApplicationEnableDisable _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead1, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList1, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead2, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList2, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead3, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList3, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead4, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList4, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead5, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList5, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead6, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList6, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead7, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList7, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead8, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList8, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead9, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList9, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead10, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList10, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead11, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList11, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead12, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList12, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead13, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList13, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead14, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList14, &_this->_XObject, 0 );
  ApplicationDynamicAreaHead__Init( &_this->DynamicAreaHead15, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList15, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationEnableDisable );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  CoreRectView__OnSetBounds( _this, _Const009B );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->Outline, _Const00AB );
  CoreOutline_OnSetFormation( &_this->Outline, CoreFormationTopToBottom );
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead, 1 );
  _this->DynamicAreaHead.ZoneNum = 1;
  EwRetainString( &_this->DynamicAreaHead.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead1, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead1, 1 );
  _this->DynamicAreaHead1.ZoneNum = 2;
  EwRetainString( &_this->DynamicAreaHead1.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList1, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList1, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList1, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList1, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList1, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList1, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead2, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead2, 1 );
  _this->DynamicAreaHead2.ZoneNum = 3;
  EwRetainString( &_this->DynamicAreaHead2.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList2, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList2, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList2, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList2, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList2, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList2, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead3, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead3, 1 );
  _this->DynamicAreaHead3.ZoneNum = 4;
  EwRetainString( &_this->DynamicAreaHead3.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList3, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList3, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList3, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList3, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList3, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList3, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead4, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead4, 1 );
  _this->DynamicAreaHead4.ZoneNum = 5;
  EwRetainString( &_this->DynamicAreaHead4.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList4, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList4, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList4, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList4, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList4, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList4, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead5, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead5, 1 );
  _this->DynamicAreaHead5.ZoneNum = 6;
  EwRetainString( &_this->DynamicAreaHead5.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList5, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList5, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList5, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList5, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList5, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList5, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead6, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead6, 1 );
  _this->DynamicAreaHead6.ZoneNum = 7;
  EwRetainString( &_this->DynamicAreaHead6.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList6, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList6, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList6, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList6, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList6, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList6, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead7, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead7, 1 );
  _this->DynamicAreaHead7.ZoneNum = 8;
  EwRetainString( &_this->DynamicAreaHead7.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList7, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList7, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList7, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList7, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList7, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList7, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead8, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead8, 1 );
  _this->DynamicAreaHead8.ZoneNum = 9;
  EwRetainString( &_this->DynamicAreaHead8.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList8, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList8, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList8, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList8, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList8, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList8, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead9, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead9, 1 );
  _this->DynamicAreaHead9.ZoneNum = 10;
  EwRetainString( &_this->DynamicAreaHead9.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList9, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList9, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList9, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList9, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList9, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList9, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead10, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead10, 1 );
  _this->DynamicAreaHead10.ZoneNum = 11;
  EwRetainString( &_this->DynamicAreaHead10.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList10, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList10, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList10, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList10, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList10, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList10, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead11, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead11, 1 );
  _this->DynamicAreaHead11.ZoneNum = 12;
  EwRetainString( &_this->DynamicAreaHead11.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList11, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList11, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList11, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList11, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList11, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList11, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead12, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead12, 1 );
  _this->DynamicAreaHead12.ZoneNum = 13;
  EwRetainString( &_this->DynamicAreaHead12.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList12, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList12, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList12, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList12, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList12, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList12, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead13, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead13, 1 );
  _this->DynamicAreaHead13.ZoneNum = 14;
  EwRetainString( &_this->DynamicAreaHead13.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList13, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList13, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList13, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList13, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList13, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList13, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead14, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead14, 1 );
  _this->DynamicAreaHead14.ZoneNum = 15;
  EwRetainString( &_this->DynamicAreaHead14.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList14, _Const00AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList14, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList14, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList14, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList14, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList14, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->DynamicAreaHead15, _Const00AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->DynamicAreaHead15, 1 );
  _this->DynamicAreaHead15.ZoneNum = 16;
  EwRetainString( &_this->DynamicAreaHead15.stringstart, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList15, _Const00AF );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->VerticalList15, 1 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList15, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList15, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList15, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList15, EW_CLASS( ApplicationDeviceItem 
  ));
  CoreRectView__OnSetBounds( &_this->Bevel, _Const009C );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00B3 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DynamicAreaHead15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationEnableDisable_ScrollDragSlot 
  );
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList1.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList2.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList3.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList4.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList5.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList6.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList7.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList8.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList9.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList10.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList11.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList12.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList13.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList14.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VerticalList15.OnLoadItem = EwNewSlot( _this, ApplicationEnableDisable_OnLoadItem 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationEnableDisable_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
}

/* Re-Initializer for the class 'Application::EnableDisable' */
void ApplicationEnableDisable__ReInit( ApplicationEnableDisable _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreOutline__ReInit( &_this->Outline );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead );
  CoreVerticalList__ReInit( &_this->VerticalList );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead1 );
  CoreVerticalList__ReInit( &_this->VerticalList1 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead2 );
  CoreVerticalList__ReInit( &_this->VerticalList2 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead3 );
  CoreVerticalList__ReInit( &_this->VerticalList3 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead4 );
  CoreVerticalList__ReInit( &_this->VerticalList4 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead5 );
  CoreVerticalList__ReInit( &_this->VerticalList5 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead6 );
  CoreVerticalList__ReInit( &_this->VerticalList6 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead7 );
  CoreVerticalList__ReInit( &_this->VerticalList7 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead8 );
  CoreVerticalList__ReInit( &_this->VerticalList8 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead9 );
  CoreVerticalList__ReInit( &_this->VerticalList9 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead10 );
  CoreVerticalList__ReInit( &_this->VerticalList10 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead11 );
  CoreVerticalList__ReInit( &_this->VerticalList11 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead12 );
  CoreVerticalList__ReInit( &_this->VerticalList12 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead13 );
  CoreVerticalList__ReInit( &_this->VerticalList13 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead14 );
  CoreVerticalList__ReInit( &_this->VerticalList14 );
  ApplicationDynamicAreaHead__ReInit( &_this->DynamicAreaHead15 );
  CoreVerticalList__ReInit( &_this->VerticalList15 );
  ViewsBevel__ReInit( &_this->Bevel );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
}

/* Finalizer method for the class 'Application::EnableDisable' */
void ApplicationEnableDisable__Done( ApplicationEnableDisable _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationEnableDisable );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreOutline__Done( &_this->Outline );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead );
  CoreVerticalList__Done( &_this->VerticalList );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead1 );
  CoreVerticalList__Done( &_this->VerticalList1 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead2 );
  CoreVerticalList__Done( &_this->VerticalList2 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead3 );
  CoreVerticalList__Done( &_this->VerticalList3 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead4 );
  CoreVerticalList__Done( &_this->VerticalList4 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead5 );
  CoreVerticalList__Done( &_this->VerticalList5 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead6 );
  CoreVerticalList__Done( &_this->VerticalList6 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead7 );
  CoreVerticalList__Done( &_this->VerticalList7 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead8 );
  CoreVerticalList__Done( &_this->VerticalList8 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead9 );
  CoreVerticalList__Done( &_this->VerticalList9 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead10 );
  CoreVerticalList__Done( &_this->VerticalList10 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead11 );
  CoreVerticalList__Done( &_this->VerticalList11 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead12 );
  CoreVerticalList__Done( &_this->VerticalList12 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead13 );
  CoreVerticalList__Done( &_this->VerticalList13 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead14 );
  CoreVerticalList__Done( &_this->VerticalList14 );
  ApplicationDynamicAreaHead__Done( &_this->DynamicAreaHead15 );
  CoreVerticalList__Done( &_this->VerticalList15 );
  ViewsBevel__Done( &_this->Bevel );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::EnableDisable' */
void ApplicationEnableDisable__Mark( ApplicationEnableDisable _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->DynamicAreaHead );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->DynamicAreaHead1 );
  EwMarkObject( &_this->VerticalList1 );
  EwMarkObject( &_this->DynamicAreaHead2 );
  EwMarkObject( &_this->VerticalList2 );
  EwMarkObject( &_this->DynamicAreaHead3 );
  EwMarkObject( &_this->VerticalList3 );
  EwMarkObject( &_this->DynamicAreaHead4 );
  EwMarkObject( &_this->VerticalList4 );
  EwMarkObject( &_this->DynamicAreaHead5 );
  EwMarkObject( &_this->VerticalList5 );
  EwMarkObject( &_this->DynamicAreaHead6 );
  EwMarkObject( &_this->VerticalList6 );
  EwMarkObject( &_this->DynamicAreaHead7 );
  EwMarkObject( &_this->VerticalList7 );
  EwMarkObject( &_this->DynamicAreaHead8 );
  EwMarkObject( &_this->VerticalList8 );
  EwMarkObject( &_this->DynamicAreaHead9 );
  EwMarkObject( &_this->VerticalList9 );
  EwMarkObject( &_this->DynamicAreaHead10 );
  EwMarkObject( &_this->VerticalList10 );
  EwMarkObject( &_this->DynamicAreaHead11 );
  EwMarkObject( &_this->VerticalList11 );
  EwMarkObject( &_this->DynamicAreaHead12 );
  EwMarkObject( &_this->VerticalList12 );
  EwMarkObject( &_this->DynamicAreaHead13 );
  EwMarkObject( &_this->VerticalList13 );
  EwMarkObject( &_this->DynamicAreaHead14 );
  EwMarkObject( &_this->VerticalList14 );
  EwMarkObject( &_this->DynamicAreaHead15 );
  EwMarkObject( &_this->VerticalList15 );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->VertScrollbar );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationEnableDisable_UpdateLayout( ApplicationEnableDisable _this, XPoint 
  aSize )
{
  XInt32 size;
  CoreView v;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->Outline.Super1.Bounds 
  ));
  size = 0;
  v = _this->Super1.first;

  while ( v != 0 )
  {
    CoreGroup g = EwCastObject( v, CoreGroup );

    if ( g != 0 )
    {
      if ( CoreGroup_OnGetEmbedded( g ) && CoreGroup_OnGetVisible( g ))
      {
        size = size + EwGetRectH( g->Super1.Bounds );
      }
    }

    v = v->next;
  }

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, size );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationEnableDisable_UpdateViewState( ApplicationEnableDisable _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationEnableDisable_OnLoadItem( ApplicationEnableDisable _this, XObject 
  sender )
{
  XInt32 itemNo = EwCastObject( sender, CoreVerticalList )->Item;
  ApplicationDeviceItem item = EwCastObject( EwCastObject( sender, CoreVerticalList 
    )->View, ApplicationDeviceItem );

  if ( item == 0 )
    return;

  item->UnitNum = itemNo + 1;
  CoreRectView__OnSetBounds( item, EwSetRectSize( item->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));
}

/* 'C' function for method : 'Application::EnableDisable.ScrollDragSlot()' */
void ApplicationEnableDisable_ScrollDragSlot( ApplicationEnableDisable _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'Application::EnableDisable.ScrollPressSlot()' */
void ApplicationEnableDisable_ScrollPressSlot( ApplicationEnableDisable _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VertScrollbar )));
}

/* Variants derived from the class : 'Application::EnableDisable' */
EW_DEFINE_CLASS_VARIANTS( ApplicationEnableDisable )
EW_END_OF_CLASS_VARIANTS( ApplicationEnableDisable )

/* Virtual Method Table (VMT) for the class : 'Application::EnableDisable' */
EW_DEFINE_CLASS( ApplicationEnableDisable, CoreGroup, "Application::EnableDisable" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationEnableDisable_UpdateLayout,
  ApplicationEnableDisable_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationEnableDisable )

/* Font resource : 'Application::FontVerdanaProCondSemiBold18' */
EW_DEFINE_FONT_RES( ApplicationFontVerdanaProCondSemiBold18, 15, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -11, 13, 11, 15, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 4, 0x00000115 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -11, 3, 11, 5, 0x00000115 ),             /* '!' */
  EW_GLYPH( 0x0022, 0, -12, 7, 5, 7, 0x00000172 ),              /* '"' */
  EW_GLYPH( 0x0023, 0, -11, 10, 11, 10, 0x000001D9 ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -12, 8, 15, 8, 0x0000037C ),             /* '$' */
  EW_GLYPH( 0x0025, 0, -11, 14, 11, 15, 0x00000523 ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -11, 11, 11, 10, 0x0000074A ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -12, 3, 5, 4, 0x000008F8 ),              /* ''' */
  EW_GLYPH( 0x0028, 0, -12, 6, 15, 6, 0x0000092A ),             /* '(' */
  EW_GLYPH( 0x0029, 0, -12, 5, 15, 6, 0x00000A1D ),             /* ')' */
  EW_GLYPH( 0x002A, 0, -11, 8, 7, 8, 0x00000AFD ),              /* '*' */
  EW_GLYPH( 0x002B, 0, -10, 10, 10, 9, 0x00000BE5 ),            /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 4, 5, 4, 0x00000CC0 ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -6, 6, 2, 6, 0x00000D09 ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 3, 3, 4, 0x00000D41 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -12, 7, 14, 7, 0x00000D5F ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -11, 8, 11, 8, 0x00000E69 ),             /* '0' */
  EW_GLYPH( 0x0031, 1, -11, 7, 11, 8, 0x00000F92 ),             /* '1' */
  EW_GLYPH( 0x0032, 0, -11, 8, 11, 8, 0x00001045 ),             /* '2' */
  EW_GLYPH( 0x0033, 0, -11, 8, 11, 8, 0x0000117D ),             /* '3' */
  EW_GLYPH( 0x0034, 0, -11, 9, 11, 8, 0x000012E5 ),             /* '4' */
  EW_GLYPH( 0x0035, 0, -11, 8, 11, 8, 0x000013F4 ),             /* '5' */
  EW_GLYPH( 0x0036, 0, -11, 8, 11, 8, 0x00001546 ),             /* '6' */
  EW_GLYPH( 0x0037, 0, -11, 8, 11, 8, 0x00001695 ),             /* '7' */
  EW_GLYPH( 0x0038, 0, -11, 8, 11, 8, 0x000017AB ),             /* '8' */
  EW_GLYPH( 0x0039, 0, -11, 8, 11, 8, 0x0000191C ),             /* '9' */
  EW_GLYPH( 0x003A, 1, -8, 3, 8, 5, 0x00001A84 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -8, 4, 10, 5, 0x00001ADC ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -9, 8, 9, 9, 0x00001B63 ),               /* '<' */
  EW_GLYPH( 0x003D, 1, -8, 8, 5, 9, 0x00001C60 ),               /* '=' */
  EW_GLYPH( 0x003E, 1, -9, 8, 9, 9, 0x00001D34 ),               /* '>' */
  EW_GLYPH( 0x003F, 0, -11, 7, 11, 7, 0x00001E4A ),             /* '?' */
  EW_GLYPH( 0x0040, 0, -11, 13, 13, 13, 0x00001F3F ),           /* '@' */
  EW_GLYPH( 0x0041, -1, -11, 10, 11, 9, 0x000021A0 ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -11, 8, 11, 9, 0x000022E0 ),             /* 'B' */
  EW_GLYPH( 0x0043, 0, -11, 8, 11, 8, 0x00002401 ),             /* 'C' */
  EW_GLYPH( 0x0044, 1, -11, 8, 11, 9, 0x00002534 ),             /* 'D' */
  EW_GLYPH( 0x0045, 1, -11, 7, 11, 8, 0x00002639 ),             /* 'E' */
  EW_GLYPH( 0x0046, 1, -11, 7, 11, 7, 0x00002730 ),             /* 'F' */
  EW_GLYPH( 0x0047, 0, -11, 9, 11, 9, 0x000027F3 ),             /* 'G' */
  EW_GLYPH( 0x0048, 1, -11, 8, 11, 9, 0x0000295D ),             /* 'H' */
  EW_GLYPH( 0x0049, 0, -11, 6, 11, 6, 0x000029FF ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -11, 6, 11, 6, 0x00002A98 ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -11, 8, 11, 9, 0x00002B3F ),             /* 'K' */
  EW_GLYPH( 0x004C, 1, -11, 6, 11, 7, 0x00002C3C ),             /* 'L' */
  EW_GLYPH( 0x004D, 1, -11, 10, 11, 11, 0x00002CAC ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -11, 8, 11, 9, 0x00002DB3 ),             /* 'N' */
  EW_GLYPH( 0x004F, 0, -11, 10, 11, 10, 0x00002E88 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -11, 7, 11, 8, 0x00002FE2 ),             /* 'P' */
  EW_GLYPH( 0x0051, 0, -11, 10, 14, 10, 0x000030BA ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -11, 9, 11, 9, 0x00003263 ),             /* 'R' */
  EW_GLYPH( 0x0053, 0, -11, 8, 11, 8, 0x00003371 ),             /* 'S' */
  EW_GLYPH( 0x0054, 0, -11, 8, 11, 8, 0x000034E3 ),             /* 'T' */
  EW_GLYPH( 0x0055, 0, -11, 9, 11, 9, 0x00003592 ),             /* 'U' */
  EW_GLYPH( 0x0056, -1, -11, 9, 11, 8, 0x0000365B ),            /* 'V' */
  EW_GLYPH( 0x0057, 0, -11, 13, 11, 12, 0x00003777 ),           /* 'W' */
  EW_GLYPH( 0x0058, -1, -11, 10, 11, 8, 0x00003950 ),           /* 'X' */
  EW_GLYPH( 0x0059, -1, -11, 10, 11, 8, 0x00003AA3 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -11, 8, 11, 8, 0x00003BA3 ),             /* 'Z' */
  EW_GLYPH( 0x005B, 1, -12, 5, 15, 6, 0x00003CCE ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -12, 7, 14, 7, 0x00003D5C ),             /* '\' */
  EW_GLYPH( 0x005D, 0, -12, 5, 15, 6, 0x00003E61 ),             /* ']' */
  EW_GLYPH( 0x005E, 0, -11, 9, 6, 9, 0x00003EF4 ),              /* '^' */
  EW_GLYPH( 0x005F, -1, 1, 8, 2, 7, 0x00003FA2 ),               /* '_' */
  EW_GLYPH( 0x0060, 2, -12, 4, 3, 8, 0x00003FEC ),              /* '`' */
  EW_GLYPH( 0x0061, 0, -8, 8, 8, 8, 0x0000401D ),               /* 'a' */
  EW_GLYPH( 0x0062, 0, -12, 8, 12, 8, 0x00004117 ),             /* 'b' */
  EW_GLYPH( 0x0063, 0, -8, 7, 8, 7, 0x00004201 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -12, 8, 12, 8, 0x000042D6 ),             /* 'd' */
  EW_GLYPH( 0x0065, 0, -8, 8, 8, 8, 0x000043BE ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -12, 6, 12, 5, 0x000044BE ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -8, 8, 11, 8, 0x00004579 ),              /* 'g' */
  EW_GLYPH( 0x0068, 0, -12, 8, 12, 8, 0x000046B1 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -11, 3, 11, 4, 0x0000475F ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -11, 5, 14, 5, 0x0000479E ),            /* 'j' */
  EW_GLYPH( 0x006B, 0, -12, 9, 12, 8, 0x00004856 ),             /* 'k' */
  EW_GLYPH( 0x006C, 0, -12, 3, 12, 4, 0x0000494D ),             /* 'l' */
  EW_GLYPH( 0x006D, 0, -8, 13, 8, 13, 0x0000497E ),             /* 'm' */
  EW_GLYPH( 0x006E, 0, -8, 8, 8, 8, 0x00004A77 ),               /* 'n' */
  EW_GLYPH( 0x006F, 0, -8, 8, 8, 8, 0x00004B05 ),               /* 'o' */
  EW_GLYPH( 0x0070, 0, -8, 8, 11, 8, 0x00004BF7 ),              /* 'p' */
  EW_GLYPH( 0x0071, 0, -8, 8, 11, 8, 0x00004CEF ),              /* 'q' */
  EW_GLYPH( 0x0072, 0, -8, 6, 8, 6, 0x00004DE7 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -8, 7, 8, 7, 0x00004E51 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -11, 5, 11, 5, 0x00004F56 ),             /* 't' */
  EW_GLYPH( 0x0075, 0, -8, 8, 8, 8, 0x00004FDA ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -8, 8, 8, 8, 0x00005060 ),               /* 'v' */
  EW_GLYPH( 0x0077, 0, -8, 12, 8, 11, 0x00005144 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -8, 8, 8, 7, 0x00005299 ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -8, 8, 11, 8, 0x00005394 ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -8, 7, 8, 7, 0x000054A9 ),               /* 'z' */
  EW_GLYPH( 0x007B, 0, -12, 7, 15, 7, 0x0000558A ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -12, 2, 15, 6, 0x000056AA ),             /* '|' */
  EW_GLYPH( 0x007D, 0, -12, 7, 15, 7, 0x000056D0 ),             /* '}' */
  EW_GLYPH( 0x007E, 0, -7, 10, 4, 10, 0x000057F1 ),             /* '~' */

  EW_FONT_PIXEL( ApplicationFontVerdanaProCondSemiBold18, 0x000058A0 )/* ratio 75.60 % */
    0xF7BDEF71, 0x0DEF7BDE, 0xF7BDEF79, 0x00137BDE, 0x00000000, 0x00000000, 0x80000000,
    0x7BDEF7BC, 0x77E9BDEF, 0x11821217, 0x8CF3985C, 0xFDE42CEF, 0x4C31DDFB, 0x91486041,
    0xE020460E, 0xF0C0F396, 0x8CA82C64, 0x76EFC915, 0x72EE2FDE, 0x3E5F98BF, 0x7E2AA3DF,
    0xA9279E4F, 0xDD61E1C8, 0x7E76EE2F, 0x6F9F2F9E, 0x33E577D4, 0x29E793CE, 0x80A32A2A,
    0xF18005E7, 0x15FFE6FD, 0x56B1AAFF, 0x7CFBF454, 0xC24FF837, 0xDF5BEA33, 0xD9E57F60,
    0xEBD673C5, 0xEB14819F, 0xC6F3CEFE, 0xCE566AB7, 0xFFF7E67F, 0x00006FD6, 0x17F7FE30,
    0xF44E0B38, 0x185A63F3, 0xFC55ADF9, 0xE610605E, 0xFC20C058, 0x2FEFFD66, 0xAAD6FE46,
    0xAC5F7C67, 0xFCFD1DA7, 0x76F119DE, 0xFEFFC63D, 0x1A69DF2A, 0xD315DE01, 0x7F2A0234,
    0x0F5DBC46, 0x58BE4AF4, 0x73BF1B4F, 0xDEA700BE, 0x73221A7A, 0x1CC884B5, 0xF8DE0D8F,
    0x45205CF7, 0xDEA7FBB6, 0x10FF1BE7, 0x72F9E76C, 0x97EAD82B, 0xBF98BF36, 0xD3788DF7,
    0xEB59EAF8, 0xF79B8DFF, 0x0E610A46, 0x14E71131, 0x9F2598BF, 0x8F133E68, 0x4831911F,
    0x06900003, 0xFCA06322, 0x4F1899F0, 0xAAB17E34, 0xF51E8FEF, 0x318CBD70, 0x863F3F06,
    0x301934C1, 0x830C9A60, 0x9646AD9F, 0x03D47AD6, 0x25F887EB, 0xAF7B92DE, 0xBF78AE7F,
    0xC46FCF1A, 0x7E78D5FB, 0xFEBDEE43, 0x7897E2B9, 0x007F710B, 0xAC000000, 0xF7BA8F7B,
    0xA8955646, 0xF7EFCF2A, 0x5FBF7E79, 0x00000000, 0x2BCA7EFA, 0xA9F118C7, 0xEF7B9E98,
    0x3333227D, 0x05EECAD6, 0x5F81F758, 0x813C7214, 0x145F81C7, 0xC7813C72, 0x72145F81,
    0x81C7813C, 0x3C62145F, 0x3FC0E581, 0xF9CF780A, 0xB239BE0D, 0xBFE2788E, 0xC51E7C9F,
    0x21830FF6, 0x30880101, 0xD8B1F218, 0xFEE4F1FE, 0x66F8F93D, 0xEEB1753E, 0x30BDFBC3,
    0x277B809F, 0x00000000, 0xEF2BF7E0, 0xA34AA9EF, 0xF3DF7A32, 0xA965721B, 0xBBF3BE23,
    0x310F9591, 0xA078CC80, 0xC67CC0AD, 0x3F8EF98B, 0x60FF5BE6, 0x5FBF7CBE, 0x23555507,
    0x1BF3DF7A, 0xFA8D6572, 0xEFCEFC47, 0x4593C4FF, 0xF71878CE, 0x8D441FEF, 0xBDBF9171,
    0x19C704C6, 0xFF53BF89, 0xAE57FBFD, 0x73C6A27A, 0xC1FEFA03, 0x25FC80B3, 0xDE0BC670,
    0xECE60B3C, 0xBBDEFE01, 0xAAA31DE5, 0xDFE8A886, 0x5F8D77EF, 0xDEE00002, 0x445DEF7B,
    0xFCF25555, 0x03DFBF7E, 0xAFEF73C0, 0xFA8E6B18, 0x5DDF7ED2, 0x322D81F1, 0xFFD773F1,
    0xCE47FDF7, 0x3C67CCF5, 0x7B9DF91B, 0x33CFD8C2, 0xEFDF1B93, 0x1EA351DD, 0x4E77E218,
    0x6B4C6A3B, 0x7CFF76F1, 0x9B28CA07, 0xBEAA33C7, 0x59BF1D7E, 0xB9E7BE2B, 0x7F7BDEF7,
    0xD4955551, 0x4DFBF7EF, 0x1315187F, 0x62A30BDA, 0xF2056BC2, 0x24F683F1, 0x8BF0BCB2,
    0xB9DF901A, 0xD4FD8A7B, 0x78A9F7CC, 0x8767F7BE, 0x9C6AA709, 0x84E59FB7, 0xCF7D4399,
    0xFEF98DF9, 0xF854751D, 0xEB17E213, 0xFF1DE3EB, 0x23DF15AA, 0x437E73BF, 0xE7A9E7EC,
    0xBF3C6F9F, 0xF0DF8DEF, 0x40E93CA7, 0x2FAFCDFE, 0x3CF3E5F5, 0xFFBFF3D2, 0x7D7C81E3,
    0x63B7DF7E, 0xBE7A9E0D, 0xFF17DEF6, 0xD42AD7FE, 0xE1FF7FAA, 0xF7F82FBD, 0xEF02AD5F,
    0xE65F957D, 0x6BB5E593, 0xAC0FD100, 0xE74EB0BB, 0xF3A73CF7, 0xB5138FDB, 0xFF51DC1F,
    0xF7AFDA89, 0x3DFF313F, 0x69D607DE, 0xBDEF7BBF, 0xCE73D9F7, 0xEF5CE739, 0x3BEFBEFB,
    0x7BDEF77E, 0x9CE7B3EF, 0x3EF9CE73, 0xE0BB7E40, 0x45DBF95B, 0xFBF95DF4, 0xA8FFD125,
    0x78FFBE45, 0x9F3DDF2A, 0xCCEF17FF, 0xB7F24BFD, 0xB9DF8C07, 0x53CF51FB, 0xBF3AABE3,
    0xB81FF2DF, 0x9E7F3E20, 0x7CE8B39D, 0x9F60B05F, 0x00067380, 0x7E7BEF44, 0x7B8EE413,
    0x10FFFDCF, 0xF5077BF7, 0x35CEF2F3, 0xA7DDF9F6, 0x19D79857, 0x19518C51, 0x7F73E54F,
    0x5C221998, 0x7B60840B, 0x8A9E3220, 0x653C5F79, 0x4C65F89D, 0xD7527DDF, 0x7BCFFCF3,
    0xFF11FDEF, 0x7180275F, 0x03FF7BDD, 0x180BBFF0, 0x231407E9, 0x40F4CFC1, 0xB0D9F18C,
    0xE05446FC, 0xC7852CAF, 0x62A5D3BE, 0xF8ABDF7C, 0xCCCF3DFB, 0xFE50A528, 0x17BBDEF7,
    0xE17B27CC, 0x841B5EFD, 0xE37EB581, 0x707A7745, 0x80BE37EF, 0x1881E327, 0x63BBEF16,
    0xFF34E60C, 0xBF39DF18, 0xE78FFEA9, 0xCE78E9F9, 0xF8637CEF, 0x40463D61, 0xF02C2058,
    0xFD230118, 0x39E378F0, 0xFFAB7FBF, 0xEF7D99E3, 0x2A07BF3D, 0xDBF17BEB, 0x78C1663B,
    0x80F0C1FD, 0x6012C025, 0x1F4C607B, 0x0D63BDBF, 0xEED7EB2A, 0x41DEF7BD, 0xFBF05555,
    0xE0097EFD, 0x82FDFBF7, 0x7BDC2AAA, 0xFC00006F, 0x525FBF7E, 0xDEF71555, 0x55506F7B,
    0xF7EFDF85, 0xDFBF000B, 0x0EAAA16F, 0x002FBDEE, 0xBF200000, 0x630AF773, 0xA7A2A33F,
    0xFBFFF31B, 0x3446317F, 0x00C8F99E, 0xFDEF7161, 0x787CC585, 0x918FEF24, 0xA37818B1,
    0xFEA36FF7, 0xF7CE564F, 0x1F77E0DE, 0xF6000000, 0x6640FFFF, 0x0B7B9C06, 0x80000000,
    0x4FBDEF75, 0xC7CF1516, 0x000000AF, 0xF8F9E000, 0xFE151655, 0x2AA5DEF7, 0x000AFEF1,
    0x25000000, 0xC67FBF7E, 0x8BEB278A, 0x139E437B, 0xE817E270, 0x95A83CF1, 0x0379F83F,
    0x378F00C2, 0x05E337E1, 0xBC40F51D, 0x7D91AC1A, 0x0000006F, 0x80000000, 0x51FBF7EF,
    0x87EF7555, 0xC15177BC, 0x04F26207, 0x82C9E7D4, 0x0FEB7593, 0x0FE7DE4F, 0xF813153C,
    0x06DE404C, 0xF7B80000, 0x1787DD61, 0x1C440A30, 0xE093D630, 0xCCF903E7, 0x504C4E0B,
    0xF0178023, 0x9CEFD424, 0xEAFCF12F, 0xED2767C9, 0xAF19EDFD, 0x54FC98CA, 0x064907A4,
    0x1E900080, 0x8B195924, 0x7FAD0A9F, 0xFCF3467B, 0x3FE7C9EA, 0xEFCF7BDC, 0x0F7D6541,
    0x940EDDBF, 0xFEF26505, 0x53E65E3A, 0xBF39C1FF, 0x50000001, 0xC4BE73BF, 0x9F27ABF3,
    0xEDFEB49D, 0xB191AF19, 0x83C794F8, 0x010008C1, 0xB2083D20, 0x42A98A22, 0x8DEFDEFB,
    0x9F397E66, 0xBD9E06FC, 0xEF3F0174, 0xFD68C17A, 0x7FDEF7B8, 0x2F5CAA83, 0x02D7BF7C,
    0x80CB004A, 0xAC34FD77, 0x4CE0AF8E, 0x16B37807, 0x601DE270, 0x77C438CC, 0x7EC37EEE,
    0x4F55AE6A, 0xDDFDEFCE, 0x96440C35, 0x7C92BFE7, 0x0BFFFB23, 0x544F7CF3, 0xF53EF9E3,
    0xF7332C0C, 0x33BFDF7E, 0xEF9F3997, 0xEF7BDFF9, 0xA2AAFFBD, 0xC7DFDEAA, 0x0002F7EF,
    0x00000000, 0xBDC40000, 0x0005F758, 0x00000000, 0x2A440000, 0xFBE7E3B6, 0xBE69CAED,
    0x70DCF959, 0x56EE326E, 0x2ED9478A, 0x561E56DB, 0x9911CC94, 0x6CB3CA0F, 0x50AFFB6C,
    0x8C40C546, 0xF0A81467, 0xEF879B07, 0x7E0EE726, 0xE194DFC7, 0xDB0C79E1, 0x1E18CAE4,
    0xE58F1B69, 0xA319722F, 0xCAC5BF86, 0x31BF9E78, 0x715BF922, 0x3079E797, 0x17C655FC,
    0x548A8F03, 0x1E911FC3, 0x06582CFE, 0xB77E2443, 0x9B427389, 0x630DE3A1, 0x85CAE746,
    0x4346F58E, 0x01E351BC, 0x7C980F93, 0x6318DE20, 0x1FB74742, 0x2AB31CC6, 0xDED35717,
    0x77E16FB0, 0x6A3357A7, 0xE518CF4C, 0xF275E2F5, 0xF19E0F19, 0x1AB41ABC, 0x00BD2A05,
    0x00000000, 0xF7BDEE78, 0xAAAA37DE, 0x7EFDFA88, 0xDA22F17F, 0x0B18E81B, 0xE6D0BA63,
    0x6868ACC0, 0xFFE1581D, 0x545EFDFB, 0xEF7BD555, 0x9C1CD45D, 0x000000B7, 0xE0000000,
    0xF5D3C1AE, 0x0B7F01BB, 0x3D443F96, 0x5828FF01, 0x013D440E, 0x071E0A3B, 0xBF013C72,
    0xC81C7828, 0xA2FC04F1, 0xDAEF7BDE, 0x3FBCF073, 0x00000000, 0xB5A80000, 0xBA8177F9,
    0x03D5A03F, 0xD0D13C73, 0xD1737BF1, 0x9BE56331, 0x45F9A339, 0xDEF7BDC7, 0xEEEE8BFB,
    0x25BF93EE, 0xDB3A1BC7, 0x97CF7FEF, 0xC39EBA78, 0x2397D7AF, 0x49BFF7D4, 0x93FF66FD,
    0xC7127EBF, 0x3D64DE7D, 0xB8922FCF, 0x0000007F, 0x91A73E80, 0xFC935963, 0x1E0FEDBD,
    0x31E01013, 0x97B67319, 0x37C77FF1, 0x6FCE77C4, 0x5ACF3FF8, 0xBDF8C6B3, 0x704286BB,
    0x93C46D21, 0xB95FADF5, 0x5816BD4F, 0x00000177, 0xFFFDDFC8, 0xD43EAA70, 0x31FADFC8,
    0x09480014, 0x97EDEA2A, 0x858D72F8, 0x92F9CF78, 0x1D6FBD6F, 0x35CE6B55, 0x99CF30C6,
    0x3BDEF7D0, 0xD46A0D86, 0xFF877B37, 0x04F3EF53, 0x9FA539DF, 0xBBCA5DE7, 0xA5F83086,
    0xFAC277F3, 0x02778679, 0xE4000000, 0x777FFEEF, 0xA4DF5539, 0xC7D6FE46, 0x25200050,
    0x7DFA8A97, 0x89F2F893, 0xDF9FFA85, 0xFBDF7C30, 0x9AE4A33D, 0xFEE2FF35, 0x00000001,
    0xC8BCFFD6, 0xF90F996F, 0x1704A6FF, 0x80000000, 0xC6F7037B, 0x000000BD, 0x9E01FDCF,
    0xF7BBF3FB, 0x1F3C4CE7, 0x98000000, 0x7FDB79E2, 0xDC5731AC, 0x0000003F, 0x0FF3C800,
    0x77809C70, 0x8CC603BC, 0x0FC46209, 0x01E7CEE4, 0x3500BF5E, 0x1FEE27E3, 0x40000000,
    0x9FFAFFDC, 0x2FF3BE37, 0x1BCCB7E4, 0xFFC87E4F, 0x2FDFCD37, 0x32EB8063, 0x00000001,
    0xB8800000, 0x2F3FF5FF, 0x43E65BF2, 0xC129BFFE, 0x00000005, 0xFCE77C40, 0x56B3FF92,
    0xF79E355D, 0x7F0E727D, 0xFA400EFE, 0x9F279C73, 0xFBA72B5E, 0xB8AEB7CC, 0x234E75FF,
    0xE49ACB7F, 0x3C1FDB7E, 0x63C02026, 0x2F6CE632, 0x06F8EFFE, 0x0FFF77E3, 0xBBF90000,
    0x4E5DDFFF, 0x91A8B7D5, 0x2863F5BF, 0x54129000, 0xC4BEFBD4, 0xEA172B97, 0x00077E7F,
    0xFAFFB880, 0xEC0FC66F, 0x000C66FF, 0xFFCC0000, 0x9DEA7FFD, 0xD86337DF, 0x44F1DACF,
    0x7B94DFFF, 0xFB233B99, 0xAF7351DF, 0xBD6A7B67, 0x7B86FCDF, 0xBDCFE001, 0x6B27BA3F,
    0xF8608001, 0xC554775E, 0x02EEB3FD, 0x00000000, 0x7DFC8897, 0x263E5F13, 0x77583BBF,
    0xC5F8FDFE, 0xF1C8F15A, 0xC78E5444, 0x78EDFAE1, 0x82A9E278, 0x45FC0E95, 0xEE30DDF1,
    0xAFE37BC7, 0xE23514FC, 0x151157F1, 0xC62B3259, 0xA6C7FF1B, 0xB53CF4C6, 0x91DED8A3,
    0x1283E73B, 0x88D88F3F, 0xE62A64A1, 0xC7F9C57D, 0xF17E39AC, 0xF3CE3786, 0xFC66F914,
    0x9EA24FE0, 0xBE378972, 0x765F9639, 0xBBF9BE74, 0xF1D77583, 0xC4F98BF1, 0x15854632,
    0xFBF973F5, 0x3950F13F, 0x07C3C173, 0xFBF80E5B, 0x466132C0, 0xF7BDD605, 0x3BBAB7DE,
    0xA896B19C, 0x23F378C5, 0xF97C138E, 0x79C5560E, 0x9CC475DF, 0x7DF6A373, 0x13678EF1,
    0x8003DF99, 0xAF10B480, 0xB59E73CD, 0x8C951598, 0x12868F5F, 0x44004C30, 0xCBE0F7E4,
    0x000BDF67, 0xDDEF0000, 0xC5C6BB03, 0x86018BF3, 0xF0184000, 0xE6B583F3, 0x3C4F187D,
    0xDF7F3793, 0x80002960, 0xF60CCBE7, 0xFFD42F93, 0xC5773C7C, 0x49F9E397, 0x3FFAC4F9,
    0xF0A8DE75, 0x17E32DF7
EW_END_OF_FONT_RES( ApplicationFontVerdanaProCondSemiBold18 )

/* Table with links to derived variants of the font resource : 'Application::FontVerdanaProCondSemiBold18' */
EW_RES_WITHOUT_VARIANTS( ApplicationFontVerdanaProCondSemiBold18 )

/* Initializer for the class 'Application::MenuItem' */
void ApplicationMenuItem__Init( ApplicationMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00B4 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00B5 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const00B4 );
  ViewsRectangle_OnSetColorBL( &_this->Background, _Const00B6 );
  ViewsRectangle_OnSetColorBR( &_this->Background, _Const00B6 );
  ViewsRectangle_OnSetColorTR( &_this->Background, _Const00B7 );
  ViewsRectangle_OnSetColorTL( &_this->Background, _Const00B7 );
  ViewsRectangle_OnSetColor( &_this->Background, _Const00B8 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const00B4 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0052 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0053 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0053 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0052 );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const00B4 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const00B9 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const00BA );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const009E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  _this->SimpleTouchHandler.OnLeave = EwNewSlot( _this, ApplicationMenuItem_Leave 
  );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, ApplicationMenuItem_Release 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationMenuItem_Press 
  );
}

/* Re-Initializer for the class 'Application::MenuItem' */
void ApplicationMenuItem__ReInit( ApplicationMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->Text1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'Application::MenuItem' */
void ApplicationMenuItem__Done( ApplicationMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Background );
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->Text1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MenuItem' */
void ApplicationMenuItem__Mark( ApplicationMenuItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->SimpleTouchHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMenuItem_UpdateLayout( ApplicationMenuItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMenuItem_UpdateViewState( ApplicationMenuItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::MenuItem.Leave()' */
void ApplicationMenuItem_Leave( ApplicationMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->pressed )
  {
    XColor t;
    _this->pressed = 0;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* 'C' function for method : 'Application::MenuItem.Press()' */
void ApplicationMenuItem_Press( ApplicationMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->pressed )
  {
    XColor t;
    _this->pressed = 1;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y + 2 ));
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* 'C' function for method : 'Application::MenuItem.Release()' */
void ApplicationMenuItem_Release( ApplicationMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->pressed )
  {
    XColor t;
    _this->pressed = 0;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
  }

  ApplicationTabButtonPull_MenuChoice( EwCastObject( _this->Super3.Owner->Super2.Owner, 
  ApplicationTabButtonPull ), _this );
}

/* Variants derived from the class : 'Application::MenuItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMenuItem )
EW_END_OF_CLASS_VARIANTS( ApplicationMenuItem )

/* Virtual Method Table (VMT) for the class : 'Application::MenuItem' */
EW_DEFINE_CLASS( ApplicationMenuItem, CoreGroup, "Application::MenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMenuItem_UpdateLayout,
  ApplicationMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMenuItem )

/* Initializer for the class 'Application::CAEComponent' */
void ApplicationCAEComponent__Init( ApplicationCAEComponent _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEComponent );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00BB );

  /* Call the user defined constructor */
  ApplicationCAEComponent_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::CAEComponent' */
void ApplicationCAEComponent__ReInit( ApplicationCAEComponent _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEComponent' */
void ApplicationCAEComponent__Done( ApplicationCAEComponent _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEComponent );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEComponent' */
void ApplicationCAEComponent__Mark( ApplicationCAEComponent _this )
{
  EwMarkObject( _this->CAERoot );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method Draw() is invoked automatically if parts of the view should be redrawn 
   on the screen. This can occur when e.g. the view has been moved or the appearance 
   of the view has changed before.
   Draw() is invoked automatically by the framework, you never will need to invoke 
   this method directly. However you can request an invocation of this method by 
   calling the method InvalidateArea() of the views @Owner. Usually this is also 
   unnecessary unless you are developing your own view.
   The passed parameters determine the drawing destination aCanvas and the area 
   to redraw aClip in the coordinate space of the canvas. The parameter aOffset 
   contains the displacement between the origin of the views owner and the origin 
   of the canvas. You will need it to convert views coordinates into these of the 
   canvas.
   The parameter aOpacity contains the opacity descended from this view's @Owner. 
   It lies in range 0 .. 255. If the view implements its own 'Opacity', 'Color', 
   etc. properties, the Draw() method should calculate the resulting real opacity 
   by mixing the values of these properties with the one passed in aOpacity parameter.
   The parameter aBlend contains the blending mode descended from this view's @Owner. 
   It determines, whether the view should be drawn with alpha-blending active or 
   not. If aBlend is false, the outputs of the view should overwrite the corresponding 
   pixel in the drawing destination aCanvas. If aBlend is true, the outputs should 
   be mixed with the pixel already stored in aCanvas. For this purpose all Graphics 
   Engine functions provide a parameter to specify the mode for the respective drawing 
   operation. If the view implements its own 'Blend' property, the Draw() method 
   should calculate the resulting real blend mode by using logical AND operation 
   of the value of the property and the one passed in aBlend parameter. */
void ApplicationCAEComponent_Draw( ApplicationCAEComponent _this, GraphicsCanvas 
  aCanvas, XRect aClip, XPoint aOffset, XInt32 aOpacity, XBool aBlend )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aBlend );
  EW_UNUSED_ARG( aOpacity );

  ApplicationCAEModule__Render( _this->CAERoot, EwMovePointPos( _this->Super2.Bounds.Point1, 
  aOffset ), aClip, aCanvas );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationCAEComponent_UpdateLayout( ApplicationCAEComponent _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationCAEComponent_UpdateViewState( ApplicationCAEComponent _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationCAEComponent_Init( ApplicationCAEComponent _this, XHandle aArg )
{
  ApplicationCAEDevice alarm_dev;
  ApplicationCAEZoneFireAlarm alarms;
  ApplicationCAEZoneSmokeDetectors smokes;
  ApplicationCAECompare comp;
  ApplicationCAEGateAND and;
  ApplicationCAEGateOR or;
  ApplicationCAEGateAND and2;
  ApplicationCAEDayNight dn;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  alarm_dev = EwNewObject( ApplicationCAEDevice, 0 );
  alarm_dev->UnitNum = 3;
  alarm_dev->ZoneNum = 15;
  alarm_dev->type = EwLoadResource( &ApplicationFireAlarmBitmap, ResourcesBitmap 
  );
  alarms = EwNewObject( ApplicationCAEZoneFireAlarm, 0 );
  smokes = EwNewObject( ApplicationCAEZoneSmokeDetectors, 0 );
  comp = EwNewObject( ApplicationCAECompare, 0 );
  comp->Input = ((ApplicationCAEModule)smokes );
  alarms->Super1.ZoneNum = 5;
  smokes->Super1.ZoneNum = 6;
  and = EwNewObject( ApplicationCAEGateAND, 0 );
  and->Super1.InputA = ((ApplicationCAEModule)alarm_dev );
  and->Super1.InputB = ((ApplicationCAEModule)comp );
  or = EwNewObject( ApplicationCAEGateOR, 0 );
  or->Super1.InputA = ((ApplicationCAEModule)and );
  or->Super1.InputB = ((ApplicationCAEModule)and );
  and2 = EwNewObject( ApplicationCAEGateAND, 0 );
  dn = EwNewObject( ApplicationCAEDayNight, 0 );
  dn->Input = ((ApplicationCAEModule)and );
  and2->Super1.InputA = ((ApplicationCAEModule)dn );
  and2->Super1.InputB = ((ApplicationCAEModule)or );
  ApplicationCAEComponent_OnSetCAERoot( _this, ((ApplicationCAEModule)EwNewObject( 
  ApplicationCAEAction, 0 )));
  EwCastObject( _this->CAERoot, ApplicationCAEAction )->Input = ((ApplicationCAEModule)and2 
  );
  CoreRectView__OnSetBounds( _this, EwSetRectSize( _this->Super2.Bounds, ApplicationCAEModule__Size( 
  _this->CAERoot )));
}

/* 'C' function for method : 'Application::CAEComponent.OnSetCAERoot()' */
void ApplicationCAEComponent_OnSetCAERoot( ApplicationCAEComponent _this, ApplicationCAEModule 
  value )
{
  if ( _this->CAERoot == value )
    return;

  _this->CAERoot = value;
}

/* Variants derived from the class : 'Application::CAEComponent' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEComponent )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEComponent )

/* Virtual Method Table (VMT) for the class : 'Application::CAEComponent' */
EW_DEFINE_CLASS( ApplicationCAEComponent, CoreGroup, "Application::CAEComponent" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  ApplicationCAEComponent_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationCAEComponent_UpdateLayout,
  ApplicationCAEComponent_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationCAEComponent )

/* Initializer for the class 'Application::CauseAndEffects' */
void ApplicationCauseAndEffects__Init( ApplicationCauseAndEffects _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  ApplicationCAEComponent__Init( &_this->CAEComponent, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->InputVerticalList, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->OutputVerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCauseAndEffects );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00BC );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00BD );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 1 );
  CoreRectView__OnSetBounds( &_this->Outline, _Const00BE );
  CoreOutline_OnSetSpace( &_this->Outline, 0 );
  CoreOutline_OnSetFormation( &_this->Outline, CoreFormationTopToBottom );
  CoreRectView__OnSetBounds( &_this->CAEComponent, _Const00BF );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->CAEComponent, 1 );
  CoreRectView__OnSetBounds( &_this->InputVerticalList, _Const00C0 );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputVerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->InputVerticalList, 35 );
  CoreVerticalList_OnSetNoOfItems( &_this->InputVerticalList, 4 );
  CoreVerticalList_OnSetItemClass( &_this->InputVerticalList, EW_CLASS( ApplicationInputItem 
  ));
  CoreRectView__OnSetBounds( &_this->OutputVerticalList, _Const00C1 );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputVerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->OutputVerticalList, 35 );
  CoreVerticalList_OnSetNoOfItems( &_this->OutputVerticalList, 4 );
  CoreVerticalList_OnSetItemClass( &_this->OutputVerticalList, EW_CLASS( ApplicationOutputItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const00BD );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetFriction( &_this->SlideTouchHandler, 0.200000f );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const00BD );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const00C2 );
  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 99 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationCAEName 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler1, _Const00C2 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->SlideTouchHandler1, _Const00C3 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const00C4 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const00C5 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const00C6 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const00C7 );
  _this->SimpleTouchHandler.RetargetCondition = CoreRetargetReasonLongPress | CoreRetargetReasonWipeDown 
  | CoreRetargetReasonWipeLeft | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00C8 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const00C9 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00CA 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const00CB );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton1, 13 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const00CC );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton2, 12 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CAEComponent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputVerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputVerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  _this->InputVerticalList.OnLoadItem = EwNewSlot( _this, ApplicationCauseAndEffects_OnLoadInputItem 
  );
  _this->OutputVerticalList.OnLoadItem = EwNewSlot( _this, ApplicationCauseAndEffects_OnLoadOutputItem 
  );
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationCauseAndEffects_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationCauseAndEffects_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler1 
  );
  _this->SimpleTouchHandler.OnRelease = EwNullSlot;
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationCauseAndEffects_ClickSlot 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationCauseAndEffects_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationCauseAndEffects_TopSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationCauseAndEffects_Down 
  );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton1, EwLoadResource( &FlatFlatDemoIcons, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNewSlot( _this, ApplicationCauseAndEffects_Up 
  );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton2, EwLoadResource( &FlatFlatDemoIcons, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  ApplicationCauseAndEffects_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::CauseAndEffects' */
void ApplicationCauseAndEffects__ReInit( ApplicationCauseAndEffects _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreOutline__ReInit( &_this->Outline );
  ApplicationCAEComponent__ReInit( &_this->CAEComponent );
  CoreVerticalList__ReInit( &_this->InputVerticalList );
  CoreVerticalList__ReInit( &_this->OutputVerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'Application::CauseAndEffects' */
void ApplicationCauseAndEffects__Done( ApplicationCauseAndEffects _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCauseAndEffects );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreOutline__Done( &_this->Outline );
  ApplicationCAEComponent__Done( &_this->CAEComponent );
  CoreVerticalList__Done( &_this->InputVerticalList );
  CoreVerticalList__Done( &_this->OutputVerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ViewsBevel__Done( &_this->Bevel );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CauseAndEffects' */
void ApplicationCauseAndEffects__Mark( ApplicationCauseAndEffects _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->CAEComponent );
  EwMarkObject( &_this->InputVerticalList );
  EwMarkObject( &_this->OutputVerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationCauseAndEffects_UpdateLayout( ApplicationCauseAndEffects _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, (( EwGetRectH( 
  _this->CAEComponent.Super2.Bounds ) + ( _this->Outline.Space * 2 )) + EwGetRectH( 
  _this->OutputVerticalList.Super2.Bounds )) + EwGetRectH( _this->InputVerticalList.Super2.Bounds 
  ));
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->Outline.Super1.Bounds 
  ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationCauseAndEffects_UpdateViewState( ApplicationCauseAndEffects _this, 
  XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationCauseAndEffects_Init( ApplicationCauseAndEffects _this, XHandle 
  aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  CoreRectView__OnSetBounds( &_this->CAEComponent, EwSetRectSize( _this->CAEComponent.Super2.Bounds, 
  EwMovePointPos( ApplicationCAEModule__Size( _this->CAEComponent.CAERoot ), _Const00CD 
  )));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationCauseAndEffects_OnLoadInputItem( ApplicationCauseAndEffects _this, 
  XObject sender )
{
  XInt32 itemNo;
  ApplicationInputItem item;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->InputVerticalList.Item;
  item = EwCastObject( _this->InputVerticalList.View, ApplicationInputItem );

  if ( item == 0 )
    return;

  ViewsText_OnSetString( &item->NumText, EwConcatString( EwLoadString( &_Const00CE 
  ), EwNewStringInt( itemNo + 1, 0, 10 )));

  if ( itemNo == 1 )
  {
    ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00CF ));
    ViewsText_OnSetString( &item->InputTypeText, EwLoadString( &_Const00D0 ));
    ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00D1 ));
    ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00D2 ));
    ViewsText_OnSetString( &item->UnitText, EwLoadString( &_Const00D3 ));
    ViewsText_OnSetString( &item->ZoneText, EwLoadString( &_Const00D4 ));
    ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationZoneBitmap, 
    ResourcesBitmap ));
  }
  else
    if ( itemNo == 2 )
    {
      ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00D5 ));
      ViewsText_OnSetString( &item->InputTypeText, EwLoadString( &_Const00D6 ));
      ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00D7 ));
      ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00D8 ));
      ViewsText_OnSetString( &item->UnitText, 0 );
      ViewsText_OnSetString( &item->ZoneText, 0 );
      ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationPanelBitmap, 
      ResourcesBitmap ));
    }
    else
      if ( itemNo == 3 )
      {
        ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00D9 
        ));
        ViewsText_OnSetString( &item->InputTypeText, EwLoadString( &_Const00DA ));
        ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00D1 ));
        ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00DB ));
        ViewsText_OnSetString( &item->UnitText, EwLoadString( &_Const00DC ));
        ViewsText_OnSetString( &item->ZoneText, EwLoadString( &_Const00DD ));
        ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationPullSwitchBitmap, 
        ResourcesBitmap ));
      }

  CoreRectView__OnSetBounds( item, EwSetRectSize( item->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->InputVerticalList.Super2.Bounds ), _this->InputVerticalList.ItemHeight 
  )));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationCauseAndEffects_OnLoadOutputItem( ApplicationCauseAndEffects _this, 
  XObject sender )
{
  XInt32 itemNo;
  ApplicationOutputItem item;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->OutputVerticalList.Item;
  item = EwCastObject( _this->OutputVerticalList.View, ApplicationOutputItem );

  if ( item == 0 )
    return;

  ViewsText_OnSetString( &item->NumText, EwConcatString( EwLoadString( &_Const00DE 
  ), EwNewStringInt( itemNo + 1, 0, 10 )));

  if ( itemNo == 1 )
  {
    ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00DF ));
    ViewsText_OnSetString( &item->OutputTypeText, EwLoadString( &_Const00E0 ));
    ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00D1 ));
    ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00E1 ));
    ViewsText_OnSetString( &item->UnitText, EwLoadString( &_Const00E2 ));
    ViewsText_OnSetString( &item->ZoneText, EwLoadString( &_Const00DD ));
    ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationRadioBitmap, 
    ResourcesBitmap ));
  }
  else
    if ( itemNo == 2 )
    {
      ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00E3 ));
      ViewsText_OnSetString( &item->OutputTypeText, EwLoadString( &_Const00E4 ));
      ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00D7 ));
      ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00E5 ));
      ViewsText_OnSetString( &item->UnitText, 0 );
      ViewsText_OnSetString( &item->ZoneText, 0 );
      ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationPanelBitmap, 
      ResourcesBitmap ));
    }
    else
      if ( itemNo == 3 )
      {
        ViewsText_OnSetString( &item->DescriptionText, EwLoadString( &_Const00E6 
        ));
        ViewsText_OnSetString( &item->OutputTypeText, EwLoadString( &_Const00E7 
        ));
        ViewsText_OnSetString( &item->PanelText, EwLoadString( &_Const00E8 ));
        ViewsText_OnSetString( &item->TypeText, EwLoadString( &_Const00E9 ));
        ViewsText_OnSetString( &item->UnitText, 0 );
        ViewsText_OnSetString( &item->ZoneText, EwLoadString( &_Const00DD ));
        ViewsImage_OnSetBitmap( &item->Image, EwLoadResource( &ApplicationPullSwitchBitmap, 
        ResourcesBitmap ));
      }

  CoreRectView__OnSetBounds( item, EwSetRectSize( item->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->OutputVerticalList.Super2.Bounds ), _this->OutputVerticalList.ItemHeight 
  )));
}

/* 'C' function for method : 'Application::CauseAndEffects.ScrollDragSlot()' */
void ApplicationCauseAndEffects_ScrollDragSlot( ApplicationCauseAndEffects _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'Application::CauseAndEffects.ScrollPressSlot()' */
void ApplicationCauseAndEffects_ScrollPressSlot( ApplicationCauseAndEffects _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VertScrollbar )));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationCauseAndEffects_OnLoadItem( ApplicationCauseAndEffects _this, XObject 
  sender )
{
  XInt32 itemNo;
  ApplicationCAEName itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, ApplicationCAEName );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( &itemView->NumText, EwNewStringInt( itemNo + 1, 0, 10 ));
  ViewsText_OnSetString( &itemView->NameText, EwLoadString( &_Const00EA ));
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));
}

/* 'C' function for method : 'Application::CauseAndEffects.ClickSlot()' */
void ApplicationCauseAndEffects_ClickSlot( ApplicationCauseAndEffects _this, XObject 
  sender )
{
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->SimpleTouchHandler.AutoDeflected )
    return;

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler.CurrentPos 
  );

  if ( itemNo >= 0 )
  {
    CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );
  }
}

/* 'C' function for method : 'Application::CauseAndEffects.TopSlot()' */
void ApplicationCauseAndEffects_TopSlot( ApplicationCauseAndEffects _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, 0 );
}

/* 'C' function for method : 'Application::CauseAndEffects.Up()' */
void ApplicationCauseAndEffects_Up( ApplicationCauseAndEffects _this, XObject sender )
{
  XInt32 page;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  page = 8 * _this->VerticalList.ItemHeight;

  if ( -_this->VerticalList.ScrollOffset > page )
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, _this->VerticalList.ScrollOffset 
    + page );
  else
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, 0 );
}

/* 'C' function for method : 'Application::CauseAndEffects.Down()' */
void ApplicationCauseAndEffects_Down( ApplicationCauseAndEffects _this, XObject 
  sender )
{
  XInt32 page;
  XInt32 max;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  page = 8 * _this->VerticalList.ItemHeight;
  max = ( _this->VerticalList.NoOfItems - 8 ) * _this->VerticalList.ItemHeight;

  if (( max + _this->VerticalList.ScrollOffset ) > page )
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, _this->VerticalList.ScrollOffset 
    - page );
  else
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -max );
}

/* Variants derived from the class : 'Application::CauseAndEffects' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCauseAndEffects )
EW_END_OF_CLASS_VARIANTS( ApplicationCauseAndEffects )

/* Virtual Method Table (VMT) for the class : 'Application::CauseAndEffects' */
EW_DEFINE_CLASS( ApplicationCauseAndEffects, CoreGroup, "Application::CauseAndEffects" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationCauseAndEffects_UpdateLayout,
  ApplicationCauseAndEffects_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationCauseAndEffects )

/* Bitmap resource : 'Application::ActionBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationActionBitmap )
  EW_BITMAP_FRAMES( ApplicationActionBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 70, 53, 0 )
    EW_BITMAP_FRAME( 11, 8, 49, 37, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationActionBitmap, Default )      /* ratio 13.40 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x25C46311, 0x3BFDB490, 0xC1582721, 0xAA511E8D, 0xE3B2C8D4, 0x532D974A,
    0x13297CC6, 0x389ACDA6, 0xC99CEA69, 0x84CEE6F3, 0x51DA4520, 0xD0DFEE35, 0xFA4D24A2,
    0xE99399EC, 0xA34BA6CF, 0xB4FA9D42, 0x5E9E53AA, 0x87FB7938, 0x7FB5D0A3, 0x3A70B61E,
    0x96661579, 0x128CDD4C, 0x28F45B55, 0xF82B7FDB, 0x752B2350, 0xBE3789A5, 0xB49941FE,
    0x3D0A9FED, 0x2D52E8D0, 0x612EB83B, 0x471386AB, 0xD6869124, 0x836EB75B, 0x779BBBFE,
    0x59B1D869, 0x3B5E42B7, 0x7FB7D3E6, 0x7B894E71, 0x9F85D6BC, 0xC677826A, 0x14468B9D,
    0x3345D238, 0x5B4C3EA7, 0xB8C2E231, 0xA204EF6F, 0xDFEC1B08, 0xFE7F3B6E, 0xE5E1381B,
    0x9F7FC27F, 0x0AC1DB4D, 0x1D8C7FA5, 0xB9BD1E87, 0xBE438F28, 0xF3388E13, 0xDF6F1FEA,
    0x75AF81D5, 0xEDBBBDBB, 0xEBD1B9DA, 0xFA7ECF56, 0xC392D95B, 0x86CB5FCB, 0x92DFB854,
    0xF4795039, 0x4494438F, 0x4FF7FDFD, 0x77D4FF79, 0xBDAD785F, 0xF45B5F36, 0x6F5DE7D9,
    0xDB377DBF, 0x57A61479, 0x02177AE1, 0xCB1DC290, 0x8761B6FC, 0x9C7801FE, 0x2819A869,
    0xE545831E, 0x00805FB7, 0x8BE2C886, 0x4A618422, 0xF82E0E81, 0x70961556, 0xFD495233,
    0x6CA2E8AD, 0xE197B96E, 0xB9161690, 0xC6048113, 0xCB79E338, 0x735EE5BD, 0xA528B9CF,
    0x97F1FA80, 0xEA383FD4, 0xBE75D6E8, 0x94E2F955, 0x2629522D, 0xE7224A80, 0xFDA26819,
    0x223FE5C3, 0x97CAA190, 0xA1F8BE63, 0xD84E1C87, 0xB1DC9214, 0x189DA6E9, 0x9955791A,
    0xDEE78636, 0xAA117D5E, 0x42115F17, 0x619C2608, 0x07E2FA36, 0xE8C2885E, 0x2A568BA4,
    0x605907A0, 0x94940FF2, 0xA628B9C6, 0x56E7BA9A, 0x8A168782, 0xA5E39028, 0x865BE28A,
    0xABE7D912, 0xEAAA0400, 0xD746B489, 0xE296A3A9, 0xBAAEE9EA, 0xAFEB7AF6, 0xDE083EB9,
    0x6AAEB2AC, 0xB95F5763, 0xA879DECA, 0x6AE26516, 0xA86648FF, 0x172636A1, 0x02BCB5EC,
    0xBEB62D9B, 0xADA93B72, 0x2D3A9236, 0x184A6BA2, 0xA6CA9CDE, 0x8D1194DB, 0x7B96B508,
    0x22BA56DE, 0xBBC692A4, 0xE2DDBDED, 0xFCBE6DAB, 0xBEE328C2, 0x8740A293, 0xC095BF31,
    0x2E7C2E06, 0x3352E7EB, 0x6FCD6208, 0x6F6C02F4, 0xAC4B13BF, 0x5F18C56F, 0x0FC36D9C,
    0xBAB11787, 0x30261AB0, 0x8C19E1C1, 0x6B14C670, 0x16CAF29C, 0xCB728CB3, 0x1BF486D1,
    0xD4EF0AC8, 0xFF239BE6, 0xABBBAEC3, 0xCFF2F9CE, 0xB40CC32A, 0x4B7B41CB, 0x9269906A,
    0x09C98FF8, 0x651C7CD3, 0x2D4D28FF, 0x8AAF54B1, 0x6745D0AC, 0x58D6F44D, 0xA72DED73,
    0xEA46FEC5, 0x36017ECE, 0x6ACC9E60, 0x6ED86B45, 0x95E126C9, 0x772D7743, 0x3D6B74DC,
    0x1AD0A729, 0x6BD56A2A, 0xD35C4ACF, 0xAE1D3103, 0x048B316B, 0xD69C812D, 0x8ADDB5ED,
    0xE3F8CDCF, 0x257C46BE, 0x48E658C7, 0x51E76CAB, 0x8DA19E1E, 0xE3B90E77, 0xBA0E878B,
    0x49A337DC, 0x7E69BBDD, 0xBF9667EC, 0xE8B9EB41, 0xFB1E8FAF, 0x9A72FAEC, 0x2A57785C,
    0xE1899C7B, 0xEC3B4811, 0x7B2EFF9F, 0x1D9341F0, 0x27349ADE, 0xA4ACF824, 0xF03C4E26,
    0xBD1F0FD0, 0x195EC1F0, 0x370BE61E, 0xABDEEB65, 0xF3FD4D92, 0x3DFF87D2, 0xFF7311CB,
    0x8B4E6496, 0x26AD3855, 0x08F76CFA, 0x0FF2CC69, 0xF3CCDB31, 0x7C830D4F, 0x5D07E2E5,
    0x230FF27C, 0x48C738B8, 0x178C80EA, 0xF47E4FC1, 0x5F01DFB3, 0x9D64BF84, 0x110281E4,
    0xB45C99C3, 0x280E04C0, 0xDFABF37E, 0x19F82503, 0x158FF9FE, 0x040778CC, 0x6009820B,
    0x2745E3A8, 0x15066020, 0x7160C188, 0x3C251FF0, 0x638EC561, 0xE899BE3C, 0x9681E76F,
    0x3573C2F9, 0x5B2F8950, 0x005FFC1E, 0x0A405807, 0x0B82D062, 0x5306A0AC, 0x29014458,
    0xBC4C7ED1, 0xB8350220, 0xF0351740, 0x6114201F, 0xC4688310, 0x85514229, 0xFDE2CC41,
    0x30A937F2, 0xFA8C7086, 0x9AAD9CFB, 0x10D91BF5, 0xFA6625C8, 0x57588D8C, 0x1105D8BA,
    0xE28C0280, 0xC427FAFE, 0x8BB0AA3C, 0x1122942B, 0x2E0FF8FB, 0x688629C6, 0x5B122414,
    0x8A2BA028, 0x42BE90D1, 0xF45D15E4, 0x325A11C2, 0x9F045590, 0x3BC6FE97, 0x92C849BE,
    0x57A1E22E, 0x3E39187E, 0x7B9071E2, 0xF529DFF4, 0x5223C4E8, 0x3C8E8311, 0x245F2423,
    0x513E3249, 0xE3245690, 0xAC18F923, 0x4011A65A, 0xFCA45C51, 0x44267928, 0x992C0F8E,
    0xF8D1C7FA, 0x241F9276, 0x40722BE2, 0xB58CE9C5, 0xD3261E96, 0x221CA68E, 0x4664012B,
    0x91B24E11, 0x22A61464, 0x56C7F897, 0xB790717A, 0x628024CC, 0xC65E45A9, 0x2CDB96E9,
    0x78C51F24, 0xB36A3BC5, 0xD38BD39C, 0x2366D51A, 0x1A6698D9, 0x7C588964, 0xF720E86C,
    0x7E9ECF45, 0xAEA3A26C, 0x8A0B4968, 0xB99F9893, 0x085E4164, 0xD05A7148, 0x0750DD92,
    0xD191FE3E, 0xA2925A8D, 0x2222BAD9, 0x59CA78A3, 0xED868DC6, 0x707B95A2, 0x2DA61838,
    0x69459A93, 0x86ECEF92, 0xF26A5450, 0xA762BEA6, 0xB717FD3C, 0xA4129E5B, 0x0E915BB0,
    0x4FA364D3, 0x4322CF66, 0xD47BE69D, 0xC18AA5E6, 0x84A49F13, 0x6A3B1459, 0xF0AA6053,
    0x4A28AB0E, 0xD54910EC, 0x5C0CBE78, 0xDA29937C, 0xD292CA8E, 0x113DCF99, 0x1553D97B,
    0xBA63D51A, 0xD0FFA715, 0x455AACDC, 0x6EDC9856, 0xEB837056, 0xD7C9F35B, 0x456D16B6,
    0xB40F0BAC, 0x55C35668, 0x7EAF69AD, 0x8F622BED, 0xCD1ABBB9, 0x9A7E8DEA, 0xEA98F5D3,
    0x565ABD23, 0xEC4D97B1, 0x2AB796E8, 0xACC79D52, 0x6C959D44, 0x1F2B65A0, 0xA7B3362E,
    0xCAE8ACC5, 0xEDABB394, 0xB5742D70, 0xDA615DCA, 0x4724A2B7, 0x532B7F42, 0x5BBB356A,
    0x6988AD8C, 0xDB144352, 0xC196E6F8, 0x7060F4B6, 0x4CA94B91, 0x7544DB57, 0x55D0B509,
    0x04056F2D, 0xD75AE236, 0xD09267B6, 0x321B209C, 0x4AE99499, 0x78526B57, 0xE8DBD6FE,
    0x9D7A374E, 0x10A0CA2C, 0x00C6DA45, 0x05F0BBAE, 0x864AD400, 0xD74AF2DC, 0x2C0B30BE,
    0xBC9346EA, 0x694536BA, 0x79D48B1E, 0x97DF8C07, 0xFD3C2D5D, 0x0A52EF8D, 0x9AA696FB,
    0xB60FC0B7, 0x6567649B, 0x8CD704AB, 0x0B5DE227, 0x2D0672A9, 0x5C6D9168, 0x934F717D,
    0x6CDF7C20, 0x67338A01, 0x46573102, 0x02E561D9, 0xB3395678, 0x4B5F85B0, 0x4AAEE1DB,
    0x312E11B7, 0xDD7C0ECB, 0x728786E6, 0x41AFF632, 0xCBE36622, 0x575673F1, 0x576F3123,
    0xDD1A5E94, 0x8E45C9A7, 0xAC82CC8C, 0xA71C81E0, 0x53C173C5, 0x93CBB877, 0x47B93AD9,
    0xC456F1FC, 0xE52CF6AE, 0x4D538DC6, 0x9CCE4D92, 0xCDEB2FD7, 0x892BB8CA, 0x64779698,
    0x58C56812, 0x32A617C8, 0x1E15A04B, 0x456949A8, 0x8D6FD257, 0xA0BAE2D7, 0xB4C330F9,
    0xD29ACF75, 0xBF41271A, 0xC690CF45, 0x17D4EEB3, 0xED29D61E, 0xD59E3EA5, 0x1C75B361,
    0x2D79472F, 0x785BFBAC, 0x52E927D0, 0xB4D4F957, 0x69A0DA99, 0x6D02212B, 0xC586B42F,
    0xE466BF8E, 0xE648B5E9, 0xF5AB3938, 0xB4C2DFAA, 0xD7DAA348, 0x7CC81E79, 0x382A46F9,
    0x504CA4F3, 0x92CCB5B6, 0x6B29A29D, 0x22E6BDCF, 0x4D80E136, 0xDB07536D, 0x14322620,
    0x265432D4, 0x7908DB4C, 0x69D11A7E, 0x20384994, 0xBFDABB5B, 0x2DBAB73E, 0x1D33E9D2,
    0xBEE8D64F, 0x4DE3BCB6, 0xA44B75EF, 0x77AB4A49, 0x92CDF7BA, 0x00000080, 0x00000000

  EW_BITMAPS_TABLE( ApplicationActionBitmap )
    EW_BITMAP( ApplicationActionBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationActionBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::ActionBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationActionBitmap )

/* Bitmap resource : 'Application::OrBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationOrBitmap )
  EW_BITMAP_FRAMES( ApplicationOrBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 100, 60, 0 )
    EW_BITMAP_FRAME( 0, 17, 18, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationOrBitmap, Default )          /* ratio 9.88 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x8DC7A311, 0xEC8A351F, 0xC8E4B208, 0x9A4F2490, 0xA512C94C, 0x552F95CB,
    0xB3096CCA, 0x3498CCE6, 0xC9CCDA6F, 0x9DCFA713, 0xED0A753F, 0xD0E8B409, 0x1A8F44A0,
    0xA914CA4D, 0x954FA5D3, 0xB50A6D4A, 0x54A8D4EA, 0xCACD5AAF, 0xADD7AB15, 0xED8AB55F,
    0xD8ECB60A, 0x9ACF64B0, 0xAD16CB4D, 0xD56FB5DB, 0xD70B6DCA, 0x02BBBF6C, 0x009DE9D8,
    0x568BEFAD, 0x1A0CA580, 0xE18BC7CC, 0xF3124350, 0x9A98C15A, 0x1AE9C785, 0xA0779648,
    0x9800BE32, 0x6CD801FD, 0x8266F390, 0xF6833B9F, 0x69B47A4C, 0xAB43A8D1, 0xF59A9D2E,
    0x5BAFD3EA, 0x7B432413, 0x71B9DD13, 0xCDCEEB6F, 0xDFBCA4DB, 0xA709960D, 0x99F8A981,
    0xD139C831, 0x82ACBE58, 0xA2057573, 0xA03D8BEB, 0xD805BF3A, 0x90B63DE9, 0x71F7838E,
    0x3B77C222, 0x8A9B1E41, 0xABCED5F3, 0x3D5E8F48, 0xE3EEF5FB, 0x9F0F9FB7, 0xF2FBFBFE,
    0x6FC7EBEB, 0xF2357F3F, 0xD9536027, 0x4684F801, 0xEC7B81C8, 0x0B6E1756, 0x5CA0C82A,
    0x40D3C9BF, 0xE0FA1430, 0xF08185C7, 0x0E30E1A0, 0x684F1874, 0x0FE00598, 0x03BE2404,
    0x48CF89C3, 0x782B62A1, 0x26C878B4, 0xCB319230, 0x631C4C8C, 0xE4D70E23, 0x3C37C288,
    0x8FCE3082, 0x24239C1C, 0xC914E906, 0xA645919D, 0x4992A473, 0x9364E92E, 0x25292250,
    0x593E5393, 0x66549465, 0xEC5EA4E9, 0x97CAC04C, 0x00B76053, 0xA994253D, 0x926836CD,
    0xBD9AE0E0, 0x82E6C83D, 0x0023F577, 0x2090DB9A, 0x006D9DC9, 0x622FE7A1, 0x025A13D2,
    0xC333DA80, 0x61ACCCA0, 0x24A12528, 0x8C33C5EA, 0xA3CED0C2, 0x2923EC12, 0xD9BA6F01,
    0x64F94A66, 0x9C16C06A, 0x21DA1292, 0xE951E2A0, 0xDA9697A8, 0xEE925060, 0xAC338043,
    0xABC710C6, 0x6B20788E, 0x33FA2138, 0xE4363E20, 0x7E85CC9A, 0xAFCC0204, 0x8EDA3C3F,
    0x1B14FE04, 0x26A7A900, 0xCC31972B, 0xB3C110E6, 0xAD20A4EE, 0xEB54E135, 0x2A96B201,
    0x71A56D8B, 0xB7CCD00A, 0x6E219832, 0x13A5DB26, 0xA2E805DA, 0xA0BAC5F3, 0x130B38CC,
    0xADB04AC2, 0xD5CAD9A9, 0x4EF81B2D, 0xFC1FDA12, 0xB6AF3202, 0x572BFEF4, 0xD08B0437,
    0x64871E22, 0xA139B0A0, 0x3830E07D, 0x48BC4474, 0x90BCD05F, 0x6701A52A, 0x00C6F00C,
    0x09F1E360, 0xCE2C841D, 0x53932406, 0x082AC9CD, 0xF5C6B2AC, 0xCBCF44A6, 0x33227C0B,
    0x60A6D218, 0xD6E9B9CD, 0x1E22B3A1, 0xB7427363, 0xB41C732B, 0xD24A7758, 0x91B46846,
    0x2CD009B1, 0x9B74ED0F, 0xC2DD44D2, 0x72A35415, 0xD75802AB, 0xA2D6C5D3, 0x0D0CB708,
    0xC03D84FC, 0x1D3742D3, 0x33683CD7, 0xBC10D890, 0x3E76E018, 0x04BDC4B4, 0x5D9B2DD9,
    0xE69941B6, 0x7C294063, 0xDFC2416B, 0xC2F684DB, 0x62A4D0E0, 0x24F715B8, 0x8CDD008E,
    0x31542DDB, 0x5920EB90, 0x60D4F203, 0x4E5C32B9, 0x75DDF8D0, 0xE7CEBC73, 0x3A21CC14,
    0x9A027D23, 0xA46A3D80, 0xAC38095E, 0xE779B07F, 0xC85B63B0, 0xB6847AEC, 0xBC84EDC7,
    0x19E3BBAE, 0x13C249D1, 0x2B52C3C0, 0x237FC408, 0xE06027F3, 0xBB01FCA3, 0x50BCDE73,
    0x00AF44F5, 0x82EFD411, 0xF4F7F5C0, 0xCF10BDA2, 0x3232CF77, 0xAB90DFE0, 0xA684C90D,
    0x28C30F21, 0xDE0D7EA3, 0x9B7BCF3B, 0x42CFC4D3, 0x0FD40FB9, 0x2C74C44F, 0xEFEC7ED2,
    0xFFCBE49B, 0x36100041, 0x0285556A, 0xDF4782AA, 0x16FEC100, 0x90913FD8, 0x105B81E2,
    0x11FB0480, 0xE6BA0A9B, 0xA0C1B082, 0x1A18366C, 0x17082E06, 0x78423C20, 0xEA8DD044,
    0x861F800C, 0xE225035A, 0xB9FE41E5, 0x8AAF738F, 0x982C2383, 0x50721AC1, 0xE1BC3483,
    0x95985A69, 0x0890F85D, 0x3800FB0E, 0x7DC44008, 0x8C0E6E88, 0x78035088, 0x1A2640D8,
    0x58F465E4, 0xC0809E80, 0xCB30ECA7, 0xA2703918, 0xA367610B, 0x8040E063, 0x1DC7E426,
    0xE88888C6, 0x5A0143D5, 0x5903634C, 0xC80F8E07, 0x30E103CA, 0x21B31C81, 0x406073A4,
    0xD07C2F8D, 0x8313D2C9, 0x56A33A3E, 0xDA04A429, 0x3C00C1E6, 0x0990D16E, 0xB00E62B9,
    0x147A80A6, 0x48BA91E1, 0xD7163DDC, 0xB1E64AC4, 0xA4C84949, 0xB5B3422D, 0x1DC2882E,
    0x22008CA0, 0xB8C8792D, 0x5A14ADF0, 0x561A0D08, 0xE6518979, 0x44922B31, 0xA0D8BE00,
    0xE104CE2F, 0x8720BE96, 0xCAE0372E, 0x5E92BE52, 0x1E043AA0, 0x6288A342, 0xFB97A1D6,
    0xCD3284CB, 0xE40336E0, 0xC8268E43, 0x219AB7C6, 0xD2926403, 0x26C86F90, 0x8A234224,
    0x9AC1766E, 0xD789B4BF, 0x70441068, 0xAB1E4E4C, 0xC0152748, 0x3A76CBE9, 0x88595BA8,
    0x78C229A7, 0x81227A8B, 0xA503749D, 0x84A0223B, 0x3422D67E, 0xC5C45BF8, 0x82CD79F0,
    0xF879451A, 0x16118038, 0xD6460B9A, 0xB5101923, 0x29C34101, 0x34584711, 0x81F2B50E,
    0xC7518346, 0x9DD41A3B, 0x199BA51F, 0x61BE7015, 0xEF020890, 0x5D4A8688, 0xB872C2D0,
    0x2D2E0354, 0x1A5F4C07, 0xB4CA99D3, 0xA9A538A6, 0x53BA6F4E, 0xA734FA9B, 0x3128ED32,
    0x1083BA86, 0xF51BD518, 0x723C007B, 0x4C2354C1, 0x7514A414, 0x97C71290, 0x75580A0C,
    0x06BA391D, 0xC2385A0A, 0xABF5746E, 0x092B01E2, 0xB0D5EAC5, 0x67AC759A, 0xD75A2B2D,
    0xB8118DDA, 0xBAE81B95, 0x13423A00, 0x63F1B0C8, 0x6BCD216C, 0x8EF94954, 0x8FA042BE,
    0x06067031, 0x6E0E7B06, 0x5C047618, 0x17592B4D, 0xB2C6D8AB, 0x756CB195, 0x9AE008EB,
    0xCA1EBA2E, 0xABDD78AE, 0xD9CAA166, 0x1DF5F49C, 0x60E3F57F, 0xC3D85031, 0x40A7B4B6,
    0x576A29FD, 0xAAD6D3CB, 0x1535B5D6, 0x1A8D512A, 0x8FDAA402, 0xAA70B9A9, 0x5BBB3B5E,
    0x57554D81, 0x5600A556, 0xA1D4F475, 0x1811D459, 0x7D468CCD, 0x1521D1C0, 0x35D0B7B7,
    0x7A4B48C8, 0xF4AE94D2, 0x27D514B9, 0x5009FD3F, 0xBA340D89, 0xB62CDDBC, 0x8650AA10,
    0xC9A2143A, 0x0D782890, 0x9E72CE39, 0x58AB9D33, 0x2BE77AE7, 0x53C0B0DE, 0x27B4F49E,
    0x000BC376, 0x99826665, 0x34A6836F, 0x02DFB5C1, 0x6F9B2587, 0xBA6726D8, 0xD26F8A29,
    0x54B0BF97, 0x496B2CDC, 0x21065B90, 0x7034BB97, 0x912C377D, 0x33930E60, 0x31C454C5,
    0x4C4BDC1F, 0x5C93926A, 0x2186AED3, 0xA653CA4C, 0x44AB3392, 0x4C492B43, 0x51EC9B63,
    0x63FD8005, 0xC8390266, 0xC598D642, 0x2289CE1C, 0x22C8FA1D, 0x2B715244, 0xBF175D7E,
    0x8E309E58, 0x94650EF1, 0x9C7F925E, 0x71BA3616, 0xE8EE0256, 0x103C8394, 0x8802EE1F,
    0x0122230F, 0x253A388C, 0xF5C8196E, 0xF714A282, 0x9E4527D4, 0xC42079F9, 0x13C50885,
    0x90B240C6, 0x63CE78CA, 0xC388670C, 0x8730DB3E, 0x4173F680, 0xFFB9CCB8, 0xE58022F9,
    0x1101A021, 0xA33CC0A8, 0x240F6E99, 0x18270445, 0xBA0B3FE8, 0xCD443AD2, 0x3E02079B,
    0x574F8864, 0xFA90DBE6, 0x473EC194, 0xF122DA6F, 0x20FCC69B, 0x9C785493, 0xF121D1FA,
    0x209EF01D, 0x0F10CCBC, 0x199BC604, 0xC5AD5F79, 0x088F5291, 0xF69EC3D6, 0x533DC17A,
    0x9F28DB1B, 0x46E8475B, 0xA540BA57, 0x6BAB0D4E, 0x3C7FAF1D, 0x8ED442BB, 0x43DBB733,
    0x6B0D8EEE, 0x6F6DE58E, 0x091BFB7D, 0xC199C702, 0x8770A0BD, 0x09B4E58B, 0x15C8112D,
    0xB1937243, 0xB7300D5C, 0x5B777597, 0xC6935126, 0xB576AAD4, 0x6BB275AC, 0xBDACC1C3,
    0xB5E3D6E9, 0x716DEDB5, 0xB8DCC5A3, 0x1F356AFD, 0xC2D3668F, 0x56755C99, 0x8C7D9E07,
    0x715EEC69, 0x99C68ED1, 0x2F0D2DA4, 0xC136E703, 0x84B07ABC, 0x0F61AC2D, 0x2CC5280B,
    0x7390A936, 0x132067AE, 0x6036C919, 0xFCB99432, 0xD6E949DE, 0xAE35C334, 0x5D5C4972,
    0xBC1772EC, 0xDBF37520, 0xFB5F2BDC, 0x19D157EA, 0xB18B911E, 0x82AE19CA, 0x95691BD5,
    0x95515B99, 0x5602BE57, 0x8FE58ABC, 0xA29D3163, 0x04567C8A, 0x6AAD35A2, 0x5F5AE385,
    0xBB47F9C7, 0x4F8DBBE5, 0xFA638AB1, 0x3506A053, 0x2A1D4283, 0x5458A151, 0xDDF5E2A3,
    0xDBF2938C, 0xA782DA9C, 0xA5E1E338, 0x4A739DFB, 0x2C3050A4, 0x7692A184, 0xE21F01C8,
    0x7BAAAD4C, 0x68A41822, 0xD1872545, 0xA3446426, 0x47756725, 0x38D1FA3D, 0x2C243482,
    0xA64B4959, 0x5695FD4F, 0x9FD67A8F, 0xFB99F5FE, 0x94C22B12, 0xE095329D, 0xBC32694C,
    0xC4A8F3DA, 0x13071671, 0x72CE49C7, 0xE79CD068, 0xD300A744, 0xFB184D61, 0x70EF2E54,
    0x11E23C00, 0xDFA67FA0, 0x87EFEA9F, 0x3EB7D7FA, 0xFDCFB27F, 0x56E794FF, 0xEE904206,
    0x6E903FC7, 0x80E56E65, 0x08608569, 0x202F1863, 0x598C3146, 0x73206381, 0x0AD55BCE,
    0xB4BFF8D3, 0xFFCD2DFE, 0xFC9C7B4C, 0x027BB787, 0x98038008, 0x80780476, 0x01809806,
    0xA80B8088, 0x80D80580, 0x01668810, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( ApplicationOrBitmap )
    EW_BITMAP( ApplicationOrBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationOrBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::OrBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationOrBitmap )

/* Bitmap resource : 'Application::AndBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationAndBitmap )
  EW_BITMAP_FRAMES( ApplicationAndBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 100, 60, 0 )
    EW_BITMAP_FRAME( 18, 58, 37, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationAndBitmap, Default )         /* ratio 8.48 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x8B47A311, 0xD81A42F9, 0xA8C49246, 0xA8DE5C93, 0x25A43484, 0xBD3010AF,
    0xEED99849, 0x017C4D80, 0xC003FA72, 0x9E4F60D3, 0x0CFA8104, 0xD128B3FA, 0x0A9343A3,
    0x69546A5D, 0xA148A653, 0xB4FA8D3A, 0x49ABD52A, 0xD44568EF, 0x8D47E371, 0xFD86BB60,
    0xD92CB62A, 0x8ED35EB3, 0x2D966B55, 0xE2E8005A, 0x3745305E, 0xA9BB958B, 0x66E5E846,
    0xA93E00F3, 0x1D4EAD80, 0x616B181C, 0x2B0F82C2, 0x70D8CC4E, 0xEF5A7FE3, 0x76DB7D70,
    0x98CAE5AD, 0xCB766B29, 0xCF66F2F9, 0xCE89CD06, 0x1D34A8B0, 0x159FA818, 0x316FAD58,
    0x2CF8BEC1, 0xA2274EC8, 0xB8153776, 0xEDD8C5AB, 0x66EF864C, 0xFF0065BE, 0xF0B87C1D,
    0x2B89C8E2, 0xB8DCBE3F, 0xA3CCE4F3, 0x7D0E6F3F, 0xD8EAF4BA, 0xC10737A9, 0xC8D49BFD,
    0x16673B93, 0xE83C79FF, 0x97D3E6F3, 0xBDAF588F, 0xC1F04F82, 0xBF401714, 0xF801D49F,
    0x0FD87DF9, 0x56FF8A4E, 0x8738048C, 0x4126042D, 0x8C2B81CD, 0xE90720A3, 0x3B416834,
    0xCEE04A10, 0xE84C1184, 0x5A14854E, 0x1A85E188, 0x87E19876, 0xE1B8821C, 0x68861E88,
    0x96228922, 0x2A89E288, 0x852298B6, 0x00D8C4F2, 0x919E3426, 0xF53B0053, 0xE47A9E04,
    0x7ADE88F5, 0x63F8F23E, 0x63615F90, 0x245C09E4, 0x4C020A39, 0x029523DE, 0xD2D3D650,
    0x6264BC10, 0x64DD19A5, 0x5C3E8229, 0x97E42016, 0x26290E40, 0x741A4498, 0xDC5C28D2,
    0x3B412398, 0x98E64986, 0x2659C66E, 0x63F96A9C, 0xE4B80067, 0x7C0B0479, 0x0115234E,
    0xC3E3EE80, 0x62ACC1A0, 0xCA311528, 0x8C9BC0D3, 0xA3E749CA, 0xCA25AA8D, 0x29A85DA4,
    0x46739B54, 0x9AA3A90A, 0xA7CFBA6A, 0x6A227804, 0x6A941918, 0x66A5548E, 0xAC228E60,
    0x3B6101D6, 0xE9CA7412, 0xBAD299AC, 0x5A94A4A9, 0xB256E3AA, 0xADEBEAD6, 0xCFC9BEC0,
    0x88D003B0, 0x240F19C9, 0x3A548F0B, 0x30CC5B34, 0xA760F2D0, 0x1AF4013F, 0x66D6ADAC,
    0xA2A4D6FB, 0xA5D3AA54, 0xEE2B62BC, 0x1B92DAAF, 0x7401B4D1, 0x1118AEA2, 0x508EEBB4,
    0xCFD009F4, 0xE2B2F414, 0x9421BDCD, 0xFCB9AD7B, 0xB72FEBEE, 0xAE08E2DE, 0x3C16FA64,
    0x1195BFAE, 0xB2124B68, 0x508E9059, 0xC5C9266A, 0x4C54EB28, 0x62FDC181, 0x62C1F08C,
    0x9B2BAC01, 0xF1CC66E1, 0x79CF22C8, 0xF02B3520, 0x4D9F82C9, 0x2A4565DD, 0x815CC4EA,
    0xBC9334C6, 0x7912C971, 0x04AEEDFC, 0xCE335CDB, 0x00DA26D6, 0x22AF4415, 0x0F480F15,
    0x1FD2CE03, 0xD3F37CFC, 0xB3AB5B4E, 0x07873CC0, 0xE358CFB5, 0x6AD6C95C, 0x3E75E018,
    0x01F7ED42, 0x8D94C738, 0x5F59D443, 0x53DA740D, 0xC85909AF, 0xB68DC76A, 0x8DD4D78F,
    0x6F780902, 0x056AD423, 0xDFC943E8, 0x772DCC6B, 0xD90B82DA, 0x1756C0F6, 0x06E2F84E,
    0x00B8E3F5, 0x88DE4472, 0xFE545054, 0xAF8AD08A, 0x9BE0F9AD, 0xD5787427, 0x7A2E7399,
    0x3E94CC42, 0xF6A7AA43, 0xED049334, 0x0FFAE300, 0xF8CEC7A1, 0x0E7D5FE8, 0xCF9DCF72,
    0x7441BB2E, 0x5488BEF4, 0x09BF0464, 0xA978FA97, 0x27B9F1FB, 0x6FEDB4FF, 0xF2BB4EE3,
    0x4DEBDF82, 0xAF542508, 0xB7AB508D, 0x3AF6CC53, 0xF7FCFEEC, 0xEB9E7BDE, 0x8F958ECE,
    0x0DAEF998, 0xC65BFE16, 0x3FFE48DA, 0xCAD149FE, 0xB023F43D, 0x83C8F43E, 0x54F8EDBF,
    0xFA58FFA3, 0xFDCC1400, 0x7C9212C0, 0x080A2018, 0x00508574, 0xD07D8045, 0x185914C5,
    0xA7F304A0, 0x4A61E631, 0x9E53F87F, 0x0271B091, 0x1C70780E, 0x091BC142, 0x7034B1B6,
    0x28828D34, 0xC50620CC, 0x4DB84164, 0x2A428550, 0x80B50C85, 0x43F0019F, 0xC51B1228,
    0x8031F8B0, 0x87D0AE17, 0xDB9FE352, 0x14C4082E, 0x480E665A, 0x2C548464, 0x1434C4C1,
    0x0C468611, 0xF79D0B5D, 0xC4461FC4, 0x004C581E, 0x0BB8B611, 0x8BE034A1, 0x188620F2,
    0x32C55077, 0xCC51D146, 0x0F1A83C3, 0x76284661, 0xD4701CA6, 0x704AF540, 0xE0989EBD,
    0x8720D98E, 0x46D0371E, 0x7BF1BA2B, 0x19DC4C53, 0x68A428FF, 0x1405D218, 0x843AE448,
    0x024683F2, 0x5C901E83, 0x39271F40, 0x9204F3C8, 0x488C8492, 0x0469362E, 0x49C02126,
    0x2882D13D, 0x7EB8E14B, 0x7E930008, 0xBB10654C, 0x09E6B1F5, 0x7CB09332, 0x79662A14,
    0xA7D97885, 0xA5C87127, 0xCBC95023, 0x884C764A, 0x2C65EB88, 0x534C40B3, 0xC80F8548,
    0x5530841C, 0x5D5B4BE9, 0x091699B2, 0x79A6FFA0, 0xA50A6ABE, 0xC3D4D810, 0x4D09B732,
    0x96333C00, 0x35A69162, 0xF34E47FF, 0xDA10B361, 0xC13726EC, 0x82604689, 0xB4F09D4E,
    0x60B33108, 0x9320A6CC, 0x278CCA0F, 0xC7F9D933, 0x9FF3EE6F, 0x2A259962, 0xA11F596A,
    0xBB0E32E4, 0x013AE7D4, 0xBE563FBA, 0xED0A888F, 0xD17326E6, 0x450926C9, 0xE5205A94,
    0xD1CA16E3, 0xA3B3F9FC, 0x346433CA, 0x4648A910, 0xF492123A, 0xF9446490, 0x7DCDD0C9,
    0x84FFA574, 0x68E43963, 0xD1DCA13D, 0x23DC7904, 0xD3CA5B48, 0xA594BC8C, 0x3DA2C455,
    0x2F45C8B4, 0xC48C5182, 0x774C2320, 0xF69FC03A, 0x9C489F54, 0xC29B1283, 0x71384B44,
    0x6A0558A9, 0x54CA9C98, 0x14B0C99B, 0x0E0FCC34, 0x1EC3B495, 0x5AA9F566, 0xCF57139D,
    0x760DBA1A, 0xCC2183F0, 0x984F095B, 0xD5DAB456, 0xDDBCEE70, 0xCDDAEF2B, 0x81301E02,
    0x03D40C0B, 0xC2D6C823, 0x79A7D5D6, 0xFF576575, 0xC656BED8, 0x5BF57E6F, 0xC9635F2C,
    0xB65A713C, 0xA3ECD59C, 0x5357A8F4, 0x7B64D1D5, 0x619EE8C5, 0xCAD76B27, 0xD4B2F662,
    0x7B2A0C3C, 0x35DF8747, 0x18647825, 0x4B24975E, 0x1626ADDB, 0x6D1D87A2, 0x3A7198E9,
    0x268F6153, 0xEC0603AE, 0x975B5B46, 0xC485D6DE, 0x212966ED, 0x59CA3927, 0xCDC9730E,
    0x79BD74AD, 0x97462A5C, 0xC6BB75A7, 0x37B6F2DD, 0x128DFCD6, 0x716EBB81, 0xE9D6B581,
    0x956B72A2, 0xC2D7DAE8, 0x1DB29FC6, 0x8DE26CE3, 0xDA1D71AF, 0xD7CAC53F, 0x1A2342AE,
    0x14D68C15, 0x6940F1A4, 0x80AF1B4C, 0xD25E5207, 0x2964F1F6, 0x5C5493EB, 0x0D993306,
    0xACCEBCD8, 0xBC1F5EEE, 0x6C318542, 0x49D31036, 0x8EB62B0E, 0xC297DD8B, 0x10EFA3E2,
    0x12E10B91, 0xEA5D098B, 0xDCBB04EA, 0xD0FAAF05, 0xC2F60A6B, 0x5BEF8817, 0xB1FF19E0,
    0xD64BEDAC, 0x94D59603, 0x59E0E966, 0x8D9742D1, 0x09604C0D, 0x9F80790F, 0x46A847DA,
    0x99543A85, 0x708A558A, 0x0C8E8455, 0x91AE34D3, 0x5745D3CA, 0x27B1709E, 0x81853705,
    0xA1942282, 0x19288156, 0x359FF961, 0xDD75F0FE, 0x824F439A, 0x52502912, 0x625C9480,
    0x49604CA5, 0x9E33C44B, 0xA67A1789, 0xC4943D34, 0xC1F3DE44, 0xF78F53DA, 0x053E67C4,
    0xF50D4A6D, 0x06C79FC3, 0x2A031188, 0x34158210, 0xE839060E, 0x117A1255, 0xA2BD348B,
    0xD368BB4E, 0xA734F6A0, 0x13EA2D3F, 0x11D4FA61, 0x5625DA12, 0xE256868D, 0xB6B0D036,
    0x41CC6896, 0x06A0D31A, 0x4D61AA06, 0x30D360FA, 0x3706D8DA, 0x6F0DD02A, 0xDD9C23B2,
    0xC619C0C4, 0x926F3646, 0x3B65ECCD, 0x86CDD8FB, 0x2D95B3F6, 0xFB536AED, 0xF6C6D1DA,
    0xEDCDB3B4, 0x38BB4F6D, 0x77C70362, 0x65E67D00, 0x731D05C6, 0xF5830BA9, 0xDCBE0232,
    0x4CE3B504, 0x2DE769ED, 0xFBC77AEF, 0xB72EAFDE, 0x57E20D9A, 0x24C36C92, 0x1BC95128,
    0x9812E258, 0x34264084, 0xE12B4D81, 0x577A70CD, 0xD7104D53, 0x3471C449, 0xFC496A71,
    0xB8C714E2, 0x5F5E33C5, 0x8D81E235, 0x00080CFA, 0x00000000

  EW_BITMAPS_TABLE( ApplicationAndBitmap )
    EW_BITMAP( ApplicationAndBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationAndBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::AndBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationAndBitmap )

/* Initializer for the class 'Application::CAEModule' */
void ApplicationCAEModule__Init( ApplicationCAEModule _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEModule );

  /* ... and initialize objects, variables, properties, etc. */
  _this->gapSize = 10;
}

/* Re-Initializer for the class 'Application::CAEModule' */
void ApplicationCAEModule__ReInit( ApplicationCAEModule _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEModule' */
void ApplicationCAEModule__Done( ApplicationCAEModule _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEModule );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEModule' */
void ApplicationCAEModule__Mark( ApplicationCAEModule _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEModule.Render()' */
XPoint ApplicationCAEModule_Render( ApplicationCAEModule _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aCanvas );
  EW_UNUSED_ARG( aClip );
  EW_UNUSED_ARG( position );

  return _Const0054;
}

/* Wrapper function for the virtual method : 'Application::CAEModule.Render()' */
XPoint ApplicationCAEModule__Render( void* _this, XPoint position, XRect aClip, 
  GraphicsCanvas aCanvas )
{
  return ((ApplicationCAEModule)_this)->_VMT->Render((ApplicationCAEModule)_this
  , position, aClip, aCanvas );
}

/* 'C' function for method : 'Application::CAEModule.RenderHoz()' */
XPoint ApplicationCAEModule_RenderHoz( ApplicationCAEModule _this, XPoint start, 
  XInt32 length, XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint dst;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  dst = start;
  dst.X = ( dst.X + length );
  GraphicsCanvas_DrawLine( aCanvas, aClip, start, dst, _Const000A, _Const000A, 0 
  );
  start = EwMovePointPos( start, _Const00EB );
  dst = EwMovePointPos( dst, _Const00EB );
  GraphicsCanvas_DrawLine( aCanvas, aClip, start, dst, _Const000A, _Const000A, 0 
  );
  start.X = ( start.X + length );
  return start;
}

/* 'C' function for method : 'Application::CAEModule.RenderVert()' */
XPoint ApplicationCAEModule_RenderVert( ApplicationCAEModule _this, XPoint start, 
  XInt32 length, XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint dst;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  dst = start;
  dst.Y = ( dst.Y + length );
  GraphicsCanvas_DrawLine( aCanvas, aClip, start, dst, _Const000A, _Const000A, 0 
  );
  start = EwMovePointPos( start, _Const00EC );
  dst = EwMovePointPos( dst, _Const00EC );
  GraphicsCanvas_DrawLine( aCanvas, aClip, start, dst, _Const000A, _Const000A, 0 
  );
  start.Y = ( start.Y + length );
  return start;
}

/* 'C' function for method : 'Application::CAEModule.RenderConnect()' */
void ApplicationCAEModule_RenderConnect( ApplicationCAEModule _this, XPoint pos1, 
  XPoint pos2, XRect aClip, GraphicsCanvas aCanvas )
{
  XInt32 w = pos2.X - pos1.X;
  XInt32 h = pos2.Y - pos1.Y;

  pos1 = ApplicationCAEModule_RenderHoz( _this, pos1, w, aClip, aCanvas );
  ApplicationCAEModule_RenderVert( _this, pos1, h, aClip, aCanvas );
  return;
}

/* 'C' function for method : 'Application::CAEModule.Size()' */
XPoint ApplicationCAEModule_Size( ApplicationCAEModule _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return _Const0054;
}

/* Wrapper function for the virtual method : 'Application::CAEModule.Size()' */
XPoint ApplicationCAEModule__Size( void* _this )
{
  return ((ApplicationCAEModule)_this)->_VMT->Size((ApplicationCAEModule)_this );
}

/* 'C' function for method : 'Application::CAEModule.Output()' */
XPoint ApplicationCAEModule_Output( ApplicationCAEModule _this, XPoint position )
{
  return EwMovePointNeg( EwMovePointPos( position, ApplicationCAEModule__Size( _this 
    )), EwNewPoint( 0, ApplicationCAEModule__Size( _this ).Y / 2 ));
}

/* Variants derived from the class : 'Application::CAEModule' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEModule )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEModule )

/* Virtual Method Table (VMT) for the class : 'Application::CAEModule' */
EW_DEFINE_CLASS( ApplicationCAEModule, XObject, "Application::CAEModule" )
  ApplicationCAEModule_Render,
  ApplicationCAEModule_Size,
EW_END_OF_CLASS( ApplicationCAEModule )

/* Initializer for the class 'Application::CAEZone' */
void ApplicationCAEZone__Init( ApplicationCAEZone _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEZone );

  /* ... and initialize objects, variables, properties, etc. */
  _this->type = EwLoadResource( &ResourcesDefaultBitmap, ResourcesBitmap );
}

/* Re-Initializer for the class 'Application::CAEZone' */
void ApplicationCAEZone__ReInit( ApplicationCAEZone _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEZone' */
void ApplicationCAEZone__Done( ApplicationCAEZone _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEZone );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEZone' */
void ApplicationCAEZone__Mark( ApplicationCAEZone _this )
{
  EwMarkObject( _this->type );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEZone.Render()' */
XPoint ApplicationCAEZone_Render( ApplicationCAEZone _this, XPoint position, XRect 
  aClip, GraphicsCanvas aCanvas )
{
  return ApplicationCAEZone_RenderZone( _this, position, aClip, aCanvas, _this->type 
    );
}

/* 'C' function for method : 'Application::CAEZone.Size()' */
XPoint ApplicationCAEZone_Size( ApplicationCAEZone _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return EwLoadResource( &ApplicationCircle55Bitmap, ResourcesBitmap )->FrameSize;
}

/* 'C' function for method : 'Application::CAEZone.RenderZone()' */
XPoint ApplicationCAEZone_RenderZone( ApplicationCAEZone _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas, ResourcesBitmap type )
{
  ResourcesBitmap ctype = EwLoadResource( &ApplicationCircle55Bitmap, ResourcesBitmap 
    );
  XRect dst = EwNewRect2Point( position, EwMovePointPos( position, ctype->FrameSize 
    ));
  XRect dst2 = EwNewRect2Point( position, EwMovePointPos( position, _Const00ED ));
  XRect src = EwNewRect2Point( _Const0054, ctype->FrameSize );
  XRect src2 = _Const00EE;

  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, ctype, 0, dst, src, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1, 0 );
  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, type, 0, dst2, src2, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1, 1 );
  dst2.Point1.X = ( dst2.Point1.X + ( ctype->FrameSize.X - 18 ));
  dst2.Point2.X = ( dst2.Point2.X + ( ctype->FrameSize.X - 18 ));
  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, type, 0, dst2, src2, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1, 1 );
  dst2.Point1.Y = ( dst2.Point1.Y + ( ctype->FrameSize.Y - 18 ));
  dst2.Point2.Y = ( dst2.Point2.Y + ( ctype->FrameSize.Y - 18 ));
  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, type, 0, dst2, src2, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1, 1 );
  dst2.Point1.X = ( dst2.Point1.X - ( ctype->FrameSize.X - 18 ));
  dst2.Point2.X = ( dst2.Point2.X - ( ctype->FrameSize.X - 18 ));
  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, type, 0, dst2, src2, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1, 1 );
  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ), EwLoadString( &_Const00EF ), 0, 5, dst, _Const00F0, 0, _Const000A, 
  _Const000A, _Const000A, _Const000A, 1 );
  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ), EwNewStringInt( _this->ZoneNum, 0, 10 ), 0, 3, dst, _Const00F1, 
  0, _Const000A, _Const000A, _Const000A, _Const000A, 1 );
  return ApplicationCAEModule_Output((ApplicationCAEModule)_this, position );
}

/* Variants derived from the class : 'Application::CAEZone' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEZone )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEZone )

/* Virtual Method Table (VMT) for the class : 'Application::CAEZone' */
EW_DEFINE_CLASS( ApplicationCAEZone, ApplicationCAEModule, "Application::CAEZone" )
  ApplicationCAEZone_Render,
  ApplicationCAEZone_Size,
EW_END_OF_CLASS( ApplicationCAEZone )

/* Initializer for the class 'Application::CAEZoneFireAlarm' */
void ApplicationCAEZoneFireAlarm__Init( ApplicationCAEZoneFireAlarm _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEZone__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEZoneFireAlarm );
}

/* Re-Initializer for the class 'Application::CAEZoneFireAlarm' */
void ApplicationCAEZoneFireAlarm__ReInit( ApplicationCAEZoneFireAlarm _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEZone__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEZoneFireAlarm' */
void ApplicationCAEZoneFireAlarm__Done( ApplicationCAEZoneFireAlarm _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEZoneFireAlarm );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEZone__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEZoneFireAlarm' */
void ApplicationCAEZoneFireAlarm__Mark( ApplicationCAEZoneFireAlarm _this )
{
  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEZone__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEZoneFireAlarm.Render()' */
XPoint ApplicationCAEZoneFireAlarm_Render( ApplicationCAEZoneFireAlarm _this, XPoint 
  position, XRect aClip, GraphicsCanvas aCanvas )
{
  return ApplicationCAEZone_RenderZone((ApplicationCAEZone)_this, position, aClip, 
    aCanvas, EwLoadResource( &ApplicationFireAlarmBitmap, ResourcesBitmap ));
}

/* 'C' function for method : 'Application::CAEZoneFireAlarm.Size()' */
XPoint ApplicationCAEZoneFireAlarm_Size( ApplicationCAEZoneFireAlarm _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return EwLoadResource( &ApplicationCircle55Bitmap, ResourcesBitmap )->FrameSize;
}

/* Variants derived from the class : 'Application::CAEZoneFireAlarm' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEZoneFireAlarm )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEZoneFireAlarm )

/* Virtual Method Table (VMT) for the class : 'Application::CAEZoneFireAlarm' */
EW_DEFINE_CLASS( ApplicationCAEZoneFireAlarm, ApplicationCAEZone, "Application::CAEZoneFireAlarm" )
  ApplicationCAEZoneFireAlarm_Render,
  ApplicationCAEZoneFireAlarm_Size,
EW_END_OF_CLASS( ApplicationCAEZoneFireAlarm )

/* Initializer for the class 'Application::CAEGate' */
void ApplicationCAEGate__Init( ApplicationCAEGate _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEGate );
}

/* Re-Initializer for the class 'Application::CAEGate' */
void ApplicationCAEGate__ReInit( ApplicationCAEGate _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEGate' */
void ApplicationCAEGate__Done( ApplicationCAEGate _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEGate );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEGate' */
void ApplicationCAEGate__Mark( ApplicationCAEGate _this )
{
  EwMarkObject( _this->InputB );
  EwMarkObject( _this->InputA );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEGate.Size()' */
XPoint ApplicationCAEGate_Size( ApplicationCAEGate _this )
{
  XPoint a = ApplicationCAEModule__Size( _this->InputA );
  XPoint b = ApplicationCAEModule__Size( _this->InputB );
  XInt32 maxx = a.X;

  if ( b.X > maxx )
    maxx = b.X;

  return EwNewPoint(( maxx + 100 ) + _this->Super1.gapSize, ( a.Y + _this->Super1.gapSize 
    ) + b.Y );
}

/* 'C' function for method : 'Application::CAEGate.RenderGate()' */
XPoint ApplicationCAEGate_RenderGate( ApplicationCAEGate _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas, ResourcesBitmap aBitmap )
{
  if (( _this->InputA != 0 ) && ( _this->InputB != 0 ))
  {
    XPoint aOut = ApplicationCAEModule__Render( _this->InputA, position, aClip, 
      aCanvas );
    XPoint bOut = ApplicationCAEModule__Render( _this->InputB, EwMovePointPos( position, 
      EwNewPoint( 0, ApplicationCAEModule__Size( _this->InputA ).Y + _this->Super1.gapSize 
      )), aClip, aCanvas );
    XPoint out = ApplicationCAEModule_Output((ApplicationCAEModule)_this, position 
      );
    XRect aDstRect;
    ApplicationCAEModule_RenderConnect((ApplicationCAEModule)_this, aOut, EwMovePointNeg( 
    out, _Const00F2 ), aClip, aCanvas );
    ApplicationCAEModule_RenderConnect((ApplicationCAEModule)_this, bOut, EwMovePointNeg( 
    out, _Const00F3 ), aClip, aCanvas );
    aDstRect = EwNewRect2Point( EwMovePointNeg( out, _Const00F4 ), EwMovePointPos( 
    out, _Const00C3 ));
    GraphicsCanvas_ScaleBitmap( aCanvas, aClip, aBitmap, 0, aDstRect, _Const00F5, 
    _Const000A, _Const000A, _Const000A, _Const000A, 1, 0 );
    return EwMovePointNeg( out, _Const00EB );
  }

  return _Const0054;
}

/* Variants derived from the class : 'Application::CAEGate' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEGate )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEGate )

/* Virtual Method Table (VMT) for the class : 'Application::CAEGate' */
EW_DEFINE_CLASS( ApplicationCAEGate, ApplicationCAEModule, "Application::CAEGate" )
  ApplicationCAEModule_Render,
  ApplicationCAEGate_Size,
EW_END_OF_CLASS( ApplicationCAEGate )

/* Initializer for the class 'Application::CAEGateOR' */
void ApplicationCAEGateOR__Init( ApplicationCAEGateOR _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEGate__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEGateOR );
}

/* Re-Initializer for the class 'Application::CAEGateOR' */
void ApplicationCAEGateOR__ReInit( ApplicationCAEGateOR _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEGate__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEGateOR' */
void ApplicationCAEGateOR__Done( ApplicationCAEGateOR _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEGateOR );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEGate__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEGateOR' */
void ApplicationCAEGateOR__Mark( ApplicationCAEGateOR _this )
{
  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEGate__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEGateOR.Render()' */
XPoint ApplicationCAEGateOR_Render( ApplicationCAEGateOR _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint outpos = ApplicationCAEGate_RenderGate((ApplicationCAEGate)_this, position, 
    aClip, aCanvas, EwLoadResource( &ApplicationOrBitmap, ResourcesBitmap ));
  XRect dst = EwNewRect2Point( EwMovePointNeg( outpos, _Const00F4 ), EwMovePointPos( 
    outpos, _Const00C3 ));

  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ), EwLoadString( &_Const00F6 ), 0, 5, dst, _Const00F7, 0, _Const000A, 
  _Const000A, _Const000A, _Const000A, 1 );
  return outpos;
}

/* Variants derived from the class : 'Application::CAEGateOR' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEGateOR )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEGateOR )

/* Virtual Method Table (VMT) for the class : 'Application::CAEGateOR' */
EW_DEFINE_CLASS( ApplicationCAEGateOR, ApplicationCAEGate, "Application::CAEGateOR" )
  ApplicationCAEGateOR_Render,
  ApplicationCAEGate_Size,
EW_END_OF_CLASS( ApplicationCAEGateOR )

/* Initializer for the class 'Application::CAEGateAND' */
void ApplicationCAEGateAND__Init( ApplicationCAEGateAND _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEGate__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEGateAND );
}

/* Re-Initializer for the class 'Application::CAEGateAND' */
void ApplicationCAEGateAND__ReInit( ApplicationCAEGateAND _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEGate__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEGateAND' */
void ApplicationCAEGateAND__Done( ApplicationCAEGateAND _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEGateAND );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEGate__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEGateAND' */
void ApplicationCAEGateAND__Mark( ApplicationCAEGateAND _this )
{
  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEGate__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEGateAND.Render()' */
XPoint ApplicationCAEGateAND_Render( ApplicationCAEGateAND _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint outpos = ApplicationCAEGate_RenderGate((ApplicationCAEGate)_this, position, 
    aClip, aCanvas, EwLoadResource( &ApplicationAndBitmap, ResourcesBitmap ));
  XRect dst = EwNewRect2Point( EwMovePointNeg( outpos, _Const00F4 ), EwMovePointPos( 
    outpos, _Const00C3 ));

  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ), EwLoadString( &_Const00F8 ), 0, 5, dst, _Const00F7, 0, _Const000A, 
  _Const000A, _Const000A, _Const000A, 1 );
  return outpos;
}

/* Variants derived from the class : 'Application::CAEGateAND' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEGateAND )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEGateAND )

/* Virtual Method Table (VMT) for the class : 'Application::CAEGateAND' */
EW_DEFINE_CLASS( ApplicationCAEGateAND, ApplicationCAEGate, "Application::CAEGateAND" )
  ApplicationCAEGateAND_Render,
  ApplicationCAEGate_Size,
EW_END_OF_CLASS( ApplicationCAEGateAND )

/* Initializer for the class 'Application::CAEZoneSmokeDetectors' */
void ApplicationCAEZoneSmokeDetectors__Init( ApplicationCAEZoneSmokeDetectors _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEZone__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEZoneSmokeDetectors );
}

/* Re-Initializer for the class 'Application::CAEZoneSmokeDetectors' */
void ApplicationCAEZoneSmokeDetectors__ReInit( ApplicationCAEZoneSmokeDetectors _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEZone__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEZoneSmokeDetectors' */
void ApplicationCAEZoneSmokeDetectors__Done( ApplicationCAEZoneSmokeDetectors _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEZoneSmokeDetectors );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEZone__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEZoneSmokeDetectors' */
void ApplicationCAEZoneSmokeDetectors__Mark( ApplicationCAEZoneSmokeDetectors _this )
{
  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEZone__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEZoneSmokeDetectors.Render()' */
XPoint ApplicationCAEZoneSmokeDetectors_Render( ApplicationCAEZoneSmokeDetectors _this, 
  XPoint position, XRect aClip, GraphicsCanvas aCanvas )
{
  return ApplicationCAEZone_RenderZone((ApplicationCAEZone)_this, position, aClip, 
    aCanvas, EwLoadResource( &ApplicationSmokeBitmap, ResourcesBitmap ));
}

/* 'C' function for method : 'Application::CAEZoneSmokeDetectors.Size()' */
XPoint ApplicationCAEZoneSmokeDetectors_Size( ApplicationCAEZoneSmokeDetectors _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return EwLoadResource( &ApplicationCircle55Bitmap, ResourcesBitmap )->FrameSize;
}

/* Variants derived from the class : 'Application::CAEZoneSmokeDetectors' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEZoneSmokeDetectors )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEZoneSmokeDetectors )

/* Virtual Method Table (VMT) for the class : 'Application::CAEZoneSmokeDetectors' */
EW_DEFINE_CLASS( ApplicationCAEZoneSmokeDetectors, ApplicationCAEZone, "Application::CAEZoneSmokeDetectors" )
  ApplicationCAEZoneSmokeDetectors_Render,
  ApplicationCAEZoneSmokeDetectors_Size,
EW_END_OF_CLASS( ApplicationCAEZoneSmokeDetectors )

/* Initializer for the class 'Application::CAEDevice' */
void ApplicationCAEDevice__Init( ApplicationCAEDevice _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEDevice );

  /* ... and initialize objects, variables, properties, etc. */
  _this->type = EwLoadResource( &ResourcesDefaultBitmap, ResourcesBitmap );
}

/* Re-Initializer for the class 'Application::CAEDevice' */
void ApplicationCAEDevice__ReInit( ApplicationCAEDevice _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEDevice' */
void ApplicationCAEDevice__Done( ApplicationCAEDevice _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEDevice );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEDevice' */
void ApplicationCAEDevice__Mark( ApplicationCAEDevice _this )
{
  EwMarkObject( _this->type );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEDevice.Render()' */
XPoint ApplicationCAEDevice_Render( ApplicationCAEDevice _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XRect dst = EwNewRect2Point( EwMovePointPos( position, _Const00F9 ), EwMovePointPos( 
    position, _Const00FA ));
  XRect src = _Const00EE;

  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, _this->type, 0, dst, src, _Const000A, 
  _Const000A, _Const000A, _Const000A, 1, 0 );
  dst.Point1 = EwMovePointNeg( dst.Point1, _Const00F9 );
  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ), EwConcatString( EwLoadString( &_Const00FB ), EwNewStringInt( 
  _this->UnitNum, 0, 10 )), 0, 6, dst, _Const00FC, 0, _Const000A, _Const000A, _Const000A, 
  _Const000A, 1 );
  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ), EwConcatString( EwLoadString( &_Const00A5 ), EwNewStringInt( 
  _this->ZoneNum, 0, 10 )), 0, 7, dst, _Const00FD, 0, _Const000A, _Const000A, _Const000A, 
  _Const000A, 1 );
  return ApplicationCAEModule_Output((ApplicationCAEModule)_this, position );
}

/* 'C' function for method : 'Application::CAEDevice.Size()' */
XPoint ApplicationCAEDevice_Size( ApplicationCAEDevice _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return _Const00FA;
}

/* Variants derived from the class : 'Application::CAEDevice' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEDevice )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEDevice )

/* Virtual Method Table (VMT) for the class : 'Application::CAEDevice' */
EW_DEFINE_CLASS( ApplicationCAEDevice, ApplicationCAEModule, "Application::CAEDevice" )
  ApplicationCAEDevice_Render,
  ApplicationCAEDevice_Size,
EW_END_OF_CLASS( ApplicationCAEDevice )

/* Font resource : 'Application::FontVerdana14' */
EW_DEFINE_FONT_RES( ApplicationFontVerdana14, 12, 2, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 2, -9, 9, 9, 12, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 4, 0x000000AD ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -9, 1, 9, 5, 0x000000AD ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 4, 3, 6, 0x000000CC ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 8, 9, 10, 0x000000F0 ),              /* '#' */
  EW_GLYPH( 0x0024, 1, -10, 6, 12, 8, 0x000001FC ),             /* '$' */
  EW_GLYPH( 0x0025, 1, -9, 11, 9, 13, 0x000002F7 ),             /* '%' */
  EW_GLYPH( 0x0026, 1, -9, 9, 9, 9, 0x00000461 ),               /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 1, 3, 3, 0x00000589 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -10, 3, 12, 5, 0x00000593 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 3, 12, 5, 0x0000061E ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -10, 5, 5, 8, 0x000006A9 ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -7, 7, 7, 9, 0x00000712 ),               /* '+' */
  EW_GLYPH( 0x002C, 1, -2, 3, 4, 4, 0x00000777 ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -4, 4, 1, 5, 0x000007A9 ),               /* '-' */
  EW_GLYPH( 0x002E, 2, -2, 1, 2, 4, 0x000007BD ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 6, 12, 5, 0x000007C3 ),             /* '/' */
  EW_GLYPH( 0x0030, 1, -9, 6, 9, 8, 0x00000883 ),               /* '0' */
  EW_GLYPH( 0x0031, 2, -9, 5, 9, 8, 0x0000093A ),               /* '1' */
  EW_GLYPH( 0x0032, 1, -9, 6, 9, 8, 0x00000992 ),               /* '2' */
  EW_GLYPH( 0x0033, 1, -9, 6, 9, 8, 0x00000A6D ),               /* '3' */
  EW_GLYPH( 0x0034, 1, -9, 7, 9, 8, 0x00000B40 ),               /* '4' */
  EW_GLYPH( 0x0035, 1, -9, 6, 9, 8, 0x00000BEA ),               /* '5' */
  EW_GLYPH( 0x0036, 1, -9, 6, 9, 8, 0x00000CAD ),               /* '6' */
  EW_GLYPH( 0x0037, 1, -9, 6, 9, 8, 0x00000D85 ),               /* '7' */
  EW_GLYPH( 0x0038, 1, -9, 6, 9, 8, 0x00000E23 ),               /* '8' */
  EW_GLYPH( 0x0039, 1, -9, 6, 9, 8, 0x00000F26 ),               /* '9' */
  EW_GLYPH( 0x003A, 2, -7, 1, 7, 5, 0x00001000 ),               /* ':' */
  EW_GLYPH( 0x003B, 1, -7, 3, 9, 5, 0x00001013 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 7, 9, 9, 0x0000105C ),               /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 7, 3, 9, 0x0000113E ),               /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 7, 9, 9, 0x000011A7 ),               /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 5, 9, 7, 0x00001289 ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 10, 10, 12, 0x0000131C ),            /* '@' */
  EW_GLYPH( 0x0041, -1, -9, 10, 9, 8, 0x000014A7 ),             /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 6, 9, 8, 0x000015C5 ),               /* 'B' */
  EW_GLYPH( 0x0043, 1, -9, 7, 9, 9, 0x00001680 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 7, 9, 9, 0x0000175B ),               /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 6, 9, 8, 0x0000181A ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 6, 9, 7, 0x000018B8 ),               /* 'F' */
  EW_GLYPH( 0x0047, 1, -9, 7, 9, 9, 0x0000193A ),               /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 7, 9, 9, 0x00001A22 ),               /* 'H' */
  EW_GLYPH( 0x0049, 1, -9, 3, 9, 5, 0x00001A91 ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 4, 9, 5, 0x00001AC8 ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 6, 9, 8, 0x00001B1A ),               /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 6, 9, 7, 0x00001BC2 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 8, 9, 10, 0x00001C10 ),              /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 7, 9, 9, 0x00001CDB ),               /* 'N' */
  EW_GLYPH( 0x004F, 1, -9, 8, 9, 10, 0x00001D6C ),              /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 6, 9, 8, 0x00001E78 ),               /* 'P' */
  EW_GLYPH( 0x0051, 1, -9, 8, 11, 10, 0x00001F11 ),             /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 7, 9, 8, 0x00002058 ),               /* 'R' */
  EW_GLYPH( 0x0053, 1, -9, 6, 9, 8, 0x0000211C ),               /* 'S' */
  EW_GLYPH( 0x0054, 0, -9, 7, 9, 7, 0x0000220D ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 7, 9, 9, 0x00002280 ),               /* 'U' */
  EW_GLYPH( 0x0056, -1, -9, 10, 9, 8, 0x00002309 ),             /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 13, 9, 13, 0x0000240D ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 8, 9, 8, 0x0000257A ),               /* 'X' */
  EW_GLYPH( 0x0059, 0, -9, 7, 9, 7, 0x00002678 ),               /* 'Y' */
  EW_GLYPH( 0x005A, 1, -9, 6, 9, 8, 0x00002720 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 1, -10, 3, 12, 5, 0x000027E5 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 5, 12, 5, 0x00002825 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 3, 12, 5, 0x000028DA ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 8, 4, 10, 0x0000291A ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 8, 1, 8, 0x0000298A ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 2, 2, 8, 0x000029B2 ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -7, 6, 7, 8, 0x000029CA ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 6, 10, 8, 0x00002A75 ),             /* 'b' */
  EW_GLYPH( 0x0063, 1, -7, 5, 7, 6, 0x00002B14 ),               /* 'c' */
  EW_GLYPH( 0x0064, 1, -10, 6, 10, 8, 0x00002B8F ),             /* 'd' */
  EW_GLYPH( 0x0065, 1, -7, 6, 7, 8, 0x00002C2A ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -10, 4, 10, 4, 0x00002CE7 ),             /* 'f' */
  EW_GLYPH( 0x0067, 1, -7, 6, 9, 8, 0x00002D47 ),               /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 6, 10, 8, 0x00002E18 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 1, 10, 3, 0x00002E94 ),             /* 'i' */
  EW_GLYPH( 0x006A, 0, -10, 3, 12, 4, 0x00002EAA ),             /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 6, 10, 7, 0x00002EF6 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 1, 10, 3, 0x00002F88 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 9, 7, 11, 0x00002F96 ),              /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 6, 7, 8, 0x0000302B ),               /* 'n' */
  EW_GLYPH( 0x006F, 1, -7, 6, 7, 8, 0x00003095 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 6, 9, 8, 0x0000312D ),               /* 'p' */
  EW_GLYPH( 0x0071, 1, -7, 6, 9, 8, 0x000031D7 ),               /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 4, 7, 5, 0x00003281 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x000032C1 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -9, 5, 9, 5, 0x00003374 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 6, 7, 8, 0x000033DF ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 7, 7, 7, 0x00003436 ),               /* 'v' */
  EW_GLYPH( 0x0077, 1, -7, 9, 7, 11, 0x000034C7 ),              /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 7, 7, 7, 0x000035C6 ),               /* 'x' */
  EW_GLYPH( 0x0079, 1, -7, 5, 9, 7, 0x00003679 ),               /* 'y' */
  EW_GLYPH( 0x007A, 1, -7, 5, 7, 7, 0x00003725 ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 5, 12, 8, 0x000037B9 ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -10, 1, 12, 5, 0x0000385C ),             /* '|' */
  EW_GLYPH( 0x007D, 2, -10, 5, 12, 8, 0x0000386C ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -5, 8, 3, 10, 0x0000390E ),              /* '~' */

  EW_FONT_PIXEL( ApplicationFontVerdana14, 0x00003973 )         /* ratio 78.38 % */
    0xEF7BDEF7, 0xF7BDD7BD, 0x00017BDE, 0x00000000, 0xF7BDEE00, 0x0F12EBDE, 0x0F387BBF,
    0x5FC4104F, 0xB52CF1FC, 0xE6FFB7B0, 0xF7AEF7AE, 0xDC6F71BA, 0xC3C63C6B, 0x5D7775DD,
    0xF9F77E77, 0xC156552E, 0xCEFE3005, 0xF671CF7E, 0xB7EB0319, 0xDDD73C3D, 0xFFFBE18F,
    0x739EB056, 0x1EF7EFFD, 0x3A8037FF, 0x787E21E7, 0xBDE6FFFF, 0x2A9231C8, 0xBD6918E4,
    0xEBFFFFD0, 0xCF39D4F7, 0x3F3D4E73, 0xF0DFFFEF, 0xA246392E, 0x71231C8A, 0x7FFFFA5F,
    0x82FFBEC7, 0x60FDF7D3, 0x57784A94, 0xFF8C2F3D, 0xFD2E3CFF, 0x932FEF7B, 0x1DFBEA11,
    0xF878F06A, 0x9DFE73DE, 0x3F316EBB, 0xD8ACDFBF, 0x0191EB7F, 0xFF63D619, 0xDFBF0ACD,
    0xA27EFD37, 0x2CF6FFA6, 0x59E91091, 0xFE6A3BFE, 0x8F7CB87E, 0x6F9FDBE7, 0xBFB7CFEF,
    0x02E1F3C7, 0xBAF7B800, 0xDD7BDEF7, 0xFF00017B, 0x65AE6399, 0xF7BDEE7F, 0x1561FC42,
    0x1CC43FFC, 0x0FBF0598, 0x03CF0319, 0x06321FBF, 0x3F7E079E, 0x967CE7D0, 0x1F7FB273,
    0x1992655F, 0x49910110, 0xABE3EFE6, 0x1B64E715, 0x7B83BB87, 0xE0000001, 0xBF3EF75E,
    0xF6F8BE73, 0x2D6FFF39, 0xC0C63556, 0x7BF99738, 0xFD2EAA87, 0xFFCD6117, 0x73BEB739,
    0x39EF38BE, 0xB306FBFB, 0xF77B8B20, 0x83FDBDC7, 0x59837CF9, 0x7EE73DE7, 0x868C2E78,
    0x9EF117BC, 0x784DEFC4, 0xF7BAF7FE, 0x0BDD7BDE, 0xEF7BDC00, 0xF7BDEEBD, 0xB7FDEE02,
    0x1F3DEF7B, 0x6F841672, 0xDFBE7788, 0xE77E5AD9, 0xF1CE7388, 0x9F6785BE, 0x9FFC8BF3,
    0x7AC53FB3, 0xC3AFC046, 0xB3DC5733, 0xEF7BDEFB, 0x5DDEF7BD, 0xA0618DD0, 0x742AC62F,
    0xBF42AC63, 0x5F9CEFC8, 0xFFCE7D9E, 0xFBE664E4, 0xF27CE63E, 0xB7DEFFFF, 0x357DFFFB,
    0xEB0F5598, 0xFF39EEF9, 0xD69CF79F, 0xF358DCFB, 0x1883FD11, 0xFF7CA4CF, 0xBF19FE73,
    0x460FFE73, 0x13E9CEBF, 0xC172E5D7, 0x1CCFF805, 0x03FB2D73, 0xC977E424, 0x7E7FEEEF,
    0xFFA7FF77, 0xE7FC4FFC, 0xBBBF227F, 0xDDF913FF, 0xEEFC87FD, 0x7BDEF7BD, 0xDEF7BDEF,
    0xF7BDEF7B, 0x97EE04DE, 0x4BF7DFF0, 0x5FBEFFCC, 0x1FE7FE62, 0xE6FF3FF3, 0xFF2FDF7F,
    0xFDC97EFB, 0xBFBED612, 0xDCF7FE71, 0xE7893C37, 0xBD1FBD61, 0x42E17003, 0x0BDDCEFD,
    0xFBDCF7DD, 0xEBDAA9FF, 0xF317F7BF, 0xEF3FEEB6, 0x09E794F7, 0x67802246, 0xE7A83518,
    0xE37BFADF, 0xDF8CEEFE, 0xB7B9DF3A, 0xF73EFF7C, 0x01FFF80F, 0xFC09A9F3, 0xE41FDF7F,
    0x7C26631A, 0x9E0FBE3F, 0x79507CC9, 0x9C593DEE, 0xBF7BDEEF, 0xA781EA23, 0x2FFBDEE2,
    0xA85F7DEE, 0xEF714F01, 0x77BDC237, 0xAC14F07F, 0x7FF9EF72, 0x3F773BF2, 0x77B9EF79,
    0xE30F7EFF, 0x403205AD, 0xFA05A804, 0x3CBE30F7, 0xBFFBDCF7, 0xE0DFFEF7, 0x20777BDE,
    0x1660D7E7, 0x60910488, 0xED7D7216, 0xDC767BDE, 0xEEBDEF7B, 0x8002F7BD, 0xEEBDEF7B,
    0x8002F7BD, 0xF7BDEF7B, 0x7BAF7BDE, 0xE000BDEF, 0xF7B97BDE, 0xC800005E, 0xCCDF9CEF,
    0x7FE9CF7B, 0xAFC61EFF, 0xDEE08816, 0x6ABDC11B, 0x0C3DFE81, 0xFD39EE79, 0x0001705D,
    0xBDEF7B80, 0x05EF7BDC, 0xBDEE0000, 0xE00005D7, 0xEEBDEEBA, 0x3C000005, 0x5EF7DCE3,
    0x9A73C6AC, 0xFDE25F71, 0xEEF0DFF0, 0x81D7E781, 0xF3C83F78, 0x0000005E, 0x7B800000,
    0x07F7BDEF, 0x3906B5DF, 0x8FBE5EF9, 0xF133C2B9, 0xF983F3BD, 0x2AA2137C, 0xB800DBC0,
    0xF00C570D, 0x01FB906B, 0x06DE05EB, 0x1BA018CF, 0xCEFC608C, 0xCE790DF9, 0xFF64E739,
    0xD75F9E1E, 0x10115582, 0xB5110111, 0x1EFF5560, 0x39E75F9E, 0xF7939CE7, 0xEF72F3DE,
    0x15621F3D, 0xBDD39C80, 0xFFBDDA37, 0xDF8C0005, 0xCF21BF39, 0xEC9CE739, 0xEBF3C3DF,
    0x022AB05A, 0xB2202222, 0xDFEAAC16, 0xE5FBF3C3, 0x6F7EE739, 0x7373BF1A, 0xF73FFD01,
    0xEE4BF3DE, 0x6603FF3D, 0xBDC9AC42, 0x1F7B9B37, 0xE2137BE0, 0x1BEF20BC, 0xFCDF39DF,
    0xBBBCE7FE, 0x35ABE316, 0xE7FFFDF0, 0x7B3BE237, 0x6FCAE45F, 0x73EED4F0, 0x7BDEEFF6,
    0x5EF7BDEF, 0x00005EF7, 0x00000000, 0x00005C17, 0x20640000, 0xF885FDF2, 0xDDF775BD,
    0xFC0FF2B7, 0xCD416733, 0xFE703FF4, 0x9AC415CC, 0xF82AC5A8, 0x860FBE3E, 0xFDF00C31,
    0x9EB01F7E, 0x6179E167, 0x2154FBC2, 0x98AA897F, 0x390FD7C9, 0x73D45EC3, 0x4F6D4DA9,
    0x316E3FF9, 0x8E79FBD2, 0x959F2067, 0x77FB09A8, 0xD4377FF1, 0xCC5CAC28, 0x5A737E0F,
    0xDF7E98AC, 0xF447EFC8, 0xC4781D39, 0x44C44F03, 0xFC1DB9F4, 0x67EF1CBE, 0xDF9962C6,
    0x87FAFCC4, 0xACB3E75F, 0x7E2FF52F, 0x786DEF0B, 0x000000A2, 0xEF7BDEF7, 0x26FEF7BD,
    0x1AF8BEE2, 0x7FC60F6B, 0x6F787FA1, 0xBDEEFE60, 0x5EEBDEF7, 0xB8000000, 0x0B7E0777,
    0x02B91FCF, 0x87E789BF, 0x83FF895C, 0xC4AC43F5, 0xDDFAC1FF, 0x0005EF7B, 0xE17B8000,
    0xBDDF03F7, 0xEAB7DE1F, 0xA837D6BC, 0xEF7BDD6F, 0xCF7EF7BD, 0xEEE7D8EF, 0x1DFB9F61,
    0xFFBD1998, 0x7D9EFFD7, 0xBE3C6565, 0x02E9FF73, 0xF9F63000, 0xBB3FF3C2, 0x081730CD,
    0xDE550690, 0xCFABC673, 0xEFB3B67F, 0x484DE2D3, 0x1DBC5A78, 0x01705F67, 0x9F9FFAC0,
    0xB7DA7FE5, 0xA8241218, 0x3DF79621, 0x7CE7583B, 0xEC9CE2B1, 0xEF2BD26F, 0xDCF237BD,
    0x42B7EF7B, 0xFBEC6B7E, 0xF47FE31E, 0xEEB86A39, 0x0005EEBD, 0x7E7FEB00, 0xB4FFC677,
    0x104864DF, 0xD5F23D60, 0x88BFBCF7, 0xF956FCEF, 0x177F73DF, 0xDF678000, 0xF7FFFC3D,
    0x01CC3ABB, 0xAF700000, 0x70B9700B, 0x60000BAF, 0x05F7F9E4, 0xC1EB0000, 0x93E43CF3,
    0x06B501AC, 0xF415FCC6, 0xEDC0179D, 0x539F6673, 0x7BDEF9EE, 0x9652D7BE, 0x0000004A,
    0xBECFB800, 0xEFFFF87B, 0x03987577, 0x7BC00000, 0x39EFABCE, 0x7CC99FB7, 0x9F213212,
    0x9EFA7CC9, 0xFFCEFB73, 0xF3EC42F9, 0x05AC2B6F, 0x5CC1A402, 0xFCF89CFA, 0xEB0059CE,
    0x38AEEF9C, 0x864DF5E7, 0xE4AA0904, 0xFDE73DEB, 0x015F9DF3, 0xF2BFF3EE, 0x00002D7F,
    0x2F3DDF8C, 0x983DEFA7, 0xBB9EF162, 0xF7DDFA8B, 0xB8398663, 0x02E1F6F7, 0xEBDEF75C,
    0x90000BDE, 0xFFBDF785, 0x0000170B, 0xDCB14C60, 0x8D93FEEF, 0x61F293CD, 0xF3CD9E3F,
    0xE6B07BF3, 0x2A17D384, 0xA6E29D8A, 0xF152BFDC, 0xBAE7BF58, 0x4C9FB6EF, 0x34C8CD73,
    0xE0E67956, 0xDEFCFEF7, 0x9187231F, 0x27EC6E43, 0xC7A9E9BF, 0x5F8DFEBC, 0x0FF5F07F,
    0xF92EEFF3, 0x7637E63D, 0xD47BFDCA, 0x93F6D9EF, 0xF5BF4CCB, 0x461F79E3, 0xEF87EB26,
    0xEF7BDEE1, 0x8C9BF7BD, 0xF1FE8AFB, 0x937BC37B, 0xA97BDDF9, 0x2F7DE5FF, 0xC5AC0859,
    0xEFDCBDFD, 0x00082CC3, 0x7BEDC1E3, 0xC5FF7001, 0x42545F7D, 0xDFE85AC0, 0x77977E65,
    0xC19E0022, 0xB3EE4BED, 0xFB3BFA70, 0xBF4D5667, 0x0006BE7D
EW_END_OF_FONT_RES( ApplicationFontVerdana14 )

/* Table with links to derived variants of the font resource : 'Application::FontVerdana14' */
EW_RES_WITHOUT_VARIANTS( ApplicationFontVerdana14 )

/* Initializer for the class 'Application::CAEAction' */
void ApplicationCAEAction__Init( ApplicationCAEAction _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEAction );
}

/* Re-Initializer for the class 'Application::CAEAction' */
void ApplicationCAEAction__ReInit( ApplicationCAEAction _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEAction' */
void ApplicationCAEAction__Done( ApplicationCAEAction _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEAction );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEAction' */
void ApplicationCAEAction__Mark( ApplicationCAEAction _this )
{
  EwMarkObject( _this->Input );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEAction.Render()' */
XPoint ApplicationCAEAction_Render( ApplicationCAEAction _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint sz = EwLoadResource( &ApplicationActionBitmap, ResourcesBitmap )->FrameSize;
  XPoint outpos = ApplicationCAEModule__Render( _this->Input, position, aClip, aCanvas 
    );
  XRect dst = EwNewRect2Point( EwMovePointNeg( outpos, EwNewPoint( 0, sz.Y / 2 )), 
    EwMovePointPos( outpos, EwNewPoint( sz.X, ( sz.Y + 1 ) / 2 )));
  XRect src = EwNewRect2Point( _Const0054, sz );

  GraphicsCanvas_ScaleBitmap( aCanvas, aClip, EwLoadResource( &ApplicationActionBitmap, 
  ResourcesBitmap ), 0, dst, src, _Const000A, _Const000A, _Const000A, _Const000A, 
  1, 0 );
  return _Const0054;
}

/* 'C' function for method : 'Application::CAEAction.Size()' */
XPoint ApplicationCAEAction_Size( ApplicationCAEAction _this )
{
  XPoint sz = EwLoadResource( &ApplicationActionBitmap, ResourcesBitmap )->FrameSize;
  XPoint ssz = ApplicationCAEModule__Size( _this->Input );
  XInt32 my = 0;

  if ( sz.Y > ssz.Y )
    my = sz.Y - ssz.Y;

  return EwMovePointPos( ApplicationCAEModule__Size( _this->Input ), EwNewPoint( 
    sz.X, my ));
}

/* Variants derived from the class : 'Application::CAEAction' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEAction )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEAction )

/* Virtual Method Table (VMT) for the class : 'Application::CAEAction' */
EW_DEFINE_CLASS( ApplicationCAEAction, ApplicationCAEModule, "Application::CAEAction" )
  ApplicationCAEAction_Render,
  ApplicationCAEAction_Size,
EW_END_OF_CLASS( ApplicationCAEAction )

/* Initializer for the class 'Application::InputItem' */
void ApplicationInputItem__Init( ApplicationInputItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NumText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->PanelText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->InputTypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->UnitText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00FE );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const00FE );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0011 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00FF );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0070 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0100 );
  CoreRectView__OnSetBounds( &_this->NumText, _Const0101 );
  ViewsText_OnSetAlignment( &_this->NumText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NumText, EwLoadString( &_Const0102 ));
  CoreRectView__OnSetBounds( &_this->PanelText, _Const0103 );
  ViewsText_OnSetAlignment( &_this->PanelText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->PanelText, EwLoadString( &_Const00D1 ));
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0104 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0098 ));
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0105 );
  CoreView_OnSetLayout((CoreView)&_this->InputTypeText, CoreLayoutAlignToRight | 
  CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->InputTypeText, _Const0106 );
  ViewsText_OnSetAlignment( &_this->InputTypeText, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->InputTypeText, EwLoadString( &_Const0107 ));
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const0108 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const0109 ));
  CoreRectView__OnSetBounds( &_this->UnitText, _Const010A );
  ViewsText_OnSetAlignment( &_this->UnitText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->UnitText, EwLoadString( &_Const010B ));
  CoreRectView__OnSetBounds( &_this->TypeText, _Const010C );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const00D2 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NumText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PanelText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputTypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  ViewsText_OnSetFont( &_this->NumText, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->PanelText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationRadioBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->InputTypeText, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->UnitText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::InputItem' */
void ApplicationInputItem__ReInit( ApplicationInputItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->NumText );
  ViewsText__ReInit( &_this->PanelText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->InputTypeText );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->UnitText );
  ViewsText__ReInit( &_this->TypeText );
}

/* Finalizer method for the class 'Application::InputItem' */
void ApplicationInputItem__Done( ApplicationInputItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputItem );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->NumText );
  ViewsText__Done( &_this->PanelText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->InputTypeText );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->UnitText );
  ViewsText__Done( &_this->TypeText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputItem' */
void ApplicationInputItem__Mark( ApplicationInputItem _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->NumText );
  EwMarkObject( &_this->PanelText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->InputTypeText );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->UnitText );
  EwMarkObject( &_this->TypeText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationInputItem_UpdateLayout( ApplicationInputItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationInputItem_UpdateViewState( ApplicationInputItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::InputItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputItem )
EW_END_OF_CLASS_VARIANTS( ApplicationInputItem )

/* Virtual Method Table (VMT) for the class : 'Application::InputItem' */
EW_DEFINE_CLASS( ApplicationInputItem, CoreGroup, "Application::InputItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationInputItem_UpdateLayout,
  ApplicationInputItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationInputItem )

/* Bitmap resource : 'Application::RadioBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationRadioBitmap )
  EW_BITMAP_FRAMES( ApplicationRadioBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 30, 0 )
    EW_BITMAP_FRAME( 14, 6, 4, 4, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationRadioBitmap, Default )       /* ratio 35.00 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0x8FF0984C, 0x08815326, 0x4FC288E8, 0x7829C522,
    0xC7F2B510, 0x84430051, 0x54861720, 0xC99FB248, 0x04E24A01, 0xE2B165B2, 0x44897E44,
    0x51F3BAB5, 0x35924DA4, 0x99CC8E71, 0x7338DB73, 0x80E40425, 0xD0C02FE2, 0xFCA1467F,
    0x148983E3, 0xA33B9E21, 0x48D374DE, 0x48A4A493, 0xDA180E8F, 0x75BA5C6F, 0x14DEA01D,
    0xD4AC73AB, 0x907400B2, 0x2B0C63B1, 0x1944A156, 0x4F42B100, 0x75BB5D2E, 0xABBDE6E7,
    0xB75E2F17, 0x6112B147, 0xD91787D3, 0x9B1167C3, 0x15E999BD, 0x958033AE, 0x392ACE46,
    0x98CAE5B0, 0x2C9E6B29, 0x2F2F96CA, 0x1E86D18A, 0x3C9DF23D, 0xF812117A, 0x726F72A0,
    0xE2EE99CC, 0x7B1093CD, 0xB2DA6D76, 0xADCEDB71, 0x4328D2E7, 0xB9041B93, 0x3DDEAF32,
    0x2F480B7C, 0xF9B89D16, 0x147B2B4D, 0x15BC9AA9, 0xB34F3F4A, 0xFD098978, 0x38AC54E8,
    0x1982B193, 0x72940914, 0x93CFCBE6, 0x196C45A5, 0xB95AF093, 0xC602586A, 0xF7FAFCDC,
    0x0737D3ED, 0xCD65E8B7, 0x8D2330BE, 0x8739EA10, 0xF16481DE, 0x043F4FC3, 0x17C4A060,
    0x9997C0E8, 0xF7FD9B84, 0x846413C1, 0x1E3F91C3, 0x7A605819, 0x07259E1E, 0x42389D24,
    0x6CD632E1, 0xE637C353, 0x8B0213A4, 0x2038062E, 0xF5394C85, 0x82218221, 0xD00023A8,
    0x0C0DE368, 0xCBB2A214, 0xD4E45830, 0x6A1463D8, 0x26394E23, 0x8E64E8DC, 0x43041A38,
    0x33406F17, 0x7DE41859, 0x1A461392, 0x5AC3964D, 0xA3B93CC7, 0xE4925198, 0xC8B12988,
    0x4D071931, 0x414E4188, 0xCFD49801, 0xA1101100, 0x61933BC5, 0x682DCAE2, 0x9427E990,
    0xCED3A164, 0xB014183B, 0x4CFB1483, 0xE1374D46, 0x34CC70B0, 0x1930E4D8, 0x81503D02,
    0xFDA8698F, 0x9CA02639, 0x1C84C4DE, 0x5932D083, 0x32C0A523, 0xA09D2087, 0x5564C7E2,
    0x2AC891E8, 0x5649969A, 0x33C8F13B, 0x920C8281, 0xC42F0AA9, 0x11D93158, 0x4B91FC6F,
    0x31E0670F, 0xB9EC64CC, 0x039CA647, 0x3D0F33C0, 0x09F79C10, 0xD184BC2D, 0x916C5A92,
    0xFA3E4F89, 0x9DE75020, 0x9AC6A958, 0x756288A1, 0xA45E1241, 0x05828FB3, 0xB1AC4990,
    0xCA33EEE4, 0x4174BF2D, 0x78D933D6, 0x3C01C313, 0x560F914C, 0x0F55CC0B, 0xF1C664B3,
    0x788F2708, 0xA223C811, 0x2CCA9248, 0x8A82406E, 0xD168702C, 0xE4A62307, 0x87288961,
    0x02927B2C, 0x0F61543F, 0x1A5A9456, 0xBCDF36CD, 0x6DB61390, 0x2D4A17FD, 0x13917CBE,
    0x9308B2B3, 0xA8E5138C, 0xB106CED3, 0xA1282686, 0x0CE31CB8, 0x78761B12, 0xECB22753,
    0x3C64C632, 0x31078198, 0x4CF30909, 0x864C3E35, 0xA08B1F05, 0x881A1642, 0x56098258,
    0x86B1602A, 0xD81B3D35, 0x4C6D1682, 0x8C1B1583, 0x59094264, 0x593ABEAD, 0xB35CD131,
    0x4F6EDB03, 0xE237CD66, 0x311390A8, 0xC3C358D1, 0x01743164, 0x156433C7, 0x69034F67,
    0x25C97224, 0x85D12016, 0xF12C193A, 0x962339C5, 0x64B76DB8, 0x1BC5C0BD, 0x9435BCD1,
    0x7348C63F, 0x2D390E8D, 0x6D64E8DA, 0x24C9A230, 0x87117832, 0x4D8B6033, 0x330A59F6,
    0xD5BC558C, 0x0ACE2378, 0x87212D64, 0x8850B520, 0x907E16D5, 0xDB34964A, 0x4B42E380,
    0x08117D58, 0x9590A124, 0x5C6B15C2, 0xB3EC5583, 0x51E78B7F, 0x0A974457, 0x91542759,
    0x11823646, 0xD759D866, 0x0A4E337C, 0x9FD7FFC6, 0xA3B4EB39, 0xAC435901, 0x582F47D1,
    0x1A8560A1, 0xF84B20D8, 0xAC0A9114, 0xAD5C4F78, 0x08188A39, 0x904F0921, 0x4BC73F25,
    0xD2C8295E, 0x6344658B, 0xD09BF108, 0x8D819C51, 0x2C80C86E, 0x2383F85C, 0xFC958148,
    0x0D816590, 0xEE6AD70C, 0x08A3C101, 0xB164788F, 0xA0E81841, 0x2F5CAC0C, 0x09CA707B,
    0x0F21E03B, 0x1F0C940A, 0x0387FC19, 0x79058084, 0x64390718, 0xD8164159, 0xD4AC0D50,
    0x58730C00, 0x153E5906, 0xEE54AC2A, 0x1FDBF972, 0x84702A56, 0x6083AC2E, 0x2643E923,
    0xC988314A, 0xB9160268, 0xCE590330, 0x550A2694, 0x53481FA7, 0xA3B0591A, 0xC1ECC99D,
    0xD9988537, 0x39372249, 0x0D6108AC, 0x21C5F07C, 0x3C8AC142, 0xC015E64C, 0x72144638,
    0x400C33F2, 0xC0F04EC0, 0x11D51F0A, 0x43345F9A, 0x1BC0411A, 0x3070E025, 0x522A3C48,
    0xBA5739A1, 0x22C432B0, 0x397ECFD2, 0x9ECD8589, 0x80431930, 0x207A1562, 0xC1D83A87,
    0x40F00301, 0xDFE8FA0A, 0x8F61B0FF, 0x2720296D, 0x03D9BB35, 0x78859086, 0x9510E198,
    0x76D944D0, 0x7C48A584, 0xA8566022, 0x717E2B87, 0xE4E4290C, 0x4048F938, 0x1586C6D8,
    0x1C52E25B, 0x078758E8, 0xC9C9A212, 0x8A630C58, 0x6532C009, 0x91A29035, 0x78800BA5,
    0xA32628C4, 0xC2604506, 0xA2313912, 0x82601C3D, 0x1B41A02A, 0x18096958, 0x76504537,
    0x738F5416, 0x4851DE82, 0x70338530, 0xA8F41E23, 0xE2C803C7, 0xB0BCA013, 0xC3946C16,
    0xA06A373A, 0x08C1DCD7, 0x2E83F86E, 0x720E11B2, 0x0127209C, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( ApplicationRadioBitmap )
    EW_BITMAP( ApplicationRadioBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationRadioBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::RadioBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationRadioBitmap )

/* Bitmap resource : 'Application::ZoneBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationZoneBitmap )
  EW_BITMAP_FRAMES( ApplicationZoneBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 32, 0 )
    EW_BITMAP_FRAME( 3, 2, 5, 7, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationZoneBitmap, Default )        /* ratio 23.73 % */
    0x0409FF00, 0xC11FF020, 0xCC090581, 0x07AFB7BB, 0xBAF8783A, 0x8FB7B3C4, 0x07813F88,
    0xA8341E0A, 0x8BBF6351, 0x0C51E411, 0xBDDDEE72, 0xD1D2DF30, 0x657293AB, 0xF72293C9,
    0x2FF8F905, 0x38844742, 0x77FC5E0D, 0x87C56260, 0x4C361711, 0xCE639378, 0xF284008D,
    0x1CCC4518, 0xCEB340B7, 0x952A83FD, 0xBE4D3FEA, 0x376B9DCA, 0x7E141F2F, 0x5380291F,
    0x2C4E8F57, 0x0994E866, 0xDFCE85A2, 0x7C98B6DA, 0xAA674399, 0x756CB9D8, 0xFB9DC6EF,
    0x7F5B2DD6, 0x2D8ED367, 0x051FD60B, 0x6AB15EAE, 0xEA38CAB5, 0x954EA63F, 0x2F6A4516,
    0x8C17BF1F, 0xD7AB996E, 0xCEE3AAB8, 0xE3A6D6FF, 0x27337997, 0x55C8E660, 0x916F171B,
    0x2EFE214F, 0x393C9836, 0xAF06BFF6, 0x9D3EB757, 0xD13D74BA, 0x770B40FC, 0xE5F2BBEC,
    0xA9A4BAC9, 0xB3DC35DB, 0x1D9FA9F3, 0x2E65EA63, 0xB403415D, 0xCA37668F, 0xE9F5E91D,
    0x7F439BD5, 0x72F93A0E, 0x0019B68D, 0xBA3ECF17, 0xFAFA7C54, 0x5DEED8A5, 0xF0EEFDBB,
    0xEF27B7E5, 0x5A687C7E, 0x0FA7A5A3, 0xB078FE3F, 0xCA077F9F, 0xF40F90C3, 0x521F7835,
    0xC3E3EE0A, 0x363A1481, 0xF9D78160, 0xCF7F2156, 0x072043ED, 0x2217760E, 0xC3FA1E52,
    0xF60886C1, 0x1A75DBE7, 0x3BCDD331, 0x1A08A09E, 0xE3A8D02E, 0x3E3888CB, 0x368D11A8,
    0x8B9FD8CA, 0x58564E30, 0x839D8A05, 0xB1D42562, 0xFD3ECF83, 0x88A3909C, 0x64B83E3A,
    0xC39A4893, 0x0E458A0E, 0x1747E429, 0x3D99A22C, 0x8EC354C0, 0x76688A2C, 0xD086558F,
    0xC13ECE72, 0x2C4EB358, 0xC23930F9, 0x6941F593, 0xC5489D67, 0x6D08CFD9, 0x9AE699BE,
    0xCE699556, 0xE98E613D, 0x14F639A5, 0xDD64C176, 0x1E8F43A0, 0xD038DE3C, 0xE85C074E,
    0xD00A6D81, 0x779469A9, 0x029176D6, 0x63BA5296, 0xFA34BE8D, 0x28AD64E8, 0xEA33CE83,
    0x168F83C4, 0x29CA769B, 0x3AD2B19E, 0xA6AFAB6B, 0x8546AABA, 0x9327F04D, 0xEB504117,
    0x2B12B3B0, 0x413441AB, 0x13AF6BF0, 0x2B0433E9, 0x8D13A0C8, 0x5B1EB6B1, 0x4ED4B5ED,
    0xCDB4AD06, 0x498E610E, 0x4D831062, 0x5B64AB3B, 0x9AD6B9EC, 0xE4B89DDB, 0x188F7B7E,
    0x8CE1D183, 0xA268EF37, 0xE2E8B62E, 0xF3BE6E9B, 0xBC6F1BD6, 0xEF9BDAFD, 0x7C0F04BD,
    0xBAF1C054, 0xE5B8EE1B, 0xC3EFBC1A, 0x2B5C46FA, 0xDC28ABBB, 0x3AD3B6ED, 0x05C6B12C,
    0xB7718B5B, 0x6C9AFEBD, 0x7C431BC7, 0x7ECBB26F, 0xBA468134, 0xAC2AEAB2, 0xB26CC71C,
    0xAAE278CC, 0x3A8CCB45, 0xE8A9290A, 0xA7EA1461, 0x698C9324, 0x6A8D18A8, 0x6C7AA9A3,
    0x5F974FE9, 0x99A64A16, 0xA6C9AA68, 0x19CA709B, 0xF27ABE74, 0x81AFF549, 0xA1F4E99A,
    0x34A97289, 0xD9195991, 0x2A55789F, 0x3493A4C9, 0x09E539D3, 0xB6596369, 0x19014796,
    0x7378D9E3, 0x57A44FF8, 0x8FA919DF, 0x945DD9CF, 0x9DE61A01, 0x9556DEA2, 0x0FDB6208,
    0xE1F80E2A, 0x9028ACFF, 0x2E3E9601, 0x320C845E, 0x96E6277E, 0x3FF3FE1B, 0x9C1801EA,
    0x37E628E1, 0x9A78E69F, 0xC073F9DE, 0x7991A7A5, 0xBB2E91CC, 0x3759E054, 0x191BDF79,
    0xFFEAFB50, 0x71993EC0, 0xD9C66998, 0xE701FEEC, 0xB1AA6F1B, 0xB0451AE6, 0x6DA236C9,
    0xDBAF31B8, 0xB6FBC822, 0x1556F11E, 0xF40BD967, 0x53D90529, 0xD8891786, 0x1BC56157,
    0xF57F5A98, 0x765D17B5, 0xFAFED5E1, 0x7E75F57D, 0xD61D85BC, 0x8A451415, 0x0E64BDF7,
    0x4390C42B, 0x45089110, 0x59B4522C, 0x232424D1, 0x544A0979, 0x2A0612C2, 0x01332630,
    0xE230F3C9, 0xA5002213, 0x01E9420B, 0x10141E51, 0x00000000

  EW_BITMAPS_TABLE( ApplicationZoneBitmap )
    EW_BITMAP( ApplicationZoneBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationZoneBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::ZoneBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationZoneBitmap )

/* Bitmap resource : 'Application::PanelBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationPanelBitmap )
  EW_BITMAP_FRAMES( ApplicationPanelBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 33, 29, 0 )
    EW_BITMAP_FRAME( 1, 0, 31, 3, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationPanelBitmap, Default )       /* ratio 29.68 % */
    0x99806B00, 0x0E402CB3, 0x220CFF28, 0x60F09854, 0x190E85C3, 0x11488C4A, 0x1887C5A2,
    0x98D45E27, 0x8DC762B1, 0x2C32391E, 0x2ECFC6D2, 0x82532191, 0x25B1F95C, 0x5D2F964A,
    0x730994AA, 0x369BCC66, 0x49DCD673, 0x9E4E27B3, 0xE9304131, 0x2F974DF2, 0x2D904560,
    0x15C37663, 0x1E515B2D, 0xEF12A904, 0x480E3FE7, 0xB5B390B4, 0xA51257AB, 0xCAD9634C,
    0x108244E5, 0x56ACEE2B, 0x9D657220, 0x9AB95BAC, 0xD5C1BD80, 0xE5AC86EB, 0xD8F5EAAC,
    0x49A69186, 0x080302FF, 0x60B06FFC, 0xAAAD2692, 0x12C98451, 0x1F85C361, 0xC873B94B,
    0x95C9D595, 0x0C166B1F, 0x50245066, 0x747A817B, 0xA49348D3, 0x970F91CD, 0x1FF3A93C,
    0x21A8D369, 0x07829803, 0xB4AB2B51, 0x1C7EC76D, 0xD0A7F3C6, 0x2140413D, 0x9A07CE03,
    0xA522C23C, 0xB766F59A, 0x3A903960, 0x9C8E3239, 0xE4311343, 0x2D3EBE38, 0xDBEE7638,
    0x2F3BBFAD, 0xEFD23BDC, 0x1C2931D6, 0x1ECEC2E1, 0xC60A7CBE, 0x2EEF96CB, 0x06093CDE,
    0xC7D14878, 0xEFFCBB70, 0x8AD6D5B8, 0x279DE57C, 0x602A4B1A, 0x8F3586B1, 0x2A49E20D,
    0x85B0B87D, 0x4848D21B, 0x4E1585A1, 0x5D0C0D28, 0x2CCD01BC, 0xC4D328C3, 0x910C0F63,
    0xF90E5545, 0x858ADDD7, 0x809E1801, 0x1C06FA04, 0xF82E0947, 0x9C530918, 0x9D700DC1,
    0x89A2467D, 0x62A42228, 0x26CE446A, 0x44214720, 0x4937C651, 0x2DC811C0, 0x0AA27884,
    0x6239F21F, 0x34722C4A, 0x570A64F9, 0x700D71AC, 0x18283235, 0xC32CC42D, 0x045F8144,
    0x69284902, 0x2866D9AE, 0x89521C66, 0x2378D526, 0x9E3F0ACE, 0xDC695FD8, 0x8B98F915,
    0xDFB7E508, 0x13D0F23B, 0xF0FB63C1, 0xFA014FC3, 0x018FB3EC, 0xA91A3E8D, 0xFA2E8901,
    0x1E8D3E58, 0x5F128180, 0x029563A0, 0x4F61543F, 0xF37CDB34, 0x0AA87C82, 0xD5340C36,
    0x41C030F4, 0x1B09ECFD, 0xFA01B28B, 0x3E27894F, 0xAD288896, 0x114121DC, 0x0103B85B,
    0x33C05A11, 0xC2C7B16C, 0xEFB10113, 0x294991F4, 0xE6163C83, 0x29F1A38C, 0xF1AC621F,
    0x827CE434, 0x3C6B8AD9, 0x4711298F, 0x0700B620, 0x007B1A84, 0xD682AD23, 0xB6D17B50,
    0x156B61B1, 0x0B7AB4BC, 0x90DD63E4, 0x8B08CE73, 0x1D4AE290, 0x8AE28C8A, 0x5C0F011D,
    0xDB02C130, 0xE237CD61, 0x82EEB0A8, 0x6F4462EE, 0x36B6F291, 0x3A47AD71, 0xFE41C024,
    0x338C82E4, 0x1F77D447, 0xC3DCF63D, 0xDCF57C80, 0x2202CF83, 0x358CB04B, 0x8090D4DB,
    0x13DC540F, 0x727DACB1, 0xDAC5585B, 0x9FEB4B5A, 0x31B45F19, 0xC01CFE14, 0x5CF914C3,
    0xA92287B1, 0x214647C8, 0x34627093, 0x1142AFD2, 0xFB167A2B, 0x896AA7EC, 0x1BC48479,
    0x4972E080, 0x51A4B72B, 0xECD7344C, 0x20C79F20, 0x2DCAE263, 0x09D20868, 0x9D4C7E2A,
    0xFDE2430F, 0x3781582C, 0xD6EB3D67, 0xD1C6AF3B, 0x13A4E637, 0xD0F163C2, 0x8403CF53,
    0x0478DA1A, 0x695E3F8F, 0x212D8F01, 0xE0B52087, 0xE4DEA30D, 0x81F588C9, 0x33AD6B12,
    0x54633C00, 0x6CED3A8E, 0xBC2D09F0, 0x0EC05184, 0x1563EC52, 0xE331030D, 0xD802EDCF,
    0x00E0379A, 0x4FB9FDF0, 0x7A3DFED5, 0x9E9D0CE9, 0x021083BA, 0x5D11C157, 0x3F68A3AC,
    0x39BEE804, 0x0E83BEEF, 0x118FC5DC, 0xE73850EF, 0x7BC1F3A8, 0x8B1020FA, 0xB13CC930,
    0x54C52F4A, 0xEBFA7E71, 0x157E8FAB, 0xCE4384D9, 0x31358F09, 0x68B320C7, 0xBDE71BAE,
    0xEFFD6E7B, 0xB65AE3D8, 0x57198230, 0xC0170294, 0xAE3302D8, 0xC81A0DB1, 0x32AD5567,
    0xA1822E45, 0x09612B05, 0xDFD2A254, 0x3D57F880, 0x484FFDE0, 0xE0978BA2, 0xEF3396FC,
    0xBB27AD04, 0xFB075D1B, 0x060092C6, 0x133D6BAE, 0x136D099E, 0xCF51FDA0, 0x21CC1E7F,
    0xBF87EC43, 0x0043F9DB, 0x9714998F, 0x6C1564BC, 0x0388E3F5, 0x08F3CC78, 0xC42F8330,
    0x115619A1, 0xF8964108, 0x63F62398, 0xD7404100, 0xC398582F, 0x1CA99C0D, 0x19829022,
    0x248171BC, 0x111D2178, 0xC01862F3, 0x6C6F4628, 0x7B1153AA, 0x38C23A23, 0x012C0D46,
    0xA2E0E60C, 0xC7B77F1E, 0x8F90EA0F, 0x1F63F480, 0x8F4828FF, 0x6D0C0104, 0x1720C5F0,
    0xE6424819, 0xA86B0A10, 0x02022BC3, 0x00000000

  EW_BITMAPS_TABLE( ApplicationPanelBitmap )
    EW_BITMAP( ApplicationPanelBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationPanelBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::PanelBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationPanelBitmap )

/* Initializer for the class 'Application::OutputItem' */
void ApplicationOutputItem__Init( ApplicationOutputItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NumText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->PanelText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->OutputTypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->UnitText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00FE );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const00FE );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0011 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00FF );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0070 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0100 );
  CoreRectView__OnSetBounds( &_this->NumText, _Const010D );
  ViewsText_OnSetAlignment( &_this->NumText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NumText, EwLoadString( &_Const0102 ));
  CoreRectView__OnSetBounds( &_this->PanelText, _Const010E );
  ViewsText_OnSetAlignment( &_this->PanelText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->PanelText, EwLoadString( &_Const00D1 ));
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const010F );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0110 ));
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0105 );
  CoreView_OnSetLayout((CoreView)&_this->OutputTypeText, CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->OutputTypeText, _Const0106 );
  ViewsText_OnSetAlignment( &_this->OutputTypeText, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->OutputTypeText, EwLoadString( &_Const0111 ));
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const0112 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const0113 ));
  CoreRectView__OnSetBounds( &_this->UnitText, _Const0114 );
  ViewsText_OnSetAlignment( &_this->UnitText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->UnitText, EwLoadString( &_Const0115 ));
  CoreRectView__OnSetBounds( &_this->TypeText, _Const0116 );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const0117 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NumText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PanelText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputTypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  ViewsText_OnSetFont( &_this->NumText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->PanelText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationZoneBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->OutputTypeText, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->UnitText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::OutputItem' */
void ApplicationOutputItem__ReInit( ApplicationOutputItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->NumText );
  ViewsText__ReInit( &_this->PanelText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->OutputTypeText );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->UnitText );
  ViewsText__ReInit( &_this->TypeText );
}

/* Finalizer method for the class 'Application::OutputItem' */
void ApplicationOutputItem__Done( ApplicationOutputItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputItem );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->NumText );
  ViewsText__Done( &_this->PanelText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->OutputTypeText );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->UnitText );
  ViewsText__Done( &_this->TypeText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputItem' */
void ApplicationOutputItem__Mark( ApplicationOutputItem _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->NumText );
  EwMarkObject( &_this->PanelText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->OutputTypeText );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->UnitText );
  EwMarkObject( &_this->TypeText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationOutputItem_UpdateLayout( ApplicationOutputItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationOutputItem_UpdateViewState( ApplicationOutputItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::OutputItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputItem )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputItem )

/* Virtual Method Table (VMT) for the class : 'Application::OutputItem' */
EW_DEFINE_CLASS( ApplicationOutputItem, CoreGroup, "Application::OutputItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationOutputItem_UpdateLayout,
  ApplicationOutputItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOutputItem )

/* Bitmap resource : 'Application::PullSwitchBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationPullSwitchBitmap )
  EW_BITMAP_FRAMES( ApplicationPullSwitchBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 32, 0 )
    EW_BITMAP_FRAME( 3, 2, 4, 28, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationPullSwitchBitmap, Default )  /* ratio 21.97 % */
    0x1409FD00, 0xC11FD020, 0x0E12FD81, 0xA16FD848, 0x0D0782C2, 0x70D87432, 0x13884422,
    0x881C3E33, 0x86C6A151, 0x547A1117, 0x379B4D08, 0xD0C23618, 0x47E0A651, 0xEA4F7B15,
    0xAE858A14, 0x130C3BDD, 0x000CE9FF, 0x7EBF1F91, 0x15027C04, 0xD167F41A, 0x2A8946A1,
    0xA914CA4D, 0x9750A3D3, 0xB51A953E, 0xF87B8129, 0xE0F025F2, 0x00B88C64, 0x03FCA039,
    0x3FEC962B, 0xC9087427, 0x20716A22, 0xE156B7D5, 0x774B8D4E, 0x77AADDAE, 0x26EB619D,
    0xB0DFACC3, 0xE8230163, 0xDB1F0541, 0xE2E50D91, 0x71B8AC5D, 0xA98FC65D, 0x0D96A322,
    0x80B2DFC7, 0xDB080ECD, 0xC4C7688F, 0x75DF4391, 0xE4345A3C, 0x5F2B93A7, 0xEC598C0E,
    0x8D9D2866, 0xFA401E7E, 0xB8DAEDB4, 0x464D134D, 0xD5EAC6F9, 0x6D0363AF, 0xE977306B,
    0x2B75B7E3, 0x9B3BCA07, 0x5BD0CCEF, 0x187E0BFF, 0xC9E5DBA4, 0xBECF1B91, 0x6AB41878,
    0x9F477E3D, 0x453AB9CE, 0xABB7D8DA, 0xDF4F9D37, 0x76A803BE, 0x24A2C30D, 0x115B204E,
    0x27796888, 0xF2E6BA5E, 0x9A0489B2, 0x8815E976, 0x90E1365C, 0x2B4A4273, 0x83DAC7F5,
    0xA017520E, 0x47AD0A44, 0x55B685E0, 0x2B388DE3, 0x1784905C, 0xE22838E9, 0x66C1FF78,
    0x72064F5E, 0xF4012167, 0x030F73D8, 0x46C1642B, 0x47FA2335, 0x01AE8DE2, 0xC546DC38,
    0x6D62B8A5, 0x4B129C8F, 0x8842351C, 0x49D291A3, 0x154563B8, 0x7224E8FA, 0x06A15828,
    0x79564536, 0xCC0492A4, 0x8B93E3F6, 0x3B0EA391, 0xE369581C, 0x883E4898, 0x6E5C96A5,
    0xD13154F9, 0x9883B35C, 0x2589C265, 0xA9A80271, 0x44C469A2, 0x700F0D63, 0x9CDE39F6,
    0xE699D63C, 0xA82140A0, 0x16649FA0, 0x03932809, 0x62A189DE, 0x8EB3A0E2, 0x22547807,
    0x1412220A, 0x883B85B1, 0x896479C6, 0x202965C2, 0xF8A68F7A, 0xC4DE364C, 0x8F2005D0,
    0x0F00728C, 0xE9D3E453, 0x28EA7FAC, 0xDA8D852A, 0x054F8FB9, 0x334C62DC, 0x46C11049,
    0x1008BC1F, 0x520E3F96, 0xEC170470, 0x294991F4, 0x4590B083, 0x9AD0D41B, 0x0E8B6028,
    0xD253E280, 0x0B8E036C, 0xC9722469, 0x64CD3125, 0xE8AB2808, 0xF03B4E91, 0x2C89D05C,
    0x2D218CBB, 0x509A45B5, 0x58DA1A05, 0x6A2D8AC2, 0x3D8F53C8, 0x0D85100E, 0x90A0E438,
    0x9C5F12C1, 0xD9996D63, 0x30404B6E, 0x43F350CE, 0x71503E02, 0xE804838F, 0x453F0510,
    0x1E4680FA, 0xCC02BCC2, 0xB7B85131, 0x6DB5018F, 0x25398E33, 0x1D0620DC, 0xAA0C2CC9,
    0xE5111379, 0x169DCC32, 0xFB1483B0, 0x22C7C160, 0x0D331CA8, 0x49D83936, 0xC406C994,
    0xF77D5F37, 0x9C9FB7E5, 0xD409A2B6, 0xC9C2B1AB, 0x90DD32A0, 0x4608CE73, 0x781DE973,
    0x2A3D468A, 0x81502551, 0x567036C6, 0xA5D7697A, 0x73DCD5DE, 0xA268E6D7, 0xF5127451,
    0x6645BC6E, 0xE637E9BA, 0xDB0213A4, 0x76F62E8E, 0xA92F73D8, 0x814F75ED, 0x602F4B52,
    0x1BC5C0BC, 0x447054D1, 0x6D30EB17, 0x0127494B, 0x9FE0F80E, 0x47EB6B62, 0x39AE06A4,
    0x66A550A1, 0x8772E759, 0xA4E8B52A, 0x5E940E8F, 0xB149157C, 0xDD8D9EC5, 0x436DEDFA,
    0x1F569585, 0x3846413C, 0x96A5A20E, 0x058D3A79, 0x9EB8487A, 0xC76CE747, 0xF36A3473,
    0xD88F3106, 0x740FD1E1, 0x2737AA6A, 0xE54BD2D3, 0x3B8EA2C6, 0x674058F0, 0x00000040,
    0x00000000

  EW_BITMAPS_TABLE( ApplicationPullSwitchBitmap )
    EW_BITMAP( ApplicationPullSwitchBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationPullSwitchBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::PullSwitchBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationPullSwitchBitmap )

/* Initializer for the class 'Application::CAECompare' */
void ApplicationCAECompare__Init( ApplicationCAECompare _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAECompare );

  /* ... and initialize objects, variables, properties, etc. */
  _this->minimum = 2;
}

/* Re-Initializer for the class 'Application::CAECompare' */
void ApplicationCAECompare__ReInit( ApplicationCAECompare _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAECompare' */
void ApplicationCAECompare__Done( ApplicationCAECompare _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAECompare );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAECompare' */
void ApplicationCAECompare__Mark( ApplicationCAECompare _this )
{
  EwMarkObject( _this->Input );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAECompare.Render()' */
XPoint ApplicationCAECompare_Render( ApplicationCAECompare _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint sz = _Const0118;
  XPoint outpos = EwMovePointPos( ApplicationCAEModule__Render( _this->Input, position, 
    aClip, aCanvas ), _Const0119 );
  XRect dst = EwNewRect2Point( EwMovePointNeg( outpos, EwNewPoint( 0, sz.Y / 2 )), 
    EwMovePointPos( outpos, EwNewPoint( sz.X, ( sz.Y + 1 ) / 2 )));

  ApplicationCAEModule_RenderHoz((ApplicationCAEModule)_this, dst.Point1, EwGetRectW( 
  dst ), aClip, aCanvas );
  ApplicationCAEModule_RenderVert((ApplicationCAEModule)_this, dst.Point1, EwGetRectH( 
  dst ), aClip, aCanvas );
  ApplicationCAEModule_RenderHoz((ApplicationCAEModule)_this, dst.Point2, -EwGetRectW( 
  dst ), aClip, aCanvas );
  ApplicationCAEModule_RenderVert((ApplicationCAEModule)_this, dst.Point2, -EwGetRectH( 
  dst ), aClip, aCanvas );
  ApplicationCAEModule_RenderHoz((ApplicationCAEModule)_this, outpos, -10, aClip, 
  aCanvas );
  GraphicsCanvas_DrawText( aCanvas, aClip, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ), EwConcatString( EwLoadString( &_Const011A ), EwNewStringInt( 
  _this->minimum - 1, 0, 10 )), 0, 5, dst, _Const011B, 30, _Const000A, _Const000A, 
  _Const000A, _Const000A, 1 );
  return ApplicationCAEModule_Output((ApplicationCAEModule)_this, position );
}

/* 'C' function for method : 'Application::CAECompare.Size()' */
XPoint ApplicationCAECompare_Size( ApplicationCAECompare _this )
{
  XPoint sz = _Const011C;
  XPoint ssz = ApplicationCAEModule__Size( _this->Input );
  XInt32 my = 0;

  if ( sz.Y > ssz.Y )
    my = sz.Y - ssz.Y;

  return EwMovePointPos( ApplicationCAEModule__Size( _this->Input ), EwNewPoint( 
    sz.X, my ));
}

/* Variants derived from the class : 'Application::CAECompare' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAECompare )
EW_END_OF_CLASS_VARIANTS( ApplicationCAECompare )

/* Virtual Method Table (VMT) for the class : 'Application::CAECompare' */
EW_DEFINE_CLASS( ApplicationCAECompare, ApplicationCAEModule, "Application::CAECompare" )
  ApplicationCAECompare_Render,
  ApplicationCAECompare_Size,
EW_END_OF_CLASS( ApplicationCAECompare )

/* Initializer for the class 'Application::Test' */
void ApplicationTest__Init( ApplicationTest _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ApplicationTreeView__Init( &_this->TreeView, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTest );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const009B );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const011D );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const011E 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const011F );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0120 
  ));
  CoreRectView__OnSetBounds( &_this->TreeView, _Const0121 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TreeView ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationTest_TestDisplay );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationTest_TestLED );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  ApplicationTest_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Test' */
void ApplicationTest__ReInit( ApplicationTest _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ApplicationTreeView__ReInit( &_this->TreeView );
}

/* Finalizer method for the class 'Application::Test' */
void ApplicationTest__Done( ApplicationTest _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTest );

  /* Finalize all embedded objects */
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ApplicationTreeView__Done( &_this->TreeView );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Test' */
void ApplicationTest__Mark( ApplicationTest _this )
{
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->TreeView );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationTest_UpdateLayout( ApplicationTest _this, XPoint aSize )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTest_UpdateViewState( ApplicationTest _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Test.TestDisplay()' */
void ApplicationTest_TestDisplay( ApplicationTest _this, XObject sender )
{
  CoreRoot rootObject;
  ApplicationPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  rootObject = CoreView__GetRoot( _this );
  pop = ((ApplicationPopup)EwNewObject( ApplicationDisplayPopup, 0 ));
  ApplicationPopup_Show( pop, rootObject );
}

/* 'C' function for method : 'Application::Test.TestLED()' */
void ApplicationTest_TestLED( ApplicationTest _this, XObject sender )
{
  CoreRoot rootObject;
  ApplicationPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  rootObject = CoreView__GetRoot( _this );
  pop = ((ApplicationPopup)EwNewObject( ApplicationLEDPopup, 0 ));
  ApplicationPopup_Show( pop, rootObject );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationTest_Init( ApplicationTest _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* Variants derived from the class : 'Application::Test' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTest )
EW_END_OF_CLASS_VARIANTS( ApplicationTest )

/* Virtual Method Table (VMT) for the class : 'Application::Test' */
EW_DEFINE_CLASS( ApplicationTest, CoreGroup, "Application::Test" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationTest_UpdateLayout,
  ApplicationTest_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTest )

/* Initializer for the class 'Application::CAEDayNight' */
void ApplicationCAEDayNight__Init( ApplicationCAEDayNight _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationCAEModule__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEDayNight );

  /* ... and initialize objects, variables, properties, etc. */
  _this->NightTime = 1;
}

/* Re-Initializer for the class 'Application::CAEDayNight' */
void ApplicationCAEDayNight__ReInit( ApplicationCAEDayNight _this )
{
  /* At first re-initialize the super class ... */
  ApplicationCAEModule__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::CAEDayNight' */
void ApplicationCAEDayNight__Done( ApplicationCAEDayNight _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEDayNight );

  /* Don't forget to deinitialize the super class ... */
  ApplicationCAEModule__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEDayNight' */
void ApplicationCAEDayNight__Mark( ApplicationCAEDayNight _this )
{
  EwMarkObject( _this->Input );

  /* Give the super class a chance to mark its objects and references */
  ApplicationCAEModule__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::CAEDayNight.Render()' */
XPoint ApplicationCAEDayNight_Render( ApplicationCAEDayNight _this, XPoint position, 
  XRect aClip, GraphicsCanvas aCanvas )
{
  XPoint sz = EwLoadResource( &XFlatButtonNight, ResourcesBitmap )->FrameSize;
  XRect src = EwNewRect2Point( _Const0054, sz );
  XPoint outpos = position;
  XRect dst = EwNewRect2Point( outpos, EwMovePointPos( outpos, sz ));

  if ( _this->NightTime )
  {
    GraphicsCanvas_ScaleBitmap( aCanvas, aClip, EwLoadResource( &XFlatButtonNight, 
    ResourcesBitmap ), 0, dst, src, _Const000A, _Const000A, _Const000A, _Const000A, 
    1, 0 );
  }
  else
  {
    GraphicsCanvas_ScaleBitmap( aCanvas, aClip, EwLoadResource( &XFlatButtonDay, 
    ResourcesBitmap ), 0, dst, src, _Const000A, _Const000A, _Const000A, _Const000A, 
    1, 0 );
  }

  return ApplicationCAEModule_Output((ApplicationCAEModule)_this, position );
}

/* 'C' function for method : 'Application::CAEDayNight.Size()' */
XPoint ApplicationCAEDayNight_Size( ApplicationCAEDayNight _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return EwLoadResource( &XFlatButtonNight, ResourcesBitmap )->FrameSize;
}

/* Variants derived from the class : 'Application::CAEDayNight' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEDayNight )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEDayNight )

/* Virtual Method Table (VMT) for the class : 'Application::CAEDayNight' */
EW_DEFINE_CLASS( ApplicationCAEDayNight, ApplicationCAEModule, "Application::CAEDayNight" )
  ApplicationCAEDayNight_Render,
  ApplicationCAEDayNight_Size,
EW_END_OF_CLASS( ApplicationCAEDayNight )

/* Initializer for the class 'Application::Popup' */
void ApplicationPopup__Init( ApplicationPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle5, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle6, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle8, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle3, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0122 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0123 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle1, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const0126 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle1, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const0127 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle4, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle4, _Const0128 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle4, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle5, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle5, _Const0129 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle5, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle5, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle5, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle5, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle6, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle6, _Const012A );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle6, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle6, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle6, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle6, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle7, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle7, _Const012B );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle7, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle7, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle7, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle7, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle8, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle8, _Const012C );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle8, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle8, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle8, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle8, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle3, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle3, _Const012D );
  ViewsRectangle_OnSetColor( &_this->Rectangle3, _Const012E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle3 ), 0 );

  /* Call the user defined constructor */
  ApplicationPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Popup' */
void ApplicationPopup__ReInit( ApplicationPopup _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  ViewsRectangle__ReInit( &_this->Rectangle4 );
  ViewsRectangle__ReInit( &_this->Rectangle5 );
  ViewsRectangle__ReInit( &_this->Rectangle6 );
  ViewsRectangle__ReInit( &_this->Rectangle7 );
  ViewsRectangle__ReInit( &_this->Rectangle8 );
  ViewsRectangle__ReInit( &_this->Rectangle3 );
}

/* Finalizer method for the class 'Application::Popup' */
void ApplicationPopup__Done( ApplicationPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  ViewsRectangle__Done( &_this->Rectangle4 );
  ViewsRectangle__Done( &_this->Rectangle5 );
  ViewsRectangle__Done( &_this->Rectangle6 );
  ViewsRectangle__Done( &_this->Rectangle7 );
  ViewsRectangle__Done( &_this->Rectangle8 );
  ViewsRectangle__Done( &_this->Rectangle3 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Popup' */
void ApplicationPopup__Mark( ApplicationPopup _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Rectangle4 );
  EwMarkObject( &_this->Rectangle5 );
  EwMarkObject( &_this->Rectangle6 );
  EwMarkObject( &_this->Rectangle7 );
  EwMarkObject( &_this->Rectangle8 );
  EwMarkObject( &_this->Rectangle3 );
  EwMarkObject( _this->mask );
  EwMarkObject( _this->touch );
  EwMarkObject( _this->root );
  EwMarkObject( _this->Parent );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationPopup_UpdateLayout( ApplicationPopup _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationPopup_UpdateViewState( ApplicationPopup _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationPopup_Init( ApplicationPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'Application::Popup.Show()' */
void ApplicationPopup_Show( ApplicationPopup _this, CoreRoot rootObject )
{
  XPoint m;

  _this->mask = EwNewObject( ViewsRectangle, 0 );
  _this->touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->root = rootObject;
  CoreQuadView__OnSetPoint1( _this->touch, _Const0054 );
  CoreQuadView__OnSetPoint2( _this->touch, _Const008B );
  CoreQuadView__OnSetPoint3( _this->touch, _Const008A );
  CoreQuadView__OnSetPoint4( _this->touch, _Const012F );
  CoreGroup__Add( rootObject, ((CoreView)_this->touch ), 0 );
  ViewsRectangle_OnSetColor( _this->mask, _Const0130 );
  CoreRectView__OnSetBounds( _this->mask, _Const000C );
  CoreGroup__Add( rootObject, ((CoreView)_this->mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super2.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super2.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super2.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super2.Bounds, EwMovePointNeg( 
  _Const008A, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  return;
}

/* 'C' function for method : 'Application::Popup.Hide()' */
void ApplicationPopup_Hide( ApplicationPopup _this )
{
  CoreGroup__Remove( _this->root, ((CoreView)_this->mask ));
  CoreGroup__Remove( _this->root, ((CoreView)_this->touch ));
  CoreGroup__Remove( _this->root, ((CoreView)_this ));

  if ( _this->Parent != 0 )
  {
    if ( CoreGroup_OnGetVisible((CoreGroup)_this->Parent ) == 0 )
    {
      CoreGroup_OnSetVisible((CoreGroup)_this->Parent, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)_this->Parent, 1 );
    }
  }

  return;
}

/* Variants derived from the class : 'Application::Popup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationPopup )

/* Virtual Method Table (VMT) for the class : 'Application::Popup' */
EW_DEFINE_CLASS( ApplicationPopup, CoreGroup, "Application::Popup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationPopup )

/* Initializer for the class 'Application::DisplayPopup' */
void ApplicationDisplayPopup__Init( ApplicationDisplayPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle10, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle11, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle12, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle13, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle14, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle15, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text6, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle16, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle23, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle24, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle25, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle26, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle27, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle28, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisplayPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const0131 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle9, _Const000A );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle9, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle9, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Rectangle10, _Const0132 );
  ViewsRectangle_OnSetColor( &_this->Rectangle10, _Const004C );
  CoreRectView__OnSetBounds( &_this->Rectangle11, _Const0133 );
  ViewsRectangle_OnSetColor( &_this->Rectangle11, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Rectangle12, _Const0135 );
  ViewsRectangle_OnSetColor( &_this->Rectangle12, _Const0136 );
  CoreRectView__OnSetBounds( &_this->Rectangle13, _Const0137 );
  ViewsRectangle_OnSetColor( &_this->Rectangle13, _Const0138 );
  CoreRectView__OnSetBounds( &_this->Rectangle14, _Const0139 );
  ViewsRectangle_OnSetColor( &_this->Rectangle14, _Const013A );
  CoreRectView__OnSetBounds( &_this->Rectangle15, _Const013B );
  ViewsRectangle_OnSetColor( &_this->Rectangle15, _Const013C );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0132 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const013D ));
  CoreView_OnSetLayout((CoreView)&_this->Text2, CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0133 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const013E ));
  CoreView_OnSetLayout((CoreView)&_this->Text3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text3, _Const0135 );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const013F ));
  CoreView_OnSetLayout((CoreView)&_this->Text4, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text4, _Const0139 );
  ViewsText_OnSetAlignment( &_this->Text4, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const0140 ));
  ViewsText_OnSetColor( &_this->Text4, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Text5, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Text5, _Const0132 );
  ViewsText_OnSetAlignment( &_this->Text5, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const013D ));
  CoreView_OnSetLayout((CoreView)&_this->Text6, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text6, _Const0137 );
  ViewsText_OnSetAlignment( &_this->Text6, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text6, EwLoadString( &_Const0141 ));
  ViewsText_OnSetColor( &_this->Text6, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Text7, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text7, _Const013B );
  ViewsText_OnSetAlignment( &_this->Text7, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text7, EwLoadString( &_Const0142 ));
  ViewsText_OnSetColor( &_this->Text7, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Rectangle16, _Const0131 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle16, _Const000A );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle16, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle16, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Rectangle23, _Const0143 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle23, _Const013C );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle23, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle23, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle23, _Const013C );
  CoreRectView__OnSetBounds( &_this->Rectangle24, _Const0144 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle24, _Const013A );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle24, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle24, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle24, _Const013A );
  CoreRectView__OnSetBounds( &_this->Rectangle25, _Const0145 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle25, _Const0138 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle25, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle25, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle25, _Const0138 );
  CoreRectView__OnSetBounds( &_this->Rectangle26, _Const0146 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle26, _Const0136 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle26, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle26, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle26, _Const0136 );
  CoreRectView__OnSetBounds( &_this->Rectangle27, _Const0147 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle27, _Const0134 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle27, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle27, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle27, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Rectangle28, _Const0148 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle28, _Const004C );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle28, _Const0018 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle28, _Const0018 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle28, _Const004C );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0149 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const014A 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle27 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text6, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text7, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationDisplayPopup_Proceed 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::DisplayPopup' */
void ApplicationDisplayPopup__ReInit( ApplicationDisplayPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  ViewsRectangle__ReInit( &_this->Rectangle10 );
  ViewsRectangle__ReInit( &_this->Rectangle11 );
  ViewsRectangle__ReInit( &_this->Rectangle12 );
  ViewsRectangle__ReInit( &_this->Rectangle13 );
  ViewsRectangle__ReInit( &_this->Rectangle14 );
  ViewsRectangle__ReInit( &_this->Rectangle15 );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text2 );
  ViewsText__ReInit( &_this->Text3 );
  ViewsText__ReInit( &_this->Text4 );
  ViewsText__ReInit( &_this->Text5 );
  ViewsText__ReInit( &_this->Text6 );
  ViewsText__ReInit( &_this->Text7 );
  ViewsRectangle__ReInit( &_this->Rectangle16 );
  ViewsRectangle__ReInit( &_this->Rectangle23 );
  ViewsRectangle__ReInit( &_this->Rectangle24 );
  ViewsRectangle__ReInit( &_this->Rectangle25 );
  ViewsRectangle__ReInit( &_this->Rectangle26 );
  ViewsRectangle__ReInit( &_this->Rectangle27 );
  ViewsRectangle__ReInit( &_this->Rectangle28 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'Application::DisplayPopup' */
void ApplicationDisplayPopup__Done( ApplicationDisplayPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisplayPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle9 );
  ViewsRectangle__Done( &_this->Rectangle10 );
  ViewsRectangle__Done( &_this->Rectangle11 );
  ViewsRectangle__Done( &_this->Rectangle12 );
  ViewsRectangle__Done( &_this->Rectangle13 );
  ViewsRectangle__Done( &_this->Rectangle14 );
  ViewsRectangle__Done( &_this->Rectangle15 );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text2 );
  ViewsText__Done( &_this->Text3 );
  ViewsText__Done( &_this->Text4 );
  ViewsText__Done( &_this->Text5 );
  ViewsText__Done( &_this->Text6 );
  ViewsText__Done( &_this->Text7 );
  ViewsRectangle__Done( &_this->Rectangle16 );
  ViewsRectangle__Done( &_this->Rectangle23 );
  ViewsRectangle__Done( &_this->Rectangle24 );
  ViewsRectangle__Done( &_this->Rectangle25 );
  ViewsRectangle__Done( &_this->Rectangle26 );
  ViewsRectangle__Done( &_this->Rectangle27 );
  ViewsRectangle__Done( &_this->Rectangle28 );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisplayPopup' */
void ApplicationDisplayPopup__Mark( ApplicationDisplayPopup _this )
{
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->Rectangle10 );
  EwMarkObject( &_this->Rectangle11 );
  EwMarkObject( &_this->Rectangle12 );
  EwMarkObject( &_this->Rectangle13 );
  EwMarkObject( &_this->Rectangle14 );
  EwMarkObject( &_this->Rectangle15 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->Text6 );
  EwMarkObject( &_this->Text7 );
  EwMarkObject( &_this->Rectangle16 );
  EwMarkObject( &_this->Rectangle23 );
  EwMarkObject( &_this->Rectangle24 );
  EwMarkObject( &_this->Rectangle25 );
  EwMarkObject( &_this->Rectangle26 );
  EwMarkObject( &_this->Rectangle27 );
  EwMarkObject( &_this->Rectangle28 );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::DisplayPopup.Proceed()' */
void ApplicationDisplayPopup_Proceed( ApplicationDisplayPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Variants derived from the class : 'Application::DisplayPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisplayPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationDisplayPopup )

/* Virtual Method Table (VMT) for the class : 'Application::DisplayPopup' */
EW_DEFINE_CLASS( ApplicationDisplayPopup, ApplicationPopup, "Application::DisplayPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisplayPopup )

/* Initializer for the class 'Application::Settings' */
void ApplicationSettings__Init( ApplicationSettings _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzSlider, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton1, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSettings );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const014B );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  CoreRectView__OnSetBounds( _this, _Const009B );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet, _Const000A );
  CoreRectView__OnSetBounds( &_this->Text, _Const014C );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const014D ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const014E );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const014F ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorzSlider, _Const0150 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const011D );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0151 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0152 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0153 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const0154 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0155 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const0156 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const0157 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton, _Const0158 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton, EwLoadString( &_Const0159 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton1, _Const015A );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton1, 1 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton1, EwLoadString( &_Const015B 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton2, _Const015C );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton2, EwLoadString( &_Const015D 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton2 ), 0 );
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdanaProSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzSlider.OnChange = EwNewSlot( _this, ApplicationSettings_Change );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzSlider, EwGetAutoObject( 
  &WidgetSetHorizontalSlider_Medium, WidgetSetHorizontalSliderConfig ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationSettings_SetTime );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNewSlot( _this, ApplicationSettings_SMS );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNewSlot( _this, ApplicationSettings_SMS );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->RadioButton.OnSelect = EwNewSlot( _this, ApplicationSettings_Slot1min );
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  _this->RadioButton1.OnSelect = EwNewSlot( _this, ApplicationSettings_Slot5min 
  );
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton1, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  _this->RadioButton2.OnSelect = EwNewSlot( _this, ApplicationSettings_Slot20min 
  );
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton2, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
}

/* Re-Initializer for the class 'Application::Settings' */
void ApplicationSettings__ReInit( ApplicationSettings _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzSlider );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton );
  WidgetSetRadioButton__ReInit( &_this->RadioButton1 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton2 );
}

/* Finalizer method for the class 'Application::Settings' */
void ApplicationSettings__Done( ApplicationSettings _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSettings );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  GraphicsAttrSet__Done( &_this->AttrSet );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  WidgetSetHorizontalSlider__Done( &_this->HorzSlider );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  WidgetSetRadioButton__Done( &_this->RadioButton );
  WidgetSetRadioButton__Done( &_this->RadioButton1 );
  WidgetSetRadioButton__Done( &_this->RadioButton2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Settings' */
void ApplicationSettings__Mark( ApplicationSettings _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->HorzSlider );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->RadioButton );
  EwMarkObject( &_this->RadioButton1 );
  EwMarkObject( &_this->RadioButton2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationSettings_UpdateLayout( ApplicationSettings _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationSettings_UpdateViewState( ApplicationSettings _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Settings.SMS()' */
void ApplicationSettings_SMS( ApplicationSettings _this, XObject sender )
{
  ApplicationTextPopup bl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bl = EwNewObject( ApplicationTextPopup, 0 );
  ApplicationPopup_Show((ApplicationPopup)bl, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::Settings.SetTime()' */
void ApplicationSettings_SetTime( ApplicationSettings _this, XObject sender )
{
  ApplicationPopup bl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bl = ((ApplicationPopup)EwNewObject( ApplicationSetTimePopup, 0 ));
  ApplicationPopup_Show( bl, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::Settings.Slot1min()' */
void ApplicationSettings_Slot1min( ApplicationSettings _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton1, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton2, 0 );
  Command1( CMD_GSM_SIGNAL_PERIOD, 1 );
}

/* 'C' function for method : 'Application::Settings.Slot5min()' */
void ApplicationSettings_Slot5min( ApplicationSettings _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton2, 0 );
  Command1( CMD_GSM_SIGNAL_PERIOD, 5 );
}

/* 'C' function for method : 'Application::Settings.Slot20min()' */
void ApplicationSettings_Slot20min( ApplicationSettings _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton1, 0 );
  Command1( CMD_GSM_SIGNAL_PERIOD, 20 );
}

/* 'C' function for method : 'Application::Settings.Change()' */
void ApplicationSettings_Change( ApplicationSettings _this, XObject sender )
{
  XInt32 val;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  val = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzSlider );
  Command1( CMD_SET_BACKLIGHT_LEVEL, val * 5 + 30 );
}

/* Variants derived from the class : 'Application::Settings' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSettings )
EW_END_OF_CLASS_VARIANTS( ApplicationSettings )

/* Virtual Method Table (VMT) for the class : 'Application::Settings' */
EW_DEFINE_CLASS( ApplicationSettings, CoreGroup, "Application::Settings" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationSettings_UpdateLayout,
  ApplicationSettings_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSettings )

/* Initializer for the class 'Application::SetTimePopup' */
void ApplicationSetTimePopup__Init( ApplicationSetTimePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationTimePicker__Init( &_this->TimePicker, &_this->_XObject, 0 );
  ApplicationDatePicker__Init( &_this->DatePicker, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->CurrentRadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->StartRadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->EndRadioButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSetTimePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const015E );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const015F );
  CoreRectView__OnSetBounds( &_this->TimePicker, _Const0160 );
  CoreRectView__OnSetBounds( &_this->DatePicker, _Const0161 );
  ApplicationDatePicker_OnSetYear( &_this->DatePicker, 2018 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0162 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0163 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0164 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0165 
  ));
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0166 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const0167 
  ));
  CoreRectView__OnSetBounds( &_this->CurrentRadioButton, _Const0168 );
  WidgetSetRadioButton_OnSetLabel( &_this->CurrentRadioButton, EwLoadString( &_Const0169 
  ));
  CoreRectView__OnSetBounds( &_this->StartRadioButton, _Const016A );
  WidgetSetRadioButton_OnSetLabel( &_this->StartRadioButton, EwLoadString( &_Const016B 
  ));
  CoreRectView__OnSetBounds( &_this->EndRadioButton, _Const016C );
  WidgetSetRadioButton_OnSetLabel( &_this->EndRadioButton, EwLoadString( &_Const016D 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->TimePicker ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DatePicker ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CurrentRadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StartRadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EndRadioButton ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationSetTimePopup_Proceed 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationSetTimePopup_Cancel 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &ApplicationSmallCheckBoxCaption, WidgetSetToggleButtonConfig ));
  _this->CurrentRadioButton.OnSelect = EwNewSlot( _this, ApplicationSetTimePopup_CurrentSlot 
  );
  WidgetSetRadioButton_OnSetAppearance( &_this->CurrentRadioButton, EwGetAutoObject( 
  &ApplicationNormalRadioButton, WidgetSetRadioButtonConfig ));
  _this->StartRadioButton.OnSelect = EwNewSlot( _this, ApplicationSetTimePopup_StartSlot 
  );
  WidgetSetRadioButton_OnSetAppearance( &_this->StartRadioButton, EwGetAutoObject( 
  &ApplicationNormalRadioButton, WidgetSetRadioButtonConfig ));
  _this->EndRadioButton.OnSelect = EwNewSlot( _this, ApplicationSetTimePopup_EndSlot 
  );
  WidgetSetRadioButton_OnSetAppearance( &_this->EndRadioButton, EwGetAutoObject( 
  &ApplicationNormalRadioButton, WidgetSetRadioButtonConfig ));

  /* Call the user defined constructor */
  ApplicationSetTimePopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::SetTimePopup' */
void ApplicationSetTimePopup__ReInit( ApplicationSetTimePopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationTimePicker__ReInit( &_this->TimePicker );
  ApplicationDatePicker__ReInit( &_this->DatePicker );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  WidgetSetRadioButton__ReInit( &_this->CurrentRadioButton );
  WidgetSetRadioButton__ReInit( &_this->StartRadioButton );
  WidgetSetRadioButton__ReInit( &_this->EndRadioButton );
}

/* Finalizer method for the class 'Application::SetTimePopup' */
void ApplicationSetTimePopup__Done( ApplicationSetTimePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSetTimePopup );

  /* Finalize all embedded objects */
  ApplicationTimePicker__Done( &_this->TimePicker );
  ApplicationDatePicker__Done( &_this->DatePicker );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  WidgetSetRadioButton__Done( &_this->CurrentRadioButton );
  WidgetSetRadioButton__Done( &_this->StartRadioButton );
  WidgetSetRadioButton__Done( &_this->EndRadioButton );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SetTimePopup' */
void ApplicationSetTimePopup__Mark( ApplicationSetTimePopup _this )
{
  EwMarkObject( &_this->TimePicker );
  EwMarkObject( &_this->DatePicker );
  EwMarkObject( _this->StartDate );
  EwMarkObject( _this->EndDate );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->CurrentRadioButton );
  EwMarkObject( &_this->StartRadioButton );
  EwMarkObject( &_this->EndRadioButton );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationSetTimePopup_Init( ApplicationSetTimePopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ApplicationSetTimePopup_GetCurrent( _this );
  _this->EndDate = EwNewObject( CoreTime, 0 );
  _this->EndDate = CoreTime_OnGetCurrentTime( _this->EndDate );
  CoreTime_OnSetHour( _this->EndDate, 1 );
  CoreTime_OnSetMinute( _this->EndDate, 0 );
  CoreTime_OnSetSecond( _this->EndDate, 0 );
  CoreTime_OnSetDay( _this->EndDate, 1 );
  CoreTime_OnSetMonth( _this->EndDate, 10 );
  _this->StartDate = EwNewObject( CoreTime, 0 );
  CoreTime_OnSetHour( _this->StartDate, 1 );
  CoreTime_OnSetMinute( _this->StartDate, 0 );
  CoreTime_OnSetSecond( _this->StartDate, 0 );
  CoreTime_OnSetDay( _this->StartDate, 1 );
  CoreTime_OnSetMonth( _this->StartDate, 3 );
  CoreTime_OnSetYear( _this->StartDate, _this->EndDate->Year );
}

/* 'C' function for method : 'Application::SetTimePopup.Proceed()' */
void ApplicationSetTimePopup_Proceed( ApplicationSetTimePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationSetTimePopup_SetCurrent( _this );
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::SetTimePopup.Cancel()' */
void ApplicationSetTimePopup_Cancel( ApplicationSetTimePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::SetTimePopup.CurrentSlot()' */
void ApplicationSetTimePopup_CurrentSlot( ApplicationSetTimePopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationSetTimePopup_GetCurrent( _this );
}

/* 'C' function for method : 'Application::SetTimePopup.GetCurrent()' */
void ApplicationSetTimePopup_GetCurrent( ApplicationSetTimePopup _this )
{
  CoreTime t = EwNewObject( CoreTime, 0 );

  t = CoreTime_OnGetCurrentTime( t );
  ApplicationTimePicker_OnSetHour( &_this->TimePicker, t->Hour );
  ApplicationTimePicker_OnSetMinute( &_this->TimePicker, t->Minute );
  ApplicationTimePicker_OnSetSecond( &_this->TimePicker, t->Second );
  ApplicationDatePicker_OnSetDay( &_this->DatePicker, t->Day );
  ApplicationDatePicker_OnSetMonth( &_this->DatePicker, t->Month );
  ApplicationDatePicker_OnSetYear( &_this->DatePicker, t->Year );
  WidgetSetRadioButton_OnSetSelected( &_this->CurrentRadioButton, 1 );
  WidgetSetRadioButton_OnSetSelected( &_this->StartRadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->EndRadioButton, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->StartRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->CurrentRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->EndRadioButton );
}

/* 'C' function for method : 'Application::SetTimePopup.StartSlot()' */
void ApplicationSetTimePopup_StartSlot( ApplicationSetTimePopup _this, XObject sender )
{
  CoreTime t;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->CurrentRadioButton.Selected )
  {
    ApplicationSetTimePopup_SetCurrent( _this );
  }
  else
    if ( _this->StartRadioButton.Selected )
      return;
    else
      if ( _this->EndRadioButton.Selected )
      {
        ApplicationSetTimePopup_SetEnd( _this );
      }

  t = EwNewObject( CoreTime, 0 );
  t = _this->StartDate;
  ApplicationTimePicker_OnSetHour( &_this->TimePicker, t->Hour );
  ApplicationTimePicker_OnSetMinute( &_this->TimePicker, t->Minute );
  ApplicationTimePicker_OnSetSecond( &_this->TimePicker, t->Second );
  ApplicationDatePicker_OnSetDay( &_this->DatePicker, t->Day );
  ApplicationDatePicker_OnSetMonth( &_this->DatePicker, t->Month );
  ApplicationDatePicker_OnSetYear( &_this->DatePicker, t->Year );
  WidgetSetRadioButton_OnSetSelected( &_this->EndRadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->CurrentRadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->StartRadioButton, 1 );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->StartRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->CurrentRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->EndRadioButton );
}

/* 'C' function for method : 'Application::SetTimePopup.EndSlot()' */
void ApplicationSetTimePopup_EndSlot( ApplicationSetTimePopup _this, XObject sender )
{
  CoreTime t;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->CurrentRadioButton.Selected )
  {
    ApplicationSetTimePopup_SetCurrent( _this );
  }
  else
    if ( _this->StartRadioButton.Selected )
    {
      ApplicationSetTimePopup_SetStart( _this );
    }
    else
      if ( _this->EndRadioButton.Selected )
        return;

  t = EwNewObject( CoreTime, 0 );
  t = _this->EndDate;
  ApplicationTimePicker_OnSetHour( &_this->TimePicker, t->Hour );
  ApplicationTimePicker_OnSetMinute( &_this->TimePicker, t->Minute );
  ApplicationTimePicker_OnSetSecond( &_this->TimePicker, t->Second );
  ApplicationDatePicker_OnSetDay( &_this->DatePicker, t->Day );
  ApplicationDatePicker_OnSetMonth( &_this->DatePicker, t->Month );
  ApplicationDatePicker_OnSetYear( &_this->DatePicker, t->Year );
  WidgetSetRadioButton_OnSetSelected( &_this->EndRadioButton, 1 );
  WidgetSetRadioButton_OnSetSelected( &_this->CurrentRadioButton, 0 );
  WidgetSetRadioButton_OnSetSelected( &_this->StartRadioButton, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->StartRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->CurrentRadioButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->EndRadioButton );
}

/* 'C' function for method : 'Application::SetTimePopup.SetCurrent()' */
void ApplicationSetTimePopup_SetCurrent( ApplicationSetTimePopup _this )
{
  XInt32 h = ApplicationTimePicker_OnGetHour( &_this->TimePicker );
  XInt32 m = ApplicationTimePicker_OnGetMinute( &_this->TimePicker );
  XInt32 s = ApplicationTimePicker_OnGetSecond( &_this->TimePicker );
  XInt32 d = ApplicationDatePicker_OnGetDay( &_this->DatePicker );
  XInt32 M = ApplicationDatePicker_OnGetMonth( &_this->DatePicker );
  XInt32 y = ApplicationDatePicker_OnGetYear( &_this->DatePicker );

  {
    Command3( CMD_SET_TIME, h, m, s );
    Command3( CMD_SET_DATE, d, M, y );
  }
}

/* 'C' function for method : 'Application::SetTimePopup.SetEnd()' */
void ApplicationSetTimePopup_SetEnd( ApplicationSetTimePopup _this )
{
  CoreTime_OnSetHour( _this->EndDate, ApplicationTimePicker_OnGetHour( &_this->TimePicker 
  ));
  CoreTime_OnSetMinute( _this->EndDate, ApplicationTimePicker_OnGetMinute( &_this->TimePicker 
  ));
  CoreTime_OnSetSecond( _this->EndDate, ApplicationTimePicker_OnGetSecond( &_this->TimePicker 
  ));
  CoreTime_OnSetDay( _this->EndDate, ApplicationDatePicker_OnGetDay( &_this->DatePicker 
  ));
  CoreTime_OnSetMonth( _this->EndDate, ApplicationDatePicker_OnGetMonth( &_this->DatePicker 
  ));
  CoreTime_OnSetYear( _this->EndDate, ApplicationDatePicker_OnGetYear( &_this->DatePicker 
  ));
}

/* 'C' function for method : 'Application::SetTimePopup.SetStart()' */
void ApplicationSetTimePopup_SetStart( ApplicationSetTimePopup _this )
{
  CoreTime_OnSetHour( _this->StartDate, ApplicationTimePicker_OnGetHour( &_this->TimePicker 
  ));
  CoreTime_OnSetMinute( _this->StartDate, ApplicationTimePicker_OnGetMinute( &_this->TimePicker 
  ));
  CoreTime_OnSetSecond( _this->StartDate, ApplicationTimePicker_OnGetSecond( &_this->TimePicker 
  ));
  CoreTime_OnSetDay( _this->StartDate, ApplicationDatePicker_OnGetDay( &_this->DatePicker 
  ));
  CoreTime_OnSetMonth( _this->StartDate, ApplicationDatePicker_OnGetMonth( &_this->DatePicker 
  ));
  CoreTime_OnSetYear( _this->StartDate, ApplicationDatePicker_OnGetYear( &_this->DatePicker 
  ));
}

/* Variants derived from the class : 'Application::SetTimePopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSetTimePopup )
EW_END_OF_CLASS_VARIANTS( ApplicationSetTimePopup )

/* Virtual Method Table (VMT) for the class : 'Application::SetTimePopup' */
EW_DEFINE_CLASS( ApplicationSetTimePopup, ApplicationPopup, "Application::SetTimePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSetTimePopup )

/* Initializer for the class 'Application::TimePicker' */
void ApplicationTimePicker__Init( ApplicationTimePicker _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesPickerControl__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerSecond, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerMinute, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerHour, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListSecond, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListMinute, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListHour, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel2, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtBottom, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtTop, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Separator2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Separator1, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTimePicker );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const016E );
  CoreRectView__OnSetBounds( &_this->Background, _Const016E );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const016F );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0170 );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->TouchHandlerSecond, _Const0171 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerSecond, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerSecond, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerMinute, _Const0172 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerMinute, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerMinute, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerHour, _Const0173 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerHour, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerHour, 0.200000f );
  CoreRectView__OnSetBounds( &_this->ListSecond, _Const0171 );
  CoreVerticalList_OnSetEndless( &_this->ListSecond, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListSecond, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListSecond, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListSecond, 60 );
  CoreRectView__OnSetBounds( &_this->ListMinute, _Const0172 );
  CoreVerticalList_OnSetEndless( &_this->ListMinute, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListMinute, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListMinute, 60 );
  CoreRectView__OnSetBounds( &_this->ListHour, _Const0173 );
  CoreVerticalList_OnSetEndless( &_this->ListHour, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListHour, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListHour, 24 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0174 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0175 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0179 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel2, _Const017A );
  ViewsBevel_OnSetWidth( &_this->Bevel2, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel2, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel2, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel2, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel2, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel3, _Const017B );
  ViewsBevel_OnSetWidth( &_this->Bevel3, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel3, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel3, _Const0175 );
  ViewsBevel_OnSetColorB( &_this->Bevel3, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel3, _Const0178 );
  CoreRectView__OnSetBounds( &_this->ShineAtBottom, _Const017C );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtBottom, _Const0062 );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtBottom, _Const017D );
  ViewsRectangle_OnSetColorTR( &_this->ShineAtBottom, _Const017E );
  ViewsRectangle_OnSetColorTL( &_this->ShineAtBottom, _Const017E );
  CoreRectView__OnSetBounds( &_this->ShineAtTop, _Const017F );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtTop, _Const017E );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtTop, _Const017E );
  CoreRectView__OnSetBounds( &_this->Separator2, _Const0180 );
  ViewsText_OnSetString( &_this->Separator2, EwLoadString( &_Const0181 ));
  ViewsText_OnSetColor( &_this->Separator2, _Const0182 );
  CoreRectView__OnSetBounds( &_this->Separator1, _Const0183 );
  ViewsText_OnSetString( &_this->Separator1, EwLoadString( &_Const0181 ));
  ViewsText_OnSetColor( &_this->Separator1, _Const0182 );
  CoreRectView__OnSetBounds( &_this->Border, _Const016E );
  ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerSecond ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListSecond ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtBottom ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtTop ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Separator2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Separator1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  _this->TouchHandlerSecond.OnEnd = EwNewSlot( _this, ApplicationTimePicker_onEndSlide 
  );
  _this->TouchHandlerSecond.OnStart = EwNewSlot( _this, ApplicationTimePicker_onStartSlide 
  );
  _this->TouchHandlerMinute.OnEnd = EwNewSlot( _this, ApplicationTimePicker_onEndSlide 
  );
  _this->TouchHandlerMinute.OnStart = EwNewSlot( _this, ApplicationTimePicker_onStartSlide 
  );
  _this->TouchHandlerHour.OnEnd = EwNewSlot( _this, ApplicationTimePicker_onEndSlide 
  );
  _this->TouchHandlerHour.OnStart = EwNewSlot( _this, ApplicationTimePicker_onStartSlide 
  );
  _this->ListSecond.OnLoadItem = EwNewSlot( _this, ApplicationTimePicker_OnLoadSecondItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListSecond, &_this->TouchHandlerSecond 
  );
  _this->ListMinute.OnLoadItem = EwNewSlot( _this, ApplicationTimePicker_OnLoadMinuteItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListMinute, &_this->TouchHandlerMinute 
  );
  _this->ListHour.OnLoadItem = EwNewSlot( _this, ApplicationTimePicker_OnLoadHourItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListHour, &_this->TouchHandlerHour 
  );
  ViewsText_OnSetFont( &_this->Separator2, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Separator1, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::TimePicker' */
void ApplicationTimePicker__ReInit( ApplicationTimePicker _this )
{
  /* At first re-initialize the super class ... */
  TemplatesPickerControl__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerSecond );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerHour );
  CoreVerticalList__ReInit( &_this->ListSecond );
  CoreVerticalList__ReInit( &_this->ListMinute );
  CoreVerticalList__ReInit( &_this->ListHour );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsBevel__ReInit( &_this->Bevel2 );
  ViewsBevel__ReInit( &_this->Bevel3 );
  ViewsRectangle__ReInit( &_this->ShineAtBottom );
  ViewsRectangle__ReInit( &_this->ShineAtTop );
  ViewsText__ReInit( &_this->Separator2 );
  ViewsText__ReInit( &_this->Separator1 );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'Application::TimePicker' */
void ApplicationTimePicker__Done( ApplicationTimePicker _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTimePicker );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->BorderCurrent );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerSecond );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerHour );
  CoreVerticalList__Done( &_this->ListSecond );
  CoreVerticalList__Done( &_this->ListMinute );
  CoreVerticalList__Done( &_this->ListHour );
  ViewsBevel__Done( &_this->Bevel );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsBevel__Done( &_this->Bevel2 );
  ViewsBevel__Done( &_this->Bevel3 );
  ViewsRectangle__Done( &_this->ShineAtBottom );
  ViewsRectangle__Done( &_this->ShineAtTop );
  ViewsText__Done( &_this->Separator2 );
  ViewsText__Done( &_this->Separator1 );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  TemplatesPickerControl__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TimePicker' */
void ApplicationTimePicker__Mark( ApplicationTimePicker _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->TouchHandlerSecond );
  EwMarkObject( &_this->TouchHandlerMinute );
  EwMarkObject( &_this->TouchHandlerHour );
  EwMarkObject( &_this->ListSecond );
  EwMarkObject( &_this->ListMinute );
  EwMarkObject( &_this->ListHour );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Bevel2 );
  EwMarkObject( &_this->Bevel3 );
  EwMarkObject( &_this->ShineAtBottom );
  EwMarkObject( &_this->ShineAtTop );
  EwMarkObject( &_this->Separator2 );
  EwMarkObject( &_this->Separator1 );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  TemplatesPickerControl__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTimePicker_UpdateViewState( ApplicationTimePicker _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isSliding;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isSliding = (XBool)(( _this->TouchHandlerHour.Sliding || _this->TouchHandlerMinute.Sliding 
  ) || _this->TouchHandlerSecond.Sliding );

  if ( isSliding )
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0184 );
  else
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0170 );

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->sliding = isSliding;
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has finished the slide animation. Thereupon 
   the owner of the time picker is notified, that the time has been changed. */
void ApplicationTimePicker_onEndSlide( ApplicationTimePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );

  if (( !_this->TouchHandlerHour.Sliding && !_this->TouchHandlerMinute.Sliding ) 
      && !_this->TouchHandlerSecond.Sliding )
    EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has begun the slide animation. */
void ApplicationTimePicker_onStartSlide( ApplicationTimePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'ListSecond' vertical list every time the list loads 
   or updates an item. */
void ApplicationTimePicker_OnLoadSecondItem( ApplicationTimePicker _this, XObject 
  sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListSecond.Item;
  itemView = EwCastObject( _this->ListSecond.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListSecond.Super2.Bounds ), _this->ListSecond.ItemHeight )));
}

/* This method is called by 'ListMinute' vertical list every time the list loads 
   or updates an item. */
void ApplicationTimePicker_OnLoadMinuteItem( ApplicationTimePicker _this, XObject 
  sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListMinute.Item;
  itemView = EwCastObject( _this->ListMinute.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListMinute.Super2.Bounds ), _this->ListMinute.ItemHeight )));
}

/* This method is called by 'ListHour' vertical list every time the list loads or 
   updates an item. */
void ApplicationTimePicker_OnLoadHourItem( ApplicationTimePicker _this, XObject 
  sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListHour.Item;
  itemView = EwCastObject( _this->ListHour.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListHour.Super2.Bounds ), _this->ListHour.ItemHeight )));
}

/* 'C' function for method : 'Application::TimePicker.OnGetSecond()' */
XInt32 ApplicationTimePicker_OnGetSecond( ApplicationTimePicker _this )
{
  return (( -_this->ListSecond.ScrollOffset / _this->ListSecond.ItemHeight ) + 2 
    ) % 60;
}

/* 'C' function for method : 'Application::TimePicker.OnSetSecond()' */
void ApplicationTimePicker_OnSetSecond( ApplicationTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 59 )
    value = 59;

  CoreVerticalList_OnSetScrollOffset( &_this->ListSecond, ( value - 2 ) * -_this->ListSecond.ItemHeight 
  );
}

/* 'C' function for method : 'Application::TimePicker.OnGetMinute()' */
XInt32 ApplicationTimePicker_OnGetMinute( ApplicationTimePicker _this )
{
  return (( -_this->ListMinute.ScrollOffset / _this->ListMinute.ItemHeight ) + 2 
    ) % 60;
}

/* 'C' function for method : 'Application::TimePicker.OnSetMinute()' */
void ApplicationTimePicker_OnSetMinute( ApplicationTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 59 )
    value = 59;

  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, ( value - 2 ) * -_this->ListMinute.ItemHeight 
  );
}

/* 'C' function for method : 'Application::TimePicker.OnGetHour()' */
XInt32 ApplicationTimePicker_OnGetHour( ApplicationTimePicker _this )
{
  return (( -_this->ListHour.ScrollOffset / _this->ListHour.ItemHeight ) + 2 ) % 
    24;
}

/* 'C' function for method : 'Application::TimePicker.OnSetHour()' */
void ApplicationTimePicker_OnSetHour( ApplicationTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 23 )
    value = 23;

  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, ( value - 2 ) * -_this->ListHour.ItemHeight 
  );
}

/* Variants derived from the class : 'Application::TimePicker' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTimePicker )
EW_END_OF_CLASS_VARIANTS( ApplicationTimePicker )

/* Virtual Method Table (VMT) for the class : 'Application::TimePicker' */
EW_DEFINE_CLASS( ApplicationTimePicker, TemplatesPickerControl, "Application::TimePicker" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTimePicker_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTimePicker )

/* Initializer for the class 'Application::DatePicker' */
void ApplicationDatePicker__Init( ApplicationDatePicker _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesPickerControl__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerYear, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerMonth, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerDay, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListYear, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListMonth, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListDay, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel2, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtBottom, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtTop, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDatePicker );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0185 );
  CoreRectView__OnSetBounds( &_this->Background, _Const0185 );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const0186 );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0170 );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->TouchHandlerYear, _Const0187 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerYear, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerYear, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerMonth, _Const0188 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerMonth, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerMonth, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerDay, _Const0173 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerDay, _Const00C3 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerDay, 0.200000f );
  CoreRectView__OnSetBounds( &_this->ListYear, _Const0187 );
  CoreVerticalList_OnSetEndless( &_this->ListYear, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListYear, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListYear, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListYear, 200 );
  CoreRectView__OnSetBounds( &_this->ListMonth, _Const0188 );
  CoreVerticalList_OnSetEndless( &_this->ListMonth, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListMonth, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListMonth, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListMonth, 12 );
  CoreRectView__OnSetBounds( &_this->ListDay, _Const0173 );
  CoreVerticalList_OnSetEndless( &_this->ListDay, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListDay, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListDay, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, 31 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0174 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0178 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0179 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel2, _Const0189 );
  ViewsBevel_OnSetWidth( &_this->Bevel2, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel2, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel2, _Const0176 );
  ViewsBevel_OnSetColorB( &_this->Bevel2, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel2, _Const0178 );
  CoreRectView__OnSetBounds( &_this->Bevel3, _Const018A );
  ViewsBevel_OnSetWidth( &_this->Bevel3, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel3, _Const0176 );
  ViewsBevel_OnSetColorR( &_this->Bevel3, _Const0175 );
  ViewsBevel_OnSetColorB( &_this->Bevel3, _Const0177 );
  ViewsBevel_OnSetColorT( &_this->Bevel3, _Const0178 );
  CoreRectView__OnSetBounds( &_this->ShineAtBottom, _Const018B );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtBottom, _Const018C );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtBottom, _Const018D );
  ViewsRectangle_OnSetColorTR( &_this->ShineAtBottom, _Const017E );
  ViewsRectangle_OnSetColorTL( &_this->ShineAtBottom, _Const017E );
  CoreRectView__OnSetBounds( &_this->ShineAtTop, _Const018E );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtTop, _Const017E );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtTop, _Const017E );
  CoreRectView__OnSetBounds( &_this->Border, _Const0185 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerYear ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerMonth ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerDay ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListYear ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListMonth ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListDay ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtBottom ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtTop ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  _this->TouchHandlerYear.OnEnd = EwNewSlot( _this, ApplicationDatePicker_onEndSlide 
  );
  _this->TouchHandlerYear.OnStart = EwNewSlot( _this, ApplicationDatePicker_onStartSlide 
  );
  _this->TouchHandlerMonth.OnEnd = EwNewSlot( _this, ApplicationDatePicker_onEndSlide 
  );
  _this->TouchHandlerMonth.OnStart = EwNewSlot( _this, ApplicationDatePicker_onStartSlide 
  );
  _this->TouchHandlerDay.OnEnd = EwNewSlot( _this, ApplicationDatePicker_onEndSlide 
  );
  _this->TouchHandlerDay.OnStart = EwNewSlot( _this, ApplicationDatePicker_onStartSlide 
  );
  _this->ListYear.OnLoadItem = EwNewSlot( _this, ApplicationDatePicker_OnLoadYearItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListYear, &_this->TouchHandlerYear 
  );
  _this->ListMonth.OnLoadItem = EwNewSlot( _this, ApplicationDatePicker_OnLoadMonthItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListMonth, &_this->TouchHandlerMonth 
  );
  _this->ListDay.OnLoadItem = EwNewSlot( _this, ApplicationDatePicker_OnLoadDayItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListDay, &_this->TouchHandlerDay );
}

/* Re-Initializer for the class 'Application::DatePicker' */
void ApplicationDatePicker__ReInit( ApplicationDatePicker _this )
{
  /* At first re-initialize the super class ... */
  TemplatesPickerControl__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerYear );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerMonth );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerDay );
  CoreVerticalList__ReInit( &_this->ListYear );
  CoreVerticalList__ReInit( &_this->ListMonth );
  CoreVerticalList__ReInit( &_this->ListDay );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsBevel__ReInit( &_this->Bevel2 );
  ViewsBevel__ReInit( &_this->Bevel3 );
  ViewsRectangle__ReInit( &_this->ShineAtBottom );
  ViewsRectangle__ReInit( &_this->ShineAtTop );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'Application::DatePicker' */
void ApplicationDatePicker__Done( ApplicationDatePicker _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDatePicker );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->BorderCurrent );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerYear );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerMonth );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerDay );
  CoreVerticalList__Done( &_this->ListYear );
  CoreVerticalList__Done( &_this->ListMonth );
  CoreVerticalList__Done( &_this->ListDay );
  ViewsBevel__Done( &_this->Bevel );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsBevel__Done( &_this->Bevel2 );
  ViewsBevel__Done( &_this->Bevel3 );
  ViewsRectangle__Done( &_this->ShineAtBottom );
  ViewsRectangle__Done( &_this->ShineAtTop );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  TemplatesPickerControl__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DatePicker' */
void ApplicationDatePicker__Mark( ApplicationDatePicker _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->TouchHandlerYear );
  EwMarkObject( &_this->TouchHandlerMonth );
  EwMarkObject( &_this->TouchHandlerDay );
  EwMarkObject( &_this->ListYear );
  EwMarkObject( &_this->ListMonth );
  EwMarkObject( &_this->ListDay );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Bevel2 );
  EwMarkObject( &_this->Bevel3 );
  EwMarkObject( &_this->ShineAtBottom );
  EwMarkObject( &_this->ShineAtTop );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  TemplatesPickerControl__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDatePicker_UpdateViewState( ApplicationDatePicker _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isSliding;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isSliding = (XBool)(( _this->TouchHandlerDay.Sliding || _this->TouchHandlerMonth.Sliding 
  ) || _this->TouchHandlerYear.Sliding );

  if ( isSliding )
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0184 );
  else
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0170 );

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->sliding = isSliding;
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerDay, TouchHandlerMonth 
   or TouchHandlerYear) has finished the slide animation. Thereupon the owner of 
   the date picker is notified, that the date has been changed. */
void ApplicationDatePicker_onEndSlide( ApplicationDatePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );

  if (( !_this->TouchHandlerDay.Sliding && !_this->TouchHandlerMonth.Sliding ) && 
      !_this->TouchHandlerYear.Sliding )
  {
    XInt32 daysInMonth = ApplicationDatePicker_getDaysInMonth( _this, ApplicationDatePicker_OnGetMonth( 
      _this ), ApplicationDatePicker_OnGetYear( _this ));
    XInt32 day = ApplicationDatePicker_OnGetDay( _this );
    CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

    if ( day > daysInMonth )
      ApplicationDatePicker_OnSetDay( _this, daysInMonth );

    EwPostSignal( _this->OnChange, ((XObject)_this ));
  }
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerDay, TouchHandlerMonth 
   or TouchHandlerYear) has begun the slide animation. */
void ApplicationDatePicker_onStartSlide( ApplicationDatePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'ListYear' vertical list every time the list loads or 
   updates an item. */
void ApplicationDatePicker_OnLoadYearItem( ApplicationDatePicker _this, XObject 
  sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListYear.Item;
  itemView = EwCastObject( _this->ListYear.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo + 1900, 4, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListYear.Super2.Bounds ), _this->ListYear.ItemHeight )));
}

/* This method is called by 'ListMonth' vertical list every time the list loads 
   or updates an item. */
void ApplicationDatePicker_OnLoadMonthItem( ApplicationDatePicker _this, XObject 
  sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListMonth.Item;
  itemView = EwCastObject( _this->ListMonth.View, ViewsText );

  if ( itemView == 0 )
    return;

  switch ( itemNo )
  {
    case 1 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesFebruaryAbbr ));
    break;

    case 2 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesMarchAbbr ));
    break;

    case 3 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesAprilAbbr ));
    break;

    case 4 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesMayAbbr ));
    break;

    case 5 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJuneAbbr ));
    break;

    case 6 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJulyAbbr ));
    break;

    case 7 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesAugustAbbr ));
    break;

    case 8 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesSeptemberAbbr ));
    break;

    case 9 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesOctoberAbbr ));
    break;

    case 10 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesNovemberAbbr ));
    break;

    case 11 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesDecemberAbbr ));
    break;

    default : 
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJanuaryAbbr ));
  }

  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListMonth.Super2.Bounds ), _this->ListMonth.ItemHeight )));
}

/* This method is called by 'ListDay' vertical list every time the list loads or 
   updates an item. */
void ApplicationDatePicker_OnLoadDayItem( ApplicationDatePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListDay.Item;
  itemView = EwCastObject( _this->ListDay.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo + 1, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const0018 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListDay.Super2.Bounds ), _this->ListDay.ItemHeight )));
}

/* 'C' function for method : 'Application::DatePicker.OnGetYear()' */
XInt32 ApplicationDatePicker_OnGetYear( ApplicationDatePicker _this )
{
  return 1900 + ((( -_this->ListYear.ScrollOffset / _this->ListYear.ItemHeight ) 
    + 2 ) % 200 );
}

/* 'C' function for method : 'Application::DatePicker.OnSetYear()' */
void ApplicationDatePicker_OnSetYear( ApplicationDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth;

  if ( value < 1900 )
    value = 1900;

  if ( value > 2100 )
    value = 2100;

  CoreVerticalList_OnSetScrollOffset( &_this->ListYear, (( value - 1900 ) - 2 ) 
  * -_this->ListYear.ItemHeight );
  daysInMonth = ApplicationDatePicker_getDaysInMonth( _this, ApplicationDatePicker_OnGetMonth( 
  _this ), value );
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

  if ( ApplicationDatePicker_OnGetDay( _this ) > daysInMonth )
    ApplicationDatePicker_OnSetDay( _this, daysInMonth );
}

/* 'C' function for method : 'Application::DatePicker.OnGetMonth()' */
XInt32 ApplicationDatePicker_OnGetMonth( ApplicationDatePicker _this )
{
  return 1 + ((( -_this->ListMonth.ScrollOffset / _this->ListMonth.ItemHeight ) 
    + 2 ) % 12 );
}

/* 'C' function for method : 'Application::DatePicker.OnSetMonth()' */
void ApplicationDatePicker_OnSetMonth( ApplicationDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth;

  if ( value < 1 )
    value = 1;

  if ( value > 12 )
    value = 12;

  CoreVerticalList_OnSetScrollOffset( &_this->ListMonth, (( value - 1 ) - 2 ) * 
  -_this->ListMonth.ItemHeight );
  daysInMonth = ApplicationDatePicker_getDaysInMonth( _this, value, ApplicationDatePicker_OnGetYear( 
  _this ));
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

  if ( ApplicationDatePicker_OnGetDay( _this ) > daysInMonth )
    ApplicationDatePicker_OnSetDay( _this, daysInMonth );
}

/* 'C' function for method : 'Application::DatePicker.OnGetDay()' */
XInt32 ApplicationDatePicker_OnGetDay( ApplicationDatePicker _this )
{
  return 1 + ((( -_this->ListDay.ScrollOffset / _this->ListDay.ItemHeight ) + 2 
    ) % _this->ListDay.NoOfItems );
}

/* 'C' function for method : 'Application::DatePicker.OnSetDay()' */
void ApplicationDatePicker_OnSetDay( ApplicationDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth = ApplicationDatePicker_getDaysInMonth( _this, ApplicationDatePicker_OnGetMonth( 
    _this ), ApplicationDatePicker_OnGetYear( _this ));

  if ( value < 1 )
    value = 1;

  if ( value > daysInMonth )
    value = daysInMonth;

  CoreVerticalList_OnSetScrollOffset( &_this->ListDay, (( value - 2 ) - 1 ) * -_this->ListDay.ItemHeight 
  );
}

/* This function returns the number of days in the month and year specified in the 
   method parameters aMonth and aYear. The function takes care of the February and 
   its dependency of the leap year. */
XInt32 ApplicationDatePicker_getDaysInMonth( ApplicationDatePicker _this, XInt32 
  aMonth, XInt32 aYear )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( aMonth == 2 )
    if ((( aYear % 4 ) == 0 ) && ((( aYear % 100 ) != 0 ) || (( aYear % 400 ) == 
        0 )))
      return 29;
    else
      return 28;
  else
    if (((( aMonth == 4 ) || ( aMonth == 6 )) || ( aMonth == 9 )) || ( aMonth == 
        11 ))
      return 30;
    else
      return 31;
}

/* Variants derived from the class : 'Application::DatePicker' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDatePicker )
EW_END_OF_CLASS_VARIANTS( ApplicationDatePicker )

/* Virtual Method Table (VMT) for the class : 'Application::DatePicker' */
EW_DEFINE_CLASS( ApplicationDatePicker, TemplatesPickerControl, "Application::DatePicker" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationDatePicker_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDatePicker )

/* Initializer for the class 'Application::ConfirmPopup' */
void ApplicationConfirmPopup__Init( ApplicationConfirmPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationConfirmPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const018F );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const0190 );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0191 );
  ViewsText_OnSetWrapText( &_this->Text1, 1 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0192 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0163 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0193 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0165 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationConfirmPopup_Proceed 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationConfirmPopup_Cancel 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::ConfirmPopup' */
void ApplicationConfirmPopup__ReInit( ApplicationConfirmPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
}

/* Finalizer method for the class 'Application::ConfirmPopup' */
void ApplicationConfirmPopup__Done( ApplicationConfirmPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationConfirmPopup );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ConfirmPopup' */
void ApplicationConfirmPopup__Mark( ApplicationConfirmPopup _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkSlot( _this->meth );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::ConfirmPopup.Proceed()' */
void ApplicationConfirmPopup_Proceed( ApplicationConfirmPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwSignal( _this->meth, ((XObject)_this ));
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ConfirmPopup.Cancel()' */
void ApplicationConfirmPopup_Cancel( ApplicationConfirmPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ConfirmPopup.ShowThen()' */
void ApplicationConfirmPopup_ShowThen( ApplicationConfirmPopup _this, CoreRoot rootObject, 
  XSlot method )
{
  XPoint m;

  _this->Super1.mask = EwNewObject( ViewsRectangle, 0 );
  _this->Super1.touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->Super1.root = rootObject;
  _this->meth = method;
  CoreQuadView__OnSetPoint1( _this->Super1.touch, _Const0054 );
  CoreQuadView__OnSetPoint2( _this->Super1.touch, _Const008B );
  CoreQuadView__OnSetPoint3( _this->Super1.touch, _Const008A );
  CoreQuadView__OnSetPoint4( _this->Super1.touch, _Const012F );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.touch ), 0 );
  ViewsRectangle_OnSetColor( _this->Super1.mask, _Const0194 );
  CoreRectView__OnSetBounds( _this->Super1.mask, _Const000C );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super3.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super3.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super3.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super3.Bounds, EwMovePointNeg( 
  _Const008A, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  return;
}

/* Variants derived from the class : 'Application::ConfirmPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationConfirmPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationConfirmPopup )

/* Virtual Method Table (VMT) for the class : 'Application::ConfirmPopup' */
EW_DEFINE_CLASS( ApplicationConfirmPopup, ApplicationPopup, "Application::ConfirmPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationConfirmPopup )

/* Initializer for the class 'Application::KeypadPopup' */
void ApplicationKeypadPopup__Init( ApplicationKeypadPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationKeypadKey__Init( &_this->KeypadKey, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey1, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey2, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey3, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey4, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey5, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey6, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey7, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey8, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey9, &_this->_XObject, 0 );
  ApplicationKeypadKey__Init( &_this->KeypadKey10, &_this->_XObject, 0 );
  ApplicationWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->accept, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->AcceptTimer, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->DenyTimer, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->StarTimer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeypadPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0195 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const0196 );
  CoreRectView__OnSetBounds( &_this->KeypadKey, _Const0197 );
  EwRetainString( &_this->KeypadKey.NumProperty, EwLoadString( &_Const0198 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey1, _Const0199 );
  EwRetainString( &_this->KeypadKey1.NumProperty, EwLoadString( &_Const019A ));
  CoreRectView__OnSetBounds( &_this->KeypadKey2, _Const019B );
  EwRetainString( &_this->KeypadKey2.NumProperty, EwLoadString( &_Const019C ));
  CoreRectView__OnSetBounds( &_this->KeypadKey3, _Const019D );
  EwRetainString( &_this->KeypadKey3.NumProperty, EwLoadString( &_Const019E ));
  CoreRectView__OnSetBounds( &_this->KeypadKey4, _Const019F );
  EwRetainString( &_this->KeypadKey4.NumProperty, EwLoadString( &_Const01A0 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey5, _Const01A1 );
  EwRetainString( &_this->KeypadKey5.NumProperty, EwLoadString( &_Const01A2 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey6, _Const01A3 );
  EwRetainString( &_this->KeypadKey6.NumProperty, EwLoadString( &_Const0102 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey7, _Const01A4 );
  EwRetainString( &_this->KeypadKey7.NumProperty, EwLoadString( &_Const01A5 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey8, _Const01A6 );
  EwRetainString( &_this->KeypadKey8.NumProperty, EwLoadString( &_Const01A7 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey9, _Const01A8 );
  EwRetainString( &_this->KeypadKey9.NumProperty, EwLoadString( &_Const01A9 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey10, _Const01AA );
  EwRetainString( &_this->KeypadKey10.NumProperty, EwLoadString( &_Const01AB ));
  CoreRectView__OnSetBounds( &_this->Writable, _Const01AC );
  ApplicationWritable_OnSetMaxLength( &_this->Writable, 4 );
  CoreRectView__OnSetBounds( &_this->Text, _Const01AD );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01AE ));
  ViewsText_OnSetColor( &_this->Text, _Const01AF );
  EwRetainString( &_this->EngLevel, EwLoadString( &_Const01B0 ));
  EwRetainString( &_this->SupLevel, EwLoadString( &_Const01B1 ));
  CoreRectView__OnSetBounds( &_this->accept, _Const01B2 );
  ViewsText_OnSetString( &_this->accept, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->accept, _Const004C );
  ViewsText_OnSetVisible( &_this->accept, 0 );
  CoreTimer_OnSetPeriod( &_this->AcceptTimer, 1000 );
  CoreRectView__OnSetBounds( &_this->deny, _Const01B2 );
  ViewsText_OnSetString( &_this->deny, EwLoadString( &_Const01B4 ));
  ViewsText_OnSetColor( &_this->deny, _Const004C );
  ViewsText_OnSetVisible( &_this->deny, 0 );
  CoreTimer_OnSetPeriod( &_this->DenyTimer, 300 );
  EwRetainString( &_this->passkey, EwLoadString( &_Const01A9 ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01B5 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0165 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const01B6 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0163 
  ));
  CoreSystemEventHandler_OnSetEnabled( &_this->SystemEventHandler, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->accept ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  _this->KeypadKey.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey1.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey2.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey3.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey4.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey5.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey6.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey7.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey8.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey9.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press );
  _this->KeypadKey10.UserPress = EwNewSlot( _this, ApplicationKeypadPopup_Press 
  );
  CoreGroup__OnSetFocus( &_this->Writable, 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->accept, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  _this->AcceptTimer.OnTrigger = EwNewSlot( _this, ApplicationKeypadPopup_AcceptSlot 
  );
  ViewsText_OnSetFont( &_this->deny, EwLoadResource( &FlatFontM, ResourcesFont ));
  _this->DenyTimer.OnTrigger = EwNewSlot( _this, ApplicationKeypadPopup_DenySlot 
  );
  _this->StarTimer.OnTrigger = EwNewSlot( _this, ApplicationKeypadPopup_StarSlot 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationKeypadPopup_Cancel 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationKeypadPopup_Proceeed 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, ApplicationKeypadPopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->FireListChangeEvent );
  _this->SystemEventHandler1.OnEvent = EwNewSlot( _this, ApplicationKeypadPopup_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler1, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->EventListChangedEvent );

  /* Call the user defined constructor */
  ApplicationKeypadPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::KeypadPopup' */
void ApplicationKeypadPopup__ReInit( ApplicationKeypadPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationKeypadKey__ReInit( &_this->KeypadKey );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey1 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey2 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey3 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey4 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey5 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey6 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey7 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey8 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey9 );
  ApplicationKeypadKey__ReInit( &_this->KeypadKey10 );
  ApplicationWritable__ReInit( &_this->Writable );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->accept );
  CoreTimer__ReInit( &_this->AcceptTimer );
  ViewsText__ReInit( &_this->deny );
  CoreTimer__ReInit( &_this->DenyTimer );
  CoreTimer__ReInit( &_this->StarTimer );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler1 );
}

/* Finalizer method for the class 'Application::KeypadPopup' */
void ApplicationKeypadPopup__Done( ApplicationKeypadPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeypadPopup );

  /* Finalize all embedded objects */
  ApplicationKeypadKey__Done( &_this->KeypadKey );
  ApplicationKeypadKey__Done( &_this->KeypadKey1 );
  ApplicationKeypadKey__Done( &_this->KeypadKey2 );
  ApplicationKeypadKey__Done( &_this->KeypadKey3 );
  ApplicationKeypadKey__Done( &_this->KeypadKey4 );
  ApplicationKeypadKey__Done( &_this->KeypadKey5 );
  ApplicationKeypadKey__Done( &_this->KeypadKey6 );
  ApplicationKeypadKey__Done( &_this->KeypadKey7 );
  ApplicationKeypadKey__Done( &_this->KeypadKey8 );
  ApplicationKeypadKey__Done( &_this->KeypadKey9 );
  ApplicationKeypadKey__Done( &_this->KeypadKey10 );
  ApplicationWritable__Done( &_this->Writable );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->accept );
  CoreTimer__Done( &_this->AcceptTimer );
  ViewsText__Done( &_this->deny );
  CoreTimer__Done( &_this->DenyTimer );
  CoreTimer__Done( &_this->StarTimer );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler1 );

  /* Release all used strings */
  EwReleaseString( &_this->EngLevel );
  EwReleaseString( &_this->SupLevel );
  EwReleaseString( &_this->passkey );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::KeypadPopup' */
void ApplicationKeypadPopup__Mark( ApplicationKeypadPopup _this )
{
  EwMarkObject( &_this->KeypadKey );
  EwMarkObject( &_this->KeypadKey1 );
  EwMarkObject( &_this->KeypadKey2 );
  EwMarkObject( &_this->KeypadKey3 );
  EwMarkObject( &_this->KeypadKey4 );
  EwMarkObject( &_this->KeypadKey5 );
  EwMarkObject( &_this->KeypadKey6 );
  EwMarkObject( &_this->KeypadKey7 );
  EwMarkObject( &_this->KeypadKey8 );
  EwMarkObject( &_this->KeypadKey9 );
  EwMarkObject( &_this->KeypadKey10 );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->accept );
  EwMarkObject( &_this->AcceptTimer );
  EwMarkObject( &_this->deny );
  EwMarkObject( &_this->DenyTimer );
  EwMarkObject( &_this->StarTimer );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->SystemEventHandler );
  EwMarkObject( &_this->SystemEventHandler1 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationKeypadPopup_Init( ApplicationKeypadPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ViewsText_OnSetVisible( &_this->accept, 0 );
  ViewsText_OnSetVisible( &_this->accept, 0 );
  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  ViewsText_OnSetString( &_this->Writable.TextEditor.Text, 0 );
  EwReleaseString( &_this->passkey );
  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* 'C' function for method : 'Application::KeypadPopup.Press()' */
void ApplicationKeypadPopup_Press( ApplicationKeypadPopup _this, XObject sender )
{
  ApplicationKeypadKey key = EwCastObject( sender, ApplicationKeypadKey );

  if ( EwGetStringLength( _this->passkey ) < 4 )
  {
    if ( EwGetStringLength( key->NumProperty ) == 1 )
    {
      EwRetainString( &_this->passkey, EwConcatStringChar( _this->passkey, EwGetStringChar( 
      key->NumProperty, 0 )));
      ApplicationKeypadPopup_Update( _this );
    }
  }

  if ( !EwCompString( key->NumProperty, EwLoadString( &_Const01AB )) && ( EwGetStringLength( 
      _this->passkey ) > 0 ))
  {
    EwRetainString( &_this->passkey, EwStringLeft( _this->passkey, EwGetStringLength( 
    _this->passkey ) - 1 ));
    ApplicationKeypadPopup_Update( _this );
  }
}

/* 'C' function for method : 'Application::KeypadPopup.Proceeed()' */
void ApplicationKeypadPopup_Proceeed( ApplicationKeypadPopup _this, XObject sender )
{
  ApplicationApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwCastObject( CoreView__GetRoot( _this ), ApplicationApplication );

  if ( !EwCompString( _this->passkey, _this->EngLevel ))
  {
    ApplicationLevelAccess_OnSetLevel( &ap->LevelAccess, 4 );
    ViewsText_OnSetVisible( &_this->deny, 0 );
    ViewsText_OnSetVisible( &_this->accept, 1 );
    CoreTimer_OnSetEnabled( &_this->AcceptTimer, 1 );
    CoreTimer_restart( &_this->AcceptTimer, 0, 600 );
  }
  else
    if ( !EwCompString( _this->passkey, _this->SupLevel ))
    {
      ApplicationLevelAccess_OnSetLevel( &ap->LevelAccess, 3 );
      ViewsText_OnSetVisible( &_this->deny, 0 );
      ViewsText_OnSetVisible( &_this->accept, 1 );
      CoreTimer_OnSetEnabled( &_this->AcceptTimer, 1 );
      CoreTimer_restart( &_this->AcceptTimer, 0, 600 );
    }
    else
    {
      ViewsText_OnSetVisible( &_this->accept, 0 );
      ViewsText_OnSetVisible( &_this->deny, 1 );
      CoreTimer_restart( &_this->DenyTimer, 0, 600 );
    }
}

/* 'C' function for method : 'Application::KeypadPopup.Cancel()' */
void ApplicationKeypadPopup_Cancel( ApplicationKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::KeypadPopup.AcceptSlot()' */
void ApplicationKeypadPopup_AcceptSlot( ApplicationKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::KeypadPopup.DenySlot()' */
void ApplicationKeypadPopup_DenySlot( ApplicationKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->DenyTimer, 0 );
  ViewsText_OnSetVisible( &_this->deny, 0 );
}

/* 'C' function for method : 'Application::KeypadPopup.StarSlot()' */
void ApplicationKeypadPopup_StarSlot( ApplicationKeypadPopup _this, XObject sender )
{
  XInt32 n;
  XString s;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );
  s = 0;

  for ( n = 0; n < EwGetStringLength( _this->passkey ); n = n + 1 )
  {
    s = EwConcatString( s, EwLoadString( &_Const01B7 ));
  }

  ViewsText_OnSetString( &_this->Writable.TextEditor.Text, s );
}

/* 'C' function for method : 'Application::KeypadPopup.Update()' */
void ApplicationKeypadPopup_Update( ApplicationKeypadPopup _this )
{
  XInt32 n;

  if ( _this->StarTimer.Enabled )
    CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );

  ApplicationTextEditor_OnSetString( &_this->Writable.TextEditor, 0 );

  for ( n = 0; n < EwGetStringLength( _this->passkey ); n = n + 1 )
  {
    if ( n == ( EwGetStringLength( _this->passkey ) - 1 ))
    {
      ApplicationTextEditor_OnSetString( &_this->Writable.TextEditor, EwConcatStringChar( 
      ApplicationTextEditor_OnGetString( &_this->Writable.TextEditor ), EwGetStringChar( 
      _this->passkey, n )));
    }
    else
    {
      ApplicationTextEditor_OnSetString( &_this->Writable.TextEditor, EwConcatStringChar( 
      ApplicationTextEditor_OnGetString( &_this->Writable.TextEditor ), '*' ));
    }
  }

  CoreTimer_OnSetEnabled( &_this->StarTimer, 1 );
  CoreTimer_restart( &_this->StarTimer, 0, 1000 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationKeypadPopup_onEvent( ApplicationKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this != 0 )
  {
    if (( CoreGroup_FindCurrentDialog((CoreGroup)CoreView__GetRoot( _this )) == 
        (CoreGroup)_this ) || ( CoreGroup__GetIndexOfView( CoreView__GetRoot( _this 
        ), ((CoreView)_this )) > 0 ))
    {
      XInt32 fires = 0;
      {
        Command cmd;

        Command0( CMD_GET_NUM_FIRES, &cmd );  

        fires = cmd.int0;
      }

      if ( fires > 0 )
      {
        ApplicationPopup_Hide((ApplicationPopup)_this );
      }
    }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationKeypadPopup_onEvent1( ApplicationKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this != 0 )
  {
    if ( _this->Super1.Parent != 0 )
    {
      XInt32 events = 0;
      {
        Command cmd;

        Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );  

        events = cmd.int0;
      }

      if ( events > 0 )
      {
        ApplicationPopup_Hide((ApplicationPopup)_this );
      }
    }
  }
}

/* Variants derived from the class : 'Application::KeypadPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeypadPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationKeypadPopup )

/* Virtual Method Table (VMT) for the class : 'Application::KeypadPopup' */
EW_DEFINE_CLASS( ApplicationKeypadPopup, ApplicationPopup, "Application::KeypadPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationKeypadPopup )

/* Initializer for the class 'Application::KeypadKey' */
void ApplicationKeypadKey__Init( ApplicationKeypadKey _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeypadKey );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01B8 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const01B9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const01BA );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01B8 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const01B8 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01A0 ));
  ViewsText_OnSetColor( &_this->Text, _Const01BB );
  EwRetainString( &_this->NumProperty, EwLoadString( &_Const01A9 ));
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const01B8 );
  ViewsRectangle_OnSetColor( &_this->Rectangle2, _Const01BC );
  ViewsRectangle_OnSetVisible( &_this->Rectangle2, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationKeypadKey_Release );
  _this->PushButton.OnPress = EwNewSlot( _this, ApplicationKeypadKey_Press );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::KeypadKey' */
void ApplicationKeypadKey__ReInit( ApplicationKeypadKey _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsText__ReInit( &_this->Text );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
}

/* Finalizer method for the class 'Application::KeypadKey' */
void ApplicationKeypadKey__Done( ApplicationKeypadKey _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeypadKey );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsText__Done( &_this->Text );
  ViewsRectangle__Done( &_this->Rectangle2 );

  /* Release all used strings */
  EwReleaseString( &_this->NumProperty );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::KeypadKey' */
void ApplicationKeypadKey__Mark( ApplicationKeypadKey _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkSlot( _this->UserPress );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationKeypadKey_UpdateLayout( ApplicationKeypadKey _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKeypadKey_UpdateViewState( ApplicationKeypadKey _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, _this->NumProperty );
}

/* 'C' function for method : 'Application::KeypadKey.Release()' */
void ApplicationKeypadKey_Release( ApplicationKeypadKey _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* 'C' function for method : 'Application::KeypadKey.Press()' */
void ApplicationKeypadKey_Press( ApplicationKeypadKey _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwPostSignal( _this->UserPress, ((XObject)_this ));
}

/* Variants derived from the class : 'Application::KeypadKey' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeypadKey )
EW_END_OF_CLASS_VARIANTS( ApplicationKeypadKey )

/* Virtual Method Table (VMT) for the class : 'Application::KeypadKey' */
EW_DEFINE_CLASS( ApplicationKeypadKey, CoreGroup, "Application::KeypadKey" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKeypadKey_UpdateLayout,
  ApplicationKeypadKey_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationKeypadKey )

/* Initializer for the class 'Application::Writable' */
void ApplicationWritable__Init( ApplicationWritable _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  ApplicationTextEditor__Init( &_this->TextEditor, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationWritable );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01BD );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const01BD );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const01BE );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const01BF );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const01BF );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const01BE );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const01C0 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const000A );
  CoreView_OnSetLayout((CoreView)&_this->TextEditor, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TextEditor, _Const01C0 );
  ApplicationTextEditor_OnSetWrapText( &_this->TextEditor, 0 );
  ApplicationTextEditor_OnSetString( &_this->TextEditor, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextEditor ), 0 );
  CoreGroup__OnSetFocus( _this, ((CoreView)&_this->TextEditor ));
  CoreGroup__OnSetFocus( &_this->TextEditor, 0 );
  _this->TextEditor.OnChange = EwNullSlot;

  /* Call the user defined constructor */
  ApplicationWritable_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Writable' */
void ApplicationWritable__ReInit( ApplicationWritable _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  ApplicationTextEditor__ReInit( &_this->TextEditor );
}

/* Finalizer method for the class 'Application::Writable' */
void ApplicationWritable__Done( ApplicationWritable _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationWritable );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsRectangle__Done( &_this->Rectangle9 );
  ApplicationTextEditor__Done( &_this->TextEditor );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Writable' */
void ApplicationWritable__Mark( ApplicationWritable _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->TextEditor );
  EwMarkRef( _this->Property );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationWritable_UpdateLayout( ApplicationWritable _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationWritable_UpdateViewState( ApplicationWritable _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationWritable_Init( ApplicationWritable _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ApplicationWritable_OnSetProperty( _this, EwNewRef( &_this->TextEditor.Text, ViewsText_OnGetString, 
  ViewsText_OnSetString ));
}

/* 'C' function for method : 'Application::Writable.OnSetProperty()' */
void ApplicationWritable_OnSetProperty( ApplicationWritable _this, XRef value )
{
  if ( !EwCompRef( _this->Property, value ))
    return;

  _this->Property = value;
}

/* 'C' function for method : 'Application::Writable.OnSetMaxLength()' */
void ApplicationWritable_OnSetMaxLength( ApplicationWritable _this, XInt32 value )
{
  if ( _this->MaxLength == value )
    return;

  _this->MaxLength = value;
}

/* Variants derived from the class : 'Application::Writable' */
EW_DEFINE_CLASS_VARIANTS( ApplicationWritable )
EW_END_OF_CLASS_VARIANTS( ApplicationWritable )

/* Virtual Method Table (VMT) for the class : 'Application::Writable' */
EW_DEFINE_CLASS( ApplicationWritable, CoreGroup, "Application::Writable" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationWritable_UpdateLayout,
  ApplicationWritable_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationWritable )

/* Initializer for the class 'Application::TextEditor' */
void ApplicationTextEditor__Init( ApplicationTextEditor _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesTextEditor__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  EffectsBoolEffect__Init( &_this->blinkEffect, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CursorKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->BackspaceKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->DeleteKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->NewlineKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CharacterKeyHandler, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Caret, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTextEditor );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01C1 );
  _this->blinkEffect.Value2 = 0;
  _this->blinkEffect.Value1 = 1;
  EffectsBoolEffect_OnSetCycleDuration( &_this->blinkEffect, 500 );
  EffectsBoolEffect_OnSetInterCycleDelay( &_this->blinkEffect, 500 );
  _this->CursorKeyHandler.Filter = CoreKeyCodeCursorKeys;
  _this->BackspaceKeyHandler.Filter = CoreKeyCodeBackspace;
  _this->DeleteKeyHandler.Filter = CoreKeyCodeDelete;
  _this->NewlineKeyHandler.Filter = CoreKeyCodeEnter;
  _this->CharacterKeyHandler.Filter = CoreKeyCodeCharacterKeys;
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const01C1 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetFriction( &_this->SlideTouchHandler, 0.050000f );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const01C2 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const01C3 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const01C4 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0054 );
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->SimpleTouchHandler, 3 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const01C5 );
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01C6 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, _Const01C7 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, _Const01C8 );
  ViewsLine_OnSetWidth2( &_this->Caret, 2 );
  ViewsLine_OnSetWidth1( &_this->Caret, 2 );
  ViewsLine_OnSetColor( &_this->Caret, _Const0018 );
  ViewsLine_OnSetVisible( &_this->Caret, 0 );
  _this->WrapText = 1;
  EwRetainString( &_this->String, EwLoadString( &_Const006A ));
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Caret ), 0 );
  _this->blinkEffect.Outlet = EwNewRef( &_this->Caret, ViewsLine_OnGetVisible, ViewsLine_OnSetVisible 
  );
  _this->CursorKeyHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onCursorKey 
  );
  _this->CursorKeyHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onCursorKey 
  );
  _this->BackspaceKeyHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onBackspaceKey 
  );
  _this->BackspaceKeyHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onBackspaceKey 
  );
  _this->DeleteKeyHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onDeleteKey 
  );
  _this->DeleteKeyHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onDeleteKey 
  );
  _this->NewlineKeyHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onNewlineKey 
  );
  _this->NewlineKeyHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onNewlineKey 
  );
  _this->CharacterKeyHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onCharacterKey 
  );
  _this->CharacterKeyHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onCharacterKey 
  );
  _this->SimpleTouchHandler.OnDrag = EwNewSlot( _this, ApplicationTextEditor_onDragTouch 
  );
  _this->SimpleTouchHandler.OnHold = EwNewSlot( _this, ApplicationTextEditor_onHoldTouch 
  );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, ApplicationTextEditor_onReleaseTouch 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationTextEditor_onPressTouch 
  );
  ViewsText_OnSetOnUpdate( &_this->Text, EwNewSlot( _this, ApplicationTextEditor_updateCaret 
  ));
  ViewsText_OnSetSlideHandler( &_this->Text, &_this->SlideTouchHandler );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Font = EwLoadResource( &ResourcesFontMedium, ResourcesFont );
}

/* Re-Initializer for the class 'Application::TextEditor' */
void ApplicationTextEditor__ReInit( ApplicationTextEditor _this )
{
  /* At first re-initialize the super class ... */
  TemplatesTextEditor__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  EffectsBoolEffect__ReInit( &_this->blinkEffect );
  CoreKeyPressHandler__ReInit( &_this->CursorKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Caret );
}

/* Finalizer method for the class 'Application::TextEditor' */
void ApplicationTextEditor__Done( ApplicationTextEditor _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTextEditor );

  /* Finalize all embedded objects */
  EffectsBoolEffect__Done( &_this->blinkEffect );
  CoreKeyPressHandler__Done( &_this->CursorKeyHandler );
  CoreKeyPressHandler__Done( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__Done( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__Done( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__Done( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Caret );

  /* Release all used strings */
  EwReleaseString( &_this->String );

  /* Don't forget to deinitialize the super class ... */
  TemplatesTextEditor__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TextEditor' */
void ApplicationTextEditor__Mark( ApplicationTextEditor _this )
{
  EwMarkObject( _this->magnifyingBack );
  EwMarkObject( _this->magnifyingView );
  EwMarkObject( &_this->blinkEffect );
  EwMarkObject( &_this->CursorKeyHandler );
  EwMarkObject( &_this->BackspaceKeyHandler );
  EwMarkObject( &_this->DeleteKeyHandler );
  EwMarkObject( &_this->NewlineKeyHandler );
  EwMarkObject( &_this->CharacterKeyHandler );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Caret );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( _this->Font );

  /* Give the super class a chance to mark its objects and references */
  TemplatesTextEditor__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTextEditor_UpdateViewState( ApplicationTextEditor _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateFocused ) == CoreViewStateFocused ))
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  else
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    ViewsLine_OnSetVisible( &_this->Caret, 0 );
  }
}

/* This slot method is called after the caret has been adjusted. Its job is to adjust 
   too the position of the magnifying glass view where the augmented text content 
   around the caret is shown. */
void ApplicationTextEditor_updateMagnifyingView( ApplicationTextEditor _this, XObject 
  sender )
{
  XRect srcArea;
  XRect extent;
  XRect bounds;
  XPoint caret;
  XInt32 srcX;
  XInt32 dstX;
  XPoint ofs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView == 0 )
    return;

  srcArea = _this->magnifyingView->Super1.SourceArea;
  extent = CoreView__GetExtent( _this->magnifyingView );
  bounds = _this->Super3.Bounds;
  caret = _this->Caret.Super1.Point1;
  srcX = caret.X - ( EwGetRectW( srcArea ) / 2 );

  if ( srcX < 0 )
    srcX = 0;

  if (( srcX + EwGetRectW( srcArea )) > EwGetRectW( bounds ))
    srcX = EwGetRectW( bounds ) - EwGetRectW( srcArea );

  ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwSetRectOrigin( 
  _this->magnifyingView->Super1.SourceArea, EwNewPoint( srcX, caret.Y )));
  dstX = ( bounds.Point1.X + caret.X ) - (( caret.X - srcX ) * 2 );
  ofs = EwNewPoint( dstX - extent.Point1.X, ( bounds.Point1.Y + caret.Y ) - extent.Point2.Y 
  );
  CoreView__MoveView( _this->magnifyingView, ofs, 0 );
  CoreView__MoveView( _this->magnifyingBack, ofs, 0 );
}

/* This slot method is called after a short delay when the user has moved the caret 
   or modified the text. Its job is to ensure that the caret is still visible. If 
   necessary, the editor content is scrolled. */
void ApplicationTextEditor_updateScrollOffset( ApplicationTextEditor _this, XObject 
  sender )
{
  XRect bounds;
  XInt32 ofsX;
  XInt32 ofsY;
  XPoint size;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bounds = _this->Text.Super1.Bounds;
  ofsX = 0;
  ofsY = 0;

  if ( _this->Caret.Super1.Point1.X < bounds.Point1.X )
    ofsX = bounds.Point1.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.X > bounds.Point2.X )
    ofsX = bounds.Point2.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.Y < bounds.Point1.Y )
    ofsY = bounds.Point1.Y - _this->Caret.Super1.Point1.Y;

  if ( _this->Caret.Super1.Point2.Y > bounds.Point2.Y )
    ofsY = bounds.Point2.Y - _this->Caret.Super1.Point2.Y;

  if (( ofsX != 0 ) || ( ofsY != 0 ))
    ViewsText_OnSetScrollOffset( &_this->Text, EwMovePointPos( _this->Text.ScrollOffset, 
    EwNewPoint( ofsX, ofsY )));

  ofsX = _this->Text.ScrollOffset.X;
  ofsY = _this->Text.ScrollOffset.Y;
  size = EwGetRectSize( ViewsText_GetContentArea( &_this->Text ));

  if ( size.X <= EwGetRectW( _this->Text.Super1.Bounds ))
    ofsX = 0;

  if ( size.Y <= EwGetRectH( _this->Text.Super1.Bounds ))
    ofsY = 0;

  ViewsText_OnSetScrollOffset( &_this->Text, EwNewPoint( ofsX, ofsY ));
}

/* This slot method is attached to the Text view. Each time the Text view has rearranged 
   the text, this method is called. Its job is to adjust the caret to the evtl. 
   new position. */
void ApplicationTextEditor_updateCaret( ApplicationTextEditor _this, XObject sender )
{
  XPoint rowCol;
  XPoint pos;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rowCol = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );
  pos = ViewsText_RowCol2Position( &_this->Text, rowCol );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, EwMovePointNeg( pos, EwNewPoint( 
  0, _this->Font->Ascent )));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, EwMovePointPos( pos, EwNewPoint( 
  0, _this->Font->Descent )));

  if ( _this->blinkEffect.Enabled )
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  }

  if ( _this->autoScroll )
  {
    EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateScrollOffset ), 
      ((XObject)_this ));
    _this->autoScroll = 0;
  }

  if ( _this->magnifyingView != 0 )
    EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateMagnifyingView ), 
      ((XObject)_this ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   hide the magnifying glass view again. */
void ApplicationTextEditor_onReleaseTouch( ApplicationTextEditor _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingView ));
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ));
    _this->magnifyingView = 0;
    _this->magnifyingBack = 0;
    CoreGroup__OnSetBuffered( _this, 0 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   move the caret accordingly to the user's finger movement. */
void ApplicationTextEditor_onDragTouch( ApplicationTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    XPoint rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
      );
    XInt32 newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

    if ( newCaretIndex != _this->caretIndex )
    {
      _this->caretIndex = newCaretIndex;
      EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateCaret ), ((XObject)_this 
        ));
      _this->autoScroll = 1;
    }
  }
  else
  {
    XPoint ofs = EwMovePointNeg( _this->SimpleTouchHandler.CurrentPos, _this->SimpleTouchHandler.HittingPos 
      );
    XInt32 limit = CoreView__GetRoot( _this )->CursorDragLimit;

    if (((( ofs.X < -limit ) || ( ofs.X > limit )) || ( ofs.Y < -limit )) || ( ofs.Y 
        > limit ))
      CoreRoot_DeflectCursor( CoreView__GetRoot( _this ), ((CoreView)&_this->SlideTouchHandler 
      ), _Const0054 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   activate the caret movement mode if the user has pressed the finger on the screen 
   for a while. The method also shows a small magnifying glass where the text around 
   the caret is shown. This should help the user to navigate the caret with the 
   finger. */
void ApplicationTextEditor_onHoldTouch( ApplicationTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if (( _this->SimpleTouchHandler.HoldPeriod >= 300 ) && ( _this->magnifyingView 
      == 0 ))
  {
    XInt32 height = _this->Caret.Super1.Point2.Y - _this->Caret.Super1.Point1.Y;
    XInt32 width = height * 3;

    if ( height > EwGetRectH( _this->Super3.Bounds ))
      height = EwGetRectH( _this->Super3.Bounds );

    if ( width > EwGetRectW( _this->Super3.Bounds ))
      width = EwGetRectW( _this->Super3.Bounds );

    CoreGroup__OnSetBuffered( _this, 1 );
    _this->magnifyingView = EwNewObject( ViewsWarpGroup, 0 );
    _this->magnifyingBack = EwNewObject( ViewsRectangle, 0 );
    ViewsWarpGroup_OnSetGroup( _this->magnifyingView, ((CoreGroup)_this ));
    ViewsWarpView_OnSetQuality((ViewsWarpView)_this->magnifyingView, 1 );
    ViewsWarpGroup_OnSetOpacity( _this->magnifyingView, 200 );
    ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwNewRect( 
    0, 0, width, height ));
    CoreQuadView__OnSetPoint2( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point2, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point3, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point3, 
    height * 2 ));
    CoreQuadView__OnSetPoint4( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point4, 
    height * 2 ));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectSize( _this->magnifyingBack->Super1.Bounds, 
    EwMovePointPos( EwNewPoint( width * 2, height * 2 ), _Const01C9 )));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectOrigin( _this->magnifyingBack->Super1.Bounds, 
    _Const01CA ));
    ViewsRectangle_OnSetColor( _this->magnifyingBack, _Const01CB );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ), 0 );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingView ), 0 );
    EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateMagnifyingView ), 
      ((XObject)_this ));
  }

  if ( _this->magnifyingView != 0 )
    EwSignal( EwNewSlot( _this, ApplicationTextEditor_onDragTouch ), ((XObject)_this 
      ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   obtain the focused state for the editor so the user can interact with the editor 
   content and to place the caret at the touched position. */
void ApplicationTextEditor_onPressTouch( ApplicationTextEditor _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !CoreGroup_HasViewState((CoreGroup)_this, CoreViewStateFocused ))
    CoreGroup_ObtainFocus((CoreGroup)_this );

  rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
  );
  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if ( newCaretIndex != _this->caretIndex )
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   move the caret up/down/left or right in the editor text. */
void ApplicationTextEditor_onCursorKey( ApplicationTextEditor _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rc = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeLeft )
  {
    rc.X = ( rc.X - 1 );

    if ( rc.X < 0 )
    {
      rc.Y = ( rc.Y - 1 );
      rc.X = EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y ));
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeRight )
  {
    rc.X = ( rc.X + 1 );

    if ( rc.X == EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y )))
    {
      rc.Y = ( rc.Y + 1 );
      rc.X = 0;
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeUp )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointNeg( pos, EwNewPoint( 
    0, rowHeight )));
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeDown )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointPos( pos, EwNewPoint( 
    0, rowHeight )));
  }

  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if ( newCaretIndex != _this->caretIndex )
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, ApplicationTextEditor_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign preceding the current caret position and to move the caret accordingly. */
void ApplicationTextEditor_onBackspaceKey( ApplicationTextEditor _this, XObject 
  sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex == 0 )
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex - 1 );
  count = 1;

  if ((( _this->caretIndex > 1 ) && ( ch == '^' )) && ( EwGetStringChar( _this->Text.String, 
      _this->caretIndex - 2 ) == 0x00A0 ))
    count = 2;
  else
    if ((( ch == '^' ) || ( ch == '~' )) || ( ch == '%' ))
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex 
  - count, count ));
  _this->caretIndex = _this->caretIndex - count;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign at the current caret position. */
void ApplicationTextEditor_onDeleteKey( ApplicationTextEditor _this, XObject sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex >= ( EwGetStringLength( _this->Text.String ) - 1 ))
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex );
  count = 1;

  if ( ch == '%' )
    count = 2;
  else
    if ( ch == 0x00A0 )
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex, 
  count ));
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the <new line> sign and to move the caret 
   to the next row. */
void ApplicationTextEditor_onNewlineKey( ApplicationTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, EwLoadString( 
  &_Const01CC ), _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + 1;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the sign which has been input by the user 
   and to move the caret to the next column. */
void ApplicationTextEditor_onCharacterKey( ApplicationTextEditor _this, XObject 
  sender )
{
  XChar ch;
  XString str;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ch = _this->CharacterKeyHandler.CharCode;
  str = EwNewStringChar( ch, 1 );

  if (((( ch == '^' ) || ( ch == '~' )) || ( ch == 0x00AD )) || ( ch == '%' ))
    str = EwConcatStringChar( EwLoadString( &_Const01CD ), ch );
  else
    if ( ch == 0x0020 )
      str = EwLoadString( &_Const01CE );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, str, 
  _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + EwGetStringLength( str );
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* 'C' function for method : 'Application::TextEditor.OnSetWrapText()' */
void ApplicationTextEditor_OnSetWrapText( ApplicationTextEditor _this, XBool value )
{
  if ( _this->WrapText == value )
    return;

  _this->WrapText = value;
  ViewsText_OnSetWrapText( &_this->Text, value );
  _this->SlideTouchHandler.SlideHorz = (XBool)!value;
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0054 );
}

/* 'C' function for method : 'Application::TextEditor.OnGetString()' */
XString ApplicationTextEditor_OnGetString( ApplicationTextEditor _this )
{
  XString str = _this->Text.String;
  XInt32 inx = EwStringFindChar( str, 0x00A0, 0 );

  while ( inx >= 0 )
  {
    if ( EwGetStringChar( str, inx + 1 ) == '^' )
    {
      str = EwStringRemove( str, inx, 1 );
      str = EwSetStringChar( str, inx, 0x0020 );
    }

    inx = EwStringFindChar( str, 0x00A0, inx + 1 );
  }

  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringRemove( str, inx, 1 );
    inx = EwStringFindChar( str, '%', inx + 1 );
  }

  return EwStringLeft( str, EwGetStringLength( str ) - 1 );
}

/* 'C' function for method : 'Application::TextEditor.OnSetString()' */
void ApplicationTextEditor_OnSetString( ApplicationTextEditor _this, XString value )
{
  XString str;
  XInt32 inx;

  if ( !EwCompString( _this->String, value ))
    return;

  EwRetainString( &_this->String, value );
  str = EwShareString( value );
  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const01CD ), inx );
    inx = EwStringFindChar( str, '%', inx + 2 );
  }

  inx = EwStringFindChar( str, '^', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const01CD ), inx );
    inx = EwStringFindChar( str, '^', inx + 2 );
  }

  inx = EwStringFindChar( str, '~', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const01CD ), inx );
    inx = EwStringFindChar( str, '~', inx + 2 );
  }

  inx = EwStringFindChar( str, 0x00AD, 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const01CD ), inx );
    inx = EwStringFindChar( str, 0x00AD, inx + 2 );
  }

  inx = EwStringFindChar( str, 0x0020, 0 );

  while ( inx >= 0 )
  {
    str = EwSetStringChar( str, inx, 0x00A0 );
    str = EwStringInsert( str, EwLoadString( &_Const01CF ), inx + 1 );
    inx = EwStringFindChar( str, 0x0020, inx + 2 );
  }

  _this->caretIndex = EwGetStringLength( str );
  ViewsText_OnSetString( &_this->Text, EwConcatString( str, EwLoadString( &_Const01D0 
  )));
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0054 );
}

/* Variants derived from the class : 'Application::TextEditor' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTextEditor )
EW_END_OF_CLASS_VARIANTS( ApplicationTextEditor )

/* Virtual Method Table (VMT) for the class : 'Application::TextEditor' */
EW_DEFINE_CLASS( ApplicationTextEditor, TemplatesTextEditor, "Application::TextEditor" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTextEditor_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTextEditor )

/* Initializer for the class 'Application::AccesssPopup' */
void ApplicationAccesssPopup__Init( ApplicationAccesssPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle5, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle6, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle8, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationAccesssPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01D1 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const01D2 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle1, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const01D3 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle1, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle1, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const01D4 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const0124 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle3, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle3, _Const01D5 );
  ViewsRectangle_OnSetColor( &_this->Rectangle3, _Const01D6 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle4, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle4, _Const01D7 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle4, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle5, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle5, _Const01D8 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle5, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle5, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle5, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle5, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle6, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle6, _Const01D9 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle6, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle6, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle6, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle6, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle7, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle7, _Const012B );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle7, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle7, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle7, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle7, _Const0125 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle8, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle8, _Const01DA );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle8, _Const0125 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle8, _Const0124 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle8, _Const0124 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle8, _Const0125 );
  CoreRectView__OnSetBounds( &_this->Text, _Const01DB );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const004B ));
  CoreTimer_OnSetPeriod( &_this->Timer, 1200 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationAccesssPopup_Hide );

  /* Call the user defined constructor */
  ApplicationAccesssPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::AccesssPopup' */
void ApplicationAccesssPopup__ReInit( ApplicationAccesssPopup _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  ViewsRectangle__ReInit( &_this->Rectangle3 );
  ViewsRectangle__ReInit( &_this->Rectangle4 );
  ViewsRectangle__ReInit( &_this->Rectangle5 );
  ViewsRectangle__ReInit( &_this->Rectangle6 );
  ViewsRectangle__ReInit( &_this->Rectangle7 );
  ViewsRectangle__ReInit( &_this->Rectangle8 );
  ViewsText__ReInit( &_this->Text );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'Application::AccesssPopup' */
void ApplicationAccesssPopup__Done( ApplicationAccesssPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationAccesssPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  ViewsRectangle__Done( &_this->Rectangle3 );
  ViewsRectangle__Done( &_this->Rectangle4 );
  ViewsRectangle__Done( &_this->Rectangle5 );
  ViewsRectangle__Done( &_this->Rectangle6 );
  ViewsRectangle__Done( &_this->Rectangle7 );
  ViewsRectangle__Done( &_this->Rectangle8 );
  ViewsText__Done( &_this->Text );
  CoreTimer__Done( &_this->Timer );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::AccesssPopup' */
void ApplicationAccesssPopup__Mark( ApplicationAccesssPopup _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Rectangle3 );
  EwMarkObject( &_this->Rectangle4 );
  EwMarkObject( &_this->Rectangle5 );
  EwMarkObject( &_this->Rectangle6 );
  EwMarkObject( &_this->Rectangle7 );
  EwMarkObject( &_this->Rectangle8 );
  EwMarkObject( _this->mask );
  EwMarkObject( _this->touch );
  EwMarkObject( _this->root );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationAccesssPopup_UpdateLayout( ApplicationAccesssPopup _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationAccesssPopup_UpdateViewState( ApplicationAccesssPopup _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationAccesssPopup_Init( ApplicationAccesssPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'Application::AccesssPopup.Show()' */
void ApplicationAccesssPopup_Show( ApplicationAccesssPopup _this, CoreRoot rootObject )
{
  XPoint m;

  _this->mask = EwNewObject( ViewsRectangle, 0 );
  _this->touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->root = rootObject;
  CoreQuadView__OnSetPoint1( _this->touch, _Const0054 );
  CoreQuadView__OnSetPoint2( _this->touch, _Const008B );
  CoreQuadView__OnSetPoint3( _this->touch, _Const008A );
  CoreQuadView__OnSetPoint4( _this->touch, _Const012F );
  CoreGroup__Add( rootObject, ((CoreView)_this->touch ), 0 );
  ViewsRectangle_OnSetColor( _this->mask, _Const0130 );
  CoreRectView__OnSetBounds( _this->mask, _Const000C );
  CoreGroup__Add( rootObject, ((CoreView)_this->mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super2.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super2.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super2.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super2.Bounds, EwMovePointNeg( 
  _Const008A, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  CoreTimer_restart( &_this->Timer, 0, 1200 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  return;
}

/* 'C' function for method : 'Application::AccesssPopup.Hide()' */
void ApplicationAccesssPopup_Hide( ApplicationAccesssPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__Remove( _this->root, ((CoreView)_this->mask ));
  CoreGroup__Remove( _this->root, ((CoreView)_this->touch ));
  CoreGroup__Remove( _this->root, ((CoreView)_this ));
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  return;
}

/* Variants derived from the class : 'Application::AccesssPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationAccesssPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationAccesssPopup )

/* Virtual Method Table (VMT) for the class : 'Application::AccesssPopup' */
EW_DEFINE_CLASS( ApplicationAccesssPopup, CoreGroup, "Application::AccesssPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationAccesssPopup_UpdateLayout,
  ApplicationAccesssPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationAccesssPopup )

/* Bitmap resource : 'Application::Key2Bitmap' */
EW_DEFINE_BITMAP_RES( ApplicationKey2Bitmap )
  EW_BITMAP_FRAMES( ApplicationKey2Bitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationKey2Bitmap, Default )        /* ratio 18.38 % */
    0x1C080100, 0xA3205048, 0x2866EB5C, 0x944E75C2, 0xC8E75BA2, 0x6FD8622D, 0x167FBA22,
    0x98BAE231, 0x8D46E3B1, 0x0C7A3F1C, 0xC9A41249, 0xAA452791, 0xA5B2892C, 0x1EFD73CA,
    0xF0D85C46, 0x3882C260, 0x19DBFE0B, 0x742DD120, 0x74C22687, 0xCA6572C9, 0x2A8F48A2,
    0x28D4BA25, 0x5F4EA7D3, 0x6868DCC6, 0x3900BFE7, 0x0A04F801, 0xA6D76935, 0x1D86A35E,
    0x57ECB60B, 0x19D10B94, 0x86736822, 0xCD628AD0, 0xB73B3DC6, 0x77BA592E, 0x7984A6ED,
    0x86429CD0, 0xCDCAF0A2, 0x61B0784B, 0xFEE788C1, 0xA253250C, 0x6549C4DE, 0xCA43EBFE,
    0x83323FD9, 0xA28BFD4A, 0x223FD0A6, 0xC3FCDA58, 0x3FCB4481, 0xFCA44219, 0xCA8441A3,
    0xBC4C1D3F, 0x05922BFC, 0x6E2A3FCE, 0xA353FD14, 0x40BFD5A8, 0x7E1DACAA, 0xB8E49C4C,
    0x16CB90B7, 0x1FEDC57A, 0xFE973C17, 0x0FFD48CD, 0x570C0502, 0x37F80403, 0xEF40BB90,
    0xEF8BC000, 0xF97BFE4E, 0xFFD202F0, 0xC441C0B3, 0xCAFFD8EB, 0x888CD210, 0x85E1B896,
    0xAB2F1791, 0x7FB996C8, 0xC5C12839, 0x901C063F, 0x25E678C0, 0x0879DE18, 0x8360A82E,
    0x20C83210, 0xF0480F03, 0x006713CF, 0xC986DF82, 0x26476465, 0xA0F844BF, 0xE8962384,
    0xA22289E0, 0x048A2248, 0x2DD188B4, 0x9FB875FF, 0xC2607660, 0xAE388A4B, 0x0A022048,
    0x1C4573FC, 0x8483FC8E, 0x68E47617, 0x31E191A2, 0x1C394B72, 0x45E4E8CE, 0xE3A8DE35,
    0xB0B64794, 0x454A1243, 0x48068150, 0x929DD976, 0xDF98CA4C, 0x797A517E, 0xF82F8324,
    0x145284E0, 0x9981F068, 0x66091E2A, 0xF9D66393, 0xC654994F, 0x6978A7A9, 0x9B5289AE,
    0xE709E66F, 0x498A733F, 0x9E785967, 0x7D9EE8A9, 0xA0E6E9B2, 0xE4FA1682, 0xBA255FA1,
    0x160CA0A7, 0x286D85A1, 0x104350A9, 0xE84A2E90, 0x5A4E9492, 0xEEA18DA9, 0x3A0BC249,
    0x7F8893FC, 0xDCC2114A, 0x60480E3F, 0x4A10AA41, 0x4CA1A76A, 0x776B8A59, 0x87A1884B,
    0xC0F42F61, 0xEA0FAFC4, 0x71AEEA5A, 0x91E98AF9, 0x05110432, 0xE05EB07F, 0xA2C80941,
    0xA6AF2CA8, 0xA8ACE51A, 0x9DB76A3A, 0xF20C6A14, 0x84B3220F, 0xAE210FF3, 0x0F0FF368,
    0x6D917C4D, 0xCB72A4AE, 0x5EDF526C, 0x0383EE0A, 0x3FC0400C, 0xAF3009E9, 0x7B76DB8E,
    0x947E52AF, 0xFE3FCCF2, 0xBEACFBFE, 0xE0FC0F10, 0xF05C1303, 0x2EF6648F, 0x911BD4AB,
    0x0D4FF2D8, 0x71215845, 0x478B0FC4, 0xFC060140, 0x6A154413, 0x278783FC, 0xF19C68C7,
    0xF2C48657, 0x75DB764D, 0x2E3FEE27, 0x050FF95C, 0xEFD9BC19, 0x501AB800, 0x7C183FE0,
    0x263FC260, 0x8403D0C4, 0x81E06413, 0x5C6B06CC, 0x773BCDF3, 0x10C5F017, 0x7D889499,
    0x0FFC2993, 0x0884981D, 0xFCB92507, 0xBB254713, 0x268753FC, 0x0803FCC2, 0x6C5CD32A,
    0xBD1F984B, 0x0CDA4931, 0xCCF53D46, 0x35772755, 0x8D6DE2CE, 0xE971E071, 0x7E83F7CD,
    0xA1B07D53, 0x9DFD6783, 0x5E035DE1, 0x4B50E292, 0x82E6F8ED, 0xE15DAE45, 0x78FE1DEA,
    0xFE677BE2, 0x1FA3E237, 0xE02C887C, 0xE7F3AE10, 0xB96BAAE8, 0x22386C49, 0x5C18840B,
    0x87EA39CB, 0x0400E02E, 0xF681C610, 0xA6E125EE, 0xF34D831B, 0x5FF2FC40, 0x110370AD,
    0xC4F0F610, 0x264BCB18, 0x40350AC2, 0x73170478, 0x60BBCF30, 0x0981E45D, 0xA0162D84,
    0x6B19F0F6, 0x10248751, 0x27076CEE, 0xFA9F78C3, 0x42D48986, 0x80193FCE, 0xB5840270,
    0xC7B1CADE, 0x745F09C9, 0x0632964E, 0x530860D1, 0xBF029F90, 0xFC5D36B2, 0x80086503,
    0x563ED0D0, 0x665C2A84, 0xC3E0FF3E, 0x8FF19A28, 0x66227C3C, 0x2643D05E, 0x1A0291FE,
    0x5A474A80, 0x522012E2, 0x1A058D51, 0x80E621E5, 0x42BEFCCB, 0xE8160C06, 0x992B2540,
    0xA7703275, 0x766FC44D, 0x0CA1814C, 0xFDBDF38F, 0x20442D90, 0xE60C8148, 0xF017B3B5,
    0xF8FF0940, 0xE1A429C3, 0x671CB1C2, 0x8FDC4031, 0x0860CC64, 0x06E3FC54, 0xD202C848,
    0x04808774, 0x0C0168F4, 0x3A3FC070, 0xFC170260, 0x305207E3, 0xC0E43FC3, 0x061E2AB6,
    0x8BE8A122, 0xC592285B, 0x8FD11619, 0x4F898161, 0x820321D4, 0x861CC7F4, 0x151DA3E8,
    0x149A1829, 0x09562B22, 0xA10A5080, 0xF22E401F, 0x8981728F, 0x95992323, 0x06520CAC,
    0x45A3C08B, 0x4C143888, 0xA5711232, 0xCF15C744, 0x764F8A11, 0x01012072, 0x00000000

  EW_BITMAPS_TABLE( ApplicationKey2Bitmap )
    EW_BITMAP( ApplicationKey2Bitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationKey2Bitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::Key2Bitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationKey2Bitmap )

/* Initializer for the class 'Application::LogPopup' */
void ApplicationLogPopup__Init( ApplicationLogPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Events, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Faults, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->System, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Fire, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Settings, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Access, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Testing, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Misc, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationLogPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01DC );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const0196 );
  ViewsRectangle_OnSetVisible( &_this->Super1.Rectangle3, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const01DD );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const017D );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const01DE );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 25 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationLogItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const01DE );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const01DF );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 400 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 100000 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01E0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const014A 
  ));
  CoreRectView__OnSetBounds( &_this->Events, _Const01E1 );
  WidgetSetToggleButton_OnSetChecked( &_this->Events, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Events, EwLoadString( &_Const01E2 ));
  CoreRectView__OnSetBounds( &_this->Faults, _Const01E3 );
  WidgetSetToggleButton_OnSetChecked( &_this->Faults, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Faults, EwLoadString( &_Const01E4 ));
  CoreRectView__OnSetBounds( &_this->System, _Const01E5 );
  WidgetSetToggleButton_OnSetChecked( &_this->System, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->System, EwLoadString( &_Const0040 ));
  CoreRectView__OnSetBounds( &_this->Fire, _Const01E6 );
  WidgetSetToggleButton_OnSetChecked( &_this->Fire, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Fire, EwLoadString( &_Const01E7 ));
  CoreRectView__OnSetBounds( &_this->Settings, _Const01E8 );
  WidgetSetToggleButton_OnSetChecked( &_this->Settings, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Settings, EwLoadString( &_Const003E 
  ));
  CoreRectView__OnSetBounds( &_this->Access, _Const01E9 );
  WidgetSetToggleButton_OnSetChecked( &_this->Access, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Access, EwLoadString( &_Const0039 ));
  CoreRectView__OnSetBounds( &_this->Testing, _Const01EA );
  WidgetSetToggleButton_OnSetChecked( &_this->Testing, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Testing, EwLoadString( &_Const01EB ));
  CoreRectView__OnSetBounds( &_this->Misc, _Const01EC );
  WidgetSetToggleButton_OnSetChecked( &_this->Misc, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Misc, EwLoadString( &_Const01ED ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Events ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Faults ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->System ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Fire ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Settings ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Access ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Testing ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Misc ), 0 );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationLogPopup_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationLogPopup_ScrollDragSlot 
  );
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, ApplicationLogPopup_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationLogPopup_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Events.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->Events.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->Events, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Faults.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->Faults.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->Faults, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->System.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->System.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->System, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Fire.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->Fire.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  WidgetSetToggleButton_OnSetAppearance( &_this->Fire, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Settings.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  _this->Settings.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->Settings, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Access.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->Access.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->Access, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Testing.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  _this->Testing.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->Testing, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Misc.OnSwitchOn = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  _this->Misc.OnSwitchOff = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot );
  WidgetSetToggleButton_OnSetAppearance( &_this->Misc, EwGetAutoObject( &ApplicationSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->SystemEventHandler2.OnEvent = EwNewSlot( _this, ApplicationLogPopup_RefreshSlot 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler2, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->LogListChangeEvent );

  /* Call the user defined constructor */
  ApplicationLogPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::LogPopup' */
void ApplicationLogPopup__ReInit( ApplicationLogPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetToggleButton__ReInit( &_this->Events );
  WidgetSetToggleButton__ReInit( &_this->Faults );
  WidgetSetToggleButton__ReInit( &_this->System );
  WidgetSetToggleButton__ReInit( &_this->Fire );
  WidgetSetToggleButton__ReInit( &_this->Settings );
  WidgetSetToggleButton__ReInit( &_this->Access );
  WidgetSetToggleButton__ReInit( &_this->Testing );
  WidgetSetToggleButton__ReInit( &_this->Misc );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler2 );
}

/* Finalizer method for the class 'Application::LogPopup' */
void ApplicationLogPopup__Done( ApplicationLogPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationLogPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle9 );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetToggleButton__Done( &_this->Events );
  WidgetSetToggleButton__Done( &_this->Faults );
  WidgetSetToggleButton__Done( &_this->System );
  WidgetSetToggleButton__Done( &_this->Fire );
  WidgetSetToggleButton__Done( &_this->Settings );
  WidgetSetToggleButton__Done( &_this->Access );
  WidgetSetToggleButton__Done( &_this->Testing );
  WidgetSetToggleButton__Done( &_this->Misc );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler2 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::LogPopup' */
void ApplicationLogPopup__Mark( ApplicationLogPopup _this )
{
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Events );
  EwMarkObject( &_this->Faults );
  EwMarkObject( &_this->System );
  EwMarkObject( &_this->Fire );
  EwMarkObject( &_this->Settings );
  EwMarkObject( &_this->Access );
  EwMarkObject( &_this->Testing );
  EwMarkObject( &_this->Misc );
  EwMarkObject( &_this->SystemEventHandler2 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationLogPopup_Init( ApplicationLogPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, ApplicationLogPopup_RefreshSlot ), ((XObject)_this 
    ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationLogPopup_OnLoadItem( ApplicationLogPopup _this, XObject sender )
{
  XInt32 itemNo;
  ApplicationLogItem i;
  XInt32 t;
  XInt32 filter;
  XString msg;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  i = EwCastObject( _this->VerticalList.View, ApplicationLogItem );

  if ( i == 0 )
    return;

  CoreRectView__OnSetBounds( i, EwSetRectSize( i->Super2.Bounds, EwNewPoint( EwGetRectW( 
  _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight )));
  t = 0;
  filter = _this->Filter;
  msg = EwLoadString( &_Const01EE );
  {
    char buff[ 128 ];
    Command cmd;

    cmd.int0 = itemNo;
    cmd.int1 = filter;
    cmd.int2 = (int) buff;

    Command0( CMD_GET_LOG_LINE, &cmd );

    t = cmd.int3;

    msg = EwNewStringAnsi( buff );
  }

  switch ( t )
  {
    case 4 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogAccess, 
      ResourcesBitmap ));
    break;

    case 1 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogEvents, 
      ResourcesBitmap ));
    break;

    case 5 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogFaults, 
      ResourcesBitmap ));
    break;

    case 6 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogFire, ResourcesBitmap 
      ));
    break;

    case 0 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogMisc, ResourcesBitmap 
      ));
    break;

    case 3 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogSettings, 
      ResourcesBitmap ));
    break;

    case 2 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogSystem, 
      ResourcesBitmap ));
    break;

    case 7 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &ApplicationLogTest, ResourcesBitmap 
      ));
    break;
  }

  switch ( t )
  {
    case 4 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0039 ));
    break;

    case 1 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01EF ));
    break;

    case 5 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01F0 ));
    break;

    case 6 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01F1 ));
    break;

    case 0 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01F2 ));
    break;

    case 3 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01F3 ));
    break;

    case 2 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0040 ));
    break;

    case 7 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const003D ));
    break;
  }

  ViewsText_OnSetString( &i->DescripText, msg );
}

/* 'C' function for method : 'Application::LogPopup.ScrollDragSlot()' */
void ApplicationLogPopup_ScrollDragSlot( ApplicationLogPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::LogPopup.ScrollPressSlot()' */
void ApplicationLogPopup_ScrollPressSlot( ApplicationLogPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VerticalScrollbar ));
}

/* 'C' function for method : 'Application::LogPopup.Close()' */
void ApplicationLogPopup_Close( ApplicationLogPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::LogPopup.RefreshSlot()' */
void ApplicationLogPopup_RefreshSlot( ApplicationLogPopup _this, XObject sender )
{
  XInt32 filter;
  XInt32 items;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  filter = ApplicationLogPopup_GetFilter( _this );
  _this->Filter = filter;
  items = 0;
  {
    Command cmd;

    cmd.int0 = filter;

    Command0( CMD_GET_LOG_LENGTH, &cmd );

    items = cmd.int0;
  }
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, items );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, items - 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, items 
  * _this->VerticalList.ItemHeight );
}

/* 'C' function for method : 'Application::LogPopup.GetFilter()' */
XInt32 ApplicationLogPopup_GetFilter( ApplicationLogPopup _this )
{
  XInt32 filter = 0;

  if ( _this->Events.Checked )
    filter = filter | 2;

  if ( _this->Faults.Checked )
    filter = filter | 32;

  if ( _this->System.Checked )
    filter = filter | 4;

  if ( _this->Fire.Checked )
    filter = filter | 64;

  if ( _this->Misc.Checked )
    filter = filter | 1;

  if ( _this->Access.Checked )
    filter = filter | 16;

  if ( _this->Settings.Checked )
    filter = filter | 8;

  if ( _this->Testing.Checked )
    filter = filter | 128;

  return filter;
}

/* Variants derived from the class : 'Application::LogPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationLogPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationLogPopup )

/* Virtual Method Table (VMT) for the class : 'Application::LogPopup' */
EW_DEFINE_CLASS( ApplicationLogPopup, ApplicationPopup, "Application::LogPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationLogPopup )

/* Initializer for the class 'Application::LogItem' */
void ApplicationLogItem__Init( ApplicationLogItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescripText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationLogItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01F4 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Image, _Const01F5 );
  CoreView_OnSetLayout((CoreView)&_this->DescripText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->DescripText, _Const01F6 );
  ViewsText_OnSetAlignment( &_this->DescripText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescripText, EwLoadString( &_Const01F7 ));
  ViewsText_OnSetColor( &_this->DescripText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->TypeText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const01F8 );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const01F9 ));
  ViewsText_OnSetColor( &_this->TypeText, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescripText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->DescripText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::LogItem' */
void ApplicationLogItem__ReInit( ApplicationLogItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->DescripText );
  ViewsText__ReInit( &_this->TypeText );
}

/* Finalizer method for the class 'Application::LogItem' */
void ApplicationLogItem__Done( ApplicationLogItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationLogItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->DescripText );
  ViewsText__Done( &_this->TypeText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::LogItem' */
void ApplicationLogItem__Mark( ApplicationLogItem _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->DescripText );
  EwMarkObject( &_this->TypeText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationLogItem_UpdateLayout( ApplicationLogItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationLogItem_UpdateViewState( ApplicationLogItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::LogItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationLogItem )
EW_END_OF_CLASS_VARIANTS( ApplicationLogItem )

/* Virtual Method Table (VMT) for the class : 'Application::LogItem' */
EW_DEFINE_CLASS( ApplicationLogItem, CoreGroup, "Application::LogItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationLogItem_UpdateLayout,
  ApplicationLogItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationLogItem )

/* Initializer for the class 'Application::LEDPopup' */
void ApplicationLEDPopup__Init( ApplicationLEDPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationLEDPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01FA );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const01FB );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const01FC );
  WidgetSetToggleButton_OnSetLabelOn( &_this->ToggleButton, EwLoadString( &_Const01FD 
  ));
  WidgetSetToggleButton_OnSetLabelOff( &_this->ToggleButton, EwLoadString( &_Const01FE 
  ));
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const01FF 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0200 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const014A 
  ));
  CoreRectView__OnSetBounds( &_this->Text, _Const0201 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0202 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, ApplicationLEDPopup_Change 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, ApplicationLEDPopup_Change 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &ApplicationNotmalToggleButton, WidgetSetToggleButtonConfig ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationLEDPopup_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));

  /* Call the user defined constructor */
  ApplicationLEDPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::LEDPopup' */
void ApplicationLEDPopup__ReInit( ApplicationLEDPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'Application::LEDPopup' */
void ApplicationLEDPopup__Done( ApplicationLEDPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationLEDPopup );

  /* Finalize all embedded objects */
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::LEDPopup' */
void ApplicationLEDPopup__Mark( ApplicationLEDPopup _this )
{
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationLEDPopup_Init( ApplicationLEDPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  WidgetSetToggleButton_OnSetChecked( &_this->ToggleButton, 0 );
}

/* 'C' function for method : 'Application::LEDPopup.Close()' */
void ApplicationLEDPopup_Close( ApplicationLEDPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::LEDPopup.Change()' */
void ApplicationLEDPopup_Change( ApplicationLEDPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->ToggleButton.Checked )
  {
    ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0203 ));
    {
      Command cmd;
      cmd.int0 = 1;
       Command0( CMD_LEDS_TEST, &cmd );
    }
  }
  else
  {
    ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0202 ));
    {
      Command cmd;
      cmd.int0 = 0;
      Command0( CMD_LEDS_TEST, &cmd );
    }
  }
}

/* Variants derived from the class : 'Application::LEDPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationLEDPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationLEDPopup )

/* Virtual Method Table (VMT) for the class : 'Application::LEDPopup' */
EW_DEFINE_CLASS( ApplicationLEDPopup, ApplicationPopup, "Application::LEDPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationLEDPopup )

/* Initializer for the class 'Application::SystemPage' */
void ApplicationSystemPage__Init( ApplicationSystemPage _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText1, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  WidgetSetPushButtonConfig__Init( &_this->PushButtonConfig, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSystemPage );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0204 );
  CoreRectView__OnSetBounds( _this, _Const0205 );
  CoreRectView__OnSetBounds( &_this->Outline, _Const009C );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const009C );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const0206 );
  ViewsAttrText_OnSetAlignment( &_this->AttrText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const0207 ));
  ViewsAttrText_OnSetEmbedded( &_this->AttrText, 1 );
  CoreRectView__OnSetBounds( &_this->AttrText1, _Const0208 );
  ViewsAttrText_OnSetAlignment( &_this->AttrText1, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->AttrText1, EwLoadString( &_Const0209 ));
  ViewsAttrText_OnSetEmbedded( &_this->AttrText1, 1 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const0018 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( &_this->PushButtonConfig, _Const0018 
  );
  WidgetSetPushButtonConfig_OnSetIconTintDefault( &_this->PushButtonConfig, _Const020A 
  );
  WidgetSetPushButtonConfig_OnSetFaceTintActive( &_this->PushButtonConfig, _Const020B 
  );
  WidgetSetPushButtonConfig_OnSetFaceTintFocused( &_this->PushButtonConfig, _Const020C 
  );
  WidgetSetPushButtonConfig_OnSetFaceTintDisabled( &_this->PushButtonConfig, _Const020D 
  );
  WidgetSetPushButtonConfig_OnSetFaceTintDefault( &_this->PushButtonConfig, _Const020E 
  );
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( &_this->PushButtonConfig, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( &_this->PushButtonConfig, 2 
  );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( &_this->PushButtonConfig, 1 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->PushButton, _Const020F );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0210 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0211 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0212 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const0213 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0214 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const0215 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const0216 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, &_this->AttrSet );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText1, &_this->AttrSet );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdana16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationSystemPage_UpdateSlot );
  WidgetSetPushButtonConfig_OnSetLabelFont( &_this->PushButtonConfig, EwLoadResource( 
  &ApplicationFontVerdanaProSemiBold20, ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceActive( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonSmall, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonLarge, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonLarge, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonSmall, ResourcesBitmap ));
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationSystemPage_ScrollDragSlot 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationSystemPage_ViewLog 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNullSlot;
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNullSlot;
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  ApplicationSystemPage_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::SystemPage' */
void ApplicationSystemPage__ReInit( ApplicationSystemPage _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreOutline__ReInit( &_this->Outline );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsAttrText__ReInit( &_this->AttrText );
  ViewsAttrText__ReInit( &_this->AttrText1 );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  CoreTimer__ReInit( &_this->Timer );
  WidgetSetPushButtonConfig__ReInit( &_this->PushButtonConfig );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
}

/* Finalizer method for the class 'Application::SystemPage' */
void ApplicationSystemPage__Done( ApplicationSystemPage _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSystemPage );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreOutline__Done( &_this->Outline );
  ViewsBevel__Done( &_this->Bevel );
  ViewsAttrText__Done( &_this->AttrText );
  ViewsAttrText__Done( &_this->AttrText1 );
  GraphicsAttrSet__Done( &_this->AttrSet );
  CoreTimer__Done( &_this->Timer );
  WidgetSetPushButtonConfig__Done( &_this->PushButtonConfig );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton3 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SystemPage' */
void ApplicationSystemPage__Mark( ApplicationSystemPage _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->AttrText1 );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->PushButtonConfig );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton3 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationSystemPage_UpdateLayout( ApplicationSystemPage _this, XPoint aSize )
{
  XInt32 size;
  CoreView v;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, 360 );
  size = 0;
  v = _this->Super1.first;

  while ( v != 0 )
  {
    CoreGroup g = EwCastObject( v, CoreGroup );

    if ( g != 0 )
    {
      if ( CoreGroup_OnGetEmbedded( g ) && CoreGroup_OnGetVisible( g ))
      {
        size = size + EwGetRectH( g->Super1.Bounds );
      }
    }

    v = v->next;
  }

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, size );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationSystemPage_UpdateViewState( ApplicationSystemPage _this, XSet aState )
{
  XInt16 temp;
  XInt16 on_charge;
  XInt16 on_load;
  XInt16 off_load;
  XInt16 resistance;
  XInt16 status;
  XInt32 gsm_signal;
  XBool up_to_date;
  XInt32 vbacklight;
  XString fw;
  XString os;
  XString v;
  XString s;
  XString gsm;
  XString voltage;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  temp = 0;
  on_charge = 0;
  on_load = 0;
  off_load = 0;
  resistance = 0;
  status = 0;
  gsm_signal = -1;
  up_to_date = 0;
  vbacklight = 0;
  {
    Command c;

    Command0( CMD_GET_PSU_STATUS, &c );

    up_to_date  = c.short6;

    temp        = c.short0;
    on_charge   = c.short1;
    on_load     = c.short2;
    off_load    = c.short3;
    resistance  = c.short4;          
    status      = c.short5;

    Command0( CMD_GSM_SIGNAL_QUALITY, &c );

    gsm_signal = c.int0;

    Command0( CMD_GET_BACKLIGHT_VOLTAGE, &c );

    vbacklight = c.int0;
  }
  fw = EwNewStringFloat((XFloat)_this->fwversion / 100.000000f, 0, 2 );
  os = EwNewStringFloat((XFloat)_this->osversion / 100.000000f, 0, 2 );
  v = EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwLoadString( 
  &_Const0217 ), fw ), EwLoadString( &_Const0218 )), os ), EwLoadString( &_Const0219 
  ));
  ViewsAttrText_OnSetString( &_this->AttrText, v );
  s = 0;

  if ( !up_to_date )
  {
    s = EwLoadString( &_Const021A );
  }
  else
  {
    XString st = 0;
    XString off_load_str;
    XString resistance_str;

    switch ( status )
    {
      case 0 :
        st = EwLoadString( &_Const021B );
      break;

      case 1 :
        st = EwLoadString( &_Const021C );
      break;

      case 2 :
        st = EwLoadString( &_Const021D );
      break;

      case 3 :
        st = EwLoadString( &_Const021E );
      break;

      case 4 :
        st = EwLoadString( &_Const021F );
      break;
    }

    if ( resistance == 0 )
    {
      off_load_str = EwLoadString( &_Const0220 );
      resistance_str = EwLoadString( &_Const0220 );
    }
    else
    {
      off_load_str = EwConcatString( EwNewStringFloat((XFloat)off_load / 1000.000000f, 
      0, 2 ), EwLoadString( &_Const0221 ));
      resistance_str = EwConcatString( EwNewStringInt( resistance, 0, 10 ), EwLoadString( 
      &_Const0222 ));
    }

    s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwLoadString( &_Const0223 ), EwNewStringFloat((XFloat)temp 
    / 1000.000000f, 0, 2 )), EwLoadString( &_Const0224 )), EwLoadString( &_Const0225 
    )), EwNewStringFloat((XFloat)on_charge / 1000.000000f, 0, 2 )), EwLoadString( 
    &_Const0226 )), EwLoadString( &_Const0227 )), EwNewStringFloat((XFloat)on_load 
    / 1000.000000f, 0, 2 )), EwLoadString( &_Const0226 )), EwLoadString( &_Const0228 
    )), off_load_str ), EwLoadString( &_Const0229 )), EwLoadString( &_Const022A 
    )), resistance_str ), EwLoadString( &_Const0229 )), EwLoadString( &_Const022B 
    )), st ), EwLoadString( &_Const0229 ));
  }

  gsm = EwConcatString( EwNewStringInt( -115 + ( gsm_signal * 4 ), 0, 10 ), EwLoadString( 
  &_Const022C ));

  if ( gsm_signal == 0 )
  {
    gsm = EwConcatString( EwLoadString( &_Const022D ), gsm );
  }
  else
    if ( gsm_signal == 31 )
    {
      gsm = EwConcatString( EwLoadString( &_Const022E ), gsm );
    }
    else
      if ( gsm_signal == 99 )
      {
        gsm = EwLoadString( &_Const022F );
      }
      else
        if ( gsm_signal == -1 )
        {
          gsm = EwLoadString( &_Const0230 );
        }

  s = EwConcatString( EwConcatString( EwConcatString( s, EwLoadString( &_Const0231 
  )), gsm ), EwLoadString( &_Const0229 ));
  voltage = EwNewStringFloat((XFloat)vbacklight / 100.000000f, 0, 2 );
  s = EwConcatString( EwConcatString( EwConcatString( s, EwLoadString( &_Const0232 
  )), voltage ), EwLoadString( &_Const0226 ));
  ViewsAttrText_OnSetString( &_this->AttrText1, s );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationSystemPage_Init( ApplicationSystemPage _this, XHandle aArg )
{
  XInt32 fw_version;
  XInt32 os_version;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  fw_version = 100;
  os_version = 100;
  {
    Command c;

    Command0( CMD_GET_VERSION_NUMBERS, &c );

    fw_version = c.int0;
    os_version = c.int1;
  }
  _this->osversion = (XInt16)os_version;
  _this->fwversion = (XInt16)fw_version;
}

/* 'C' function for method : 'Application::SystemPage.ScrollDragSlot()' */
void ApplicationSystemPage_ScrollDragSlot( ApplicationSystemPage _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationSystemPage_ViewLog( ApplicationSystemPage _this, XObject sender )
{
  ApplicationPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  pop = ((ApplicationPopup)EwNewObject( ApplicationLogPopup, 0 ));
  ApplicationPopup_Show( pop, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::SystemPage.UpdateSlot()' */
void ApplicationSystemPage_UpdateSlot( ApplicationSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'Application::SystemPage' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSystemPage )
EW_END_OF_CLASS_VARIANTS( ApplicationSystemPage )

/* Virtual Method Table (VMT) for the class : 'Application::SystemPage' */
EW_DEFINE_CLASS( ApplicationSystemPage, CoreGroup, "Application::SystemPage" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationSystemPage_UpdateLayout,
  ApplicationSystemPage_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSystemPage )

/* Initializer for the class 'Application::Modify' */
void ApplicationModify__Init( ApplicationModify _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteLoadedEventHandler, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationModify );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  ViewsRectangle_OnSetAlphaBlended( &_this->Rectangle, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreRectView__OnSetBounds( _this, _Const009B );
  CoreGroup_OnSetAlphaBlended((CoreGroup)_this, 1 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0233 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const0234 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const0235 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0236 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0237 );
  CoreVerticalList_OnSetEndless( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 3 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationZoneToggle 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const0238 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const0239 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const023A );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationModify_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationModify_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SiteLoadedEventHandler.OnEvent = EwNewSlot( _this, ApplicationModify_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteLoadedEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->SiteLoadedEvent );
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationModify_ScrollDragSlot 
  );

  /* Call the user defined constructor */
  ApplicationModify_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Modify' */
void ApplicationModify__ReInit( ApplicationModify _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  CoreVerticalList__ReInit( &_this->VerticalList );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  CoreSystemEventHandler__ReInit( &_this->SiteLoadedEventHandler );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
}

/* Finalizer method for the class 'Application::Modify' */
void ApplicationModify__Done( ApplicationModify _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationModify );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  CoreVerticalList__Done( &_this->VerticalList );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  CoreSystemEventHandler__Done( &_this->SiteLoadedEventHandler );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Modify' */
void ApplicationModify__Mark( ApplicationModify _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->SiteLoadedEventHandler );
  EwMarkObject( &_this->SlideTouchHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationModify_UpdateLayout( ApplicationModify _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationModify_UpdateViewState( ApplicationModify _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationModify_Init( ApplicationModify _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, ApplicationModify_onEvent1 ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationModify_OnLoadItem( ApplicationModify _this, XObject sender )
{
  CoreVerticalList vlist = EwCastObject( sender, CoreVerticalList );
  XInt32 itemNo = vlist->Item;
  ApplicationZoneToggle item = EwCastObject( vlist->View, ApplicationZoneToggle 
    );
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  if ( item == 0 )
    return;

  curZone = 0;
  i = 0;
  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }
  numZones = numZones;

  while ( numZones > 0 )
  {
    XInt32 numdevs = 4;
    {
      Command cmd;

      cmd.int0 = curZone;
      Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
      numdevs = cmd.int0;
    }

    if ( numdevs > 0 )
    {
      numZones = numZones - 1;

      if ( itemNo == i )
      {
        item->ZoneNum = curZone;
        item->isDevice = 0;
        item->isZone = 1;
        CoreGroup_InvalidateViewState((CoreGroup)item );
        return;
      }
      else
      {
        i = i + 1;
      }

      if ( _this->zoneExpanded[ EwCheckIndex( curZone, 97 )])
      {
        if ( itemNo < ( numdevs + i ))
        {
          XInt32 dev = itemNo - i;
          XString location = EwLoadString( &_Const023B );
          XUInt16 unitno = (XUInt16)( dev + 1 );
          XUInt8 zoneno = curZone;
          {
            Command cmd;

            cmd.int0 = curZone;
            cmd.int1 = dev;
            Command0( CMD_GET_DEV_IN_ZONE, &cmd );
            DeviceConfig* dev = (DeviceConfig*) cmd.int0;

            if ( dev != NULL )
            {
              location = EwNewStringAnsi( dev->location );
              unitno = dev->unit;
              zoneno = dev->zone;
            }
          }
          item->isDevice = 1;
          item->isZone = 0;
          item->UnitNum = unitno;
          item->ZoneNum = zoneno;
          ViewsText_OnSetString( &item->DescriptionText, location );
          CoreGroup_InvalidateViewState((CoreGroup)item );
          return;
        }
        else
        {
          i = i + numdevs;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  item->isDevice = 0;
  item->isZone = 0;
  CoreVerticalList_OnSetNoOfItems( vlist, i );
  while ( 1 );
}

/* 'C' function for method : 'Application::Modify.ScrollDragSlot()' */
void ApplicationModify_ScrollDragSlot( ApplicationModify _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Modify.ScrollPressSlot()' */
void ApplicationModify_ScrollPressSlot( ApplicationModify _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VerticalList );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationModify_onEvent1( ApplicationModify _this, XObject sender )
{
  XInt32 numZones;
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }
  i = 0;

  for ( i = 0; i < 97; i = i + 1 )
  {
    _this->zoneExpanded[ EwCheckIndex( i, 97 )] = 0;
  }

  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numZones );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numZones - 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VertScrollbar );
}

/* Variants derived from the class : 'Application::Modify' */
EW_DEFINE_CLASS_VARIANTS( ApplicationModify )
EW_END_OF_CLASS_VARIANTS( ApplicationModify )

/* Virtual Method Table (VMT) for the class : 'Application::Modify' */
EW_DEFINE_CLASS( ApplicationModify, CoreGroup, "Application::Modify" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationModify_UpdateLayout,
  ApplicationModify_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationModify )

/* Initializer for the class 'Application::ModifyPopup' */
void ApplicationModifyPopup__Init( ApplicationModifyPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationMattsKeyboard__Init( &_this->MattsKeyboard, &_this->_XObject, 0 );
  ApplicationWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->InputChanButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->OutputChanButton, &_this->_XObject, 0 );
  ApplicationDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationModifyPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const023C );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle, _Const023D );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle1, _Const023E );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle2, _Const023F );
  CoreView_OnSetLayout((CoreView)&_this->Super1.Rectangle4, CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle4, _Const0240 );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle5, _Const0241 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle6, _Const0242 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle8, _Const0243 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle3, _Const0244 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const0245 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle3, 0 );
  CoreRectView__OnSetBounds( &_this->MattsKeyboard, _Const0246 );
  CoreRectView__OnSetBounds( &_this->Writable, _Const0247 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Writable, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0248 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0249 ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const024A );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0165 
  ));
  CoreRectView__OnSetBounds( &_this->InputChanButton, _Const024B );
  WidgetSetPushButton_OnSetLabel( &_this->InputChanButton, EwLoadString( &_Const024C 
  ));
  CoreRectView__OnSetBounds( &_this->OutputChanButton, _Const024D );
  WidgetSetPushButton_OnSetLabel( &_this->OutputChanButton, EwLoadString( &_Const024E 
  ));
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const024F );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0250 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0163 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->MattsKeyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputChanButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputChanButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__OnSetFocus( &_this->Writable, 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationModifyPopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->InputChanButton.OnRelease = EwNewSlot( _this, ApplicationModifyPopup_InputChannels 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->InputChanButton, EwGetAutoObject( 
  &ApplicationNormalPushButton, WidgetSetPushButtonConfig ));
  _this->OutputChanButton.OnRelease = EwNewSlot( _this, ApplicationModifyPopup_OutputChannels 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->OutputChanButton, EwGetAutoObject( 
  &ApplicationNormalPushButton, WidgetSetPushButtonConfig ));
  _this->DropDownMenu.onSelection = EwNewSlot( _this, ApplicationModifyPopup_SetZoneSlot 
  );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, ApplicationModifyPopup_FillMenu 
  );
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationModifyPopup_ProceedSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  ApplicationModifyPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::ModifyPopup' */
void ApplicationModifyPopup__ReInit( ApplicationModifyPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationMattsKeyboard__ReInit( &_this->MattsKeyboard );
  ApplicationWritable__ReInit( &_this->Writable );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->InputChanButton );
  WidgetSetPushButton__ReInit( &_this->OutputChanButton );
  ApplicationDropDownMenu__ReInit( &_this->DropDownMenu );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
}

/* Finalizer method for the class 'Application::ModifyPopup' */
void ApplicationModifyPopup__Done( ApplicationModifyPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationModifyPopup );

  /* Finalize all embedded objects */
  ApplicationMattsKeyboard__Done( &_this->MattsKeyboard );
  ApplicationWritable__Done( &_this->Writable );
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->InputChanButton );
  WidgetSetPushButton__Done( &_this->OutputChanButton );
  ApplicationDropDownMenu__Done( &_this->DropDownMenu );
  WidgetSetPushButton__Done( &_this->PushButton1 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ModifyPopup' */
void ApplicationModifyPopup__Mark( ApplicationModifyPopup _this )
{
  EwMarkObject( &_this->MattsKeyboard );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->InputChanButton );
  EwMarkObject( &_this->OutputChanButton );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( _this->device );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationModifyPopup_Init( ApplicationModifyPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* 'C' function for method : 'Application::ModifyPopup.ProceedSlot()' */
void ApplicationModifyPopup_ProceedSlot( ApplicationModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwRetainString( &_this->device->location, _this->Writable.TextEditor.Text.String 
  );
  ApplicationLibClass_SetConfig( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), _this->device->unitnum, _this->device );
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ModifyPopup.InputChannels()' */
void ApplicationModifyPopup_InputChannels( ApplicationModifyPopup _this, XObject 
  sender )
{
  ApplicationInputChannels inputs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  inputs = EwNewObject( ApplicationInputChannels, 0 );
  inputs->device = _this->device;
  ApplicationInputChannels_OnSetChanIndex( inputs, 0 );
  ApplicationPopup_Show((ApplicationPopup)inputs, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::ModifyPopup.OutputChannels()' */
void ApplicationModifyPopup_OutputChannels( ApplicationModifyPopup _this, XObject 
  sender )
{
  ApplicationOutputChannels outputs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  outputs = EwNewObject( ApplicationOutputChannels, 0 );
  outputs->device = _this->device;
  ApplicationOutputChannels_OnSetChanIndex( outputs, 0 );
  ApplicationPopup_Show((ApplicationPopup)outputs, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::ModifyPopup.SetZoneSlot()' */
void ApplicationModifyPopup_SetZoneSlot( ApplicationModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->device != 0 )
  {
    _this->device->zonenum = (XInt16)((XUInt8)_this->DropDownMenu.VerticalList.SelectedItem 
    + 1 );
  }
}

/* 'C' function for method : 'Application::ModifyPopup.FillMenu()' */
void ApplicationModifyPopup_FillMenu( ApplicationModifyPopup _this, XObject sender )
{
  ApplicationDropDownMenu menu;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  menu = EwCastObject( sender, ApplicationDropDownMenu );
  EwRetainString( &menu->itemName, EwConcatString( EwLoadString( &_Const00A5 ), 
  EwNewStringInt( menu->itemIndex + 1, 0, 10 )));
}

/* 'C' function for method : 'Application::ModifyPopup.CancelSlot()' */
void ApplicationModifyPopup_CancelSlot( ApplicationModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ModifyPopup.OnSetdevice()' */
void ApplicationModifyPopup_OnSetdevice( ApplicationModifyPopup _this, ApplicationDeviceConfig 
  value )
{
  _this->device = value;

  if ( _this->device != 0 )
  {
    ApplicationDropDownMenu_OnSetnumItems( &_this->DropDownMenu, (XUInt8)ApplicationLibClass_NumZones( 
    EwGetAutoObject( &ApplicationLib, ApplicationLibClass )));
    CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, _this->device->zonenum 
    - 1 );
    ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, EwConcatString( 
    EwLoadString( &_Const00A5 ), EwNewStringInt( _this->device->zonenum, 0, 10 )));
    ApplicationTextEditor_OnSetString( &_this->Writable.TextEditor, _this->device->location 
    );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->InputChanButton, (XBool)( ApplicationLibClass_NumInputChannels( 
    EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), _this->device->unitnum 
    ) != 0 ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputChanButton, (XBool)( ApplicationLibClass_NumOutputChannels( 
    EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), _this->device->unitnum 
    ) != 0 ));
  }
}

/* 'C' function for method : 'Application::ModifyPopup.SetFocus()' */
void ApplicationModifyPopup_SetFocus( ApplicationModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* Variants derived from the class : 'Application::ModifyPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationModifyPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationModifyPopup )

/* Virtual Method Table (VMT) for the class : 'Application::ModifyPopup' */
EW_DEFINE_CLASS( ApplicationModifyPopup, ApplicationPopup, "Application::ModifyPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationModifyPopup )

/* Initializer for the class 'Application::TestPopup' */
void ApplicationTestPopup__Init( ApplicationTestPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationTest__Init( &_this->Test, &_this->_XObject, 0 );
  FlatActionButton__Init( &_this->Cancel, &_this->_XObject, 0 );
  FlatActionButton__Init( &_this->Proceed, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTestPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0251 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle3, 0 );
  CoreRectView__OnSetBounds( &_this->Test, _Const0252 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Test, 1 );
  CoreRectView__OnSetBounds( &_this->Cancel, _Const0253 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Cancel, 0 );
  FlatActionButton_OnSetCaption( &_this->Cancel, EwLoadString( &_Const0165 ));
  CoreRectView__OnSetBounds( &_this->Proceed, _Const0254 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Proceed, 0 );
  FlatActionButton_OnSetCaption( &_this->Proceed, EwLoadString( &_Const0163 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Test ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Cancel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Proceed ), 0 );
  _this->Cancel.OnAction = EwNewSlot( _this, ApplicationTestPopup_CancelSlot );
  _this->Proceed.OnAction = EwNewSlot( _this, ApplicationTestPopup_ProceedSlot );
}

/* Re-Initializer for the class 'Application::TestPopup' */
void ApplicationTestPopup__ReInit( ApplicationTestPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationTest__ReInit( &_this->Test );
  FlatActionButton__ReInit( &_this->Cancel );
  FlatActionButton__ReInit( &_this->Proceed );
}

/* Finalizer method for the class 'Application::TestPopup' */
void ApplicationTestPopup__Done( ApplicationTestPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTestPopup );

  /* Finalize all embedded objects */
  ApplicationTest__Done( &_this->Test );
  FlatActionButton__Done( &_this->Cancel );
  FlatActionButton__Done( &_this->Proceed );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TestPopup' */
void ApplicationTestPopup__Mark( ApplicationTestPopup _this )
{
  EwMarkObject( &_this->Test );
  EwMarkObject( &_this->Cancel );
  EwMarkObject( &_this->Proceed );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::TestPopup.CancelSlot()' */
void ApplicationTestPopup_CancelSlot( ApplicationTestPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::TestPopup.ProceedSlot()' */
void ApplicationTestPopup_ProceedSlot( ApplicationTestPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Variants derived from the class : 'Application::TestPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTestPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationTestPopup )

/* Virtual Method Table (VMT) for the class : 'Application::TestPopup' */
EW_DEFINE_CLASS( ApplicationTestPopup, ApplicationPopup, "Application::TestPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTestPopup )

/* Initializer for the class 'Application::DisablePopup' */
void ApplicationDisablePopup__Init( ApplicationDisablePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationEnableDisable__Init( &_this->EnableDisable, &_this->_XObject, 0 );
  FlatActionButton__Init( &_this->ActionButton, &_this->_XObject, 0 );
  FlatActionButton__Init( &_this->ActionButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisablePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0255 );
  CoreRectView__OnSetBounds( &_this->EnableDisable, _Const0256 );
  CoreRectView__OnSetBounds( &_this->ActionButton, _Const0257 );
  FlatActionButton_OnSetCaption( &_this->ActionButton, EwLoadString( &_Const0163 
  ));
  CoreRectView__OnSetBounds( &_this->ActionButton1, _Const0258 );
  FlatActionButton_OnSetCaption( &_this->ActionButton1, EwLoadString( &_Const0165 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->EnableDisable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ActionButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ActionButton1 ), 0 );
  _this->ActionButton.OnAction = EwNewSlot( _this, ApplicationDisablePopup_ProceedSlot 
  );
  _this->ActionButton1.OnAction = EwNewSlot( _this, ApplicationDisablePopup_CancelSlot 
  );
}

/* Re-Initializer for the class 'Application::DisablePopup' */
void ApplicationDisablePopup__ReInit( ApplicationDisablePopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationEnableDisable__ReInit( &_this->EnableDisable );
  FlatActionButton__ReInit( &_this->ActionButton );
  FlatActionButton__ReInit( &_this->ActionButton1 );
}

/* Finalizer method for the class 'Application::DisablePopup' */
void ApplicationDisablePopup__Done( ApplicationDisablePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisablePopup );

  /* Finalize all embedded objects */
  ApplicationEnableDisable__Done( &_this->EnableDisable );
  FlatActionButton__Done( &_this->ActionButton );
  FlatActionButton__Done( &_this->ActionButton1 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisablePopup' */
void ApplicationDisablePopup__Mark( ApplicationDisablePopup _this )
{
  EwMarkObject( &_this->EnableDisable );
  EwMarkObject( &_this->ActionButton );
  EwMarkObject( &_this->ActionButton1 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::DisablePopup.ProceedSlot()' */
void ApplicationDisablePopup_ProceedSlot( ApplicationDisablePopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::DisablePopup.CancelSlot()' */
void ApplicationDisablePopup_CancelSlot( ApplicationDisablePopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Variants derived from the class : 'Application::DisablePopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisablePopup )
EW_END_OF_CLASS_VARIANTS( ApplicationDisablePopup )

/* Virtual Method Table (VMT) for the class : 'Application::DisablePopup' */
EW_DEFINE_CLASS( ApplicationDisablePopup, ApplicationPopup, "Application::DisablePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisablePopup )

/* Initializer for the class 'Application::PhoneNumber' */
void ApplicationPhoneNumber__Init( ApplicationPhoneNumber _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton1, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton2, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton3, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton4, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton5, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton6, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton7, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationPhoneNumber );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0259 );
  CoreRectView__OnSetBounds( &_this->Text, _Const025A );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const025B ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const025C );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton1, _Const025D );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton1, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton2, _Const025E );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton2, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton3, _Const025F );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton3, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton4, _Const0260 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton4, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton5, _Const0261 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton5, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton6, _Const0262 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton6, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton7, _Const0263 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton7, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton7 ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton1, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton2, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton3, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton4, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton5, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton6, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton7, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::PhoneNumber' */
void ApplicationPhoneNumber__ReInit( ApplicationPhoneNumber _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton1 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton2 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton3 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton4 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton5 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton6 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton7 );
}

/* Finalizer method for the class 'Application::PhoneNumber' */
void ApplicationPhoneNumber__Done( ApplicationPhoneNumber _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationPhoneNumber );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  WidgetSetToggleButton__Done( &_this->ToggleButton1 );
  WidgetSetToggleButton__Done( &_this->ToggleButton2 );
  WidgetSetToggleButton__Done( &_this->ToggleButton3 );
  WidgetSetToggleButton__Done( &_this->ToggleButton4 );
  WidgetSetToggleButton__Done( &_this->ToggleButton5 );
  WidgetSetToggleButton__Done( &_this->ToggleButton6 );
  WidgetSetToggleButton__Done( &_this->ToggleButton7 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::PhoneNumber' */
void ApplicationPhoneNumber__Mark( ApplicationPhoneNumber _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->ToggleButton1 );
  EwMarkObject( &_this->ToggleButton2 );
  EwMarkObject( &_this->ToggleButton3 );
  EwMarkObject( &_this->ToggleButton4 );
  EwMarkObject( &_this->ToggleButton5 );
  EwMarkObject( &_this->ToggleButton6 );
  EwMarkObject( &_this->ToggleButton7 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationPhoneNumber_UpdateLayout( ApplicationPhoneNumber _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationPhoneNumber_UpdateViewState( ApplicationPhoneNumber _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::PhoneNumber' */
EW_DEFINE_CLASS_VARIANTS( ApplicationPhoneNumber )
EW_END_OF_CLASS_VARIANTS( ApplicationPhoneNumber )

/* Virtual Method Table (VMT) for the class : 'Application::PhoneNumber' */
EW_DEFINE_CLASS( ApplicationPhoneNumber, CoreGroup, "Application::PhoneNumber" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPhoneNumber_UpdateLayout,
  ApplicationPhoneNumber_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationPhoneNumber )

/* Initializer for the class 'Application::TextPopup' */
void ApplicationTextPopup__Init( ApplicationTextPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text8, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text9, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text10, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text11, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTextPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0264 );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle4, _Const01AF );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const015F );
  CoreRectView__OnSetBounds( &_this->Text, _Const0265 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01F1 ));
  ViewsText_OnSetColor( &_this->Text, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0266 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0267 ));
  ViewsText_OnSetColor( &_this->Text1, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text3, _Const0268 );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const003D ));
  ViewsText_OnSetColor( &_this->Text3, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text5, _Const0269 );
  ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const026A ));
  ViewsText_OnSetColor( &_this->Text5, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text8, _Const026B );
  ViewsText_OnSetString( &_this->Text8, EwLoadString( &_Const026C ));
  ViewsText_OnSetColor( &_this->Text8, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text9, _Const026D );
  ViewsText_OnSetString( &_this->Text9, EwLoadString( &_Const026E ));
  ViewsText_OnSetColor( &_this->Text9, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text10, _Const026F );
  ViewsText_OnSetString( &_this->Text10, EwLoadString( &_Const01F0 ));
  ViewsText_OnSetColor( &_this->Text10, _Const01AF );
  CoreRectView__OnSetBounds( &_this->Text11, _Const0270 );
  ViewsText_OnSetString( &_this->Text11, EwLoadString( &_Const0271 ));
  ViewsText_OnSetColor( &_this->Text11, _Const01AF );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0272 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationPhoneNumber 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0273 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const014A 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text8, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text9, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text10, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text11, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationTextPopup_OnLoadItem 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationTextPopup_ClosePopup 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::TextPopup' */
void ApplicationTextPopup__ReInit( ApplicationTextPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text3 );
  ViewsText__ReInit( &_this->Text5 );
  ViewsText__ReInit( &_this->Text8 );
  ViewsText__ReInit( &_this->Text9 );
  ViewsText__ReInit( &_this->Text10 );
  ViewsText__ReInit( &_this->Text11 );
  CoreVerticalList__ReInit( &_this->VerticalList );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'Application::TextPopup' */
void ApplicationTextPopup__Done( ApplicationTextPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTextPopup );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text3 );
  ViewsText__Done( &_this->Text5 );
  ViewsText__Done( &_this->Text8 );
  ViewsText__Done( &_this->Text9 );
  ViewsText__Done( &_this->Text10 );
  ViewsText__Done( &_this->Text11 );
  CoreVerticalList__Done( &_this->VerticalList );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TextPopup' */
void ApplicationTextPopup__Mark( ApplicationTextPopup _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->Text8 );
  EwMarkObject( &_this->Text9 );
  EwMarkObject( &_this->Text10 );
  EwMarkObject( &_this->Text11 );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationTextPopup_OnLoadItem( ApplicationTextPopup _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwConcatString( EwLoadString( &_Const0274 ), 
  EwNewStringInt( itemNo, 0, 10 )));
  ViewsText_OnSetFont( itemView, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000A );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));
}

/* 'C' function for method : 'Application::TextPopup.ClosePopup()' */
void ApplicationTextPopup_ClosePopup( ApplicationTextPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Variants derived from the class : 'Application::TextPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTextPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationTextPopup )

/* Virtual Method Table (VMT) for the class : 'Application::TextPopup' */
EW_DEFINE_CLASS( ApplicationTextPopup, ApplicationPopup, "Application::TextPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTextPopup )

/* Font resource : 'Application::FontVerdanaProSemiBold18' */
EW_DEFINE_FONT_RES( ApplicationFontVerdanaProSemiBold18, 15, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -11, 13, 11, 15, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x00000115 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -11, 4, 11, 6, 0x00000115 ),             /* '!' */
  EW_GLYPH( 0x0022, 1, -12, 6, 5, 8, 0x0000017F ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -11, 11, 11, 13, 0x000001EA ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -12, 9, 15, 10, 0x000003A0 ),            /* '$' */
  EW_GLYPH( 0x0025, 1, -11, 16, 11, 17, 0x0000056E ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -11, 13, 11, 12, 0x000007D9 ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -12, 3, 5, 5, 0x000009D3 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -12, 6, 15, 7, 0x00000A05 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -12, 6, 15, 7, 0x00000B09 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -12, 8, 7, 10, 0x00000C02 ),             /* '*' */
  EW_GLYPH( 0x002B, 1, -10, 11, 10, 13, 0x00000CE9 ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -2, 5, 5, 6, 0x00000DEA ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -6, 6, 2, 7, 0x00000E37 ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -2, 3, 2, 6, 0x00000E69 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -12, 8, 14, 8, 0x00000E83 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -11, 10, 11, 10, 0x00000F93 ),           /* '0' */
  EW_GLYPH( 0x0031, 1, -11, 8, 11, 10, 0x000010E7 ),            /* '1' */
  EW_GLYPH( 0x0032, 0, -11, 9, 11, 10, 0x000011A0 ),            /* '2' */
  EW_GLYPH( 0x0033, 0, -11, 9, 11, 10, 0x000012F3 ),            /* '3' */
  EW_GLYPH( 0x0034, 0, -11, 10, 11, 10, 0x0000146F ),           /* '4' */
  EW_GLYPH( 0x0035, 1, -11, 8, 11, 10, 0x000015A4 ),            /* '5' */
  EW_GLYPH( 0x0036, 0, -11, 10, 11, 10, 0x000016FA ),           /* '6' */
  EW_GLYPH( 0x0037, 0, -11, 10, 11, 10, 0x00001874 ),           /* '7' */
  EW_GLYPH( 0x0038, 0, -11, 10, 11, 10, 0x000019A8 ),           /* '8' */
  EW_GLYPH( 0x0039, 0, -11, 10, 11, 10, 0x00001B43 ),           /* '9' */
  EW_GLYPH( 0x003A, 2, -8, 3, 8, 6, 0x00001CD1 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -8, 5, 11, 6, 0x00001D20 ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -9, 10, 9, 13, 0x00001DAD ),             /* '<' */
  EW_GLYPH( 0x003D, 1, -7, 10, 5, 13, 0x00001EFF ),             /* '=' */
  EW_GLYPH( 0x003E, 1, -9, 10, 9, 13, 0x00002000 ),             /* '>' */
  EW_GLYPH( 0x003F, 1, -11, 7, 11, 9, 0x0000214C ),             /* '?' */
  EW_GLYPH( 0x0040, 1, -11, 13, 13, 15, 0x0000223B ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -11, 11, 11, 11, 0x000024BE ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -11, 9, 11, 10, 0x0000262A ),            /* 'B' */
  EW_GLYPH( 0x0043, 0, -11, 11, 11, 11, 0x00002787 ),           /* 'C' */
  EW_GLYPH( 0x0044, 1, -11, 11, 11, 12, 0x000028F6 ),           /* 'D' */
  EW_GLYPH( 0x0045, 1, -11, 9, 11, 10, 0x00002A3B ),            /* 'E' */
  EW_GLYPH( 0x0046, 1, -11, 8, 11, 9, 0x00002B81 ),             /* 'F' */
  EW_GLYPH( 0x0047, 0, -11, 11, 11, 12, 0x00002C76 ),           /* 'G' */
  EW_GLYPH( 0x0048, 1, -11, 10, 11, 12, 0x00002E10 ),           /* 'H' */
  EW_GLYPH( 0x0049, 1, -11, 6, 11, 8, 0x00002EE4 ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -11, 7, 11, 8, 0x00002F91 ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -11, 11, 11, 11, 0x00003050 ),           /* 'K' */
  EW_GLYPH( 0x004C, 1, -11, 8, 11, 9, 0x00003195 ),             /* 'L' */
  EW_GLYPH( 0x004D, 1, -11, 12, 11, 14, 0x0000322D ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -11, 10, 11, 12, 0x0000336B ),           /* 'N' */
  EW_GLYPH( 0x004F, 0, -11, 12, 11, 12, 0x00003463 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -11, 9, 11, 10, 0x0000360F ),            /* 'P' */
  EW_GLYPH( 0x0051, 0, -11, 12, 14, 12, 0x00003726 ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -11, 11, 11, 11, 0x0000393E ),           /* 'R' */
  EW_GLYPH( 0x0053, 0, -11, 10, 11, 10, 0x00003A9D ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -11, 10, 11, 10, 0x00003C4A ),           /* 'T' */
  EW_GLYPH( 0x0055, 1, -11, 10, 11, 11, 0x00003D28 ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -11, 11, 11, 11, 0x00003E1B ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -11, 16, 11, 15, 0x00003F78 ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -11, 11, 11, 11, 0x0000416C ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -11, 11, 11, 10, 0x000042F8 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -11, 10, 11, 10, 0x0000441D ),           /* 'Z' */
  EW_GLYPH( 0x005B, 1, -12, 6, 15, 8, 0x00004591 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -12, 8, 14, 8, 0x00004640 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -12, 5, 15, 8, 0x00004750 ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -11, 11, 6, 13, 0x000047E8 ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 11, 2, 10, 0x000048B7 ),              /* '_' */
  EW_GLYPH( 0x0060, 3, -12, 4, 3, 10, 0x00004930 ),             /* '`' */
  EW_GLYPH( 0x0061, 0, -8, 9, 8, 9, 0x0000495E ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -12, 9, 12, 10, 0x00004A88 ),            /* 'b' */
  EW_GLYPH( 0x0063, 0, -8, 8, 8, 8, 0x00004B91 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -12, 9, 12, 10, 0x00004C86 ),            /* 'd' */
  EW_GLYPH( 0x0065, 0, -8, 9, 8, 9, 0x00004D91 ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -12, 7, 12, 6, 0x00004ED1 ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -8, 9, 11, 10, 0x00004FB0 ),             /* 'g' */
  EW_GLYPH( 0x0068, 1, -12, 8, 12, 10, 0x00005100 ),            /* 'h' */
  EW_GLYPH( 0x0069, 1, -11, 3, 11, 5, 0x000051BE ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -11, 6, 14, 6, 0x00005215 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -12, 9, 12, 9, 0x000052EB ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -12, 3, 12, 5, 0x000053F7 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -8, 13, 8, 15, 0x0000542A ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -8, 8, 8, 10, 0x0000552F ),              /* 'n' */
  EW_GLYPH( 0x006F, 0, -8, 10, 8, 10, 0x000055C6 ),             /* 'o' */
  EW_GLYPH( 0x0070, 1, -8, 9, 11, 10, 0x000056D3 ),             /* 'p' */
  EW_GLYPH( 0x0071, 0, -8, 9, 11, 10, 0x000057E3 ),             /* 'q' */
  EW_GLYPH( 0x0072, 1, -8, 6, 8, 7, 0x000058F3 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -8, 8, 8, 8, 0x00005961 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -10, 7, 10, 6, 0x00005A92 ),             /* 't' */
  EW_GLYPH( 0x0075, 1, -8, 8, 8, 10, 0x00005B56 ),              /* 'u' */
  EW_GLYPH( 0x0076, 0, -8, 10, 8, 9, 0x00005BEA ),              /* 'v' */
  EW_GLYPH( 0x0077, 0, -8, 13, 8, 13, 0x00005CE2 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -8, 10, 8, 9, 0x00005E4E ),              /* 'x' */
  EW_GLYPH( 0x0079, 0, -8, 9, 11, 9, 0x00005F6B ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -8, 9, 8, 9, 0x0000608F ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -12, 8, 15, 10, 0x0000619E ),            /* '{' */
  EW_GLYPH( 0x007C, 2, -12, 3, 15, 7, 0x000062D9 ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -12, 8, 15, 10, 0x00006314 ),            /* '}' */
  EW_GLYPH( 0x007E, 1, -7, 11, 5, 13, 0x0000644C ),             /* '~' */

  EW_FONT_PIXEL( ApplicationFontVerdanaProSemiBold18, 0x00006525 )/* ratio 74.67 % */
    0xF7BDEF71, 0x0DEF7BDE, 0xF7BDEF79, 0x00137BDE, 0x00000000, 0x00000000, 0x80000000,
    0x7BDEF7BC, 0xEE29BDEF, 0xA400011D, 0x57FE1004, 0xA643FFFC, 0xFB9E7DDF, 0xB04619A5,
    0x10832B9C, 0xA97FC243, 0x3D87220B, 0xF0A32940, 0x6B7B9FBF, 0xE5FBC7DD, 0xB7EF2DF3,
    0x18FBE554, 0x5E7AC9F3, 0x49EB53CF, 0x6FDE5BF7, 0xDDF8F7D4, 0x7B8BFBEC, 0x3F659117,
    0x01A862A0, 0xC0003EF0, 0x7FFBF3DA, 0x6A35EBE9, 0xFC678AD5, 0x229DF39E, 0xD8AC4407,
    0xF7A2BFB3, 0x16FCF1CA, 0xF3F7EBA3, 0xF621E033, 0xDFCE7BFF, 0x78D66B1B, 0xBFD1EFD6,
    0x02BF7F33, 0x9CEF8000, 0xD01DD60F, 0x134F5ACF, 0x7CA80D6F, 0x68DE2CDF, 0xCC439810,
    0x1CC08067, 0xF7FEBA3A, 0x37DF2A5F, 0xBE33D72B, 0xB3F45F68, 0xBD3FD3D6, 0x78BF5DE2,
    0x397CE77C, 0x08698657, 0xA613F1D0, 0x333C6021, 0x2FD778AD, 0x8978E81E, 0x982FB45F,
    0x015F9EFB, 0xAEBF1BCF, 0x3556C12F, 0x2AD81633, 0xCF0288C6, 0xD9FFFFCC, 0x370D2201,
    0x5FE1FDD7, 0x821EF9FD, 0xF7F3E61C, 0x3283367D, 0xE22C6676, 0x6FD77BF1, 0xAF83FC44,
    0xDF4FBE73, 0xEEFCEC67, 0x9131C61C, 0x30FFBE92, 0xCD70DC56, 0xFCBC4634, 0x31B0C13C,
    0x62609825, 0x3F1B0C4A, 0xBC46304F, 0x15A93368, 0x07FDD637, 0xBF0FC9EB, 0x8BA622A8,
    0x8508C29F, 0xC3000021, 0x3E0C4464, 0x5F872C45, 0x7E4F5954, 0x5B30B7E0, 0x633C6F88,
    0xFC62DEC7, 0x72FEAA9E, 0xF7EAAAFC, 0xB1FE33E5, 0x885B39AF, 0x03FFA0AF, 0x00001220,
    0x77BDCF00, 0x88DEF7DA, 0xAAA34AAA, 0x2BF7EFD4, 0x05FBF7F7, 0x7B000000, 0x196E7006,
    0xF6694A31, 0x7B979E28, 0x9991BDEF, 0xECAD6299, 0xE0BEE306, 0x16660FE7, 0x3FC0F8CC,
    0xC0556426, 0x059980E7, 0xC4E07C4F, 0xF80AAC84, 0xC164F01C, 0xF9E01F93, 0xA81BF3DD,
    0xFEA7A9EF, 0x6FDFEB49, 0xF1618FC6, 0x4A609257, 0x0C020601, 0x0C94C924, 0xEAF15FC5,
    0xE3F19EDF, 0xFACA9EF9, 0x906FFC27, 0x1AD613BD, 0x0007B9E0, 0x00000000, 0xFBE3EFD4,
    0x15515455, 0xF3DCEF9E, 0xF48CFD05, 0xFFFD9E6C, 0xC1E965FF, 0x0510C020, 0x1BF019AE,
    0xD55F88D5, 0xFD6BB90F, 0xFC633B10, 0x8857BF7E, 0xBF32AAAA, 0xC9BF3DFF, 0xDEB2A2AF,
    0x6FF777E9, 0x30337F4F, 0x9FBBD40C, 0x88E631A7, 0x5FE75811, 0xABC883F3, 0x7D2D81E2,
    0xD3DBF7E7, 0x953E562F, 0xEFB04DF5, 0xC00DF80F, 0xCD602CFB, 0x7BA781FE, 0x0B9BF182,
    0xBBDE62F8, 0x554E7DD5, 0xEB1510D5, 0xAEFDFBF7, 0x000057E7, 0xF7BDEEB0, 0x55591FDE,
    0xBF7EF835, 0x7801AFDF, 0x3C53DDEF, 0x7B78D573, 0xD7BFDD7E, 0xF81E2504, 0xEF7CEF8C,
    0xA9FB715E, 0xE07FCF99, 0x1FFB9DF9, 0x66A7BEF8, 0xBF793E60, 0x3A7E0F77, 0xBEFFA440,
    0x96AA49A7, 0xFEEEC1F5, 0x0F04113C, 0x223C5872, 0x9FDBF474, 0x6B3FFA97, 0xF712DF3E,
    0xBDEF7BDE, 0x06AAAAA1, 0xFDFBF7E2, 0x6013CB7E, 0xAD703454, 0x0688CF04, 0x33300CDA,
    0xD02F681A, 0xF4C40B91, 0xEF7DAC03, 0x9F3B785E, 0xFA65FB27, 0x1167EFBE, 0x17E1E136,
    0xBD6FDFEB, 0x256313D4, 0xBE77EBFC, 0x7C8D5751, 0x460E5B3C, 0xD88D4490, 0xFF4CD7DD,
    0xFBC66B15, 0x7E7BEE62, 0xF3E6FD03, 0xE5C87FD4, 0x5A2B7EFB, 0x060A7C50, 0xFFC31883,
    0x7FF0FF7D, 0x2111E7CC, 0xF1F773BE, 0x7975E300, 0x1FEFEF7E, 0x3E6788AB, 0x7DEE6BF5,
    0x4AD6BDD0, 0x0BDD95AC, 0xBA00FBDC, 0x00256B17, 0x188C3B9C, 0x28F66943, 0xEB1005EA,
    0x4EDDF505, 0xCF7FFD62, 0xBDF2FDF3, 0xC7BFFFAD, 0x57FCF19A, 0xA73C56A2, 0xF7CFA207,
    0x3C27BDAC, 0xFDF33DBF, 0xCEDEF181, 0x7BDEF7B8, 0x739BFDEF, 0x7CE739CE, 0xF7DF7DE2,
    0xE3B7DF7D, 0x7DF7DF7D, 0x39CDB7DF, 0x3E739CE7, 0xEA007BF1, 0xF880AFFB, 0x81BF7D2F,
    0x9EAFFFEC, 0xF7D427BD, 0x78C2F1CF, 0xF58B6677, 0xFEF9F3DF, 0xFF5B4E2B, 0xFEFA83DF,
    0xE77EB09D, 0x9E7BE5EE, 0x7E73EECA, 0x581CCFBF, 0xDD64DA20, 0x2FDB4D9A, 0x0FF7018C,
    0xC0006F71, 0xFCF7FEF8, 0xFFFEB01E, 0xFDFFF673, 0x8D7B7D61, 0xF27DB9C8, 0xD9CEB93D,
    0xCF95BC77, 0x0B1E9E33, 0xBB7B3CF9, 0x0F22FBEE, 0x096004A6, 0x7F6C6230, 0x19E7F7FF,
    0x731ABFB5, 0xCEEF2D66, 0x3DE379CA, 0xBBDEF7FF, 0x333B9F79, 0xDFBC02B2, 0x00F767DE,
    0x501FEFFC, 0x4BF80B29, 0xB1CB107F, 0x151A8AC0, 0xBF8EFE13, 0x2CA2B23F, 0xDCE27C95,
    0x99E3C7C3, 0x65479673, 0x7EFBEF7C, 0x882C7591, 0xDEF7BCE5, 0x640DFFFB, 0xDF07FA95,
    0x0917F7EF, 0x7BE8391E, 0xEEA83CBF, 0x5EC5FE39, 0x81A37DEB, 0xE0CF8032, 0x7A7BBEF7,
    0xFD667319, 0xDCEFD41E, 0x5FE85BF3, 0x3C3D51C9, 0x7FFF9F4B, 0x6167AF17, 0x02E186FC,
    0x26080982, 0x5E0170C0, 0xC3BE42CF, 0xFDF9F4B3, 0x2BFD13FF, 0x7BC6F9E5, 0x2DFBBDEF,
    0xFE723590, 0x3EDFA85E, 0x9AC04E6D, 0x197F007E, 0x02C00580, 0xD0046FE0, 0xEDFA8BD3,
    0xAC83F4B3, 0x78BFF391, 0xDEF7BDEF, 0xAAAAC83B, 0xFBF7EA0A, 0x80097EFD, 0x7FBDEF79,
    0xA1555564, 0xEFDFBF7E, 0xF5000005, 0xBF7EFDFB, 0x2AAAAB24, 0xBDEF7BDE, 0x55564FF7,
    0xFDFBF515, 0xF3002F7E, 0x59077BDE, 0xEFD41555, 0x0025FBF7, 0xC6000000, 0x7767BFF7,
    0x32A3F6B2, 0xBE3AABD7, 0x6F9F6FFF, 0xA781F368, 0x2C101B0D, 0x1BDEF77E, 0x189CF62C,
    0xF17DEB36, 0xE9E00F9A, 0xDFBFFEF8, 0xF51FB581, 0x7DEFDAE4, 0x001F7FE1, 0x79800000,
    0x9109BDEF, 0xFEB01999, 0x007FFFFF, 0x00000000, 0xF7BDEF70, 0x7EE6259D, 0x003EF18F,
    0xF0000000, 0x667DE31E, 0x7B8DB989, 0x9CC47DEF, 0x01DF7C81, 0x00000000, 0xFFBC5230,
    0x19D65FFF, 0x7DEF6E69, 0x200CE751, 0x100DF8BF, 0xF807DE37, 0x6FC09AE7, 0x12AC0D3C,
    0x0BD46F00, 0x9CC5F9AC, 0x01757A80, 0x012F8CD6, 0xBDE388EF, 0x0000002F, 0x00000000,
    0xBF7EA000, 0xAB25EFDF, 0x77BDEAAA, 0xA0FBDF40, 0x0D441311, 0xA37808DE, 0xE4067CC5,
    0x0BC6F1AA, 0x0D67A2FC, 0x03455720, 0x4006A2FC, 0x00001F9E, 0x09EF7800, 0x3F1177BC,
    0x1E014F00, 0x1635B80D, 0x80378DE0, 0x2B01A37C, 0x036803E7, 0x378014F0, 0xFDCEFD40,
    0x2AFF4077, 0x783DAC6B, 0x77FB7C56, 0xF31C3C9E, 0x28F917C1, 0x2C1D941B, 0xC0B06430,
    0x960D8690, 0x6F0B35ED, 0xF159E3E6, 0x8CFFBFDB, 0x9655FE83, 0xDEF78775, 0xC607767B,
    0x3C7F5CAC, 0x146377EF, 0x0E402188, 0x76FDE793, 0x9F31833C, 0xDEF30FEC, 0x000000BD,
    0xEE77EA00, 0x55FE80EE, 0xD49DAE56, 0xCEFF6F8A, 0x3E6B9793, 0x651F22F8, 0x0583B283,
    0x18160C86, 0x72C030D2, 0x9581DE7D, 0xFE27CD31, 0x3E3BBBDF, 0x7353EF7C, 0xFE60BB3C,
    0x804FF4CE, 0x16FBF7BF, 0xCA78EF50, 0xE7BDEF7B, 0x3CAB201B, 0xFDFA84FF, 0x8803C66E,
    0xE034C009, 0x3E7FDF79, 0x7CCE6305, 0xAB6F303E, 0x4E335801, 0x13CADE02, 0x87C72F80,
    0xFFF73BF9, 0x59F7DE4D, 0xA72BD673, 0xD3BFBEFB, 0x48CB0182, 0x6E035BFB, 0x4CFBD3C5,
    0x677FF7F2, 0xF9C85BC4, 0x0E8C619E, 0x7BFBAD20, 0xCF18FFDF, 0x19CE67E8, 0xBDEFFDBD,
    0x6F7BDEF7, 0xAAA31555, 0xC7EFDFDE, 0x007EFDFD, 0x00000000, 0x00000000, 0xE0BBBF00,
    0x00001F7F, 0x00000000, 0xD2070800, 0x8960D6DC, 0xFFEC4731, 0x57FCBDBF, 0xF96FA8E6,
    0xADF60BEE, 0xA88E4163, 0x167C28CA, 0x1F1E3F8F, 0x39918B3F, 0x9F1E2318, 0xF2AE7E0F,
    0xAC9EA3C0, 0xF9F8AC84, 0x0B117F03, 0xF302A158, 0x06F73C6E, 0x7F1255EE, 0x6332528A,
    0x4DB66C50, 0x8A2A3129, 0x95FDB061, 0x89E193FF, 0xB6AD94A2, 0x4620F11A, 0x5D966564,
    0xCB2F9436, 0xD82BFA88, 0xC5654DA6, 0x2D8A1280, 0x5046180A, 0x24F751FC, 0x33513DC6,
    0x6F0E8E0E, 0x99F3A58E, 0xF2B5DE38, 0x7B456307, 0x1461BC03, 0x413186F0, 0x2074FCAD,
    0xE333EF5E, 0xE9672FC3, 0xF279E9AC, 0xDF9D5E25, 0xFF73C1FD, 0x5A0F517E, 0xB2B3578B,
    0x95C8D61E, 0xDED0BC6F, 0x3D426637, 0x8FC0D951, 0x0018201F, 0xC0000000, 0xEF7BDEFF,
    0x55554BBD, 0xBF7F780D, 0x0B196FDF, 0xCF01C574, 0x7F212F8A, 0x9E2702DE, 0x3E31BE05,
    0x20389EB0, 0xBF7F78DA, 0x5591AFDF, 0xDEE23555, 0x7BA21F7B, 0x004AD631, 0x00000000,
    0xBC600000, 0x9CE620EF, 0xC9E05DCF, 0xC0B2780F, 0x0AAC80E7, 0x27826270, 0x8166603E,
    0x155901CF, 0xCC131FE0, 0x059980F8, 0xBDEFFE7E, 0x45EFFFF7, 0x000017AD, 0x00000000,
    0x9EC7F79E, 0x05BBF00F, 0x900DE598, 0xE07F2B1D, 0x33D75F8D, 0x7C79EB31, 0x7E3B29D1,
    0x7B8E2FC4, 0xDEF7BDEF, 0xFBEF9F7B, 0xBEFBEFBE, 0x977D5BEF, 0xB46F97AE, 0xBF3DCFB9,
    0xABB7CCE2, 0x5ADFD4BE, 0xEB12C55F, 0xEC453FF7, 0x2A0FFECE, 0x62C67DEB, 0x1F7CD67A,
    0x17FA3BC6, 0x003BFF0F, 0xF0000000, 0xF0BCE77C, 0xE36627CE, 0xC4D7BFDB, 0x00008964,
    0xBFBA08CA, 0x3CF1179F, 0x7E783DF9, 0xF5A6FCE7, 0xCFE6B53D, 0xFFBDF7EB, 0x05078477,
    0x78614230, 0x8EFF6F7D, 0xAE6B3EF5, 0x0FEEB01F, 0xCC000000, 0xF31BDDFF, 0x6899F31D,
    0x8C7EFBDF, 0x600C0288, 0xE74C01C8, 0x39DE35FD, 0x7E782E56, 0xF58AFCE7, 0xDF9F7EAD,
    0xAB9EC6F0, 0xDEE223BD, 0xEF720AFB, 0x223BF7BD, 0xF0C6318D, 0xBF5CF7FA, 0xBE67BEB6,
    0x7DA9FC5F, 0xF65F90CF, 0x6B589E1B, 0x9DE0E3A5, 0x30F6BEFA, 0x7E3CF6E6, 0x000003EF,
    0xFFCC0000, 0x99FDDFDD, 0xB42CD66F, 0x8CBDF7EF, 0x490000F0, 0xF5DC7882, 0xE33DF8BD,
    0xCEF88535, 0xF67BF8F9, 0xD315BEBB, 0x1D9EBAB4, 0x0000FBFF, 0x3DF20000, 0x8D7A0BE7,
    0xFE759A78, 0x0FE7F14B, 0xC0000000, 0xE755BEFF, 0x5DDFADFD, 0xFF000000, 0x789550BB,
    0xDEE78F7F, 0xC81D58FB, 0x00000035, 0xFDE78000, 0x3558D465, 0x07DFF8BE, 0x00000000,
    0xF80FBEC4, 0x7E307E8F, 0x55F82D63, 0x0B991836, 0x607E89F4, 0x00DF9F8C, 0xDF89C74F,
    0x0000007D, 0xF3EFFC00, 0xFFD6D39D, 0x1ADF92FE, 0xA8AFFEB1, 0x1FFFFE97, 0x8A7FFCF3,
    0x00A4BF87, 0x00000000, 0x5DFF8000, 0xBA1F39DF, 0x9F4D3C46, 0xFE4832FF, 0x00000026,
    0x9EEFCF00, 0x9EFAC0DF, 0x5E2ECF59, 0x6D6BF7FF, 0x01960E44, 0x964C8C80, 0xDFB75E21,
    0xD637ACD6, 0xDFF9767A, 0x42F39DF5, 0xE36627CF, 0xC4D7BFDB, 0x00008964, 0xF7DC1196,
    0x3D562F6B, 0xFF383DF9, 0x00001FBB, 0xFEEFFD60, 0xF1EAD7DD, 0xEFAF133C, 0x64463F7B,
    0x0E430001, 0x7EFFF1E0, 0x9CAA6F8D, 0x1EF39EF0, 0xDFF80000, 0xCF47E7D9, 0x3FFE7581,
    0x00000036, 0xFFEE77E4, 0x7EF5D8CB, 0xB9195ACF, 0xC8D7FE9E, 0xC23D7E71, 0x3F6B9AEE,
    0xB7FBEB11, 0xE67EFF5B, 0xF7D557B6, 0xEF7A77AE, 0xFA9DE002, 0x98C3D8DE, 0xBDF8F3D3,
    0xB800006F, 0x0BF7CC70, 0xFFD39A6B, 0x03FB9E0E, 0x08000000, 0xF7FA5245, 0x9E27DE6F,
    0xA1FBACD5, 0xC154DFEE, 0xA62789F1, 0x3F1C98A8, 0x3950562B, 0x9F07DFC6, 0x2A6031AE,
    0x4C47881F, 0xFBAC9DF4, 0x2EDDF752, 0x2BFDB15B, 0xA1CCA896, 0xE58C54A2, 0xB61E33F5,
    0xA7AA8FFA, 0xF3DF966C, 0x21EBCFF3, 0xA94788C6, 0x948CFC4C, 0x2738C3C3, 0x746BEF79,
    0xCBD6731C, 0xF9D7E39C, 0x4E2A3BC1, 0xF80F0440, 0xDE07A3B2, 0x138BEB9A, 0x5AAF1CE6,
    0x87F759F9, 0x05467BBA, 0x8A6517C7, 0x99F5E98A, 0xC7231931, 0x64E7C3E7, 0x0BA46625,
    0x3E502C96, 0xF04C64F0, 0xF7B8815A, 0x732F7BDE, 0x788619CE, 0x1FE457DF, 0x981B8CD6,
    0xB544FF1D, 0xC8BF206F, 0x11BEFBFF, 0x139CE721, 0x78BEE7BC, 0x947F58E7, 0x009485DB,
    0x67E20210, 0xF59E7FE1, 0x40CF29E2, 0xE0BCBEFF, 0x90800031, 0xC1F7DCA0, 0xC7B98E6F,
    0x000001FD, 0xBBF00000, 0xB1ACE1A7, 0x051F4F1A, 0x88800052, 0x01BC5401, 0x87E79CDF,
    0xE4E06A51, 0x6644D7EF, 0xF5824001, 0xC73D851E, 0xE7FEA17C, 0xE2BB9E0B, 0xA4FE78CB,
    0x33EF315C, 0xFE3ADB5E, 0x556F31BE, 0xD4BFC986, 0x0000000B
EW_END_OF_FONT_RES( ApplicationFontVerdanaProSemiBold18 )

/* Table with links to derived variants of the font resource : 'Application::FontVerdanaProSemiBold18' */
EW_RES_WITHOUT_VARIANTS( ApplicationFontVerdanaProSemiBold18 )

/* Font resource : 'Application::FontVerdanaProSemiBold20' */
EW_DEFINE_FONT_RES( ApplicationFontVerdanaProSemiBold20, 17, 3, 0, 16, 0x001F, 0x007D )
  EW_GLYPH( 0x001F, 2, -12, 12, 12, 16, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 6, 0x00000110 ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -12, 3, 12, 7, 0x00000110 ),             /* '!' */
  EW_GLYPH( 0x0022, 1, -13, 7, 5, 9, 0x00000172 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -12, 12, 12, 14, 0x000001E3 ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -13, 10, 16, 11, 0x000003E1 ),           /* '$' */
  EW_GLYPH( 0x0025, 1, -12, 17, 12, 19, 0x000005C4 ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -12, 14, 12, 13, 0x00000863 ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -13, 3, 5, 5, 0x00000A92 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -13, 6, 16, 8, 0x00000ACA ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -13, 6, 16, 8, 0x00000BD5 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -13, 9, 8, 11, 0x00000CEB ),             /* '*' */
  EW_GLYPH( 0x002B, 1, -11, 11, 11, 14, 0x00000DF0 ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 5, 6, 6, 0x00000EFB ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -6, 6, 2, 8, 0x00000F54 ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 4, 3, 6, 0x00000F7A ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -13, 9, 15, 9, 0x00000FA1 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -12, 10, 12, 11, 0x000010D9 ),           /* '0' */
  EW_GLYPH( 0x0031, 1, -12, 8, 12, 11, 0x00001236 ),            /* '1' */
  EW_GLYPH( 0x0032, 1, -12, 9, 12, 11, 0x00001309 ),            /* '2' */
  EW_GLYPH( 0x0033, 0, -12, 10, 12, 11, 0x00001493 ),           /* '3' */
  EW_GLYPH( 0x0034, 0, -12, 10, 12, 11, 0x00001638 ),           /* '4' */
  EW_GLYPH( 0x0035, 1, -12, 9, 12, 11, 0x00001783 ),            /* '5' */
  EW_GLYPH( 0x0036, 0, -12, 10, 12, 11, 0x00001920 ),           /* '6' */
  EW_GLYPH( 0x0037, 0, -12, 10, 12, 11, 0x00001AC2 ),           /* '7' */
  EW_GLYPH( 0x0038, 0, -12, 10, 12, 11, 0x00001C08 ),           /* '8' */
  EW_GLYPH( 0x0039, 0, -12, 10, 12, 11, 0x00001DE6 ),           /* '9' */
  EW_GLYPH( 0x003A, 2, -9, 3, 9, 7, 0x00001F93 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -9, 5, 12, 7, 0x00001FF1 ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -10, 11, 10, 14, 0x00002091 ),           /* '<' */
  EW_GLYPH( 0x003D, 2, -8, 10, 5, 14, 0x0000221A ),             /* '=' */
  EW_GLYPH( 0x003E, 2, -10, 10, 10, 14, 0x00002327 ),           /* '>' */
  EW_GLYPH( 0x003F, 1, -12, 8, 12, 10, 0x00002490 ),            /* '?' */
  EW_GLYPH( 0x0040, 1, -12, 14, 14, 16, 0x000025BC ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -12, 12, 12, 12, 0x000028A9 ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -12, 10, 12, 12, 0x00002A58 ),           /* 'B' */
  EW_GLYPH( 0x0043, 0, -12, 11, 12, 12, 0x00002BE1 ),           /* 'C' */
  EW_GLYPH( 0x0044, 1, -12, 11, 12, 13, 0x00002D7D ),           /* 'D' */
  EW_GLYPH( 0x0045, 1, -12, 9, 12, 11, 0x00002EF0 ),            /* 'E' */
  EW_GLYPH( 0x0046, 1, -12, 9, 12, 10, 0x00003054 ),            /* 'F' */
  EW_GLYPH( 0x0047, 0, -12, 12, 12, 13, 0x0000316D ),           /* 'G' */
  EW_GLYPH( 0x0048, 1, -12, 11, 12, 13, 0x00003363 ),           /* 'H' */
  EW_GLYPH( 0x0049, 1, -12, 6, 12, 8, 0x00003432 ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -12, 7, 12, 9, 0x000034D6 ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -12, 12, 12, 12, 0x000035A8 ),           /* 'K' */
  EW_GLYPH( 0x004C, 1, -12, 9, 12, 10, 0x00003722 ),            /* 'L' */
  EW_GLYPH( 0x004D, 1, -12, 13, 12, 15, 0x000037D6 ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -12, 11, 12, 13, 0x00003938 ),           /* 'N' */
  EW_GLYPH( 0x004F, 0, -12, 13, 12, 14, 0x00003A45 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -12, 10, 12, 11, 0x00003C29 ),           /* 'P' */
  EW_GLYPH( 0x0051, 0, -12, 13, 15, 14, 0x00003D6A ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -12, 11, 12, 12, 0x00003FB3 ),           /* 'R' */
  EW_GLYPH( 0x0053, 0, -12, 11, 12, 11, 0x00004126 ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -12, 11, 12, 11, 0x0000431A ),           /* 'T' */
  EW_GLYPH( 0x0055, 1, -12, 10, 12, 13, 0x00004422 ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -12, 12, 12, 12, 0x00004521 ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -12, 17, 12, 17, 0x000046A3 ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -12, 12, 12, 12, 0x000048C4 ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -12, 11, 12, 11, 0x00004A7F ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -12, 11, 12, 11, 0x00004BC3 ),           /* 'Z' */
  EW_GLYPH( 0x005B, 2, -13, 5, 16, 8, 0x00004D66 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -13, 9, 15, 9, 0x00004E04 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -13, 6, 16, 8, 0x00004F3E ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -12, 11, 6, 14, 0x00004FF6 ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 11, 2, 11, 0x000050C2 ),              /* '_' */
  EW_GLYPH( 0x0060, 3, -13, 5, 3, 11, 0x00005125 ),             /* '`' */
  EW_GLYPH( 0x0061, 0, -9, 9, 9, 11, 0x0000515B ),              /* 'a' */
  EW_GLYPH( 0x0062, 1, -13, 9, 13, 11, 0x00005292 ),            /* 'b' */
  EW_GLYPH( 0x0063, 0, -9, 9, 9, 9, 0x000053C4 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -13, 10, 13, 11, 0x000054EF ),           /* 'd' */
  EW_GLYPH( 0x0065, 0, -9, 10, 9, 10, 0x00005610 ),             /* 'e' */
  EW_GLYPH( 0x0066, 0, -13, 7, 13, 6, 0x00005778 ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -9, 10, 12, 11, 0x0000585B ),            /* 'g' */
  EW_GLYPH( 0x0068, 1, -13, 9, 13, 11, 0x000059DE ),            /* 'h' */
  EW_GLYPH( 0x0069, 1, -12, 3, 12, 5, 0x00005ABD ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -12, 6, 15, 6, 0x00005B19 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -13, 10, 13, 10, 0x00005BFF ),           /* 'k' */
  EW_GLYPH( 0x006C, 1, -13, 3, 13, 5, 0x00005D23 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -9, 14, 9, 17, 0x00005D58 ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -9, 9, 9, 11, 0x00005E85 ),              /* 'n' */
  EW_GLYPH( 0x006F, 0, -9, 10, 9, 11, 0x00005F3A ),             /* 'o' */
  EW_GLYPH( 0x0070, 1, -9, 9, 12, 11, 0x00006079 ),             /* 'p' */
  EW_GLYPH( 0x0071, 0, -9, 10, 12, 11, 0x000061B6 ),            /* 'q' */
  EW_GLYPH( 0x0072, 1, -9, 7, 9, 8, 0x000062EC ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -9, 9, 9, 9, 0x00006373 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -12, 7, 12, 7, 0x000064D3 ),             /* 't' */
  EW_GLYPH( 0x0075, 1, -9, 9, 9, 11, 0x000065A8 ),              /* 'u' */
  EW_GLYPH( 0x0076, 0, -9, 10, 9, 10, 0x00006657 ),             /* 'v' */
  EW_GLYPH( 0x0077, 0, -9, 14, 9, 14, 0x0000676D ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -9, 10, 9, 10, 0x000068FF ),             /* 'x' */
  EW_GLYPH( 0x0079, 0, -9, 10, 12, 10, 0x00006A57 ),            /* 'y' */
  EW_GLYPH( 0x007A, 0, -9, 9, 9, 10, 0x00006BAC ),              /* 'z' */
  EW_GLYPH( 0x007B, 1, -13, 9, 16, 11, 0x00006CDE ),            /* '{' */
  EW_GLYPH( 0x007C, 3, -13, 2, 16, 8, 0x00006E58 ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -13, 9, 16, 11, 0x00006E80 ),            /* '}' */
  EW_GLYPH( 0x007E, 1, -8, 12, 5, 14, 0x00006FFF ),             /* '~' */
  EW_GLYPH( 0x00A0, 0, 0, 0, 0, 6, 0x000070E5 ),
  EW_GLYPH( 0x00A1, 2, -12, 3, 12, 7, 0x000070E5 ),
  EW_GLYPH( 0x00A2, 1, -12, 9, 15, 11, 0x0000714E ),
  EW_GLYPH( 0x00A3, 1, -12, 9, 12, 11, 0x000072BF ),
  EW_GLYPH( 0x00A4, 1, -9, 9, 8, 11, 0x0000743D ),
  EW_GLYPH( 0x00A5, 0, -12, 10, 12, 11, 0x00007555 ),
  EW_GLYPH( 0x00A6, 3, -13, 2, 16, 8, 0x000076F7 ),
  EW_GLYPH( 0x00A7, 1, -12, 9, 15, 11, 0x0000773B ),
  EW_GLYPH( 0x00A8, 2, -12, 7, 2, 11, 0x00007963 ),
  EW_GLYPH( 0x00A9, 1, -12, 14, 14, 16, 0x0000798C ),
  EW_GLYPH( 0x00AA, 1, -12, 7, 8, 9, 0x00007C7E ),
  EW_GLYPH( 0x00AB, 1, -9, 10, 8, 12, 0x00007D62 ),
  EW_GLYPH( 0x00AC, 1, -6, 11, 6, 14, 0x00007E82 ),
  EW_GLYPH( 0x00AD, 1, -6, 6, 2, 8, 0x00007F40 ),
  EW_GLYPH( 0x00AE, 1, -12, 14, 14, 16, 0x00007F66 ),
  EW_GLYPH( 0x00AF, 0, -14, 11, 2, 11, 0x0000824C ),
  EW_GLYPH( 0x00B0, 1, -12, 7, 6, 9, 0x000082BA ),
  EW_GLYPH( 0x00B1, 1, -12, 11, 12, 14, 0x0000836F ),
  EW_GLYPH( 0x00B2, 1, -12, 7, 7, 10, 0x000084DA ),
  EW_GLYPH( 0x00B3, 1, -12, 7, 7, 10, 0x0000859D ),
  EW_GLYPH( 0x00B4, 2, -13, 5, 3, 11, 0x00008670 ),
  EW_GLYPH( 0x00B5, 1, -9, 9, 12, 11, 0x000086AA ),
  EW_GLYPH( 0x00B6, 1, -12, 9, 15, 11, 0x0000878C ),
  EW_GLYPH( 0x00B7, 1, -6, 4, 3, 6, 0x00008885 ),
  EW_GLYPH( 0x00B8, 3, 0, 5, 3, 11, 0x000088A0 ),
  EW_GLYPH( 0x00B9, 2, -12, 6, 7, 10, 0x000088DF ),
  EW_GLYPH( 0x00BA, 1, -12, 8, 8, 9, 0x00008952 ),
  EW_GLYPH( 0x00BB, 1, -9, 10, 8, 12, 0x00008A48 ),
  EW_GLYPH( 0x03A9, 0, -12, 13, 12, 14, 0x00008B59 ),

  EW_FONT_PIXEL( ApplicationFontVerdanaProSemiBold20, 0x00008D42 )/* ratio 74.37 % */
    0xEF7BDEF7, 0xEBDEF7BD, 0xBDEF7BDE, 0x00005EF7, 0x00000000, 0x00000000, 0xE0000000,
    0xBDEF7BDE, 0xBEF75EF7, 0x14C0B829, 0x9F77E00C, 0xB7BC5F7B, 0x3708DEE3, 0x48642B88,
    0x734C2183, 0xFDF87582, 0x1B3C5D80, 0x1446FE78, 0xDF46F77E, 0xBF70DF6D, 0x8C6FBE27,
    0xC4F50BEF, 0x7BF93CF3, 0x8CB6781E, 0xB8CCF181, 0xF09F27CF, 0x2DF5AF7D, 0x3BDE97EF,
    0xEEB9BDC7, 0xB912A81D, 0x0A56E641, 0x0001F9E0, 0x9D5FBF3C, 0xF9BFA2DF, 0xD31F3D64,
    0x179DF9EE, 0x7D78A16A, 0xB0B7E7BF, 0xDEA8CCF6, 0xCED76F18, 0x09F18131, 0xFA1B602B,
    0xAAEE77EC, 0xF52315D2, 0x7FFBF58F, 0x000017B5, 0x05DDCFA0, 0x95AC24FB, 0xC6A0BF33,
    0xEFFED84A, 0x07E3A28C, 0x635170A6, 0x45C29826, 0xFF6C0BC7, 0x633D4677, 0xFDDFFAC6,
    0x7E672B58, 0x74FBC6F1, 0x3EA5FCAC, 0x6633D777, 0x0A3BB75C, 0xD215E378, 0x3319E010,
    0xBC029484, 0xF79DB2F1, 0xBC67828D, 0xBF336CC1, 0xFDCEFC64, 0xF5FF2037, 0x3C0BD67E,
    0x14F9EB91, 0x16384690, 0xAFF88CF0, 0x31B80D99, 0x7FF3FD7A, 0xCCAFEA17, 0xEF17C081,
    0x21FFC56F, 0x1BF43089, 0xE111465F, 0x781E5F30, 0xEDF7FF3D, 0x7D61FA88, 0xBDAD6635,
    0x7DF476B3, 0x887708AF, 0x4EF75069, 0x1BD359F1, 0x9E3F4CD9, 0x482AD8B0, 0x9800E989,
    0x7B62520E, 0xC4588A82, 0x364743F2, 0xDE7359F1, 0x0DE5CC5B, 0xCFC5F33A, 0x6228960C,
    0x8E2478D8, 0xC2C70209, 0x9FC31063, 0x933E1E29, 0x15CD7CCE, 0x87F3C06F, 0xCF9E05F1,
    0x5F7DBDAC, 0x9CCD6E78, 0xC0221FBF, 0xF3959F73, 0x6F6B33F7, 0x17C617DF, 0x02203E78,
    0x000F9C60, 0x3C000000, 0xEEADDEF7, 0xCCC8FFBD, 0xEB399914, 0xCF1FFFFF, 0x01FFFFFF,
    0x60000000, 0x94F866DF, 0xE761C34A, 0xBFF1F3C3, 0xC405DEF7, 0x02AA57EF, 0x601DDF80,
    0xF3F00D54, 0xF04C6607, 0x0F8E02C4, 0x3E018D64, 0x04C4F01F, 0xF8E02E4F, 0xE018D640,
    0x2C5F01F1, 0x18015950, 0x217BB9DF, 0xD918CFFF, 0xFFA8BF2F, 0x1CB4CCFE, 0x8984552A,
    0x000002E9, 0x60F08880, 0x279FCA3A, 0xFF3A8E95, 0x7FF94CCF, 0xDE17E8E4, 0x3DDE32FB,
    0x9E01CE61, 0x0000137B, 0x00000000, 0xD61FFFEA, 0x21991FFF, 0xDFFDEB32, 0x33B87BF3,
    0xFC8F7D45, 0xF5E93DEE, 0x8027C43E, 0x394609BF, 0x41EA2710, 0xC87C73FC, 0x307FA8FF,
    0xC0BF98EE, 0xFFFEA33F, 0xC8867FFF, 0xEF50CCCC, 0x707777BE, 0xF58E6667, 0xFFCEFF67,
    0x156519FF, 0x51B44016, 0xF33CF718, 0xF315510F, 0xEDFBF907, 0xC3901678, 0x74A81E89,
    0xFFFE7DAC, 0x25D19C9F, 0x601DAC73, 0x7A80FBDD, 0x048DF901, 0xE37C0B8E, 0xFD3D6097,
    0x059F7A80, 0xF7B9E3FC, 0x6646EFA6, 0xFECC8666, 0xFFFFFFFF, 0x00007FD0, 0xF7BDEE78,
    0x9910FBDE, 0xFF3C1999, 0x2FFFFFFF, 0xFEF73C00, 0xACD460DF, 0xFB3C7731, 0xC8FF7F7B,
    0x00E3C609, 0x33C0F44B, 0xFFFD9EFC, 0xFC733FFD, 0x5EFA8D4A, 0xCF7FF7C8, 0xCAA7B98B,
    0xFF7C7464, 0xC6F1FEDF, 0xDF12807C, 0xC221BF39, 0x33FD46B4, 0x4777BEF9, 0x944582FC,
    0xE50130CC, 0xACEB6510, 0x4B18EEFD, 0xB5A727DE, 0xDEF7BDC5, 0x664FEF7B, 0xFF106666,
    0xBFFFFFFF, 0xF1AF00E1, 0x681A5180, 0x069540A3, 0x8678155A, 0x300D5A06, 0x3CFC0BD3,
    0xDCEFD409, 0x5FCC9BFF, 0xD3B98D65, 0x9BBFDCCF, 0x988219F1, 0xF57D69AE, 0x797A98D4,
    0x509E5F7E, 0x3BC87B33, 0xED778BE2, 0x1E19D99D, 0x130667C6, 0xFF47CADB, 0xFB457FDE,
    0xF34CF1DE, 0xEE77E326, 0x8D7FA85E, 0x63797ECA, 0x399F7FFE, 0xE1A8FA46, 0xF2469807,
    0xFDCD3101, 0x76F08FDB, 0xC90CF98E, 0xA77FDFFA, 0x6A2F881F, 0xEFDFFF18, 0x9EA0F8D6,
    0xDFF877A7, 0xFDDCCF17, 0xCFBF403E, 0xDFF83733, 0x4DCCF017, 0xEC000FBF, 0x529F0CDB,
    0x7CEC3869, 0xB2003E78, 0xFFBF5027, 0xFFFAC40A, 0xEF1A7B2A, 0xFEFCF1ED, 0xA39EC62B,
    0xC61057EF, 0x1EDC601D, 0x207BFFEB, 0xF51DFFD6, 0xEE603BFD, 0x026B93DF, 0xDC57FDF5,
    0xF7BDEF7B, 0xAAAAB7DE, 0xEFCEAAAA, 0x7EFDFBF7, 0xFD6FDFBF, 0xEFDFBF7E, 0x56FDFBF7,
    0x55555555, 0x8C00FD9D, 0xFC02BFEF, 0x0EFBEC9E, 0xE65FF7D4, 0xCFB215FE, 0x40FBF557,
    0xFD620844, 0xBFBE4F7F, 0xF3E76EFA, 0xB1EFD3DB, 0xEF1857CE, 0xEFCF00E9, 0x4E1BCF7F,
    0xFFC77349, 0xC8EFFFFF, 0x047C9335, 0xDC6063E4, 0x39DBE2A8, 0x17BE587F, 0x019F6098,
    0x800079CE, 0xFFDCFB58, 0xDFEC609B, 0xF6BFFFFB, 0xFB3FF8C4, 0xBFEF5919, 0xFCEAEE1F,
    0x8EFFFFDD, 0x5BB655B7, 0xD46B2663, 0x67C9E27E, 0x46390AFF, 0x0758174A, 0x6148C400,
    0xFFCF30B3, 0xF7F31589, 0xF5959E1F, 0x7CBE378C, 0x49FAF966, 0x3FF59CEF, 0xF7BDDFBF,
    0x3DFEBEA3, 0x7500F599, 0xBFFFFBC7, 0xF7BDE017, 0xC01C5801, 0xE009E113, 0x104C4778,
    0x81F9F98F, 0x18CC4F19, 0xCB0E7E03, 0xDDF8630F, 0xC9F83D3B, 0xE2C8AAAA, 0xEFDFBFD1,
    0xF1951CB7, 0x3C7156C0, 0xEB5889E0, 0x5ECF7BDE, 0x37465510, 0x94EFDF9E, 0xF1800C02,
    0xEEF75178, 0xCE720F9C, 0xF3077399, 0x639DDF7D, 0x201D3102, 0xF7E7871F, 0x49C8FFDB,
    0x3B5C8D54, 0xDDEFBD10, 0x1AEEA0EF, 0x17E4798C, 0x5FFBDF63, 0x0FF88BE1, 0x05478FB2,
    0x000FE948, 0x2807F480, 0x22FC2015, 0x7F5883FE, 0xE7D8C5F9, 0x3DA83A7F, 0x7758C633,
    0xFFEF7BDD, 0x666440B7, 0xFC607FF5, 0x3C8BF7FF, 0x397F3C01, 0x806CA301, 0xF0000134,
    0x361A8098, 0x18B93F30, 0x637DFFFF, 0x3E66445C, 0xDEEB4EDF, 0x7FBDEF7B, 0x27333322,
    0xFFFFFFE3, 0x00003FFF, 0xBDEF7BC8, 0xCCCCC88B, 0xFFFFFC60, 0x00027FFF, 0xFFFFF8C0,
    0xC88FFFFF, 0xEEB9CCCC, 0xFBDEF7BD, 0x19999910, 0xFFFFFF8C, 0x000017FF, 0xFEF7BDE4,
    0x13999911, 0xFFFFFFE3, 0x0000007F, 0xFBD10000, 0x60F7FFDE, 0xF33235DC, 0x47F896F9,
    0xFBFFFFFD, 0x7F23787B, 0xC796FA89, 0x9E1D2003, 0x01FDEF7B, 0x0E903551, 0x78BDFBF5,
    0xC8DE003C, 0xF88FE25F, 0xFFFFFD47, 0xF6E304B3, 0xEF9E3918, 0xE30FF75B, 0x000000DE,
    0xF2000000, 0x00377BDE, 0xEF7BDE40, 0x00000006, 0xEFFC0000, 0x3156F7BD, 0x3FB8FDEA,
    0x00000000, 0xFB8FDE00, 0xB89462AB, 0x553FDEF7, 0x0AFDF889, 0x00000000, 0x2C9330C0,
    0x1FF7BBF1, 0xF5149EF1, 0xE1FEEB1F, 0xF400FFBB, 0xB9803713, 0xB5409FE2, 0xC5F9006F,
    0x391B805B, 0x5F223901, 0x5CDBFC40, 0x7A7318C0, 0xF11DE00B, 0x3889C025, 0xF8C5F900,
    0x0007FBAC, 0x00000000, 0x00000000, 0xFFFE3000, 0x445FFFFF, 0xBAC66666, 0x6F7D8177,
    0x201A85E0, 0x5403A262, 0xC0A318FC, 0x78E8F998, 0xACDE2F81, 0x71AE4095, 0xF27E00FD,
    0x2F2C8049, 0x003BBF00, 0xEB000000, 0x0DEE07DE, 0x00B90034, 0x7A809BD2, 0x9E3A01A2,
    0x05D7C801, 0x40263958, 0x02A7806B, 0x72001BC0, 0x7BFFD902, 0xBDA80F7E, 0x22F7D532,
    0xFFCE78BE, 0x6F17317C, 0xAF3C17E4, 0x1E03C797, 0xC901D251, 0x01D20000, 0xF01E50C9,
    0xF22FC788, 0x219AF3C3, 0xFFCE78BF, 0xA8D3C5FF, 0xFA8E473D, 0xF7BDD63E, 0x5101BFFE,
    0x83FF9E35, 0x8A9DFBF1, 0xC00C7017, 0x07BF8010, 0x153BF7E3, 0xCC6AA22F, 0xFF7BC89B,
    0x0000006F, 0x7FFA2000, 0xDD40AFCF, 0x2F7EA995, 0xFCE78BE2, 0xF17317CF, 0x33C17E46,
    0xF01E3CBD, 0x480E9289, 0x0E100006, 0x80F2D248, 0xF917E512, 0xB215B462, 0xBF7FFE63,
    0xFE62F51D, 0xEF15519F, 0x6CEF8C0F, 0xE2318016, 0x3803F6FE, 0xF7588A8F, 0x04F77BDE,
    0x6DE31991, 0x79FFFF18, 0x0223804C, 0x02A38000, 0x4FFEFDE3, 0x327CC434, 0xFFBC80F6,
    0xFF901788, 0xBE300FA8, 0x6D501A78, 0xF73BF535, 0xBF993AFC, 0xF59E7ACA, 0xF7FBBDA3,
    0xC231DF3B, 0xE192CF03, 0xF2D104CC, 0x30AF9FFD, 0xF3C533FF, 0xFFF7C85B, 0xB902F4EF,
    0x1763115E, 0xEFC6110C, 0xE3BB7EFC, 0x564F7C67, 0xFC7FF3C5, 0xDEF7BDEF, 0x333BEF7B,
    0xC6664433, 0x3FFFFFEF, 0x6FFFFFD6, 0x00000000, 0x00000000, 0x00000000, 0xCF07F7BC,
    0x000000BD, 0x00000000, 0xE0784000, 0xA5E27E2F, 0x79A635A6, 0xBDB22FEF, 0x3B5C856F,
    0xE303FBBE, 0xE02A389E, 0xC1695153, 0x2A1F2872, 0xE48CF8A2, 0x87A4616F, 0x4FC783E5,
    0x8CF80E45, 0xC3901E3C, 0xE7E03E53, 0x14C0918D, 0x1E28807E, 0xFF81EE78, 0x2AF790FD,
    0x942A4491, 0x44515221, 0xB2E51572, 0xB66CA2A5, 0x916DA2A2, 0xF991928A, 0x88194A3C,
    0x455B29E1, 0xBD9415FE, 0x86CAAD95, 0x0C3151BF, 0x54A0A1FF, 0x80651514, 0x50F1FC18,
    0xB360F140, 0x7C16F751, 0x3796A7F7, 0xE9789E78, 0x9D689FCC, 0x65FA9E38, 0xF7CB184D,
    0x867407C4, 0xF002000E, 0xD4137A66, 0x81C4FB8C, 0x62FE7578, 0xA6B2FC2C, 0x9E7A6F68,
    0x8E2B3178, 0xEFB06EEF, 0x9E1631D7, 0xBD7CBF11, 0xCAC37B41, 0xA1732B68, 0xC2F5E7CD,
    0x14F17E53, 0x81A22378, 0x00093C7C, 0x00000000, 0xDEF7BFF0, 0x330DEF7B, 0x7E033333,
    0x7FFFFFFF, 0xC4E20198, 0xE32F8178, 0x05F2AC0F, 0x102EAF18, 0x5F016A27, 0xC57407E6,
    0xF38B1009, 0xFFFFFFFF, 0x66666442, 0xFEF7BDC6, 0xF7E6E678, 0x0000002E, 0x00000000,
    0xCCF177BF, 0x2A03F75D, 0x262F802B, 0x5901F8F0, 0x07C70063, 0x7802B93C, 0x0F9F0162,
    0x38031AC8, 0x0589E03E, 0x9F813198, 0xC6AA303F, 0x31DEF7BA, 0x7DEA0CE6, 0x00000007,
    0x00000000, 0x0EFBD400, 0xCC019CC6, 0xAB6403FB, 0xA2789C05, 0xEF8C7A0B, 0xC56A0DE7,
    0xC4FCACF1, 0x557497EB, 0xBDEF7BDF, 0xBB7BDEF7, 0xBBBBBBBB, 0x7AA6EEBB, 0x51FCD64C,
    0x5ECF73BF, 0xB2B3598C, 0xBDFFEB5F, 0x79E2CFDF, 0x7E13FFF7, 0xA337555F, 0x498A7EEC,
    0x5BF0A930, 0x57F88FDF, 0xEEFC7EBD, 0x00000002, 0xBFBFF580, 0xF515F781, 0xDFF39E0F,
    0x964D9311, 0x3004303F, 0xCFE5900C, 0xC63B7DFB, 0xF98F13C3, 0xFDCEF8C7, 0x9FFC61BF,
    0x8DCB3151, 0x6FF6FFFA, 0x11A8D0E6, 0x64120824, 0x3786317A, 0xDBFBFF9E, 0x319FFD53,
    0xBDC02CE7, 0x00000003, 0x79EEFC60, 0x546BFC61, 0xBFB3C741, 0x00BCA23F, 0x2200C012,
    0xF4FC243D, 0x9D986DFE, 0x77E41FC3, 0x7631BFEE, 0x6E3EB6AD, 0xE3B5DEFC, 0xFBEE1CC9,
    0xCC882B36, 0xF7822A7C, 0x7EFDFBF7, 0x320FC395, 0xFDDDCC74, 0x33DAA7FB, 0x8C9D5CD6,
    0xFC4B3DDF, 0xC56199EB, 0x0B0A7AF8, 0xC6BDD5AB, 0x9FAA7390, 0x0000BEF9, 0x60000000,
    0xFF79EEFC, 0xCAFF1877, 0xEA3A2567, 0x72883BFF, 0x06003C01, 0xE121E910, 0x61B7DFD3,
    0x03F13C75, 0x14DFDCEB, 0xF7BF38C3, 0xE7897BFB, 0xCBBCF599, 0x00002EEF, 0xFB980000,
    0xEFBC1FFE, 0xF9E4BF90, 0x76289FDF, 0x000014AA, 0xE0000000, 0xF9997F77, 0xFEF7DFFE,
    0xF0000000, 0x26643FBB, 0xB9EBFFDE, 0x39CCFEF7, 0x0007DE30, 0xC0000000, 0x0F6FE723,
    0x9FB233DB, 0x00005DDF, 0xAC000000, 0x74F00FFB, 0x8BF180DC, 0xA3FCE12F, 0x4010CC0B,
    0xADF02EB6, 0x2BA04BE5, 0xF1CBE00E, 0x000BEF79, 0xBF000000, 0xEEFFD6BB, 0x5F39EF11,
    0xE71A76F0, 0xE69E233F, 0xD657DFF9, 0xA762D3BD, 0x00BF8FC9, 0x000002C0, 0x00000000,
    0xFCD777E0, 0xDF785DDF, 0xF9E0BE34, 0x76289FDF, 0x000004AA, 0x30000000, 0xC2F773BE,
    0xD9593FF8, 0xFDAC6E3F, 0xC39551DB, 0x241D9647, 0x43120886, 0x6590F0E4, 0xB7DFE8EB,
    0xEBFD4AA3, 0x7E7FB279, 0xFDFFAD77, 0xA8AFBC0D, 0xFFDCF07F, 0x90EC988E, 0x010C0FE5,
    0xF964030C, 0x3B7EFEF3, 0xD651E1EA, 0x4F77FB0F, 0xF5000003, 0x1DEFA7BB, 0x79E357C6,
    0x7FB3C6E0, 0x02F0C47F, 0x88030048, 0x33E123F4, 0xEAC37BFF, 0xEB07F5CC, 0x00037F7F,
    0xEBBBF000, 0xFBF077D9, 0x0EF7D806, 0x0000037E, 0xFD100000, 0xF8B7E7BF, 0x7E73D5AF,
    0xF56F88C6, 0xBF1115FF, 0xA8EC9439, 0x3CC99F77, 0x2378ADFB, 0x323F98D3, 0x9FAD6FF6,
    0xB7AD7231, 0xEEB3FCE7, 0x6AC0000F, 0x431AEF75, 0x67EA39CE, 0x00016FBE, 0x72184C00,
    0x8E75537F, 0xF0BBBF1A, 0x00000FBF, 0x08000000, 0x8DB06A3F, 0x15CC3E73, 0x75837CF1,
    0x7AEFB0FF, 0xCC4720E4, 0x151E3F2C, 0xE1CF878E, 0x5991AC89, 0x079FFE58, 0x60F96B3E,
    0xF8254464, 0x136FA3F8, 0xD77D06F7, 0x528B1456, 0xFE1B8315, 0xA51E188C, 0xC5947A9E,
    0x1D9C47B6, 0xF51E6C35, 0x56FF8F53, 0x22A78E64, 0x50233D47, 0x14654FF2, 0x9B1F8A6C,
    0x9C60EE71, 0x84EBC633, 0x9EB0EF13, 0x2CF9BDFC, 0xF999F2FC, 0x02F8F883, 0x07788DF2,
    0x38DF789C, 0x55AD46F8, 0x7E4F99F9, 0x79CCF17C, 0x5CEFB0FF, 0x3118C591, 0x59F3F963,
    0xC7CB167C, 0xA8CCF118, 0xFBF9CF81, 0x98AA8AC3, 0x5C098B10, 0x0953E03E, 0x578070C6,
    0xDEF7103E, 0xCD7DEF7B, 0xC4E0E739, 0xF4BFBEFB, 0xF18DC42C, 0xE07997C1, 0x398938AD,
    0xF8B640F5, 0x15BF7EFF, 0x0EAAAA21, 0x81DEFB3C, 0xC0CD46FA, 0x89BDFCDF, 0xB0060174,
    0xE1446B00, 0x03FC7B77, 0xBD09C863, 0x500BF17F, 0x08000515, 0xF02E1803, 0xA89BF737,
    0xF7198C6F, 0x00000002, 0xC25F3DEF, 0xF0B9E39E, 0x01C8FFBC, 0x80B0800C, 0xDFBF8125,
    0xBEC7B300, 0x02311C0F, 0x85DDE66B, 0x3CB00BED, 0x80620040, 0x0391DBE7, 0x05CF19FB,
    0xF0BBBBF9, 0xE32DC3BB, 0x6564B0F7, 0x6AAFDBFE, 0xAE5F0C64, 0xCF9FBF15, 0xAC677495,
    0xF717DEE5, 0x00FBBFBE, 0x0C0108CB, 0x3F3C0437, 0xFCC00000, 0xEF17B57D, 0xA8EA54FB,
    0xFDCCFB19, 0x8F12B6C5, 0x81708070, 0x4F2819BF, 0xF7F33EC5, 0xCA8EBF0B, 0x5FDAC1D5,
    0x000005ED, 0xF3DFFDE2, 0x5333FE4B, 0xFEFC3185, 0x2CA617E7, 0x3EFC012A, 0x4EE5EF79,
    0x6A3EFBE3, 0xE0F3CF9B, 0xD66782EF, 0xFF98BE03, 0x6FFFFFFF, 0x63333332, 0x78BF507E,
    0xEFCFFF6A, 0x51BF188B, 0xF323F33D, 0x0001BF9D, 0x41ECDF99, 0x27EAC6FD, 0xFFF6B27F,
    0xDC62FEFC, 0x6FEF789B, 0x5E5C9A3C, 0xCC5F49ED, 0x8CC75394, 0xFCF17E1F, 0x7A722662,
    0x786F05E2, 0xD09EEB03, 0x4EF732F7, 0xEF7337BD, 0xF7337BD4, 0x3137BD4E, 0xFF863906,
    0x7FFE001F, 0x90007FFE, 0xDD9EFFEF, 0xDFB39EC6, 0xF8C5F8F5, 0xAEDBF5AD, 0x79998408,
    0xC65107BF, 0xCD699DF3, 0xEF1D3FF9, 0x0D62D9F8, 0x664B7A73, 0xEFC6AFD4, 0xDF88FF6C,
    0xC3F111EE, 0x22B6FF58, 0x77FF5120, 0xE6333FBD, 0xFBCF5EAC, 0x7FE3EF7A, 0xFB588003,
    0xBA80BD9E, 0xF7EFFDFB, 0x5F181FF7, 0x67CC9EFF, 0xBCE4FF7F, 0x1BFB9F53, 0xCB1EBE6B,
    0x479CFB57, 0xF23EE33F, 0xA4CF19B9, 0x032DFE6A, 0x60001FF8, 0xFC054DFE, 0xEA8C7DCF,
    0xEAA4CF11, 0xFF9EFCB1, 0x19F78F3D, 0xE7BD3BCE, 0x2F5AC6FC, 0x93DFEBE3, 0x9FEFECF9,
    0xFFDFBBA8, 0xC1FF7F7E, 0x0FDDCFB3, 0xE5F3EFBF, 0x2D79EAB3, 0x6FC7CFBD, 0xEAA5FBBE,
    0xAAAE41C9, 0x1DDF89C3, 0x10730740, 0x32FBC5BF, 0xCDFAF3F6, 0x7FDFC635, 0x00D7E7ED,
    0xB5FF7F18, 0xF6335F9F, 0x35CDFAF3, 0x7DE2DF88, 0xBDEF7B8D, 0x8BFBDEF7, 0x739CE739,
    0xDF7DF24E, 0x17DF7DF7, 0x00000000, 0x5DEF7BFF, 0x7BED6200, 0xEEEA02F6, 0xDFDFBFF7,
    0xBF7C607F, 0xECF993DF, 0xF79C9FEF, 0x2FFDEF79, 0x8B1EBE6B, 0xFD4EBFBA, 0x2580FD8C,
    0xC1FE5FA8, 0xA01FE48C, 0xE405FBEE, 0xC0C6751F, 0xE207ECFF, 0x4F55077D, 0x44F7A82C,
    0x9F7DC33F, 0xCFFAC7F7, 0xDFBE32F9, 0xF67CC9EF, 0xDDD44FF7, 0xDF9F7FEF, 0xBDEF707F,
    0xEF7BDEF7, 0xBDEF7BDD, 0x1B7BDEF7, 0xC47FFBBF, 0x58DF57DF, 0x7E3BCF7E, 0xE7BF2C40,
    0x7DFC5F1D, 0x12300DF5, 0x0001FEC0, 0x71800000, 0xBDE6BDEF, 0xCE731FF7, 0x9F39CC69,
    0xF5F7DF7C, 0x00DBEFBC, 0xF7B8C000, 0xFBDEF35E, 0x9CE7398F, 0xF8F9CE73, 0xA14FFDCE,
    0x37C66F5F, 0x335C8167, 0xF97AF679, 0x8E46FABE, 0xCFF7B3C7, 0x137FDCEF, 0xF1EB5DBF,
    0xAC98E33D, 0xFEB06BDB, 0x7DE35AEF, 0xF7F225D6, 0xEEFC5AD5, 0xE8F5A9E3, 0xC2EEFDA7,
    0x00002EEF, 0xC0000000, 0xFE30988F, 0x78603BBF, 0xFF7E07DE, 0x01777EB3, 0xE77EA000,
    0xF3C77BDE, 0x2F2FD0AB, 0x1800C3E4, 0xF3C02F00, 0x77EA00AB, 0x00000000, 0x00000000,
    0x001BDC60, 0x331AAFF8, 0xCD7BBFE3, 0xBFD8B3A8, 0x0000FFC0, 0xF386728C, 0xF6787B99,
    0x6F9E2FFD, 0x1397AB7D, 0xAF1BE7BF, 0x0044F07A, 0x388A83D4, 0x7CBE7BF1, 0x56FCDF3D,
    0x82F0B12F, 0x883B98FE, 0xDCBF9DAE, 0x3D8FF583, 0x040BFC77, 0x6BD8FF58, 0x6BA2BFC7,
    0xA0F72FE7, 0x300EE63F, 0xBF3DFFBE, 0x351FBD02, 0x59E1F7EA, 0x7FFBFFFA, 0x5A8E2CF1,
    0xB2979678, 0x002116C1, 0x8DB06CA0, 0xD44D46F0, 0x78BE32F2, 0x0FBCFAA7, 0xF11AEFEA,
    0x3FFFEA4D, 0x3BFFFDE0, 0x66641332, 0x00000000
EW_END_OF_FONT_RES( ApplicationFontVerdanaProSemiBold20 )

/* Table with links to derived variants of the font resource : 'Application::FontVerdanaProSemiBold20' */
EW_RES_WITHOUT_VARIANTS( ApplicationFontVerdanaProSemiBold20 )

/* Bitmap resource : 'Application::LogAccess' */
EW_DEFINE_BITMAP_RES( ApplicationLogAccess )
  EW_BITMAP_FRAMES( ApplicationLogAccess, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 3, 15, 17, 7, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogAccess, Default )         /* ratio 27.60 % */
    0xC3519300, 0xACD3E376, 0x220C605D, 0x60F09854, 0x190E85C3, 0x11488C4A, 0x1887C5A2,
    0x88D45E27, 0x04412051, 0x03DCA63D, 0x3FCA0390, 0x9E512692, 0x2532B92C, 0x5F30954B,
    0xB34974CA, 0x3598CDA5, 0x2904DA71, 0x35160532, 0x9D0A74D6, 0xD0E89379, 0x2293469C,
    0xA813E9AD, 0x2A98451A, 0x94BA2D1D, 0x58A9D5AA, 0x7A7CDA95, 0x68B192A9, 0xAD6474D6,
    0xD6AAF63A, 0x86BF3AB2, 0x8016C7FD, 0x8478338F, 0x974B3DA1, 0x6FAB5D6C, 0xB93DB2E3,
    0x6CB40017, 0xE01460DD, 0x5CDF4521, 0x26CD88BB, 0x6FF85C1E, 0xDB90BEE0, 0xAB354A4A,
    0x98C561CD, 0x5C9CAB2F, 0xB6DF3239, 0xE204019E, 0x000FCA74, 0xC7304F1C, 0xD9C702F0,
    0xE8AE5222, 0x2D1662FC, 0xDE6D3448, 0xFDAECC5E, 0xD6EAF63A, 0x1BFF5158, 0x71B43A5D,
    0x9A4FC8D0, 0xCB4C05C2, 0xE0592183, 0xA5B23049, 0xC35DAA9D, 0x87337CAC, 0x4D1F840E,
    0x510502A5, 0x8BD7C7B3, 0x09A06F2E, 0x4FCBEF21, 0xB6825226, 0xDD854F77, 0xCFEAF4CA,
    0x15CA9FA3, 0xCFF1CB2C, 0x9FF00200, 0xC3A16D80, 0x70183B8E, 0x2339CE43, 0x2B4A4230,
    0x03D01C74, 0x265CF815, 0x420E8521, 0xE638CDC8, 0x82206090, 0x1C988603, 0xF5F60181,
    0x69E12647, 0xE189D776, 0x88E25889, 0xCC80022E, 0x20E0D834, 0xA8FD4940, 0x508DD898,
    0x348C63F4, 0xE310E4D7, 0x614A2390, 0xE8AE2187, 0x46511998, 0x8BE44922, 0x8FD00250,
    0xC008FE3F, 0xCC571040, 0x0B65E4A3, 0x3D055100, 0x24F95653, 0xB5F66489, 0x50F03BCE,
    0x535DE5B0, 0x98E6999D, 0x0F73D603, 0x50040A3E, 0x266B3F92, 0x509D92A6, 0x9D2723F8,
    0xA238C270, 0x91A05509, 0x9A4B9E4D, 0x67150264, 0x94681368, 0x09D211A1, 0x5A207C2A,
    0xA49D20D6, 0x65A3C7C2, 0x3CD27A0A, 0x80C3DCF6, 0xD1945208, 0x9144A58D, 0xA2A82A6A,
    0x35E63A72, 0x829388DF, 0x51804C06, 0xDAB4A20E, 0xAEACAB0A, 0x9469DA7A, 0xCEF3B4E8,
    0x22106205, 0x56172749, 0xC5B255A8, 0xB0EC1B1E, 0x6BEA42BD, 0x53CCF08C, 0x24BC03CF,
    0xA7110CF3, 0x160C12E8, 0xED5B6ED9, 0x0AFED1B5, 0x00004040, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogAccess )
    EW_BITMAP( ApplicationLogAccess, Default )
EW_END_OF_BITMAP_RES( ApplicationLogAccess )

/* Table with links to derived variants of the bitmap resource : 'Application::LogAccess' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogAccess )

/* Bitmap resource : 'Application::LogMisc' */
EW_DEFINE_BITMAP_RES( ApplicationLogMisc )
  EW_BITMAP_FRAMES( ApplicationLogMisc, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 22, 0 )
    EW_BITMAP_FRAME( 5, 2, 12, 3, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogMisc, Default )           /* ratio 43.18 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0x1D4E484C, 0x40860E3B, 0xE3D3D2AD, 0x0E619E0C,
    0x17916084, 0x7F93C700, 0xDC663F1D, 0xA162F158, 0x34F6AA4F, 0x25B0987C, 0x610B97C2,
    0x50999C2A, 0x0E7B3D5E, 0x24D234DC, 0x298F00E9, 0xF48242F9, 0xD0A3F438, 0x7E9144A3,
    0x0DB409F4, 0x6C934D23, 0xB31974E2, 0xD6994D2A, 0x415389BE, 0x6E19CA62, 0x0D8A8B4A,
    0x59A9364B, 0x7EBB44A3, 0xEA95BACD, 0xBED7AB55, 0x01614B8D, 0x65751749, 0x7B1DEAD1,
    0xBCDEEF96, 0x8DDEEAFF, 0x426DD73B, 0x31EEF67A, 0x4D255138, 0x1780C036, 0xEF52A900,
    0xE92E9242, 0x9016632C, 0xC83F8A03, 0xA89A857D, 0x621B4682, 0x4CEB6EC5, 0xF408B4FA,
    0x1068BEDF, 0x3094C255, 0x0E7ABD1E, 0xADDDFB5C, 0x75C2759A, 0x5055E2EF, 0x3D8AA3F0,
    0x507C09DD, 0xC91617B9, 0x12B83F9B, 0xEDE6D346, 0xCBE4E005, 0xA7BF2B91, 0x0B3C1DCE,
    0x7ACD5291, 0x1645BBA3, 0x95BCD336, 0x07E2173B, 0x84C13C9A, 0x86B2C8B2, 0xC35A425A,
    0x8A113192, 0x7C1507A0, 0x0B32A894, 0xD7E4B31B, 0x85426E84, 0x70125E37, 0x6E8B7204,
    0x0CF324BC, 0xC3ED0911, 0xF0043F0F, 0x84288971, 0x3CD93034, 0x8AC25D09, 0x208C692D,
    0x34DD1945, 0x3336CD73, 0x1B8475B8, 0x1BA2E47E, 0xC06E0E83, 0xE8E51844, 0x6F174326,
    0x2D0A0338, 0xCF9180BC, 0x9018FB3E, 0x34C72E50, 0xF93DC473, 0x2FC083E4, 0x041344CB,
    0xF3D4F33C, 0x80D94240, 0x4E09CE33, 0x46493261, 0x5A147057, 0x58E2365F, 0xEC520EC0,
    0x755F6083, 0x1F4EA171, 0x48328C98, 0x23C8F13B, 0x30C05B81, 0x4A100D23, 0x2D8801C0,
    0xCFD67403, 0x999D7B9A, 0x8E6AA1A6, 0x9C47DAF9, 0x1C44B679, 0x0BA2D481, 0xD118CE32,
    0x08FE3F8F, 0xF03B56E0, 0x218133C8, 0x41C1E928, 0x43906113, 0x768858A8, 0xE31884E0,
    0x2246A6E8, 0x8DB25896, 0x9094E538, 0xF4FD3F10, 0x9B204033, 0x3D87F298, 0x4093E0F8,
    0xF2ECB428, 0xDDD574C5, 0xA7012B8A, 0x164C02E4, 0xC6A15829, 0xCAA9BA35, 0x0C73136A,
    0x9A6E8B32, 0x198B72B8, 0x8EC3A109, 0xA108183B, 0x48BE1E86, 0xEE164440, 0x2CC9F424,
    0xDD8184BC, 0x62B4983D, 0x5E151A0B, 0x580A8048, 0x6E8D61A8, 0xC96B6AD8, 0xA6E86A88,
    0xF0AC3A59, 0x18150C32, 0x3A05E128, 0x05E0CD42, 0x3424CD1C, 0x6161A569, 0xA82287B1,
    0x29C9D20C, 0xB03A9C7D, 0x13B86A2D, 0x34123CCF, 0xF315C410, 0x13961A9C, 0x2582CAD9,
    0xE09CE438, 0x30FFA2B2, 0xF4158400, 0x42728C98, 0xCA52647D, 0xF5EF3720, 0x848F2045,
    0x223A1EA2, 0xD1429610, 0xB43D05BB, 0xA3E4F85B, 0x6C2E020F, 0x503486E1, 0x50B38D77,
    0xC6D1682D, 0x9D54F734, 0x2D036180, 0x62A8C22D, 0xDBF5FA98, 0x1806EE8B, 0x8DA8E4DB,
    0xA90955B6, 0x5ED8F61D, 0xDED80DC7, 0xF4C395E9, 0x5E156FDD, 0xF0093E76, 0x84290981,
    0xDF73CCE8, 0x8F4E3962, 0x7E1F8CE2, 0x67844CB6, 0x9E9D132E, 0x2D4AB252, 0xC721306C,
    0x8DD0B420, 0x8B74A228, 0xA0E7BA4E, 0xE6813E73, 0x10140F78, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogMisc )
    EW_BITMAP( ApplicationLogMisc, Default )
EW_END_OF_BITMAP_RES( ApplicationLogMisc )

/* Table with links to derived variants of the bitmap resource : 'Application::LogMisc' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogMisc )

/* Bitmap resource : 'Application::LogFaults' */
EW_DEFINE_BITMAP_RES( ApplicationLogFaults )
  EW_BITMAP_FRAMES( ApplicationLogFaults, Default, EW_DRIVER_VARIANT_RGBA8888, 24, 24, 0 )
    EW_BITMAP_FRAME( 3, 6, 5, 11, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogFaults, Default )         /* ratio 40.97 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x22FD8343, 0x6E97180E, 0xE66F875D,
    0xC7D885D2, 0x86815F8F, 0x1C2A1F0B, 0xC8A49209, 0x3E4F2892, 0x1DAE900C, 0x6EA30BBC,
    0xE1F2EAFD, 0x10709909, 0x17816486, 0x3FAA1388, 0x13A1CADE, 0x80DFB111, 0x9A932194,
    0xA9748A54, 0xE8F37853, 0x6BB54041, 0x77291618, 0x0062B90E, 0x00BD0AC4, 0x03FCA039,
    0x0EC0B62B, 0x886EFB29, 0x93AC93A1, 0xDA635DAC, 0xA13793C5, 0x4C955DA9, 0x201D1645,
    0x1F3559EC, 0x01E8D240, 0x160840E6, 0x86C76479, 0xB1362C55, 0xBD5CC5E3, 0xA712F8CE,
    0xBC59A799, 0xA7CBE0C4, 0xBCDDC10F, 0x65EC01A0, 0x051E4F07, 0x393A9039, 0x8AA3F052,
    0x178DC7BD, 0xFB4C66C3, 0x1A78CE81, 0x97318096, 0x288E8098, 0x01BC90FC, 0xB91BAB84,
    0x7EF62373, 0xB4801856, 0x433398E9, 0x6DF32944, 0xD8D975B6, 0xC0358B63, 0x24BE8A43,
    0xE2DD0270, 0xB90C44D0, 0x9BC962EB, 0x16EAE4C7, 0xD6E8711A, 0x8FD8E879, 0xF478C940,
    0x33B03DEA, 0x04A29409, 0x0F71503E, 0x9811B47A, 0xF9610098, 0x3D655933, 0x110104FD,
    0xE063C05A, 0xD5840362, 0xFC6F11CF, 0xDF358B91, 0x4942A388, 0x8ED3ACE6, 0x386A1806,
    0x660576A1, 0x3B4E5B47, 0x330C62D9, 0x08F1C44A, 0x08208F27, 0xD2273F85, 0xBA6EDB96,
    0x118CF324, 0x62488A20, 0x98E4B986, 0x71C06FA3, 0x642E8B12, 0x82D1A460, 0xE2A918CD,
    0xF8F4E68E, 0x96239063, 0x528AA458, 0x1421558A, 0x079150FD, 0x63F8AC22, 0x1A5600A6,
    0x530F0071, 0x8EA5D3E4, 0x23E955BA, 0x98852290, 0xCE6F9125, 0x6B1602A6, 0x374D4358,
    0x8F80B0E1, 0x501CFA3E, 0x6C942186, 0x7194E792, 0x90E589A6, 0x29297226, 0xF840118A,
    0xE4B0268E, 0x145EC662, 0x165B6459, 0x228A2CF1, 0x29D68E95, 0x226F96A4, 0x7D164FC9,
    0x470A7230, 0xCF64251E, 0x73800A66, 0x38203A4E, 0xC4708219, 0x9CEA49BD, 0x693AA28F,
    0x74D5628A, 0x7CDB3453, 0xF53C82F3, 0x3DC0E3D8, 0x5250259B, 0xF3A8E738, 0xA0550981,
    0x8DAF8DA1, 0x9DEA6B02, 0x2048A291, 0x01BC5D0C, 0x5487198D, 0xEABA09A2, 0x324C22CA,
    0x8014804E, 0x6310BC2A, 0x0EA1A7C5, 0x57AFDB3B, 0x96E90B7E, 0x22ABEAE2, 0xE3020280,
    0x244034CC, 0x69B3ACC4, 0x25C97224, 0xF028E236, 0xABF6DDA8, 0x8AFF9D94, 0x6C5A9B4A,
    0x3B4EA395, 0x8DA4241B, 0x8098E538, 0x606A1582, 0x74BF31A3, 0x4BD2D52A, 0x65F56958,
    0xBCCE6F3F, 0x549822C6, 0x073ED9C2, 0x008FE998, 0x457554A9, 0x30931AC4, 0xF4DC19C5,
    0xFA4957F5, 0x018FB3EC, 0xCCE320B9, 0x51D44F11, 0xF4082C48, 0x393E0540, 0x1744805A,
    0x8BE2B4EA, 0x04245331, 0xC4093E6D, 0x6F2D8818, 0x1126D9AE, 0x4BC1F46C, 0x72E0AF26,
    0xD0F23BC6, 0xEE72C113, 0x048F33C4, 0x46B10E69, 0xAD10BD1F, 0x985208A2, 0xBF2B8DE1,
    0x2F85231C, 0xC42348CC, 0xEDB99965, 0x3C38BEA6, 0x5509CFF1, 0xBD0D91A4, 0x0EE3AAF6,
    0x1414163C, 0x9D4D72C0, 0xAC25409D, 0xD786B2D4, 0x71ACCF60, 0x71040DC4, 0x6AEC3CC5,
    0xEE3B0E72, 0x5E3A8064, 0x4CA5354E, 0xA0D8DA35, 0x24172DB6, 0x863A45E1, 0x3FF99B8B,
    0x38261D85, 0x4338C1E1, 0x87BF0FCD, 0x03F07D96, 0xD899D66D, 0x87614364, 0xE6B0B021,
    0x8C38AA9A, 0x92320751, 0x1B8B32A4, 0xFDBDEB78, 0x1F67C0FC, 0x337FDF40, 0xB72938EE,
    0xC785C300, 0xFD4E5320, 0x809A1806, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogFaults )
    EW_BITMAP( ApplicationLogFaults, Default )
EW_END_OF_BITMAP_RES( ApplicationLogFaults )

/* Table with links to derived variants of the bitmap resource : 'Application::LogFaults' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogFaults )

/* Bitmap resource : 'Application::LogEvents' */
EW_DEFINE_BITMAP_RES( ApplicationLogEvents )
  EW_BITMAP_FRAMES( ApplicationLogEvents, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 20, 0 )
    EW_BITMAP_FRAME( 4, 11, 4, 8, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogEvents, Default )         /* ratio 44.32 % */
    0x12E94F00, 0x1242E596, 0xF00EE92F, 0x214F9298, 0x170D8743, 0x11287C46, 0x188AC5A2,
    0xC89C6A29, 0x0746E2F1, 0x6BC8B042, 0x1CD60A54, 0x88C64E0F, 0xCA03900B, 0x612E963F,
    0x33396CBE, 0x38994D26, 0xC9B4EA6F, 0x9CCFA6B3, 0xC3FE813D, 0x3A0BE4A0, 0x78CC5211,
    0xE774CA13, 0x9E389BCF, 0xB4911BFC, 0x6D2C8B1B, 0xE96809A8, 0xA75069AF, 0x09303742,
    0x2D542E53, 0xEC0A5F5F, 0xEBCFB290, 0xFF51A0D3, 0x27A340FD, 0xF378BB98, 0xB7DBE824,
    0x4C1F00CF, 0x680D08A4, 0xDBADCFD9, 0x11FA50C1, 0x8F8AA4F2, 0x1CF67ABC, 0xC8138928,
    0x34B06196, 0xC288E809, 0x4E23CE0F, 0x0689FE90, 0x001FFA20, 0x3196C45A, 0xCAE41069,
    0x5D5FCBBC, 0x6682A096, 0xE671B6DB, 0x600E944A, 0x253318CB, 0x79688811, 0x3FEDFB07,
    0x30E6601A, 0x1D2E7703, 0xCD91C788, 0x09A4AA1C, 0xB1CC6171, 0x1B65A9FF, 0x3FAA1388,
    0x280FC2FD, 0x3E5F000D, 0xC092087D, 0xB8AB7409, 0xFC50ADD0, 0xC1DA3511, 0xD6719889,
    0x61453BDD, 0x78360D45, 0x0103D0F3, 0xA68E0479, 0xD8DA354C, 0x5910C0F0, 0x4B9FA3C4,
    0x4561000B, 0x62B0963D, 0x08B21A8B, 0x1C138C93, 0x39062134, 0xC0A3FE0F, 0x83D8550F,
    0x9A056A9A, 0xA2692296, 0x27C85005, 0x5F01ECAA, 0xA4F9D857, 0x986012C1, 0xE036CD23,
    0x3D0F10B8, 0xC3D03CF5, 0x130C7819, 0x3C8117A2, 0xE8798A22, 0x68E4E8AD, 0x0EF3B4E8,
    0x01743106, 0x9DC533C7, 0xD91A4550, 0x51CE5378, 0xCF83DCF5, 0xA1EC5702, 0x55C52A48,
    0xEB174470, 0x348CD2FC, 0xE2A93C41, 0xD7862B68, 0xB09500CF, 0x091ACB52, 0x3DC540F8,
    0x9CA7216E, 0x63C0EE3A, 0x1CFB79C1, 0x9E244730, 0x8CD6E234, 0x09120C60, 0x93E66228,
    0xCE2C9C80, 0x00A669A9, 0x0BE02800, 0x8D11BC5C, 0xD1AC435B, 0x26952F47, 0x02AACFE0,
    0x2C4A723C, 0x26A5B871, 0xC3A8E49B, 0xE698070E, 0xA6AEE74A, 0x13E1A2C5, 0x0540F408,
    0x58CD323E, 0x9A2B99E6, 0x5A304B92, 0x1483C018, 0xDDB4C8FA, 0x42A8933E, 0x6EBA1B4B,
    0xFBA72D9A, 0x014FC3F0, 0x09321464, 0xF572C527, 0x84902045, 0xBD2AE2B2, 0xB0455314,
    0x6434CAC3, 0x23C0EC91, 0xE6DB050F, 0xD5A72BCB, 0x0ACE2378, 0x46413C1F, 0x50993238,
    0x34DA1A05, 0x33370D83, 0x3ACE938C, 0xC771481D, 0xC4C8AE21, 0x80F48480, 0x602F4B52,
    0xB6AFA6EC, 0x57BA62FB, 0x96819E5F, 0x9E334D1F, 0x680F93DC, 0xA78C21E4, 0x332C8603,
    0x8A7334C8, 0x894797A9, 0x17715645, 0x330F415B, 0xC3436CD7, 0x5CCF36C7, 0x6E2BCD74,
    0x652E8B02, 0x8CD3ECA8, 0xCA225879, 0x4D1B1E21, 0x86FBD5F4, 0x6B10A639, 0x508BE1F0,
    0x0DD19954, 0x439CE337, 0x5B48D602, 0x01CD36AD, 0x360D331C, 0xC570A439, 0xB064D71A,
    0x64E717C4, 0x672E0AF2, 0x010FDB78, 0x400D1F68, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogEvents )
    EW_BITMAP( ApplicationLogEvents, Default )
EW_END_OF_BITMAP_RES( ApplicationLogEvents )

/* Table with links to derived variants of the bitmap resource : 'Application::LogEvents' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogEvents )

/* Bitmap resource : 'Application::LogFire' */
EW_DEFINE_BITMAP_RES( ApplicationLogFire )
  EW_BITMAP_FRAMES( ApplicationLogFire, Default, EW_DRIVER_VARIANT_RGBA8888, 24, 24, 0 )
    EW_BITMAP_FRAME( 12, 5, 3, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogFire, Default )           /* ratio 49.48 % */
    0x1C09FB00, 0xC11FB020, 0x1A0F0581, 0xA110C84C, 0xF90385C3, 0x6047EBF1, 0x1602C49F,
    0x98BC61F9, 0x8EC6A371, 0x84362912, 0xBF807248, 0x86120293, 0xE5B2B024, 0x5D2F9644,
    0x4F995C52, 0xDC03BEDF, 0x51239DC6, 0x25B318AB, 0x7B2584B1, 0x51687412, 0x1A9142A2,
    0x986B3A4D, 0xB6D226B2, 0x32017381, 0x0391CBE6, 0x699CC264, 0xADD7AB95, 0x4B99C004,
    0x9C494207, 0xE406B640, 0xC02FD280, 0xA16E7FDA, 0x771B7DC0, 0x75BADCAE, 0xE3314845,
    0x10D8DBED, 0x1D6AB15A, 0xAC2C15DC, 0xF0A0C860, 0xD8878330, 0xF2531E01, 0xF94BA5E1,
    0x98BB656E, 0xB622D2EB, 0x87E0498C, 0xA6130B59, 0x3D1E6F08, 0x5D126908, 0xC0B754BA,
    0x04FB290E, 0x1B27F5AC, 0x91C7BF8A, 0x62A8FC15, 0x2B10018F, 0x5F037CF4, 0xEE1EBBF0,
    0xD6D96A7C, 0x89D42595, 0x55B493D6, 0xEEBC2E8A, 0x740ABC5D, 0x94627924, 0x7B9507C0,
    0xB9ACAE29, 0x27520726, 0xA8AC2847, 0xCD4416C1, 0x4A8C5F9E, 0xF3D3A2BD, 0xDA6AB2A7,
    0xC6C3346C, 0x64AEC66D, 0x096114D0, 0x11A8B62B, 0xBC861D85, 0x6012C1A2, 0x325CC398,
    0xD82615CE, 0x73D51474, 0xF80B3E0F, 0x822949A1, 0x16042038, 0x47513CF2, 0xD350B121,
    0xA42C384D, 0x173C0ED3, 0x318BE2B4, 0xCC92E853, 0x52344633, 0x90732C0A, 0x9C24C851,
    0x20C73134, 0x568598B3, 0x323C8017, 0xA49E20CA, 0x4F5347D2, 0x34E308B9, 0xC2D380DC,
    0x468D2567, 0xD0AA24C0, 0x567106D2, 0x1BC473D4, 0xCE02E47F, 0xD4AD6439, 0x4CF23C4E,
    0xA325C7A0, 0x1381D218, 0x80438C62, 0x33F0510E, 0xFE786599, 0x163F5C93, 0x3A85D120,
    0x88C1F45A, 0x48B22A29, 0x7DA142A5, 0xEA39CE15, 0x77DDD07C, 0x8BC9C66F, 0xB110D132,
    0xD4F43C52, 0x8117C0F3, 0x9DCA1240, 0xEA065D99, 0x509D6FA8, 0x68D91A45, 0x26394E23,
    0x452134AC, 0x8961E51D, 0x59CC8728, 0x688418A7, 0x174DD357, 0x1DC093E6, 0x08928494,
    0x1B1279A9, 0xED6FB16A, 0x7D1B0449, 0x3ACE62F0, 0x5D0068ED, 0x54BD114A, 0x743105E8,
    0x1133C701, 0x3BC5A110, 0x4DE364CF, 0x62DD2B0C, 0x1C49334C, 0xA2BAEC67, 0x03679BB6,
    0x4F315C41, 0x2475F37C, 0x38C0451D, 0x18100D33, 0x3A05F128, 0x11D82607, 0xF021353E,
    0xE6EC9865, 0x403DE8F9, 0x3007A1A4, 0x8841D04E, 0x93D65C2C, 0xBDED6630, 0xEE3B0E77,
    0x47509064, 0xCBE2D4A1, 0x23D1C217, 0xB8B32A49, 0xACAA92B1, 0x19C53092, 0x315C5CDC,
    0xC300B729, 0x61145545, 0x28390E03, 0x1A054094, 0x417C5CDB, 0x53A45E12, 0xACE2378D,
    0xEA395090, 0x14C1B3B4, 0x4AD22078, 0x0124FE6D, 0x5CB72047, 0xD7344C5B, 0x1301B0EC,
    0x31739461, 0xC2207915, 0x1EBB958A, 0xBD2D4A00, 0x0E001180, 0x998B1C4F, 0x4324FCAD,
    0xAC37364D, 0x06BEEF94, 0x3E8520F0, 0x03D02175, 0xDDACF815, 0x48CD2FF6, 0xFFBF4413,
    0x8721AC5E, 0x4C44AE56, 0xB0F0D634, 0x3CC2C5E7, 0x090F8D53, 0x378DA341, 0x4E3A4430,
    0xBBCAF05D, 0xE5F7D775, 0x35C5FA27, 0x32C73180, 0x8F63D4F2, 0x9AF55A03, 0x989A1FC0,
    0x82C5C812, 0x7F5FBE13, 0x37BDA509, 0xF24C7510, 0x4CC722C9, 0x2B0E4D83, 0x0AED1B3D,
    0xCD51B059, 0x2D4374C5, 0x90E13675, 0xEE3A8273, 0x208163C0, 0x87E2A09D, 0xEC5DB06B,
    0x8CDBCC32, 0xF7094E63, 0x4BF91582, 0x88F2045E, 0x7A831728, 0xD4F8EF5C, 0x52D516FF,
    0x2B8871DC, 0xFB534A67, 0x6595F7DE, 0x351B6358, 0xB811C0A0, 0x21FD0EC0, 0xAB7281EB,
    0xB08C04CB, 0x6C847685, 0xD6AAAE64, 0x91580857, 0x17A2AC8B, 0xC942A8C5, 0x7741181C,
    0xFB7C83FD, 0xE679CF28, 0xBC06BB21, 0x82147DCA, 0xB26C4521, 0x82A8030F, 0x42B0C417,
    0x85D08E05, 0x848D5075, 0xF15FC2A0, 0x0343478E, 0x035A64AC, 0x0907218C, 0x6C040FA6,
    0x183833A6, 0xB1901D43, 0xEDF61EC3, 0x53DAA06F, 0x82E5BEB7, 0x1A41B82D, 0x2EC5909D,
    0x17A560C6, 0x2F8CF072, 0x50D39A61, 0x60618BB1, 0x4BBA7701, 0x80CE6ACD, 0x02644A88,
    0x0510950F, 0x0B313C22, 0x6581885E, 0x0C99C026, 0x24109009, 0x2890A682, 0xA6560AC1,
    0xBD2AC865, 0x53696D24, 0x891A6824, 0x040569A8, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogFire )
    EW_BITMAP( ApplicationLogFire, Default )
EW_END_OF_BITMAP_RES( ApplicationLogFire )

/* Table with links to derived variants of the bitmap resource : 'Application::LogFire' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogFire )

/* Bitmap resource : 'Application::LogSettings' */
EW_DEFINE_BITMAP_RES( ApplicationLogSettings )
  EW_BITMAP_FRAMES( ApplicationLogSettings, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 10, 4, 3, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogSettings, Default )       /* ratio 31.76 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xD1086C4A, 0xC15CA9A0,
    0xC35908B4, 0x320E57C7, 0x99D98E76, 0xBB914A04, 0x5024F378, 0xA571189C, 0x2B3096CB,
    0x090834B2, 0x02382C95, 0x17F14072, 0x9EBFE740, 0x5CFA7E50, 0x354D8591, 0x41E8F378,
    0xE9932978, 0x134EA7CC, 0x6C55F2B6, 0xFD9D00CA, 0xA2E9202C, 0x70375A8E, 0xDBEDF42C,
    0xA30D8067, 0xFE80944C, 0x558A143B, 0xA131A89E, 0x6C8A75C6, 0x081C361A, 0xA7C1507A,
    0x4C228D56, 0x23765696, 0x5A846E77, 0xB90E7729, 0xAE74DB82, 0xCADF9963, 0x61910BA1,
    0x6A7397C9, 0x5A3512D5, 0x05BE1EEF, 0xCAC53909, 0x18ED4645, 0x313A9242, 0xB5B8DB96,
    0x514AA444, 0x2D835158, 0x41DB4FB3, 0x3311383B, 0x6348074E, 0x6BF4A157, 0x3CCAE410,
    0xB9BEDB69, 0xEE3CCD58, 0x08FC7E3E, 0xA7D3590C, 0x41A16E17, 0xA0C75FAF, 0x653A0BE4,
    0x68D9B2D5, 0x803C9AEE, 0x7D228330, 0x7DBB7ED2, 0x68FFF776, 0xACC39180, 0x1B763A9C,
    0xC7F4AFCC, 0x7F7F005F, 0xC0141402, 0x8270814A, 0xBDEC1FCA, 0x0C7620A7, 0x2287B15E,
    0x8F93E0A9, 0x37E8083E, 0x50CE3050, 0x6C1103F3, 0x01CBC1F4, 0x8F914C3C, 0xC719C45A,
    0x10781983, 0x7A1A03F3, 0x0E001304, 0x2098304F, 0xC4ED3983, 0xF4FD5B96, 0x8E41A167,
    0x1C8B1298, 0xDF04F235, 0xE90E448C, 0x4CF38953, 0x128ED555, 0x300B8295, 0xA0B9145B,
    0xA7C23294, 0x64CF6F1B, 0x4C0C4DD3, 0x848F6426, 0x4470540A, 0x6950EB17, 0xC54191A6,
    0xCF1C05D0, 0x3B8EC39C, 0xD1197419, 0x92D8AD25, 0x908B8CC6, 0x991D4AE2, 0x19CB82BC,
    0xC7E1B445, 0x10E8042E, 0x06673F05, 0xAA280865, 0x6BA721E8, 0x08E1FC5C, 0xC255D729,
    0x386B2D4A, 0xF13BCEB5, 0x1D04E054, 0xA542C884, 0xA2508719, 0xAD4FA3C9, 0x749062D8,
    0x798692DE, 0x8CC318B6, 0x70F65412, 0xA0C31E06, 0xDF35D2BA, 0x8602938C, 0x5D09321A,
    0x5048043F, 0xCCEE16C4, 0x6D1642C8, 0x63EBA350, 0x109B45AC, 0x68CDEA7A, 0xA88A1E85,
    0xD0796CF2, 0x365E053A, 0x45AB1835, 0xF3FE68B2, 0x44C7300A, 0xDDB4ADB1, 0x350C940E,
    0xC100D8D8, 0x33C05810, 0x147513E3, 0xEBBACB12, 0xBCC35B7E, 0x21C8CEF5, 0x43C4BC1F,
    0xF00E3D4F, 0x06B72EDB, 0x21876141, 0xE5775CB0, 0x52AC9438, 0x05FF1B0B, 0x0CBB30B8,
    0x36D12C73, 0xC25394E2, 0x07211945, 0xA4FD0B8E, 0x1DC2803C, 0x00101427, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogSettings )
    EW_BITMAP( ApplicationLogSettings, Default )
EW_END_OF_BITMAP_RES( ApplicationLogSettings )

/* Table with links to derived variants of the bitmap resource : 'Application::LogSettings' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogSettings )

/* Bitmap resource : 'Application::LogSystem' */
EW_DEFINE_BITMAP_RES( ApplicationLogSystem )
  EW_BITMAP_FRAMES( ApplicationLogSystem, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 22, 0 )
    EW_BITMAP_FRAME( 4, 4, 2, 14, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogSystem, Default )         /* ratio 32.44 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xE110C84C, 0xBAD96840, 0x8631D0C1, 0x168A318E,
    0xB86C4A21, 0x8FC761D0, 0x1472430A, 0xC82491E9, 0x34FE5E91, 0x07201512, 0x5F2D7F94,
    0x08F40982, 0x259BC8D4, 0xA92C9E71, 0x02BEDF6F, 0xAB69AACB, 0xC8C03051, 0x21F4F97B,
    0x4B043078, 0x5D3098BC, 0x14EA63FE, 0x019D52A9, 0xF9ED0E82, 0x0049A753, 0xB1480B5C,
    0xD415C853, 0x4CD85916, 0x57CB651B, 0x90C15917, 0x0681F939, 0x78A8304F, 0x6BA542A5,
    0x6530D697, 0xE2D1424C, 0x964585F5, 0x46A0D435, 0x55E833A9, 0xB509AF58, 0x92FBC8D6,
    0x7ACAD472, 0x7CDE6333, 0xCB65B3B9, 0xB361A8C9, 0x8063D901, 0x54D45815, 0x73D9ACFB,
    0x619CD66B, 0xB88C33FF, 0x82906968, 0x3A86CB09, 0x669C0BC3, 0xD30170A6, 0x395C4DB2,
    0x95C6DC12, 0x172A711B, 0x7FBD2CB0, 0xD6CA96EF, 0x70AFEDED, 0x6336CAE5, 0x7E269268,
    0xB80DFAFD, 0x00BCAFEE, 0xD765DEEE, 0xC96CA622, 0x115684F5, 0x3ADBBDF0, 0xE2F0337A,
    0x37372647, 0xAC08FF62, 0x07117C34, 0x70FD9633, 0xD8C11DC6, 0x093E4F83, 0x0C11A48C,
    0xD544D533, 0x1549AF53, 0x8C5A2FDC, 0x9C240724, 0x0E001238, 0x61B6744F, 0x748C8E27,
    0x4DB216A1, 0x0F282118, 0x74CC6462, 0x9097F99C, 0xF8861F7F, 0xC8FF8819, 0xE4379038,
    0x8C02139C, 0x22E8B99D, 0x68E95090, 0xC6158D10, 0x097F0E38, 0x9123E8F1, 0x8D08B952,
    0x4840DE36, 0xCA132813, 0x1A73DCD6, 0x8D624242, 0x08F1C59D, 0xB48C8F27, 0x0E291665,
    0x603C4591, 0x83D35208, 0x5F252547, 0x6671F45D, 0x08FE795F, 0xFD92DFA0, 0x80A009F1,
    0x1F36B604, 0xB3DCF63D, 0x65037BC0, 0xDD76C4E7, 0x4E5B6269, 0x8674C290, 0x22649421,
    0xE288A29B, 0x4017D836, 0x89E03806, 0xDC90864E, 0x1A7A2772, 0x55AD6C68, 0x0AA645D7,
    0x625B4005, 0xEA86BA49, 0x7AD6B2AC, 0x3CD35A56, 0x924813BA, 0xAFAB4941, 0x0CA6B6B6,
    0x1690D935, 0x2D614869, 0x502BC846, 0x1A8570A9, 0x85F6E4D6, 0x3901F3A2, 0x3AD2A29F,
    0x7562AD0B, 0x3F13DB2C, 0x6DFAB005, 0x5354CA01, 0x2921AEAC, 0xAD9660C8, 0xBAA6B531,
    0x401A460D, 0xCB8EC5B9, 0xAD25BDEA, 0x2A175968, 0xAEEF828D, 0x55FBFD5F, 0x545D158B,
    0x0A5594F0, 0x004055EC, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogSystem )
    EW_BITMAP( ApplicationLogSystem, Default )
EW_END_OF_BITMAP_RES( ApplicationLogSystem )

/* Table with links to derived variants of the bitmap resource : 'Application::LogSystem' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogSystem )

/* Bitmap resource : 'Application::LogTest' */
EW_DEFINE_BITMAP_RES( ApplicationLogTest )
  EW_BITMAP_FRAMES( ApplicationLogTest, Default, EW_DRIVER_VARIANT_RGBA8888, 26, 24, 0 )
    EW_BITMAP_FRAME( 10, 14, 4, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLogTest, Default )           /* ratio 42.95 % */
    0x0409FF00, 0xC11FF020, 0xFE0F0581, 0x9E2ED00B, 0x8AB509BC, 0x89F25B31, 0x1530AF16,
    0x68C4662F, 0x8EC6A391, 0x1C82431B, 0xC7A4B1F9, 0x4594BC30, 0x1EEF5223, 0x630905BE,
    0x50699C22, 0xE26D41A6, 0x71E899CA, 0x0330CF06, 0x53E8A43C, 0x3D8AA3F0, 0x1E9146A2,
    0x2934BA2D, 0x9F50A553, 0xB54A754A, 0x3A023DA9, 0xC223F0A2, 0x71AF0FA6, 0xB075D6E9,
    0xCDACB0A9, 0x34FC5B00, 0xC8C1352A, 0x166B7696, 0xA8C4AA61, 0x753A2BD4, 0x6BC5E6EF,
    0xBEDEAF97, 0x09CD616B, 0xE1AF673C, 0xDEFF87BE, 0x12283305, 0xA83D0428, 0xA8833BE0,
    0x98B22652, 0xB0D00669, 0x1D398C04, 0x4318EC64, 0x861DEED7, 0x966935CC, 0x1FAFC7E5,
    0x05B07F01, 0x9AAB36A0, 0x4307E9B4, 0xC17BC4B2, 0x82B44DE5, 0xB59F6601, 0xBA8BA480,
    0x04F4681F, 0x9E6F1773, 0x13AAE104, 0x2CD632DE, 0xBA5826C9, 0x9E8700CA, 0x7A3C60DA,
    0xC8401EF5, 0x96458F0D, 0x47B6D436, 0xB890BF5F, 0x99CAE471, 0xF65EE73B, 0x8532787B,
    0x70A27126, 0x6CBB0B84, 0x027390E1, 0x27D9097D, 0xA1E6791E, 0xB4775EA7, 0x7B801775,
    0x5CB725C7, 0x57B1CF73, 0x08FE6C16, 0xFC44D110, 0x0E4017F9, 0x8463FC50, 0xA2E87F1B,
    0x58F03B8E, 0xE3819F40, 0x79DE5165, 0x9C1409E9, 0x1715C385, 0xD2147C61, 0x2D049F27,
    0x34C6D168, 0xE418861F, 0xF509403F, 0x449B2386, 0x056B0FB2, 0x8222C6CC, 0x60D82E30,
    0x08DA0F83, 0x59F384DF, 0x6A00A188, 0x25898228, 0xE2098643, 0xB0666342, 0x4CE717C4,
    0xE0939D57, 0x8262E81D, 0xA0442E31, 0xB95E108C, 0x40C36CE3, 0x090F4D53, 0x3DC540F8,
    0x66390A62, 0x814CFFA0, 0xDCAD2207, 0x6F93DAA9, 0x9CE32946, 0xA12959ED, 0xF3AE0CA2,
    0x28153C4E, 0xB6204711, 0x3FA20008, 0x62000E43, 0x01429E3F, 0x1E63A0EA, 0xF914C3C0,
    0x2C4A723C, 0xE8C94871, 0x4A3E0A8B, 0x4E7566A3, 0x4B40E39A, 0x260053F2, 0x8682DCAE,
    0x295E8452, 0xB8B32A49, 0x845BD6D1, 0x2C1BA6E2, 0xE21320C1, 0x29C2B340, 0xBE557725,
    0x06966BA7, 0x39CE3371, 0x85208824, 0xCA10DE19, 0x2D116799, 0xDF4244B3, 0x084E9398,
    0xD5A56257, 0x21381D90, 0x8CDB38C6, 0xD5094E63, 0xADE72A3A, 0xA38AE60E, 0x73D8F473,
    0x005D030F, 0x8428C8F2, 0x15840032, 0xC9C200F4, 0x63F48029, 0x9D6400F1, 0x193B8EC3,
    0x24884188, 0xC410349E, 0x2840F315, 0x78BE2D8A, 0xFFAD6FD1, 0xB65A8832, 0x06B108EA,
    0xB8ECBE1F, 0xD4AE2908, 0x433F2F21, 0x1E2ACAAA, 0x88828895, 0x4024F94B, 0xD0F33C1F,
    0xB0AB8103, 0x3E6C9B1E, 0xC073ECFA, 0xE8CE71CA, 0x80017B32, 0xE0190500, 0x2DCAD25C,
    0x8BF2B869, 0xDB2C5231, 0xE73B90CE, 0x87288961, 0x3E4F83D8, 0x617A400A, 0x83F7166C,
    0xB66DB531, 0x90D56B48, 0x5CD71006, 0x83CB82DE, 0x13107819, 0xD850A8EA, 0x0D2C0861,
    0xDCB7243D, 0x300B5F54, 0xA1FA3B00, 0xEC822949, 0xFD142A2C, 0x1E4680F8, 0xE02800C2,
    0x859393E3, 0x5B7AD2B4, 0x0CD5EB6B, 0x2A89396E, 0x6CE1B4B4, 0x714B3B3C, 0x60AE21C7,
    0x28390E03, 0x3B4E98EC, 0x7BF05CF0, 0x0F0BC3F0, 0x1FC4F1BC, 0xCAF2FC5F, 0x061B6F1F,
    0x0CE31CB8, 0xCC430E12, 0x3B724F93, 0x24C886ED, 0x1B0FA917, 0xC942648C, 0xC2AA2989,
    0xF056310B, 0x580A9BE6, 0xFB0D61AC, 0x7EFFC3EE, 0x4FC7F3FB, 0xDFF8FCBF, 0x570A7F4F,
    0x998D71AC, 0x648C8268, 0x6C3E87CC, 0xCA1862CD, 0x8A048268, 0x287705B0, 0x925F4BA5,
    0xE1EC3D47, 0xCCA59380, 0x8220116C, 0xC191DE16, 0x8390760D, 0x07A1041A, 0x12C1F843,
    0x1B84F092, 0x6703605C, 0x343885F0, 0x58C41683, 0xB3661306, 0x23506425, 0x01A0381B,
    0x0CC0E618, 0x0C41340E, 0x27C428E4, 0xA807B154, 0xAC748D49, 0x9512129B, 0x155E9AA8,
    0xA05E82C0, 0x9118C803, 0xF12C9592, 0x62CBA58A, 0xB924B712, 0x8BD16224, 0x1262645A,
    0x00000203, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLogTest )
    EW_BITMAP( ApplicationLogTest, Default )
EW_END_OF_BITMAP_RES( ApplicationLogTest )

/* Table with links to derived variants of the bitmap resource : 'Application::LogTest' */
EW_RES_WITHOUT_VARIANTS( ApplicationLogTest )

/* Initializer for the class 'Application::CAEName' */
void ApplicationCAEName__Init( ApplicationCAEName _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NameText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NumText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationCAEName );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0275 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0275 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0062 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0276 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0276 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0062 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0277 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0278 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreView_OnSetLayout((CoreView)&_this->NameText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->NameText, _Const0279 );
  ViewsText_OnSetAlignment( &_this->NameText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NameText, EwLoadString( &_Const006A ));
  CoreView_OnSetLayout((CoreView)&_this->NumText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->NumText, _Const027A );
  ViewsText_OnSetAlignment( &_this->NumText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NumText, EwLoadString( &_Const027B ));
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NameText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NumText ), 0 );
  ViewsText_OnSetFont( &_this->NameText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->NumText, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::CAEName' */
void ApplicationCAEName__ReInit( ApplicationCAEName _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->NameText );
  ViewsText__ReInit( &_this->NumText );
}

/* Finalizer method for the class 'Application::CAEName' */
void ApplicationCAEName__Done( ApplicationCAEName _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationCAEName );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->NameText );
  ViewsText__Done( &_this->NumText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::CAEName' */
void ApplicationCAEName__Mark( ApplicationCAEName _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->NameText );
  EwMarkObject( &_this->NumText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationCAEName_UpdateLayout( ApplicationCAEName _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationCAEName_UpdateViewState( ApplicationCAEName _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateSelected ) == CoreViewStateSelected ))
  {
    ViewsBevel_OnSetColorB( &_this->Bevel, _Const027C );
    ViewsBevel_OnSetColorL( &_this->Bevel, _Const005E );
    ViewsBevel_OnSetColorT( &_this->Bevel, _Const005E );
    ViewsBevel_OnSetColorR( &_this->Bevel, _Const027C );
    CoreRectView__OnSetBounds( &_this->NameText, EwSetRectPoint1( _this->NameText.Super1.Bounds, 
    _Const027D ));
  }
  else
  {
    CoreRectView__OnSetBounds( &_this->NameText, EwSetRectPoint1( _this->NameText.Super1.Bounds, 
    _Const027E ));
    ViewsBevel_OnSetColorB( &_this->Bevel, _Const005E );
    ViewsBevel_OnSetColorL( &_this->Bevel, _Const027C );
    ViewsBevel_OnSetColorT( &_this->Bevel, _Const027C );
    ViewsBevel_OnSetColorR( &_this->Bevel, _Const005E );
  }
}

/* Variants derived from the class : 'Application::CAEName' */
EW_DEFINE_CLASS_VARIANTS( ApplicationCAEName )
EW_END_OF_CLASS_VARIANTS( ApplicationCAEName )

/* Virtual Method Table (VMT) for the class : 'Application::CAEName' */
EW_DEFINE_CLASS( ApplicationCAEName, CoreGroup, "Application::CAEName" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationCAEName_UpdateLayout,
  ApplicationCAEName_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationCAEName )

/* Initializer for the class 'Application::Keyboard' */
void ApplicationKeyboard__Init( ApplicationKeyboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationKeyLetter__Init( &_this->Key, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key1, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key2, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key3, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key4, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key5, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key6, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key7, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key8, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key9, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key10, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key11, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key12, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key13, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key14, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key15, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key16, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key17, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key18, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key20, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key21, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key22, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key23, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key24, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key25, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key26, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key28, &_this->_XObject, 0 );
  ApplicationKeyBmp__Init( &_this->KeybBmp1, &_this->_XObject, 0 );
  ApplicationKeyBmp__Init( &_this->KeybBmp2, &_this->_XObject, 0 );
  ApplicationKeySwitch__Init( &_this->KeySwitch, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->Touch, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeyboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const027F );
  CoreView_OnSetLayout((CoreView)&_this->Key, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key, _Const0280 );
  _this->Key.KeyChar = 'Q';
  CoreView_OnSetLayout((CoreView)&_this->Key1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key1, _Const0281 );
  _this->Key1.KeyChar = 'W';
  CoreView_OnSetLayout((CoreView)&_this->Key2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key2, _Const0282 );
  _this->Key2.KeyChar = 'E';
  CoreView_OnSetLayout((CoreView)&_this->Key3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key3, _Const0283 );
  _this->Key3.KeyChar = 'R';
  CoreView_OnSetLayout((CoreView)&_this->Key4, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key4, _Const0284 );
  _this->Key4.KeyChar = 'T';
  CoreView_OnSetLayout((CoreView)&_this->Key5, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key5, _Const0285 );
  _this->Key5.KeyChar = 'Y';
  CoreView_OnSetLayout((CoreView)&_this->Key6, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key6, _Const0286 );
  _this->Key6.KeyChar = 'U';
  CoreView_OnSetLayout((CoreView)&_this->Key7, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key7, _Const0287 );
  _this->Key7.KeyChar = 'I';
  CoreView_OnSetLayout((CoreView)&_this->Key8, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key8, _Const0288 );
  _this->Key8.KeyChar = 'O';
  CoreView_OnSetLayout((CoreView)&_this->Key9, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key9, _Const0289 );
  _this->Key9.KeyChar = 'P';
  CoreView_OnSetLayout((CoreView)&_this->Key10, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key10, _Const028A );
  _this->Key10.KeyChar = 'A';
  CoreView_OnSetLayout((CoreView)&_this->Key11, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key11, _Const028B );
  _this->Key11.KeyChar = 'S';
  CoreView_OnSetLayout((CoreView)&_this->Key12, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key12, _Const028C );
  _this->Key12.KeyChar = 'D';
  CoreView_OnSetLayout((CoreView)&_this->Key13, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key13, _Const028D );
  _this->Key13.KeyChar = 'F';
  CoreView_OnSetLayout((CoreView)&_this->Key14, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key14, _Const028E );
  _this->Key14.KeyChar = 'G';
  CoreView_OnSetLayout((CoreView)&_this->Key15, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key15, _Const028F );
  _this->Key15.KeyChar = 'H';
  CoreView_OnSetLayout((CoreView)&_this->Key16, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key16, _Const0290 );
  _this->Key16.KeyChar = 'J';
  CoreView_OnSetLayout((CoreView)&_this->Key17, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key17, _Const0291 );
  _this->Key17.KeyChar = 'K';
  CoreView_OnSetLayout((CoreView)&_this->Key18, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key18, _Const0292 );
  _this->Key18.KeyChar = 'L';
  CoreView_OnSetLayout((CoreView)&_this->Key20, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key20, _Const0293 );
  _this->Key20.KeyChar = 'Z';
  CoreView_OnSetLayout((CoreView)&_this->Key21, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key21, _Const0294 );
  _this->Key21.KeyChar = 'X';
  CoreView_OnSetLayout((CoreView)&_this->Key22, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key22, _Const0295 );
  _this->Key22.KeyChar = 'C';
  CoreView_OnSetLayout((CoreView)&_this->Key23, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key23, _Const0296 );
  _this->Key23.KeyChar = 'V';
  CoreView_OnSetLayout((CoreView)&_this->Key24, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key24, _Const0297 );
  _this->Key24.KeyChar = 'B';
  CoreView_OnSetLayout((CoreView)&_this->Key25, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key25, _Const0298 );
  _this->Key25.KeyChar = 'N';
  CoreView_OnSetLayout((CoreView)&_this->Key26, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key26, _Const0299 );
  _this->Key26.KeyChar = 'M';
  CoreView_OnSetLayout((CoreView)&_this->Key28, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key28, _Const029A );
  _this->Key28.KeyChar = 0x0020;
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp1, _Const029B );
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp2, _Const029C );
  CoreView_OnSetLayout((CoreView)&_this->KeySwitch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeySwitch, _Const029D );
  EwRetainString( &_this->KeySwitch.Word, EwLoadString( &_Const029E ));
  CoreView_OnSetLayout((CoreView)&_this->Touch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->Touch, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->Touch, _Const029F );
  CoreQuadView__OnSetPoint2( &_this->Touch, _Const02A0 );
  CoreQuadView__OnSetPoint1( &_this->Touch, _Const02A1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key17 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key18 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key20 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key21 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key22 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeySwitch ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Touch ), 0 );
  _this->KeybBmp1.Bitmap = EwLoadResource( &OldResourcesKeyCapsShift, ResourcesBitmap 
  );
  _this->KeybBmp2.Bitmap = EwLoadResource( &OldResourcesKeyBackspace, ResourcesBitmap 
  );
  _this->Touch.OnRelease = EwNewSlot( _this, ApplicationKeyboard_ReleaseSlot );
  _this->Touch.OnPress = EwNewSlot( _this, ApplicationKeyboard_PressSlot );
}

/* Re-Initializer for the class 'Application::Keyboard' */
void ApplicationKeyboard__ReInit( ApplicationKeyboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationKeyLetter__ReInit( &_this->Key );
  ApplicationKeyLetter__ReInit( &_this->Key1 );
  ApplicationKeyLetter__ReInit( &_this->Key2 );
  ApplicationKeyLetter__ReInit( &_this->Key3 );
  ApplicationKeyLetter__ReInit( &_this->Key4 );
  ApplicationKeyLetter__ReInit( &_this->Key5 );
  ApplicationKeyLetter__ReInit( &_this->Key6 );
  ApplicationKeyLetter__ReInit( &_this->Key7 );
  ApplicationKeyLetter__ReInit( &_this->Key8 );
  ApplicationKeyLetter__ReInit( &_this->Key9 );
  ApplicationKeyLetter__ReInit( &_this->Key10 );
  ApplicationKeyLetter__ReInit( &_this->Key11 );
  ApplicationKeyLetter__ReInit( &_this->Key12 );
  ApplicationKeyLetter__ReInit( &_this->Key13 );
  ApplicationKeyLetter__ReInit( &_this->Key14 );
  ApplicationKeyLetter__ReInit( &_this->Key15 );
  ApplicationKeyLetter__ReInit( &_this->Key16 );
  ApplicationKeyLetter__ReInit( &_this->Key17 );
  ApplicationKeyLetter__ReInit( &_this->Key18 );
  ApplicationKeyLetter__ReInit( &_this->Key20 );
  ApplicationKeyLetter__ReInit( &_this->Key21 );
  ApplicationKeyLetter__ReInit( &_this->Key22 );
  ApplicationKeyLetter__ReInit( &_this->Key23 );
  ApplicationKeyLetter__ReInit( &_this->Key24 );
  ApplicationKeyLetter__ReInit( &_this->Key25 );
  ApplicationKeyLetter__ReInit( &_this->Key26 );
  ApplicationKeyLetter__ReInit( &_this->Key28 );
  ApplicationKeyBmp__ReInit( &_this->KeybBmp1 );
  ApplicationKeyBmp__ReInit( &_this->KeybBmp2 );
  ApplicationKeySwitch__ReInit( &_this->KeySwitch );
  CoreSimpleTouchHandler__ReInit( &_this->Touch );
}

/* Finalizer method for the class 'Application::Keyboard' */
void ApplicationKeyboard__Done( ApplicationKeyboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeyboard );

  /* Finalize all embedded objects */
  ApplicationKeyLetter__Done( &_this->Key );
  ApplicationKeyLetter__Done( &_this->Key1 );
  ApplicationKeyLetter__Done( &_this->Key2 );
  ApplicationKeyLetter__Done( &_this->Key3 );
  ApplicationKeyLetter__Done( &_this->Key4 );
  ApplicationKeyLetter__Done( &_this->Key5 );
  ApplicationKeyLetter__Done( &_this->Key6 );
  ApplicationKeyLetter__Done( &_this->Key7 );
  ApplicationKeyLetter__Done( &_this->Key8 );
  ApplicationKeyLetter__Done( &_this->Key9 );
  ApplicationKeyLetter__Done( &_this->Key10 );
  ApplicationKeyLetter__Done( &_this->Key11 );
  ApplicationKeyLetter__Done( &_this->Key12 );
  ApplicationKeyLetter__Done( &_this->Key13 );
  ApplicationKeyLetter__Done( &_this->Key14 );
  ApplicationKeyLetter__Done( &_this->Key15 );
  ApplicationKeyLetter__Done( &_this->Key16 );
  ApplicationKeyLetter__Done( &_this->Key17 );
  ApplicationKeyLetter__Done( &_this->Key18 );
  ApplicationKeyLetter__Done( &_this->Key20 );
  ApplicationKeyLetter__Done( &_this->Key21 );
  ApplicationKeyLetter__Done( &_this->Key22 );
  ApplicationKeyLetter__Done( &_this->Key23 );
  ApplicationKeyLetter__Done( &_this->Key24 );
  ApplicationKeyLetter__Done( &_this->Key25 );
  ApplicationKeyLetter__Done( &_this->Key26 );
  ApplicationKeyLetter__Done( &_this->Key28 );
  ApplicationKeyBmp__Done( &_this->KeybBmp1 );
  ApplicationKeyBmp__Done( &_this->KeybBmp2 );
  ApplicationKeySwitch__Done( &_this->KeySwitch );
  CoreSimpleTouchHandler__Done( &_this->Touch );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Keyboard' */
void ApplicationKeyboard__Mark( ApplicationKeyboard _this )
{
  EwMarkObject( &_this->Key );
  EwMarkObject( &_this->Key1 );
  EwMarkObject( &_this->Key2 );
  EwMarkObject( &_this->Key3 );
  EwMarkObject( &_this->Key4 );
  EwMarkObject( &_this->Key5 );
  EwMarkObject( &_this->Key6 );
  EwMarkObject( &_this->Key7 );
  EwMarkObject( &_this->Key8 );
  EwMarkObject( &_this->Key9 );
  EwMarkObject( &_this->Key10 );
  EwMarkObject( &_this->Key11 );
  EwMarkObject( &_this->Key12 );
  EwMarkObject( &_this->Key13 );
  EwMarkObject( &_this->Key14 );
  EwMarkObject( &_this->Key15 );
  EwMarkObject( &_this->Key16 );
  EwMarkObject( &_this->Key17 );
  EwMarkObject( &_this->Key18 );
  EwMarkObject( &_this->Key20 );
  EwMarkObject( &_this->Key21 );
  EwMarkObject( &_this->Key22 );
  EwMarkObject( &_this->Key23 );
  EwMarkObject( &_this->Key24 );
  EwMarkObject( &_this->Key25 );
  EwMarkObject( &_this->Key26 );
  EwMarkObject( &_this->Key28 );
  EwMarkObject( &_this->KeybBmp1 );
  EwMarkObject( &_this->KeybBmp2 );
  EwMarkObject( &_this->KeySwitch );
  EwMarkObject( &_this->Touch );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationKeyboard_UpdateLayout( ApplicationKeyboard _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKeyboard_UpdateViewState( ApplicationKeyboard _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Keyboard.PressSlot()' */
void ApplicationKeyboard_PressSlot( ApplicationKeyboard _this, XObject sender )
{
  ApplicationKey k;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  k = EwCastObject( _this->Super1.first, ApplicationKey );

  while ( k != 0 )
  {
    if ( EwIsPointInRect( k->Super2.Bounds, _this->Touch.HittingPos ))
    {
      ApplicationKey__OnSetPressed( k, 1 );
      CoreGroup_InvalidateViewState((CoreGroup)k );
    }

    k = EwCastObject( k->Super3.next, ApplicationKey );
  }
}

/* 'C' function for method : 'Application::Keyboard.ReleaseSlot()' */
void ApplicationKeyboard_ReleaseSlot( ApplicationKeyboard _this, XObject sender )
{
  ApplicationKey k;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  k = EwCastObject( _this->Super1.first, ApplicationKey );

  while ( k != 0 )
  {
    if ( EwIsPointInRect( k->Super2.Bounds, _this->Touch.HittingPos ))
    {
      ApplicationKey__OnSetPressed( k, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)k );
    }

    k = EwCastObject( k->Super3.next, ApplicationKey );
  }
}

/* Variants derived from the class : 'Application::Keyboard' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeyboard )
EW_END_OF_CLASS_VARIANTS( ApplicationKeyboard )

/* Virtual Method Table (VMT) for the class : 'Application::Keyboard' */
EW_DEFINE_CLASS( ApplicationKeyboard, CoreGroup, "Application::Keyboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKeyboard_UpdateLayout,
  ApplicationKeyboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationKeyboard )

/* Initializer for the class 'Application::Key' */
void ApplicationKey__Init( ApplicationKey _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKey );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02A2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const02A3 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const02A4 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const02A5 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 4 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const000A );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const02A6 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const02A6 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
}

/* Re-Initializer for the class 'Application::Key' */
void ApplicationKey__ReInit( ApplicationKey _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
}

/* Finalizer method for the class 'Application::Key' */
void ApplicationKey__Done( ApplicationKey _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKey );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Key' */
void ApplicationKey__Mark( ApplicationKey _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationKey_UpdateLayout( ApplicationKey _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKey_UpdateViewState( ApplicationKey _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->Pressed )
  {
    ViewsRectangle_OnSetColor( &_this->Rectangle, _Const02A7 );
  }
  else
  {
    ViewsRectangle_OnSetColor( &_this->Rectangle, _Const02A4 );
  }
}

/* 'C' function for method : 'Application::Key.OnSetPressed()' */
void ApplicationKey_OnSetPressed( ApplicationKey _this, XBool value )
{
  if ( _this->Pressed == value )
    return;

  _this->Pressed = value;
}

/* Wrapper function for the virtual method : 'Application::Key.OnSetPressed()' */
void ApplicationKey__OnSetPressed( void* _this, XBool value )
{
  ((ApplicationKey)_this)->_VMT->OnSetPressed((ApplicationKey)_this, value );
}

/* Variants derived from the class : 'Application::Key' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKey )
EW_END_OF_CLASS_VARIANTS( ApplicationKey )

/* Virtual Method Table (VMT) for the class : 'Application::Key' */
EW_DEFINE_CLASS( ApplicationKey, CoreGroup, "Application::Key" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKey_UpdateLayout,
  ApplicationKey_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  ApplicationKey_OnSetPressed,
EW_END_OF_CLASS( ApplicationKey )

/* Bitmap resource : 'Application::Fire4Bitmap' */
EW_DEFINE_BITMAP_RES( ApplicationFire4Bitmap )
  EW_BITMAP_FRAMES( ApplicationFire4Bitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 32, 0 )
    EW_BITMAP_FRAME( 9, 5, 3, 16, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationFire4Bitmap, Default )       /* ratio 31.25 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xDF50984C, 0xD0067DBE, 0x81877BB5, 0x0B8BC221,
    0x97C3DA07, 0x5B28814F, 0x9A78BCBE, 0xBD4C4BC5, 0x5816F87B, 0xA152C8CC, 0x312F95CB,
    0x51D8DCBA, 0x7E542750, 0x6409C494, 0x7EBF1F8B, 0x950A6004, 0x15403059, 0x5156893D,
    0x9D85C238, 0xE4B15323, 0xB43A04F8, 0x0698D565, 0x872381B1, 0x349544E2, 0x80E402D9,
    0xAA522FF2, 0xAAAE6F59, 0x1CADE995, 0xC602113A, 0x764B13FA, 0xC53B9947, 0x7783B5D2,
    0x9955AD61, 0xEBADD2E3, 0x97C96190, 0x25FF7473, 0x57EB751E, 0x2358BF17, 0x44E0EC27,
    0x89C4B8CC, 0x53616457, 0x7ABD1E2D, 0x5CC3200F, 0x2D504722, 0xA71563CC, 0x345389B6,
    0x3906D7D1, 0x0E431134, 0x63C4D935, 0xE4EA4D08, 0x6E34E0DA, 0x56D85AE0, 0x88753B7D,
    0x39BE6528, 0x9E0EC884, 0xF97A0A3C, 0x781006F6, 0x04E1F0F0, 0x27E14474, 0x0F3ADD0E,
    0x62850F90, 0xEA7AE795, 0xDD5A97E1, 0x9EAF234A, 0x186C073D, 0x9D34A265, 0x7457A951,
    0xFFDF17CC, 0x5C2BD32F, 0x05D64067, 0xA28C8F20, 0xB608711F, 0xD31B45A0, 0x3B8EC39C,
    0x8640E819, 0xC55CC61D, 0x24083E91, 0x73180354, 0x70E0732C, 0x09E24874, 0x21319023,
    0x7CB420C7, 0x648ADE78, 0x2A09C205, 0xC6E1187F, 0xC4C0BA1F, 0x40726398, 0x282389D2,
    0x00C093E5, 0x22A3F563, 0xC23C717F, 0x1D9023C9, 0x0890D495, 0x0F408626, 0x47D3E054,
    0x920CA526, 0x6CD632D0, 0x3C018353, 0x078FA148, 0x4E218C4E, 0xF3A8E738, 0xD9C39301,
    0x45641F87, 0x8B26891E, 0x4C22C608, 0x34244F32, 0xF47D1AC4, 0x630E1C32, 0x9BCC81D4,
    0x0CE305FC, 0x06403F35, 0x80BD2D4A, 0xA9936801, 0x308BA29D, 0x0F33C059, 0x0900103D,
    0x2E709085, 0x4D52D89A, 0x0153E3ED, 0x4E637D90, 0x0A68213A, 0x548819E7, 0xDF358992,
    0x9302A388, 0x4FE14171, 0xD81DDB76, 0x49B09226, 0x5D0C1036, 0xA98D01BC, 0x03E02564,
    0xC2F8F715, 0x3042348C, 0x9521C669, 0x1080E268, 0xDC33C858, 0x914C3C01, 0x4E66990F,
    0xA723D097, 0xB00712C4, 0x44C06E08, 0x0030E518, 0x1CF41584, 0xCC314B58, 0x97A5C12C,
    0xAAAAA1C3, 0xF7B532B6, 0x644303DE, 0x8BB80F11, 0x384DD352, 0xEFABE02C, 0x036CD270,
    0xFEF40B8E, 0x86195065, 0x81C9B250, 0xDFCA6296, 0x4384D9A2, 0x6C2E09CE, 0x893486E1,
    0x19852089, 0xABAC24DE, 0x79D27241, 0x88951E20, 0x62980882, 0x354CAB82, 0x0680D8DA,
    0x92609622, 0x20791518, 0x57C88AC2, 0x3B4EA395, 0xCAE81C1B, 0xD148C72F, 0xCCDC360C,
    0x8B9464F0, 0xCBD2147E, 0x4FEAC731, 0xF2448318, 0x16B9CF09, 0x893F2B45, 0x3BAC4B09,
    0x4123CCF1, 0xE28C8A42, 0xAA8B1D8A, 0x962608A1, 0x2386F424, 0xC422449B, 0x82F87C1A,
    0xBD2EC2B5, 0x6D624FAB, 0x24C9A230, 0x80454D30, 0x19319C66, 0xFC7B1A84, 0x230052B2,
    0x02934495, 0x19E4BB77, 0x80A98968, 0xCCD61AC5, 0x57035EE3, 0x310BC2A9, 0xC2993056,
    0x135C6B15, 0x40C374F9, 0x310F4D53, 0x33C70174, 0x8ED3ACE6, 0x63F59006, 0x92E200FB,
    0x9665207B, 0x4CB59E9D, 0x63DABAAC, 0x37C72202, 0x542681DF, 0xBE368681, 0x647CDDE3,
    0x4C52F4AB, 0x80FE0715, 0x3CC11E86, 0xBEEFFDAF, 0xA65C2701, 0x1F4F19A9, 0xBF9723F7,
    0xA8E44B7D, 0x07070EC3, 0x13A732CA, 0x3E4F9BE7, 0x099ED864, 0x2CE5EE67, 0xFCFC4067,
    0x350C84CB, 0x70C1C0D9, 0x5C8B0134, 0xCE7FA198, 0x0D029F9B, 0x24F59E92, 0x30760A06,
    0x828A2C04, 0xF025F940, 0x11312E82, 0x93C2748A, 0x83F055C7, 0x3BC75903, 0x468151E2,
    0x73160294, 0x063F5DB0, 0x04834200, 0x00000004, 0x00000000

  EW_BITMAPS_TABLE( ApplicationFire4Bitmap )
    EW_BITMAP( ApplicationFire4Bitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationFire4Bitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::Fire4Bitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationFire4Bitmap )

/* Initializer for the class 'Application::KeyLetter' */
void ApplicationKeyLetter__Init( ApplicationKeyLetter _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeyLetter );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const02A2 );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const02A8 );
  _this->KeyChar = 'A';
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::KeyLetter' */
void ApplicationKeyLetter__ReInit( ApplicationKeyLetter _this )
{
  /* At first re-initialize the super class ... */
  ApplicationKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'Application::KeyLetter' */
void ApplicationKeyLetter__Done( ApplicationKeyLetter _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeyLetter );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  ApplicationKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::KeyLetter' */
void ApplicationKeyLetter__Mark( ApplicationKeyLetter _this )
{
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  ApplicationKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKeyLetter_UpdateViewState( ApplicationKeyLetter _this, XSet aState )
{
  ApplicationKey_UpdateViewState((ApplicationKey)_this, aState );
  ViewsText_OnSetString( &_this->Text, EwNewStringChar( _this->KeyChar, 1 ));
}

/* 'C' function for method : 'Application::KeyLetter.OnSetPressed()' */
void ApplicationKeyLetter_OnSetPressed( ApplicationKeyLetter _this, XBool value )
{
  if ( value == 1 )
  {
    CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeNoKey, 
    _this->KeyChar, 1 );
    CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeNoKey, 
    _this->KeyChar, 0 );
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'Application::KeyLetter' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeyLetter )
EW_END_OF_CLASS_VARIANTS( ApplicationKeyLetter )

/* Virtual Method Table (VMT) for the class : 'Application::KeyLetter' */
EW_DEFINE_CLASS( ApplicationKeyLetter, ApplicationKey, "Application::KeyLetter" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKey_UpdateLayout,
  ApplicationKeyLetter_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  ApplicationKeyLetter_OnSetPressed,
EW_END_OF_CLASS( ApplicationKeyLetter )

/* Initializer for the class 'Application::KeyBmp' */
void ApplicationKeyBmp__Init( ApplicationKeyBmp _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeyBmp );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const02A2 );
  ViewsImage_OnSetFrameNumber( &_this->Image, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  _this->Bitmap = EwLoadResource( &OldResourcesInformationIcon, ResourcesBitmap 
  );
}

/* Re-Initializer for the class 'Application::KeyBmp' */
void ApplicationKeyBmp__ReInit( ApplicationKeyBmp _this )
{
  /* At first re-initialize the super class ... */
  ApplicationKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'Application::KeyBmp' */
void ApplicationKeyBmp__Done( ApplicationKeyBmp _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeyBmp );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  ApplicationKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::KeyBmp' */
void ApplicationKeyBmp__Mark( ApplicationKeyBmp _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( _this->Bitmap );

  /* Give the super class a chance to mark its objects and references */
  ApplicationKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKeyBmp_UpdateViewState( ApplicationKeyBmp _this, XSet aState )
{
  ApplicationKey_UpdateViewState((ApplicationKey)_this, aState );
  ViewsImage_OnSetBitmap( &_this->Image, _this->Bitmap );
}

/* 'C' function for method : 'Application::KeyBmp.OnSetPressed()' */
void ApplicationKeyBmp_OnSetPressed( ApplicationKeyBmp _this, XBool value )
{
  if ( value == 1 )
  {
    if ( _this->Bitmap == EwLoadResource( &OldResourcesKeyBackspace, ResourcesBitmap 
        ))
    {
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeBackspace, 
      0x0000, 1 );
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeBackspace, 
      0x0000, 0 );
    }
    else
      if ( _this->Bitmap == EwLoadResource( &OldResourcesKeyCapsShift, ResourcesBitmap 
          ))
      {
        ApplicationKey k = EwCastObject( _this->Super4.Owner->first, ApplicationKey 
          );

        while ( k != 0 )
        {
          ApplicationKeyLetter lk = EwCastObject( k, ApplicationKeyLetter );

          if ( lk != 0 )
          {
            if ( lk->KeyChar < 'a' )
            {
              lk->KeyChar = EwGetCharLower( lk->KeyChar );
            }
            else
            {
              lk->KeyChar = EwGetCharUpper( lk->KeyChar );
            }

            CoreGroup_InvalidateViewState((CoreGroup)lk );
          }

          k = EwCastObject( k->Super3.next, ApplicationKey );
        }
      }
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'Application::KeyBmp' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeyBmp )
EW_END_OF_CLASS_VARIANTS( ApplicationKeyBmp )

/* Virtual Method Table (VMT) for the class : 'Application::KeyBmp' */
EW_DEFINE_CLASS( ApplicationKeyBmp, ApplicationKey, "Application::KeyBmp" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKey_UpdateLayout,
  ApplicationKeyBmp_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  ApplicationKeyBmp_OnSetPressed,
EW_END_OF_CLASS( ApplicationKeyBmp )

/* Initializer for the class 'Application::KeySwitch' */
void ApplicationKeySwitch__Init( ApplicationKeySwitch _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationKeySwitch );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const02A2 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  EwRetainString( &_this->Word, EwLoadString( &_Const02A9 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::KeySwitch' */
void ApplicationKeySwitch__ReInit( ApplicationKeySwitch _this )
{
  /* At first re-initialize the super class ... */
  ApplicationKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'Application::KeySwitch' */
void ApplicationKeySwitch__Done( ApplicationKeySwitch _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationKeySwitch );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );

  /* Release all used strings */
  EwReleaseString( &_this->Word );

  /* Don't forget to deinitialize the super class ... */
  ApplicationKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::KeySwitch' */
void ApplicationKeySwitch__Mark( ApplicationKeySwitch _this )
{
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  ApplicationKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationKeySwitch_UpdateViewState( ApplicationKeySwitch _this, XSet aState )
{
  ApplicationKey_UpdateViewState((ApplicationKey)_this, aState );
  ViewsText_OnSetString( &_this->Text, _this->Word );
}

/* 'C' function for method : 'Application::KeySwitch.OnSetPressed()' */
void ApplicationKeySwitch_OnSetPressed( ApplicationKeySwitch _this, XBool value )
{
  if ( value == 1 )
  {
    ApplicationMattsKeyboard kbd = EwCastObject( _this->Super4.Owner->Super2.Owner, 
      ApplicationMattsKeyboard );

    if ( CoreGroup_OnGetVisible((CoreGroup)&kbd->Numboard ) == 1 )
    {
      CoreGroup_OnSetVisible((CoreGroup)&kbd->Keyboard, 1 );
      CoreGroup_OnSetVisible((CoreGroup)&kbd->Numboard, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 0 );
    }
    else
    {
      CoreGroup_OnSetVisible((CoreGroup)&kbd->Keyboard, 0 );
      CoreGroup_OnSetVisible((CoreGroup)&kbd->Numboard, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 1 );
    }
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'Application::KeySwitch' */
EW_DEFINE_CLASS_VARIANTS( ApplicationKeySwitch )
EW_END_OF_CLASS_VARIANTS( ApplicationKeySwitch )

/* Virtual Method Table (VMT) for the class : 'Application::KeySwitch' */
EW_DEFINE_CLASS( ApplicationKeySwitch, ApplicationKey, "Application::KeySwitch" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationKey_UpdateLayout,
  ApplicationKeySwitch_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  ApplicationKeySwitch_OnSetPressed,
EW_END_OF_CLASS( ApplicationKeySwitch )

/* Initializer for the class 'Application::Numboard' */
void ApplicationNumboard__Init( ApplicationNumboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationKeyLetter__Init( &_this->Key, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key1, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key2, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key3, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key10, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key11, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key12, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key13, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key14, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key15, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key20, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key21, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key22, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key23, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key24, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key25, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key26, &_this->_XObject, 0 );
  ApplicationKeyBmp__Init( &_this->KeybBmp1, &_this->_XObject, 0 );
  ApplicationKeySwitch__Init( &_this->KeySwitch, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key27, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key16, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key28, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key29, &_this->_XObject, 0 );
  ApplicationKeyLetter__Init( &_this->Key30, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->Touch, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationNumboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02AA );
  CoreView_OnSetLayout((CoreView)&_this->Key, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key, _Const0281 );
  _this->Key.KeyChar = '7';
  CoreView_OnSetLayout((CoreView)&_this->Key1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key1, _Const0282 );
  _this->Key1.KeyChar = '8';
  CoreView_OnSetLayout((CoreView)&_this->Key2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key2, _Const0283 );
  _this->Key2.KeyChar = '9';
  CoreView_OnSetLayout((CoreView)&_this->Key3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key3, _Const02AB );
  _this->Key3.KeyChar = '+';
  CoreView_OnSetLayout((CoreView)&_this->Key10, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key10, _Const02AC );
  _this->Key10.KeyChar = '4';
  CoreView_OnSetLayout((CoreView)&_this->Key11, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key11, _Const02AD );
  _this->Key11.KeyChar = '5';
  CoreView_OnSetLayout((CoreView)&_this->Key12, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key12, _Const02AE );
  _this->Key12.KeyChar = '6';
  CoreView_OnSetLayout((CoreView)&_this->Key13, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key13, _Const02AF );
  _this->Key13.KeyChar = '-';
  CoreView_OnSetLayout((CoreView)&_this->Key14, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key14, _Const02B0 );
  _this->Key14.KeyChar = '0';
  CoreView_OnSetLayout((CoreView)&_this->Key15, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key15, _Const02B1 );
  _this->Key15.KeyChar = '=';
  CoreView_OnSetLayout((CoreView)&_this->Key20, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key20, _Const0293 );
  _this->Key20.KeyChar = '1';
  CoreView_OnSetLayout((CoreView)&_this->Key21, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key21, _Const0294 );
  _this->Key21.KeyChar = '2';
  CoreView_OnSetLayout((CoreView)&_this->Key22, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key22, _Const0295 );
  _this->Key22.KeyChar = '3';
  CoreView_OnSetLayout((CoreView)&_this->Key23, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key23, _Const02B2 );
  _this->Key23.KeyChar = '*';
  CoreView_OnSetLayout((CoreView)&_this->Key24, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key24, _Const02B3 );
  _this->Key24.KeyChar = '/';
  CoreView_OnSetLayout((CoreView)&_this->Key25, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key25, _Const02B4 );
  _this->Key25.KeyChar = '&';
  CoreView_OnSetLayout((CoreView)&_this->Key26, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key26, _Const02B5 );
  _this->Key26.KeyChar = '$';
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp1, _Const02B6 );
  CoreView_OnSetLayout((CoreView)&_this->KeySwitch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeySwitch, _Const029D );
  EwRetainString( &_this->KeySwitch.Word, EwLoadString( &_Const02B7 ));
  CoreView_OnSetLayout((CoreView)&_this->Key27, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key27, _Const02B8 );
  _this->Key27.KeyChar = 0x00A3;
  CoreView_OnSetLayout((CoreView)&_this->Key16, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key16, _Const02B9 );
  _this->Key16.KeyChar = ')';
  CoreView_OnSetLayout((CoreView)&_this->Key28, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key28, _Const02BA );
  _this->Key28.KeyChar = '#';
  CoreView_OnSetLayout((CoreView)&_this->Key29, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key29, _Const02BB );
  _this->Key29.KeyChar = '(';
  CoreView_OnSetLayout((CoreView)&_this->Key30, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key30, _Const02BC );
  _this->Key30.KeyChar = '@';
  CoreView_OnSetLayout((CoreView)&_this->Touch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->Touch, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->Touch, _Const02BD );
  CoreQuadView__OnSetPoint2( &_this->Touch, _Const02BE );
  CoreQuadView__OnSetPoint1( &_this->Touch, _Const02A1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key20 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key21 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key22 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeySwitch ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key27 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key29 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key30 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Touch ), 0 );
  _this->KeybBmp1.Bitmap = EwLoadResource( &OldResourcesKeyShift, ResourcesBitmap 
  );
  _this->Touch.OnRelease = EwNewSlot( _this, ApplicationNumboard_ReleaseSlot );
  _this->Touch.OnPress = EwNewSlot( _this, ApplicationNumboard_PressSlot );
}

/* Re-Initializer for the class 'Application::Numboard' */
void ApplicationNumboard__ReInit( ApplicationNumboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationKeyLetter__ReInit( &_this->Key );
  ApplicationKeyLetter__ReInit( &_this->Key1 );
  ApplicationKeyLetter__ReInit( &_this->Key2 );
  ApplicationKeyLetter__ReInit( &_this->Key3 );
  ApplicationKeyLetter__ReInit( &_this->Key10 );
  ApplicationKeyLetter__ReInit( &_this->Key11 );
  ApplicationKeyLetter__ReInit( &_this->Key12 );
  ApplicationKeyLetter__ReInit( &_this->Key13 );
  ApplicationKeyLetter__ReInit( &_this->Key14 );
  ApplicationKeyLetter__ReInit( &_this->Key15 );
  ApplicationKeyLetter__ReInit( &_this->Key20 );
  ApplicationKeyLetter__ReInit( &_this->Key21 );
  ApplicationKeyLetter__ReInit( &_this->Key22 );
  ApplicationKeyLetter__ReInit( &_this->Key23 );
  ApplicationKeyLetter__ReInit( &_this->Key24 );
  ApplicationKeyLetter__ReInit( &_this->Key25 );
  ApplicationKeyLetter__ReInit( &_this->Key26 );
  ApplicationKeyBmp__ReInit( &_this->KeybBmp1 );
  ApplicationKeySwitch__ReInit( &_this->KeySwitch );
  ApplicationKeyLetter__ReInit( &_this->Key27 );
  ApplicationKeyLetter__ReInit( &_this->Key16 );
  ApplicationKeyLetter__ReInit( &_this->Key28 );
  ApplicationKeyLetter__ReInit( &_this->Key29 );
  ApplicationKeyLetter__ReInit( &_this->Key30 );
  CoreSimpleTouchHandler__ReInit( &_this->Touch );
}

/* Finalizer method for the class 'Application::Numboard' */
void ApplicationNumboard__Done( ApplicationNumboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationNumboard );

  /* Finalize all embedded objects */
  ApplicationKeyLetter__Done( &_this->Key );
  ApplicationKeyLetter__Done( &_this->Key1 );
  ApplicationKeyLetter__Done( &_this->Key2 );
  ApplicationKeyLetter__Done( &_this->Key3 );
  ApplicationKeyLetter__Done( &_this->Key10 );
  ApplicationKeyLetter__Done( &_this->Key11 );
  ApplicationKeyLetter__Done( &_this->Key12 );
  ApplicationKeyLetter__Done( &_this->Key13 );
  ApplicationKeyLetter__Done( &_this->Key14 );
  ApplicationKeyLetter__Done( &_this->Key15 );
  ApplicationKeyLetter__Done( &_this->Key20 );
  ApplicationKeyLetter__Done( &_this->Key21 );
  ApplicationKeyLetter__Done( &_this->Key22 );
  ApplicationKeyLetter__Done( &_this->Key23 );
  ApplicationKeyLetter__Done( &_this->Key24 );
  ApplicationKeyLetter__Done( &_this->Key25 );
  ApplicationKeyLetter__Done( &_this->Key26 );
  ApplicationKeyBmp__Done( &_this->KeybBmp1 );
  ApplicationKeySwitch__Done( &_this->KeySwitch );
  ApplicationKeyLetter__Done( &_this->Key27 );
  ApplicationKeyLetter__Done( &_this->Key16 );
  ApplicationKeyLetter__Done( &_this->Key28 );
  ApplicationKeyLetter__Done( &_this->Key29 );
  ApplicationKeyLetter__Done( &_this->Key30 );
  CoreSimpleTouchHandler__Done( &_this->Touch );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Numboard' */
void ApplicationNumboard__Mark( ApplicationNumboard _this )
{
  EwMarkObject( &_this->Key );
  EwMarkObject( &_this->Key1 );
  EwMarkObject( &_this->Key2 );
  EwMarkObject( &_this->Key3 );
  EwMarkObject( &_this->Key10 );
  EwMarkObject( &_this->Key11 );
  EwMarkObject( &_this->Key12 );
  EwMarkObject( &_this->Key13 );
  EwMarkObject( &_this->Key14 );
  EwMarkObject( &_this->Key15 );
  EwMarkObject( &_this->Key20 );
  EwMarkObject( &_this->Key21 );
  EwMarkObject( &_this->Key22 );
  EwMarkObject( &_this->Key23 );
  EwMarkObject( &_this->Key24 );
  EwMarkObject( &_this->Key25 );
  EwMarkObject( &_this->Key26 );
  EwMarkObject( &_this->KeybBmp1 );
  EwMarkObject( &_this->KeySwitch );
  EwMarkObject( &_this->Key27 );
  EwMarkObject( &_this->Key16 );
  EwMarkObject( &_this->Key28 );
  EwMarkObject( &_this->Key29 );
  EwMarkObject( &_this->Key30 );
  EwMarkObject( &_this->Touch );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationNumboard_UpdateLayout( ApplicationNumboard _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationNumboard_UpdateViewState( ApplicationNumboard _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Numboard.PressSlot()' */
void ApplicationNumboard_PressSlot( ApplicationNumboard _this, XObject sender )
{
  ApplicationKey k;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  k = EwCastObject( _this->Super1.first, ApplicationKey );

  while ( k != 0 )
  {
    if ( EwIsPointInRect( k->Super2.Bounds, _this->Touch.HittingPos ))
    {
      ApplicationKey__OnSetPressed( k, 1 );
      CoreGroup_InvalidateViewState((CoreGroup)k );
    }

    k = EwCastObject( k->Super3.next, ApplicationKey );
  }
}

/* 'C' function for method : 'Application::Numboard.ReleaseSlot()' */
void ApplicationNumboard_ReleaseSlot( ApplicationNumboard _this, XObject sender )
{
  ApplicationKey k;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  k = EwCastObject( _this->Super1.first, ApplicationKey );

  while ( k != 0 )
  {
    if ( EwIsPointInRect( k->Super2.Bounds, _this->Touch.HittingPos ))
    {
      ApplicationKey__OnSetPressed( k, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)k );
    }

    k = EwCastObject( k->Super3.next, ApplicationKey );
  }
}

/* Variants derived from the class : 'Application::Numboard' */
EW_DEFINE_CLASS_VARIANTS( ApplicationNumboard )
EW_END_OF_CLASS_VARIANTS( ApplicationNumboard )

/* Virtual Method Table (VMT) for the class : 'Application::Numboard' */
EW_DEFINE_CLASS( ApplicationNumboard, CoreGroup, "Application::Numboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationNumboard_UpdateLayout,
  ApplicationNumboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationNumboard )

/* Initializer for the class 'Application::MattsKeyboard' */
void ApplicationMattsKeyboard__Init( ApplicationMattsKeyboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationKeyboard__Init( &_this->Keyboard, &_this->_XObject, 0 );
  ApplicationNumboard__Init( &_this->Numboard, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMattsKeyboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const027F );
  CoreView_OnSetLayout((CoreView)&_this->Keyboard, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Keyboard, _Const027F );
  CoreView_OnSetLayout((CoreView)&_this->Numboard, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Numboard, _Const02AA );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Numboard, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&_this->Numboard, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Keyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Numboard ), 0 );
}

/* Re-Initializer for the class 'Application::MattsKeyboard' */
void ApplicationMattsKeyboard__ReInit( ApplicationMattsKeyboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationKeyboard__ReInit( &_this->Keyboard );
  ApplicationNumboard__ReInit( &_this->Numboard );
}

/* Finalizer method for the class 'Application::MattsKeyboard' */
void ApplicationMattsKeyboard__Done( ApplicationMattsKeyboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMattsKeyboard );

  /* Finalize all embedded objects */
  ApplicationKeyboard__Done( &_this->Keyboard );
  ApplicationNumboard__Done( &_this->Numboard );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MattsKeyboard' */
void ApplicationMattsKeyboard__Mark( ApplicationMattsKeyboard _this )
{
  EwMarkObject( &_this->Keyboard );
  EwMarkObject( &_this->Numboard );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMattsKeyboard_UpdateLayout( ApplicationMattsKeyboard _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMattsKeyboard_UpdateViewState( ApplicationMattsKeyboard _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::MattsKeyboard' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMattsKeyboard )
EW_END_OF_CLASS_VARIANTS( ApplicationMattsKeyboard )

/* Virtual Method Table (VMT) for the class : 'Application::MattsKeyboard' */
EW_DEFINE_CLASS( ApplicationMattsKeyboard, CoreGroup, "Application::MattsKeyboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMattsKeyboard_UpdateLayout,
  ApplicationMattsKeyboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMattsKeyboard )

/* Initializer for the class 'Application::ImportConfigPopup' */
void ApplicationImportConfigPopup__Init( ApplicationImportConfigPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationImportConfigPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02BF );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle4, _Const02C0 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle6, _Const02C1 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const015F );
  CoreRectView__OnSetBounds( &_this->Image, _Const02C2 );
  CoreRectView__OnSetBounds( &_this->Image2, _Const02C3 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const02C4 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0165 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const02C5 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const02C6 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const02C7 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const02C8 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationLaptopBitmap, 
  ResourcesBitmap ));
  ViewsImage_OnSetBitmap( &_this->Image2, EwLoadResource( &ApplicationUSBStick, 
  ResourcesBitmap ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationImportConfigPopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationImportConfigPopup_USBSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNewSlot( _this, ApplicationImportConfigPopup_ConfigSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::ImportConfigPopup' */
void ApplicationImportConfigPopup__ReInit( ApplicationImportConfigPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsImage__ReInit( &_this->Image2 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'Application::ImportConfigPopup' */
void ApplicationImportConfigPopup__Done( ApplicationImportConfigPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationImportConfigPopup );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsImage__Done( &_this->Image2 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ImportConfigPopup' */
void ApplicationImportConfigPopup__Mark( ApplicationImportConfigPopup _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Image2 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::ImportConfigPopup.CancelSlot()' */
void ApplicationImportConfigPopup_CancelSlot( ApplicationImportConfigPopup _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ImportConfigPopup.USBSlot()' */
void ApplicationImportConfigPopup_USBSlot( ApplicationImportConfigPopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* 'C' function for method : 'Application::ImportConfigPopup.ConfigSlot()' */
void ApplicationImportConfigPopup_ConfigSlot( ApplicationImportConfigPopup _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
  {
    Command cmd;
    Command0( CMD_LOAD_SETTINGS_USB_SERIAL, &cmd );
  }
}

/* Variants derived from the class : 'Application::ImportConfigPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationImportConfigPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationImportConfigPopup )

/* Virtual Method Table (VMT) for the class : 'Application::ImportConfigPopup' */
EW_DEFINE_CLASS( ApplicationImportConfigPopup, ApplicationPopup, "Application::ImportConfigPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationImportConfigPopup )

/* Bitmap resource : 'Application::USBStick' */
EW_DEFINE_BITMAP_RES( ApplicationUSBStick )
  EW_BITMAP_FRAMES( ApplicationUSBStick, Default, EW_DRIVER_VARIANT_RGBA8888, 96, 66, 0 )
    EW_BITMAP_FRAME( 37, 20, 35, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationUSBStick, Default )          /* ratio 15.21 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2,
    0x0819B607, 0x2EC782A8, 0x1C8A4319, 0xC9A4B249, 0xAA532893, 0x25A1994C, 0xD930029B,
    0x2FF02CC1, 0x067FCD84, 0xC09BFE72, 0x0840DB93, 0x1D0A832B, 0xD1A8B44A, 0x282327A3,
    0xA9A010F5, 0x34FF81A7, 0xA447FD48, 0x583F3FEA, 0xFAD9D5FF, 0x9C57856F, 0x7D881D3A,
    0x03ECA334, 0xAAD368A4, 0xEDB6CB5D, 0x3B701EC0, 0x69DB9840, 0x0F7FDD80, 0xC1D3FEF2,
    0xBF92DFF7, 0xFE089EFF, 0xBFF0A7C7, 0x21FF8846, 0x8C4FFC5A, 0x332D7FE3, 0xF9404BFC,
    0x6807589F, 0xCCDE6ADC, 0x81E7B3B9, 0x99A83552, 0x81A72EA9, 0xFF52297F, 0x5FFAC243,
    0x61AED793, 0x6FF27E0B, 0xC17FED91, 0xC653FF72, 0xDFA69FFB, 0x8F090AFF, 0x821FE4DD,
    0x632993E3, 0xCB1CC113, 0xA3D0E7E7, 0xA3086F4B, 0x11A51A7A, 0xFED809D2, 0xAA7783CF,
    0x17175F56, 0xECFCBC4F, 0xFFD2927F, 0x9FFEC62B, 0xC6FFF7B5, 0xABC7FFC9, 0x85F57A3E,
    0x0EABFCF9, 0x0176DFE3, 0xE0205CFF, 0xD04D3C35, 0x260874C0, 0xDE50A0A8, 0x71C19079,
    0xDFF26808, 0xF854123F, 0x943D5C0F, 0xB086DE47, 0x79DC5871, 0x8FF269BF, 0xC3FE2433,
    0x962389CC, 0xFF8ACDB8, 0x3FE2E370, 0x8FF8C4AE, 0xB3FE3423, 0x0A018DC6, 0xFF4CCFF8,
    0x2323E030, 0xC0C9042A, 0x39164482, 0x4E480354, 0x4824E100, 0x5D8FF036, 0x1C871803,
    0x976DDA76, 0x641F4206, 0x5C028189, 0x94A50262, 0xC323FC08, 0x6130FF98, 0xA61D86A6,
    0xE69A9E39, 0x2358860D, 0x272294FF, 0xC89DBA6E, 0x3E28898C, 0xE23FE7A3, 0x34CFF9F4,
    0xC9D3FE80, 0x262587A0, 0x9D60A1C5, 0x308EE106, 0xA3E4617D, 0xC3844A90, 0xC8F812A4,
    0x36132480, 0x4D3FC015, 0xA7C1D3FE, 0x2A2060FF, 0x354134A3, 0x2A5C3A10, 0x4F698970,
    0x085365DE, 0xEB2124FF, 0x8AD44E3F, 0xDEB89AE6, 0xF979EBAA, 0xAFC863FD, 0xCC99CE71,
    0x9B0CFFB0, 0xF2779E0C, 0x819FCCA6, 0x3FECE39E, 0x4FFB44C2, 0x73FED424, 0xD8FFB5C8,
    0x51AB6DA0, 0x5E4D340E, 0xE911480F, 0x3186E4B8, 0xE29A3850, 0xEC0B17A5, 0xBBC433FE,
    0x1556017E, 0xB755FB11, 0x10FF4F13, 0xE93FEFA0, 0x3FC1780A, 0xD81C0442, 0x5AEA1E60,
    0x9E6CC1F0, 0xFFC2C8C7, 0x3FF0E2F4, 0x1BEC44BE, 0xF23A3470, 0xFF182D8F, 0xC8C6CCB3,
    0x8ADBD6EE, 0xA7E9F0DB, 0x27DF242C, 0x915C5689, 0x4DBF32A0, 0x34562659, 0xEE402503,
    0x70419CCC, 0xF1503819, 0x343FD918, 0x0F8FFCF4, 0xC453FF40, 0x3ACEB1D0, 0xCD653FEF,
    0x4C08CFF0, 0xD3C1B3FF, 0x1E75F57B, 0x6D52B9C2, 0x3AB56C30, 0x5C160FF1, 0xD7C713FF,
    0xCA0B62D6, 0x6260FFD8, 0x5AC0AFB6, 0xBA3FF6A2, 0x300FFDB4, 0xCBF3FF70, 0xAC731ADC,
    0xE4CD3FEC, 0x7C380FFD, 0xDFCD73FF, 0xF82298FF, 0xDE148F3F, 0x551E63D8, 0x1C342890,
    0xCD332E34, 0xF494A790, 0x023EA903, 0xFC04BE95, 0xFFE6C0B3, 0x3FF9E01C, 0xED9E8420,
    0x20FB40B6, 0x26B2D134, 0x49BD1E01, 0x0D74DD2F, 0xAB6AD3B0, 0x59B3B4D5, 0xFFB81530,
    0x57EEC693, 0xEFC80565, 0x480EFCFF, 0x622BC0F0, 0xFCA5B07C, 0xFFF2CC43, 0xDA3CE2A0,
    0x1C370486, 0xBDD4B2C9, 0x4B77C74C, 0xE2C8BDA3, 0x3FCCE8A4, 0x4FFF8490, 0x83FFE414,
    0xAA413FDD, 0xECE44120, 0x17B8948B, 0xE1337903, 0xC02594A2, 0x8613A6F2, 0x36E8C20E,
    0xD0F41CFC, 0xEA9A2845, 0xA63AD68E, 0xB01FE08D, 0xAAD5C1AB, 0x1606BB66, 0xF8517C87,
    0xF8261907, 0x90583C8F, 0x1E13C378, 0xC1A83706, 0x7C2F020E, 0x25C7F890, 0xB3B65846,
    0xC14E8F51, 0x56F3DE68, 0x1C7FC2C1, 0x231D85E3, 0x41A8F7D1, 0xE6DCDAC3, 0xD5204B2F,
    0xBEB2063F, 0x2230F9F6, 0x0490A80E, 0xCF2E91BA, 0xA91FE01D, 0x4CBED7CA, 0x70FF1025,
    0xF3FC7F47, 0x2800E99F, 0xAD21D5C0, 0xE03BAE2C, 0xC0B8B60D, 0x6B27922E, 0x1882F0FF,
    0x328741FF, 0x680FE3FE, 0x3CF020E4, 0xBA35C198, 0xFC708DB1, 0xF8E62087, 0xF1D84F8F,
    0x849B1962, 0xC208371E, 0x4ECC3D86, 0x208618FF, 0x428941FF, 0x880C03FE, 0xBF0E578C,
    0x3A1FC3C4, 0x88272072, 0xD52C0364, 0x4A25CC08, 0x55639C73, 0x800898BA, 0x7F31361D,
    0xFF56D3A2, 0x00BA774A, 0x058ACEA6, 0x560FDA6C, 0x813645E9, 0xF8586B91, 0xD9661BC7,
    0x31A83F3B, 0xA5BC6C8E, 0x41A9732E, 0x7A01FE34, 0x2AA43484, 0xE63CA986, 0x83702B19,
    0x07328353, 0x51DC1B46, 0xF2DC9141, 0xF87A0024, 0x0A89C8C8, 0x94B06803, 0xCDA73312,
    0x93884D45, 0x54270CD2, 0x513FB940, 0x5594B14A, 0x0D162024, 0xB81C8FF8, 0x71C595B3,
    0x40D03FE6, 0xE1EC7FCF, 0xA37CBB9E, 0x87357B2E, 0x8D319E7E, 0x4067D4BC, 0x13C7D8E3,
    0x871FE9BE, 0xE4AE8292, 0x361D4389, 0x628F9AB2, 0xD0B60B17, 0x2BA46DA4, 0xC05B9B89,
    0xCE27EF36, 0x9C138226, 0x29228CE4, 0x754A78A9, 0x099D8D2A, 0xC31815D4, 0xE07FD2C0,
    0xC4F9A5E1, 0xF97D3EA5, 0xF4D8368F, 0xE9C8471F, 0x03F9563F, 0x57B05209, 0x2EA98D03,
    0xE9544103, 0xBF9FE215, 0xCB5282D4, 0x02862674, 0x850F4786, 0xB5FC7468, 0x622E2300,
    0x14E44642, 0xD1EA1C92, 0xA3F276AE, 0x2768ED5E, 0x91CE6A43, 0x5668CEA2, 0x5301E549,
    0xB0F39E4A, 0x1548ADE1, 0x2A692E6A, 0xAF8EBA87, 0xC1C2937C, 0xD7C0823F, 0x827046BB,
    0x1E87F864, 0x81572B06, 0xC3A6561A, 0x1420A39B, 0xCE7E98C3, 0x885B1FE1, 0x7AB3342C,
    0xB54A6A19, 0xC053492D, 0x08A0205C, 0x8932591E, 0x5864DD59, 0xD1D5FAC1, 0x4FAC769A,
    0x78B6E50C, 0xEA9C5AC0, 0x45B00BF4, 0x93F8A228, 0x93BE76C5, 0x297061A5, 0x5BCA834C,
    0xB7E211E0, 0x708370FF, 0xC89E48AD, 0x8E1FE16E, 0xD32F6B8D, 0xFC3A4658, 0x2DD00EC3,
    0xFA85622C, 0x70D8425B, 0x82B8FF11, 0xA0089D76, 0x2D165EA8, 0x36831442, 0x245195D3,
    0x62BB8972, 0xD5692F4D, 0x66F45A7B, 0xD35103E9, 0x40CC3FC1, 0xE1647FDF, 0x1A5457BE,
    0x387BF610, 0x69F34031, 0xD75AD81B, 0xE9081A88, 0x4738581A, 0xE0C9CF4D, 0x18C260C0,
    0x88779726, 0x5B703FF0, 0x7151D69E, 0x70307AB0, 0xE1C0FB50, 0xC3E14C7F, 0x72409AF7,
    0xC738C012, 0xFA28777D, 0xAEFD42BB, 0xA9FA9501, 0x5DE801EB, 0x3BDB8CAF, 0xF276D2E3,
    0x0213014B, 0x2FEB2564, 0x3B94828E, 0x15EED4EC, 0x57BA2740, 0x480CE3FD, 0x9561F0D6,
    0x3832BC3C, 0x7620C3D9, 0x51FE0E67, 0x94EF2A82, 0x03860C95, 0xE4E97593, 0xBDE3FC32,
    0x3448163E, 0x28825CAA, 0x0828389C, 0xAD9A80B0, 0x817DB971, 0x663592EB, 0x4CE58DAF,
    0x8E3574E7, 0x82A8FF03, 0x9AA3519E, 0x4BF7AF38, 0xF9E68652, 0x3957575A, 0xC3B7B96C,
    0x0423DC2B, 0xC931D84B, 0xEA644C40, 0x1C9772B2, 0xA1DAE854, 0x9099FD5E, 0x9202678B,
    0xA7849F33, 0xA880A008, 0x2FA3C10F, 0xA2BCAA75, 0x699FB39D, 0x6F39EACC, 0x884A1FF6,
    0x0BF63FF5, 0x9AB73804, 0x14EDEBCE, 0x83CB5879, 0x02D9A87F, 0x863596B0, 0x0264BD0F,
    0x7DC383FF, 0x107EB070, 0x9F61CBAD, 0x7130D372, 0xE1160399, 0xC02F6A82, 0x700127D3,
    0x0D520615, 0xCDE6574D, 0xAAB55C96, 0x45E71D6F, 0xE80A1399, 0xC9AE310E, 0x7771EECD,
    0x9E1F9D92, 0x4482FA02, 0xD189FDE4, 0x30EEC70B, 0x694DF7B3, 0x1FFB227D, 0x6402FDB0,
    0x7F4E125A, 0x43712355, 0x0E4A36C2, 0xE4431030, 0x1997DA2C, 0x3DDDBAF1, 0x484F8AF1,
    0xF3C82465, 0x715A259E, 0xD6FC7771, 0x1827323C, 0x1BDB4CC1, 0xD3D261AD, 0x691C77E5,
    0xA34C726A, 0x30D74217, 0x9E1415A0, 0xA168FF92, 0x66D177D4, 0xEED9BF12, 0x9C1C538F,
    0xAF0F2CD7, 0x8F39F73B, 0x1EE7BD1B, 0x73156217, 0xF0C9703C, 0x34640835, 0xD975CAA3,
    0x4C09805C, 0xA2362E9B, 0x128E6819, 0x5C4088E6, 0xBA469102, 0x70A9D9B4, 0x3FECFD23,
    0x7936A26F, 0xF5AD3B2A, 0x8F69E8F8, 0x0EE7CFBB, 0x56CB8C4E, 0x3003ADA1, 0xEC3DE594,
    0x0F305AA0, 0xCEE790FF, 0x472A94BE, 0x5C01DC60, 0x0A4CC937, 0xB0A80850, 0x8559D5EA,
    0x6BDBDD3B, 0xE0BB6AC9, 0x0286E81F, 0x4D10539F, 0xBDBE7BC9, 0x3FE84AE9, 0x3AFA4144,
    0x6F9671DE, 0x3C77CEE8, 0xB818AACE, 0x35B5999E, 0xDC27EC81, 0x7C0761D2, 0xA6882ADE,
    0x9031B6A5, 0x243E24B3, 0x6440253C, 0xC228B108, 0xDCE7779F, 0xD7DCBCF9, 0x37BD2E9B,
    0x97D00774, 0xBF27F2B8, 0x525A26FC, 0x2628966D, 0x7DCFB431, 0xDA4261B3, 0xAD3F07D4,
    0xA8847B5D, 0x6041A54C, 0xFD5661D2, 0x87DF8205, 0x8050BDE4, 0x6DBC3410, 0x123224BF,
    0x6707E1ED, 0xD398A9C4, 0x029A8BF2, 0x927F87F9, 0x567A5E57, 0x0B10FF05, 0x630FF808,
    0x30FF0A03, 0x42A80E0A, 0xB44B20A8, 0x07D328B4, 0x54C1A115, 0x7021704C, 0xB23E23D1,
    0x7EC28B51, 0x7C1117EE, 0xF04F03A1, 0x2E90CF6B, 0x504DA62E, 0x382C8025, 0x52921367,
    0x3C7E8460, 0x18347D57, 0x68067380, 0x3A09C4EF, 0x50FF4288, 0x6AF0FF5D, 0x5C7FF3E7,
    0x671E8355, 0x02749149, 0x4475E7B0, 0x18204477, 0x00310A82, 0x9E083519, 0x129D2FB5,
    0x81532D5A, 0x4A2E97F8, 0xB79B4108, 0x77285851, 0x4674128B, 0x857971C6, 0x5B170081,
    0x2607135F, 0x68098073, 0x2D15D81B, 0x3A7560C2, 0x183685F6, 0x6774494E, 0xBF84D7E9,
    0xE0038057, 0x4DE0832F, 0x494491DC, 0x28756A94, 0x1AB20579, 0x147431AD, 0xF71582D8,
    0x0A44A425, 0xA10FF890, 0xF4258930, 0x32886E7D, 0xD15CF075, 0xF89C0B05, 0x08337136,
    0x4A0FF8A0, 0x63187B78, 0x35034E0B, 0xE9874874, 0xB13325F2, 0x1405EF0D, 0x4C59B734,
    0x00CC1030, 0x5E555915, 0x8C8447F7, 0x35594E08, 0x3E750D74, 0x2E44D8A9, 0xD68A1E76,
    0x23523376, 0x778C90B3, 0x787684B7, 0x0481AC5E, 0xFF0A64C8, 0xC8D40990, 0x25F33E33,
    0x7647D25F, 0xB7D209F4, 0x7148DE8B, 0x6C197213, 0x80027340, 0x66D0CB1D, 0xAC5E5399,
    0xD8BA8C12, 0x3E923C49, 0x766E9798, 0x88748847, 0x4228F602, 0xC3482424, 0xD0C87DC0,
    0x0B90FF8F, 0x1981A900, 0x613470F2, 0x0FF7D84E, 0x1A9090AD, 0x062E8067, 0x6462E915,
    0x980AE231, 0x58ED6618, 0x2E956188, 0xE00DD442, 0x26670112, 0x08238900, 0xA02132AC,
    0xF8F439F5, 0x2E97158D, 0xC601D29F, 0x603745B8, 0x7499156B, 0x27614216, 0x47DB3CB4,
    0x0B70FF93, 0x920FF938, 0x60267B26, 0x8C94F84F, 0xFE5C80B3, 0xB8567414, 0x85C66F29,
    0x139490A7, 0x693C2223, 0x56192F91, 0x000DE3F5, 0xE6673F06, 0x25004A75, 0xC83F30CA,
    0xE8B962E1, 0x74A77394, 0x62046347, 0x295E62F9, 0x6602E979, 0x6107B4F7, 0x30FF0873,
    0x91161474, 0x4D7B85D7, 0xB5C35C17, 0x68C08818, 0xC3907619, 0x60FF0AA4, 0x81C97E05,
    0xF896500C, 0x26BF2AC7, 0x59657909, 0x4B59B597, 0x54962130, 0x94F7665E, 0x964E1990,
    0x01E74E64, 0x99192566, 0xB5847792, 0xD81D7635, 0x7A380B50, 0x8F74C7A5, 0xF3734E79,
    0x0C67DC0B, 0xC089E9A8, 0xC3B97810, 0x1337E18E, 0x131A1093, 0xF0037EE0, 0x71217378,
    0x14982997, 0x57762E97, 0x7960FF80, 0xD392679D, 0xF75525F7, 0x9749C60A, 0x0B0FF06E,
    0xC0FF08C3, 0x5FD0AB42, 0xE55EB964, 0x23827B75, 0x0FF9408D, 0x729D90A9, 0x67159BA8,
    0x02F0E229, 0x4E2E69E0, 0xB0010008, 0x23C0C859, 0x1E9AE4DA, 0xC8666BF7, 0x9C290D76,
    0x2E49D9F0, 0xC0998D46, 0x3728FA7D, 0xFE18E374, 0xD7F88EB5, 0x74A45029, 0x599AE9B9,
    0x30782A95, 0x0031099E, 0x335E5150, 0x64E09DC8, 0x7B021849, 0xF19EA33B, 0x36464E19,
    0x8D10A189, 0x1A09E0FF, 0x09070FFA, 0x4E70838A, 0x98A12A0B, 0x61A65619, 0x01675E09,
    0xA9109A06, 0x004A0291, 0xA2229D15, 0xF02E94E1, 0xD99A9BE8, 0x9AEA3095, 0xFF38D877,
    0x79B83890, 0x9AEA1385, 0xE52A9884, 0x5A4402D0, 0x110A2906, 0xB6091250, 0xDA3F7458,
    0x85C84244, 0x0A5E6823, 0x3A4DA0C0, 0xA54A56A2, 0xA923C714, 0x1A4707E2, 0x44DA4A12,
    0x96926791, 0x926674C4, 0xA3774A81, 0x6AA58A55, 0x814D966A, 0x0182A909, 0x5F124A5D,
    0x1A6149DA, 0x97E77699, 0x780FF056, 0x8A69A018, 0xA7EA57A6, 0x9732DA31, 0x96BF0E89,
    0x12AA7119, 0x1E8CCA73, 0x96F18877, 0xA7DA6B5F, 0x59A7FA90, 0x649DA3E8, 0x09A44249,
    0x8701A823, 0x5A89143A, 0x7115E9A7, 0x880432EF, 0x288B8D08, 0xA8FAA6A9, 0x137D3AA7,
    0x925F2132, 0x66409B51, 0x47A9B01B, 0xCA9D1331, 0x39FA74A4, 0xCB0317AE, 0xDA807418,
    0xAA8A91AB, 0xA629BA81, 0xC60009C1, 0x16DAB201, 0x47AB52E0, 0xD3E59474, 0xAA9A7C3A,
    0xD0ABEABF, 0xC2E0714A, 0x8E33E90E, 0xC919EAC7, 0xC449150A, 0xAD1ABC85, 0xC0AD3AE0,
    0xD1334E0A, 0x11B3890E, 0xA1208AD9, 0xD92CA891, 0xAE3AD285, 0x139DCAE1, 0x909E2962,
    0xAE901E34, 0x91406244, 0x69622E90, 0xAE29C104, 0x8CB01AEF, 0xF4428848, 0x01F2100E,
    0xFA2E4AF8, 0x0664150A, 0xAF1B00AF, 0xFF0F0A22, 0xEB090707, 0xA8971843, 0x1AB0F82B,
    0x4927B0EB, 0xAF34E1A9, 0x180A123E, 0x2B150212, 0x76AA0855, 0x1BB0281D, 0x751CB2AB,
    0x1030A299, 0x0AB25022, 0x81030017, 0x9A35590C, 0x93B39B2C, 0x299729BA, 0x0724D70F,
    0x2DA47B32, 0x9A0A44DA, 0xB47B107C, 0xE9884991, 0x10971A62, 0x001AD9B4, 0xE90C9446,
    0x8A217112, 0x4E0B1CB4, 0xA49972E9, 0xE0241030, 0x1FFB41B4, 0x2DB52002, 0xAB1E8833,
    0x5EDB2BB3, 0x770F43F5, 0xDB5E0746, 0x002108B6, 0x040CA59B, 0x7ACF51B9, 0xA82B03B5,
    0x002AC32D, 0xDB6E09B6, 0x002110B7, 0x3A920191, 0xC4962E91, 0xB66B7523, 0xA8B46B1F,
    0x724D2005, 0x03433D0A, 0x92B7E027, 0xE002118B, 0x49F8E72F, 0x592AC1DC, 0xFB65B865,
    0xB78B59AB, 0x4D90E29B, 0x82960A81, 0xBA7B9302, 0xB36BC128, 0x90821028, 0x23C8CCB1,
    0x962FB6E0, 0xC2AC28B4, 0x55923C23, 0x961777C5, 0x8BA049A4, 0x0F700B49, 0xA8077600,
    0x516CBC3B, 0x10304E3F, 0xE8A9E083, 0x628B7E98, 0xBB86D1BB, 0x2895D1C8, 0xF0AA1948,
    0xBC4A055E, 0xC1209BD8, 0x30802AF7, 0x11C07F10, 0x02BE0BDE, 0xD102BDF1, 0x1FFBE5BD,
    0x2B92907F, 0xDBECBD90, 0xB92BEEBE, 0x00000101, 0x00000000

  EW_BITMAPS_TABLE( ApplicationUSBStick )
    EW_BITMAP( ApplicationUSBStick, Default )
EW_END_OF_BITMAP_RES( ApplicationUSBStick )

/* Table with links to derived variants of the bitmap resource : 'Application::USBStick' */
EW_RES_WITHOUT_VARIANTS( ApplicationUSBStick )

/* Bitmap resource : 'Application::LaptopBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationLaptopBitmap )
  EW_BITMAP_FRAMES( ApplicationLaptopBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 80, 76, 0 )
    EW_BITMAP_FRAME( 32, 11, 42, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationLaptopBitmap, Default )      /* ratio 50.08 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x06018543, 0x6048180A, 0x038B0160,
    0x181C4807, 0x8FC7A1F1, 0x1C8A4320, 0xC9A4B249, 0x26532893, 0xA26008EC, 0x15028AC0,
    0xB0308C0C, 0x030A40C2, 0x804C0C1D, 0x8146A051, 0x54B0012E, 0xD1A8B449, 0x2A9348A3,
    0x27F2C865, 0x25030400, 0xD031040C, 0x571BC0C5, 0x2818BE07, 0x81862062, 0x14CA0610,
    0x46E32068, 0x2E872C81, 0xADB6CB5D, 0x5908B7DB, 0xF0303D06, 0x030EC0C1, 0x22540C65,
    0x0E186FA0, 0x12443A1C, 0xA7046221, 0x0CDB8803, 0xC8B032B4, 0x4F031AC0, 0x7510DC0C,
    0x74818320, 0xCB459A5F, 0xCFE7AE11, 0x0C1F43A0, 0x82C0130A, 0xB6061981, 0xE0649818,
    0x33B00B99, 0xA7B3B1D1, 0xC861B09C, 0xB63B19FE, 0x51289FEC, 0xB9D9F6A9, 0x0C9C47E3,
    0x396E3419, 0xAFA7FE58, 0x97032F80, 0x7031D40C, 0x350F40C5, 0x2A840E73, 0xB3CFA2F0,
    0x1F8B4542, 0x5CA1BE4F, 0x960595CC, 0x60640818, 0x1407C418, 0xE5327139, 0xAA52291A,
    0xFDBB09FA, 0x6DB69B4F, 0xCE1378FF, 0xE330FF38, 0xB4FF33CC, 0xFF2C0AE2, 0x294A1280,
    0xC9023CFF, 0xD1F0FE25, 0x10EC2107, 0xC6120441, 0x240186C0, 0xC6988404, 0x37B05140,
    0x795C0C10, 0x03589755, 0x5019A595, 0xDE56719D, 0xC516348C, 0x09A76952, 0x035E41A4,
    0x1E1CE149, 0x4290A028, 0x7204802F, 0x789C3DC8, 0xB43FCA12, 0x3FCB62D4, 0xCE036CD5,
    0x4354C43F, 0x78CF2F60, 0xD430CFF3, 0x33CFF388, 0x65F394DB, 0x7930DA35, 0x14FF2E4B,
    0xFF224872, 0x20C7F1F8, 0x487218FF, 0x1204FF23, 0x54F32208, 0xD316C551, 0x09824090,
    0xE82018A1, 0xD161031C, 0x990363D8, 0x007A5930, 0x6650265C, 0x80077800, 0x68D56953,
    0xB632A5E9, 0x34409E84, 0x105037A9, 0xC0D19103, 0xB16C98A8, 0xF4E71845, 0xFF2107F1,
    0x3FC8A9AC, 0x5B9314C0, 0x7978D531, 0xFCDD330B, 0x5A334BA3, 0x2FE5A962, 0x8FF37CD1,
    0x494CD330, 0x2CFF386B, 0xD3810D83, 0x3FCE6374, 0xCDC35CD1, 0x82E0B53F, 0xCCFFABA6,
    0x7F3FC786, 0x9D485200, 0xCF822082, 0xF1A46318, 0xC03571CD, 0x7FBAC0A2, 0x409D040C,
    0xC3B40C4C, 0xF40C2C40, 0xE9027641, 0xDD4F1024, 0xA669A66D, 0x702A616A, 0x940E374A,
    0x09A90023, 0x3F890314, 0x0D0310C6, 0x0721C4C3, 0xD1ACFB1E, 0x64FF1C06, 0xD26EA492,
    0x328B4AE4, 0xED3C7ED3, 0xBAE4CB2D, 0xFE59AF6B, 0xC4B0AC03, 0xB20D5B1A, 0x25E358C9,
    0xB97ECB33, 0x34FF390D, 0xE236ACFB, 0x36CFF3A0, 0x4BE810DF, 0x1844C230, 0xBCFF2449,
    0xFF1C4701, 0x1E8761D8, 0x880200FF, 0xE1B8FC21, 0x68EB1D46, 0x13304488, 0x73890D74,
    0xA268F468, 0x340A2840, 0x85028A82, 0x148B5315, 0xC0E95781, 0xDE741F70, 0x740D33A3,
    0xB83F40B6, 0x0D02C0B7, 0x15855254, 0x4673A45A, 0x6B646D1A, 0x0CBBB6C7, 0x252D9BD3,
    0x31CAF3FF, 0x0C82C665, 0x43FF2280, 0xFEBCC9B2, 0xC1CAABE3, 0x3FEC5B0E, 0xF313FEC7,
    0x898335CC, 0x5A62B373, 0xFD39CDF3, 0x37B3E385, 0xCFF3A4E4, 0xF3ACE738, 0xA8E8398F,
    0xCD332C93, 0xEFC9C3FC, 0xF121C4FF, 0xCC586B3F, 0xD4FEAAED, 0xF41EC751, 0x1705715C,
    0x01E600CE, 0x20122128, 0x0C5940C7, 0x3640C474, 0x07103644, 0xD9604D03, 0x1BFA91A6,
    0x7F71C054, 0x0740B056, 0x56C00C27, 0x90313902, 0x20BC2F1C, 0x20882EC3, 0x583E88C2,
    0x3FC5C168, 0x2905089D, 0x948BE1FE, 0xD91882AD, 0x12315048, 0x44630AF8, 0x024C726E,
    0x771AE599, 0x6CA5CD32, 0x19739E65, 0xA05664CC, 0x672CDDD2, 0xEADD48DD, 0xD8BAF75A,
    0xE61C23FD, 0xD0395DD0, 0xAC74BB61, 0x68FF1D83, 0xF1DC3B47, 0xF0D8780F, 0xE1C8D91F,
    0xC3C1563F, 0x87E1F47F, 0x1A0340FF, 0x420FF0D2, 0x7B4D8210, 0xF42003D8, 0x70374421,
    0x802B4823, 0xD8A60205, 0x6180812E, 0x08184D20, 0x2F65E80F, 0x5F40017C, 0xF957E000,
    0x802303BE, 0x73288FA5, 0x048A4B01, 0x748145B2, 0x447000A1, 0x608610C4, 0xEA986E04,
    0xC518FF0B, 0x0C45747D, 0x15C3FC66, 0x2A47FC0E, 0x1D8D8186, 0x0C815022, 0x28E4A40C,
    0xE9CBC127, 0xC39B732A, 0xF740CB60, 0x9071D132, 0x1D320466, 0x3AC84508, 0x402EB86D,
    0x0AA14426, 0x170FF859, 0x348650C2, 0xFF2A8774, 0xFE568DF1, 0xFCB01C83, 0x79663BC7,
    0x8B3C733B, 0xC7FCB817, 0x86D690D1, 0x1143FE5E, 0x2093A08A, 0x7F087104, 0x790E61CC,
    0x700E0738, 0x305F03B0, 0x708D99E0, 0x30A840CD, 0x640C2110, 0x1B436661, 0x8006D400,
    0x45C000B1, 0xF9CD2800, 0x83467462, 0x039BAFAC, 0xF66A80B9, 0x48369032, 0x88A49DE0,
    0x30AC1442, 0xA130258F, 0xC410FF09, 0x09955820, 0x90426C4D, 0x311340B2, 0x5AAC21A6,
    0x0980EE34, 0x1D02C56C, 0x560848A7, 0x8C1591CE, 0x1926E764, 0x3075D1BA, 0xDD441F93,
    0xC9D7543F, 0x764EC24F, 0x0AC7FCA2, 0x18C2F85B, 0xAA1FF0CE, 0xAC32A1A4, 0x345F2531,
    0xB8D24CA3, 0xD1B88006, 0xE3815C8D, 0x8760FFA6, 0x8EA1FF4E, 0x192E8A9E, 0x28E3C8C9,
    0x3C8FF146, 0x8A97F518, 0x183FC460, 0xFC4808C1, 0x087C0F83, 0xF09E3C04, 0xA32C2904,
    0x84E8136B, 0x3D80E073, 0x7BCF71ED, 0x408CA102, 0x471022A4, 0x92520001, 0xCD38CA72,
    0x80A09A29, 0xA1022ED3, 0x5072408A, 0x41EC81A8, 0x01682A05, 0x8513E631, 0x0941247E,
    0x2465D04B, 0x2C0FF124, 0xFF0B4164, 0xFF5FC238, 0xFE7B84A1, 0x90510A03, 0x60EAB642,
    0xA2465F87, 0xC484F912, 0x8B313F3F, 0x1603FC61, 0x2D2048C6, 0x0A323192, 0x1382F242,
    0x2F455CFD, 0x85D3C1E9, 0xF423A370, 0x9A410964, 0xB2929142, 0x6048D71A, 0x1BE1393F,
    0x1903FE3D, 0x39C7FD40, 0x7333E1D0, 0xC41FF70C, 0x734D59F5, 0x7EE68D15, 0x4A0819E9,
    0x394B7487, 0xF75875DD, 0x2EC8D41F, 0x0B516AB5, 0x116ABEA4, 0x252A508B, 0x38898128,
    0xF7116219, 0xCA184308, 0x740E8D70, 0xA8AB03E0, 0x72061E5E, 0xABC97845, 0x88145D3A,
    0x13B5F24D, 0x45EBF5B6, 0x4AA72293, 0x815FD29A, 0x29206058, 0x06110818, 0x16380652,
    0xF03E1180, 0x01C01081, 0xE1082004, 0x0338671F, 0x87F4DA1A, 0x08A3FC3F, 0x87C23846,
    0xC5D89C43, 0x609F1636, 0xFE18C310, 0x802E85B1, 0x18641FE1, 0x21FE1CC3, 0x6D303086,
    0xC2E8520A, 0x0530A23F, 0x0EE1C2C4, 0x2387F880, 0x56210136, 0xBB37A2F4, 0x24B4C660,
    0x5A4ADAA9, 0x73369314, 0x0849272D, 0x0949D94A, 0xC528A267, 0x8701FE29, 0x7821D439,
    0x1DC7FE5E, 0x3687B0F2, 0xBF104201, 0x489D0464, 0x6C530A61, 0xFD9E1869, 0x41C74E06,
    0x74DC7FE7, 0x8728E44A, 0x8C917698, 0x19C3FC6A, 0x35E048D4, 0x714851B0, 0xB2BA9A18,
    0x87A286E3, 0x787F9FB5, 0x9211D1E2, 0xB1363FD0, 0x7A444F09, 0x5E10FB12, 0x5781C21D,
    0x0122E016, 0x40C42EA0, 0x299026C2, 0x65000D8C, 0x06090003, 0xE08123B2, 0x45702044,
    0x32477FE7, 0x717E31B7, 0x4BD10251, 0x06F206FC, 0x08E29AAC, 0x3D025847, 0x34839996,
    0x5F5BE215, 0x7E3FF648, 0xFC208400, 0x20430843, 0xBC4588C2, 0x01382684, 0xC33866C6,
    0x85C0B83F, 0x0723FC32, 0x0D30B838, 0x7F83D068, 0x460760EC, 0x9412C7F8, 0x6F6D8570,
    0x4D8C0D61, 0x2D9E1502, 0x13CA7C04, 0x82F85CB1, 0x88487C19, 0x14EEF845, 0x31C5CA0C,
    0x638FF1A6, 0x504A6350, 0x3946A4D6, 0xB070438A, 0x28BD170E, 0xE0F81E5A, 0xA1A87F87,
    0x07F86F0D, 0xB4C0DE1B, 0xCC798438, 0x99C3F665, 0x360884E3, 0x19B0623D, 0x842684D3,
    0xB85A403A, 0x38C7E0BC, 0x5D083FC6, 0xF9E471C8, 0x9310E384, 0x9FE6772D, 0xE7E3287F,
    0x8006DB3F, 0x57F441C2, 0xC295B2C6, 0xFFD2866A, 0xFC570AE8, 0x289712E3, 0x4142286F,
    0x82604C54, 0xD3B0FE13, 0x03C1D421, 0x18C0F41E, 0x250094EF, 0xBA86F39C, 0x0231C40A,
    0x04A78C81, 0x85F64EA2, 0x01DC9CE4, 0xD0015900, 0xC62EB995, 0xC1387739, 0x8C105009,
    0x1F811A39, 0xB1BC084D, 0x688FF10D, 0xE5EBDB4B, 0xA1B3B666, 0x182BED2D, 0xF05D1FF6,
    0x41FE1842, 0xE0EC1983, 0x01E03D1F, 0x5541FE12, 0x08D6242F, 0xBA773D92, 0x79848093,
    0x9B07A0FB, 0x920FC1FF, 0xF01A7940, 0x684E1FE0, 0x5D936202, 0xDE7B1C38, 0xB1D8569E,
    0x8FF0B214, 0x0DC1A032, 0xD2046271, 0x5C0B1152, 0x851A1C14, 0x703746A4, 0x045E0B66,
    0x271369A3, 0x76981B9E, 0xC1AF8CF1, 0xF2EB180D, 0x0790ED97, 0x102AA9A8, 0x22043A69,
    0x4908D1FE, 0xFFEA225B, 0xFE8384F8, 0x33F68A81, 0x859F15FD, 0xEE9A8305, 0x62CC5974,
    0x0608FF16, 0x73D3FAD1, 0xD0C3FFA4, 0xC874425E, 0x50DE7FE2, 0x68A0FF80, 0x5A8052D3,
    0xD0D37FE2, 0x0BD39A80, 0x445420BD, 0x20A866D5, 0x08E65B54, 0xF109308E, 0x40500500,
    0x01F0D005, 0x9802101F, 0x306160E0, 0x10303E10, 0x0B29C6AB, 0x31646041, 0x2896063E,
    0xD803D103, 0xE0062823, 0x03A4CB07, 0xE56E70DA, 0xF83C0726, 0x0690690F, 0xC40FF06A,
    0x703A6DF6, 0x78578879, 0x630FF21A, 0x26FB0650, 0x6E904204, 0x7804F050, 0x905D05E4,
    0x05905B71, 0x45046841, 0x90395920, 0x0356D203, 0x9803E035, 0x162203C7, 0x0FF05B7B,
    0x3E7A67A4, 0x105279B0, 0x47363A05, 0xF20484F8, 0x00388426, 0x04E7B004, 0x5F0607BC,
    0xC6DB06C0, 0x0446DA05, 0xFF04C045, 0xF2A705A0, 0x0747180F, 0x930900FF, 0x30FF0970,
    0x0BB0B70B, 0x7E0C8254, 0x00B90B64, 0x4FD09689, 0x2207B0FF, 0x80750FF7, 0x89907907,
    0x844F92AA, 0x45492DF0, 0x09309227, 0xFF729094, 0x424B20E4, 0x2100A50A, 0xBD66D0A5,
    0x07EA5445, 0x72F88D0A, 0xB043A0D8, 0x46743384, 0x4AC80220, 0x0780A4AE, 0x074268B8,
    0x68243920, 0x1B0D70D7, 0x80D60D65, 0x8C943A43, 0x415408CA, 0xF0B17F25, 0x0AC0AC0F,
    0xAD2090AD, 0xE72A20C0, 0x0700F409, 0xCA074070, 0xF8E402D0, 0x3E20002E, 0x7160056C,
    0x06AD4607, 0x10302A00, 0x86102379, 0x70721022, 0x0CC0331C, 0xF96CE615, 0x26217E33,
    0x0356E362, 0x370370FF, 0x78440380, 0x04F04E79, 0xFE585050, 0x30540FF3, 0x04879305,
    0x42055047, 0x36170378, 0x6E503303, 0xCE036037, 0x48FE7996, 0x3FF8776E, 0x4C87C854,
    0x50FF6EC0, 0x4CB58161, 0x9B6116CE, 0xF0587817, 0x04F04561, 0xF8043785, 0xE05905A4,
    0x0490496D, 0x826D1592, 0x903F03E8, 0x6DE2A66E, 0xDB06C06D, 0xD0710722, 0x06844107,
    0x6406434C, 0x01C38410, 0x8B624935, 0x0759E344, 0xA0BF2082, 0x8B14797F, 0xA90924BA,
    0xF08E08C8, 0x8A70FF08, 0x997518A9, 0x009A0FF0, 0x24B7EA3C, 0xC28114B8, 0xA52273B8,
    0x8BC74667, 0x048BF675, 0x18088068, 0x8CF8C674, 0xDA5D88C9, 0xF97C0D25, 0x97F0D00F,
    0xCE0CE67F, 0x297C0FF0, 0x8CD8CB0D, 0x2A0D097F, 0xB0BF0BF3, 0x7505DD5D, 0x210F309A,
    0x51AB9930, 0x4626B646, 0x023E04DC, 0x33782F51, 0x10305510, 0x7D10306A, 0x40530530,
    0x5460DD05, 0x3391689F, 0x70310FF0, 0x9007AD1C, 0xFE797845, 0xD4F263A3, 0x7AF91692,
    0x0402E02F, 0x903A03B9, 0x03A03A6E, 0x320FF045, 0x87970310, 0x0FF06263, 0x78050052,
    0xF7AC6114, 0x85D6D29B, 0xFF926617, 0x591E0350, 0x9C705405, 0x7C05E05F, 0x90460468,
    0x7A504890, 0x439BF0FF, 0xC0409250, 0x04B04B7A, 0x41041912, 0xC5547AC0, 0x05C05D7B,
    0x4904A6FB, 0x27850510, 0x9DF7AC04, 0x2F3CE930, 0xD34C6196, 0x6195954B, 0x854437C0,
    0x607B07A3, 0x21047A94, 0xD01BB0C6, 0x50C497D2, 0x59F0C60C, 0x2A0B20B1, 0xF0C00C03,
    0x5D26877F, 0xB55C93B2, 0x267A2CF4, 0x3B38BB26, 0x73745971, 0x597525A9, 0x8C88CE8C,
    0xD45D98CA, 0x997D9840, 0x74A0FF98, 0x320CB3BD, 0x90C85BFA, 0xA0FA091B, 0x86A2C8D2,
    0x42D97349, 0x09007407, 0x7546113D, 0x21781023, 0x46C1D610, 0x5D103458, 0x306E1030,
    0x27E07C10, 0x2C0D4024, 0x50FFA530, 0x9AC02F3F, 0x6C8439AE, 0xA58C7D80, 0x61193004,
    0xBC6F104A, 0xB0560577, 0x04C04E61, 0x979C33FF, 0x08629D47, 0x6C503003, 0xE1914038,
    0x70FF9C09, 0x0590FF9B, 0x646DA058, 0x9863064A, 0x9CE9D26E, 0x929DC0FF, 0xC7909285,
    0x05B84105, 0x156FB05A, 0x39F27AC6, 0x03D79805, 0xF60416D2, 0xB04C0FF9, 0x6D286A04,
    0x6044487A, 0xA4440600, 0x9DF9C17A, 0x450456D7, 0x20525810, 0x5EA92D05, 0xF094A61B,
    0x10650646, 0x3184BD84, 0xFF26E07D, 0x243D0AA0, 0x7FE47EA3, 0xC45C8A18, 0xE96DA1B5,
    0x8BD4B1A1, 0xC1A22427, 0x28C49748, 0x0FFA2774, 0x2B97A8D0, 0x097E985A, 0x2C9A3098,
    0x36A35A33, 0xE66FA09A, 0x7CF7FA59, 0xFE0BF98C, 0xD0C57FA0, 0x6B13E407, 0x691928ED,
    0xF1034D57, 0x05B10304, 0xBC066103, 0xA00B37B6, 0xAEF02908, 0x58A560EF, 0x49AF032A,
    0x6CC6C587, 0xB99A5617, 0x479E5877, 0x7BA27B05, 0x3D03D588, 0x17AA9C10, 0x62B90D58,
    0x09043045, 0x60360369, 0x9F485A87, 0xFF861036, 0xD862B110, 0xB0262275, 0x4405A93E,
    0x804E04F4, 0x90988058, 0x42882473, 0xA5810410, 0x6216D721, 0x5A05A930, 0xE9E76DE0,
    0x9F4937A8, 0x3E9CB3CE, 0x89DC9E30, 0x882AA24F, 0x66A8E781, 0xA7C00660, 0x877A5E04,
    0x76B02A8E, 0xC6D44738, 0x05B9F404, 0x5C79305C, 0xB79305D0, 0x061A7CA9, 0x94A7C062,
    0x00960950, 0x0CC8D5A1, 0x06201B58, 0x2AC0A1F8, 0xA24AC397, 0x28977AC5, 0xDA3AACAA,
    0xACF98AAC, 0xD21BDA32, 0xEAD41BAA, 0x0FDB6E0B, 0xB3B710A0, 0x807634E0, 0x1CD61D03,
    0x9D000605, 0x099A0002, 0x10302800, 0x03826033, 0x21030461, 0x18C1023F, 0x34AE946E,
    0x30230778, 0x0C802402, 0xFE0329AD, 0x99018FF0, 0x0327AF03, 0x3266E082, 0xD8880610,
    0x21008602, 0x23620041, 0x805679B6, 0x62A86705, 0x5E05E61B, 0xC05F6DE0, 0x9DF0FFA9,
    0xF8A92909, 0xD867B1C4, 0x0409C175, 0xD6A6103F, 0x16159C79, 0xA616CCA6, 0x816D26E7,
    0xE9346ED7, 0x6E96116D, 0xB904C04C, 0x73FFAA57, 0xAA26F39E, 0xFFB2D4F8, 0x80560560,
    0x6229EA47, 0x549C7B2A, 0xC21A6DE8, 0x793B2A7A, 0x5D79B6D1, 0xA62B05D0, 0x78158827,
    0x3AB2A9F4, 0xE6D29EA6, 0x7816D7B3, 0x92554909, 0xD7D706A5, 0x6DA0657B, 0xE02DB34E,
    0xD24D54A5, 0xA330CA5D, 0x258C2975, 0x88C7AC6A, 0xA2A979AC, 0x68A2EB65, 0xCAD7A33B,
    0x0A0B710F, 0x1206F0A8, 0x43E86A9C, 0x6B177110, 0x2110215F, 0x815A6080, 0x2F310228,
    0x024D6102, 0x01021AD1, 0x10255D05, 0x2A00F061, 0x9241083C, 0xB0C0CB02, 0x390FC037,
    0x70FF8450, 0x6CF78A84, 0x256D36D1, 0xF627A616, 0x9306D60F, 0x8359104F, 0x379E05C8,
    0x38338538, 0x19BF7719, 0xC62F78E7, 0x9379F49D, 0x37036912, 0x063B03F0, 0x05C3FF05,
    0x4161B05B, 0x98689E50, 0x7AAA8E04, 0xF358079B, 0x592D8516, 0x9D962261, 0x1B6C961B,
    0xF79CB356, 0x5547B904, 0x460477B9, 0x99E78820, 0x06506590, 0xF381C87C, 0xAA7CBAA6,
    0x59162221, 0x93B4B7B9, 0xB9C16D07, 0x9D9841B3, 0x3478C9C7, 0x76DE0626, 0x064063C3,
    0x2BB506FB, 0x88672A66, 0x889C9607, 0xB954E090, 0x00BA0BA0, 0xC051BDAD, 0xCCC08AC9,
    0x42085D0A, 0x0FB0C0A1, 0x9A0A3543, 0x90632E40, 0x4E012460, 0x074DC4DE, 0x05F923A6,
    0x83402300, 0x95102B7F, 0x2B810009, 0x1021D410, 0xD21022A0, 0xE4D41021, 0x00C4CF46,
    0xCA026077, 0x89030B5C, 0x6CC0F103, 0x20C8A876, 0xC58A6226, 0xC3F58EC3, 0x52C4279C,
    0x50FFAFE0, 0x90A78E05, 0x9E3FE867, 0xA84B0607, 0x07206F71, 0x1889F660, 0xCC8F5957,
    0x8674F287, 0x5D930AA2, 0x73CE9E37, 0x9F49DF9C, 0xD27A7BD2, 0x079CC666, 0x6E792D05,
    0xBCAA56CE, 0x00620637, 0x9096EB6F, 0xC97B981C, 0x40549F4B, 0x6117BC05, 0x2B7916CE,
    0x2C6D57C6, 0x937D1459, 0x78B48882, 0x86CE7AA4, 0x06B79EB4, 0x9B0FFA5B, 0xD3CE793A,
    0x6E962092, 0x926ED37F, 0x75EA0FFC, 0x65B8B19C, 0x3924F24E, 0x7731A3CA, 0xC0F0F70C,
    0x5F6C908F, 0xE1445720, 0x77129214, 0x10460307, 0x31F304A0, 0x046044B3, 0x43A920D3,
    0x86200D30, 0x6270BF04, 0x520500A7, 0x308F0530, 0x072AA204, 0x5302727E, 0xB00D2A30,
    0xAE683404, 0xCE057102, 0xA0180661, 0x09101A01, 0xC9031A6E, 0x90426CD0, 0x58CCD50F,
    0xD9907CD7, 0x2CDB592C, 0x92DCDE91, 0x44CE13FD, 0x2629790C, 0x84AC8FD2, 0x660FF6D9,
    0x98410680, 0x072D2106, 0x780FF89D, 0xE61E07A0, 0x71C64189, 0x186D92DB, 0x39306C03,
    0xBC96ED1F, 0x589E386A, 0x762F0580, 0xAA25929E, 0xF37B1581, 0xAA77BE16, 0x046C4D05,
    0x88AFEA61, 0x37BC9D65, 0x053BCBD5, 0xBC27A7B9, 0xB05F05E7, 0x6F06D962, 0xC871706A,
    0xCA94CDB9, 0x9A56D704, 0xFF587912, 0xC5870593, 0x09C3C365, 0xA769609D, 0x20A90A80,
    0xDCD0A948, 0x0DAB40AA, 0x70F0B712, 0x082DD608, 0x6B76DCAC, 0xE1411411, 0x2921A514,
    0x9104E007, 0xA5780B35, 0xDE50FF02, 0xE9578DE7, 0xD02BDE6D, 0xA6EA55DE, 0x360359D3,
    0x503A8440, 0x93C03D0F, 0xD2D4A0E5, 0x20BBD4D0, 0x0A488004, 0x8B03330E, 0xB0190190,
    0x02208201, 0x340A227E, 0x00D08600, 0x0F60486C, 0xC859004E, 0x0D77CDC9, 0x05E0FFCE,
    0x3AB48D7D, 0x762D0596, 0x793060E1, 0x6861BC90, 0x87D73C60, 0x34C71831, 0xDA6337D3,
    0xE07C7D07, 0x35126F43, 0x773514C4, 0x306C3C42, 0x62FDC463, 0x17A8FB31, 0x1D2A4F26,
    0x84E61B06, 0xEDAA56E9, 0xA4F89376, 0x882C5DC7, 0x19BF4D14, 0x54786DC7, 0x78E912AA,
    0x83AFA867, 0xDBD4E1D8, 0x08608592, 0x9FDC97E3, 0x08AE0FF0, 0x66D9588B, 0xBF09B65B,
    0x23520E93, 0xD0D07508, 0xE2773054, 0x8DDC6B51, 0x057009E6, 0x640E3587, 0xFDB46656,
    0x9E36D062, 0xFF030A6E, 0xB02BDED0, 0xDE8E7EDE, 0xE8DEAE80, 0x90FFE7CD, 0xB0C9D3D6,
    0x3AC330FE, 0xFDF70F40, 0xD6C0EA03, 0x496210DF, 0xC5800E30, 0xD520EF04, 0x520FC052,
    0xA663075E, 0x90804DC3, 0xDBE70BD3, 0x3E1EDB46, 0xB5005F79, 0x16AAC634, 0x265C7187,
    0xD8888807, 0x9D2D9077, 0xB6657DCE, 0x714E2DD8, 0x84082641, 0xA7240870, 0x54A26A54,
    0x207E0A04, 0xC9A5CE8D, 0x9095807B, 0xBC86737F, 0xADC46E59, 0x9E7D1463, 0xF35906D7,
    0x4588BD46, 0xDC4793DB, 0x988A7867, 0x7E5BDC85, 0x7530FF96, 0xA2EDF0A2, 0x77505440,
    0x4490E209, 0x7A06907B, 0x56B10552, 0x0011044E, 0x0A066B3B, 0x70E62DA0, 0x0B588D67,
    0x9108B890, 0x320D0AA0, 0x20E8D90A, 0x8107FEE1, 0xEC446680, 0x9AC8F979, 0xEEE7B30E,
    0xCDE6E81D, 0xE82E7FF0, 0x2DDE6F10, 0x502E02E0, 0xC35916A7, 0xAA6CB75E, 0x403AA737,
    0xB0C90487, 0x25E8ADF3, 0x658C9EA9, 0x0530FF4F, 0x3AE5337F, 0x7478C446, 0xE279C7EA,
    0x7BEB57D0, 0x407AE2D0, 0x89B54F71, 0x67668722, 0x4EBA2706, 0x08608478, 0x4A26B26C,
    0x90937E55, 0x1C354E66, 0x1BC8FE2D, 0xB63A5866, 0x2A63FFD9, 0xFB2E479E, 0x80920906,
    0x09D4FE59, 0x5809B693, 0xA696DC9F, 0x95D642E5, 0x5A9A80DA, 0x603F7AA0, 0x10CEEE56,
    0x123C2063, 0x50830810, 0x8000F708, 0x0307F662, 0x502800C4, 0x02C01134, 0x200FF0BE,
    0x60B70370, 0x7F004E6E, 0xD9070063, 0xE0900898, 0x09F09C74, 0x62099DCD, 0xA61EF37E,
    0x6110FFE1, 0xF430EC54, 0xAF94F0EA, 0x02CA53DE, 0x7A02FA55, 0x2B139AAE, 0x6E79E190,
    0xF46CCF8F, 0x384E9E36, 0x8767AA9E, 0xB17AF75D, 0xF93C7989, 0x622D470F, 0xB4588586,
    0xFF33D8AE, 0x715F350F, 0x3A666EB8, 0xF8A24FAF, 0xCE87D32D, 0xBA549089, 0xCD8B34DF,
    0x7E4F6C2D, 0x9534808E, 0x872B0970, 0x5835E58A, 0x637E7B55, 0xF8AA9629, 0x8980980F,
    0xCD4C0088, 0xF074A3E0, 0x771F6404, 0x69121F67, 0x60353560, 0xAC1FD709, 0x620552C8,
    0x800B4030, 0x00D59E02, 0xFF0C4029, 0x502A00D0, 0x00E0FF0C, 0x0FA0F02B, 0x173202C0,
    0x73202D01, 0x06216100, 0x78247FB1, 0x03C7FAF4, 0x647FAC8A, 0x87FAC4E2, 0x7FABD208,
    0xFA913899, 0xA592A937, 0xF4FA7B7F, 0x4B2587F9, 0x7A3D8496, 0xF2918BFC, 0xFF960B5F,
    0x11A4A860, 0x1C0DDFF3, 0xD8E9FE38, 0x0F9FE3C1, 0x05FE3F1F, 0x1FE43211, 0xFE462311,
    0xE4A24921, 0x4D2692DF, 0x027939FE, 0x7FD469E5, 0x3C36A04D, 0x9B5FE693, 0xADFE7137,
    0xABAF9AE1, 0xF0767A9C, 0x07E7F9E4, 0x807FA050, 0x27FA0D04, 0xB6A15088, 0x2DC2EB6F,
    0x3FD10874, 0xFCF87A3C, 0x9137BBCB, 0x1EFF45A2, 0x2FF49245, 0x194A24D2, 0x78DC7129,
    0x4AA56329, 0x321108FE, 0x1B0D0BE4, 0x7C7E4236, 0xF4400026, 0x4DA5D268, 0x5A9D469F,
    0xADD66AF5, 0xE371A74B, 0x56AB0CC6, 0xC369FEAE, 0x9206AFFD, 0xA016FF53, 0x41AFF618,
    0x560E820A, 0x80F7FB14, 0x107FB185, 0xDE6B1C58, 0x093FD902, 0x7F51922E, 0x04DFECA1,
    0x51FECC18, 0xC2DDE188, 0x6A1AEF0C, 0xE4115768, 0x54213FD7, 0x7353FD68, 0x453FD6A7,
    0xD2622091, 0xA571C9F4, 0xFCFC7D7F, 0x2E0B67F9, 0x88C7F8BA, 0x07F89023, 0xF8822088,
    0x802007E7, 0x22086F60, 0x88E229FE, 0x6A49FE23, 0xB8987F89, 0xA42889EA, 0x2A8A67F8,
    0x0AC7F8AC, 0x62C9FE91, 0x00BA7FC0, 0xC27F8C23, 0x7F0CA318, 0x1CF180BC, 0x0298A228,
    0xC8721B97, 0x7E1B1141, 0x2428A3B4, 0xC4429104, 0x7018B847, 0x48D03313, 0xDC369483,
    0x3895A380, 0x96C3A0E4, 0x43C0EE3A, 0xC904B597, 0x6E42AE45, 0x598FC8F1, 0x8FC3F0F8,
    0xB340C049, 0x14D63F86, 0xDF3735C0, 0x394E3384, 0x0DC3635F, 0x2609804B, 0xE19A7F98,
    0x74119FF3, 0x1501A880, 0x85407382, 0x6E4B8EE2, 0x8BA0E8B9, 0xAEEC3A40, 0xF03B4EE3,
    0xBC20ABBC, 0xE66BC67F, 0xF99E19D2, 0x381A02E7, 0x6806A0C5, 0x9A3509FE, 0x61B0327F,
    0xE0700E54, 0xF4220594, 0xF98AE22C, 0x9703E0E0, 0x04A11A7F, 0xE1347F96, 0x24C7BF44,
    0x411023FB, 0x8C831C5E, 0xA2A0A47F, 0x043C7F8A, 0xFF228A11, 0x2B8AC2A1, 0x8B22B9FE,
    0xA2D1FE2D, 0xF1FE2F0B, 0x5E310C02, 0xAC0CA324, 0x0D6342B4, 0xCAE3E036, 0x58D4339F,
    0xBA2D9BC3, 0x930744BD, 0x83ED188C, 0x8D1834D1, 0x181ED182, 0x0AD1814D, 0xD1806D18,
    0x60B39802, 0xD8460F83, 0xE8E2AE34, 0xFF871A65, 0x5F1765C9, 0x97618D3A, 0x8170227F,
    0xA390EE20, 0xC0E60600, 0xE9D2AE83, 0xE48EBBC0, 0xE65862EF, 0x10654A64, 0x3D4C866F,
    0x1A82F4E5, 0xD4951540, 0x15454C1A, 0xF9A41B67, 0xA61B8347, 0x1C0367F9, 0x9A955E80,
    0xA1C8387F, 0xE0427F9A, 0x8E1854C1, 0x281FE600, 0x1FE5C8C2, 0x45D1023B, 0xF9564B31,
    0x404F13A7, 0xB6D788A9, 0xDD6B8102, 0x42F9FE35, 0x56D0318C, 0xCA311FFB, 0x329FE330,
    0x9FE350D0, 0xA7FCEA34, 0x71FE384E, 0xFE398E23, 0x3A8E6381, 0x707BF1FE, 0x2690E728,
    0x78F235AB, 0x3A2B8AE2, 0x81E037F8, 0x72BCA613, 0xF35B5DCB, 0xA8E4020F, 0xC26E8EC3,
    0x4EA2BD01, 0x85C09B6C, 0x18D3ABA8, 0x60638E06, 0xA01902CE, 0xE98660BB, 0xBAE19830,
    0xF9EBCE0C, 0xF6859486, 0xAE1D03EE, 0x55BB5DF3, 0x871A099D, 0xC1B83751, 0xB7959F54,
    0x7D9E6741, 0xA2685A06, 0x691A3071, 0x41D03BA5, 0xD0760F69, 0x41A5079E, 0x10E8C1E8,
    0x051A307C, 0xE1BBBC22, 0x58B58B09, 0x0E3E56C3, 0x4D12CF99, 0x93E4EB7A, 0xC4E1FE50,
    0x26C87FEB, 0xA8379FE4, 0xFC575BCC, 0xD1C237E7, 0x30737061, 0xC2FAD58B, 0xA3FCBF17,
    0x07C9670E, 0x8B60EEE7, 0x0A41BDBB, 0xC020C066, 0x0E41B72E, 0x1F0D4E5E, 0x085B8064,
    0x94720F31, 0x08791FF0, 0xD62E2984, 0x6EA0E082, 0x593BAA3B, 0x29D75EEB, 0x76AA91D9,
    0xEF9DC2A7, 0x20026390, 0x420527AC, 0xD6AB9898, 0xE82282E3, 0x204705E9, 0x00900C08,
    0x67A2239D, 0xC12A9908, 0x8215380F, 0x03ECF01E, 0x15DA003B, 0x2DBDB681, 0x1E6780EE,
    0xC03FE2A8, 0xFC102A67, 0x002154C0, 0x1046A8C2, 0x810E3504, 0x02202453, 0x04504AA7,
    0x09009DE2, 0x1401A299, 0x2E845208, 0x780CCD54, 0x2221D5B0, 0x7DFC0B31, 0x20A28542,
    0xB1350A85, 0x63FC4E09, 0xE0717910, 0x8790EF02, 0x0FA4743D, 0x5B24BA00, 0x3C96C2D4,
    0xE40FA1F0, 0x02950380, 0x0A520551, 0x44A783AC, 0xC3386B25, 0xE2541406, 0xC7F89812,
    0x2D096438, 0x3A229431, 0x0BD8CC2D, 0xD8432757, 0x360390D5, 0x7A094E60, 0x4CF49EB0,
    0x584405AC, 0x24F511CF, 0xC7042503, 0x0E404C06, 0x9D009E0E, 0x3A61441D, 0x75C2903B,
    0x1B1D79A4, 0x4E9B8134, 0xC00D4E98, 0x24178FF9, 0x18266521, 0x104CA8C2, 0x93AC7FC7,
    0x5E24EB53, 0x4F108809, 0x7CF14022, 0x77822905, 0x7384604C, 0x283B411E, 0x5E768248,
    0xD19484F0, 0xBBE80A80, 0x9072CA42, 0x40ED9485, 0xC221D70B, 0x85462617, 0x21A2DC35,
    0x20CF7878, 0x4D35C11A, 0xA6230274, 0xFE2A8540, 0x684C8981, 0x40861FE2, 0x13FA2284,
    0xE1E648AC, 0x07F8FF3A, 0x533952C1, 0x0D468E9A, 0x16C3686D, 0x7F9B4156, 0xDC1B836C,
    0x940D87F8, 0x30E52BA0, 0x91CC05CA, 0xC63E0BC0, 0x30CD4BBA, 0xCEB83403, 0x9DA06C06,
    0x3B40E40F, 0x7681E022, 0x159DA878, 0x30652110, 0x6C778248, 0xF14C84E0, 0x02990A60,
    0x9AD015C2, 0xE14C84D0, 0xC191CC9B, 0x8293A012, 0x04ACA422, 0x09C7FC4F, 0x230279EE,
    0xFC050778, 0x8E0A47FC, 0x0414B290, 0x502A1FF4, 0x70975702, 0x8130161D, 0x4E984CB1,
    0x82C3A163, 0x06A73026, 0x0F0E9854, 0x201DA0B8, 0x60B3817C, 0xB60E4ED0, 0x4C169DA0,
    0xB84DAEC1, 0xA3A612EA, 0x27202281, 0xC5E03D02, 0x2BA086D1, 0x36C16C1F, 0x3FC5447F,
    0xE98C718C, 0xB616C2D0, 0x854D43C0, 0xBE9BDC2B, 0xF8BF1121, 0xB1A2D445, 0xC0D54EDC,
    0x41280168, 0x0031FE3A, 0x1FE39C13, 0x39814005, 0x150071FE, 0x2C37C390, 0x1C3FC710,
    0x506F02F0, 0x68DB0627, 0x968E366E, 0xAD2C6B03, 0x012B4007, 0x82867810, 0x056CF021,
    0x0B953046, 0x18AA6092, 0x33546130, 0x5EA70270, 0xA14C84B0, 0x18243B53, 0xA9E47682,
    0x875C22D5, 0xC141D7AF, 0x0293A611, 0x05474C24, 0x620E8049, 0x2602B3A1, 0xCCB28730,
    0x90138169, 0x931102E3, 0x8CE48F53, 0x7A823082, 0xA0F08205, 0x01A1D30B, 0x02C3B416,
    0x054CA429, 0x5BAAE052, 0xEB855257, 0xD30AC0B8, 0x5A144141, 0x393D0437, 0x79EB0780,
    0x68C591C0, 0xC2F48604, 0x4671EB17, 0x5C308994, 0x0D92A72A, 0x3485915D, 0x5C8B761E,
    0x2C0169E8, 0x5175C6F8, 0x187F8EA0, 0xE6640520, 0xB013992E, 0xA02B3202, 0xC05E6405,
    0x80C1FF9B, 0x01D99017, 0x03F32030, 0x08DD2062, 0x13BAC0CC, 0x2D7681A8, 0x9C718380,
    0x38E1076A, 0x1CC20F9A, 0x75002102, 0xB465EA8E, 0x03B032D1, 0x07C0754E, 0x75F46329,
    0x139D08E0, 0x1439811C, 0x09620E46, 0x042582A2, 0xA1C1C387, 0xF05B8AAC, 0xE0BB1504,
    0x01727A09, 0x8294F414, 0x0369E826, 0x6BF15043, 0xD5021209, 0xDA0A84AE, 0xAE15C181,
    0xC02C8323, 0xE541A1F8, 0xA0BB3682, 0x3B241B1D, 0xCE6050AF, 0xBA707E04, 0x0703FF69,
    0x326DC855, 0xE58FDDB4, 0x55038346, 0x32E57706, 0x51C28027, 0x1EE71C43, 0xC2182769,
    0xB9AEEB5D, 0x805E72CD, 0x80DCC80B, 0xCF178B3A, 0x9F0191CD, 0x409DBCFD, 0xE506E77F,
    0xBC0E54B8, 0x141D017B, 0x403C033A, 0x807C06F4, 0x21000E68, 0x42081ECC, 0x84203D79,
    0x07AA746E, 0x0BEED8DA, 0x17005BDA, 0x2F00CD18, 0x6201D9E0, 0xC804AA30, 0xA00B7880,
    0x801E7781, 0x604CED03, 0x01FBB007, 0x84303872, 0x088074E0, 0x1040C62A, 0x1D810C54,
    0x370158A8, 0xF40E39F0, 0xAC1C80A4, 0x204903C7, 0xE9B5B108, 0x00ECED05, 0x41EB290C,
    0x83F65218, 0x08277831, 0x197AB064, 0x638353BC, 0x2A08C073, 0xA21040B6, 0x55B04176,
    0x40EBECC3, 0x10182FEE, 0x0C1FB66E, 0x40386DA7, 0x0F0106B0, 0x1FFDD473, 0x7BC3F073,
    0x7982C012, 0x64CEFBD7, 0xA9BE4086, 0xDB3F8343, 0xF815BB40, 0x8BBDC077, 0x5A141D81,
    0x9A0F0803, 0x8FF1C00F, 0x1FFC380E, 0x07EF2F13, 0x10D40086, 0x22BD0114, 0x47C60238,
    0x76F50480, 0xF8D70860, 0xC0680287, 0x80C40333, 0xDE27AD53, 0xDDB65801, 0x00ECA419,
    0x0D004437, 0x1A8083A6, 0x36010730, 0x6C024E40, 0x00049C10, 0x4F42F53D, 0x937DD17D,
    0x40318983, 0xC06B1307, 0x5AC3D60E, 0x0B60D715, 0xD68209D7, 0x4C867287, 0x990D0119,
    0x881A8242, 0x8C3584A7, 0xF29C0D9F, 0x9D301881, 0x8068E084, 0x83F384C8, 0xF661FE28,
    0xDC634C6A, 0x9CBFC76D, 0x0F06E362, 0x259612B8, 0xF8262EF4, 0x33B88402, 0xEB3C1874,
    0xFBC300A2, 0x01C00A87, 0x8100BB80, 0xEBC69523, 0xB8601E99, 0xCABC981F, 0x2821387B,
    0x0220102F, 0x3F3CF3CE, 0x287FBD09, 0x2F502481, 0x6C025013, 0x601407F8, 0x014BD402,
    0x11AF6827, 0x71A00248, 0xBD881C80, 0xA82EDBDA, 0xDBDC87FA, 0x41CBDEBD, 0xE107FBE0,
    0x53E33E23, 0x1A881C00, 0x058F5BA2, 0x4B39BE78, 0x0F5BE8C2, 0x61B24323, 0xAC280E6A,
    0x07FBB100, 0xF0B6381A, 0x68261E23, 0x82714E03, 0x28151837, 0x91518380, 0x95303902,
    0x0A432029, 0x593F3EE1, 0x00F08202, 0x4713D023, 0xCA1504A8, 0x85243986, 0x3943B3FC,
    0x482820A9, 0x87FA9D85, 0x2AC3F06E, 0x98E8026C, 0x40701B00, 0x83AEF01D, 0x3C0A3C73,
    0xBCBC0B1A, 0x0FB30820, 0xEA3140D0, 0x01107FC0, 0x11AF4023, 0x2C11C108, 0x414025C1,
    0xD4026814, 0xFC170153, 0x02801587, 0x288169A5, 0x98171A30, 0x0151A002, 0x0A153028,
    0xE19481F8, 0x41F3DF3D, 0x2141FC20, 0x3BE4C224, 0x3E7424C2, 0xF13E93E8, 0x8007B252,
    0x0F5AD7C2, 0xA881F009, 0xA1A8B691, 0x9A882000, 0x171A8C29, 0x60E802A8, 0x87FBF382,
    0x5303A02A, 0x303B02B9, 0x03B82C95, 0x3C02D99E, 0xC47046F0, 0x4113F110, 0x12882026,
    0x30840250, 0x95D05485, 0x3986CC39, 0x7478C3B8, 0x0AE03493, 0xF5B2783F, 0x5B2D0688,
    0x94E0201A, 0xC9C0AB83, 0x1C47B883, 0x810AF282, 0xF444AC49, 0xC0240122, 0x2BCC4D38,
    0x4FC14C4E, 0x64512C3C, 0x095C5281, 0x179A0029, 0x819E0298, 0x99E02A81, 0x5302B818,
    0x182C0199, 0x02B01815, 0x2280D9E2, 0x0BE28E98, 0x3E5422BA, 0x25BE6C24, 0x8C2745FC,
    0x4620F5C2, 0xEDC638EA, 0x6C65B6A8, 0x14BC6646, 0x2100C42A, 0x780C93D0, 0x0268133F,
    0xE24698E4, 0x003C82E1, 0x03E02F9A, 0x3F0309A3, 0xF8319A30, 0x0311A503, 0xF290DCA8,
    0x7473276B, 0xA8B02889, 0xD885D85D, 0x5067328A, 0xCB247902, 0x380368D5, 0xD0530388,
    0x05A9A032, 0x0E1A885C, 0x9AF681F0, 0x3CEB8AB8, 0x82C83AA0, 0x5276C850, 0x013AF502,
    0x5035A487, 0x9AF6827C, 0x0171A548, 0x179A3029, 0xD9A002A0, 0x81919E48, 0x1987FC8F,
    0xE15182C8, 0x36694E3A, 0x2E81C1E2, 0x4B6694C8, 0x02701219, 0x2545E8E6, 0x5426C5F4,
    0x46180832, 0x64463428, 0xAC9E49CC, 0x80BC9E00, 0x9F93D020, 0xD3F7CA0C, 0x1A095780,
    0x2280E4DA, 0x40103150, 0x8238E082, 0x3E830C34, 0x10341A30, 0x034AF684, 0x35AF6842,
    0x1CE20428, 0x827AF684, 0x272C0C2D, 0x102EA3D8, 0xCEA06429, 0xEB86907E, 0xD4B28114,
    0x8008D34E, 0x660399BE, 0xA07FC000, 0x95D04D04, 0xF502000D, 0x338C484A, 0x4152F541,
    0x51CBFC14, 0x607FCC0C, 0x4C202881, 0xC4A724C3, 0x602B0974, 0x81A4C74C, 0x2D0DD4C8,
    0xE01B94E0, 0x82F4CB02, 0x2F81D14C, 0x081D8EF0, 0x01E8EF03, 0x0687FBF5, 0x8816994D,
    0x49B98BC6, 0xD349A4D2, 0xFC64C9BC, 0xC2A4D50E, 0xA04D7CD6, 0xA4D9153C, 0x4DB00DCD,
    0xAFBCBCDC, 0x380F87FB, 0x0244DC82, 0xDD810B15, 0x73A6084C, 0x037CAB1B, 0x38C14044,
    0x9C140450, 0x2F504583, 0xD4043837, 0x594E4E6B, 0x8E402781, 0xFB83602D, 0x752486B9,
    0x05DCAF07, 0xED4ED97E, 0xF0021CCC, 0x0749B203, 0xC252B074, 0x088603F9, 0x41602301,
    0x21BD4027, 0x2453AF6D, 0x4C3829CC, 0xFD018CFC, 0xC01907FC, 0xCFE95302, 0x2D81B151,
    0xFD01D008, 0xD0281C87, 0xEF03009B, 0xDD0581E0, 0x02050709, 0x330F63AC, 0x48220EF0,
    0xBEF822C3, 0x4EB65899, 0xD50D3F79, 0x1A8C9EC9, 0x1015250F, 0x993D4A15, 0x222B5B4D,
    0x36D133CA, 0x65153154, 0x51851751, 0x82BF6011, 0x2C112668, 0x02A09735, 0x3D02F0E8,
    0x683A9A00, 0x03CAF504, 0x3D38C048, 0x9B8C0488, 0x10DD1C83, 0x1714C835, 0xB8E40288,
    0x85184103, 0x5F86B07F, 0x7BFB86E5, 0xBB7CB2D2, 0x4B08D00A, 0x507287F0, 0x834163D6,
    0x268138F9, 0x7455C548, 0x9A002A89, 0x9099E533, 0x702D5364, 0x36B53853, 0x0353A539,
    0xD084D3BD, 0x83181F53, 0xEF53E994, 0xC8330210, 0x54282214, 0xE2034823, 0x54AC0241,
    0x42D46A02, 0x14D7394E, 0x85475185, 0xD49510CD, 0x0E93D512, 0xD51454B8, 0xD16A3154,
    0x4FD4E9A5, 0x2D508125, 0x01355181, 0xAD013CAD, 0x188244F4, 0x82A0E452, 0x3B951838,
    0x02F50470, 0x2A004A84, 0xA004B841, 0x62F558C2, 0x14C83482, 0xE402A019, 0xE84B0480,
    0x86BD248D, 0x61D61856, 0x20381BBD, 0x05485402, 0x9B86FA91, 0xC82C084D, 0xC902D29A,
    0x6DCFFD35, 0x24CB94E5, 0x07FD6F9E, 0x3153C3A7, 0x4D720EF0, 0x8EF3EC99, 0x0A575021,
    0x7823D429, 0xCAC10C57, 0x26C6A025, 0x79518370, 0x87FC3082, 0x10D8B028, 0x21530399,
    0x0141E23F, 0x7F19ED22, 0xC31554B5, 0x515D14D4, 0xE0D4E582, 0x48E0C180, 0xD858E0D8,
    0x825868E0, 0x88825878, 0xD89488D8, 0x16082027, 0x8016DB30, 0x0230E402, 0x4603ABED,
    0xD843AF50, 0x044AF284, 0x3D2F284E, 0x390C5570, 0x81C0EF03, 0x53B1502B, 0x707FC760,
    0xD9783CC7, 0xB0034D27, 0xE05E03A0, 0x06788405, 0x1799E068, 0x81898290, 0x02ECCB4C,
    0x4CD039E2, 0x4507DA31, 0xBAA906DA, 0x21BED09F, 0x25A8D418, 0x5AA824C7, 0xAD5AC4E7,
    0x1DAF5AE5, 0xDB082995, 0x6A46BC6A, 0xE91446D1, 0xC33910C6, 0xB58E9C90, 0x54DD581D,
    0x5B854F31, 0x86585584, 0x6D885875, 0x4E835182, 0xC0DBFCF8, 0xC07FDC1D, 0x5D40E455,
    0x298188E4, 0xD81D0E60, 0x0370E982, 0x45BD4043, 0x7B3084E8, 0xBC985084, 0x7FD5883D,
    0x48320238, 0x82E02119, 0x5D05C9AC, 0x94EB9AC8, 0xDCE82806, 0x380B04ED, 0xFB6E84E0,
    0x05A05907, 0x9381718B, 0x950409BD, 0x01F8EF5D, 0x7FDA653F, 0x9BEEDDC0, 0xC72023DA,
    0x7A94E579, 0x942F0A7D, 0xC31DAE1A, 0xE282A151, 0x303A82B5, 0x03B02C15, 0x7102D19E,
    0xF1A04A4C, 0xCA583D82, 0x1887FCA6, 0xA50709FE, 0xD5093F5E, 0xBB5515B9, 0x0DEDD875,
    0xC50E212C, 0x898E45BE, 0x1DC10E44, 0x09755CB1, 0xF45F3029, 0x602A534D, 0xE290198E,
    0xE602AC2A, 0x802B01B0, 0xD540308E, 0xC55C5888, 0x8DFA8510, 0xD72823DC, 0xAE032DAE,
    0xF064B6D1, 0x86998707, 0xED602814, 0x1839CB3C, 0x21307186, 0xDB04D049, 0x0DDB3A50,
    0x577434D4, 0x7A60ED78, 0xFC2ECE75, 0x612DAFC2, 0x15614168, 0x7DE5890E, 0xE1C19E61,
    0x301A0619, 0x3519CE00, 0xCA98321A, 0x4083307F, 0x564A2F68, 0x8360269A, 0xBBE2123A,
    0xA082487D, 0x6235EE35, 0x53DF0CF9, 0x86265F24, 0x09462701, 0x29D93628, 0xB81A62AE,
    0xE2D2A0E2, 0xE802B899, 0xC8E85CA8, 0x8E802C01, 0xB4D92026, 0x82F40490, 0x83B2F2DF,
    0x23414045, 0x28ED0310, 0x55E83983, 0x7966706C, 0x966885C0, 0xC3BE3780, 0x410B5371,
    0xD0738720, 0x8409C266, 0xA7884856, 0xB4720A3B, 0xDDF94E5A, 0xE1611165, 0x1839163D,
    0x46C46B15, 0xE582C644, 0xE99E46FD, 0xE4762E82, 0xA364807F, 0x0649CAA9, 0xE4B9A504,
    0xE58342F6, 0xCCE30F84, 0xE81CE49B, 0x3A82CAF6, 0x60295D38, 0xCF86228E, 0x58DF0E23,
    0x58E4654B, 0x5F38E665, 0x2A62AAB8, 0xCE59ACB6, 0x81B8E862, 0x8F36B65B, 0xD0E865DE,
    0x5A2B6281, 0x1E8E982D, 0xFE0C5F58, 0x0388EB82, 0x412F6843, 0x21C058E0, 0x03082368,
    0x4403F8ED, 0xFBFA2150, 0x66A56106, 0x3320C3FC, 0xD0490078, 0xCF087F88, 0x8603802C,
    0x7C348228, 0x5AFE7382, 0xE3E75C33, 0x846DC6CD, 0xE7903CE7, 0xA74A662E, 0x54A9648C,
    0xE7D8329A, 0xE183387F, 0x6E7F87FC, 0x6810352F, 0xBE697036, 0x49C051F9, 0x0393D404,
    0x1451DD5A, 0xBE48831C, 0x68869201, 0x85689314, 0x868B656E, 0xE2C68CE5, 0x5C68EE5A,
    0xBE5E6906, 0x01E69209, 0x94D07E93, 0xF8E9ADAE, 0x82036701, 0x2F3EC02E, 0xB82F8EB8,
    0x03C15303, 0xAE8AFDC4, 0xB8310246, 0x84D04A8E, 0xB33F9854, 0x969E8593, 0x036033C7,
    0x5301D838, 0x02DC8538, 0x07FED587, 0x5B033025, 0xE0370A78, 0x890E7614, 0x71114616,
    0x5EAA02DC, 0xE1B6AB11, 0x4ACA8CDF, 0xF9A56AE6, 0x6B1CE56A, 0xF6EB3682, 0x86B4837A,
    0xC1404483, 0x3A4146B6, 0xB4140460, 0x0BE55583, 0x56B8C047, 0x2836B8C5, 0x021BD404,
    0x28E8AD07, 0xE6590E66, 0x68E65A6B, 0xC101C68F, 0xCEC1E90E, 0xE946C32C, 0x2E01F0E9,
    0x76C66C50, 0x6C80F66C, 0x95A88695, 0xEAD010A6, 0x0ADD5B5A, 0x319A5041, 0x2025EDD0,
    0x43D8E803, 0x6C66708A, 0x8ED103F8, 0x0375CFC7, 0xFF85C834, 0x586507FD, 0x02394C86,
    0x1493D033, 0xEE1C1536, 0x67B61A02, 0x7FE7CE1B, 0x01B96AD0, 0x6E1AF684, 0xE46801BB,
    0x3836AF6C, 0xBD46E4EB, 0x7FEE6038, 0x807FEE70, 0x6E9AF56E, 0xEB03C2F5, 0xB5C8A13E,
    0x83EB8C5F, 0x498B4E60, 0x971AAA00, 0x0DD64E9A, 0xF36BF68D, 0xDEC16F46, 0x6F66C201,
    0xC5E94EC4, 0xBEC68EBE, 0xEFA8210E, 0x88EFC021, 0xD0228EBA, 0x8ED69A6F, 0x0C664823,
    0x4F0172F9, 0xE7970019, 0x345E1839, 0xCDFFAD88, 0x73606A1A, 0x3BF0502A, 0x8928035C,
    0x151DD284, 0x5B059858, 0xF0350251, 0x70FE7A8E, 0x4C64B64D, 0x4EB06B0E, 0x68271383,
    0x446E4715, 0x7F17F168, 0x6CB7196B, 0x4783C721, 0x8F1D5578, 0x71EAF404, 0x2003FAF4,
    0x16988B6F, 0x2A004B04, 0xA004C042, 0x404A03FA, 0xC7102FAF, 0x25EF4EF4, 0x7693EF5F,
    0xBEC6F8F2, 0xEBF2A6F9, 0xCEFBF2B0, 0x69AF2DF2, 0x24F2FDFC, 0x282572F8, 0x90DF3163,
    0x26994832, 0xD1948330, 0x94E03802, 0x2E94E761, 0xF8560368, 0x76606587, 0x1760107F,
    0xEC3B7378, 0x05C8391B, 0x3B342A59, 0xF8290886, 0xF40EE0DA, 0x826B2EB1, 0xABD451F6,
    0x6B7716D1, 0xCB207663, 0x80BE590E, 0x5C807FF4, 0x4983E38C, 0x0F1F0FEF, 0x840AA075,
    0x8F841E98, 0x074F07FD, 0x84C8432A, 0x4D043B8A, 0xD844B8A8, 0xF8077F04, 0x296801BC,
    0x7EF76C3F, 0xF29EF972, 0xFC72BF2A, 0xE0ED72D6, 0xF5B8A3F2, 0xFD75DF5C, 0x0F5FF5ED,
    0x540165F6, 0xAEDC99A9, 0xA8EF0345, 0x94C83582, 0xE203682B, 0x503D0379, 0x87B703A1,
    0x0B797056, 0xDBFCF688, 0x66D06F24, 0x4383CAEB, 0x461C2420, 0xBD46B471, 0x1D7726E5,
    0xA20751E5, 0xEEBD8C6E, 0x77558775, 0x013371F7, 0x04A0402A, 0x7C77B77A, 0xE38AF4F7,
    0x84438AF7, 0xC687FF81, 0xBE61AF2D, 0x33084F95, 0xAE850047, 0xA213FAE7, 0xF8C0246E,
    0x87757020, 0x98302887, 0xF5AF2EF5, 0x248ED6CC, 0xD0ED0318, 0x75E194F5, 0xAAF5F026,
    0xE827F8D8, 0xF8F82878, 0x63F90828, 0x98EF0349, 0x16873D02, 0x9202B6FE, 0xC836890F,
    0x84684314, 0x6B55FADC, 0x8E9E0738, 0x82FAE1F9, 0x480047CA, 0x507E6A10, 0x033B8056,
    0x3F0F983D, 0x0EE7D1C7, 0xFA27217A, 0xFB38C71C, 0xC7A4F4A5, 0x77A7A674, 0xA824774E,
    0x2FA904C7, 0x38AFAAF8, 0x7FDC7045, 0x284F0458, 0x7B0846AF, 0x48330FAF, 0x93308508,
    0x08CE3084, 0x4A344052, 0xC77CFE30, 0x03702A77, 0xFD0221E2, 0x6DFC788E, 0xFB8F5BFB,
    0xBAF8C6D6, 0x4F607BBF, 0x78F82799, 0xBF0EF7BE, 0x08290EF7, 0xFC2110FC, 0xC47C302A,
    0xC83602BF, 0x7C502C14, 0x6C7E6914, 0xB14C8371, 0x7C79AE08, 0xB6FC985B, 0x8038035B,
    0x05181903, 0xD5A5B052, 0xFF700806, 0xF5C9BCB0, 0x6AA00CEF, 0xCA30EAFF, 0x240F2FF6,
    0x44F6FF6D, 0x8FAFF6DA, 0x267E8B24, 0xA807FB71, 0x96414752, 0xD4BA0E3A, 0x6EA650B1,
    0x52690CFF, 0x4A936889, 0xFDBC9C45, 0x6689E463, 0xFEDF4FA3, 0x13B5023D, 0x92812892,
    0x44A40946, 0x4B3FDC2A, 0x3A5E90A5, 0x2A131485, 0xA534FF71, 0xE748FA92, 0xA479313F,
    0x462243FD, 0x6324BFD9, 0xB3212AC0, 0xB312DFEC, 0x399498FF, 0xD9CCC4EB, 0xFD986727,
    0x5FF73283, 0xA5743414, 0x453BA1A4, 0x557FB34D, 0xB2B3FF00, 0x3615F026, 0x09B4B181,
    0xB38DC59C, 0xFF205A7F, 0x7226F2E3, 0xBD913817, 0x8ABBA1C0, 0xD87FABD5, 0x60021B46,
    0xD4EA34FA, 0x6EB357AA, 0xEC35FAED, 0xA75FB2D8, 0x8B86E361, 0xFEB75BAD, 0xB7465B29,
    0x95611A09, 0x335D70EF, 0x39BFDAC8, 0xC3FDB08A, 0x9F2248E3, 0xFE411E8C, 0xA3A9841B,
    0x5EFF94A1, 0xD344ECC6, 0x58474D26, 0x148CEE7B, 0xA224DFF4, 0xB5228CFF, 0x29E98A64,
    0x52A550A9, 0x938FF71D, 0x569DFB2A, 0xCAD4FFD9, 0xFDEF263E, 0xC8214713, 0x135675B1,
    0x56F3FD6D, 0x45D9775C, 0xF57B5E57, 0x815FCFF5, 0x6198160D, 0x50362988, 0x163CFF63,
    0x599164D9, 0xFF669986, 0x33C71178, 0xE2817CFF, 0x91C8603F, 0xF87218E2, 0xBA2E8FF2,
    0x35CFF2EC, 0x1B316A39, 0xF8FA3D8F, 0xA9AF9023, 0xCE219B61, 0x34E29338, 0x4FF350D4,
    0xF2D4AA29, 0xCC9A248F, 0x8E208FF2, 0x2107494C, 0xC7C1A64F, 0x61FC6A8D, 0x086C3FCC,
    0x723FCD12, 0x1E5CC224, 0x0804388E, 0x82151625, 0xFD334C49, 0xE7795E23, 0x25CFF7B1,
    0xD5126602, 0xC7D8A954, 0x78FF7F09, 0xFF7F4AC2, 0x2B8A13FD, 0xCA23FCE4, 0x02928A2B,
    0x109FA28B, 0x111FCFFA, 0x5D17C3FD, 0xD785E850, 0x43FE98A6, 0x1C556105, 0x89A8D856,
    0x6446D62D, 0xC5B3FE1F, 0x9AB59565, 0xAE2C66D9, 0xB48BA298, 0xADE2D8BE, 0x07341EB5,
    0x6334FF2B, 0x08D13FA4, 0xC590432B, 0xB22C7B1A, 0xC711B800, 0x78E49D1C, 0x48E53FCD,
    0xD5398FFB, 0x382D3B46, 0x8D93FED9, 0xF3551236, 0x20C73FED, 0xBA2E1603, 0x29CFF2F4,
    0xE782E0AC, 0x4225BB27, 0x247B6EC9, 0x841D6EB2, 0x224778CC, 0x08E1ED67, 0x975082B4,
    0x613C4B48, 0x997A8945, 0xA06827C4, 0xA8F7DA88, 0x52C8A6A2, 0x40B3BA0E, 0x87A2A88C,
    0xAB592498, 0xAA385AA0, 0xCA9A1B15, 0xB1948821, 0x25ABE22A, 0x17E2989E, 0x2B6CAAB9,
    0xACB6B8CB, 0xA47F1DAB, 0xD9366DB2, 0xCE0AD3E0, 0x33BB2416, 0x96AB3DCF, 0x700AD009,
    0xA20D3432, 0x2C055D18, 0xA351D749, 0xF314982E, 0x3A462EB4, 0x5534CE03, 0x44ADD3F3,
    0xAD4D68E3, 0xFD78E7B5, 0x75F6D68F, 0x4A3FF633, 0x318C592E, 0x8B92E260, 0xB2AEE82E,
    0xAC9F266E, 0xBB2548CB, 0x2D88A1F9, 0x0C323294, 0xA9909295, 0x6091C048, 0x5352C975,
    0x290979F1, 0x89521502, 0x01D46145, 0x331F3FCD, 0x23647216, 0xAC624ABB, 0x32ECAF28,
    0xBE7ABAE7, 0x2B2DE7F9, 0x652A8902, 0x1FCEB92B, 0x33E00BA9, 0xEEBBADEB, 0x1FB12463,
    0x24ED09B0, 0x10BB7278, 0x066EE8AA, 0x1217BD2D, 0x20A9F00C, 0xC533FC33, 0x358F533F,
    0x0DE3F7C9, 0x0B48FEF3, 0xFCE6B571, 0xFFF50E43, 0xD492AD8C, 0x4C0300FF, 0x62D0FF30,
    0xA4A5418B, 0xA0269BB2, 0x2508C6EC, 0xC8A1FF79, 0xD210776E, 0x807518FD, 0x23606AC5,
    0x8AAB03FE, 0xFFBE82B2, 0xEE77FCCB, 0xB3228BBF, 0xE3FD4189, 0xC5D0D55B, 0xC0A812EB,
    0x13F03205, 0x2800C40E, 0x52033822, 0xB10A5050, 0x701CE0B8, 0x104AC1A1, 0x48BB83A3,
    0x01CD0806, 0xA3EA118D, 0x47E8D966, 0x361204B6, 0x1B8D6DB0, 0x6F4DE42E, 0xB6B6C1FE,
    0x531582A5, 0x422704BA, 0xB4468863, 0xF0741FE2, 0x61FE2AC3, 0xE2B83906, 0xC5E2311F,
    0x8720C23F, 0x7FF004B3, 0x13A27BFD, 0x561747FF, 0xDB3422B4, 0x182222B8, 0x722DC5A8,
    0xD1AC8BB1, 0x10182A9D, 0x209A318A, 0x0208A082, 0x8608D22B, 0x1082C60B, 0x2A2378BC,
    0x690C483A, 0xF4190F0C, 0xF51E0690, 0x7C7F3581, 0x08FF8FA3, 0x81FF2007, 0xE31D70B5,
    0x85A8FF18, 0x0A55D62D, 0x1FE2C854, 0x1144D095, 0xD2889103, 0xA80F21BD, 0x601CE210,
    0x00394461, 0x944C5703, 0xB7426043, 0x11BE2449, 0xC6E42E89, 0xCAA8BC17, 0x95B2B255,
    0x2C05F9AF, 0x4E343009, 0xB613A068, 0x7229417C, 0xB59C0509, 0xB9BA0E02, 0x217C2545,
    0xAD3C5F4C, 0x0660E518, 0xB661E932, 0x22D15C7D, 0x68CD13D7, 0xEF4751FE, 0xA220C2D5,
    0x23234528, 0xF15E8961, 0x84971081, 0xF12C1DC3, 0x2342118F, 0x81C2C258, 0xCEA9D32B,
    0x47D3B275, 0x0404FC0E, 0x1109D96C, 0x3C14318C, 0xBD3E0540, 0xF8583490, 0x44FE1721,
    0x417F2C05, 0xC3B2628D, 0x2030F678, 0xB6121CCD, 0x0332F07D, 0x44287CED, 0x20D12A23,
    0xEF0113BD, 0x57046084, 0x2852CB90, 0x58A48281, 0xB0FEEA43, 0xB49289BA, 0x293D26A4,
    0xD2AA534A, 0xA5B4B295, 0x4C297D2E, 0x99D32A63, 0x36A6B4D2, 0x0040674D, 0x00000000

  EW_BITMAPS_TABLE( ApplicationLaptopBitmap )
    EW_BITMAP( ApplicationLaptopBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationLaptopBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::LaptopBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationLaptopBitmap )

/* Initializer for the class 'Application::ExportConfigPopup' */
void ApplicationExportConfigPopup__Init( ApplicationExportConfigPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image2, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationExportConfigPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02BF );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle4, _Const02C0 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle6, _Const02C1 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const015F );
  CoreRectView__OnSetBounds( &_this->Image, _Const02C9 );
  CoreRectView__OnSetBounds( &_this->Image2, _Const02CA );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const02CB );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const02CC 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const02CD );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const02CE 
  ));
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const02CF );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const02D0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0165 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationLaptopBitmap, 
  ResourcesBitmap ));
  ViewsImage_OnSetBitmap( &_this->Image2, EwLoadResource( &ApplicationUSBStick, 
  ResourcesBitmap ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, ApplicationExportConfigPopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->ExportProgressEvent );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationExportConfigPopup_USBSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationExportConfigPopup_ConfigSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  _this->PushButton2.OnRelease = EwNewSlot( _this, ApplicationExportConfigPopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::ExportConfigPopup' */
void ApplicationExportConfigPopup__ReInit( ApplicationExportConfigPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsImage__ReInit( &_this->Image2 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'Application::ExportConfigPopup' */
void ApplicationExportConfigPopup__Done( ApplicationExportConfigPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationExportConfigPopup );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsImage__Done( &_this->Image2 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ExportConfigPopup' */
void ApplicationExportConfigPopup__Mark( ApplicationExportConfigPopup _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Image2 );
  EwMarkObject( &_this->SystemEventHandler );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::ExportConfigPopup.CancelSlot()' */
void ApplicationExportConfigPopup_CancelSlot( ApplicationExportConfigPopup _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    Command0( CMD_CANCEL_LOAD_SETTINGS, &cmd );
  }
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::ExportConfigPopup.ConfigSlot()' */
void ApplicationExportConfigPopup_ConfigSlot( ApplicationExportConfigPopup _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  {
    Command cmd;
    Command0( CMD_SAVE_SETTINGS_USB_SERIAL, &cmd );
  }
}

/* 'C' function for method : 'Application::ExportConfigPopup.USBSlot()' */
void ApplicationExportConfigPopup_USBSlot( ApplicationExportConfigPopup _this, XObject 
  sender )
{
  ApplicationSaveSitePopup ss;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ss = EwNewObject( ApplicationSaveSitePopup, 0 );
  ApplicationPopup_Show((ApplicationPopup)ss, CoreView__GetRoot( _this ));
  CoreGroup_ObtainFocus((CoreGroup)&ss->Writable.TextEditor );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationExportConfigPopup_onEvent( ApplicationExportConfigPopup _this, XObject 
  sender )
{
  ApplicationProgress p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwCastObject( _this->SystemEventHandler.Context, ApplicationProgress );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, p->amount 
  );

  if ( 100 == p->amount )
  {
    WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const02D1 
    ));
  }
}

/* Variants derived from the class : 'Application::ExportConfigPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationExportConfigPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationExportConfigPopup )

/* Virtual Method Table (VMT) for the class : 'Application::ExportConfigPopup' */
EW_DEFINE_CLASS( ApplicationExportConfigPopup, ApplicationPopup, "Application::ExportConfigPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationExportConfigPopup )

/* Initializer for the class 'Application::DeviceClass' */
void ApplicationDeviceClass__Init( ApplicationDeviceClass _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesDeviceClass__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEvent__Init( &_this->MeshListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->SiteLoadedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->MeshStatusChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FireEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FirstAidEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ResetEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EvacuateEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->SecurityEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->DisableEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->TestEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FaultEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FireListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ExportProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->StartProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EndProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->OnTestChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FaultListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EventListChangedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->LogListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->AccessModeChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->WriteProtectedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->DFUEvent, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDeviceClass );
}

/* Re-Initializer for the class 'Application::DeviceClass' */
void ApplicationDeviceClass__ReInit( ApplicationDeviceClass _this )
{
  /* At first re-initialize the super class ... */
  TemplatesDeviceClass__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEvent__ReInit( &_this->MeshListChangeEvent );
  CoreSystemEvent__ReInit( &_this->SiteLoadedEvent );
  CoreSystemEvent__ReInit( &_this->MeshStatusChangeEvent );
  CoreSystemEvent__ReInit( &_this->FireEvent );
  CoreSystemEvent__ReInit( &_this->FirstAidEvent );
  CoreSystemEvent__ReInit( &_this->ResetEvent );
  CoreSystemEvent__ReInit( &_this->EvacuateEvent );
  CoreSystemEvent__ReInit( &_this->SecurityEvent );
  CoreSystemEvent__ReInit( &_this->DisableEvent );
  CoreSystemEvent__ReInit( &_this->TestEvent );
  CoreSystemEvent__ReInit( &_this->FaultEvent );
  CoreSystemEvent__ReInit( &_this->FireListChangeEvent );
  CoreSystemEvent__ReInit( &_this->ExportProgressEvent );
  CoreSystemEvent__ReInit( &_this->StartProgressEvent );
  CoreSystemEvent__ReInit( &_this->EndProgressEvent );
  CoreSystemEvent__ReInit( &_this->OnTestChangeEvent );
  CoreSystemEvent__ReInit( &_this->FaultListChangeEvent );
  CoreSystemEvent__ReInit( &_this->EventListChangedEvent );
  CoreSystemEvent__ReInit( &_this->LogListChangeEvent );
  CoreSystemEvent__ReInit( &_this->AccessModeChangeEvent );
  CoreSystemEvent__ReInit( &_this->WriteProtectedEvent );
  CoreSystemEvent__ReInit( &_this->DFUEvent );
}

/* Finalizer method for the class 'Application::DeviceClass' */
void ApplicationDeviceClass__Done( ApplicationDeviceClass _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDeviceClass );

  /* Finalize all embedded objects */
  CoreSystemEvent__Done( &_this->MeshListChangeEvent );
  CoreSystemEvent__Done( &_this->SiteLoadedEvent );
  CoreSystemEvent__Done( &_this->MeshStatusChangeEvent );
  CoreSystemEvent__Done( &_this->FireEvent );
  CoreSystemEvent__Done( &_this->FirstAidEvent );
  CoreSystemEvent__Done( &_this->ResetEvent );
  CoreSystemEvent__Done( &_this->EvacuateEvent );
  CoreSystemEvent__Done( &_this->SecurityEvent );
  CoreSystemEvent__Done( &_this->DisableEvent );
  CoreSystemEvent__Done( &_this->TestEvent );
  CoreSystemEvent__Done( &_this->FaultEvent );
  CoreSystemEvent__Done( &_this->FireListChangeEvent );
  CoreSystemEvent__Done( &_this->ExportProgressEvent );
  CoreSystemEvent__Done( &_this->StartProgressEvent );
  CoreSystemEvent__Done( &_this->EndProgressEvent );
  CoreSystemEvent__Done( &_this->OnTestChangeEvent );
  CoreSystemEvent__Done( &_this->FaultListChangeEvent );
  CoreSystemEvent__Done( &_this->EventListChangedEvent );
  CoreSystemEvent__Done( &_this->LogListChangeEvent );
  CoreSystemEvent__Done( &_this->AccessModeChangeEvent );
  CoreSystemEvent__Done( &_this->WriteProtectedEvent );
  CoreSystemEvent__Done( &_this->DFUEvent );

  /* Don't forget to deinitialize the super class ... */
  TemplatesDeviceClass__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DeviceClass' */
void ApplicationDeviceClass__Mark( ApplicationDeviceClass _this )
{
  EwMarkObject( &_this->MeshListChangeEvent );
  EwMarkObject( &_this->SiteLoadedEvent );
  EwMarkObject( &_this->MeshStatusChangeEvent );
  EwMarkObject( &_this->FireEvent );
  EwMarkObject( &_this->FirstAidEvent );
  EwMarkObject( &_this->ResetEvent );
  EwMarkObject( &_this->EvacuateEvent );
  EwMarkObject( &_this->SecurityEvent );
  EwMarkObject( &_this->DisableEvent );
  EwMarkObject( &_this->TestEvent );
  EwMarkObject( &_this->FaultEvent );
  EwMarkObject( &_this->FireListChangeEvent );
  EwMarkObject( &_this->ExportProgressEvent );
  EwMarkObject( &_this->StartProgressEvent );
  EwMarkObject( &_this->EndProgressEvent );
  EwMarkObject( &_this->OnTestChangeEvent );
  EwMarkObject( &_this->FaultListChangeEvent );
  EwMarkObject( &_this->EventListChangedEvent );
  EwMarkObject( &_this->LogListChangeEvent );
  EwMarkObject( &_this->AccessModeChangeEvent );
  EwMarkObject( &_this->WriteProtectedEvent );
  EwMarkObject( &_this->DFUEvent );

  /* Give the super class a chance to mark its objects and references */
  TemplatesDeviceClass__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::DeviceClass.OnSetProperty()' */
void ApplicationDeviceClass_OnSetProperty( ApplicationDeviceClass _this, XInt32 
  value )
{
  if ( _this->Property == value )
    return;

  _this->Property = value;
  {
    /*
       TO DO:

       You can call a function of your own device API or you simply
       modify a variable existing in your middleware to reflect the
       new value:

       YourDevice_SetSomeValue( value );

       or

       YourDevice_SomeVariable = value;
    */
  }
  EwNotifyRefObservers( EwNewRef( _this, ApplicationDeviceClass_OnGetProperty, ApplicationDeviceClass_OnSetProperty 
    ), 0 );
}

/* This method is intended to be called by the device to notify the GUI application 
   about an alternation of its setting or state value. */
void ApplicationDeviceClass_UpdateProperty( ApplicationDeviceClass _this, XInt32 
  aNewValue )
{
  if ( aNewValue != _this->Property )
  {
    _this->Property = aNewValue;
    EwNotifyRefObservers( EwNewRef( _this, ApplicationDeviceClass_OnGetProperty, 
      ApplicationDeviceClass_OnSetProperty ), 0 );
  }
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.UpdateProperty()' */
void ApplicationDeviceClass__UpdateProperty( void* _this, XInt32 aNewValue )
{
  ApplicationDeviceClass_UpdateProperty((ApplicationDeviceClass)_this, aNewValue );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerMeshListChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->MeshListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerMeshListChangeEvent()' */
void ApplicationDeviceClass__TriggerMeshListChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerMeshListChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerSiteLoadedEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->SiteLoadedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerSiteLoadedEvent()' */
void ApplicationDeviceClass__TriggerSiteLoadedEvent( void* _this )
{
  ApplicationDeviceClass_TriggerSiteLoadedEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerMeshStatusChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->MeshStatusChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerMeshStatusChangeEvent()' */
void ApplicationDeviceClass__TriggerMeshStatusChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerMeshStatusChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerFireEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerFireEvent()' */
void ApplicationDeviceClass__TriggerFireEvent( void* _this )
{
  ApplicationDeviceClass_TriggerFireEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerFirstAidEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerFirstAidEvent()' */
void ApplicationDeviceClass__TriggerFirstAidEvent( void* _this )
{
  ApplicationDeviceClass_TriggerFirstAidEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerResetEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerResetEvent()' */
void ApplicationDeviceClass__TriggerResetEvent( void* _this )
{
  ApplicationDeviceClass_TriggerResetEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerEvacuateEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerEvacuateEvent()' */
void ApplicationDeviceClass__TriggerEvacuateEvent( void* _this )
{
  ApplicationDeviceClass_TriggerEvacuateEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerSecurityEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->SecurityEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerSecurityEvent()' */
void ApplicationDeviceClass__TriggerSecurityEvent( void* _this )
{
  ApplicationDeviceClass_TriggerSecurityEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerDisableEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->DisableEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerDisableEvent()' */
void ApplicationDeviceClass__TriggerDisableEvent( void* _this )
{
  ApplicationDeviceClass_TriggerDisableEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerTestEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->TestEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerTestEvent()' */
void ApplicationDeviceClass__TriggerTestEvent( void* _this )
{
  ApplicationDeviceClass_TriggerTestEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerFaultEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FaultEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerFaultEvent()' */
void ApplicationDeviceClass__TriggerFaultEvent( void* _this )
{
  ApplicationDeviceClass_TriggerFaultEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerFireListChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerFireListChangeEvent()' */
void ApplicationDeviceClass__TriggerFireListChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerFireListChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerExportProgressEvent( ApplicationDeviceClass _this, 
  XInt32 amount )
{
  ApplicationProgress p = EwNewObject( ApplicationProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->ExportProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerExportProgressEvent()' */
void ApplicationDeviceClass__TriggerExportProgressEvent( void* _this, XInt32 amount )
{
  ApplicationDeviceClass_TriggerExportProgressEvent((ApplicationDeviceClass)_this
  , amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerStartProgressEvent( ApplicationDeviceClass _this, 
  XInt32 amount )
{
  ApplicationProgress p = EwNewObject( ApplicationProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->StartProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerStartProgressEvent()' */
void ApplicationDeviceClass__TriggerStartProgressEvent( void* _this, XInt32 amount )
{
  ApplicationDeviceClass_TriggerStartProgressEvent((ApplicationDeviceClass)_this
  , amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerEndProgressEvent( ApplicationDeviceClass _this, 
  XInt32 amount )
{
  ApplicationProgress p = EwNewObject( ApplicationProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->EndProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerEndProgressEvent()' */
void ApplicationDeviceClass__TriggerEndProgressEvent( void* _this, XInt32 amount )
{
  ApplicationDeviceClass_TriggerEndProgressEvent((ApplicationDeviceClass)_this, 
  amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerOnTestChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->OnTestChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerOnTestChangeEvent()' */
void ApplicationDeviceClass__TriggerOnTestChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerOnTestChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerFaultListChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FaultListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerFaultListChangeEvent()' */
void ApplicationDeviceClass__TriggerFaultListChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerFaultListChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerEventListChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->EventListChangedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerEventListChangeEvent()' */
void ApplicationDeviceClass__TriggerEventListChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerEventListChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerLogListChangeEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->LogListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerLogListChangeEvent()' */
void ApplicationDeviceClass__TriggerLogListChangeEvent( void* _this )
{
  ApplicationDeviceClass_TriggerLogListChangeEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerAccessModeChangeEvent( ApplicationDeviceClass _this, 
  XInt32 level )
{
  ApplicationAccess access = EwNewObject( ApplicationAccess, 0 );

  access->Level = level;
  CoreSystemEvent_Trigger( &_this->AccessModeChangeEvent, ((XObject)access ), 0 
  );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerAccessModeChangeEvent()' */
void ApplicationDeviceClass__TriggerAccessModeChangeEvent( void* _this, XInt32 level )
{
  ApplicationDeviceClass_TriggerAccessModeChangeEvent((ApplicationDeviceClass)_this
  , level );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerWriteProtectedEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->WriteProtectedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerWriteProtectedEvent()' */
void ApplicationDeviceClass__TriggerWriteProtectedEvent( void* _this )
{
  ApplicationDeviceClass_TriggerWriteProtectedEvent((ApplicationDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void ApplicationDeviceClass_TriggerDFUEvent( ApplicationDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->DFUEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'Application::DeviceClass.TriggerDFUEvent()' */
void ApplicationDeviceClass__TriggerDFUEvent( void* _this )
{
  ApplicationDeviceClass_TriggerDFUEvent((ApplicationDeviceClass)_this );
}

/* Default onget method for the property 'Property' */
XInt32 ApplicationDeviceClass_OnGetProperty( ApplicationDeviceClass _this )
{
  return _this->Property;
}

/* Variants derived from the class : 'Application::DeviceClass' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDeviceClass )
EW_END_OF_CLASS_VARIANTS( ApplicationDeviceClass )

/* Virtual Method Table (VMT) for the class : 'Application::DeviceClass' */
EW_DEFINE_CLASS( ApplicationDeviceClass, TemplatesDeviceClass, "Application::DeviceClass" )
EW_END_OF_CLASS( ApplicationDeviceClass )

/* User defined auto object: 'Application::Devices' */
EW_DEFINE_AUTOOBJECT( ApplicationDevices, ApplicationDeviceClass )

/* Initializer for the auto object 'Application::Devices' */
void ApplicationDevices__Init( ApplicationDeviceClass _this )
{
  EW_UNUSED_ARG( _this );
}

/* Table with links to derived variants of the auto object : 'Application::Devices' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationDevices )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationDevices )

/* Initializer for the class 'Application::Progress' */
void ApplicationProgress__Init( ApplicationProgress _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationProgress );
}

/* Re-Initializer for the class 'Application::Progress' */
void ApplicationProgress__ReInit( ApplicationProgress _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::Progress' */
void ApplicationProgress__Done( ApplicationProgress _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationProgress );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Progress' */
void ApplicationProgress__Mark( ApplicationProgress _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::Progress' */
EW_DEFINE_CLASS_VARIANTS( ApplicationProgress )
EW_END_OF_CLASS_VARIANTS( ApplicationProgress )

/* Virtual Method Table (VMT) for the class : 'Application::Progress' */
EW_DEFINE_CLASS( ApplicationProgress, XObject, "Application::Progress" )
EW_END_OF_CLASS( ApplicationProgress )

/* Initializer for the class 'Application::SaveSitePopup' */
void ApplicationSaveSitePopup__Init( ApplicationSaveSitePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationMattsKeyboard__Init( &_this->MattsKeyboard, &_this->_XObject, 0 );
  ApplicationWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButtonConfig__Init( &_this->PushButtonConfig, &_this->_XObject, 0 );
  WidgetSetPushButtonConfig__Init( &_this->PushButtonConfig1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSaveSitePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02D2 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const015F );
  CoreRectView__OnSetBounds( &_this->MattsKeyboard, _Const02D3 );
  CoreRectView__OnSetBounds( &_this->Writable, _Const02D4 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const02D5 );
  WidgetSetPushButton_OnSetIconFrameDefault( &_this->PushButton, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const02D6 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const02D7 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0165 
  ));
  WidgetSetPushButtonConfig_OnSetLabelColorActive( &_this->PushButtonConfig, _Const02D8 
  );
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( &_this->PushButtonConfig, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( &_this->PushButtonConfig, 1 );
  WidgetSetPushButtonConfig_OnSetLabelColorActive( &_this->PushButtonConfig1, _Const02D8 
  );
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( &_this->PushButtonConfig1, _Const02D9 
  );
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( &_this->PushButtonConfig1, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( &_this->PushButtonConfig1, 2 
  );
  CoreGroup__Add( _this, ((CoreView)&_this->MattsKeyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__OnSetFocus( _this, ((CoreView)&_this->Writable ));
  ApplicationWritable_OnSetProperty( &_this->Writable, EwNewRef( _this, ApplicationSaveSitePopup_OnGetFileName, 
  ApplicationSaveSitePopup_OnSetFileName ));
  _this->PushButton.OnActivate = EwNewSlot( _this, ApplicationSaveSitePopup_SaveSlot 
  );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, 0 );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, ApplicationSaveSitePopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  WidgetSetPushButtonConfig_OnSetLabelFont( &_this->PushButtonConfig, EwLoadResource( 
  &FlatFontM, ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonMedium, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( &_this->PushButtonConfig, EwLoadResource( 
  &WidgetSetPushButtonMedium, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetLabelFont( &_this->PushButtonConfig1, EwLoadResource( 
  &FlatFontM, ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( &_this->PushButtonConfig1, EwLoadResource( 
  &WidgetSetPushButtonMedium, ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( &_this->PushButtonConfig1, EwLoadResource( 
  &WidgetSetPushButtonMedium, ResourcesBitmap ));
}

/* Re-Initializer for the class 'Application::SaveSitePopup' */
void ApplicationSaveSitePopup__ReInit( ApplicationSaveSitePopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationMattsKeyboard__ReInit( &_this->MattsKeyboard );
  ApplicationWritable__ReInit( &_this->Writable );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButtonConfig__ReInit( &_this->PushButtonConfig );
  WidgetSetPushButtonConfig__ReInit( &_this->PushButtonConfig1 );
}

/* Finalizer method for the class 'Application::SaveSitePopup' */
void ApplicationSaveSitePopup__Done( ApplicationSaveSitePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSaveSitePopup );

  /* Finalize all embedded objects */
  ApplicationMattsKeyboard__Done( &_this->MattsKeyboard );
  ApplicationWritable__Done( &_this->Writable );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButtonConfig__Done( &_this->PushButtonConfig );
  WidgetSetPushButtonConfig__Done( &_this->PushButtonConfig1 );

  /* Release all used strings */
  EwReleaseString( &_this->FileName );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SaveSitePopup' */
void ApplicationSaveSitePopup__Mark( ApplicationSaveSitePopup _this )
{
  EwMarkObject( &_this->MattsKeyboard );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButtonConfig );
  EwMarkObject( &_this->PushButtonConfig1 );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::SaveSitePopup.SaveSlot()' */
void ApplicationSaveSitePopup_SaveSlot( ApplicationSaveSitePopup _this, XObject 
  sender )
{
  XString fname;
  XInt32 success;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  fname = ApplicationTextEditor_OnGetString( &_this->Writable.TextEditor );
  success = 0;
  {
    char file[ 256];

    EwStringToAnsi( fname, file, 256, '-' );

    success = Command1( CMD_SAVE_SETTINGS_USB_HOST, (int) file );
  }

  if ( success != 0 )
  {
    ApplicationAccesssPopup ll = EwNewObject( ApplicationAccesssPopup, 0 );
    ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const02DA ));
    ApplicationAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
  }

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::SaveSitePopup.CancelSlot()' */
void ApplicationSaveSitePopup_CancelSlot( ApplicationSaveSitePopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Default onget method for the property 'FileName' */
XString ApplicationSaveSitePopup_OnGetFileName( ApplicationSaveSitePopup _this )
{
  return _this->FileName;
}

/* Default onset method for the property 'FileName' */
void ApplicationSaveSitePopup_OnSetFileName( ApplicationSaveSitePopup _this, XString 
  value )
{
  EwRetainString( &_this->FileName, value );
}

/* Variants derived from the class : 'Application::SaveSitePopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSaveSitePopup )
EW_END_OF_CLASS_VARIANTS( ApplicationSaveSitePopup )

/* Virtual Method Table (VMT) for the class : 'Application::SaveSitePopup' */
EW_DEFINE_CLASS( ApplicationSaveSitePopup, ApplicationPopup, "Application::SaveSitePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSaveSitePopup )

/* This autoobject provides the default customization for the 'radio button' widget 
   (WidgetSet::RadioButton) in its medium size variant. */
EW_DEFINE_AUTOOBJECT( ApplicationNormalRadioButton, WidgetSetRadioButtonConfig )

/* Initializer for the auto object 'Application::NormalRadioButton' */
void ApplicationNormalRadioButton__Init( WidgetSetRadioButtonConfig _this )
{
  WidgetSetRadioButtonConfig_OnSetLabelOnColorActive( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorFocused( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorDefault( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorActive( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorFocused( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorDefault( _this, _Const0018 );
  WidgetSetRadioButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetRadioButtonConfig_OnSetIconOnTintActive( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconOnTintFocused( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconOnTintDisabled( _this, _Const02DC );
  WidgetSetRadioButtonConfig_OnSetIconOnTintDefault( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconOffTintActive( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconOffTintFocused( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconOffTintDisabled( _this, _Const02DC );
  WidgetSetRadioButtonConfig_OnSetIconOffTintDefault( _this, _Const02DB );
  WidgetSetRadioButtonConfig_OnSetIconMarginLeft( _this, 45 );
  WidgetSetRadioButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetRadioButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetRadioButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetRadioButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetRadioButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetRadioButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetRadioButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetWidgetMinSize( _this, _Const02DD );
}

/* Table with links to derived variants of the auto object : 'Application::NormalRadioButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationNormalRadioButton )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationNormalRadioButton )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( ApplicationNormalCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'Application::NormalCheckBox' */
void ApplicationNormalCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02DD );
}

/* Table with links to derived variants of the auto object : 'Application::NormalCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationNormalCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationNormalCheckBox )

/* This autoobject provides the default customization for the 'horizontal slider' 
   widget (WidgetSet::HorizontalSlider) in its medium size variant. */
EW_DEFINE_AUTOOBJECT( ApplicationNormalHorizontalSlider, WidgetSetHorizontalSliderConfig )

/* Initializer for the auto object 'Application::NormalHorizontalSlider' */
void ApplicationNormalHorizontalSlider__Init( WidgetSetHorizontalSliderConfig _this )
{
  WidgetSetHorizontalSliderConfig_OnSetKeyRepeatPeriod( _this, 100 );
  WidgetSetHorizontalSliderConfig_OnSetKeyRepeatDelay( _this, 500 );
  WidgetSetHorizontalSliderConfig_OnSetCoverTintDisabled( _this, _Const02DE );
  WidgetSetHorizontalSliderConfig_OnSetThumbMarginRight( _this, -2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbMarginLeft( _this, -2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameActive( _this, 3 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameFocused( _this, 2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameDisabled( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameDefault( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetThumbActive( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbFocused( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbDisabled( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbDefault( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightTintDisabled( _this, _Const02DE 
  );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameActive( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameFocused( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameDisabled( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameDefault( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightActive( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFocused( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightDisabled( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightDefault( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftTintActive( _this, _Const02DF );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftTintDisabled( _this, _Const02E0 
  );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameActive( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameFocused( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameDisabled( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameDefault( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftActive( _this, EwLoadResource( &WidgetSetHorizontalSliderTrackMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFocused( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftDisabled( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftDefault( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetFaceTintDisabled( _this, _Const02E1 );
  WidgetSetHorizontalSliderConfig_OnSetWidgetMinSize( _this, _Const02E2 );
}

/* Table with links to derived variants of the auto object : 'Application::NormalHorizontalSlider' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationNormalHorizontalSlider )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationNormalHorizontalSlider )

/* Initializer for the class 'Application::InputChannels' */
void ApplicationInputChannels__Init( ApplicationInputChannels _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->Cancel, &_this->_XObject, 0 );
  ApplicationInputAction__Init( &_this->InputAction, &_this->_XObject, 0 );
  ApplicationDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  ApplicationInputSignal__Init( &_this->InputSignal, &_this->_XObject, 0 );
  ApplicationInputDelay__Init( &_this->InputDelay, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputChannels );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const000C );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle3, _Const02E3 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const02E4 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle3, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const02E5 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const02E6 ));
  ViewsText_OnSetEmbedded( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const02E7 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0052 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle9, 0 );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const02E8 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 1000 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const02E7 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->Border, _Const02E7 );
  ViewsBorder_OnSetVisible( &_this->Border, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const02E9 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0163 
  ));
  CoreRectView__OnSetBounds( &_this->Outline, _Const02E7 );
  CoreOutline_OnSetSpace( &_this->Outline, 15 );
  CoreOutline_OnSetFormation( &_this->Outline, CoreFormationTopToBottom );
  CoreRectView__OnSetBounds( &_this->Cancel, _Const02EA );
  WidgetSetPushButton_OnSetLabel( &_this->Cancel, EwLoadString( &_Const0165 ));
  CoreRectView__OnSetBounds( &_this->InputAction, _Const02EB );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputAction, 1 );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const02EC );
  CoreRectView__OnSetBounds( &_this->InputSignal, _Const02ED );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputSignal, 1 );
  CoreRectView__OnSetBounds( &_this->InputDelay, _Const02EE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputDelay, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Cancel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputAction ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputSignal ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputDelay ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, ApplicationInputChannels_Scroll 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationInputChannels_TouchScroll 
  );
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationInputChannels_ProceedSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  _this->Cancel.OnRelease = EwNewSlot( _this, ApplicationInputChannels_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->Cancel, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->DropDownMenu.onSelection = EwNewSlot( _this, ApplicationInputChannels_Select 
  );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, ApplicationInputChannels_LoadMenu 
  );

  /* Call the user defined constructor */
  ApplicationInputChannels_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::InputChannels' */
void ApplicationInputChannels__ReInit( ApplicationInputChannels _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ViewsBorder__ReInit( &_this->Border );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreOutline__ReInit( &_this->Outline );
  WidgetSetPushButton__ReInit( &_this->Cancel );
  ApplicationInputAction__ReInit( &_this->InputAction );
  ApplicationDropDownMenu__ReInit( &_this->DropDownMenu );
  ApplicationInputSignal__ReInit( &_this->InputSignal );
  ApplicationInputDelay__ReInit( &_this->InputDelay );
}

/* Finalizer method for the class 'Application::InputChannels' */
void ApplicationInputChannels__Done( ApplicationInputChannels _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputChannels );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  ViewsRectangle__Done( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ViewsBorder__Done( &_this->Border );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreOutline__Done( &_this->Outline );
  WidgetSetPushButton__Done( &_this->Cancel );
  ApplicationInputAction__Done( &_this->InputAction );
  ApplicationDropDownMenu__Done( &_this->DropDownMenu );
  ApplicationInputSignal__Done( &_this->InputSignal );
  ApplicationInputDelay__Done( &_this->InputDelay );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputChannels' */
void ApplicationInputChannels__Mark( ApplicationInputChannels _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->Cancel );
  EwMarkObject( &_this->InputAction );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->InputSignal );
  EwMarkObject( &_this->InputDelay );
  EwMarkObject( _this->device );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationInputChannels_Init( ApplicationInputChannels _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, EwGetRectH( 
  CoreOutline_GetContentArea( &_this->Outline, CoreViewStateEnabled )) + (( CoreOutline_CountViews( 
  &_this->Outline ) - 1 ) * _this->Outline.Space ));
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
  _this->Outline.Super1.Bounds ));
}

/* 'C' function for method : 'Application::InputChannels.ProceedSlot()' */
void ApplicationInputChannels_ProceedSlot( ApplicationInputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->device != 0 )
  {
    ApplicationLibClass_SetConfig( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
    ), _this->device->unitnum, _this->device );
  }

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::InputChannels.Scroll()' */
void ApplicationInputChannels_Scroll( ApplicationInputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar )));
}

/* 'C' function for method : 'Application::InputChannels.TouchScroll()' */
void ApplicationInputChannels_TouchScroll( ApplicationInputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'Application::InputChannels.Select()' */
void ApplicationInputChannels_Select( ApplicationInputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationInputChannels_OnSetChanIndex( _this, _this->DropDownMenu.VerticalList.SelectedItem 
  );
}

/* 'C' function for method : 'Application::InputChannels.LoadMenu()' */
void ApplicationInputChannels_LoadMenu( ApplicationInputChannels _this, XObject 
  sender )
{
  ApplicationDropDownMenu m = EwCastObject( sender, ApplicationDropDownMenu );
  XInt32 i = m->itemIndex;

  if ( _this->device != 0 )
  {
    EwRetainString( &m->itemName, ApplicationLibClass_TypeName( EwGetAutoObject( 
    &ApplicationLib, ApplicationLibClass ), _this->device->inputs[ EwCheckIndex( 
    i, 32 )]->type ));
  }
  else
  {
    EwRetainString( &m->itemName, EwLoadString( &_Const02EF ));
  }
}

/* 'C' function for method : 'Application::InputChannels.OnSetChanIndex()' */
void ApplicationInputChannels_OnSetChanIndex( ApplicationInputChannels _this, XInt32 
  value )
{
  if (( _this->device != 0 ) && ( value < ApplicationLibClass_NumInputChannels( 
      EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), _this->device->unitnum 
      )))
  {
    ApplicationInputChannel i;
    _this->ChanIndex = value;
    i = _this->device->inputs[ EwCheckIndex( _this->ChanIndex, 32 )];

    if ( i != 0 )
    {
      XInt32 n;
      XBool extra;
      ApplicationInputAction_OnSetinputAction( &_this->InputAction, i->action );
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.BypassDelay, (( i->flags 
      & ApplicationOptionsIgnoreDelay ) == ApplicationOptionsIgnoreDelay ));
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Inverted, (( i->flags 
      & ApplicationOptionsIgnoreDelay ) == ApplicationOptionsIgnoreDelay ));
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Latching, (( i->flags 
      & ApplicationOptionsLatching ) == ApplicationOptionsLatching ));
      WidgetSetRadioButton_OnSetSelected( &_this->InputDelay.DoubleKnock, (( i->flags 
      & ApplicationOptionsDoubleKnock ) == ApplicationOptionsDoubleKnock ));
      WidgetSetRadioButton_OnSetSelected( &_this->InputDelay.Sustained, (( i->flags 
      & ApplicationOptionsSustained ) == ApplicationOptionsSustained ));
      ApplicationInputDelay_OnSetDelaySecs( &_this->InputDelay, i->delay );
      CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, _this->ChanIndex 
      );
      ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, ApplicationLibClass_TypeName( 
      EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), i->type ));
      ApplicationDropDownMenu_OnSetnumItems( &_this->DropDownMenu, (XUInt8)ApplicationDeviceConfig_NumInputs( 
      _this->device ));
      extra = 0;

      for ( n = 0; n < 4; n = n + 1 )
      {
        if ( _this->device->params[ EwCheckIndex( n, 4 )] != 0 )
        {
          ApplicationParameter p = _this->device->params[ EwCheckIndex( n, 4 )];

          if (( p->code != ApplicationParamCodeUnused ) && ( p->channel == _this->ChanIndex 
              ))
          {
            if ( extra == 0 )
            {
              ApplicationParamSpecific title;
              extra = 1;
              title = EwNewObject( ApplicationParamSpecific, 0 );
              CoreGroup_OnSetEmbedded((CoreGroup)title, 1 );
              CoreGroup__Add( _this, ((CoreView)title ), 117 );
            }

            if (( p->max - p->min ) == 1 )
            {
              ApplicationParamToggle tog = EwNewObject( ApplicationParamToggle, 
                0 );
              CoreGroup_OnSetEmbedded((CoreGroup)tog, 1 );
              tog->param = p;
              ViewsText_OnSetString( &tog->Text2, p->name );
              CoreGroup__Add( _this, ((CoreView)tog ), 118 );
            }
            else
            {
              ApplicationParamSlider slide = EwNewObject( ApplicationParamSlider, 
                0 );
              CoreGroup_OnSetEmbedded((CoreGroup)slide, 1 );
              slide->param = p;
              ViewsText_OnSetString( &slide->Text2, p->name );
              CoreGroup__Add( _this, ((CoreView)slide ), 118 );
            }
          }
        }
      }
    }
  }
}

/* 'C' function for method : 'Application::InputChannels.CancelSlot()' */
void ApplicationInputChannels_CancelSlot( ApplicationInputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* Variants derived from the class : 'Application::InputChannels' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputChannels )
EW_END_OF_CLASS_VARIANTS( ApplicationInputChannels )

/* Virtual Method Table (VMT) for the class : 'Application::InputChannels' */
EW_DEFINE_CLASS( ApplicationInputChannels, ApplicationPopup, "Application::InputChannels" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationInputChannels )

/* Initializer for the class 'Application::DropDownMenu' */
void ApplicationDropDownMenu__Init( ApplicationDropDownMenu _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->MenuSelectionText, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDropDownMenu );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02F0 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const02F1 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const02F2 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const02F3 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const02F4 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const02F4 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const02F3 );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const00EB );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const02F5 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const02F6 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const02F7 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
  CoreSimpleTouchHandler_OnSetEmbedded( &_this->SimpleTouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->MenuSelectionText, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->MenuSelectionText, _Const02F8 );
  ViewsText_OnSetAlignment( &_this->MenuSelectionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->MenuSelectionText, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->MenuSelectionText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const02F9 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 0 );
  CoreView_OnSetLayout((CoreView)&_this->VerticalList, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const02FA );
  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 40 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationDropMenuItem 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler1, _Const02FB );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler1, _Const02FC );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, _Const02FD );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, _Const02FE );
  _this->SimpleTouchHandler1.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
  | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, 0 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const02FF );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  EwRetainString( &_this->itemName, EwLoadString( &_Const01A9 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MenuSelectionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, ApplicationDropDownMenu_Release 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationDropDownMenu_Press 
  );
  ViewsText_OnSetFont( &_this->MenuSelectionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationDropDownMenu_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SimpleTouchHandler1.OnRelease = EwNewSlot( _this, ApplicationDropDownMenu_ItemRelease 
  );
  _this->SimpleTouchHandler1.OnPress = EwNewSlot( _this, ApplicationDropDownMenu_ItemSelect 
  );
  _this->PushButton.OnPress = EwNewSlot( _this, ApplicationDropDownMenu_Press );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &ApplicationDropDownSimpleBitmap, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::DropDownMenu' */
void ApplicationDropDownMenu__ReInit( ApplicationDropDownMenu _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->MenuSelectionText );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'Application::DropDownMenu' */
void ApplicationDropDownMenu__Done( ApplicationDropDownMenu _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDropDownMenu );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->MenuSelectionText );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler1 );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Release all used strings */
  EwReleaseString( &_this->itemName );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DropDownMenu' */
void ApplicationDropDownMenu__Mark( ApplicationDropDownMenu _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->MenuSelectionText );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SimpleTouchHandler1 );
  EwMarkSlot( _this->onSelection );
  EwMarkObject( &_this->PushButton );
  EwMarkSlot( _this->GetItemCallback );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDropDownMenu_UpdateLayout( ApplicationDropDownMenu _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDropDownMenu_UpdateViewState( ApplicationDropDownMenu _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::DropDownMenu.Press()' */
void ApplicationDropDownMenu_Press( ApplicationDropDownMenu _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, (XBool)!CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
}

/* 'C' function for method : 'Application::DropDownMenu.Release()' */
void ApplicationDropDownMenu_Release( ApplicationDropDownMenu _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationDropDownMenu_OnLoadItem( ApplicationDropDownMenu _this, XObject 
  sender )
{
  XInt32 itemNo;
  ApplicationDropMenuItem itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, ApplicationDropMenuItem );

  if ( itemView == 0 )
    return;

  if ( itemNo == _this->VerticalList.SelectedItem )
  {
    itemView->pressed = 1;
  }
  else
  {
    itemView->pressed = 0;
  }

  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));

  if ( _this->GetItemCallback.Object != 0 )
  {
    _this->itemIndex = itemNo;
    EwSignal( _this->GetItemCallback, ((XObject)_this ));

    if ( EwCompString( _this->itemName, 0 ) != 0 )
    {
      ViewsText_OnSetString( &itemView->CaptionText, _this->itemName );
      return;
    }
  }

  ViewsText_OnSetString( &itemView->CaptionText, EwConcatString( EwLoadString( &_Const0300 
  ), EwNewStringInt( itemNo, 0, 10 )));
}

/* 'C' function for method : 'Application::DropDownMenu.OnSetnumItems()' */
void ApplicationDropDownMenu_OnSetnumItems( ApplicationDropDownMenu _this, XUInt8 
  value )
{
  XInt32 size;

  if ( _this->numItems == value )
    return;

  _this->numItems = value;
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, _this->numItems );
  size = _this->VerticalList.ItemHeight * _this->numItems;
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectY2( _this->VerticalList.Super2.Bounds, 
  ( _this->VerticalList.Super2.Bounds.Point1.Y + size ) + 20 ));

  if ( _this->VerticalList.Super2.Bounds.Point2.Y > 480 )
    CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectY2( _this->VerticalList.Super2.Bounds, 
    480 ));

  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, EwSetPointY( _this->SimpleTouchHandler1.Super1.Point1, 
  _this->VerticalList.Super2.Bounds.Point2.Y ));
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, EwSetPointY( _this->SimpleTouchHandler1.Super1.Point2, 
  _this->VerticalList.Super2.Bounds.Point2.Y ));
  CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, _this->VerticalList.Super2.Bounds.Point2.Y 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectW( _this->VerticalList.Super2.Bounds, 
  EwGetRectW( _this->Super2.Bounds ) - 40 ));
}

/* 'C' function for method : 'Application::DropDownMenu.ItemSelect()' */
void ApplicationDropDownMenu_ItemSelect( ApplicationDropDownMenu _this, XObject 
  sender )
{
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler1.CurrentPos 
  );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
}

/* 'C' function for method : 'Application::DropDownMenu.ItemRelease()' */
void ApplicationDropDownMenu_ItemRelease( ApplicationDropDownMenu _this, XObject 
  sender )
{
  XInt32 itemNo;
  ApplicationDropMenuItem v;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->SimpleTouchHandler1.Inside )
    return;

  if ( _this->SimpleTouchHandler1.AutoDeflected )
    return;

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler1.CurrentPos 
  );
  v = EwCastObject( CoreVerticalList_GetViewForItem( &_this->VerticalList, itemNo 
  ), ApplicationDropMenuItem );

  if ( itemNo >= 0 )
  {
    CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );
    CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
    - 1 );
    ViewsText_OnSetString( &_this->MenuSelectionText, v->CaptionText.String );
    CoreGroup_OnSetVisible((CoreGroup)&_this->VerticalList, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, 0 );
    EwPostSignal( _this->onSelection, ((XObject)_this ));
  }
}

/* Variants derived from the class : 'Application::DropDownMenu' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDropDownMenu )
EW_END_OF_CLASS_VARIANTS( ApplicationDropDownMenu )

/* Virtual Method Table (VMT) for the class : 'Application::DropDownMenu' */
EW_DEFINE_CLASS( ApplicationDropDownMenu, CoreGroup, "Application::DropDownMenu" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDropDownMenu_UpdateLayout,
  ApplicationDropDownMenu_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDropDownMenu )

/* Bitmap resource : 'Application::DropDownSimpleBitmap' */
EW_DEFINE_BITMAP_RES( ApplicationDropDownSimpleBitmap )
  EW_BITMAP_FRAMES( ApplicationDropDownSimpleBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 33, 18, 0 )
    EW_BITMAP_FRAME( 15, 15, 3, 1, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationDropDownSimpleBitmap, Default )/* ratio 25.59 % */
    0x04086D00, 0xC106D020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xA4284C4A, 0x18240322,
    0xE8D9287D, 0x868060A1, 0x8C4E4310, 0xC8A47208, 0xAA492892, 0xA4D2B93C, 0x30428AC4,
    0xAA1998F8, 0x381CBFE0, 0x69D8F581, 0x9FCB2522, 0x6D067D2E, 0xD128B429, 0x96924181,
    0x95B4C1D8, 0xFF02A7CD, 0x0B6A98E9, 0x4615D588, 0xAA1D6681, 0xAFD768F5, 0x4D888800,
    0xADC73381, 0xEE0AFE82, 0x86EE3B2B, 0xDD3679DB, 0x156650DE, 0x78AD9108, 0x9BDD72BD,
    0xBF90E0D7, 0xA8EAA620, 0x615FB055, 0x2A36BCC1, 0xF1A3C129, 0xD0F882A1, 0x3496F5CA,
    0x7CBE9308, 0x5ADE62F5, 0x1E634339, 0xD8DAA0AF, 0x2EC774C7, 0x241FA82A, 0x417AC28C,
    0xE36A5369, 0x9756B5BA, 0x9ACDC787, 0x58A58373, 0x5967C471, 0x8609F3A2, 0x0478A595,
    0x379258A1, 0x60AA4D28, 0x8B659B3D, 0x02FE98FD, 0x7BDD6EF7, 0xEC10C72B, 0x56E0B82B,
    0xC080877F, 0xE941F8AC, 0x41DF7242, 0xFA6C89C7, 0xAF99EB74, 0xF65ED48B, 0xA5B55A18,
    0xBFD91959, 0x84F636E1, 0x99F02DE1, 0x23C1721B, 0xCCE10DDB, 0xF01643E4, 0x4C103835,
    0x8C369424, 0x067CFC68, 0x28546A0B, 0x4E5020E0, 0x67C06874, 0x8F741481, 0xD4ECE768,
    0x09051543, 0x305EE1B0, 0x2E58D6F9, 0x6263E1A2, 0x98D4572B, 0x6D5B8AC0, 0x260223A1,
    0x3D90526E, 0xA2635E07, 0x88E2290F, 0x94345254, 0xF6688C46, 0x140A2694, 0xDFF71E50,
    0x78D54094, 0x2D9F0245, 0x363B9722, 0x3365E0E1, 0x62B0F5EE, 0x89783E65, 0xDDA23383,
    0x452819F3, 0x9181C9B4, 0xA185EDF2, 0x21B19F02, 0x66073A57, 0x7D15E0A3, 0x0D195005,
    0x5029A165, 0x63ED025A, 0xC25193E2, 0x09A2DF19, 0x01E8E12D, 0x9E919A26, 0x7898EA68,
    0x05217F86, 0x29111620, 0x704C8608, 0xC7828E0A, 0xC95237A8, 0xE942A9A8, 0x260105B8,
    0x81DCE20A, 0x45867CE6, 0xF4C00341, 0x1CC66082, 0x9A828F58, 0x01ABE1A0, 0x9D8B068A,
    0x6016C41C, 0x196E96A2, 0xDA5C9518, 0x89841828, 0x4F381CCC, 0x84609369, 0xC6C20404,
    0xBE44AD99, 0x898061A2, 0x8E65C870, 0x5345A54D, 0xC9822757, 0x472260A3, 0xB6A52BB4,
    0x2F0BC6A8, 0x182A1E87, 0x28DD6085, 0x00404AD8, 0x00000000

  EW_BITMAPS_TABLE( ApplicationDropDownSimpleBitmap )
    EW_BITMAP( ApplicationDropDownSimpleBitmap, Default )
EW_END_OF_BITMAP_RES( ApplicationDropDownSimpleBitmap )

/* Table with links to derived variants of the bitmap resource : 'Application::DropDownSimpleBitmap' */
EW_RES_WITHOUT_VARIANTS( ApplicationDropDownSimpleBitmap )

/* Initializer for the class 'Application::InputAction' */
void ApplicationInputAction__Init( ApplicationInputAction _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetRadioButton__Init( &_this->RadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton1, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton2, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton3, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton4, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton5, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton6, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton7, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton8, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton9, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputAction );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0301 );
  CoreRectView__OnSetBounds( &_this->RadioButton, _Const0302 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton, ApplicationActionFire 
  );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton, 1 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton, EwLoadString( &_Const01F1 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton1, _Const0303 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton1, ApplicationActionEvacuation 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton1, EwLoadString( &_Const0267 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton2, _Const0304 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton2, ApplicationActionUndefined 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton2, EwLoadString( &_Const0305 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton3, _Const0306 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton3, ApplicationActionGeneral 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton3, EwLoadString( &_Const0307 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton4, _Const0308 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton4, ApplicationActionFault 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton4, EwLoadString( &_Const01F0 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton5, _Const0309 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton5, ApplicationActionSecurity 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton5, EwLoadString( &_Const0271 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton6, _Const030A );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton6, ApplicationActionRoutingAck 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton6, EwLoadString( &_Const030B 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton7, _Const030C );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton7, ApplicationActionReset 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton7, EwLoadString( &_Const026A 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton8, _Const030D );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton8, ApplicationActionFirstAid 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton8, EwLoadString( &_Const030E 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton9, _Const030F );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton9, ApplicationActionSilence 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton9, EwLoadString( &_Const0310 
  ));
  CoreRectView__OnSetBounds( &_this->Text, _Const0311 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0312 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0314 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton1, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton1, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton2, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton2, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton3, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton3, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton4, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton4, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton5, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton5, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton6, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton6, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton7, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton7, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton8, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton8, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton9, EwNewRef( _this, ApplicationInputAction_OnGetinputAction, 
  ApplicationInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton9, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
}

/* Re-Initializer for the class 'Application::InputAction' */
void ApplicationInputAction__ReInit( ApplicationInputAction _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetRadioButton__ReInit( &_this->RadioButton );
  WidgetSetRadioButton__ReInit( &_this->RadioButton1 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton2 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton3 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton4 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton5 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton6 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton7 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton8 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton9 );
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
}

/* Finalizer method for the class 'Application::InputAction' */
void ApplicationInputAction__Done( ApplicationInputAction _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputAction );

  /* Finalize all embedded objects */
  WidgetSetRadioButton__Done( &_this->RadioButton );
  WidgetSetRadioButton__Done( &_this->RadioButton1 );
  WidgetSetRadioButton__Done( &_this->RadioButton2 );
  WidgetSetRadioButton__Done( &_this->RadioButton3 );
  WidgetSetRadioButton__Done( &_this->RadioButton4 );
  WidgetSetRadioButton__Done( &_this->RadioButton5 );
  WidgetSetRadioButton__Done( &_this->RadioButton6 );
  WidgetSetRadioButton__Done( &_this->RadioButton7 );
  WidgetSetRadioButton__Done( &_this->RadioButton8 );
  WidgetSetRadioButton__Done( &_this->RadioButton9 );
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputAction' */
void ApplicationInputAction__Mark( ApplicationInputAction _this )
{
  EwMarkObject( &_this->RadioButton );
  EwMarkObject( &_this->RadioButton1 );
  EwMarkObject( &_this->RadioButton2 );
  EwMarkObject( &_this->RadioButton3 );
  EwMarkObject( &_this->RadioButton4 );
  EwMarkObject( &_this->RadioButton5 );
  EwMarkObject( &_this->RadioButton6 );
  EwMarkObject( &_this->RadioButton7 );
  EwMarkObject( &_this->RadioButton8 );
  EwMarkObject( &_this->RadioButton9 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::InputAction.OnSetinputAction()' */
void ApplicationInputAction_OnSetinputAction( ApplicationInputAction _this, XInt32 
  value )
{
  WidgetSetRadioButton v;

  _this->inputAction = value;
  v = EwCastObject( _this->Super1.first, WidgetSetRadioButton );

  while ( v != 0 )
  {
    if ( v->OutletSelector == value )
    {
      WidgetSetRadioButton_OnSetSelected( v, 1 );
    }
    else
    {
      WidgetSetRadioButton_OnSetSelected( v, 0 );
    }

    v = EwCastObject( v->Super3.next, WidgetSetRadioButton );
  }
}

/* Default onget method for the property 'inputAction' */
XInt32 ApplicationInputAction_OnGetinputAction( ApplicationInputAction _this )
{
  return _this->inputAction;
}

/* Variants derived from the class : 'Application::InputAction' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputAction )
EW_END_OF_CLASS_VARIANTS( ApplicationInputAction )

/* Virtual Method Table (VMT) for the class : 'Application::InputAction' */
EW_DEFINE_CLASS( ApplicationInputAction, CoreGroup, "Application::InputAction" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationInputAction )

/* Initializer for the class 'Application::InputSignal' */
void ApplicationInputSignal__Init( ApplicationInputSignal _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Inverted, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Latching, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->BypassDelay, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputSignal );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0315 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0316 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0317 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0314 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Inverted, _Const0318 );
  WidgetSetToggleButton_OnSetLabel( &_this->Inverted, EwLoadString( &_Const0319 
  ));
  CoreRectView__OnSetBounds( &_this->Latching, _Const031A );
  WidgetSetToggleButton_OnSetLabel( &_this->Latching, EwLoadString( &_Const031B 
  ));
  CoreRectView__OnSetBounds( &_this->BypassDelay, _Const031C );
  WidgetSetToggleButton_OnSetLabel( &_this->BypassDelay, EwLoadString( &_Const031D 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Inverted ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Latching ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BypassDelay ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  WidgetSetToggleButton_OnSetAppearance( &_this->Inverted, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->Latching, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->BypassDelay, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::InputSignal' */
void ApplicationInputSignal__ReInit( ApplicationInputSignal _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->Inverted );
  WidgetSetToggleButton__ReInit( &_this->Latching );
  WidgetSetToggleButton__ReInit( &_this->BypassDelay );
}

/* Finalizer method for the class 'Application::InputSignal' */
void ApplicationInputSignal__Done( ApplicationInputSignal _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputSignal );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->Inverted );
  WidgetSetToggleButton__Done( &_this->Latching );
  WidgetSetToggleButton__Done( &_this->BypassDelay );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputSignal' */
void ApplicationInputSignal__Mark( ApplicationInputSignal _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Inverted );
  EwMarkObject( &_this->Latching );
  EwMarkObject( &_this->BypassDelay );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationInputSignal_UpdateLayout( ApplicationInputSignal _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationInputSignal_UpdateViewState( ApplicationInputSignal _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::InputSignal' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputSignal )
EW_END_OF_CLASS_VARIANTS( ApplicationInputSignal )

/* Virtual Method Table (VMT) for the class : 'Application::InputSignal' */
EW_DEFINE_CLASS( ApplicationInputSignal, CoreGroup, "Application::InputSignal" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationInputSignal_UpdateLayout,
  ApplicationInputSignal_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationInputSignal )

/* Initializer for the class 'Application::InputDelay' */
void ApplicationInputDelay__Init( ApplicationInputDelay _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->TitleText, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->DoubleKnock, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->Sustained, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputDelay );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const031E );
  CoreRectView__OnSetBounds( &_this->TitleText, _Const031F );
  ViewsText_OnSetAlignment( &_this->TitleText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TitleText, EwLoadString( &_Const0320 ));
  ViewsText_OnSetColor( &_this->TitleText, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0321 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0322 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0323 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const0324 );
  WidgetSetHorizontalSlider_OnSetStepSize( &_this->HorzBarSlider, 1 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 14 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreRectView__OnSetBounds( &_this->DoubleKnock, _Const0325 );
  WidgetSetRadioButton_OnSetSelected( &_this->DoubleKnock, 0 );
  WidgetSetRadioButton_OnSetLabel( &_this->DoubleKnock, EwLoadString( &_Const0326 
  ));
  CoreRectView__OnSetBounds( &_this->Sustained, _Const0327 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->Sustained, 2 );
  WidgetSetRadioButton_OnSetSelected( &_this->Sustained, 1 );
  WidgetSetRadioButton_OnSetLabel( &_this->Sustained, EwLoadString( &_Const0328 
  ));
  _this->DelayChoice = 0;
  CoreGroup__Add( _this, ((CoreView)&_this->TitleText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DoubleKnock ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Sustained ), 0 );
  ViewsText_OnSetFont( &_this->TitleText, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNewSlot( _this, ApplicationInputDelay_DelaySlot 
  );
  _this->HorzBarSlider.OnEnd = EwNewSlot( _this, ApplicationInputDelay_End );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &ApplicationNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->DoubleKnock, EwNullRef );
  _this->DoubleKnock.OnSelect = EwNewSlot( _this, ApplicationInputDelay_DKnock );
  WidgetSetRadioButton_OnSetAppearance( &_this->DoubleKnock, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  _this->Sustained.OnSelect = EwNewSlot( _this, ApplicationInputDelay_Sust );
  WidgetSetRadioButton_OnSetAppearance( &_this->Sustained, EwGetAutoObject( &ApplicationNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
}

/* Re-Initializer for the class 'Application::InputDelay' */
void ApplicationInputDelay__ReInit( ApplicationInputDelay _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->TitleText );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
  WidgetSetRadioButton__ReInit( &_this->DoubleKnock );
  WidgetSetRadioButton__ReInit( &_this->Sustained );
}

/* Finalizer method for the class 'Application::InputDelay' */
void ApplicationInputDelay__Done( ApplicationInputDelay _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputDelay );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->TitleText );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );
  WidgetSetRadioButton__Done( &_this->DoubleKnock );
  WidgetSetRadioButton__Done( &_this->Sustained );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputDelay' */
void ApplicationInputDelay__Mark( ApplicationInputDelay _this )
{
  EwMarkObject( &_this->TitleText );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( &_this->DoubleKnock );
  EwMarkObject( &_this->Sustained );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationInputDelay_UpdateLayout( ApplicationInputDelay _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationInputDelay_UpdateViewState( ApplicationInputDelay _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::InputDelay.DelaySlot()' */
void ApplicationInputDelay_DelaySlot( ApplicationInputDelay _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i == 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DoubleKnock, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Sustained, 0 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DoubleKnock, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Sustained, 1 );

    if ( !_this->DelayChoice )
      ApplicationInputDelay_OnSetDelayChoice( _this, ApplicationOptionsSustained 
      );
  }

  if ( i < 6 )
  {
    ApplicationInputDelay_OnSetDelaySecs( _this, i * 10 );
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const0329 ), EwNewStringInt( _this->DelaySecs, 0, 10 )), EwLoadString( &_Const032A 
    )));
  }
  else
  {
    XFloat f = ((XFloat)i - 4.000000f ) * 0.500000f;
    ApplicationInputDelay_OnSetDelaySecs( _this, (XInt32)( f * 60.000000f ));
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const0329 ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const032B )));
  }
}

/* 'C' function for method : 'Application::InputDelay.OnSetDelayChoice()' */
void ApplicationInputDelay_OnSetDelayChoice( ApplicationInputDelay _this, XSet value )
{
  if ( _this->DelayChoice == value )
    return;

  _this->DelayChoice = value;

  if ((( value & ApplicationOptionsDoubleKnock ) == ApplicationOptionsDoubleKnock 
      ))
  {
    WidgetSetRadioButton_OnSetSelected( &_this->DoubleKnock, 1 );
    WidgetSetRadioButton_OnSetSelected( &_this->Sustained, 0 );
  }
  else
    if ((( value & ApplicationOptionsSustained ) == ApplicationOptionsSustained 
        ))
    {
      WidgetSetRadioButton_OnSetSelected( &_this->DoubleKnock, 0 );
      WidgetSetRadioButton_OnSetSelected( &_this->Sustained, 1 );
    }
}

/* 'C' function for method : 'Application::InputDelay.End()' */
void ApplicationInputDelay_End( ApplicationInputDelay _this, XObject sender )
{
  EffectsPointEffect effect;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  effect = EwNewObject( EffectsPointEffect, 0 );
  EffectsEffect_OnSetCycleDuration((EffectsEffect)effect, 250 );
  EffectsEffect_OnSetNoOfCycles((EffectsEffect)effect, 1 );
  EffectsEffect_OnSetTiming((EffectsEffect)effect, EffectsTimingExp_InOut );
  CoreOutline_EnsureVisible( &EwCastObject( _this->Super3.Owner, ApplicationInputChannels 
  )->Outline, ((CoreView)_this ), 1, effect, EwNullSlot );
  WidgetSetVerticalScrollbar_OnSetPosition( &EwCastObject( _this->Super3.Owner, 
  ApplicationInputChannels )->VerticalScrollbar, 100 );
}

/* 'C' function for method : 'Application::InputDelay.OnSetDelaySecs()' */
void ApplicationInputDelay_OnSetDelaySecs( ApplicationInputDelay _this, XInt32 value )
{
  if ( _this->DelaySecs == value )
    return;

  _this->DelaySecs = value;

  if ( value < 60 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, value / 
    10 );
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const0329 ), EwNewStringInt( value, 0, 10 )), EwLoadString( &_Const032A )));
  }
  else
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, ( value 
    / 30 ) + 4 );
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const0329 ), EwNewStringInt( value / 60, 2, 1 )), EwLoadString( &_Const032B 
    )));
  }

  if ( value == 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DoubleKnock, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Sustained, 0 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DoubleKnock, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Sustained, 1 );

    if ( !_this->DoubleKnock.Selected && !_this->Sustained.Selected )
    {
      WidgetSetRadioButton_OnSetSelected( &_this->Sustained, 1 );
    }
  }
}

/* 'C' function for method : 'Application::InputDelay.DKnock()' */
void ApplicationInputDelay_DKnock( ApplicationInputDelay _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetRadioButton_OnSetSelected( &_this->Sustained, 0 );
  ApplicationInputDelay_OnSetDelayChoice( _this, _this->DelayChoice | ApplicationOptionsDoubleKnock 
  );
  ApplicationInputDelay_OnSetDelayChoice( _this, _this->DelayChoice & ~ApplicationOptionsSustained 
  );
}

/* 'C' function for method : 'Application::InputDelay.Sust()' */
void ApplicationInputDelay_Sust( ApplicationInputDelay _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationInputDelay_OnSetDelayChoice( _this, _this->DelayChoice | ApplicationOptionsDoubleKnock 
  );
  ApplicationInputDelay_OnSetDelayChoice( _this, _this->DelayChoice & ~ApplicationOptionsSustained 
  );
}

/* Variants derived from the class : 'Application::InputDelay' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputDelay )
EW_END_OF_CLASS_VARIANTS( ApplicationInputDelay )

/* Virtual Method Table (VMT) for the class : 'Application::InputDelay' */
EW_DEFINE_CLASS( ApplicationInputDelay, CoreGroup, "Application::InputDelay" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationInputDelay_UpdateLayout,
  ApplicationInputDelay_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationInputDelay )

/* User defined auto object: 'Application::NotmalToggleButton' */
EW_DEFINE_AUTOOBJECT( ApplicationNotmalToggleButton, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'Application::NotmalToggleButton' */
void ApplicationNotmalToggleButton__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const032C );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const032C );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetIconMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToRight );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const032D );
}

/* Table with links to derived variants of the auto object : 'Application::NotmalToggleButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationNotmalToggleButton )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationNotmalToggleButton )

/* Initializer for the class 'Application::ZoneToggle' */
void ApplicationZoneToggle__Init( ApplicationZoneToggle _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->UnitNumberText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ActionButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationZoneToggle );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const032E );
  CoreView_OnSetLayout((CoreView)&_this->UnitNumberText, CoreLayoutAlignToLeft | 
  CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->UnitNumberText, _Const032F );
  ViewsText_OnSetAlignment( &_this->UnitNumberText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->UnitNumberText, 0 );
  ViewsText_OnSetColor( &_this->UnitNumberText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->DescriptionText, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0330 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0098 ));
  ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Image, _Const0331 );
  CoreView_OnSetLayout((CoreView)&_this->Image1, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0332 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0333 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0003 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0334 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0335 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const009E );
  CoreRectView__OnSetBounds( &_this->ActionButton, _Const0336 );
  WidgetSetPushButton_OnSetLabel( &_this->ActionButton, EwLoadString( &_Const0337 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->UnitNumberText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ActionButton ), 0 );
  ViewsText_OnSetFont( &_this->UnitNumberText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationFireAlarmBitmap, 
  ResourcesBitmap ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationZoneToggle_ToggleHandler 
  );
  _this->ActionButton.OnRelease = EwNewSlot( _this, ApplicationZoneToggle_EditSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->ActionButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'Application::ZoneToggle' */
void ApplicationZoneToggle__ReInit( ApplicationZoneToggle _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->UnitNumberText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image );
  ViewsImage__ReInit( &_this->Image1 );
  ViewsText__ReInit( &_this->Text );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetPushButton__ReInit( &_this->ActionButton );
}

/* Finalizer method for the class 'Application::ZoneToggle' */
void ApplicationZoneToggle__Done( ApplicationZoneToggle _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationZoneToggle );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->UnitNumberText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image );
  ViewsImage__Done( &_this->Image1 );
  ViewsText__Done( &_this->Text );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetPushButton__Done( &_this->ActionButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ZoneToggle' */
void ApplicationZoneToggle__Mark( ApplicationZoneToggle _this )
{
  EwMarkObject( &_this->UnitNumberText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->ActionButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationZoneToggle_UpdateLayout( ApplicationZoneToggle _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationZoneToggle_UpdateViewState( ApplicationZoneToggle _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->isDevice )
  {
    ViewsImage_OnSetVisible( &_this->Image, 1 );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
    ViewsText_OnSetVisible( &_this->DescriptionText, 1 );
    ViewsText_OnSetVisible( &_this->UnitNumberText, 1 );
    ViewsText_OnSetVisible( &_this->Text, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, 1 );
    CoreGroup_OnSetVisible((CoreGroup)&_this->ActionButton, 1 );
    ViewsText_OnSetString( &_this->UnitNumberText, EwConcatString( EwConcatString( 
    EwConcatString( EwLoadString( &_Const00A5 ), EwNewStringInt( _this->ZoneNum, 
    0, 10 )), EwLoadString( &_Const00A6 )), EwNewStringInt( _this->UnitNum, 0, 10 
    )));
  }
  else
    if ( _this->isZone )
    {
      ViewsImage_OnSetVisible( &_this->Image, 0 );
      ViewsImage_OnSetVisible( &_this->Image1, 1 );
      ViewsText_OnSetVisible( &_this->DescriptionText, 0 );
      ViewsText_OnSetVisible( &_this->UnitNumberText, 0 );
      ViewsText_OnSetVisible( &_this->Text, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, 0 );
      CoreGroup_OnSetVisible((CoreGroup)&_this->ActionButton, 0 );
      ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const00A5 
      ), EwNewStringInt( _this->ZoneNum, 0, 10 )));

      if ( EwCastObject( _this->Super3.Owner->Super2.Owner, ApplicationModify )->zoneExpanded[ 
          EwCheckIndex( _this->ZoneNum, 97 )])
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationCollapseBitmap, 
        ResourcesBitmap ));
      }
      else
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
        ResourcesBitmap ));
      }
    }
    else
    {
      ViewsImage_OnSetVisible( &_this->Image, 0 );
      ViewsImage_OnSetVisible( &_this->Image1, 0 );
      ViewsText_OnSetVisible( &_this->DescriptionText, 0 );
      ViewsText_OnSetVisible( &_this->UnitNumberText, 0 );
      ViewsText_OnSetVisible( &_this->Text, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, 0 );
      CoreGroup_OnSetVisible((CoreGroup)&_this->ActionButton, 0 );
      ViewsText_OnSetString( &_this->UnitNumberText, 0 );
    }
}

/* 'C' function for method : 'Application::ZoneToggle.ToggleHandler()' */
void ApplicationZoneToggle_ToggleHandler( ApplicationZoneToggle _this, XObject sender )
{
  ApplicationModify modify;
  CoreVerticalList lst;
  XInt32 devs;
  XInt32 zone;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  modify = EwCastObject( _this->Super3.Owner->Super2.Owner, ApplicationModify );
  modify->zoneExpanded[ EwCheckIndex( _this->ZoneNum, 97 )] = (XBool)!modify->zoneExpanded[ 
  EwCheckIndex( _this->ZoneNum, 97 )];
  lst = EwCastObject( _this->Super3.Owner, CoreVerticalList );
  devs = 4;
  zone = _this->ZoneNum;
  {
    Command cmd;
    cmd.int0 = zone;

    Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
    devs = cmd.int0;
  }

  if ( modify->zoneExpanded[ EwCheckIndex( _this->ZoneNum, 97 )])
  {
    CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems + devs );
  }
  else
  {
    CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems - devs );
  }

  CoreVerticalList_InvalidateItems( lst, 0, lst->NoOfItems - 1 );
  CoreGroup_InvalidateViewState((CoreGroup)lst );
  WidgetSetVerticalScrollbar_OnSetContentArea( &modify->VertScrollbar, lst->NoOfItems 
  * lst->ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &modify->VertScrollbar, EwGetRectH( 
  lst->Super2.Bounds ));
  CoreGroup_InvalidateViewState((CoreGroup)&modify->VertScrollbar );
}

/* 'C' function for method : 'Application::ZoneToggle.EditSlot()' */
void ApplicationZoneToggle_EditSlot( ApplicationZoneToggle _this, XObject sender )
{
  ApplicationModifyPopup p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwNewObject( ApplicationModifyPopup, 0 );
  ApplicationModifyPopup_OnSetdevice( p, ApplicationLibClass_GetConfig( EwGetAutoObject( 
  &ApplicationLib, ApplicationLibClass ), (XInt16)_this->UnitNum ));
  EwPostSignal( EwNewSlot( p, ApplicationModifyPopup_SetFocus ), ((XObject)_this 
    ));
  ApplicationPopup_Show((ApplicationPopup)p, CoreView__GetRoot( _this ));
}

/* Variants derived from the class : 'Application::ZoneToggle' */
EW_DEFINE_CLASS_VARIANTS( ApplicationZoneToggle )
EW_END_OF_CLASS_VARIANTS( ApplicationZoneToggle )

/* Virtual Method Table (VMT) for the class : 'Application::ZoneToggle' */
EW_DEFINE_CLASS( ApplicationZoneToggle, CoreGroup, "Application::ZoneToggle" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationZoneToggle_UpdateLayout,
  ApplicationZoneToggle_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationZoneToggle )

/* Initializer for the class 'Application::DropMenuItem' */
void ApplicationDropMenuItem__Init( ApplicationDropMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDropMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0338 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const0338 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0338 );
  ViewsBorder_OnSetWidth( &_this->Border, 1 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->CaptionText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const0339 );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const033A ));
  ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
  _this->enabled = 1;
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::DropMenuItem' */
void ApplicationDropMenuItem__ReInit( ApplicationDropMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'Application::DropMenuItem' */
void ApplicationDropMenuItem__Done( ApplicationDropMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDropMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->CaptionText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DropMenuItem' */
void ApplicationDropMenuItem__Mark( ApplicationDropMenuItem _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->CaptionText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDropMenuItem_UpdateLayout( ApplicationDropMenuItem _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDropMenuItem_UpdateViewState( ApplicationDropMenuItem _this, XSet 
  aState )
{
  XBool isEnabled;
  XBool isSelected;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );

  if ( !isEnabled )
  {
    ViewsRectangle_OnSetColor( &_this->Background, _Const008C );
    ViewsBorder_OnSetVisible( &_this->Border, 0 );
    ViewsText_OnSetColor( &_this->CaptionText, _Const033B );
  }
  else
    if ( _this->pressed )
    {
      ViewsRectangle_OnSetColor( &_this->Background, _Const0015 );
      ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
      ViewsBorder_OnSetVisible( &_this->Border, 1 );
      ViewsText_OnSetColor( &_this->CaptionText, _Const000A );
    }
    else
      if ( isSelected )
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const000A );
        ViewsBorder_OnSetColor( &_this->Border, _Const033C );
        ViewsBorder_OnSetVisible( &_this->Border, 1 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
      }
      else
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const000A );
        ViewsBorder_OnSetVisible( &_this->Border, 0 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
      }

  _this->enabled = isEnabled;
  _this->selected = isSelected;
}

/* Variants derived from the class : 'Application::DropMenuItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDropMenuItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDropMenuItem )

/* Virtual Method Table (VMT) for the class : 'Application::DropMenuItem' */
EW_DEFINE_CLASS( ApplicationDropMenuItem, CoreGroup, "Application::DropMenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDropMenuItem_UpdateLayout,
  ApplicationDropMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDropMenuItem )

/* Initializer for the class 'Application::ProgressPopup' */
void ApplicationProgressPopup__Init( ApplicationProgressPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->EndEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationProgressPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const033D );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const033E );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const033F );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0340 ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0341 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0165 
  ));
  CoreTimer_OnSetPeriod( &_this->Timer, 800 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationProgressPopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationProgressPopup_Slot );
  _this->EndEventHandler.OnEvent = EwNewSlot( _this, ApplicationProgressPopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->EndEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->EndProgressEvent );
}

/* Re-Initializer for the class 'Application::ProgressPopup' */
void ApplicationProgressPopup__ReInit( ApplicationProgressPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreTimer__ReInit( &_this->Timer );
  CoreSystemEventHandler__ReInit( &_this->EndEventHandler );
}

/* Finalizer method for the class 'Application::ProgressPopup' */
void ApplicationProgressPopup__Done( ApplicationProgressPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationProgressPopup );

  /* Finalize all embedded objects */
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreTimer__Done( &_this->Timer );
  CoreSystemEventHandler__Done( &_this->EndEventHandler );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ProgressPopup' */
void ApplicationProgressPopup__Mark( ApplicationProgressPopup _this )
{
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->EndEventHandler );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::ProgressPopup.Slot()' */
void ApplicationProgressPopup_Slot( ApplicationProgressPopup _this, XObject sender )
{
  XInt16 prog;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_GET_PROGRESS, &cmd );

    prog = cmd.int0;
  }
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, prog 
  );
}

/* 'C' function for method : 'Application::ProgressPopup.CancelSlot()' */
void ApplicationProgressPopup_CancelSlot( ApplicationProgressPopup _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetVisible((CoreGroup)_this, 0 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  {
    Command cmd;

    Command0( CMD_CANCEL_PROGRESS, &cmd );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationProgressPopup_onEvent( ApplicationProgressPopup _this, XObject sender )
{
  ApplicationProgress p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  p = EwCastObject( _this->EndEventHandler.Context, ApplicationProgress );

  if ( p->amount == -1 )
  {
    WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0342 
    ));
    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 
    );
  }
  else
  {
    WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0343 
    ));
    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 100 
    );
  }
}

/* Variants derived from the class : 'Application::ProgressPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationProgressPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationProgressPopup )

/* Virtual Method Table (VMT) for the class : 'Application::ProgressPopup' */
EW_DEFINE_CLASS( ApplicationProgressPopup, ApplicationPopup, "Application::ProgressPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationProgressPopup )

/* Initializer for the class 'Application::OutputChannels' */
void ApplicationOutputChannels__Init( ApplicationOutputChannels _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  ApplicationDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  ApplicationOutputAction__Init( &_this->OutputAction, &_this->_XObject, 0 );
  ApplicationOutputSignal__Init( &_this->OutputSignal, &_this->_XObject, 0 );
  ApplicationOutputDelays__Init( &_this->OutputDelays, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputChannels );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const000C );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const0124 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const0125 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle3, _Const02E3 );
  ViewsRectangle_OnSetColor( &_this->Super1.Rectangle3, _Const02E4 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle3, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const02E5 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const02E6 ));
  ViewsText_OnSetEmbedded( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const02E7 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0052 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle9, 0 );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const02E8 );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 1000 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 1000 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const02E7 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->Border, _Const02E7 );
  ViewsBorder_OnSetVisible( &_this->Border, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0344 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0163 
  ));
  CoreRectView__OnSetBounds( &_this->Outline, _Const02E7 );
  CoreOutline_OnSetSpace( &_this->Outline, 0 );
  CoreOutline_OnSetFormation( &_this->Outline, CoreFormationTopToBottom );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const02EC );
  CoreRectView__OnSetBounds( &_this->OutputAction, _Const0345 );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputAction, 1 );
  CoreRectView__OnSetBounds( &_this->OutputSignal, _Const0346 );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputSignal, 1 );
  CoreRectView__OnSetBounds( &_this->OutputDelays, _Const0347 );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputDelays, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputAction ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputSignal ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputDelays ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, ApplicationOutputChannels_Scroll 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationOutputChannels_TouchScroll 
  );
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationOutputChannels_ProceedSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  _this->DropDownMenu.onSelection = EwNewSlot( _this, ApplicationOutputChannels_Select 
  );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, ApplicationOutputChannels_LoadMenu 
  );

  /* Call the user defined constructor */
  ApplicationOutputChannels_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::OutputChannels' */
void ApplicationOutputChannels__ReInit( ApplicationOutputChannels _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ViewsBorder__ReInit( &_this->Border );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreOutline__ReInit( &_this->Outline );
  ApplicationDropDownMenu__ReInit( &_this->DropDownMenu );
  ApplicationOutputAction__ReInit( &_this->OutputAction );
  ApplicationOutputSignal__ReInit( &_this->OutputSignal );
  ApplicationOutputDelays__ReInit( &_this->OutputDelays );
}

/* Finalizer method for the class 'Application::OutputChannels' */
void ApplicationOutputChannels__Done( ApplicationOutputChannels _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputChannels );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  ViewsRectangle__Done( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ViewsBorder__Done( &_this->Border );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreOutline__Done( &_this->Outline );
  ApplicationDropDownMenu__Done( &_this->DropDownMenu );
  ApplicationOutputAction__Done( &_this->OutputAction );
  ApplicationOutputSignal__Done( &_this->OutputSignal );
  ApplicationOutputDelays__Done( &_this->OutputDelays );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputChannels' */
void ApplicationOutputChannels__Mark( ApplicationOutputChannels _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->OutputAction );
  EwMarkObject( &_this->OutputSignal );
  EwMarkObject( &_this->OutputDelays );
  EwMarkObject( _this->device );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationOutputChannels_UpdateLayout( ApplicationOutputChannels _this, XPoint 
  aSize )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aSize );

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, EwGetRectH( 
  CoreOutline_GetContentArea( &_this->Outline, CoreViewStateEnabled )) + (( CoreOutline_CountViews( 
  &_this->Outline ) - 1 ) * _this->Outline.Space ));
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
  _this->Outline.Super1.Bounds ));
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationOutputChannels_Init( ApplicationOutputChannels _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'Application::OutputChannels.ProceedSlot()' */
void ApplicationOutputChannels_ProceedSlot( ApplicationOutputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwSignal( EwNewSlot( _this, ApplicationOutputChannels_Select ), ((XObject)_this 
    ));
  ApplicationPopup_Hide((ApplicationPopup)_this );
}

/* 'C' function for method : 'Application::OutputChannels.Scroll()' */
void ApplicationOutputChannels_Scroll( ApplicationOutputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar )));
}

/* 'C' function for method : 'Application::OutputChannels.TouchScroll()' */
void ApplicationOutputChannels_TouchScroll( ApplicationOutputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'Application::OutputChannels.Select()' */
void ApplicationOutputChannels_Select( ApplicationOutputChannels _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationOutputChannels_OnSetChanIndex( _this, _this->DropDownMenu.VerticalList.SelectedItem 
  );
}

/* 'C' function for method : 'Application::OutputChannels.LoadMenu()' */
void ApplicationOutputChannels_LoadMenu( ApplicationOutputChannels _this, XObject 
  sender )
{
  ApplicationDropDownMenu m = EwCastObject( sender, ApplicationDropDownMenu );

  if ( _this->device != 0 )
  {
    EwRetainString( &m->itemName, ApplicationLibClass_TypeName( EwGetAutoObject( 
    &ApplicationLib, ApplicationLibClass ), _this->device->outputs[ EwCheckIndex( 
    m->itemIndex, 32 )]->type ));
  }
  else
    EwReleaseString( &m->itemName );
}

/* 'C' function for method : 'Application::OutputChannels.OnSetChanIndex()' */
void ApplicationOutputChannels_OnSetChanIndex( ApplicationOutputChannels _this, 
  XInt32 value )
{
  if (( _this->device != 0 ) && ( value < ApplicationLibClass_NumOutputChannels( 
      EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), _this->device->unitnum 
      )))
  {
    ApplicationOutputChannel ch;
    _this->ChanIndex = value;
    ch = _this->device->outputs[ EwCheckIndex( _this->ChanIndex, 32 )];

    if ( ch != 0 )
    {
      XInt32 n;
      XBool extra;
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.fire, (( ch->actions 
      & ApplicationActionBitsFire ) == ApplicationActionBitsFire ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.evac, (( ch->actions 
      & ApplicationActionBitsEvacuation ) == ApplicationActionBitsEvacuation ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.fault, (( ch->actions 
      & ApplicationActionBitsFault ) == ApplicationActionBitsFault ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.aid, (( ch->actions 
      & ApplicationActionBitsFirstAid ) == ApplicationActionBitsFirstAid ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.pre, (( ch->actions 
      & ApplicationActionBitsGeneral ) == ApplicationActionBitsGeneral ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.secure, (( ch->actions 
      & ApplicationActionBitsSecurity ) == ApplicationActionBitsSecurity ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.ignore, (( ch->flags 
      & ApplicationOptionsIgnoreDelay ) == ApplicationOptionsIgnoreDelay ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.inverted, (( ch->flags 
      & ApplicationOptionsInverted ) == ApplicationOptionsInverted ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.silenceable, (( ch->flags 
      & ApplicationOptionsSilenceable ) == ApplicationOptionsSilenceable ));
      WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->OutputDelays.HorzBarSlider, 
      ch->delay1 );
      WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->OutputDelays.HorzBarSlider1, 
      ch->delay2 );
      CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, _this->ChanIndex 
      );
      ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, ApplicationLibClass_TypeName( 
      EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), ch->type ));
      ApplicationDropDownMenu_OnSetnumItems( &_this->DropDownMenu, (XUInt8)ApplicationDeviceConfig_NumOutputs( 
      _this->device ));
      extra = 0;

      for ( n = 0; n < 4; n = n + 1 )
      {
        if ( _this->device->params[ EwCheckIndex( n, 4 )] != 0 )
        {
          ApplicationParameter p = _this->device->params[ EwCheckIndex( n, 4 )];

          if (( p->code != ApplicationParamCodeUnused ) && ( p->channel == _this->ChanIndex 
              ))
          {
            if ( extra == 0 )
            {
              ApplicationParamSpecific title;
              extra = 1;
              title = EwNewObject( ApplicationParamSpecific, 0 );
              CoreGroup_OnSetEmbedded((CoreGroup)title, 1 );
              CoreGroup__Add( _this, ((CoreView)title ), 122 );
            }

            if (( p->max - p->min ) == 1 )
            {
              ApplicationParamToggle tog = EwNewObject( ApplicationParamToggle, 
                0 );
              CoreGroup_OnSetEmbedded((CoreGroup)tog, 1 );
              tog->param = p;
              ViewsText_OnSetString( &tog->Text2, p->name );
              CoreGroup__Add( _this, ((CoreView)tog ), 123 );
            }
            else
            {
              ApplicationParamSlider slide = EwNewObject( ApplicationParamSlider, 
                0 );
              CoreGroup_OnSetEmbedded((CoreGroup)slide, 1 );
              slide->param = p;
              ViewsText_OnSetString( &slide->Text2, p->name );
              CoreGroup__Add( _this, ((CoreView)slide ), 123 );
            }
          }
        }
      }
    }
  }
}

/* Variants derived from the class : 'Application::OutputChannels' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputChannels )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputChannels )

/* Virtual Method Table (VMT) for the class : 'Application::OutputChannels' */
EW_DEFINE_CLASS( ApplicationOutputChannels, ApplicationPopup, "Application::OutputChannels" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationOutputChannels_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOutputChannels )

/* Initializer for the class 'Application::OutputAction' */
void ApplicationOutputAction__Init( ApplicationOutputAction _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->fire, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->evac, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->secure, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->pre, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->fault, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->aid, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputAction );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0348 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0311 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0349 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const034A );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->fire, _Const034B );
  WidgetSetToggleButton_OnSetLabel( &_this->fire, EwLoadString( &_Const01F1 ));
  CoreRectView__OnSetBounds( &_this->evac, _Const034C );
  WidgetSetToggleButton_OnSetLabel( &_this->evac, EwLoadString( &_Const0267 ));
  CoreRectView__OnSetBounds( &_this->secure, _Const034D );
  WidgetSetToggleButton_OnSetLabel( &_this->secure, EwLoadString( &_Const0271 ));
  CoreRectView__OnSetBounds( &_this->pre, _Const034E );
  WidgetSetToggleButton_OnSetLabel( &_this->pre, EwLoadString( &_Const0307 ));
  CoreRectView__OnSetBounds( &_this->fault, _Const034F );
  WidgetSetToggleButton_OnSetLabel( &_this->fault, EwLoadString( &_Const01F0 ));
  CoreRectView__OnSetBounds( &_this->aid, _Const0350 );
  WidgetSetToggleButton_OnSetLabel( &_this->aid, EwLoadString( &_Const030E ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->fire ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->evac ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->secure ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->pre ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->fault ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->aid ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  WidgetSetToggleButton_OnSetAppearance( &_this->fire, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->evac, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->secure, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->pre, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->fault, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->aid, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::OutputAction' */
void ApplicationOutputAction__ReInit( ApplicationOutputAction _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->fire );
  WidgetSetToggleButton__ReInit( &_this->evac );
  WidgetSetToggleButton__ReInit( &_this->secure );
  WidgetSetToggleButton__ReInit( &_this->pre );
  WidgetSetToggleButton__ReInit( &_this->fault );
  WidgetSetToggleButton__ReInit( &_this->aid );
}

/* Finalizer method for the class 'Application::OutputAction' */
void ApplicationOutputAction__Done( ApplicationOutputAction _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputAction );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->fire );
  WidgetSetToggleButton__Done( &_this->evac );
  WidgetSetToggleButton__Done( &_this->secure );
  WidgetSetToggleButton__Done( &_this->pre );
  WidgetSetToggleButton__Done( &_this->fault );
  WidgetSetToggleButton__Done( &_this->aid );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputAction' */
void ApplicationOutputAction__Mark( ApplicationOutputAction _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->fire );
  EwMarkObject( &_this->evac );
  EwMarkObject( &_this->secure );
  EwMarkObject( &_this->pre );
  EwMarkObject( &_this->fault );
  EwMarkObject( &_this->aid );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::OutputAction' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputAction )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputAction )

/* Virtual Method Table (VMT) for the class : 'Application::OutputAction' */
EW_DEFINE_CLASS( ApplicationOutputAction, CoreGroup, "Application::OutputAction" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOutputAction )

/* Initializer for the class 'Application::OutputSignal' */
void ApplicationOutputSignal__Init( ApplicationOutputSignal _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->silenceable, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->inverted, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ignore, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputSignal );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0351 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0352 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0353 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0354 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->silenceable, _Const0355 );
  WidgetSetToggleButton_OnSetLabel( &_this->silenceable, EwLoadString( &_Const0356 
  ));
  CoreRectView__OnSetBounds( &_this->inverted, _Const0357 );
  WidgetSetToggleButton_OnSetLabel( &_this->inverted, EwLoadString( &_Const0319 
  ));
  CoreRectView__OnSetBounds( &_this->ignore, _Const0358 );
  WidgetSetToggleButton_OnSetLabel( &_this->ignore, EwLoadString( &_Const0359 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->silenceable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->inverted ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ignore ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  _this->silenceable.OnSwitchOn = EwNullSlot;
  _this->silenceable.OnSwitchOff = EwNullSlot;
  WidgetSetToggleButton_OnSetAppearance( &_this->silenceable, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->inverted, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->ignore.OnSwitchOn = EwNullSlot;
  _this->ignore.OnSwitchOff = EwNullSlot;
  WidgetSetToggleButton_OnSetAppearance( &_this->ignore, EwGetAutoObject( &ApplicationNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::OutputSignal' */
void ApplicationOutputSignal__ReInit( ApplicationOutputSignal _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->silenceable );
  WidgetSetToggleButton__ReInit( &_this->inverted );
  WidgetSetToggleButton__ReInit( &_this->ignore );
}

/* Finalizer method for the class 'Application::OutputSignal' */
void ApplicationOutputSignal__Done( ApplicationOutputSignal _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputSignal );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->silenceable );
  WidgetSetToggleButton__Done( &_this->inverted );
  WidgetSetToggleButton__Done( &_this->ignore );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputSignal' */
void ApplicationOutputSignal__Mark( ApplicationOutputSignal _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->silenceable );
  EwMarkObject( &_this->inverted );
  EwMarkObject( &_this->ignore );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationOutputSignal_UpdateLayout( ApplicationOutputSignal _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationOutputSignal_UpdateViewState( ApplicationOutputSignal _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::OutputSignal' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputSignal )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputSignal )

/* Virtual Method Table (VMT) for the class : 'Application::OutputSignal' */
EW_DEFINE_CLASS( ApplicationOutputSignal, CoreGroup, "Application::OutputSignal" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationOutputSignal_UpdateLayout,
  ApplicationOutputSignal_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOutputSignal )

/* Initializer for the class 'Application::OutputDelays' */
void ApplicationOutputDelays__Init( ApplicationOutputDelays _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->TitleText, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputDelays );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const035A );
  CoreRectView__OnSetBounds( &_this->TitleText, _Const035B );
  ViewsText_OnSetAlignment( &_this->TitleText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TitleText, EwLoadString( &_Const035C ));
  ViewsText_OnSetColor( &_this->TitleText, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0313 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const035D );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text, _Const035E );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const035F ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const0360 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 20 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0361 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0362 ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider1, _Const0363 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider1, 19 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TitleText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider1 ), 0 );
  ViewsText_OnSetFont( &_this->TitleText, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNewSlot( _this, ApplicationOutputDelays_DelaySlot 
  );
  _this->HorzBarSlider.OnEnd = EwNewSlot( _this, ApplicationOutputDelays_End );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &ApplicationNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider1.OnChange = EwNewSlot( _this, ApplicationOutputDelays_Delay2 
  );
  _this->HorzBarSlider1.OnEnd = EwNullSlot;
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider1, EwGetAutoObject( 
  &ApplicationNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
}

/* Re-Initializer for the class 'Application::OutputDelays' */
void ApplicationOutputDelays__ReInit( ApplicationOutputDelays _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->TitleText );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider1 );
}

/* Finalizer method for the class 'Application::OutputDelays' */
void ApplicationOutputDelays__Done( ApplicationOutputDelays _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputDelays );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->TitleText );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );
  ViewsText__Done( &_this->Text1 );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider1 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputDelays' */
void ApplicationOutputDelays__Mark( ApplicationOutputDelays _this )
{
  EwMarkObject( &_this->TitleText );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->HorzBarSlider1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::OutputDelays.DelaySlot()' */
void ApplicationOutputDelays_DelaySlot( ApplicationOutputDelays _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i2 = 20 - i;

  if ( i == 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
  }

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, i2 );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const0364 ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const032B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const0365 ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const032B )));
}

/* 'C' function for method : 'Application::OutputDelays.End()' */
void ApplicationOutputDelays_End( ApplicationOutputDelays _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i == 0 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
    ViewsText_OnSetColor( &_this->Text1, _Const033B );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
    ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  }
}

/* 'C' function for method : 'Application::OutputDelays.Delay2()' */
void ApplicationOutputDelays_Delay2( ApplicationOutputDelays _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i = 20 - i2;

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, i );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const0364 ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const032B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const0365 ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const032B )));
}

/* Variants derived from the class : 'Application::OutputDelays' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputDelays )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputDelays )

/* Virtual Method Table (VMT) for the class : 'Application::OutputDelays' */
EW_DEFINE_CLASS( ApplicationOutputDelays, CoreGroup, "Application::OutputDelays" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOutputDelays )

/* Initializer for the class 'Application::TestZoneItem' */
void ApplicationTestZoneItem__Init( ApplicationTestZoneItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->ExpandImage, &_this->_XObject, 0 );
  XFlatCheckBox__Init( &_this->CheckBox, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->InTestText, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTestZoneItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0366 );
  CoreRectView__OnSetBounds( &_this->ExpandImage, _Const0367 );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const0368 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
  XFlatCheckBox_OnSetCaption( &_this->CheckBox, 0 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0369 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0009 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0334 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const01C8 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const02F7 );
  CoreRectView__OnSetBounds( &_this->Text, _Const036A );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->InTestText, _Const036B );
  ViewsText_OnSetAlignment( &_this->InTestText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->InTestText, 0 );
  ViewsText_OnSetColor( &_this->InTestText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const036C );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ExpandImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InTestText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  _this->CheckBox.OnChange = EwNewSlot( _this, ApplicationTestZoneItem_ToggleSlot 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationTestZoneItem_ClearAll 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationTestZoneItem_ToggleExpand 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->InTestText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, ApplicationTestZoneItem_ToggleSlot 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, ApplicationTestZoneItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &ApplicationLargeCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::TestZoneItem' */
void ApplicationTestZoneItem__ReInit( ApplicationTestZoneItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->ExpandImage );
  XFlatCheckBox__ReInit( &_this->CheckBox );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->InTestText );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
}

/* Finalizer method for the class 'Application::TestZoneItem' */
void ApplicationTestZoneItem__Done( ApplicationTestZoneItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTestZoneItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->ExpandImage );
  XFlatCheckBox__Done( &_this->CheckBox );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->InTestText );
  WidgetSetToggleButton__Done( &_this->ToggleButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TestZoneItem' */
void ApplicationTestZoneItem__Mark( ApplicationTestZoneItem _this )
{
  EwMarkObject( &_this->ExpandImage );
  EwMarkObject( &_this->CheckBox );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->InTestText );
  EwMarkObject( &_this->ToggleButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTestZoneItem_UpdateViewState( ApplicationTestZoneItem _this, XSet 
  aState )
{
  ApplicationTreeView testpage;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const00A5 
  ), EwNewStringInt( _this->ZoneNum, 0, 10 )));
  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationTreeView 
  );

  if ( testpage != 0 )
  {
    XSet zf = ApplicationLibClass_GetZoneFlags( EwGetAutoObject( &ApplicationLib, 
      ApplicationLibClass ), (XInt16)_this->ZoneNum );
    WidgetSetToggleButton_OnSetChecked( &_this->ToggleButton, (( zf & ApplicationZoneFlagsOnTest 
    ) == ApplicationZoneFlagsOnTest ));

    if (( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 1 ) == 1 )
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
    }

    EwPostSignal( EwNewSlot( testpage, ApplicationTreeView_CountOnTest ), ((XObject)_this 
      ));
  }
}

/* 'C' function for method : 'Application::TestZoneItem.ClearAll()' */
void ApplicationTestZoneItem_ClearAll( ApplicationTestZoneItem _this, XObject sender )
{
  XSet zf;
  XInt16 dev;
  XInt16 devs;
  ApplicationTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  zf = ApplicationLibClass_GetZoneFlags( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->ZoneNum );
  zf = zf & ~ApplicationZoneFlagsOnTest;
  devs = (XInt16)ApplicationLibClass_NumDevsInZone( EwGetAutoObject( &ApplicationLib, 
  ApplicationLibClass ), (XUInt8)_this->ZoneNum );

  for ( dev = 0; dev < devs; dev = (XInt16)( dev + 1 ))
  {
    XInt16 unitnum = ApplicationLibClass_GetDevInZone( EwGetAutoObject( &ApplicationLib, 
      ApplicationLibClass ), _this->ZoneNum, dev );
    ApplicationDevice d = ApplicationLibClass_GetDevice( EwGetAutoObject( &ApplicationLib, 
      ApplicationLibClass ), unitnum );

    if ( d != 0 )
    {
      XUInt8 channel;
      d->settings = d->settings & ~ApplicationDeviceSettingOnTest;

      for ( channel = 0; channel < 32; channel = (XUInt8)( channel + 1 ))
      {
        d->flags[ EwCheckIndex( channel, 32 )] = d->flags[ EwCheckIndex( channel, 
        32 )] & ~ApplicationChannelFlagsOnTest;
      }

      ApplicationLibClass_SetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
      ), unitnum, d );
    }
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationTreeView 
  );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, ApplicationTreeView_CountOnTest ), ((XObject)_this 
      ));
    CoreVerticalList_InvalidateItems( &testpage->VerticalList, 0, testpage->VerticalList.NoOfItems 
    - 1 );
  }
}

/* 'C' function for method : 'Application::TestZoneItem.ToggleSlot()' */
void ApplicationTestZoneItem_ToggleSlot( ApplicationTestZoneItem _this, XObject 
  sender )
{
  ApplicationTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, 
    ApplicationTreeView );
  XSet zf = ApplicationLibClass_GetZoneFlags( EwGetAutoObject( &ApplicationLib, 
    ApplicationLibClass ), (XInt16)_this->ZoneNum );

  if ( EwCastObject( sender, WidgetSetToggleButton )->Checked )
  {
    zf = zf | ApplicationZoneFlagsOnTest;
  }
  else
  {
    zf = zf & ~ApplicationZoneFlagsOnTest;
  }

  ApplicationLibClass_SetZoneFlags( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->ZoneNum, zf );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, ApplicationTreeView_CountOnTest ), ((XObject)_this 
      ));
    CoreVerticalList_InvalidateItems( &testpage->VerticalList, 0, testpage->VerticalList.NoOfItems 
    - 1 );
  }
}

/* 'C' function for method : 'Application::TestZoneItem.ToggleExpand()' */
void ApplicationTestZoneItem_ToggleExpand( ApplicationTestZoneItem _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    CoreVerticalList lst = EwCastObject( _this->Super3.Owner->Super2.Owner, CoreVerticalList 
      );
    ApplicationTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, 
      ApplicationTreeView );
    XInt32 devs = ApplicationLibClass_NumDevsInZone( EwGetAutoObject( &ApplicationLib, 
      ApplicationLibClass ), (XUInt8)_this->ZoneNum );
    XInt32 total = devs;
    XInt32 dev;

    for ( dev = 0; dev < devs; dev = dev + 1 )
    {
      XInt32 unity = ApplicationLibClass_GetDevInZone( EwGetAutoObject( &ApplicationLib, 
        ApplicationLibClass ), _this->ZoneNum, dev );

      if ( ApplicationTreeView_isDeviceExpanded( testpage, unity ))
      {
        ApplicationDeviceConfig config = ApplicationLibClass_GetConfig( EwGetAutoObject( 
          &ApplicationLib, ApplicationLibClass ), (XInt16)unity );
        total = ( total + ApplicationDeviceConfig_NumInputs( config )) + ApplicationDeviceConfig_NumOutputs( 
        config );
      }
    }

    if (( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 1 ) == 0 )
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
      testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
      EwCheckIndex( _this->ZoneNum, 97 )] | 1 );
      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems + total );
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
      testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
      EwCheckIndex( _this->ZoneNum, 97 )] & 254 );
      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems - total );
    }

    WidgetSetVerticalScrollbar_OnSetContentArea( &testpage->VertScrollbar, lst->NoOfItems 
    * lst->ItemHeight );
    WidgetSetVerticalScrollbar_OnSetViewArea( &testpage->VertScrollbar, EwGetRectH( 
    lst->Super2.Bounds ));
    CoreGroup_InvalidateViewState((CoreGroup)&testpage->VertScrollbar );
  }
}

/* Variants derived from the class : 'Application::TestZoneItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTestZoneItem )
EW_END_OF_CLASS_VARIANTS( ApplicationTestZoneItem )

/* Virtual Method Table (VMT) for the class : 'Application::TestZoneItem' */
EW_DEFINE_CLASS( ApplicationTestZoneItem, CoreGroup, "Application::TestZoneItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTestZoneItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTestZoneItem )

/* Initializer for the class 'Application::TestUnitItem' */
void ApplicationTestUnitItem__Init( ApplicationTestUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->CheckBox, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTestUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->Text, _Const036E );
  ViewsText_OnSetColorBL( &_this->Text, _Const0018 );
  ViewsText_OnSetColorBR( &_this->Text, _Const0018 );
  ViewsText_OnSetColorTR( &_this->Text, _Const0018 );
  ViewsText_OnSetColorTL( &_this->Text, _Const0018 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const036F );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0370 );
  ViewsText_OnSetColorBL( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorBR( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorTR( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorTL( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, 0 );
  ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0371 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0372 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0373 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0374 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0375 );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const0376 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->CheckBox, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationTestUnitItem_ToggleExpand 
  );
  _this->CheckBox.OnSwitchOn = EwNewSlot( _this, ApplicationTestUnitItem_ToggleSlot 
  );
  _this->CheckBox.OnSwitchOff = EwNewSlot( _this, ApplicationTestUnitItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->CheckBox, EwGetAutoObject( &ApplicationSmallCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::TestUnitItem' */
void ApplicationTestUnitItem__ReInit( ApplicationTestUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__ReInit( &_this->CheckBox );
}

/* Finalizer method for the class 'Application::TestUnitItem' */
void ApplicationTestUnitItem__Done( ApplicationTestUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTestUnitItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__Done( &_this->CheckBox );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TestUnitItem' */
void ApplicationTestUnitItem__Mark( ApplicationTestUnitItem _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->CheckBox );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTestUnitItem_UpdateViewState( ApplicationTestUnitItem _this, XSet 
  aState )
{
  ApplicationTreeView testpage;
  XSet zf;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationTreeView 
  );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
    ViewsText_OnSetColor( &_this->Text, _Const0018 );

    if ( ApplicationTreeView_isDeviceExpanded( testpage, _this->UnitNum ))
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
    }

    ViewsImage_OnSetVisible( &_this->Image1, 1 );
  }
  else
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const008C );
    ViewsText_OnSetColor( &_this->Text, _Const008C );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
  }

  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const00A5 ), EwNewStringInt( _this->ZoneNum, 0, 10 )), EwLoadString( 
  &_Const00A6 )), EwNewStringInt( _this->UnitNum, 0, 10 )));
  zf = ApplicationLibClass_GetZoneFlags( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), _this->ZoneNum );

  if ((( zf & ApplicationZoneFlagsOnTest ) == ApplicationZoneFlagsOnTest ))
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
    WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, 1 );
  }
  else
  {
    ApplicationDevice d;
    CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
    d = ApplicationLibClass_GetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
    ), (XInt16)_this->UnitNum );

    if ( d != 0 )
      WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, (( d->settings & ApplicationDeviceSettingOnTest 
      ) == ApplicationDeviceSettingOnTest ));
  }
}

/* 'C' function for method : 'Application::TestUnitItem.ToggleSlot()' */
void ApplicationTestUnitItem_ToggleSlot( ApplicationTestUnitItem _this, XObject 
  sender )
{
  ApplicationDevice d;
  ApplicationTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = ApplicationLibClass_GetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum );

  if ( d != 0 )
  {
    if ( _this->CheckBox.Checked )
    {
      d->settings = d->settings | ApplicationDeviceSettingOnTest;
    }
    else
    {
      d->settings = d->settings & ~ApplicationDeviceSettingOnTest;
    }

    ApplicationLibClass_SetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
    ), (XInt16)_this->UnitNum, d );
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationTreeView 
  );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, ApplicationTreeView_CountOnTest ), ((XObject)_this 
      ));
    CoreVerticalList_InvalidateItems( &testpage->VerticalList, 0, testpage->VerticalList.NoOfItems 
    - 1 );
  }
}

/* 'C' function for method : 'Application::TestUnitItem.ToggleExpand()' */
void ApplicationTestUnitItem_ToggleExpand( ApplicationTestUnitItem _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    CoreVerticalList lst = EwCastObject( _this->Super3.Owner->Super2.Owner, CoreVerticalList 
      );
    ApplicationDeviceConfig dc = ApplicationLibClass_GetConfig( EwGetAutoObject( 
      &ApplicationLib, ApplicationLibClass ), (XInt16)_this->UnitNum );
    XInt32 channels = ApplicationDeviceConfig_NumInputs( dc ) + ApplicationDeviceConfig_NumOutputs( 
      dc );
    ApplicationTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, 
      ApplicationTreeView );

    if ( testpage != 0 )
    {
      if ( !ApplicationTreeView_isDeviceExpanded( testpage, _this->UnitNum ))
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationCollapseBitmap, 
        ResourcesBitmap ));
        CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems + channels );
        ApplicationTreeView_SetExpanded( testpage, _this->UnitNum, 1 );
      }
      else
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
        ResourcesBitmap ));
        CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems - channels );
        ApplicationTreeView_SetExpanded( testpage, _this->UnitNum, 0 );
      }
    }

    CoreVerticalList_InvalidateItems( lst, 0, lst->NoOfItems - 1 );
    CoreGroup_InvalidateViewState((CoreGroup)lst );
    WidgetSetVerticalScrollbar_OnSetContentArea( &testpage->VertScrollbar, lst->NoOfItems 
    * lst->ItemHeight );
    WidgetSetVerticalScrollbar_OnSetViewArea( &testpage->VertScrollbar, EwGetRectH( 
    lst->Super2.Bounds ));
    CoreGroup_InvalidateViewState((CoreGroup)&testpage->VertScrollbar );
  }
}

/* Variants derived from the class : 'Application::TestUnitItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTestUnitItem )
EW_END_OF_CLASS_VARIANTS( ApplicationTestUnitItem )

/* Virtual Method Table (VMT) for the class : 'Application::TestUnitItem' */
EW_DEFINE_CLASS( ApplicationTestUnitItem, CoreGroup, "Application::TestUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTestUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTestUnitItem )

/* Initializer for the class 'Application::TestItem' */
void ApplicationTestItem__Init( ApplicationTestItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationTestUnitItem__Init( &_this->TestUnitItem, &_this->_XObject, 0 );
  ApplicationTestZoneItem__Init( &_this->TestZoneItem, &_this->_XObject, 0 );
  ApplicationTestChannelItem__Init( &_this->TestChannelItem, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTestItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->TestUnitItem, _Const0094 );
  CoreRectView__OnSetBounds( &_this->TestZoneItem, _Const036D );
  CoreRectView__OnSetBounds( &_this->TestChannelItem, _Const036D );
  CoreGroup__Add( _this, ((CoreView)&_this->TestUnitItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TestZoneItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TestChannelItem ), 0 );
}

/* Re-Initializer for the class 'Application::TestItem' */
void ApplicationTestItem__ReInit( ApplicationTestItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationTestUnitItem__ReInit( &_this->TestUnitItem );
  ApplicationTestZoneItem__ReInit( &_this->TestZoneItem );
  ApplicationTestChannelItem__ReInit( &_this->TestChannelItem );
}

/* Finalizer method for the class 'Application::TestItem' */
void ApplicationTestItem__Done( ApplicationTestItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTestItem );

  /* Finalize all embedded objects */
  ApplicationTestUnitItem__Done( &_this->TestUnitItem );
  ApplicationTestZoneItem__Done( &_this->TestZoneItem );
  ApplicationTestChannelItem__Done( &_this->TestChannelItem );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TestItem' */
void ApplicationTestItem__Mark( ApplicationTestItem _this )
{
  EwMarkObject( &_this->TestUnitItem );
  EwMarkObject( &_this->TestZoneItem );
  EwMarkObject( &_this->TestChannelItem );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationTestItem_UpdateLayout( ApplicationTestItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTestItem_UpdateViewState( ApplicationTestItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( CoreGroup_OnGetVisible((CoreGroup)&_this->TestChannelItem ))
  {
    CoreGroup_InvalidateViewState((CoreGroup)&_this->TestChannelItem );
    CoreGroup_InvalidateViewState((CoreGroup)&_this->TestChannelItem.HorizontalValueBar 
    );
  }
}

/* Variants derived from the class : 'Application::TestItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTestItem )
EW_END_OF_CLASS_VARIANTS( ApplicationTestItem )

/* Virtual Method Table (VMT) for the class : 'Application::TestItem' */
EW_DEFINE_CLASS( ApplicationTestItem, CoreGroup, "Application::TestItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationTestItem_UpdateLayout,
  ApplicationTestItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTestItem )

/* Initializer for the class 'Application::TreeView' */
void ApplicationTreeView__Init( ApplicationTreeView _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteLoadedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->OnTestChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTreeView );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  ViewsRectangle_OnSetAlphaBlended( &_this->Rectangle, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreRectView__OnSetBounds( _this, _Const0121 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0233 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0237 );
  CoreVerticalList_OnSetEndless( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 3 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationTestItem 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationTreeView_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationTreeView_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationTreeView_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SiteLoadedEventHandler.OnEvent = EwNewSlot( _this, ApplicationTreeView_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteLoadedEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->SiteLoadedEvent );
  _this->OnTestChangeEventHandler.OnEvent = EwNewSlot( _this, ApplicationTreeView_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->OnTestChangeEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->OnTestChangeEvent );

  /* Call the user defined constructor */
  ApplicationTreeView_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::TreeView' */
void ApplicationTreeView__ReInit( ApplicationTreeView _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  ViewsBevel__ReInit( &_this->Bevel1 );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSystemEventHandler__ReInit( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->OnTestChangeEventHandler );
}

/* Finalizer method for the class 'Application::TreeView' */
void ApplicationTreeView__Done( ApplicationTreeView _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTreeView );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  ViewsBevel__Done( &_this->Bevel1 );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSystemEventHandler__Done( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__Done( &_this->OnTestChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TreeView' */
void ApplicationTreeView__Mark( ApplicationTreeView _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SiteLoadedEventHandler );
  EwMarkObject( &_this->OnTestChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTreeView_UpdateViewState( ApplicationTreeView _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationTreeView_Init( ApplicationTreeView _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, ApplicationTreeView_onEvent1 ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationTreeView_OnLoadItem( ApplicationTreeView _this, XObject sender )
{
  CoreVerticalList vlist = EwCastObject( sender, CoreVerticalList );
  XInt32 itemNo = vlist->Item;
  ApplicationTestItem item = EwCastObject( vlist->View, ApplicationTestItem );
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  if ( item == 0 )
    return;

  curZone = 1;
  i = 0;
  numZones = ApplicationLibClass_NumZonesWithDevices( EwGetAutoObject( &ApplicationLib, 
  ApplicationLibClass ));

  while ( numZones > 0 )
  {
    XInt32 numdevs = ApplicationLibClass_NumDevsInZone( EwGetAutoObject( &ApplicationLib, 
      ApplicationLibClass ), curZone );

    if ( numdevs > 0 )
    {
      numZones = numZones - 1;

      if ( itemNo == i )
      {
        item->TestZoneItem.ZoneNum = curZone;
        CoreGroup_OnSetVisible((CoreGroup)&item->TestZoneItem, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 1 );
        CoreGroup_OnSetVisible((CoreGroup)&item->TestUnitItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
        CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)&item->TestZoneItem );
        return;
      }
      else
      {
        i = i + 1;
      }

      if (( _this->zoneFlags[ EwCheckIndex( curZone, 97 )] & 1 ) == 1 )
      {
        XInt32 dev = 0;

        while ( dev < numdevs )
        {
          XInt16 unitno = ApplicationLibClass_GetDevInZone( EwGetAutoObject( &ApplicationLib, 
            ApplicationLibClass ), curZone, dev );
          ApplicationDevice device = ApplicationLibClass_GetDevice( EwGetAutoObject( 
            &ApplicationLib, ApplicationLibClass ), unitno );
          ApplicationDeviceConfig config = ApplicationLibClass_GetConfig( EwGetAutoObject( 
            &ApplicationLib, ApplicationLibClass ), unitno );

          if ( i == itemNo )
          {
            CoreGroup_OnSetVisible((CoreGroup)&item->TestUnitItem, 1 );

            if ( device == 0 )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
            }
            else
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 1 );
            }

            CoreGroup_OnSetVisible((CoreGroup)&item->TestZoneItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
            CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
            item->TestUnitItem.UnitNum = (XUInt16)unitno;
            item->TestUnitItem.ZoneNum = curZone;
            ViewsText_OnSetString( &item->TestUnitItem.DescriptionText, config->location 
            );
            CoreGroup_InvalidateViewState((CoreGroup)&item->TestUnitItem );
            return;
          }
          else
          {
            i = i + 1;
          }

          if ( ApplicationTreeView_isDeviceExpanded( _this, unitno ))
          {
            XInt32 chan = 0;
            XEnum defau;

            while ((( config != 0 ) && ( config->inputs[ EwCheckIndex( chan, 32 
                   )] != 0 )) && ( config->inputs[ EwCheckIndex( chan, 32 )]->type 
                   != ApplicationChannelTypeNone ))
            {
              if ( i == itemNo )
              {
                CoreGroup_OnSetVisible((CoreGroup)&item->TestUnitItem, 0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestZoneItem, 0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem, 1 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 );
                item->TestChannelItem.ChanNum = (XUInt8)chan;
                item->TestChannelItem.UnitNum = (XUInt16)unitno;
                item->TestChannelItem.ZoneNum = curZone;
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalValueBar, 
                1 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.HorizontalValueBar, 
                1 );

                if ((( device->flags[ EwCheckIndex( chan, 32 )] & ApplicationChannelFlagsActive 
                    ) == ApplicationChannelFlagsActive ))
                {
                  WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalValueBar, 
                  100 );
                }
                else
                {
                  WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalValueBar, 
                  0 );
                }

                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.ToggleButton, 
                0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.CheckBox, 
                1 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                1 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                0 );
                ViewsText_OnSetString( &item->TestChannelItem.ChannelName, ApplicationLibClass_TypeName( 
                EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), config->inputs[ 
                EwCheckIndex( chan, 32 )]->type ));
                CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                );
                return;
              }
              else
              {
                i = i + 1;
              }

              chan = chan + 1;
            }

            chan = 0;
            defau = ApplicationActionFire;

            while (( config->outputs[ EwCheckIndex( chan, 32 )] != 0 ) && ( config->outputs[ 
                   EwCheckIndex( chan, 32 )]->type != ApplicationChannelTypeNone 
                   ))
            {
              if ( i == itemNo )
              {
                CoreGroup_OnSetVisible((CoreGroup)&item->TestUnitItem, 0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestZoneItem, 0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem, 1 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 );
                item->TestChannelItem.ChanNum = (XUInt8)chan;
                item->TestChannelItem.UnitNum = (XUInt16)unitno;
                item->TestChannelItem.ZoneNum = curZone;
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.HorizontalValueBar, 
                0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalValueBar, 
                0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                1 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.ToggleButton, 
                1 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.CheckBox, 
                0 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                0 );
                CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                1 );
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                1 );

                if ( item->TestChannelItem.SmallDropDownMenu.selIndex == -1 )
                {
                  item->TestChannelItem.SmallDropDownMenu.selIndex = defau;
                  item->TestChannelItem.DefaultAction = defau;
                  ViewsText_OnSetString( &item->TestChannelItem.SmallDropDownMenu.Text, 
                  ApplicationLibClass_ProfileName( EwGetAutoObject( &ApplicationLib, 
                  ApplicationLibClass ), defau ));
                }

                ViewsText_OnSetString( &item->TestChannelItem.ChannelName, ApplicationLibClass_TypeName( 
                EwGetAutoObject( &ApplicationLib, ApplicationLibClass ), config->outputs[ 
                EwCheckIndex( chan, 32 )]->type ));
                CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                );
                return;
              }
              else
              {
                i = i + 1;
              }

              chan = chan + 1;
            }
          }

          dev = dev + 1;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  CoreGroup_OnSetVisible((CoreGroup)&item->TestUnitItem, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&item->TestZoneItem, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&item->TestChannelItem, 0 );
}

/* 'C' function for method : 'Application::TreeView.ScrollDragSlot()' */
void ApplicationTreeView_ScrollDragSlot( ApplicationTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::TreeView.ScrollPressSlot()' */
void ApplicationTreeView_ScrollPressSlot( ApplicationTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VerticalList );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationTreeView_onEvent1( ApplicationTreeView _this, XObject sender )
{
  XInt32 numZones;
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numZones = ApplicationLibClass_NumZonesWithDevices( EwGetAutoObject( &ApplicationLib, 
  ApplicationLibClass ));
  i = 0;

  for ( i = 0; i < 97; i = i + 1 )
  {
    _this->zoneFlags[ EwCheckIndex( i, 97 )] = 0;
  }

  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numZones );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numZones - 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VertScrollbar );
}

/* 'C' function for method : 'Application::TreeView.isDeviceExpanded()' */
XBool ApplicationTreeView_isDeviceExpanded( ApplicationTreeView _this, XInt32 i )
{
  if ( i >= 2304 )
    return (XBool)(( _this->deviceFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] 
      & 1 ) == 1 );
  else
    if ( i >= 2048 )
      return (XBool)(( _this->deviceFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 
        )] & 1 ) == 1 );
    else
      if (( i < 513 ) && ( i > 0 ))
        return (XBool)(( _this->deviceFlags[ EwCheckIndex( i - 1, 544 )] & 1 ) == 
          1 );

  return 0;
}

/* 'C' function for method : 'Application::TreeView.SetExpanded()' */
void ApplicationTreeView_SetExpanded( ApplicationTreeView _this, XInt32 i, XBool 
  val )
{
  if ( val )
  {
    if ( i >= 2304 )
    {
      _this->deviceFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] | 1;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] | 1;
      }
      else
        if ( i < 513 )
        {
          _this->deviceFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceFlags[ 
          EwCheckIndex( i - 1, 544 )] | 1;
        }
  }
  else
  {
    XUInt32 b = 4294967294U;

    if ( i >= 2304 )
    {
      _this->deviceFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] & b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] & b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceFlags[ 
          EwCheckIndex( i - 1, 544 )] & b;
        }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationTreeView_onEvent( ApplicationTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
}

/* 'C' function for method : 'Application::TreeView.CountOnTest()' */
void ApplicationTreeView_CountOnTest( ApplicationTreeView _this, XObject sender )
{
  ApplicationApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( _this->Super3.Owner->Super2.Owner, ApplicationApplication 
  );

  if ( app != 0 )
    ;
}

/* Variants derived from the class : 'Application::TreeView' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTreeView )
EW_END_OF_CLASS_VARIANTS( ApplicationTreeView )

/* Virtual Method Table (VMT) for the class : 'Application::TreeView' */
EW_DEFINE_CLASS( ApplicationTreeView, CoreGroup, "Application::TreeView" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTreeView_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTreeView )

/* Initializer for the class 'Application::TestChannelItem' */
void ApplicationTestChannelItem__Init( ApplicationTestChannelItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->ChannelName, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  ApplicationSmallDropDownMenu__Init( &_this->SmallDropDownMenu, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->CheckBox, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationTestChannelItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->ChannelName, _Const0377 );
  ViewsText_OnSetAlignment( &_this->ChannelName, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChannelName, 0 );
  ViewsText_OnSetColor( &_this->ChannelName, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const0378 );
  WidgetSetHorizontalValueBar_OnSetMaxValue( &_this->HorizontalValueBar, 1 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0379 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreRectView__OnSetBounds( &_this->SmallDropDownMenu, _Const037A );
  _this->SmallDropDownMenu.numItems = 8;
  _this->DefaultAction = ApplicationActionFire;
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const037B );
  WidgetSetToggleButton_OnSetLabel( &_this->CheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->Image, _Const037C );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelName ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SmallDropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsText_OnSetFont( &_this->ChannelName, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, ApplicationTestChannelItem_OnSlot 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, ApplicationTestChannelItem_OffSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &WidgetSetSwitch_Small, WidgetSetToggleButtonConfig ));
  _this->SmallDropDownMenu.onSelection = EwNewSlot( _this, ApplicationTestChannelItem_MenuSelection 
  );
  _this->SmallDropDownMenu.GetItemCallback = EwNewSlot( _this, ApplicationTestChannelItem_LoadNames 
  );
  _this->CheckBox.OnSwitchOn = EwNewSlot( _this, ApplicationTestChannelItem_ToggleChannel 
  );
  _this->CheckBox.OnSwitchOff = EwNewSlot( _this, ApplicationTestChannelItem_ToggleChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->CheckBox, EwGetAutoObject( &ApplicationSmallCheckBox, 
  WidgetSetToggleButtonConfig ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'Application::TestChannelItem' */
void ApplicationTestChannelItem__ReInit( ApplicationTestChannelItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->ChannelName );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  ApplicationSmallDropDownMenu__ReInit( &_this->SmallDropDownMenu );
  WidgetSetToggleButton__ReInit( &_this->CheckBox );
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'Application::TestChannelItem' */
void ApplicationTestChannelItem__Done( ApplicationTestChannelItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationTestChannelItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->ChannelName );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  ApplicationSmallDropDownMenu__Done( &_this->SmallDropDownMenu );
  WidgetSetToggleButton__Done( &_this->CheckBox );
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::TestChannelItem' */
void ApplicationTestChannelItem__Mark( ApplicationTestChannelItem _this )
{
  EwMarkObject( &_this->ChannelName );
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->SmallDropDownMenu );
  EwMarkObject( &_this->CheckBox );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationTestChannelItem_UpdateViewState( ApplicationTestChannelItem _this, 
  XSet aState )
{
  XSet zf;
  ApplicationDevice d;
  ApplicationDeviceConfig conf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  zf = ApplicationLibClass_GetZoneFlags( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), _this->ZoneNum );
  d = ApplicationLibClass_GetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum );

  if ( d != 0 )
  {
    if ((( zf & ApplicationZoneFlagsOnTest ) == ApplicationZoneFlagsOnTest ) || 
        (( d->settings & ApplicationDeviceSettingOnTest ) == ApplicationDeviceSettingOnTest 
        ))
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
      WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, 1 );
    }
    else
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
      WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, (( d->flags[ EwCheckIndex( 
      _this->ChanNum, 32 )] & ApplicationChannelFlagsOnTest ) == ApplicationChannelFlagsOnTest 
      ));
    }
  }

  conf = ApplicationLibClass_GetConfig( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum );

  if (( conf != 0 ) && ( conf->outputs[ EwCheckIndex( _this->ChanNum, 32 )] != 0 
      ))
  {
    if ( CoreGroup_OnGetVisible((CoreGroup)&_this->ToggleButton ))
    {
      ViewsImage_OnSetBitmap( &_this->Image, ApplicationLibClass_TypeBitmap( EwGetAutoObject( 
      &ApplicationLib, ApplicationLibClass ), conf->outputs[ EwCheckIndex( _this->ChanNum, 
      32 )]->type ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->Image, ApplicationLibClass_TypeBitmap( EwGetAutoObject( 
      &ApplicationLib, ApplicationLibClass ), conf->inputs[ EwCheckIndex( _this->ChanNum, 
      32 )]->type ));
    }
  }
}

/* 'C' function for method : 'Application::TestChannelItem.OnSlot()' */
void ApplicationTestChannelItem_OnSlot( ApplicationTestChannelItem _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationLibClass_SwitchOuput( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum, _this->ChanNum, _this->DefaultAction, 1 );
}

/* 'C' function for method : 'Application::TestChannelItem.OffSlot()' */
void ApplicationTestChannelItem_OffSlot( ApplicationTestChannelItem _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ApplicationLibClass_SwitchOuput( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum, _this->ChanNum, _this->DefaultAction, 0 );
}

/* 'C' function for method : 'Application::TestChannelItem.LoadNames()' */
void ApplicationTestChannelItem_LoadNames( ApplicationTestChannelItem _this, XObject 
  sender )
{
  ApplicationSmallDropDownMenuList menu;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  menu = EwCastObject( sender, ApplicationSmallDropDownMenuList );

  if ( menu != 0 )
  {
    EwRetainString( &menu->itemName, ApplicationLibClass_ProfileName( EwGetAutoObject( 
    &ApplicationLib, ApplicationLibClass ), (XEnum)menu->itemIndex ));
  }
}

/* 'C' function for method : 'Application::TestChannelItem.ToggleChannel()' */
void ApplicationTestChannelItem_ToggleChannel( ApplicationTestChannelItem _this, 
  XObject sender )
{
  ApplicationDevice d;
  ApplicationTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = ApplicationLibClass_GetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
  ), (XInt16)_this->UnitNum );

  if ( d != 0 )
  {
    if ( _this->CheckBox.Checked )
    {
      d->flags[ EwCheckIndex( _this->ChanNum, 32 )] = d->flags[ EwCheckIndex( _this->ChanNum, 
      32 )] | ApplicationChannelFlagsOnTest;
    }
    else
    {
      d->flags[ EwCheckIndex( _this->ChanNum, 32 )] = d->flags[ EwCheckIndex( _this->ChanNum, 
      32 )] & ~ApplicationChannelFlagsOnTest;
    }

    ApplicationLibClass_SetDevice( EwGetAutoObject( &ApplicationLib, ApplicationLibClass 
    ), (XInt16)_this->UnitNum, d );
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationTreeView 
  );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, ApplicationTreeView_CountOnTest ), ((XObject)_this 
      ));
    CoreVerticalList_InvalidateItems( &testpage->VerticalList, 0, testpage->VerticalList.NoOfItems 
    - 1 );
  }
}

/* 'C' function for method : 'Application::TestChannelItem.MenuSelection()' */
void ApplicationTestChannelItem_MenuSelection( ApplicationTestChannelItem _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->DefaultAction = (XEnum)_this->SmallDropDownMenu.list->VerticalList.SelectedItem;
}

/* Variants derived from the class : 'Application::TestChannelItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationTestChannelItem )
EW_END_OF_CLASS_VARIANTS( ApplicationTestChannelItem )

/* Virtual Method Table (VMT) for the class : 'Application::TestChannelItem' */
EW_DEFINE_CLASS( ApplicationTestChannelItem, CoreGroup, "Application::TestChannelItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationTestChannelItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationTestChannelItem )

/* Initializer for the class 'Application::SmallDropDownMenu' */
void ApplicationSmallDropDownMenu__Init( ApplicationSmallDropDownMenu _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSmallDropDownMenu );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const037D );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const037E );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const037F );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const02F3 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const02F4 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const02F4 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const02F3 );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0380 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0381 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const009E );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
  CoreSimpleTouchHandler_OnSetEmbedded( &_this->SimpleTouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Text, _Const0382 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0383 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  _this->selIndex = -1;
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  _this->SimpleTouchHandler.OnRelease = EwNullSlot;
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationSmallDropDownMenu_Press 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->PushButton.OnPress = EwNewSlot( _this, ApplicationSmallDropDownMenu_Press 
  );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &ApplicationDropDownSimpleBitmap, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  ApplicationSmallDropDownMenu_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::SmallDropDownMenu' */
void ApplicationSmallDropDownMenu__ReInit( ApplicationSmallDropDownMenu _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'Application::SmallDropDownMenu' */
void ApplicationSmallDropDownMenu__Done( ApplicationSmallDropDownMenu _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSmallDropDownMenu );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SmallDropDownMenu' */
void ApplicationSmallDropDownMenu__Mark( ApplicationSmallDropDownMenu _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkSlot( _this->onSelection );
  EwMarkObject( &_this->PushButton );
  EwMarkSlot( _this->GetItemCallback );
  EwMarkObject( _this->list );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationSmallDropDownMenu_UpdateLayout( ApplicationSmallDropDownMenu _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationSmallDropDownMenu_UpdateViewState( ApplicationSmallDropDownMenu _this, 
  XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationSmallDropDownMenu_Init( ApplicationSmallDropDownMenu _this, XHandle 
  aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  _this->list = EwNewObject( ApplicationSmallDropDownMenuList, 0 );
}

/* 'C' function for method : 'Application::SmallDropDownMenu.Press()' */
void ApplicationSmallDropDownMenu_Press( ApplicationSmallDropDownMenu _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->ShowingList )
  {
    XPoint p = CoreGroup_GlobalPosition((CoreGroup)_this, _this->Super2.Bounds.Point1 
      );
    CoreRectView__OnSetBounds( _this->list, EwSetRectOrigin( _this->list->Super2.Bounds, 
    EwSetPointX( _this->list->Super2.Bounds.Point1, _this->Super2.Bounds.Point1.X 
    + 12 )));
    CoreRectView__OnSetBounds( _this->list, EwSetRectOrigin( _this->list->Super2.Bounds, 
    EwSetPointY( _this->list->Super2.Bounds.Point1, p.Y + 32 )));
    ApplicationSmallDropDownMenuList_OnSetnumItems( _this->list, _this->numItems 
    );
    _this->list->GetItemCallback = _this->GetItemCallback;
    _this->list->onSelection = _this->onSelection;
    CoreVerticalList_OnSetSelectedItem( &_this->list->VerticalList, _this->selIndex 
    );
    _this->list->parent = _this;
    CoreGroup_InvalidateViewState((CoreGroup)_this->list );
    CoreGroup__Add( CoreView__GetRoot( _this ), ((CoreView)_this->list ), 0 );
    _this->ShowingList = 1;
  }
  else
  {
    ApplicationSmallDropDownMenu_HideList( _this );
  }
}

/* 'C' function for method : 'Application::SmallDropDownMenu.HideList()' */
void ApplicationSmallDropDownMenu_HideList( ApplicationSmallDropDownMenu _this )
{
  if ( _this->ShowingList )
  {
    CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)_this->list ));
    _this->ShowingList = 0;
  }
}

/* Variants derived from the class : 'Application::SmallDropDownMenu' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSmallDropDownMenu )
EW_END_OF_CLASS_VARIANTS( ApplicationSmallDropDownMenu )

/* Virtual Method Table (VMT) for the class : 'Application::SmallDropDownMenu' */
EW_DEFINE_CLASS( ApplicationSmallDropDownMenu, CoreGroup, "Application::SmallDropDownMenu" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationSmallDropDownMenu_UpdateLayout,
  ApplicationSmallDropDownMenu_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSmallDropDownMenu )

/* Initializer for the class 'Application::SmallDropMenuItem' */
void ApplicationSmallDropMenuItem__Init( ApplicationSmallDropMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSmallDropMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0384 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const0384 );
  ViewsRectangle_OnSetColor( &_this->Background, _Const00B8 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0384 );
  ViewsBorder_OnSetWidth( &_this->Border, 1 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const008E );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0385 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0386 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0054 );
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
  | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->CaptionText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const0387 );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const033A ));
  ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
  _this->enabled = 1;
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  _this->TouchHandler.OnLeave = EwNewSlot( _this, ApplicationSmallDropMenuItem_onEnterLeaveTouch 
  );
  _this->TouchHandler.OnEnter = EwNewSlot( _this, ApplicationSmallDropMenuItem_onEnterLeaveTouch 
  );
  _this->TouchHandler.OnRelease = EwNewSlot( _this, ApplicationSmallDropMenuItem_onReleaseTouch 
  );
  _this->TouchHandler.OnPress = EwNewSlot( _this, ApplicationSmallDropMenuItem_onPressTouch 
  );
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::SmallDropMenuItem' */
void ApplicationSmallDropMenuItem__ReInit( ApplicationSmallDropMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->Border );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'Application::SmallDropMenuItem' */
void ApplicationSmallDropMenuItem__Done( ApplicationSmallDropMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSmallDropMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->Border );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsText__Done( &_this->CaptionText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SmallDropMenuItem' */
void ApplicationSmallDropMenuItem__Mark( ApplicationSmallDropMenuItem _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->CaptionText );
  EwMarkSlot( _this->OnActivate );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationSmallDropMenuItem_UpdateLayout( ApplicationSmallDropMenuItem _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationSmallDropMenuItem_UpdateViewState( ApplicationSmallDropMenuItem _this, 
  XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isPressed;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isPressed = (XBool)( _this->TouchHandler.Down && _this->TouchHandler.Inside );

  if ( !isEnabled )
  {
    ViewsRectangle_OnSetColor( &_this->Background, _Const008C );
    ViewsBorder_OnSetVisible( &_this->Border, 0 );
    ViewsText_OnSetColor( &_this->CaptionText, _Const033B );
  }
  else
    if ( isPressed )
    {
      ViewsRectangle_OnSetColor( &_this->Background, _Const0015 );
      ViewsBorder_OnSetColor( &_this->Border, _Const0018 );
      ViewsBorder_OnSetVisible( &_this->Border, 1 );
      ViewsText_OnSetColor( &_this->CaptionText, _Const000A );
    }
    else
      if ( isSelected )
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const02A4 );
        ViewsBorder_OnSetColor( &_this->Border, _Const033C );
        ViewsBorder_OnSetVisible( &_this->Border, 1 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
      }
      else
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const02A4 );
        ViewsBorder_OnSetVisible( &_this->Border, 0 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const0018 );
      }

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->pressed = isPressed;
}

/* This internal slot method is called when the user drags the finger while pressing 
   the item. This only updates the item to appear pressed or released. */
void ApplicationSmallDropMenuItem_onEnterLeaveTouch( ApplicationSmallDropMenuItem _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is called when the user releases the touch screen after 
   touching the item's area. This activates the item. */
void ApplicationSmallDropMenuItem_onReleaseTouch( ApplicationSmallDropMenuItem _this, 
  XObject sender )
{
  CoreView v;
  XInt32 sel;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Inside )
    return;

  if ( _this->TouchHandler.AutoDeflected )
    return;

  _this->pressed = 0;
  v = _this->Super3.Owner->first;
  sel = 0;

  while ( v != 0 )
  {
    ApplicationSmallDropMenuItem i = EwCastObject( v, ApplicationSmallDropMenuItem 
      );

    if ( i != 0 )
    {
      if ( i == _this )
      {
        CoreVerticalList_OnSetSelectedItem( EwCastObject( _this->Super3.Owner, CoreVerticalList 
        ), sel );
      }
      else
      {
        sel = sel + 1;
      }
    }

    v = v->next;
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
}

/* This internal slot method is called when the user touches the item's area. */
void ApplicationSmallDropMenuItem_onPressTouch( ApplicationSmallDropMenuItem _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetFocus( _this->Super3.Owner, ((CoreView)_this ));
  _this->pressed = 1;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'Application::SmallDropMenuItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSmallDropMenuItem )
EW_END_OF_CLASS_VARIANTS( ApplicationSmallDropMenuItem )

/* Virtual Method Table (VMT) for the class : 'Application::SmallDropMenuItem' */
EW_DEFINE_CLASS( ApplicationSmallDropMenuItem, CoreGroup, "Application::SmallDropMenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationSmallDropMenuItem_UpdateLayout,
  ApplicationSmallDropMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSmallDropMenuItem )

/* Initializer for the class 'Application::SmallDropDownMenuList' */
void ApplicationSmallDropDownMenuList__Init( ApplicationSmallDropDownMenuList _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationSmallDropDownMenuList );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0388 );
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0388 );
  _this->SlideTouchHandler.SlideHorz = 0;
  EwRetainString( &_this->itemName, EwLoadString( &_Const01A9 ));
  CoreView_OnSetLayout((CoreView)&_this->VerticalList, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0389 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 35 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationSmallDropMenuItem 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationSmallDropDownMenuList_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
}

/* Re-Initializer for the class 'Application::SmallDropDownMenuList' */
void ApplicationSmallDropDownMenuList__ReInit( ApplicationSmallDropDownMenuList _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
}

/* Finalizer method for the class 'Application::SmallDropDownMenuList' */
void ApplicationSmallDropDownMenuList__Done( ApplicationSmallDropDownMenuList _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationSmallDropDownMenuList );

  /* Finalize all embedded objects */
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );

  /* Release all used strings */
  EwReleaseString( &_this->itemName );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::SmallDropDownMenuList' */
void ApplicationSmallDropDownMenuList__Mark( ApplicationSmallDropDownMenuList _this )
{
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkSlot( _this->onSelection );
  EwMarkSlot( _this->GetItemCallback );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( _this->parent );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationSmallDropDownMenuList_UpdateLayout( ApplicationSmallDropDownMenuList _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationSmallDropDownMenuList_UpdateViewState( ApplicationSmallDropDownMenuList _this, 
  XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::SmallDropDownMenuList.Select()' */
void ApplicationSmallDropDownMenuList_Select( ApplicationSmallDropDownMenuList _this, 
  XObject sender )
{
  ApplicationSmallDropMenuItem itm = EwCastObject( sender, ApplicationSmallDropMenuItem 
    );

  if ( _this->parent != 0 )
  {
    ViewsText_OnSetString( &_this->parent->Text, itm->CaptionText.String );
    _this->parent->ShowingList = 0;
  }

  CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)_this ));
  EwPostSignal( _this->onSelection, ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationSmallDropDownMenuList_OnLoadItem( ApplicationSmallDropDownMenuList _this, 
  XObject sender )
{
  XInt32 itemNo;
  ApplicationSmallDropMenuItem itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, ApplicationSmallDropMenuItem 
  );

  if ( itemView == 0 )
    return;

  itemView->OnActivate = EwNewSlot( _this, ApplicationSmallDropDownMenuList_Select 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));

  if ( _this->GetItemCallback.Object != 0 )
  {
    _this->itemIndex = itemNo;
    EwSignal( _this->GetItemCallback, ((XObject)_this ));

    if ( EwCompString( _this->itemName, 0 ) != 0 )
    {
      ViewsText_OnSetString( &itemView->CaptionText, _this->itemName );
      return;
    }
  }

  ViewsText_OnSetString( &itemView->CaptionText, EwConcatString( EwLoadString( &_Const0300 
  ), EwNewStringInt( itemNo, 0, 10 )));
}

/* 'C' function for method : 'Application::SmallDropDownMenuList.OnSetnumItems()' */
void ApplicationSmallDropDownMenuList_OnSetnumItems( ApplicationSmallDropDownMenuList _this, 
  XUInt8 value )
{
  XInt32 size;

  if ( _this->numItems == value )
    return;

  _this->numItems = value;
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, _this->numItems );
  size = _this->VerticalList.ItemHeight * _this->numItems;
  CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, ( _this->Super2.Bounds.Point1.Y 
  + size ) + 20 ));

  if ( _this->Super2.Bounds.Point2.Y > 480 )
    CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, 480 ));

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->numItems - 1 
  );
}

/* Variants derived from the class : 'Application::SmallDropDownMenuList' */
EW_DEFINE_CLASS_VARIANTS( ApplicationSmallDropDownMenuList )
EW_END_OF_CLASS_VARIANTS( ApplicationSmallDropDownMenuList )

/* Virtual Method Table (VMT) for the class : 'Application::SmallDropDownMenuList' */
EW_DEFINE_CLASS( ApplicationSmallDropDownMenuList, CoreGroup, "Application::SmallDropDownMenuList" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationSmallDropDownMenuList_UpdateLayout,
  ApplicationSmallDropDownMenuList_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationSmallDropDownMenuList )

/* Initializer for the class 'Application::Faults' */
void ApplicationFaults__Init( ApplicationFaults _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationFaults );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A7 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const009C );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 2 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationFaultItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, 350 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, 350 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  _this->VerticalList.OnUpdate = EwNewSlot( _this, ApplicationFaults_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationFaults_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationFaults_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, ApplicationFaults_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->FaultListChangeEvent );

  /* Call the user defined constructor */
  ApplicationFaults_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Faults' */
void ApplicationFaults__ReInit( ApplicationFaults _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
}

/* Finalizer method for the class 'Application::Faults' */
void ApplicationFaults__Done( ApplicationFaults _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationFaults );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Faults' */
void ApplicationFaults__Mark( ApplicationFaults _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->SystemEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationFaults_UpdateLayout( ApplicationFaults _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationFaults_UpdateViewState( ApplicationFaults _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationFaults_Init( ApplicationFaults _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, ApplicationFaults_onEvent ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationFaults_OnLoadItem( ApplicationFaults _this, XObject sender )
{
  XInt32 itemNo;
  ApplicationFaultItem item;
  XString time;
  XString desc;
  XString type;
  XInt32 unt;
  XInt32 zone;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  item = EwCastObject( _this->VerticalList.View, ApplicationFaultItem );

  if ( item == 0 )
    return;

  time = EwLoadString( &_Const0017 );
  desc = EwLoadString( &_Const038A );
  type = EwLoadString( &_Const038B );
  unt = 1;
  zone = 1;
  {
    Command cmd;

    cmd.int0 = itemNo;
    if ( Command0( CMD_GET_FAULT_ITEM, &cmd ) == CMD_OK )
    {
      if ( cmd.int3 != 0 ) time = EwNewStringAnsi( (char*)cmd.int3 );
      if ( cmd.int1 != 0 ) desc = EwNewStringAnsi( (char*)cmd.int1 );
      if ( cmd.int2 & 2 ) 
      {
         type =  EwNewStringAnsi("SYSTEM FAULT");
      }
      else if ( cmd.int2 & 64 ) 
      {
         type = EwNewStringAnsi("OPEN CIRCUIT FAULT");
      }       
      else if ( cmd.int2 & 128 )
      {
         type = EwNewStringAnsi("SHORT CIRCUIT FAULT");
      }
      else
      {
         type =  EwNewStringAnsi("GENERAL FAULT");
      }
      unt = cmd.ushort1;
      zone = cmd.ushort0;
    }
  }
  ViewsText_OnSetString( &item->DescriptionText, desc );
  ViewsText_OnSetString( &item->TimeText, time );
  ViewsText_OnSetString( &item->TypeText, type );

  if ( zone < 255 )
  {
    ViewsText_OnSetString( &item->AddressText, EwConcatString( EwConcatString( EwConcatString( 
    EwLoadString( &_Const00A5 ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const00A6 
    )), EwNewStringInt( unt, 0, 10 )));
  }
  else
  {
    ViewsText_OnSetString( &item->AddressText, 0 );
  }
}

/* 'C' function for method : 'Application::Faults.ScrollDragSlot()' */
void ApplicationFaults_ScrollDragSlot( ApplicationFaults _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Faults.ScrollPressSlot()' */
void ApplicationFaults_ScrollPressSlot( ApplicationFaults _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationFaults_onEvent( ApplicationFaults _this, XObject sender )
{
  XInt32 numItems;
  XInt32 prevnum;
  ApplicationApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 3;
  {
    Command cmd;

    Command0( CMD_GET_NUM_FAULTS, &cmd );

    numItems = cmd.int0;
  }
  prevnum = _this->VerticalList.NoOfItems;
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numItems );
  ap = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( ap != 0 )
  {
    ap->FaultsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->FaultsTabButton );

    if ((( ap->AlarmsTabButton.NumberOf == 0 ) || ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const001A )) != 0 )) && (( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const0021 )) != 0 ) && ( numItems != 0 )))
    {
      EwPostSignal( EwNewSlot( &ap->FaultsTabButton, ApplicationTabButton_OnPress 
        ), ((XObject)_this ));
    }
    else
      if (( numItems > 0 ) && ( EwCompString( ap->SelectedTab, EwLoadString( &_Const0021 
          )) != 0 ))
      {
        CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 1 );
      }
      else
      {
        CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 0 );
        ViewsImage_OnSetVisible( &ap->FaultsTabButton.Image, 1 );
      }
  }

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    if ( numItems != prevnum )
    {
      EffectsInt32Effect effect = EwNewObject( EffectsInt32Effect, 0 );
      EffectsEffect_OnSetCycleDuration((EffectsEffect)effect, 250 );
      EffectsEffect_OnSetNoOfCycles((EffectsEffect)effect, 1 );
      EffectsEffect_OnSetTiming((EffectsEffect)effect, EffectsTimingExp_InOut );

      if ( numItems < 8 )
      {
        CoreVerticalList_EnsureVisible( &_this->VerticalList, 0, 1, effect, EwNullSlot 
        );
      }
      else
      {
        CoreVerticalList_EnsureVisible( &_this->VerticalList, numItems - 1, 1, effect, 
        EwNullSlot );
      }
    }
  }

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, numItems * 
  _this->VerticalList.ItemHeight );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numItems - 1 );
}

/* Variants derived from the class : 'Application::Faults' */
EW_DEFINE_CLASS_VARIANTS( ApplicationFaults )
EW_END_OF_CLASS_VARIANTS( ApplicationFaults )

/* Virtual Method Table (VMT) for the class : 'Application::Faults' */
EW_DEFINE_CLASS( ApplicationFaults, CoreGroup, "Application::Faults" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationFaults_UpdateLayout,
  ApplicationFaults_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationFaults )

/* Initializer for the class 'Application::FaultItem' */
void ApplicationFaultItem__Init( ApplicationFaultItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->AddressText, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationFaultItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const038C );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const038C );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0065 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const038D );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006E ));
  ViewsText_OnSetColor( &_this->TimeText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const038E );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const038F ));
  ViewsText_OnSetColor( &_this->TypeText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0390 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0098 ));
  ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->AddressText, _Const0391 );
  ViewsText_OnSetAlignment( &_this->AddressText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->AddressText, EwLoadString( &_Const0392 ));
  ViewsText_OnSetColor( &_this->AddressText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const038C );
  ViewsBorder_OnSetColor( &_this->Border, _Const0070 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AddressText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->AddressText, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::FaultItem' */
void ApplicationFaultItem__ReInit( ApplicationFaultItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->TimeText );
  ViewsText__ReInit( &_this->TypeText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsText__ReInit( &_this->AddressText );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'Application::FaultItem' */
void ApplicationFaultItem__Done( ApplicationFaultItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationFaultItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->TimeText );
  ViewsText__Done( &_this->TypeText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsText__Done( &_this->AddressText );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::FaultItem' */
void ApplicationFaultItem__Mark( ApplicationFaultItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->TypeText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->AddressText );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationFaultItem_UpdateLayout( ApplicationFaultItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationFaultItem_UpdateViewState( ApplicationFaultItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::FaultItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationFaultItem )
EW_END_OF_CLASS_VARIANTS( ApplicationFaultItem )

/* Virtual Method Table (VMT) for the class : 'Application::FaultItem' */
EW_DEFINE_CLASS( ApplicationFaultItem, CoreGroup, "Application::FaultItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationFaultItem_UpdateLayout,
  ApplicationFaultItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationFaultItem )

/* Initializer for the class 'Application::EventItem' */
void ApplicationEventItem__Init( ApplicationEventItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->OrderPos, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationEventItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0064 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0064 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0065 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0393 );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0067 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->OrderPos, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->OrderPos, _Const0069 );
  ViewsText_OnSetString( &_this->OrderPos, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->OrderPos, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const0394 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const006D );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006E ));
  ViewsText_OnSetColor( &_this->TimeText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0395 );
  ViewsImage_OnSetColor( &_this->Image, _Const0018 );
  ViewsImage_OnSetAlignment( &_this->Image, ViewsImageAlignmentAlignHorzCenter | 
  ViewsImageAlignmentAlignVertCenter );
  CoreTimer_OnSetPeriod( &_this->Timer, 600 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  _this->Flashing = 1;
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0064 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0070 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OrderPos ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->OrderPos, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationFireBitmap, 
  ResourcesBitmap ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationEventItem_Trigger );
}

/* Re-Initializer for the class 'Application::EventItem' */
void ApplicationEventItem__ReInit( ApplicationEventItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->OrderPos );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->TimeText );
  ViewsImage__ReInit( &_this->Image );
  CoreTimer__ReInit( &_this->Timer );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'Application::EventItem' */
void ApplicationEventItem__Done( ApplicationEventItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationEventItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->OrderPos );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->TimeText );
  ViewsImage__Done( &_this->Image );
  CoreTimer__Done( &_this->Timer );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::EventItem' */
void ApplicationEventItem__Mark( ApplicationEventItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->OrderPos );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationEventItem_UpdateLayout( ApplicationEventItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationEventItem_UpdateViewState( ApplicationEventItem _this, XSet aState )
{
  XString s;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  s = EwNewStringInt( _this->OrderPosition, 0, 10 );

  switch ( _this->OrderPosition )
  {
    case 1 :
      s = EwConcatString( s, EwLoadString( &_Const0045 ));
    break;

    case 2 :
      s = EwConcatString( s, EwLoadString( &_Const0046 ));
    break;

    case 3 :
      s = EwConcatString( s, EwLoadString( &_Const0047 ));
    break;

    default : 
      s = EwConcatString( s, EwLoadString( &_Const0044 ));
  }

  ViewsText_OnSetString( &_this->OrderPos, s );
}

/* 'C' function for method : 'Application::EventItem.Trigger()' */
void ApplicationEventItem_Trigger( ApplicationEventItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Flashing )
  {
    ViewsText_OnSetVisible( &_this->OrderPos, (XBool)!ViewsText_OnGetVisible( &_this->OrderPos 
    ));
  }
}

/* 'C' function for method : 'Application::EventItem.OnSetOrderPosition()' */
void ApplicationEventItem_OnSetOrderPosition( ApplicationEventItem _this, XInt32 
  value )
{
  if ( _this->OrderPosition == value )
    return;

  _this->OrderPosition = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'Application::EventItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationEventItem )
EW_END_OF_CLASS_VARIANTS( ApplicationEventItem )

/* Virtual Method Table (VMT) for the class : 'Application::EventItem' */
EW_DEFINE_CLASS( ApplicationEventItem, CoreGroup, "Application::EventItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationEventItem_UpdateLayout,
  ApplicationEventItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationEventItem )

/* Bitmap resource : 'Application::EvacEvent' */
EW_DEFINE_BITMAP_RES( ApplicationEvacEvent )
  EW_BITMAP_FRAMES( ApplicationEvacEvent, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationEvacEvent, Default )         /* ratio 24.69 % */
    0x1C080100, 0x2D923028, 0xE516076D, 0x11449752, 0x1CB573AE, 0xE8B7739E, 0xE88ABFA1,
    0x88D461FE, 0x8FC6E32B, 0x0C7A391D, 0x49A47209, 0xA64B2891, 0xA4F2C924, 0xF2E6874A,
    0x4E75BA29, 0x7773C55A, 0x9752DD1C, 0x81CFA081, 0x6BAD8889, 0x39D6C890, 0xA9FB374C,
    0xA572DA5C, 0x9F4CA6CB, 0x354A754A, 0xE796556A, 0xD5FCC1FC, 0x16BA1748, 0x0BFDFE00,
    0xD1611060, 0x42D356A3, 0x51919B5D, 0x76908CAE, 0x48F7FBA5, 0x6C463FEE, 0xBB554EAF,
    0x73C82F37, 0x22ED0CB1, 0xC3214137, 0x2AF57CA4, 0x13F19B76, 0x8CFF7631, 0x4FF79B71,
    0xFF793658, 0xA75B0534, 0xBF67B138, 0xF39A6779, 0xB956E8C7, 0x7D6B122C, 0x1FFACBEE,
    0xFEEA5EA5, 0x4F570B39, 0xB87EEDAC, 0x16BAFDFF, 0xAF239FEF, 0x5EB7419D, 0x2EDCF57D,
    0x07851489, 0x57E97D6F, 0xEEE86D6C, 0x762E9ED9, 0x747A37D9, 0xAEDF12ED, 0x77B9ED5C,
    0x1F762F37, 0xF3F9B53F, 0xDBA9D274, 0xEEBD8EB6, 0xC9C3EE5C, 0x7F0ACF07, 0xFFF35539,
    0xC7F74BA0, 0x7F7F1FFF, 0xDD97B0FF, 0x67D5F27B, 0x96088160, 0xD17E5CE7, 0x75DEB7A9,
    0xD8C4A203, 0xF338AE3F, 0xB8E53FCE, 0xE73FCF93, 0x39A1B3C0, 0xE1D86CEF, 0xC3E0EF87,
    0x80FF87A1, 0x1B882268, 0x5C610332, 0xA327C604, 0xA7E1897D, 0x4DFD7F9F, 0x287BA027,
    0x34D736FD, 0xDD36D4E3, 0x3911D47F, 0xE20E8E64, 0xFF3F4FA3, 0x3C0D22D8, 0xA5182634,
    0x67A5E782, 0x6A3B911B, 0xFF8F9217, 0x6D4E434C, 0xA4895E46, 0x47AA6158, 0x00FB3E64,
    0xBD350B98, 0x7D63381D, 0xE0E83636, 0x5380CD3F, 0xEA3D8C1B, 0x459063F2, 0x3F4FC7F6,
    0x0F93DA00, 0xC3E0F493, 0xFE833D64, 0x8A3F2853, 0x384FFA1A, 0x9F8898EC, 0x1A56539B,
    0x41EA95A7, 0xC52861BA, 0x97278640, 0x2639825E, 0xF3E8EF86, 0xB4CA2A0F, 0xBE258FF3,
    0xABAAC5CC, 0xEAD2560B, 0x55BC8D3F, 0xC9F5A529, 0xE4351B1A, 0x802383D8, 0x4EF3FE65,
    0xE3FCFB3D, 0x88FF6F0B, 0xD6640C62, 0x9CEBE394, 0xA1B3B4E1, 0x2AE19063, 0x3D53B5A5,
    0xB13FE7A2, 0x8A4EE33C, 0x0FB3FE21, 0x88027DA0, 0x9A20931B, 0xA63C8EAA, 0xB48E29CE,
    0xEB7B50FF, 0xD9BEF4B5, 0x9573B694, 0xCEAA8C82, 0x3CDD8380, 0xEC1B14F7, 0x0B420091,
    0xCED8BCAF, 0x54C2EF6B, 0x6C4BE251, 0xEDF338AF, 0x3B96EC3A, 0xBCFFAFE7, 0x0A63ED3B,
    0x9E1C4C77, 0x198368C4, 0xBA921A39, 0xA2E13961, 0x24B8727C, 0x374C886F, 0x4FFAE994,
    0xC5CCBD25, 0x0EA63CCE, 0xFDB0262C, 0x6BEBEB35, 0x742C25B1, 0xFAA4A948, 0x14F33B4F,
    0xEACEA73B, 0xA76C9CB5, 0xD9436D91, 0x1C5E7F3E, 0x30F63C2C, 0x4385EDDA, 0x66989C33,
    0x8EB3799C, 0x03F0FA89, 0x8AE33EA0, 0xE6DAB66B, 0xD39D3B92, 0x4E99426B, 0xFA8F4BC5,
    0xD6408027, 0x5DAD88E6, 0x245CAC7B, 0x89D5CCBC, 0x32799C30, 0x4386640C, 0xAA318A36,
    0xC61E836E, 0xAEFA9AEB, 0x3C5B7789, 0x17486DA4, 0x7DAAB8BB, 0xE0252E77, 0xECFAF173,
    0x4E56E46D, 0xA4F8C5F0, 0x5665321D, 0x24D76245, 0x75EDFB35, 0xFE8128BD, 0x60E2340F,
    0x17CEF177, 0x38200A03, 0x340748EC, 0xD6C7B055, 0xB9BD358B, 0xC0261D88, 0xE7BB4D04,
    0x0CFED953, 0x7A8F566D, 0xA4FFA2FA, 0x4DE70CB2, 0x93919AD5, 0xE8CC0250, 0x0350BA74,
    0x53B2F425, 0xC8B1AF85, 0xC173C6E2, 0xCC4C63BB, 0xA84D9836, 0x8CDFBC92, 0xF758A38D,
    0x290FF92C, 0xF3D6A8C7, 0x4CA33806, 0xBB338300, 0xDACDCCC1, 0x51223F15, 0x30D6498D,
    0x5366AF87, 0x86CA0A1B, 0x0750DE7A, 0xA446D6D9, 0x2EE64C63, 0xFA60237C, 0x688B42AC,
    0x011E285C, 0x98EA47FB, 0x31073A64, 0x73951FED, 0x4860FB9B, 0x23A1EB2E, 0x949AA61E,
    0x18E7D108, 0x6A83ECCE, 0x801BAB18, 0x0DA277C4, 0x0586B0C5, 0xF6EF91CB, 0x31B43187,
    0x80D116A9, 0x4876FD92, 0xC32493C5, 0x6179D81B, 0x3551F8B0, 0x1FE85858, 0x641A7B89,
    0x32350144, 0x688CB18E, 0x08270C84, 0xA16D9747, 0xE0D26FAF, 0x062D1093, 0x314A283F,
    0x63CBB384, 0x8F8260A5, 0x37A9AD84, 0xB0560C4B, 0x648A87B0, 0x6F8F4F70, 0xF268890C,
    0x44749151, 0x08926123, 0xB8323FDC, 0x4751F7C1, 0xA0B24C49, 0x48941625, 0x2F048644,
    0x4546A8E8, 0xF08771CA, 0xFF6C0C24, 0x18CC0638, 0xCD1BA264, 0x609B330F, 0x68472763,
    0x42089B91, 0x4AD93C27, 0xAAC426DF, 0x36326CD8, 0x27A5A3DE, 0x678E75ED, 0xEB16E224,
    0xBA410138, 0xC49815F2, 0x19E23442, 0xF9A730A6, 0xE43CFA19, 0x07397819, 0x8BF0FE13,
    0x27C0107F, 0x60800962, 0x7390A308, 0xBB26E160, 0x6A7809B8, 0xD26A4559, 0x00F91CEB,
    0x221F28A5, 0x93266388, 0x4824DE9B, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( ApplicationEvacEvent )
    EW_BITMAP( ApplicationEvacEvent, Default )
EW_END_OF_BITMAP_RES( ApplicationEvacEvent )

/* Table with links to derived variants of the bitmap resource : 'Application::EvacEvent' */
EW_RES_WITHOUT_VARIANTS( ApplicationEvacEvent )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( ApplicationLargeCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'Application::LargeCheckBox' */
void ApplicationLargeCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const0396 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const0397 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &ApplicationCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02DD );
}

/* Table with links to derived variants of the auto object : 'Application::LargeCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationLargeCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationLargeCheckBox )

/* Bitmap resource : 'Application::CheckBoxLarge' */
EW_DEFINE_BITMAP_RES( ApplicationCheckBoxLarge )
  EW_BITMAP_FRAMES( ApplicationCheckBoxLarge, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 1, 0, 20, 17, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 34, 2, 0x000001F0, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 20, 17, 0x000003BC, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationCheckBoxLarge, Default )     /* ratio 9.47 % */
    0xD2AD2900, 0xBDDE2006, 0x2148FF7D, 0xD28FF733, 0x070D6EAC, 0xB136D446, 0x178A40A2,
    0xC8CC4A2D, 0x8C47A371, 0x1C82351F, 0x4764B229, 0x3E1B2792, 0x9FF0B84C, 0x01178441,
    0xAF978BA8, 0x266E2C21, 0xA9DCA643, 0x9F4A27B3, 0x0D0A7F39, 0xCDE7744A, 0x8E6B337F,
    0xE790C632, 0x8145A750, 0xB52A9D42, 0x15AB53EA, 0xB5753697, 0xAFD5EA2D, 0x0552C35E,
    0xC6EC563B, 0xAACB5D57, 0x2C96BAC5, 0xE36EB7DB, 0x76DB959A, 0x78BADDAE, 0x9BD5DEE1,
    0xBFDF2E97, 0x15EF037E, 0xE1B077DC, 0x1F0188C2, 0x30989C56, 0x9B14C7E3, 0x2FF7937D,
    0x8B723154, 0xCCCE6B1D, 0x78B819D9, 0x54C40113, 0xE73214D8, 0x7A81A7C6, 0xF5B31D06,
    0x51AFD140, 0x7A974329, 0x12DBEA33, 0x4D768757, 0x826C3790, 0xAB9D98AB, 0x58371C4D,
    0xC77D94C9, 0xDD8D55DC, 0x95CEE63F, 0x2CE576BF, 0xC6D3715D, 0xFDDF224B, 0x92F3797A,
    0x7EF7B9D0, 0xBA99EB1D, 0x4BB1B6EB, 0x609D2EDC, 0xBBEFB2F8, 0x4B6827CB, 0xF8ECF9DA,
    0xFF9FB2F5, 0xC17C401B, 0x5317F5FF, 0x97A9F77D, 0x8DFB5C9E, 0xDF7FA0A7, 0x6FA01765,
    0x0EB350B8, 0x2825C47A, 0x51FF6BE0, 0x0D8620F8, 0x32DC481A, 0x5E23C0E0, 0x37E6197F,
    0x7A257854, 0x22881A88, 0x7460C7B6, 0xA078C62A, 0xE88E2C61, 0x9A338C1D, 0xC9596148,
    0x8D8EF374, 0xA3B8E21C, 0xD492438C, 0xA62E8FE3, 0x3A912398, 0x360C0542, 0x5EE900ED,
    0x59564B87, 0xF8955864, 0x4A88CE12, 0x9324D95E, 0x0CB2B140, 0x697E5D6D, 0x825E99A5,
    0x699AA679, 0x9B66E9AE, 0x2729A270, 0x59BE739B, 0x32749C67, 0x769E15C6, 0x5A14F9E6,
    0xE7C568FF, 0x869268A0, 0xE1364D14, 0x74A2E774, 0x3C8EB51E, 0xD2F684FA, 0x5324A63F,
    0x40B4434E, 0xB69F68C4, 0xA5A94A65, 0x5A141D2E, 0x00000040, 0xD8740100, 0xB71B0001,
    0x94A4FF70, 0x01AFF3D1, 0x04FF220A, 0x903888EE, 0x168944E2, 0x58DC6233, 0x8EC5E391,
    0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884, 0x01128441, 0xEE06DB5C, 0x4715841F,
    0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419, 0xCE73378C, 0xA332D9AC, 0xFE732F12,
    0xCE97338D, 0x58988022, 0x9AD55E07, 0xADD76095, 0x0D8AB95E, 0xD9AC164B, 0x9EC768AF,
    0x5CF5FB55, 0x9EFF763A, 0x94D8C546, 0x188809C1, 0x5B4DC2DD, 0xBEDAEF96, 0x1E03036C,
    0xDFB0B7FC, 0xA1CD5AC3, 0x41D1975B, 0x0D46228A, 0x184C960B, 0x96C9E571, 0x6BE66B29,
    0xCFE66AD4, 0x1E5F4398, 0xE97459BD, 0xAB4F21A3, 0xF59A4D06, 0x7D9CD36A, 0xBB4D867A,
    0xB6D7ED75, 0xECEDFF73, 0xDF6DF7BA, 0x96EF81BA, 0xEFF8BC2D, 0xF391C1E3, 0xB9BB8E46,
    0x97D0E4F1, 0xFCCE7743, 0xD2D1F539, 0xCEB76BAF, 0xEAF1395D, 0x1777A7E0, 0xF8FB363F,
    0xE7D1E1ED, 0xBCFE9F36, 0xBFE5F6FB, 0xBEAF9F93, 0xF4F6703E, 0x3F87E7DF, 0xFE7DBF18,
    0x9647EDFF, 0x6805FA7F, 0x1DF27DE0, 0xCF816008, 0x83E0B811, 0x60E7AA02, 0x88420C84,
    0x520A84DB, 0x186B2168, 0x87E1A856, 0xE1B875A7, 0x56C62088, 0xA6198794, 0x288261C8,
    0x70E248B6, 0x62E8BE27, 0x4889A289, 0xC62A8DE3, 0x338E2317, 0x8B1FD8E6, 0xA3C90632,
    0x85D9138E, 0x318A4557, 0x0092E3D6, 0x63D8D926, 0x11942D09, 0xF1C85C12, 0x0E4C938F,
    0x54939F49, 0x9497495A, 0x9384D92F, 0x57CA6474, 0xA2678EE6, 0x494666A6, 0x4C6613FD,
    0x4E2378DA, 0x06390C94, 0xA2789999, 0x7B9AE799, 0x9D276676, 0xE739C4FF, 0x1002843F,
    0x00000010, 0xD8740100, 0x39DC8001, 0x9CA8FF75, 0x830FF3D9, 0x04FF268C, 0x903888EE,
    0x168944E2, 0x58DC6233, 0x8EC5E391, 0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884,
    0x01128441, 0xEDE6CB54, 0x4816049F, 0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419,
    0xCE73378C, 0x4C8519AC, 0x7D50A31E, 0xB52A2D46, 0x47ABD52A, 0xFA6BFEB1, 0x2209C194,
    0x0D8AB353, 0x58EAD64B, 0x3E2B65B3, 0xED246150, 0xE368AD59, 0xB6FB9DC2, 0x72BBDBAE,
    0x4BC5E6ED, 0xBEDEAF97, 0x1E03037B, 0xDFB0B7FC, 0x270D82C3, 0xB1984C46, 0x238BC6E2,
    0xE03C6E43, 0x9F7F8F43, 0xE7FAD552, 0xC71D8C44, 0x363F25A0, 0x28B2F95C, 0x022CB756,
    0xF432D988, 0x87AED1E4, 0x3A77FE96, 0x03DBCC75, 0xC2D6E757, 0xDFEC5006, 0xAECEEFA2,
    0x41371AAD, 0x8209BAE3, 0xF8084391, 0x2DB2E76B, 0x3C5CD663, 0x8C3F4C77, 0xAEC3FD36,
    0x334C791D, 0x1F411277, 0xE67678BF, 0x7373DECD, 0x3D3EB94F, 0x1C7C3641, 0x5E5E7F91,
    0xC7EAF9FA, 0xDB2767D5, 0x827FBADE, 0xC9421075, 0x75EDB07C, 0xF4007B9F, 0xC9829867,
    0x80E01835, 0xD7D845C1, 0xA835FF81, 0x220C6820, 0x992287B7, 0x851A0810, 0xE09885F9,
    0x950E127E, 0xD1DD7EA1, 0x9C48E2A7, 0x7E0B229C, 0x22B89216, 0x585DFB7F, 0xBE2D6822,
    0x338DA088, 0x5F63E8DE, 0x9D78C239, 0x68F6058C, 0x90996C24, 0x28908B02, 0x9163F87A,
    0xE4B92576, 0x793A448E, 0x508787A4, 0x04930A22, 0x95A508F1, 0xC395A25F, 0xE8C06613,
    0x3E689825, 0x7418CFF9, 0x955DB21C, 0xA579C66A, 0x69CE619C, 0xA6789D67, 0x799EA779,
    0x9FE7C9D2, 0xA7BA067E, 0xE5167DA0, 0x02845815, 0x6C5AA83A, 0xA294E56D, 0x550A4685,
    0x84D94B6B, 0x2E98A413, 0xD83FD496, 0x6A8E1370, 0x8573FD2F, 0xB3FC7D1A, 0x644F0D01,
    0xA75DA8BA, 0xA96A3AA6, 0x1014C6A1, 0x00000000

  EW_BITMAPS_TABLE( ApplicationCheckBoxLarge )
    EW_BITMAP( ApplicationCheckBoxLarge, Default )
EW_END_OF_BITMAP_RES( ApplicationCheckBoxLarge )

/* Table with links to derived variants of the bitmap resource : 'Application::CheckBoxLarge' */
EW_RES_WITHOUT_VARIANTS( ApplicationCheckBoxLarge )

/* Bitmap resource : 'Application::CheckBoxSmall' */
EW_DEFINE_BITMAP_RES( ApplicationCheckBoxSmall )
  EW_BITMAP_FRAMES( ApplicationCheckBoxSmall, Default, EW_DRIVER_VARIANT_RGBA8888, 20, 20, 0 )
    EW_BITMAP_FRAME( 1, 0, 10, 9, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 18, 1, 0x0000017C, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 10, 9, 0x000002A8, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationCheckBoxSmall, Default )     /* ratio 23.08 % */
    0x9B95B700, 0x2FD44957, 0xB128FF71, 0x157096D2, 0x1B0E4A43, 0x71088C3E, 0x188945A2,
    0xC8A4662B, 0x5D2722F1, 0x1B61FEE0, 0xA8548F27, 0xAA35085E, 0xE2F1B8EC, 0x5F2C974A,
    0x49F99CB6, 0x3299B857, 0x09DCC673, 0x9E4E27B3, 0x14EA7D3F, 0xD068740A, 0x169346A3,
    0x29B44A5D, 0x5747A652, 0x2ED71B01, 0xAC73B255, 0xF6DAB92C, 0xAF52A9D4, 0x4552A52C,
    0x0A9E4DA6, 0x90076855, 0x926E4622, 0xBB5FAE56, 0x4AD995CA, 0xCE793918, 0x912BC5B8,
    0x1BBB1A0B, 0xBBA99EB6, 0xB898CA95, 0x998CA804, 0x15A964D3, 0xE371A85C, 0x0E460AB2,
    0xF16EB25F, 0xB69AEC4C, 0x5BA7C80E, 0x6255ECDE, 0x3215F5C5, 0xAAD0C373, 0xEAEAC01A,
    0xFD5B4BA3, 0xB2CC8645, 0x99CBDDEE, 0xF75B5577, 0xA3B7F3E4, 0x03958EAD, 0x8038A006,
    0x05CECB57, 0xDB8B04C2, 0xA6A9A85C, 0xB7A63BB6, 0xBECEE6C4, 0x7574339F, 0x66AD18BA,
    0x8A68F8E8, 0xCCFB4DD5, 0xB1B563E8, 0xEFF7D153, 0x2FB3D0E7, 0xE97AE636, 0x33F8F395,
    0x49230557, 0xBF5F1D5D, 0x0B828437, 0x67E0F238, 0x990C6D20, 0xFB388BE2, 0x668EA65C,
    0x9A06799C, 0x6582073D, 0x70B14E21, 0xD02CCFC3, 0x7648E3A4, 0xE2179A15, 0x588A0888,
    0xA2178922, 0x278A6268, 0x80C9B502, 0xE218C62B, 0xA6FCB726, 0x989C2488, 0x0A4DCBC4,
    0x79A3E8B1, 0xDBF2E09C, 0x029C9C24, 0x0000404B, 0xFAD55900, 0x1346C955, 0x7C04FF32,
    0x400FF1E0, 0x1F0D1D87, 0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1, 0x44303C01,
    0x3FCB4401, 0x9174AF53, 0x6104C1B2, 0xEA893B99, 0x69F48215, 0x3F0D8008, 0xB9CCDC38,
    0x9F4E2753, 0x1CF67F3C, 0xD068B42A, 0x443940A3, 0x05879311, 0xDC99451F, 0x25F230BD,
    0x857FC8A1, 0x09B28D28, 0xAFD7ABA0, 0x1D8AC360, 0x58ECB64B, 0xA9A8CE64, 0xA3757010,
    0xE370B350, 0x42AB95CA, 0x148E0185, 0xCBDDCEDF, 0xBBDD6E77, 0xEDEA1B1E, 0xD830B84B,
    0xF30578BF, 0x30D8CC34, 0x1B43C0E2, 0xF8FBE64B, 0x939D62A3, 0xACADC733, 0xCFE6B071,
    0x5DBB3961, 0x57F4BA0C, 0x9B3D17D1, 0x2F3A8D06, 0x5BA5D5E9, 0x5ABD865F, 0xACDA6476,
    0x8DBE26ED, 0xD56DB35B, 0x0E731BBD, 0xD36970C9, 0xC94B9AE0, 0x242145FA, 0xF5269244,
    0x568A8A24, 0xD8C4002D, 0xBBBF6775, 0xEFF6BAFD, 0x0F7BC1DC, 0x7339406F, 0x8D529C48,
    0xCAC3B11B, 0xF07235BF, 0x955A9A90, 0x90DDC32D, 0xBFC65BF3, 0x7FF3B03F, 0x9EE0F023,
    0x01F4761B, 0x0000404B, 0x1AE16100, 0x94072956, 0x8006FF33, 0x400FF1F0, 0x1F0D1D87,
    0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1, 0xF8F03C01, 0x970862B7, 0xF568AB7F,
    0x09835522, 0x611E8D19, 0x9349947E, 0x359B4CE3, 0xF230BE25, 0x91009FE5, 0xC4C66F39,
    0x51A87449, 0x7C0533A1, 0x69145918, 0xA14DA7D0, 0x34EA951E, 0x57A9D5AA, 0xAADD62AB,
    0x2B90A215, 0x6161DA6D, 0x029587F3, 0xAAA84313, 0x6BF6AACD, 0x60A34BD8, 0x7742A8A9,
    0x742F9280, 0x11282526, 0xBF572D64, 0xE11E2520, 0x279E4712, 0xCC4AB356, 0xC6E94409,
    0x6E8F3F1B, 0x28D469C5, 0x78319441, 0x01101934, 0x9C67B004, 0xC1C8B647, 0x2D54EA17,
    0x5D0E7B13, 0x47E27202, 0x16047B16, 0xA692B3FE, 0xAABA30CF, 0x03516406, 0x7F10ECF9,
    0x34C7836C, 0xE970A5B2, 0x69147DD3, 0x87A2427A, 0x47219A15, 0x07B33956, 0x00EB8018,
    0x1431C8C0, 0x238A81E8, 0xA0FEA79F, 0xA79DA6B2, 0xAF538952, 0x385CFE6E, 0xFA6A2C44,
    0x67B35314, 0x2D091F11, 0xE99F8492, 0x769A8A83, 0x8A927491, 0xD6358B0A, 0x65EE6BDA,
    0x3F084054, 0x09C0B3FC, 0x1197EC44, 0x21B85911, 0xB0A525CF, 0x376318A2, 0x164410A4,
    0xE22824F2, 0x10E9185F, 0x68FB19C5, 0xA82B8A12, 0x6B9AC6A9, 0x95D88CF6, 0xC0491884,
    0xC4FC1202, 0x8E244811, 0x892347B0, 0xE328CE40, 0x4906428F, 0x451891E4, 0x4391A487,
    0x92E0792A, 0x13494645, 0xD73C3C09, 0x90791CC6, 0x62128332, 0x0F420424, 0xA4E84A50,
    0x81C4FF6B, 0x04B02007, 0x00000004, 0x00000000

  EW_BITMAPS_TABLE( ApplicationCheckBoxSmall )
    EW_BITMAP( ApplicationCheckBoxSmall, Default )
EW_END_OF_BITMAP_RES( ApplicationCheckBoxSmall )

/* Table with links to derived variants of the bitmap resource : 'Application::CheckBoxSmall' */
EW_RES_WITHOUT_VARIANTS( ApplicationCheckBoxSmall )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( ApplicationSmallCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'Application::SmallCheckBox' */
void ApplicationSmallCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000A );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const0398 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const0398 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzCenter 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const0398 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDisabled( _this, _Const0398 );
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const0397 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const0399 );
}

/* Table with links to derived variants of the auto object : 'Application::SmallCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationSmallCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationSmallCheckBox )

/* Initializer for the class 'Application::Disablements' */
void ApplicationDisablements__Init( ApplicationDisablements _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisablements );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A7 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const009C );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationDisablementItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  _this->VerticalList.OnUpdate = EwNewSlot( _this, ApplicationDisablements_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationDisablements_OnLoadItem1 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationDisablements_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, ApplicationDisablements_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->EventListChangedEvent );
}

/* Re-Initializer for the class 'Application::Disablements' */
void ApplicationDisablements__ReInit( ApplicationDisablements _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
}

/* Finalizer method for the class 'Application::Disablements' */
void ApplicationDisablements__Done( ApplicationDisablements _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisablements );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Disablements' */
void ApplicationDisablements__Mark( ApplicationDisablements _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->SystemEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDisablements_UpdateLayout( ApplicationDisablements _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisablements_UpdateViewState( ApplicationDisablements _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::Disablements.ScrollDragSlot()' */
void ApplicationDisablements_ScrollDragSlot( ApplicationDisablements _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Disablements.ScrollPressSlot()' */
void ApplicationDisablements_ScrollPressSlot( ApplicationDisablements _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationDisablements_onEvent( ApplicationDisablements _this, XObject sender )
{
  XInt32 numItems;
  ApplicationApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );

    numItems = cmd.int0;
  }
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numItems );
  ap = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( ap != 0 )
  {
    ap->EventsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->EventsTabButton );

    if (( ap->AlarmsTabButton.NumberOf == 0 ) && ( ap->FaultsTabButton.NumberOf 
        == 0 ))
    {
      if ( EwCompString( ap->SelectedTab, EwLoadString( &_Const01E2 )) != 0 )
      {
        EwPostSignal( EwNewSlot( &ap->EventsTabButton, ApplicationTabButton_OnPress 
          ), ((XObject)_this ));
      }
    }
  }

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numItems - 1 );
}

/* 'C' function for method : 'Application::Disablements.Refresh()' */
void ApplicationDisablements_Refresh( ApplicationDisablements _this, XObject sender )
{
  XInt32 num;
  ApplicationApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  num = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_DISABLED, &cmd );  

    num = cmd.int0;
  }
  app = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( app != 0 )
  {
    app->DisablementsTabButton.NumberOf = (XUInt16)num;
    CoreGroup_InvalidateViewState((CoreGroup)&app->DisablementsTabButton );
  }

  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, num );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, num - 1 );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationDisablements_OnLoadItem1( ApplicationDisablements _this, XObject 
  sender )
{
  XInt16 itemNo;
  ApplicationDisablementItem row;
  XInt16 type;
  XString location;
  XInt16 zone;
  XInt16 yunit;
  XInt16 fires;
  XInt16 inout;
  XInt16 chan;
  XString t;
  XString io;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->VerticalList.Item;
  row = EwCastObject( _this->VerticalList.View, ApplicationDisablementItem );
  type = 0;
  location = EwLoadString( &_Const00A4 );
  zone = 0;
  yunit = 0;
  fires = 0;
  inout = 1;
  chan = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_DISABLED, &cmd );  

    fires = cmd.int0;

    if ( fires != 0 )
    {
        cmd.int0 = itemNo;

      Command0( CMD_GET_DISABLED_DETAILS, &cmd );

      location = EwNewStringAnsi( (char*) cmd.int0 );
      zone  = cmd.short2;
      yunit = cmd.short3;
      type = cmd.short4;
      chan = cmd.short5;
      inout = cmd.short6;
     }
  }
  t = 0;
  io = 0;

  if ( inout == 1 )
  {
    io = EwLoadString( &_Const039A );

    switch ( type )
    {
      case 0 :
        t = EwLoadString( &_Const039B );
      break;

      case 1 :
        t = EwLoadString( &_Const039C );
      break;

      case 2 :
        t = EwLoadString( &_Const039D );
      break;

      case 3 :
        t = EwLoadString( &_Const039E );
      break;

      case 4 :
        t = EwLoadString( &_Const039F );
      break;

      case 7 :
        t = EwLoadString( &_Const03A0 );
      break;

      case 11 :
        t = EwLoadString( &_Const030E );
      break;

      case 12 :
        t = EwLoadString( &_Const0267 );
      break;

      default : 
        t = EwLoadString( &_Const03A1 );
    }
  }
  else
  {
    io = EwLoadString( &_Const03A2 );

    switch ( type )
    {
      case 5 :
        t = EwLoadString( &_Const03A3 );
      break;

      case 6 :
        t = EwLoadString( &_Const03A4 );
      break;

      case 9 :
        t = EwLoadString( &_Const03A5 );
      break;

      case 10 :
        t = EwLoadString( &_Const03A6 );
      break;

      case 13 :
        t = EwLoadString( &_Const03A7 );
      break;

      default : 
        t = EwLoadString( &_Const03A1 );
    }
  }

  ViewsText_OnSetString( &row->ChanText, t );
  ViewsText_OnSetString( &row->Text, location );
  ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
  EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwLoadString( 
  &_Const00A5 ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const00A6 )), EwNewStringInt( 
  yunit, 0, 10 )), EwLoadString( &_Const004F )), io ), EwLoadString( &_Const03A8 
  )), EwNewStringInt( chan, 0, 10 )));
  CoreRectView__OnSetBounds( row, EwSetRectW( row->Super2.Bounds, EwGetRectW( _this->VerticalList.Super2.Bounds 
  )));
}

/* Variants derived from the class : 'Application::Disablements' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisablements )
EW_END_OF_CLASS_VARIANTS( ApplicationDisablements )

/* Virtual Method Table (VMT) for the class : 'Application::Disablements' */
EW_DEFINE_CLASS( ApplicationDisablements, CoreGroup, "Application::Disablements" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDisablements_UpdateLayout,
  ApplicationDisablements_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisablements )

/* Initializer for the class 'Application::DisablementItem' */
void ApplicationDisablementItem__Init( ApplicationDisablementItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ChanText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisablementItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0064 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0064 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0065 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0064 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0070 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const03A9 );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0067 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const03AA );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ChanText, _Const03AB );
  ViewsText_OnSetAlignment( &_this->ChanText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChanText, 0 );
  ViewsText_OnSetColor( &_this->ChanText, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChanText ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ChanText, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::DisablementItem' */
void ApplicationDisablementItem__ReInit( ApplicationDisablementItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->ChanText );
}

/* Finalizer method for the class 'Application::DisablementItem' */
void ApplicationDisablementItem__Done( ApplicationDisablementItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisablementItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->ChanText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisablementItem' */
void ApplicationDisablementItem__Mark( ApplicationDisablementItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->ChanText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDisablementItem_UpdateLayout( ApplicationDisablementItem _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisablementItem_UpdateViewState( ApplicationDisablementItem _this, 
  XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::DisablementItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisablementItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDisablementItem )

/* Virtual Method Table (VMT) for the class : 'Application::DisablementItem' */
EW_DEFINE_CLASS( ApplicationDisablementItem, CoreGroup, "Application::DisablementItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDisablementItem_UpdateLayout,
  ApplicationDisablementItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisablementItem )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( ApplicationSmallCheckBoxCaption, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'Application::SmallCheckBoxCaption' */
void ApplicationSmallCheckBoxCaption__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0018 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 34 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02DC );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const02DB );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const0396 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const0397 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &ApplicationCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02DD );
}

/* Table with links to derived variants of the auto object : 'Application::SmallCheckBoxCaption' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationSmallCheckBoxCaption )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationSmallCheckBoxCaption )

/* Initializer for the class 'Application::OnTest' */
void ApplicationOnTest__Init( ApplicationOnTest _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOnTest );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A7 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const009C );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationOnTestItem 
  ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  _this->VerticalList.OnUpdate = EwNewSlot( _this, ApplicationOnTest_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationOnTest_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationOnTest_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
}

/* Re-Initializer for the class 'Application::OnTest' */
void ApplicationOnTest__ReInit( ApplicationOnTest _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
}

/* Finalizer method for the class 'Application::OnTest' */
void ApplicationOnTest__Done( ApplicationOnTest _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOnTest );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OnTest' */
void ApplicationOnTest__Mark( ApplicationOnTest _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VertScrollbar );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationOnTest_UpdateLayout( ApplicationOnTest _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationOnTest_UpdateViewState( ApplicationOnTest _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::OnTest.ScrollDragSlot()' */
void ApplicationOnTest_ScrollDragSlot( ApplicationOnTest _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::OnTest.ScrollPressSlot()' */
void ApplicationOnTest_ScrollPressSlot( ApplicationOnTest _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationOnTest_OnLoadItem( ApplicationOnTest _this, XObject sender )
{
  XInt16 itemNo;
  ApplicationOnTestItem row;
  XInt16 order;
  XEnum type;
  XString location;
  XInt16 zone;
  XInt16 yunit;
  XInt16 fires;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->VerticalList.Item;
  row = EwCastObject( _this->VerticalList.View, ApplicationOnTestItem );
  order = (XInt16)( itemNo + 1 );
  type = ApplicationChannelTypeNone;
  location = EwLoadString( &_Const00A4 );
  zone = 0;
  yunit = 0;
  fires = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_ON_TEST, &cmd );  

    fires = cmd.int0;

    if ( fires != 0 )
    {
      if ( itemNo == 0 )
      {
        cmd.int0 = fires - 1;
      }
      else
      {
        cmd.int0 = itemNo - 1;
      }

      order = cmd.int0 + 1;

      Command0( CMD_GET_ON_TEST_DETAILS, &cmd );

      location = EwNewStringAnsi( (char*) cmd.int0 );
      zone  = cmd.short2;
      yunit = cmd.short3;
      type = cmd.short4;
     }
  }
  ViewsImage_OnSetBitmap( &row->Image, ApplicationLibClass_TypeBitmap( EwGetAutoObject( 
  &ApplicationLib, ApplicationLibClass ), type ));
  ViewsText_OnSetString( &row->Text, location );
  ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const00A5 ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const00A6 
  )), EwNewStringInt( yunit, 0, 10 )));
  CoreRectView__OnSetBounds( row, EwSetRectW( row->Super2.Bounds, EwGetRectW( _this->VerticalList.Super2.Bounds 
  )));
}

/* Variants derived from the class : 'Application::OnTest' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOnTest )
EW_END_OF_CLASS_VARIANTS( ApplicationOnTest )

/* Virtual Method Table (VMT) for the class : 'Application::OnTest' */
EW_DEFINE_CLASS( ApplicationOnTest, CoreGroup, "Application::OnTest" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationOnTest_UpdateLayout,
  ApplicationOnTest_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOnTest )

/* Initializer for the class 'Application::OnTestItem' */
void ApplicationOnTestItem__Init( ApplicationOnTestItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOnTestItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0064 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0064 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0065 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0064 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0070 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const03AC );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0067 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const03AD );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const006D );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006E ));
  ViewsText_OnSetColor( &_this->TimeText, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0395 );
  ViewsImage_OnSetColor( &_this->Image, _Const0018 );
  ViewsImage_OnSetAlignment( &_this->Image, ViewsImageAlignmentAlignHorzCenter | 
  ViewsImageAlignmentAlignVertCenter );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ApplicationFireBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'Application::OnTestItem' */
void ApplicationOnTestItem__ReInit( ApplicationOnTestItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->TimeText );
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'Application::OnTestItem' */
void ApplicationOnTestItem__Done( ApplicationOnTestItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOnTestItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->TimeText );
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OnTestItem' */
void ApplicationOnTestItem__Mark( ApplicationOnTestItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationOnTestItem_UpdateLayout( ApplicationOnTestItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationOnTestItem_UpdateViewState( ApplicationOnTestItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::OnTestItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOnTestItem )
EW_END_OF_CLASS_VARIANTS( ApplicationOnTestItem )

/* Virtual Method Table (VMT) for the class : 'Application::OnTestItem' */
EW_DEFINE_CLASS( ApplicationOnTestItem, CoreGroup, "Application::OnTestItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationOnTestItem_UpdateLayout,
  ApplicationOnTestItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationOnTestItem )

/* Initializer for the class 'Application::DisableZoneItem' */
void ApplicationDisableZoneItem__Init( ApplicationDisableZoneItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->ExpandImage, &_this->_XObject, 0 );
  XFlatCheckBox__Init( &_this->CheckBox, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->InTestText, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisableZoneItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0366 );
  CoreRectView__OnSetBounds( &_this->ExpandImage, _Const0367 );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const0368 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
  XFlatCheckBox_OnSetCaption( &_this->CheckBox, 0 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0369 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0009 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0334 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const01C8 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const02F7 );
  CoreRectView__OnSetBounds( &_this->Text, _Const036A );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->InTestText, _Const036B );
  ViewsText_OnSetAlignment( &_this->InTestText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->InTestText, 0 );
  ViewsText_OnSetColor( &_this->InTestText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const036C );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ExpandImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InTestText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  _this->CheckBox.OnChange = EwNewSlot( _this, ApplicationDisableZoneItem_ToggleSlot 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationDisableZoneItem_ClearAll 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationDisableZoneItem_ToggleExpand 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->InTestText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, ApplicationDisableZoneItem_ToggleSlot 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, ApplicationDisableZoneItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &ApplicationLargeCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::DisableZoneItem' */
void ApplicationDisableZoneItem__ReInit( ApplicationDisableZoneItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->ExpandImage );
  XFlatCheckBox__ReInit( &_this->CheckBox );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->InTestText );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
}

/* Finalizer method for the class 'Application::DisableZoneItem' */
void ApplicationDisableZoneItem__Done( ApplicationDisableZoneItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisableZoneItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->ExpandImage );
  XFlatCheckBox__Done( &_this->CheckBox );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->InTestText );
  WidgetSetToggleButton__Done( &_this->ToggleButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisableZoneItem' */
void ApplicationDisableZoneItem__Mark( ApplicationDisableZoneItem _this )
{
  EwMarkObject( &_this->ExpandImage );
  EwMarkObject( &_this->CheckBox );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->InTestText );
  EwMarkObject( &_this->ToggleButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDisableZoneItem_UpdateLayout( ApplicationDisableZoneItem _this, 
  XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisableZoneItem_UpdateViewState( ApplicationDisableZoneItem _this, 
  XSet aState )
{
  ApplicationDisable testpage;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->ZoneNum == 0 )
  {
    ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const03AE ));
  }
  else
  {
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const00A5 
    ), EwNewStringInt( _this->ZoneNum, 0, 10 )));
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );

  if ( testpage != 0 )
  {
    if (( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 1 ) == 1 )
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
    }
  }
}

/* 'C' function for method : 'Application::DisableZoneItem.ClearAll()' */
void ApplicationDisableZoneItem_ClearAll( ApplicationDisableZoneItem _this, XObject 
  sender )
{
  ApplicationDisable disable;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  disable = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );

  if (( disable->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 1 ) == 1 )
  {
    ApplicationDisableItem i = EwCastObject( _this->Super3.Owner->Super2.next, ApplicationDisableItem 
      );

    while (( i != 0 ) && ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableUnitItem 
           ) || CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem )))
    {
      WidgetSetToggleButton_OnSetChecked( &i->DisableUnitItem.CheckBox, 0 );

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableUnitItem ))
        ApplicationDisable_SetDeviceSelected( disable, i->DisableUnitItem.UnitNum, 
        0 );

      WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.OutputCheckBox, 
      0 );
      WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.InputCheckBox, 
      0 );

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem ) && CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.InputCheckBox 
          ))
        ApplicationDisable_SetInputChanSelected( disable, i->DisableChannelItem.UnitNum, 
        i->DisableChannelItem.ChanNum, 0 );

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem ) && CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.OutputCheckBox 
          ))
        ApplicationDisable_SetOutputChanSelected( disable, i->DisableChannelItem.UnitNum, 
        i->DisableChannelItem.ChanNum, 0 );

      i = EwCastObject( i->Super3.next, ApplicationDisableItem );
    }
  }

  if (( disable->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 2 ) == 0 )
  {
    XUInt16 zone = _this->ZoneNum;
    {
      Command cmd;
      cmd.int0 = zone;
      cmd.int1 = -1; // all units
      cmd.int2 = -1; // all channels
      cmd.int3 = 0;

      Command0( CMD_SET_INPUT_DISABLED, &cmd );   
      Command0( CMD_SET_OUTPUT_DISABLED, &cmd );
    }
    EwSignal( EwNewSlot( &EwCastObject( disable->Super3.Owner, ApplicationApplication 
      )->Disablements, ApplicationDisablements_Refresh ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'Application::DisableZoneItem.ToggleSlot()' */
void ApplicationDisableZoneItem_ToggleSlot( ApplicationDisableZoneItem _this, XObject 
  sender )
{
  ApplicationDisable testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, 
    ApplicationDisable );

  if ( EwCastObject( sender, WidgetSetToggleButton )->Checked )
  {
    ApplicationDisableItem i;
    XInt32 zone;
    testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
    EwCheckIndex( _this->ZoneNum, 97 )] | 2 );
    i = EwCastObject( _this->Super3.Owner->Super2.next, ApplicationDisableItem );

    while (( i != 0 ) && ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableUnitItem 
           ) || CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem )))
    {
      CoreGroup_OnSetEnabled((CoreGroup)&i->DisableUnitItem.CheckBox, 0 );
      WidgetSetToggleButton_OnSetChecked( &i->DisableUnitItem.CheckBox, 1 );

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem ))
      {
        if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.InputCheckBox 
            ))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.InputCheckBox, 
          0 );
          WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.InputCheckBox, 
          1 );
        }
        else
          if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.OutputCheckBox 
              ))
          {
            CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.OutputCheckBox, 
            0 );
            WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.OutputCheckBox, 
            1 );
          }
      }

      i = EwCastObject( i->Super3.next, ApplicationDisableItem );
    }

    zone = _this->ZoneNum;
    {
      Command cmd;
      cmd.int0 = zone;
      cmd.int1 = -1;
      cmd.int2 = -1; // all channels
      cmd.int3 = 1;

      Command0( CMD_SET_INPUT_DISABLED, &cmd );  
      Command0( CMD_SET_OUTPUT_DISABLED, &cmd );
    }
  }
  else
  {
    ApplicationDisableItem i;
    testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
    EwCheckIndex( _this->ZoneNum, 97 )] & 253 );
    i = EwCastObject( _this->Super3.Owner->Super2.next, ApplicationDisableItem );

    while (( i != 0 ) && ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableUnitItem 
           ) || CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem )))
    {
      CoreGroup_OnSetEnabled((CoreGroup)&i->DisableUnitItem.CheckBox, 1 );
      WidgetSetToggleButton_OnSetChecked( &i->DisableUnitItem.CheckBox, ApplicationDisable_isDeviceSelected( 
      testpage, i->DisableUnitItem.UnitNum ));

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem ))
      {
        if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.InputCheckBox 
            ))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.InputCheckBox, 
          1 );
          WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.InputCheckBox, 
          ApplicationDisable_isInputChanSelected( testpage, i->DisableChannelItem.UnitNum, 
          i->DisableChannelItem.ChanNum ));
        }

        if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.OutputCheckBox 
            ))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.OutputCheckBox, 
          1 );
          WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.OutputCheckBox, 
          ApplicationDisable_isOutputChanSelected( testpage, i->DisableChannelItem.UnitNum, 
          i->DisableChannelItem.ChanNum ));
        }
      }

      i = EwCastObject( i->Super3.next, ApplicationDisableItem );
    }

    ApplicationDisable_UpdateZone( testpage, _this->ZoneNum, 1 );
  }

  EwPostSignal( EwNewSlot( testpage, ApplicationDisable_CountOnTest ), ((XObject)_this 
    ));
}

/* 'C' function for method : 'Application::DisableZoneItem.ToggleExpand()' */
void ApplicationDisableZoneItem_ToggleExpand( ApplicationDisableZoneItem _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    CoreVerticalList lst = EwCastObject( _this->Super3.Owner->Super2.Owner, CoreVerticalList 
      );
    XInt32 total = 0;
    XInt32 devs = 4;
    XInt32 zone = _this->ZoneNum;
    ApplicationDisable testpage;
    {
      Command cmd;
      cmd.int0 = zone;

      Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
      devs = cmd.int0;
    }
    testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
    );

    if (( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 1 ) == 0 )
    {
      XInt32 dev;
      XInt32 count;
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
      testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
      EwCheckIndex( _this->ZoneNum, 97 )] | 1 );
      count = 2;
      total = total + devs;

      for ( dev = 0; dev < devs; dev = dev + 1 )
      {
        XInt32 unity = dev + 1;
        {
          Command cmd;

          cmd.int0 = zone;
          cmd.int1 = dev;
          Command0( CMD_GET_DEV_IN_ZONE, &cmd );
          DeviceConfig* device = (DeviceConfig*) cmd.int0;

          if ( device != NULL )
          {
             int chan;
             count = 0;
             unity = device->unit;
             for( chan = 0; chan < 16; chan++ )
             {
                if ( device->input[ chan].type != 0 ) count++;
                if ( device->output[ chan].type != 0 ) count++; 
             }
          }
        }

        if ( ApplicationDisable_isDeviceExpanded( testpage, unity ))
        {
          total = total + count;
        }
      }

      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems + total );
    }
    else
    {
      XInt32 dev;
      XInt32 count;
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
      testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] = (XUInt8)( testpage->zoneFlags[ 
      EwCheckIndex( _this->ZoneNum, 97 )] & 254 );
      count = 2;
      total = total + devs;

      for ( dev = 0; dev < devs; dev = dev + 1 )
      {
        XInt32 unity = dev + 1;
        {
          Command cmd;

          cmd.int0 = zone;
          cmd.int1 = dev;
          Command0( CMD_GET_DEV_IN_ZONE, &cmd );
          DeviceConfig* device = (DeviceConfig*) cmd.int0;

          if ( device != NULL )
          {
             int chan;
             count = 0;
             unity = device->unit;
             for( chan = 0; chan < 16; chan++ )
             {
                if ( device->input[ chan].type != 0 ) count++;
                if ( device->output[ chan].type != 0 ) count++; 
             }
          }
        }

        if ( ApplicationDisable_isDeviceExpanded( testpage, unity ))
        {
          total = total + count;
        }
      }

      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems - total );
    }

    CoreVerticalList_InvalidateItems( lst, 0, lst->NoOfItems - 1 );
    CoreGroup_InvalidateViewState((CoreGroup)lst );
    WidgetSetVerticalScrollbar_OnSetContentArea( &testpage->VertScrollbar, lst->NoOfItems 
    * lst->ItemHeight );
    WidgetSetVerticalScrollbar_OnSetViewArea( &testpage->VertScrollbar, EwGetRectH( 
    lst->Super2.Bounds ));
    CoreGroup_InvalidateViewState((CoreGroup)&testpage->VertScrollbar );
  }
}

/* Variants derived from the class : 'Application::DisableZoneItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisableZoneItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDisableZoneItem )

/* Virtual Method Table (VMT) for the class : 'Application::DisableZoneItem' */
EW_DEFINE_CLASS( ApplicationDisableZoneItem, CoreGroup, "Application::DisableZoneItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDisableZoneItem_UpdateLayout,
  ApplicationDisableZoneItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisableZoneItem )

/* Initializer for the class 'Application::DisableUnitItem' */
void ApplicationDisableUnitItem__Init( ApplicationDisableUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->CheckBox, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisableUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->Text, _Const036E );
  ViewsText_OnSetColorBL( &_this->Text, _Const0018 );
  ViewsText_OnSetColorBR( &_this->Text, _Const0018 );
  ViewsText_OnSetColorTR( &_this->Text, _Const0018 );
  ViewsText_OnSetColorTL( &_this->Text, _Const0018 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const036F );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0370 );
  ViewsText_OnSetColorBL( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorBR( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorTR( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetColorTL( &_this->DescriptionText, _Const0018 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, 0 );
  ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0371 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0372 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0373 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0374 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0375 );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const0376 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->CheckBox, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
  ResourcesBitmap ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationDisableUnitItem_ToggleExpand 
  );
  _this->CheckBox.OnSwitchOn = EwNewSlot( _this, ApplicationDisableUnitItem_ToggleSlot 
  );
  _this->CheckBox.OnSwitchOff = EwNewSlot( _this, ApplicationDisableUnitItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->CheckBox, EwGetAutoObject( &ApplicationSmallCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::DisableUnitItem' */
void ApplicationDisableUnitItem__ReInit( ApplicationDisableUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__ReInit( &_this->CheckBox );
}

/* Finalizer method for the class 'Application::DisableUnitItem' */
void ApplicationDisableUnitItem__Done( ApplicationDisableUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisableUnitItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__Done( &_this->CheckBox );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisableUnitItem' */
void ApplicationDisableUnitItem__Mark( ApplicationDisableUnitItem _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->CheckBox );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisableUnitItem_UpdateViewState( ApplicationDisableUnitItem _this, 
  XSet aState )
{
  ApplicationDisable testpage;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const0018 );
    ViewsText_OnSetColor( &_this->Text, _Const0018 );

    if ( ApplicationDisable_isDeviceExpanded( testpage, _this->UnitNum ))
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
    }

    ViewsImage_OnSetVisible( &_this->Image1, 1 );
  }
  else
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const008C );
    ViewsText_OnSetColor( &_this->Text, _Const008C );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
  }

  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const00A5 ), EwNewStringInt( _this->ActualZone, 0, 10 )), EwLoadString( 
  &_Const00A6 )), EwNewStringInt( _this->UnitNum, 0, 10 )));

  if (( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 2 ) == 2 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
    WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, 1 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 1 );
    WidgetSetToggleButton_OnSetChecked( &_this->CheckBox, ApplicationDisable_isDeviceSelected( 
    testpage, _this->UnitNum ));
  }
}

/* 'C' function for method : 'Application::DisableUnitItem.ToggleSlot()' */
void ApplicationDisableUnitItem_ToggleSlot( ApplicationDisableUnitItem _this, XObject 
  sender )
{
  ApplicationDisable testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );
  ApplicationDisable_SetDeviceSelected( testpage, _this->UnitNum, _this->CheckBox.Checked 
  );

  if ( _this->CheckBox.Checked )
  {
    ApplicationDisableItem i = EwCastObject( _this->Super3.Owner->Super2.next, ApplicationDisableItem 
      );
    XInt32 zone;
    XInt32 unt;

    while (( i != 0 ) && CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem 
           ))
    {
      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.InputCheckBox 
          ))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.InputCheckBox, 
        0 );
        WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.InputCheckBox, 
        1 );
      }

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.OutputCheckBox 
          ))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.OutputCheckBox, 
        0 );
        WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.OutputCheckBox, 
        1 );
      }

      i = EwCastObject( i->Super3.next, ApplicationDisableItem );
    }

    zone = _this->ZoneNum;
    unt = _this->UnitNum;
    {
      Command cmd;
      cmd.int0 = -1;
      cmd.int1 = unt;  
      cmd.int2 = -1; // all channels
      cmd.int3 = 1;

      Command0( CMD_SET_INPUT_DISABLED, &cmd );     
      Command0( CMD_SET_OUTPUT_DISABLED, &cmd );
    }
  }
  else
  {
    ApplicationDisableItem i = EwCastObject( _this->Super3.Owner->Super2.next, ApplicationDisableItem 
      );

    while (( i != 0 ) && CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem 
           ))
    {
      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.InputCheckBox 
          ))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.InputCheckBox, 
        1 );
        WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.InputCheckBox, 
        ApplicationDisable_isInputChanSelected( testpage, i->DisableChannelItem.UnitNum, 
        i->DisableChannelItem.ChanNum ));
      }

      if ( CoreGroup_OnGetVisible((CoreGroup)&i->DisableChannelItem.OutputCheckBox 
          ))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&i->DisableChannelItem.OutputCheckBox, 
        1 );
        WidgetSetToggleButton_OnSetChecked( &i->DisableChannelItem.OutputCheckBox, 
        ApplicationDisable_isOutputChanSelected( testpage, i->DisableChannelItem.UnitNum, 
        i->DisableChannelItem.ChanNum ));
      }

      i = EwCastObject( i->Super3.next, ApplicationDisableItem );
    }

    ApplicationDisable_UpdateUnit( testpage, _this->ZoneNum, _this->UnitNum, 1 );
  }

  EwPostSignal( EwNewSlot( testpage, ApplicationDisable_CountOnTest ), ((XObject)_this 
    ));
}

/* 'C' function for method : 'Application::DisableUnitItem.ToggleExpand()' */
void ApplicationDisableUnitItem_ToggleExpand( ApplicationDisableUnitItem _this, 
  XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    CoreVerticalList lst = EwCastObject( _this->Super3.Owner->Super2.Owner, CoreVerticalList 
      );
    XInt32 dev = _this->UnitNum;
    XInt32 channels = 2;
    ApplicationDisable testpage;
    {
      Command cmd;
      channels = 0;

      cmd.int0 = dev;

      Command0( CMD_GET_DEVICE, &cmd );
      DeviceConfig* dev = (DeviceConfig*) cmd.int0;

      for( int n = 0 ; n < 16; n++ )
      {
          if ( dev->input[ n].type != 0  ) channels++;
          if ( dev->output[ n].type != 0 ) channels++;
      }
    }
    testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
    );

    if ( !ApplicationDisable_isDeviceExpanded( testpage, _this->UnitNum ))
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationCollapseBitmap, 
      ResourcesBitmap ));
      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems + channels );
      ApplicationDisable_SetExpanded( testpage, _this->UnitNum, 1 );
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &ApplicationExpandBitmap, 
      ResourcesBitmap ));
      CoreVerticalList_OnSetNoOfItems( lst, lst->NoOfItems - channels );
      ApplicationDisable_SetExpanded( testpage, _this->UnitNum, 0 );
    }

    CoreVerticalList_InvalidateItems( lst, 0, lst->NoOfItems - 1 );
    CoreGroup_InvalidateViewState((CoreGroup)lst );
    WidgetSetVerticalScrollbar_OnSetContentArea( &testpage->VertScrollbar, lst->NoOfItems 
    * lst->ItemHeight );
    WidgetSetVerticalScrollbar_OnSetViewArea( &testpage->VertScrollbar, EwGetRectH( 
    lst->Super2.Bounds ));
    CoreGroup_InvalidateViewState((CoreGroup)&testpage->VertScrollbar );
  }
}

/* Variants derived from the class : 'Application::DisableUnitItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisableUnitItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDisableUnitItem )

/* Virtual Method Table (VMT) for the class : 'Application::DisableUnitItem' */
EW_DEFINE_CLASS( ApplicationDisableUnitItem, CoreGroup, "Application::DisableUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationDisableUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisableUnitItem )

/* Initializer for the class 'Application::DisableItem' */
void ApplicationDisableItem__Init( ApplicationDisableItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationDisableUnitItem__Init( &_this->DisableUnitItem, &_this->_XObject, 0 );
  ApplicationDisableZoneItem__Init( &_this->DisableZoneItem, &_this->_XObject, 0 );
  ApplicationDisableChannelItem__Init( &_this->DisableChannelItem, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisableItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->DisableUnitItem, _Const0094 );
  CoreRectView__OnSetBounds( &_this->DisableZoneItem, _Const036D );
  CoreRectView__OnSetBounds( &_this->DisableChannelItem, _Const036D );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableUnitItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableZoneItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableChannelItem ), 0 );
}

/* Re-Initializer for the class 'Application::DisableItem' */
void ApplicationDisableItem__ReInit( ApplicationDisableItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationDisableUnitItem__ReInit( &_this->DisableUnitItem );
  ApplicationDisableZoneItem__ReInit( &_this->DisableZoneItem );
  ApplicationDisableChannelItem__ReInit( &_this->DisableChannelItem );
}

/* Finalizer method for the class 'Application::DisableItem' */
void ApplicationDisableItem__Done( ApplicationDisableItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisableItem );

  /* Finalize all embedded objects */
  ApplicationDisableUnitItem__Done( &_this->DisableUnitItem );
  ApplicationDisableZoneItem__Done( &_this->DisableZoneItem );
  ApplicationDisableChannelItem__Done( &_this->DisableChannelItem );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisableItem' */
void ApplicationDisableItem__Mark( ApplicationDisableItem _this )
{
  EwMarkObject( &_this->DisableUnitItem );
  EwMarkObject( &_this->DisableZoneItem );
  EwMarkObject( &_this->DisableChannelItem );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDisableItem_UpdateLayout( ApplicationDisableItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisableItem_UpdateViewState( ApplicationDisableItem _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::DisableItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisableItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDisableItem )

/* Virtual Method Table (VMT) for the class : 'Application::DisableItem' */
EW_DEFINE_CLASS( ApplicationDisableItem, CoreGroup, "Application::DisableItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDisableItem_UpdateLayout,
  ApplicationDisableItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisableItem )

/* Initializer for the class 'Application::Disable' */
void ApplicationDisable__Init( ApplicationDisable _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteLoadedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->OnTestChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisable );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00AA );
  ViewsRectangle_OnSetAlphaBlended( &_this->Rectangle, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreRectView__OnSetBounds( _this, _Const0121 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const00A8 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0233 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0010 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const00B0 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const00B1 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const00B2 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const009C );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0237 );
  CoreVerticalList_OnSetEndless( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 45 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 3 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationDisableItem 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, ApplicationDisable_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationDisable_ScrollDragSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationDisable_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SiteLoadedEventHandler.OnEvent = EwNewSlot( _this, ApplicationDisable_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteLoadedEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->SiteLoadedEvent );
  _this->OnTestChangeEventHandler.OnEvent = EwNewSlot( _this, ApplicationDisable_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->OnTestChangeEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->OnTestChangeEvent );

  /* Call the user defined constructor */
  ApplicationDisable_Init( _this, aArg );
}

/* Re-Initializer for the class 'Application::Disable' */
void ApplicationDisable__ReInit( ApplicationDisable _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  ViewsBevel__ReInit( &_this->Bevel1 );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSystemEventHandler__ReInit( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->OnTestChangeEventHandler );
}

/* Finalizer method for the class 'Application::Disable' */
void ApplicationDisable__Done( ApplicationDisable _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisable );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  ViewsBevel__Done( &_this->Bevel1 );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSystemEventHandler__Done( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__Done( &_this->OnTestChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Disable' */
void ApplicationDisable__Mark( ApplicationDisable _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SiteLoadedEventHandler );
  EwMarkObject( &_this->OnTestChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationDisable_UpdateLayout( ApplicationDisable _this, XPoint aSize )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisable_UpdateViewState( ApplicationDisable _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void ApplicationDisable_Init( ApplicationDisable _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, ApplicationDisable_onEvent1 ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationDisable_OnLoadItem( ApplicationDisable _this, XObject sender )
{
  CoreVerticalList vlist = EwCastObject( sender, CoreVerticalList );
  XInt32 itemNo = vlist->Item;
  ApplicationDisableItem item = EwCastObject( vlist->View, ApplicationDisableItem 
    );
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  if ( item == 0 )
    return;

  curZone = 0;
  i = 0;
  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }

  while ( numZones > 0 )
  {
    XInt32 numdevs = 4;
    {
      Command cmd;

      cmd.int0 = curZone;
      Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
      numdevs = cmd.int0;
    }

    if ( numdevs > 0 )
    {
      numZones = numZones - 1;

      if ( itemNo == i )
      {
        item->DisableZoneItem.ZoneNum = curZone;
        CoreGroup_OnSetVisible((CoreGroup)&item->DisableZoneItem, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 1 );
        CoreGroup_OnSetVisible((CoreGroup)&item->DisableUnitItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
        CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)&item->DisableZoneItem );
        return;
      }
      else
      {
        i = i + 1;
      }

      if (( _this->zoneFlags[ EwCheckIndex( curZone, 97 )] & 1 ) == 1 )
      {
        XInt32 dev = 0;

        while ( dev < numdevs )
        {
          XString location = EwLoadString( &_Const03AF );
          XUInt16 unitno = (XUInt16)( dev + 1 );
          XUInt8 zoneno = curZone;
          XInt32 devptr = 0;
          XInt32 found = 1;
          {
            Command cmd;

            cmd.int0 = curZone;
            cmd.int1 = dev;
            Command0( CMD_GET_DEV_IN_ZONE, &cmd );
            DeviceConfig* device = (DeviceConfig*) cmd.int0;

            if ( device != NULL )
            {
              if ( strlen( device->location ) > 40 )   device->location[ 39] = 0; 
              location = EwNewStringAnsi( device->location );
              unitno = device->unit;
              zoneno = device->zone;
              devptr = (int) device;

              cmd.int0 = unitno;
              Command0( CMD_FIND_DEVICE_FROM_UNIT, &cmd );
              found = cmd.int0;
            }
          }

          if ( i == itemNo )
          {
            CoreGroup_OnSetVisible((CoreGroup)&item->DisableUnitItem, 1 );

            if ( found == 0 )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
            }
            else
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 1 );
            }

            CoreGroup_OnSetVisible((CoreGroup)&item->DisableZoneItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 );
            CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 );
            item->DisableUnitItem.UnitNum = unitno;
            item->DisableUnitItem.ZoneNum = curZone;
            item->DisableUnitItem.ActualZone = zoneno;
            ViewsText_OnSetString( &item->DisableUnitItem.DescriptionText, location 
            );
            CoreGroup_InvalidateViewState((CoreGroup)&item->DisableUnitItem );
            return;
          }
          else
          {
            i = i + 1;
          }

          if ( ApplicationDisable_isDeviceExpanded( _this, unitno ))
          {
            XInt32 type = 0;
            XString channame;
            XInt32 chan = 0;

            do
            {
              {
                DeviceConfig* d = (DeviceConfig*) devptr;
                if ( d != NULL )
                {
                   Command cmd;
                   type = d->input[ chan].type;

                   cmd.int0 = (int) d;

                   Command0( CMD_GET_DEVICE_FROM_CONFIG, &cmd );

                   Device* dev = (Device*)  cmd.int0;
                }
              }

              if ( type != 0 )
              {
                if ( i == itemNo )
                {
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableUnitItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableZoneItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem, 1 
                  );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 1 
                  );
                  item->DisableChannelItem.ChanNum = (XUInt8)chan;
                  item->DisableChannelItem.UnitNum = unitno;
                  item->DisableChannelItem.ZoneNum = curZone;
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem.InputCheckBox, 
                  1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputCheckBox, 
                  1 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                  0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                  0 );

                  switch ( type )
                  {
                    case 1 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const039C ));
                    break;

                    case 2 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03B0 ));
                    break;

                    case 3 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03B1 ));
                    break;

                    case 4 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const039F ));
                    break;

                    case 5 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A0 ));
                    break;

                    case 7 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const030E ));
                    break;

                    default : 
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwConcatString( EwLoadString( &_Const03B2 ), EwNewStringInt( 
                      chan + 1, 0, 10 )));
                  }

                  return;
                }
                else
                {
                  i = i + 1;
                }
              }

              chan = chan + 1;
            }
            while ( type != 0 );

            chan = 0;

            do
            {
              {
                DeviceConfig* d = (DeviceConfig*) devptr;
                if ( d != NULL )
                {
                   int bit;
                   OutputChannel* out = d->output + chan;
                   type = out->type;
                }
              }

              if ( type != 0 )
              {
                if ( i == itemNo )
                {
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableUnitItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableZoneItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem, 1 
                  );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 1 
                  );
                  item->DisableChannelItem.ChanNum = (XUInt8)chan;
                  item->DisableChannelItem.UnitNum = unitno;
                  item->DisableChannelItem.ZoneNum = curZone;
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                  1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                  1 );
                  CoreGroup_OnSetVisible((CoreGroup)&item->DisableChannelItem.InputCheckBox, 
                  0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputCheckBox, 
                  0 );

                  switch ( type )
                  {
                    case 5 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A3 ));
                    break;

                    case 6 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A4 ));
                    break;

                    case 9 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A5 ));
                    break;

                    case 10 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A6 ));
                    break;

                    case 13 :
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwLoadString( &_Const03A7 ));
                    break;

                    default : 
                      ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                      EwConcatString( EwLoadString( &_Const03B3 ), EwNewStringInt( 
                      chan + 1, 0, 10 )));
                  }

                  return;
                }
                else
                {
                  i = i + 1;
                }
              }

              chan = chan + 1;
            }
            while ( type != 0 );
          }

          dev = dev + 1;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  CoreGroup_OnSetVisible((CoreGroup)&item->DisableUnitItem, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&item->DisableZoneItem, 0 );
  CoreVerticalList_OnSetNoOfItems( vlist, i );
  while ( 1 );
}

/* 'C' function for method : 'Application::Disable.ScrollDragSlot()' */
void ApplicationDisable_ScrollDragSlot( ApplicationDisable _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->VerticalList.ScrollOffset 
  );
}

/* 'C' function for method : 'Application::Disable.ScrollPressSlot()' */
void ApplicationDisable_ScrollPressSlot( ApplicationDisable _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VertScrollbar ));
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VerticalList );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationDisable_onEvent1( ApplicationDisable _this, XObject sender )
{
  XInt32 numZones;
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }
  i = 0;

  for ( i = 0; i < 97; i = i + 1 )
  {
    _this->zoneFlags[ EwCheckIndex( i, 97 )] = 0;
  }

  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numZones );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numZones - 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, EwGetRectH( _this->VerticalList.Super2.Bounds 
  ));
  CoreGroup_InvalidateViewState((CoreGroup)&_this->VertScrollbar );
}

/* 'C' function for method : 'Application::Disable.isDeviceExpanded()' */
XBool ApplicationDisable_isDeviceExpanded( ApplicationDisable _this, XInt32 i )
{
  if ( i >= 2304 )
    return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 
      544 )] & 1 ) == 1 );
  else
    if ( i >= 2048 )
      return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 
        544 )] & 1 ) == 1 );
    else
      if (( i < 513 ) && ( i > 0 ))
        return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] & 
          1 ) == 1 );

  return 0;
}

/* 'C' function for method : 'Application::Disable.SetExpanded()' */
void ApplicationDisable_SetExpanded( ApplicationDisable _this, XInt32 i, XBool val )
{
  if ( val )
  {
    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] | 1;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] | 1;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] | 1;
        }
  }
  else
  {
    XUInt32 b = 4294967294U;

    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] & b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] & b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] & b;
        }
  }
}

/* 'C' function for method : 'Application::Disable.isDeviceSelected()' */
XBool ApplicationDisable_isDeviceSelected( ApplicationDisable _this, XInt32 i )
{
  if ( i >= 2304 )
    return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 
      544 )] & 2 ) == 2 );
  else
    if ( i >= 2048 )
      return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 
        544 )] & 2 ) == 2 );
    else
      if (( i < 513 ) && ( i > 0 ))
        return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] & 
          2 ) == 2 );

  return 0;
}

/* 'C' function for method : 'Application::Disable.SetDeviceSelected()' */
void ApplicationDisable_SetDeviceSelected( ApplicationDisable _this, XInt32 i, XBool 
  val )
{
  if ( val )
  {
    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] | 2;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] | 2;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] | 2;
        }
  }
  else
  {
    XUInt32 b = 4294967293U;

    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] & b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] & b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] & b;
        }
  }
}

/* 'C' function for method : 'Application::Disable.isInputChanSelected()' */
XBool ApplicationDisable_isInputChanSelected( ApplicationDisable _this, XInt32 i, 
  XInt32 c )
{
  XUInt32 b = (XUInt32)( 1 << ( c + 16 ));

  if ( i >= 2304 )
    return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 
      544 )] & b ) == b );
  else
    if ( i >= 2048 )
      return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 
        544 )] & b ) == b );
    else
      if (( i < 513 ) && ( i > 0 ))
        return (XBool)(( _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] & 
          b ) == b );

  return 0;
}

/* 'C' function for method : 'Application::Disable.SetInputChanSelected()' */
void ApplicationDisable_SetInputChanSelected( ApplicationDisable _this, XInt32 i, 
  XInt32 c, XBool val )
{
  XUInt32 b = (XUInt32)( 1 << ( c + 16 ));

  if ( val )
  {
    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] | b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] | b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] | b;
        }
  }
  else
  {
    if ( i >= 2304 )
    {
      _this->deviceInputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceInputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] & ~b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceInputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceInputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] & ~b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceInputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceInputFlags[ 
          EwCheckIndex( i - 1, 544 )] & ~b;
        }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationDisable_onEvent( ApplicationDisable _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
}

/* 'C' function for method : 'Application::Disable.CountOnTest()' */
void ApplicationDisable_CountOnTest( ApplicationDisable _this, XObject sender )
{
  ApplicationApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( app != 0 )
  {
    EwPostSignal( EwNewSlot( &app->Disablements, ApplicationDisablements_Refresh 
      ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'Application::Disable.UpdateZone()' */
XInt32 ApplicationDisable_UpdateZone( ApplicationDisable _this, XInt32 zone, XBool 
  modify )
{
  XInt32 total = 0;
  XInt32 devs = 4;
  XInt32 dev;

  {
    Command cmd;
    cmd.int0 = zone;

    Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
    devs = cmd.int0;
  }

  for ( dev = 0; dev < devs; dev = dev + 1 )
  {
    XInt32 unity = dev + 1;
    {
      Command cmd;

      cmd.int0 = zone;
      cmd.int1 = dev;
      Command0( CMD_GET_DEV_IN_ZONE, &cmd );
      DeviceConfig* device = (DeviceConfig*) cmd.int0;

      if ( device != NULL )
      {
         unity = device->unit;
      }
    }

    if ( ApplicationDisable_UpdateUnit( _this, zone, unity, modify ))
      total = total + 1;
  }

  return total;
}

/* 'C' function for method : 'Application::Disable.UpdateUnit()' */
XBool ApplicationDisable_UpdateUnit( ApplicationDisable _this, XInt32 zone, XInt32 
  unity, XBool modify )
{
  XBool result = 0;
  XInt32 chan = 0;

  for ( chan = 0; chan < 16; chan = chan + 1 )
  {
    XInt32 inputstate = 0;
    XInt32 outputstate = 0;

    if (((( _this->zoneFlags[ EwCheckIndex( zone, 97 )] & 2 ) > 0 ) || ApplicationDisable_isDeviceSelected( 
        _this, unity )) || ApplicationDisable_isInputChanSelected( _this, unity, 
        chan ))
    {
      inputstate = 1;
      result = 1;
    }

    if (((( _this->zoneFlags[ EwCheckIndex( zone, 97 )] & 2 ) > 0 ) || ApplicationDisable_isDeviceSelected( 
        _this, unity )) || ApplicationDisable_isOutputChanSelected( _this, unity, 
        chan ))
    {
      outputstate = 1;
      result = 1;
    }

    if ( modify )
      {
        Command cmd;
        cmd.int0 = -1;
        cmd.int1 = unity;  
        cmd.int2 = chan;
        cmd.int3 = inputstate;

        Command0( CMD_SET_INPUT_DISABLED, &cmd );    

        cmd.int3 = outputstate;
        Command0( CMD_SET_OUTPUT_DISABLED, &cmd );
      }
  }

  return result;
}

/* 'C' function for method : 'Application::Disable.isOutputChanSelected()' */
XBool ApplicationDisable_isOutputChanSelected( ApplicationDisable _this, XInt32 
  i, XInt32 c )
{
  XUInt32 b = (XUInt32)( 1 << ( c + 16 ));

  if ( i >= 2304 )
    return (XBool)(( _this->deviceOutputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 
      544 )] & b ) == b );
  else
    if ( i >= 2048 )
      return (XBool)(( _this->deviceOutputFlags[ EwCheckIndex( 512 + ( i - 2048 
        ), 544 )] & b ) == b );
    else
      if (( i < 513 ) && ( i > 0 ))
        return (XBool)(( _this->deviceOutputFlags[ EwCheckIndex( i - 1, 544 )] & 
          b ) == b );

  return 0;
}

/* 'C' function for method : 'Application::Disable.SetOutputChanSelected()' */
void ApplicationDisable_SetOutputChanSelected( ApplicationDisable _this, XInt32 
  i, XInt32 c, XBool val )
{
  XUInt32 b = (XUInt32)( 1 << ( c + 16 ));

  if ( val )
  {
    if ( i >= 2304 )
    {
      _this->deviceOutputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceOutputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] | b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceOutputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceOutputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] | b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceOutputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceOutputFlags[ 
          EwCheckIndex( i - 1, 544 )] | b;
        }
  }
  else
  {
    if ( i >= 2304 )
    {
      _this->deviceOutputFlags[ EwCheckIndex( 528 + ( i - 2304 ), 544 )] = _this->deviceOutputFlags[ 
      EwCheckIndex( 528 + ( i - 2304 ), 544 )] & ~b;
    }
    else
      if ( i >= 2048 )
      {
        _this->deviceOutputFlags[ EwCheckIndex( 512 + ( i - 2048 ), 544 )] = _this->deviceOutputFlags[ 
        EwCheckIndex( 512 + ( i - 2048 ), 544 )] & ~b;
      }
      else
        if ( i < 513 )
        {
          _this->deviceOutputFlags[ EwCheckIndex( i - 1, 544 )] = _this->deviceOutputFlags[ 
          EwCheckIndex( i - 1, 544 )] & ~b;
        }
  }
}

/* Variants derived from the class : 'Application::Disable' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisable )
EW_END_OF_CLASS_VARIANTS( ApplicationDisable )

/* Virtual Method Table (VMT) for the class : 'Application::Disable' */
EW_DEFINE_CLASS( ApplicationDisable, CoreGroup, "Application::Disable" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationDisable_UpdateLayout,
  ApplicationDisable_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisable )

/* Initializer for the class 'Application::DisableChannelItem' */
void ApplicationDisableChannelItem__Init( ApplicationDisableChannelItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->ChannelName, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->InputCheckBox, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->OutputCheckBox, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDisableChannelItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036D );
  CoreRectView__OnSetBounds( &_this->ChannelName, _Const03B4 );
  ViewsText_OnSetAlignment( &_this->ChannelName, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChannelName, 0 );
  ViewsText_OnSetColor( &_this->ChannelName, _Const0018 );
  CoreRectView__OnSetBounds( &_this->InputCheckBox, _Const03B5 );
  WidgetSetToggleButton_OnSetLabel( &_this->InputCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->OutputCheckBox, _Const03B5 );
  WidgetSetToggleButton_OnSetLabel( &_this->OutputCheckBox, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelName ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputCheckBox ), 0 );
  ViewsText_OnSetFont( &_this->ChannelName, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  _this->InputCheckBox.OnSwitchOn = EwNewSlot( _this, ApplicationDisableChannelItem_ToggleInputChannel 
  );
  _this->InputCheckBox.OnSwitchOff = EwNewSlot( _this, ApplicationDisableChannelItem_ToggleInputChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->InputCheckBox, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
  _this->OutputCheckBox.OnSwitchOn = EwNewSlot( _this, ApplicationDisableChannelItem_ToggleOutputChannel 
  );
  _this->OutputCheckBox.OnSwitchOff = EwNewSlot( _this, ApplicationDisableChannelItem_ToggleOutputChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->OutputCheckBox, EwGetAutoObject( 
  &ApplicationSmallCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'Application::DisableChannelItem' */
void ApplicationDisableChannelItem__ReInit( ApplicationDisableChannelItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->ChannelName );
  WidgetSetToggleButton__ReInit( &_this->InputCheckBox );
  WidgetSetToggleButton__ReInit( &_this->OutputCheckBox );
}

/* Finalizer method for the class 'Application::DisableChannelItem' */
void ApplicationDisableChannelItem__Done( ApplicationDisableChannelItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDisableChannelItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->ChannelName );
  WidgetSetToggleButton__Done( &_this->InputCheckBox );
  WidgetSetToggleButton__Done( &_this->OutputCheckBox );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DisableChannelItem' */
void ApplicationDisableChannelItem__Mark( ApplicationDisableChannelItem _this )
{
  EwMarkObject( &_this->ChannelName );
  EwMarkObject( &_this->InputCheckBox );
  EwMarkObject( &_this->OutputCheckBox );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDisableChannelItem_UpdateViewState( ApplicationDisableChannelItem _this, 
  XSet aState )
{
  ApplicationDisable testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );

  if ( CoreGroup_OnGetVisible((CoreGroup)&_this->InputCheckBox ))
  {
    if ((( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 2 ) == 2 ) 
        || ApplicationDisable_isDeviceSelected( testpage, _this->UnitNum ))
    {
      WidgetSetToggleButton_OnSetChecked( &_this->InputCheckBox, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->InputCheckBox, 0 );
    }
    else
    {
      WidgetSetToggleButton_OnSetChecked( &_this->InputCheckBox, ApplicationDisable_isInputChanSelected( 
      testpage, _this->UnitNum, _this->ChanNum ));
    }
  }

  if ( CoreGroup_OnGetVisible((CoreGroup)&_this->OutputCheckBox ))
  {
    if ((( testpage->zoneFlags[ EwCheckIndex( _this->ZoneNum, 97 )] & 2 ) == 2 ) 
        || ApplicationDisable_isDeviceSelected( testpage, _this->UnitNum ))
    {
      WidgetSetToggleButton_OnSetChecked( &_this->OutputCheckBox, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputCheckBox, 0 );
    }
    else
    {
      WidgetSetToggleButton_OnSetChecked( &_this->OutputCheckBox, ApplicationDisable_isOutputChanSelected( 
      testpage, _this->UnitNum, _this->ChanNum ));
    }
  }
}

/* 'C' function for method : 'Application::DisableChannelItem.ToggleInputChannel()' */
void ApplicationDisableChannelItem_ToggleInputChannel( ApplicationDisableChannelItem _this, 
  XObject sender )
{
  ApplicationDisable testpage;
  XInt32 u;
  XInt32 c;
  XInt32 v;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );
  ApplicationDisable_SetInputChanSelected( testpage, _this->UnitNum, _this->ChanNum, 
  _this->InputCheckBox.Checked );
  u = _this->UnitNum;
  c = _this->ChanNum;
  v = 0;

  if ( _this->InputCheckBox.Checked )
    v = 1;

  {
    Command cmd;

    cmd.int0 = -1;
    cmd.int1 = u;
    cmd.int2 = c;
    cmd.int3 = v;

    Command0( CMD_SET_INPUT_DISABLED, &cmd );
  }
  EwPostSignal( EwNewSlot( testpage, ApplicationDisable_CountOnTest ), ((XObject)_this 
    ));
}

/* 'C' function for method : 'Application::DisableChannelItem.ToggleOutputChannel()' */
void ApplicationDisableChannelItem_ToggleOutputChannel( ApplicationDisableChannelItem _this, 
  XObject sender )
{
  ApplicationDisable testpage;
  XInt32 u;
  XInt32 c;
  XInt32 v;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, ApplicationDisable 
  );
  ApplicationDisable_SetOutputChanSelected( testpage, _this->UnitNum, _this->ChanNum, 
  _this->OutputCheckBox.Checked );
  u = _this->UnitNum;
  c = _this->ChanNum;
  v = 0;

  if ( _this->OutputCheckBox.Checked )
    v = 1;

  {
    Command cmd;

    cmd.int0 = -1;
    cmd.int1 = u;
    cmd.int2 = c;
    cmd.int3 = v;

    Command0( CMD_SET_OUTPUT_DISABLED, &cmd );
  }
  EwPostSignal( EwNewSlot( testpage, ApplicationDisable_CountOnTest ), ((XObject)_this 
    ));
}

/* Variants derived from the class : 'Application::DisableChannelItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDisableChannelItem )
EW_END_OF_CLASS_VARIANTS( ApplicationDisableChannelItem )

/* Virtual Method Table (VMT) for the class : 'Application::DisableChannelItem' */
EW_DEFINE_CLASS( ApplicationDisableChannelItem, CoreGroup, "Application::DisableChannelItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  ApplicationDisableChannelItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDisableChannelItem )

/* Bitmap resource : 'Application::SiteNet' */
EW_DEFINE_BITMAP_RES( ApplicationSiteNet )
  EW_BITMAP_FRAMES( ApplicationSiteNet, Default, EW_DRIVER_VARIANT_RGBA8888, 180, 60, 0 )
    EW_BITMAP_FRAME( 31, 37, 7, 22, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationSiteNet, Default )           /* ratio 12.08 % */
    0x1C080100, 0xC1A0B048, 0x6E110883, 0x4481C11B, 0x461C12B8, 0x71388C3D, 0x190CB954,
    0xC8DC2414, 0x813FE371, 0x848A2A02, 0x48E49128, 0xA253268A, 0xE592595C, 0x5F3096C9,
    0xADF924CA, 0x1D4106C4, 0x34B4D9C1, 0x40CDA5D3, 0xE804011F, 0xD1A8B448, 0x99C106A3,
    0x25E840D8, 0x981A1238, 0x6246FC10, 0x319E8E03, 0xC9F56655, 0xAC57AB75, 0x348AB560,
    0xD20AC1A1, 0x2DBF09B3, 0xEBB6138D, 0xE3684444, 0xD1071416, 0x34AFDB47, 0x70C07C55,
    0x0D8A5C74, 0xD06E1E25, 0x0704CE13, 0x4D891356, 0x4393A704, 0xFE1CC2B8, 0x986C9641,
    0x98C9E472, 0xACBE672B, 0x7406F3B9, 0x4072958B, 0x6095F826, 0x7448DD40, 0xA8741228,
    0xA908D7DC, 0xF96CDD5A, 0x22113B9F, 0xAA46C01E, 0xDA00E04A, 0x1E733BC0, 0x71383B5E,
    0x2785C5E3, 0xC373AE27, 0xD7138EB2, 0x74ADA721, 0xBBD6A783, 0xEC86C3B3, 0x3C06F82C,
    0x99622153, 0xF1FC9CAE, 0xABCFE8F2, 0xBA9ECE5F, 0xCFDA4361, 0xBE658F36, 0xF16B52FD,
    0xC1238A91, 0xE47D4C21, 0x81A0A0E4, 0xA6B50809, 0x888B06D6, 0xE97FCFC6, 0x831EB7D9,
    0x1D58360F, 0x8554E337, 0xC9717E43, 0xB7835576, 0x472186E5, 0x5BF001BD, 0x683A1083,
    0x35C88962, 0xD1471CF7, 0x389958A1, 0x94127D4B, 0x78D61F00, 0x81DE7710, 0x1C4D5037,
    0x8FE2478C, 0x22790611, 0xF7324390, 0xD9398D9E, 0xDE911F44, 0x46E487E1, 0x22E7F5FB,
    0x880E0171, 0x4C746350, 0x5A96E459, 0x3CD108A2, 0xC2906135, 0x88691B93, 0x91BA875C,
    0xAA385089, 0x0766C08D, 0x66F9B66E, 0x69CE709C, 0xD6789CA7, 0x7C9D2799, 0x9FE7A9DE,
    0x41C5D27C, 0xB4D9D423, 0x2A2D46E2, 0xCD219A27, 0x61A29329, 0x66A8CCA1, 0xF7A2387E,
    0x763D785D, 0x42A6E4C9, 0xA2D91A6A, 0x9F341E93, 0x19381BA6, 0xFA51412A, 0x557B29C7,
    0x8CD03812, 0x29E39982, 0x8ACEAB97, 0x581B5D1C, 0x66416A72, 0x9A5B8872, 0x693B06BB,
    0x51EC1A4D, 0x41D073A8, 0x27A29D24, 0x3745B070, 0x41B616BF, 0x2441D332, 0x22C2A48A,
    0x9779E955, 0xAD9E28EE, 0x29DB86B5, 0x3B66A091, 0x9594B8AA, 0xA9002D9A, 0x412ADACE,
    0x81E0A0E0, 0x6B8EE00C, 0x1EF7AD2F, 0xBDBACD2B, 0xBAE687AE, 0xAC48D700, 0x9A1A8AB1,
    0x32CB072C, 0x0416ECD7, 0x641B9B41, 0x124891A4, 0x69AF01B6, 0xEA967758, 0x1B53D028,
    0x3C2D214C, 0x14BC871F, 0xBC8B23C8, 0x9B27C901, 0x2ACAF28C, 0xCBF25CB7, 0x65A3E01B,
    0x9B9EC2B9, 0x06A667AF, 0x93BA2EDB, 0x60903BBD, 0x586CCC5E, 0xD29DD53F, 0xB9CD1F18,
    0x36D2F491, 0xD334DD29, 0x751D381B, 0x21E582D2, 0xBED2265A, 0xEE4DB333, 0x99E16BF0,
    0x762C56BF, 0x7B1F0376, 0x2A894268, 0x0E422CEC, 0x31D9003F, 0x4A506E8F, 0xFD8C0350,
    0xDA39C5F3, 0x1C8C21FD, 0xCD2E8534, 0x6F8CDAC1, 0xBAEF39BA, 0x0A54CDF3, 0x7C40AAE8,
    0x75B5B1AF, 0x8DE0037A, 0xEACC2F4D, 0x7ABE6CF5, 0x45E6F918, 0xB2305D95, 0xDD4B2A2C,
    0x73AD1DC2, 0x400D04C2, 0x1B790C66, 0xD8B74298, 0x2DD726DB, 0xEDF1BBE7, 0x00FFE237,
    0x2EE0ABBE, 0xE1ED9BAA, 0x38ACF783, 0xCE3986AA, 0x44804DB3, 0x000FCFFE, 0xB6796010,
    0x2FF7B2FD, 0x56C7D4ED, 0x1F66B142, 0xE06D709C, 0xE9946E90, 0x0C544FA8, 0x9EBCA7EB,
    0xCD99EC6D, 0xB65C7D5E, 0x7C01CD0B, 0x6A492AE6, 0xAF02A7E1, 0x178CCFA5, 0xD10735BF,
    0x07427384, 0x369C881A, 0x0A818048, 0x16042374, 0x1301C0B8, 0x220540B8, 0x7C0C81D0,
    0xE436E5E0, 0xEFADB0AF, 0x1CF10282, 0x3A160C73, 0x6D6E8D84, 0xE9C6B968, 0xC5110752,
    0xA8570834, 0x08F305F8, 0x79F42BB0, 0x81056346, 0x203C0656, 0xF0D43B1A, 0x61B18686,
    0x01C8710E, 0x8790F61D, 0x10220C3E, 0x89C39887, 0xF07DC2F4, 0x78FC99AB, 0xD9759F76,
    0x03F85D0F, 0xC4A45500, 0x43C56E44, 0x89B4575A, 0x0D230437, 0x1827562E, 0x2D00E16A,
    0xE68B3320, 0x8B8CC254, 0xD8A0A202, 0x540DBFE0, 0xE8231C21, 0xB6280AC0, 0x66D1E8B9,
    0x87FAC27A, 0x8060540A, 0x04407887, 0x0964047E, 0x42C818FE, 0x8490520E, 0x1321A43C,
    0x3A4448C9, 0x3C8F9172, 0xF5087364, 0x49ADB3B9, 0xE102CC74, 0x82A1D26B, 0x39A0300A,
    0x0716A8C3, 0xE6C2A154, 0x9C85C9A9, 0x4E54DF51, 0xD42001B0, 0xDC55782B, 0xC54EEE92,
    0x4EF970BB, 0x5DC44F58, 0x81D21F14, 0x97F2BC1E, 0x3A4CDCB1, 0x3A07F344, 0x9A6C104E,
    0x2838D613, 0xCDDC4C07, 0xFBDA454A, 0x43E2C320, 0x727E4E8D, 0xCF30C229, 0xCA67962A,
    0x5D32A11A, 0x2B655C30, 0x674B099B, 0xF148EB92, 0xCC92C0DB, 0xF19D4B79, 0x8CE65547,
    0x6561144C, 0xF3907118, 0x0D14B19E, 0x4766C428, 0x5831E0E5, 0xE540DCCB, 0x78D04982,
    0x88838EE6, 0xA6DAA4C2, 0xB873A1F9, 0xF80B02E0, 0xC15879A2, 0xE7C6164D, 0xE70AD29B,
    0xCAE9588E, 0xA3F39682, 0xA86599F5, 0x76B3796A, 0xEE9DEE1A, 0x4C8DDE1A, 0x882B81D0,
    0x34F81FA6, 0x47FF3DE8, 0x0E666383, 0x08633A58, 0x01B46009, 0xA7D4F061, 0x50A9FCD8,
    0x9ED44A83, 0x45A8D50E, 0x97522A05, 0xFEA6D4AA, 0xC8E031B4, 0x37B7075E, 0x1269EE99,
    0xE878D049, 0x8BF32002, 0x1982B9B8, 0x01419833, 0xA5D18376, 0x1C833468, 0x3D48298D,
    0x9149D22A, 0xAD265694, 0x19634A1F, 0xA3788445, 0x8C684759, 0x57CAD436, 0x2704D926,
    0x4DDAFBD0, 0x0D418831, 0x68A10F72, 0xBCF72853, 0xCC72AA17, 0xE98D2320, 0xF26C84AA,
    0x358AB00A, 0xE555652E, 0xD0272640, 0xB3C2E8EA, 0x67CA5DA0, 0x0DDA1B45, 0xA5B4D68C,
    0x536AAD3D, 0x0AD15ACB, 0x437F8B66, 0x39D512A7, 0xD5CE273F, 0x8A3575A0, 0x81F04A39,
    0xA5A61414, 0x24C0DB9E, 0xC809B304, 0xA8B5A2B0, 0x1A364885, 0xBEE55CB3, 0x852FA5F6,
    0xB9803F8C, 0xB4D85701, 0x2C24C982, 0x555B0CF5, 0x83D25EC4, 0xB0686499, 0x8991922E,
    0x364522F8, 0xC23FC581, 0x64A3563A, 0xE5DAACF6, 0xFB62FB48, 0x95BD75BE, 0x550D7141,
    0xDB97072E, 0x03C8B2F8, 0x5DC0881E, 0x89827035, 0x1B6842AC, 0xA575C608, 0x72FF4167,
    0x8195BB8E, 0x29A554E6, 0x80707136, 0x08980903, 0xCEABD02F, 0x3A11F26A, 0x8398CB78,
    0xDC5F328D, 0xF74D55B5, 0x277E54DD, 0xF512DFB5, 0xA1368A57, 0x31E27544, 0x852F1AE3,
    0x719E37C6, 0x3620AB1B, 0xC114D06E, 0xE62C0E0A, 0x11D38BB0, 0x9FC20DDB, 0x148DEEF2,
    0x8EC6555B, 0x1618C2CD, 0x33CC2ECD, 0x787E3D0B, 0x18C01CA5, 0x8DF860B7, 0x01007C0F,
    0x22B30C90, 0x3148DCC7, 0x91CC9997, 0x3722733C, 0xC2240940, 0x107E30CB, 0x2CE19C4D,
    0xF9D33AE7, 0x73981CCE, 0x913CE59E, 0x1D4A786B, 0x9E33DE76, 0x40E84CF5, 0xE5CE1A17,
    0x28064130, 0xBD55E2D0, 0xD8A931B8, 0x5760241F, 0xA1800E82, 0xC5E9104B, 0x60D8EF82,
    0x7AF91F23, 0xE820DB04, 0x85DE0A12, 0x08CBD76E, 0xC2722CF0, 0x1B0F0B48, 0x9DEF2080,
    0x903408CA, 0x94CABE83, 0x800DB2AD, 0x6B7AD7AD, 0xB7A4D521, 0x8BD7BE8D, 0x6789240F,
    0xD21A852E, 0x4C52DA32, 0x2F661D51, 0x7ED0D9BB, 0x075BB4B6, 0x4340C869, 0xC4EB8F41,
    0x69D9FDA6, 0xD413F34F, 0x55352552, 0xEA64EC23, 0x3C013941, 0x38A3C5CD, 0x92018B50,
    0xDEB100E0, 0xED6BACD1, 0x59BB5DD1, 0xB7AEBA20, 0xA5BD7BBE, 0xD820A75F, 0x6FF17A5B,
    0x7DEF60E5, 0x700375AF, 0xAC115378, 0x3B8605BA, 0x770F617C, 0x0E1BC456, 0xE61B8871,
    0xC32E1C0F, 0x715E37C4, 0xE29C7789, 0x4056771E, 0x90F1C06F, 0x25E4FC83, 0x53C7F947,
    0x4D85F2CE, 0x4EE11544, 0x7B17A96C, 0xBAA2C2D5, 0xE510B839, 0x2B226D86, 0xD69BCB11,
    0xBDF7E705, 0x5E741285, 0xFE369D1B, 0x5E7D7806, 0xB8A58E3C, 0x35D33440, 0xDDD7D178,
    0x00A4730F, 0xA8901F03, 0xD06EB7D4, 0x13806C9A, 0x41FAE753, 0x71F32D47, 0xF1DCAA7F,
    0x9A01F775, 0x71520B73, 0x1761DE79, 0x9668AAFA, 0xFDDBB96F, 0xFA4A44E8, 0x62FA3F6D,
    0xEC44494C, 0x06EC3F71, 0x04E6F12A, 0x5EE8BE07, 0x17E03B07, 0x2E4B6A2F, 0xAE4DE679,
    0xDED591B9, 0xEEF45B18, 0x3C6740ED, 0xF74A0DDE, 0x3EBE6BC3, 0x6E22A77A, 0x5711BA55,
    0xF331A5BF, 0x97E73CF0, 0xB8B78F62, 0x8910551A, 0x5F66E342, 0x6073DA3C, 0x7DC7B60D,
    0xFB7F77ED, 0xF79EFBDC, 0xF03DEFBA, 0xE2FC2F7F, 0xE30D7F07, 0x88106560, 0x3BE67C7F,
    0x37D0F87F, 0x5FA5F3FE, 0xC5906F3C, 0xCD111C2C, 0xF7DF7218, 0xDDE093C9, 0xF4C33982,
    0x79AF10D7, 0x182F454D, 0xA3FABF18, 0xAFF67CDF, 0x3FF0FA9F, 0x42AC857E, 0xBFBFF8BC,
    0xBF77F6FD, 0x7FCFF3FE, 0x1C3F1FFC, 0x6160102D, 0xE7FB6FF2, 0x65D38D7F, 0x7101001F,
    0x700D3E01, 0x75E04920, 0x961CD07A, 0xE18D6900, 0x0C81A20B, 0x86819817, 0xA81B8181,
    0x81E1A381, 0x1A1A381C, 0xB1366D56, 0x26C34709, 0x0804D01A, 0xD6DE80A8, 0x82F82E82,
    0x32831830, 0x58348338, 0x83783683, 0x3A839838, 0xD83C83B8, 0x83F83E83, 0x42841840,
    0x58448438, 0x84784684, 0x4A849848, 0xD84C84B8, 0x84F84E84, 0x52851850, 0x58548538,
    0x85785685, 0x5A859858, 0xD85C85B8, 0x85F85E85, 0x62861860, 0xD2A78638, 0x0197E51A,
    0xD8013255, 0xD86C8641, 0x86F86E86, 0x285153D4, 0xB18D0688, 0x33214B3A, 0x380F7296,
    0x40881102, 0x01D6B30E, 0x1B3DD1F9, 0x52130540, 0x40D6C788, 0x56889870, 0x70214078,
    0x3FD18D01, 0x8A066136, 0x03FE8578, 0x2D41D540, 0xFE1864F9, 0xB01914A0, 0x5961BB03,
    0xDB1D5005, 0xE13F1C00, 0x0230E086, 0x6C032019, 0xF01A10F7, 0x84E89305, 0x55066182,
    0x18AF7175, 0x1A251585, 0x1C305370, 0xD1A70EC0, 0x0DE04B1C, 0x7304710C, 0x32075C68,
    0x11088109, 0x4B28A46C, 0x88080DC1, 0x47086E00, 0x10198472, 0xC8B50B61, 0x0AD19084,
    0x303D733D, 0x87561040, 0x08C2D275, 0xD58DB2C4, 0x41A283E8, 0x0E91C606, 0x9C362273,
    0x02B149E4, 0x0461AA1C, 0x220E785B, 0x80160170, 0x05431C25, 0xA11AD104, 0x36E77AC1,
    0x8FA8428E, 0xCD0EC110, 0x64A50ED1, 0x7E110251, 0xFE43D8B3, 0x01A283D8, 0x37C1B40D,
    0x2739106A, 0x11101E58, 0x17E85D22, 0x6C750180, 0xD01B4977, 0x39319309, 0x0B03E01C,
    0x56038409, 0x24A61160, 0xA8136257, 0xC5341980, 0x0154048D, 0x188CD70A, 0x100E6EE4,
    0x4C405250, 0x102092D2, 0xB21A06D1, 0x65E26586, 0x48461010, 0xB26C9100, 0x93908301,
    0xBF07D1A2, 0x050E04F5, 0x94D14751, 0x5280E00B, 0x504914B9, 0x11D49E4D, 0x5368B689,
    0xC04901B9, 0x1B104837, 0xC25D1940, 0xC01D7511, 0x0537F303, 0x5A2CD0E2, 0x905123C0,
    0x23601495, 0x97322869, 0x50F21101, 0x14640189, 0xDD12007F, 0xD0361100, 0x01B8C918,
    0xEF67C08A, 0x603F3CB8, 0x2333D590, 0x2D01C969, 0x32F20E10, 0x6F88F903, 0xA20E21A2,
    0x75EB0F51, 0x69533F59, 0x3922F697, 0xF83F9234, 0x9090565B, 0x8C78F979, 0xF0F714B1,
    0x8AD9977A, 0xEB5F03E9, 0x85668FA2, 0x0C825345, 0x19617988, 0xC73B1106, 0x6980FB01,
    0xC980E8BB, 0x704401A2, 0x9320F92C, 0x1A02722C, 0xB8A40680, 0x1080DE01, 0xEB04A501,
    0xB2117516, 0x56687A01, 0x9001C8C7, 0xE3271EE0, 0x8A010993, 0x7345D1CD, 0x40DA1107,
    0x03101A15, 0x289593D4, 0x01CD5D20, 0x01B9290B, 0xA861192B, 0xD1040328, 0x02E01B74,
    0xA401B8D2, 0x68E499C0, 0x99A94A18, 0x0405001C, 0x05D180C1, 0x1080C611, 0x9309837C,
    0xF7CA0DF1, 0x0FF22298, 0xB437563C, 0x3A021864, 0x65A6A559, 0x9519A457, 0x99ED07B6,
    0x0EA24056, 0x8D18955C, 0xB8CA20B1, 0x9560EF01, 0x1C92900C, 0x91EE07C0, 0x5C414765,
    0x570A79D4, 0xC8A49F62, 0x1CD0F201, 0x8718D0A8, 0x34631900, 0x2CD74834, 0x27219062,
    0x50200170, 0x8CA7AD1D, 0x2B0FE01C, 0x87751468, 0x4C34558E, 0xBB0192F2, 0xD9951AD2,
    0x8661025E, 0xEB18D901, 0x518D4740, 0x01B8B307, 0x6010405D, 0x68A10005, 0x6D60FA13,
    0x9090C9F4, 0x59EB5552, 0x9F10357F, 0xD82A26DA, 0xEA437504, 0x05201B2D, 0xE50F4113,
    0xC5BF2368, 0x28575003, 0xA608701C, 0xC42BA4F9, 0x76A05037, 0x4D16B6B0, 0xA1034C62,
    0x04301A14, 0x0089D28F, 0x42C75E9A, 0x14B5EE78, 0x1090F0D5, 0xB9E70741, 0x6703DC4E,
    0x7901B2C9, 0x10DAA780, 0x0A11A217, 0x620257A0, 0x8A13A272, 0x2AD04D82, 0xA26F30DF,
    0x25E80B21, 0x0266289D, 0xB102101E, 0xCA2BA9F2, 0x7500BB01, 0xB0405403, 0x904D1506,
    0x10544990, 0x130DF182, 0x1A840F31, 0x1D5832A6, 0x69195653, 0x101C7B08, 0x136A0305,
    0x1C31607A, 0xC2CA4C30, 0x6E4A9B91, 0x12236883, 0x10D51DE8, 0x1DB2349A, 0x9F9D46CB,
    0xA58F9580, 0x1CA6D800, 0x392020DF, 0x401BA2B0, 0x6968A40E, 0x13A2011D, 0x3AE89B71,
    0xA064AD02, 0xE71366BA, 0xF1867480, 0x0DC11C95, 0x290168F3, 0x4139A492, 0x02A01E02,
    0x9FA1C190, 0x01D48CB2, 0x23515215, 0xD31368B7, 0x0A53A780, 0x6E723612, 0xCC1366D8,
    0xD0979E70, 0x03A01A64, 0x2B4716B0, 0x201C8D20, 0x0C491C0A, 0xC6940A6C, 0x0310837A,
    0xA8151575, 0x9806901A, 0xA0681501, 0x1CD5ECA5, 0x228970FA, 0xC195B1DA, 0xADA03759,
    0x9F739136, 0xA2940B73, 0x9C38EE45, 0x2598D1D0, 0xA0E20FDA, 0x01201C02, 0xAB01BACC,
    0xD02868A6, 0x03F25111, 0x6D0FBA2D, 0x81C8B513, 0x96F68A0D, 0x180CC11C, 0xD1C800A1,
    0x3687A40D, 0x49A35186, 0x6A5F01B6, 0x1C4AD713, 0x64B359DE, 0x320D67C2, 0xAAF01C7F,
    0xD6359AED, 0xDACFA9A3, 0x8F2104AC, 0x449F18F4, 0x11102A2B, 0x3FF19A69, 0x34B2B977,
    0xB4588A28, 0x25901CA8, 0x5701A19D, 0xF4239FB0, 0x0BC23C52, 0xE5193A95, 0xA4330220,
    0x358186AD, 0xCD0FCA40, 0xD9D60651, 0x2020D611, 0x30190013, 0x698D1E55, 0x06A186B5,
    0xC80DC9D4, 0xA31E1559, 0x42BAC48B, 0x1A16A11D, 0x52967040, 0xA70B7B0D, 0x479C6914,
    0x3433B9B1, 0x497B881D, 0x11A774BD, 0x7AA6B9F6, 0x26A08D2C, 0x0305B989, 0x02647E6B,
    0xAF30CF19, 0xFA31B9C0, 0x923C1953, 0x3B9AD205, 0xB50C914B, 0x3ACF0A0A, 0xB8BB8AAA,
    0x4B8A314B, 0x0B8E0EF1, 0xB9219CB9, 0xE917B7E7, 0x36585D63, 0x8881930B, 0xB114A235,
    0x0AFB1CDA, 0x8E10C724, 0x451AA1D0, 0xE0F81DE0, 0x0077DF0F, 0x2D231139, 0x51B10A3A,
    0xA2D08A15, 0x1CA8F69A, 0x1A406070, 0xA33A220A, 0x270A5A1D, 0xD04E3FFA, 0x2050ECA2,
    0x261826F8, 0x70FC1C34, 0x01F0270E, 0x1BA04020, 0xA1DE0410, 0xBD1264C1, 0x788DA6AB,
    0xB52F0C1B, 0x997A218E, 0x278B201B, 0xF06D01C9, 0x107B3ABD, 0x01193A01, 0x8BE702F5,
    0xBEA01BBE, 0x99BEDA1E, 0xE103BF01, 0xA7768BB5, 0xF6AD28D3, 0xFBF8195B, 0x89642224,
    0xF4110C0A, 0x401C41BA, 0x01E98C0F, 0x79A6A98E, 0x70C81C66, 0x1DEA90A2, 0xE75DF070,
    0x001C9145, 0xB465EE17, 0xD69101CA, 0x644701C3, 0x624C6929, 0x46494136, 0xB9E75D52,
    0x12474804, 0xC7C60B21, 0xD6280CA2, 0x400BC634, 0xC71864A7, 0xF4D6C350, 0xA577B766,
    0xE1C3E05C, 0x209AAD2B, 0xC45394C4, 0x6C87B833, 0xB9073E6B, 0xA1270914, 0x7B8F98AD,
    0xF20A0064, 0xBE4AEC53, 0xE0150BDC, 0x28DA3D09, 0x39FAEE2D, 0x96B9909E, 0x611C8C62,
    0xA5F182C3, 0xEB2551CA, 0x7C212AFA, 0xB7EC7F63, 0x14C4E11C, 0xD1C49620, 0x0351860D,
    0xEE1CDAF8, 0x20E41B40, 0x11CB209C, 0xC14F5866, 0x0A4FC4C1, 0x6C81D512, 0xFC01CBCB,
    0x00220E30, 0x7578DC18, 0xECA7801F, 0x71F1BA50, 0x0F2A7835, 0xDDB78905, 0x60F81D50,
    0xBBC01D31, 0x5823C191, 0xD2681040, 0x0BF01C5D, 0x91B86A22, 0x2C98B761, 0xC342D283,
    0xCC80C89A, 0xF64923EA, 0x6F9107B8, 0xE01CD327, 0x7186A000, 0x75E0FF3B, 0x3836204A,
    0x5B85C719, 0x6140E3AB, 0x2B7C911C, 0xA5E4B59C, 0xB06A8511, 0x7E20DB08, 0x988001A8,
    0xA78954D1, 0x4E5590FB, 0x3B661039, 0xC25A2520, 0xDFB5655A, 0xB0DF39F2, 0x01A630A7,
    0x1C246999, 0x02374FB0, 0xBCA01160, 0xFD01CB0B, 0x74DED020, 0x0B9A1DC6, 0x1CCD126A,
    0xE2D20F50, 0x01AB84BB, 0x878B308E, 0xB48A6B0A, 0xAEC0A9C3, 0xC27500B9, 0x6831CFDC,
    0xB0019360, 0xBD997CDE, 0xF2821934, 0x6D7C62BC, 0x52BD9C5A, 0x225877B4, 0xA2DB85D1,
    0x88907C6E, 0x51B5D40B, 0x1DF62092, 0x2B0CD9C5, 0x5D1CA87A, 0x01CC09AE, 0x8E495718,
    0xE1C6059B, 0xB881D00C, 0xF3CBFCAE, 0xF76A103C, 0x0FD9095A, 0x1C0280DC, 0xB10802C0,
    0xA368A1A5, 0x635BCAE8, 0x4CCD1F12, 0xA03D7460, 0x0B26AC9E, 0x9D6410D1, 0x5D53165E,
    0x0D47F8D2, 0xB4BE6953, 0xB84693C3, 0x106C801B, 0xCD360FA1, 0x2D26DED5, 0x44CA0C0F,
    0xB927B5C0, 0x9E70B801, 0x430FFCFA, 0xE6B3B5CC, 0x015AB904, 0xA221A1F9, 0x3C5F0851,
    0x9EFCC603, 0x1D9D318D, 0xA0E20F6A, 0x18615353, 0xF01DE050, 0x622CB2F0, 0xA408D818,
    0xBD3D6099, 0xE1102B75, 0x422B7608, 0xE163F3E1, 0xA01CA92B, 0x75E1072B, 0xAE29666D,
    0xA1AD6F83, 0x9DC4AED1, 0x06DEE2C7, 0xC16C2071, 0x144916C6, 0xBC9149AE, 0xC14B8819,
    0x867C0408, 0x828CD26A, 0xE89C03E2, 0x01BA6A89, 0xF91820DC, 0x62F08A00, 0xCF606513,
    0x44CBCC3D, 0x62139747, 0x59C833DB, 0x773E9067, 0xA142CD5C, 0x0E7182CC, 0x7323C9D6,
    0xB0679F10, 0x45C42BA4, 0xB718D225, 0xB63C4AC9, 0xA2D94652, 0x90CD0B98, 0x1D171869,
    0xD77A38C7, 0xDA4E40AE, 0xE3E35DF7, 0x25F975A0, 0x40182D2F, 0xFD8CB161, 0x90300E7D,
    0x2B8D0D8F, 0xD01BAA40, 0xB311E773, 0x8DB761BB, 0x1296C5E1, 0x96E3B4CB, 0xC401C9FD,
    0x513C9E70, 0x041D1A19, 0xBD8DECDF, 0x0E1EB83D, 0x03628283, 0xEC231D64, 0x2191AC9A,
    0x9ED01E43, 0xE95C474E, 0xE2BB6B4A, 0x01CA04AD, 0xC92D2062, 0x6CB7A3E0, 0xC00915E2,
    0x4D14B7D9, 0x161A9B41, 0x4D6AF17E, 0xB4E8DAC8, 0x738BD2D9, 0x46D5EC9D, 0xCD2D206F,
    0xE7AD2D20, 0xCBEE85A5, 0xC32D2C8A, 0xF656ABC5, 0xAEADEF6A, 0x10A021A2, 0x79A467E1,
    0x3322D2CB, 0xD20D8110, 0x9D760922, 0xE92BB47D, 0x1B73B01C, 0xA2190890, 0x73B9B512,
    0x4D168CA1, 0x2C6CE8DA, 0x3D4E760F, 0x8B1D5DC7, 0xB9E7C39E, 0xB5BB090C, 0xBEA7E103,
    0xD831E6DA, 0x57AEAF8C, 0x739F7AB5, 0x5623EC19, 0xAC56AE51, 0xA3EDE83C, 0xAADE6AEC,
    0x6AE8A026, 0xDC832E14, 0x2B4E250D, 0x2D546401, 0xE1830EDC, 0x3E32D3E0, 0xAB50D111,
    0x1D199086, 0xBED404F0, 0x0C3136B8, 0x1B282750, 0xC5821530, 0x18699201, 0xFDEFD063,
    0x00A52D2E, 0x1158C54A, 0xB2212E50, 0x2D20B8B5, 0x87C28E18, 0x42821AD2, 0xEF0A7E8A,
    0xE713C8CF, 0x1AF0901C, 0xDEE0001E, 0x9EEB8AF1, 0x2AD9F042, 0x2E430F06, 0xA0A22184,
    0xF396E102, 0x4F2688FA, 0x909C4383, 0x3AF35098, 0x0C06103F, 0x113B347E, 0x8EC70796,
    0x3D591CD1, 0x8F4B00A9, 0xFB7D684F, 0x3155BD8E, 0x3EBF3B08, 0x53BDDB3E, 0xEEE50614,
    0xCE42622D, 0x89F59F4F, 0xC016F478, 0x3B4F5AF5, 0x35812AA6, 0x807B01D1, 0xF67F5FE8,
    0x74F69F68, 0x705752CA, 0x800EA21A, 0x72F6A601, 0x7F74F73F, 0x26D8FA16, 0x7AF75A6D,
    0x1834F7BF, 0x00000010, 0x00000000

  EW_BITMAPS_TABLE( ApplicationSiteNet )
    EW_BITMAP( ApplicationSiteNet, Default )
EW_END_OF_BITMAP_RES( ApplicationSiteNet )

/* Table with links to derived variants of the bitmap resource : 'Application::SiteNet' */
EW_RES_WITHOUT_VARIANTS( ApplicationSiteNet )

/* Initializer for the class 'Application::MeshTree' */
void ApplicationMeshTree__Init( ApplicationMeshTree _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  GraphicsPath__Init( &_this->Path, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->BranchPath, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteLoadedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshStatusChangeEventHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->MeshControl, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton4, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  ApplicationProgressArrow__Init( &_this->ProgressArrow, &_this->_XObject, 0 );
  ApplicationRoundBox__Init( &_this->RoundBox, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ApplicationDeviceInfo__Init( &_this->DeviceInfo, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMeshTree );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03B6 );
  _this->Origin = _Const03B7;
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const03B8 );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 200 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 1000 );
  _this->Spacing = _Const03B9;
  _this->Radius = 17;
  CoreRectView__OnSetBounds( &_this->BranchPath, _Const03BA );
  ViewsStrokePath_OnSetColor( &_this->BranchPath, _Const0018 );
  ViewsStrokePath_OnSetWidth( &_this->BranchPath, 3.000000f );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const03BB );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 15 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( ApplicationMeshUnitItem 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const03BC );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const03BD 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const03BE );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const03BF 
  ));
  CoreRectView__OnSetBounds( &_this->MeshControl, _Const03C0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->MeshControl, EwLoadString( &_Const03C1 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const03C2 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const03C3 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton4, _Const03C4 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton4, EwLoadString( &_Const03C5 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const03C6 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const03C7 
  ));
  CoreRectView__OnSetBounds( &_this->ProgressArrow, _Const03C8 );
  CoreRectView__OnSetBounds( &_this->RoundBox, _Const03C9 );
  _this->RoundBox.Radius1 = 8;
  _this->RoundBox.LineColour = _Const03CA;
  _this->RoundBox.FillColour = _Const03CB;
  EwRetainString( &_this->RoundBox.Label, EwLoadString( &_Const03CC ));
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const03BB );
  CoreRectView__OnSetBounds( &_this->DeviceInfo, _Const03CD );
  CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceInfo, 0 );
  _this->DeviceInfo.Super1.Radius1 = 6;
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const03CE );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const03CF );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const03D0 );
  CoreSimpleTouchHandler_OnSetRetargetDelay( &_this->SimpleTouchHandler, 500 );
  _this->SimpleTouchHandler.RetargetCondition = CoreRetargetReasonLongPress | CoreRetargetReasonWipeDown 
  | CoreRetargetReasonWipeLeft | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BranchPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshControl ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ProgressArrow ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RoundBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DeviceInfo ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, ApplicationMeshTree_Scroll 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  ViewsStrokePath_OnSetPath( &_this->BranchPath, &_this->Path );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, ApplicationMeshTree_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SiteLoadedEventHandler.OnEvent = EwNewSlot( _this, ApplicationMeshTree_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteLoadedEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->SiteLoadedEvent );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, ApplicationMeshTree_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->MeshListChangeEvent );
  _this->MeshStatusChangeEventHandler.OnEvent = EwNewSlot( _this, ApplicationMeshTree_onEvent2 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshStatusChangeEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->MeshStatusChangeEvent );
  _this->PushButton.OnRelease = EwNewSlot( _this, ApplicationMeshTree_ImportSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, ApplicationMeshTree_ExportSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->MeshControl.OnRelease = EwNewSlot( _this, ApplicationMeshTree_StartSync 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->MeshControl, EwGetAutoObject( &ApplicationSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNewSlot( _this, ApplicationMeshTree_StartFormation 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &ApplicationSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton4.OnRelease = EwNewSlot( _this, ApplicationMeshTree_StartActivation 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton4, EwGetAutoObject( &ApplicationSmallPushButton, 
  WidgetSetPushButtonConfig ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &ApplicationNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, ApplicationMeshTree_TScrollSlot 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, ApplicationMeshTree_InfoTap 
  );
}

/* Re-Initializer for the class 'Application::MeshTree' */
void ApplicationMeshTree__ReInit( ApplicationMeshTree _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  GraphicsPath__ReInit( &_this->Path );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  ViewsStrokePath__ReInit( &_this->BranchPath );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSystemEventHandler__ReInit( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshStatusChangeEventHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->MeshControl );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  WidgetSetPushButton__ReInit( &_this->PushButton4 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  ApplicationProgressArrow__ReInit( &_this->ProgressArrow );
  ApplicationRoundBox__ReInit( &_this->RoundBox );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ApplicationDeviceInfo__ReInit( &_this->DeviceInfo );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'Application::MeshTree' */
void ApplicationMeshTree__Done( ApplicationMeshTree _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMeshTree );

  /* Finalize all embedded objects */
  GraphicsPath__Done( &_this->Path );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  ViewsStrokePath__Done( &_this->BranchPath );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSystemEventHandler__Done( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshStatusChangeEventHandler );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->MeshControl );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  WidgetSetPushButton__Done( &_this->PushButton4 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  ApplicationProgressArrow__Done( &_this->ProgressArrow );
  ApplicationRoundBox__Done( &_this->RoundBox );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ApplicationDeviceInfo__Done( &_this->DeviceInfo );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MeshTree' */
void ApplicationMeshTree__Mark( ApplicationMeshTree _this )
{
  EwMarkObject( &_this->Path );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->BranchPath );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SiteLoadedEventHandler );
  EwMarkObject( &_this->MeshListChangeEventHandler );
  EwMarkObject( &_this->MeshStatusChangeEventHandler );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->MeshControl );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->PushButton4 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->ProgressArrow );
  EwMarkObject( &_this->RoundBox );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->DeviceInfo );
  EwMarkObject( &_this->SimpleTouchHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMeshTree_UpdateLayout( ApplicationMeshTree _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMeshTree_UpdateViewState( ApplicationMeshTree _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  GraphicsPath_SetMaxNoOfSubPaths( &_this->Path, 512 );
  _this->SubIndex = 0;
  _this->Row = 0;
  ApplicationMeshTree_DrawBranch( _this, 0, 0 );
}

/* 'C' function for method : 'Application::MeshTree.Scroll()' */
void ApplicationMeshTree_Scroll( ApplicationMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->Origin.Y = ( 25 - WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar 
  ));
  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VerticalScrollbar ));
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void ApplicationMeshTree_OnLoadItem( ApplicationMeshTree _this, XObject sender )
{
  XInt32 itemNo;
  ApplicationMeshUnitItem device;
  XInt32 combinames;
  XInt16 zone;
  XInt16 younit;
  XString radiocombo;
  XString defcombo;
  XInt16 status;
  XInt32 row;
  XInt16 snr;
  XInt32 selected;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  device = EwCastObject( _this->VerticalList.View, ApplicationMeshUnitItem );

  if ( device == 0 )
    return;

  if ( itemNo == 0 )
  {
    CoreGroup_OnSetVisible((CoreGroup)&device->MeshUnit, 0 );
    CoreGroup_OnSetVisible((CoreGroup)&device->MeshNCU, 1 );
    return;
  }

  combinames = 0;
  device->MeshUnit.Selected = (XBool)( itemNo == _this->VerticalList.SelectedItem 
  );
  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );  

    combinames = cmd.int3;
  }
  _this->Row = 1;

  if ( ApplicationMeshTree_GetChildren( _this, device, 0, itemNo, 0, combinames 
      ))
    return;

  zone = -1;
  younit = 0;
  radiocombo = 0;
  defcombo = 0;
  status = -1;
  row = _this->Row;
  snr = -32768;
  selected = _this->VerticalList.SelectedItem;
  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );  

    if ( (void*)cmd.int0 != NULL )
    {
      DeviceConfig* dev      = (DeviceConfig*)   cmd.int0;  
      RadioUnit* rad      = (RadioUnit*)   cmd.int1;
      const char** combis = (const char**) cmd.int3;

      int numConfig = cmd.short4;
      int numFound =  cmd.short5;

      DeviceConfig* d;
      RadioUnit* r;

      // Devices not found

      for( d = dev; d < dev + numConfig; d++ )
      {
          if ( !FindRadioDevice( rad, numFound, d->zone, d->unit ) )
          {
              if ( row == itemNo )
              {               
                  zone = d->zone;
                  younit = d->unit;

                  status = 0;  // unfound 'x'

                  if ( d->type < MAX_COMBINATION_TYPE )
                  {
                     defcombo  = EwNewStringAnsi( combis[ d->type ] );
                  }
                  else
                  {
                    defcombo =  EwNewStringAnsi( "------" );
                  }

                  goto done;
              }
              else row++;
          }
      }

      // Devices not in config

      if ( rad != NULL )
      {
        for( r = rad; r < rad + numFound; r++ )
        {
            if ( !FindConfigDevice( dev, numConfig, r->zone, r->unit ) )
            {
                if ( r->primary == -1 )
                {
                    if ( row == itemNo )
                    {
                        zone = r->zone;
                        younit = r->unit;
                        snr = r->snrprimary;

                        if ( r->combination < MAX_COMBINATION_TYPE )
                        {
                           radiocombo  = EwNewStringAnsi( combis[ r->combination ] );
                        }
                        else
                        {
                          radiocombo =  EwNewStringAnsi( "------" );
                        }

                        status = 2;  // additional +

                        snr = r->snrprimary;

                        goto done;
                    }
                    else row++;
                }

            }
        }         
     }                             

      // Devices in both
      if ( rad != NULL )
      {
        for( d = dev; d < dev + numConfig; d++ )
        {
            if ( r = FindRadioDevice( rad, numFound, d->zone, d->unit ) )
            {
                if ( r->primary == -1 )
                {
                  if ( row == itemNo )
                  {               
                      zone = d->zone;
                      younit = d->unit;

                      if ( r->combination < MAX_COMBINATION_TYPE )
                      {
                         radiocombo  = EwNewStringAnsi( combis[ r->combination ] );
                      }
                      else
                      {
                        radiocombo =  EwNewStringAnsi( "------" );
                      }
                      if ( d->type < MAX_COMBINATION_TYPE )
                      {
                         defcombo  = EwNewStringAnsi( combis[ d->type ] );
                      }
                      else
                      {
                        defcombo =  EwNewStringAnsi( "------" );
                      }

                      snr = r->primary;

                      if ( d->type == r->combination )
                      {
                        status = 1;  // found
                      }
                      else
                      {
                        status = 3; // different ?   
                      }    

                      goto done;
                  }
                  else row++;
                }
            }
        }
     }
        //time   = TimeStr( );
    }
    done:    ;
  }
  ViewsText_OnSetString( &device->MeshUnit.UnitNum, EwNewStringInt( younit, 0, 10 
  ));
  ViewsText_OnSetString( &device->MeshUnit.ZoneNum, EwNewStringInt( zone, 0, 10 
  ));
  device->MeshUnit.SNR = (XInt8)snr;
  EwRetainString( &device->MeshUnit.DefinedComb, defcombo );
  EwRetainString( &device->MeshUnit.RadioComb, radiocombo );
  ApplicationMeshUnit_OnSetStatus( &device->MeshUnit, status );
  CoreGroup_OnSetVisible((CoreGroup)&device->MeshNCU, 0 );
  CoreGroup_OnSetVisible((CoreGroup)&device->MeshUnit, 1 );
  CoreGroup_InvalidateViewState((CoreGroup)&device->MeshUnit );
}

/* 'C' function for method : 'Application::MeshTree.DrawConnector()' */
void ApplicationMeshTree_DrawConnector( ApplicationMeshTree _this, XInt32 x, XInt32 
  y, XInt32 y2 )
{
  GraphicsPath_InitSubPath( &_this->Path, _this->SubIndex, 16 );
  GraphicsPath_Begin( &_this->Path, _this->SubIndex, (XFloat)( _this->Origin.X + 
  x ), (XFloat)(( _this->Origin.Y + y ) + 1 ));
  GraphicsPath_AddArc( &_this->Path, _this->SubIndex, (XFloat)(( _this->Origin.X 
  + x ) + _this->Radius ), (XFloat)(( _this->Origin.Y + y2 ) + 1 ), (XFloat)_this->Radius, 
  (XFloat)_this->Radius, 180.000000f, 90.000000f, 15 );
  _this->SubIndex = _this->SubIndex + 1;
}

/* 'C' function for method : 'Application::MeshTree.DrawBranch()' */
void ApplicationMeshTree_DrawBranch( ApplicationMeshTree _this, XInt32 indent, XInt32 
  parent )
{
  XInt32 child = ApplicationMeshTree_FindNextChild( _this, 0, parent );
  XInt32 startrow = _this->Row;

  indent = indent + 1;

  while ( child != 0 )
  {
    XInt32 unitnum;
    ApplicationMeshTree_DrawConnector( _this, indent * _this->Spacing.X, startrow 
    * _this->Spacing.Y, _this->Row * _this->Spacing.Y );
    _this->Row = _this->Row + 1;
    unitnum = child;
    {
      RadioUnit* ru = (RadioUnit*) child;

      unitnum = ru->unit;
    }
    ApplicationMeshTree_DrawBranch( _this, indent, unitnum );
    child = ApplicationMeshTree_FindNextChild( _this, child, parent );
  }
}

/* 'C' function for method : 'Application::MeshTree.FindNextChild()' */
XInt32 ApplicationMeshTree_FindNextChild( ApplicationMeshTree _this, XInt32 start, 
  XInt32 parent )
{
  XInt32 child;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  child = 0;
  {
    Command cmd;

    cmd.int0 = start;
    cmd.int1 = parent;

    Command0( CMD_GET_RADIO_UNIT_CHILD, &cmd );

    child = cmd.int0;
  }
  return child;
}

/* 'C' function for method : 'Application::MeshTree.GetChildren()' */
XBool ApplicationMeshTree_GetChildren( ApplicationMeshTree _this, ApplicationMeshUnitItem 
  device, XInt32 parent, XInt32 itemNo, XInt32 indent, XInt32 combinames )
{
  XInt32 child = ApplicationMeshTree_FindNextChild( _this, 0, parent );

  XInt32 zonenum = 0;
  XInt32 Status = 1;
  indent = indent + 1;

  while ( child != 0 )
  {
    XInt32 unitnum = child;
    XInt32 snr = 22;
    XString radiocomb = EwLoadString( &_Const03D1 );
    XString defcomb = EwLoadString( &_Const03D1 );
    {
      RadioUnit* ru = (RadioUnit*) child;

      unitnum = ru->unit;
    }

    if ( _this->Row == itemNo )
    {
      {
        RadioUnit* ru = (RadioUnit*) child;
        zonenum = ru->zone;

        Command cmd;
        cmd.int0 = unitnum;

        Command0( CMD_GET_DEVICE, &cmd );

        if ( cmd.int0 != 0 )
        {
           DeviceConfig* dc = (DeviceConfig*) cmd.int0;
           const char** combis = (const char**) combinames;

           if ( dc->type == ru->combination )
           {
              Status = 1;   // ok
           }
           else
           {
              Status = 3;    // different ?
           }
           if ( dc->type < MAX_COMBINATION_TYPE )
             defcomb   = EwNewStringAnsi( combis[ dc->type ] );     
           if ( ru->combination <  MAX_COMBINATION_TYPE ) 
             radiocomb = EwNewStringAnsi( combis[ ru->combination ] );
        }
        else
        { 
           Status = 2;    // additional  +
        }
      }

      if ( device->MeshUnit.Selected )
      {
        {
          Command cmd;
          cmd.int0 = (int)child;

          Command0( CMD_SET_CURRENT_DEVICE, &cmd );
        }
        ApplicationDeviceInfo_OnSetdevice( &_this->DeviceInfo, child );
      }

      ViewsText_OnSetString( &device->MeshUnit.UnitNum, EwNewStringInt( unitnum, 
      0, 10 ));
      ViewsText_OnSetString( &device->MeshUnit.ZoneNum, EwNewStringInt( zonenum, 
      0, 10 ));
      device->MeshUnit.SNR = (XInt8)snr;
      EwRetainString( &device->MeshUnit.DefinedComb, defcomb );
      EwRetainString( &device->MeshUnit.RadioComb, radiocomb );
      ApplicationMeshUnit_OnSetStatus( &device->MeshUnit, Status );
      CoreGroup_OnSetVisible((CoreGroup)&device->MeshNCU, 0 );
      CoreGroup_OnSetVisible((CoreGroup)&device->MeshUnit, 1 );
      CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX1( device->MeshUnit.Super2.Bounds, 
      ( indent * _this->Spacing.X ) - 4 ));
      CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX2( device->MeshUnit.Super2.Bounds, 
      device->MeshUnit.Super2.Bounds.Point1.X + 320 ));
      CoreRectView__OnSetBounds( device, EwSetRectW( device->Super2.Bounds, EwGetRectW( 
      _this->VerticalList.Super2.Bounds )));
      CoreGroup_InvalidateViewState((CoreGroup)&device->MeshUnit );
      CoreGroup_InvalidateViewState((CoreGroup)device );
      return 1;
    }

    _this->Row = _this->Row + 1;

    if ( ApplicationMeshTree_GetChildren( _this, device, unitnum, itemNo, indent, 
        combinames ))
      return 1;

    child = ApplicationMeshTree_FindNextChild( _this, child, parent );
  }

  return 0;
}

/* 'C' function for method : 'Application::MeshTree.ImportSlot()' */
void ApplicationMeshTree_ImportSlot( ApplicationMeshTree _this, XObject sender )
{
  ApplicationPopup popy;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popy = ((ApplicationPopup)EwNewObject( ApplicationImportConfigPopup, 0 ));
  ApplicationPopup_Show( popy, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'Application::MeshTree.ExportSlot()' */
void ApplicationMeshTree_ExportSlot( ApplicationMeshTree _this, XObject sender )
{
  ApplicationPopup popy;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popy = ((ApplicationPopup)EwNewObject( ApplicationExportConfigPopup, 0 ));
  ApplicationPopup_Show( popy, CoreView__GetRoot( _this ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationMeshTree_onEvent1( ApplicationMeshTree _this, XObject sender )
{
  XInt32 numDevs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );    

    numDevs = cmd.short4;

    Command0( CMD_GET_NUM_EXTRA_RADIO_UNITS, &cmd );  

    numDevs += cmd.int0;
  }
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, numDevs + 1 );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, numDevs );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
  _this->VerticalList.Super2.Bounds ));
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'Application::MeshTree.StartSync()' */
void ApplicationMeshTree_StartSync( ApplicationMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    cmd.int0 = 1;
    Command0( CMD_SET_MESH_STAGE, &cmd );
  }
  CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line.Super1.Point1.Y 
  ));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
  ));
  _this->ProgressArrow.Target = _this->ProgressArrow.Line2.Super1.Point1.Y;
  CoreTimer_OnSetEnabled( &_this->ProgressArrow.Timer, 1 );
  CoreTimer_OnSetPeriod( &_this->ProgressArrow.Timer, 2000 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationMeshTree_onEvent2( ApplicationMeshTree _this, XObject sender )
{
  XInt16 stage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    Command0( CMD_GET_MESH_STAGE, &cmd );  

    stage = cmd.int0;
  }
  _this->RoundBox.FillColour.Alpha = 127;
  _this->RoundBox.LineColour.Alpha = 127;

  switch ( stage )
  {
    case 0 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
      CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line1.Super1.Point1.Y 
      ));
      CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
      ));
    }
    break;

    case 1 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
      CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line2.Super1.Point1.Y 
      ));
      CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
      ));
    }
    break;

    case 2 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 1 );
      CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line3.Super1.Point1.Y 
      ));
      CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
      ));
    }
    break;

    case 3 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 1 );
      CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line4.Super1.Point1.Y 
      ));
      CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
      _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
      ));
      _this->RoundBox.FillColour.Alpha = 255;
      _this->RoundBox.LineColour.Alpha = 255;
    }
    break;

    default : 
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshControl, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
    }
  }
}

/* 'C' function for method : 'Application::MeshTree.StartFormation()' */
void ApplicationMeshTree_StartFormation( ApplicationMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    cmd.int0 = 2;
    Command0( CMD_SET_MESH_STAGE, &cmd );
  }
  CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line1.Super1.Point1.Y 
  ));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
  ));
  _this->ProgressArrow.Target = _this->ProgressArrow.Line2.Super1.Point1.Y;
  CoreTimer_OnSetEnabled( &_this->ProgressArrow.Timer, 1 );
  CoreTimer_OnSetPeriod( &_this->ProgressArrow.Timer, 5000 );
}

/* 'C' function for method : 'Application::MeshTree.StartActivation()' */
void ApplicationMeshTree_StartActivation( ApplicationMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    cmd.int0 = 3;
    Command0( CMD_SET_MESH_STAGE, &cmd );
  }
  CoreLineView_OnSetPoint1((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point1, _this->ProgressArrow.Line2.Super1.Point1.Y 
  ));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->ProgressArrow.Arrow, EwSetPointY( 
  _this->ProgressArrow.Arrow.Super1.Point2, _this->ProgressArrow.Arrow.Super1.Point1.Y 
  ));
  _this->ProgressArrow.Target = _this->ProgressArrow.Line3.Super1.Point1.Y;
  CoreTimer_OnSetEnabled( &_this->ProgressArrow.Timer, 1 );
  CoreTimer_OnSetPeriod( &_this->ProgressArrow.Timer, 2000 );
}

/* 'C' function for method : 'Application::MeshTree.TScrollSlot()' */
void ApplicationMeshTree_TScrollSlot( ApplicationMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->VerticalList.ScrollOffset 
  );
  _this->Origin.Y = ( 25 + _this->SlideTouchHandler.Offset.Y );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'Application::MeshTree.InfoTap()' */
void ApplicationMeshTree_InfoTap( ApplicationMeshTree _this, XObject sender )
{
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->SimpleTouchHandler.AutoDeflected )
    return;

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler.CurrentPos 
  );

  if (( _this->VerticalList.SelectedItem == itemNo ) && CoreGroup_OnGetVisible((CoreGroup)&_this->DeviceInfo 
      ))
  {
    CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceInfo, 0 );
    ApplicationDeviceInfo_OnSetdevice( &_this->DeviceInfo, 0 );
    return;
  }

  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );

  if ( itemNo > 0 )
  {
    CoreGroup_OnSetVisible((CoreGroup)&_this->DeviceInfo, 1 );
  }

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
}

/* Variants derived from the class : 'Application::MeshTree' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMeshTree )
EW_END_OF_CLASS_VARIANTS( ApplicationMeshTree )

/* Virtual Method Table (VMT) for the class : 'Application::MeshTree' */
EW_DEFINE_CLASS( ApplicationMeshTree, CoreGroup, "Application::MeshTree" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMeshTree_UpdateLayout,
  ApplicationMeshTree_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMeshTree )

/* Initializer for the class 'Application::MeshUnit' */
void ApplicationMeshUnit__Init( ApplicationMeshUnit _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path2, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->BoxPath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneNum, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->UnitNum, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Extention, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMeshUnit );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03D2 );
  CoreRectView__OnSetBounds( &_this->Text, _Const03D3 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const03D4 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const03D5 );
  ViewsFillPath_OnSetColorBL( &_this->FillPath, _Const03D6 );
  ViewsFillPath_OnSetColorBR( &_this->FillPath, _Const03D7 );
  ViewsFillPath_OnSetColorTR( &_this->FillPath, _Const03D7 );
  ViewsFillPath_OnSetColorTL( &_this->FillPath, _Const03D6 );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const03D8 );
  _this->Radius1 = 9;
  CoreRectView__OnSetBounds( &_this->BoxPath, _Const03D9 );
  ViewsStrokePath_OnSetColor( &_this->BoxPath, _Const0018 );
  ViewsStrokePath_OnSetWidth( &_this->BoxPath, 1.000000f );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const03DA );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const03DB ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0018 );
  CoreRectView__OnSetBounds( &_this->ZoneNum, _Const03DC );
  ViewsText_OnSetAlignment( &_this->ZoneNum, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->ZoneNum, EwLoadString( &_Const03DD ));
  ViewsText_OnSetColor( &_this->ZoneNum, _Const01AF );
  CoreRectView__OnSetBounds( &_this->ZoneText1, _Const03DE );
  ViewsText_OnSetString( &_this->ZoneText1, EwLoadString( &_Const03DF ));
  ViewsText_OnSetColor( &_this->ZoneText1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->UnitNum, _Const03E0 );
  ViewsText_OnSetAlignment( &_this->UnitNum, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->UnitNum, EwLoadString( &_Const03E1 ));
  ViewsText_OnSetColor( &_this->UnitNum, _Const01AF );
  CoreRectView__OnSetBounds( &_this->ZoneText2, _Const03E2 );
  ViewsText_OnSetString( &_this->ZoneText2, EwLoadString( &_Const03E3 ));
  ViewsText_OnSetColor( &_this->ZoneText2, _Const0018 );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const03E4 );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const03E5 ));
  ViewsText_OnSetColor( &_this->TypeText, _Const01AF );
  EwRetainString( &_this->RadioComb, EwLoadString( &_Const01A9 ));
  EwRetainString( &_this->DefinedComb, EwLoadString( &_Const01A9 ));
  CoreRectView__OnSetBounds( &_this->Extention, _Const03E6 );
  ViewsText_OnSetString( &_this->Extention, EwLoadString( &_Const03E7 ));
  _this->HueRange = 10;
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BoxPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneNum ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitNum ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Extention ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path2 );
  ViewsStrokePath_OnSetPath( &_this->BoxPath, &_this->Path1 );
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdanaProSemiBold20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &ApplicationVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneNum, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText1, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->UnitNum, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText2, EwLoadResource( &ApplicationFontVerdana14, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Extention, EwLoadResource( &ResourcesFontLarge, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationMeshUnit_Slot );
}

/* Re-Initializer for the class 'Application::MeshUnit' */
void ApplicationMeshUnit__ReInit( ApplicationMeshUnit _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsFillPath__ReInit( &_this->FillPath );
  GraphicsPath__ReInit( &_this->Path2 );
  ViewsStrokePath__ReInit( &_this->BoxPath );
  GraphicsPath__ReInit( &_this->Path1 );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->ZoneNum );
  ViewsText__ReInit( &_this->ZoneText1 );
  ViewsText__ReInit( &_this->UnitNum );
  ViewsText__ReInit( &_this->ZoneText2 );
  ViewsText__ReInit( &_this->TypeText );
  ViewsText__ReInit( &_this->Extention );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'Application::MeshUnit' */
void ApplicationMeshUnit__Done( ApplicationMeshUnit _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMeshUnit );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsFillPath__Done( &_this->FillPath );
  GraphicsPath__Done( &_this->Path2 );
  ViewsStrokePath__Done( &_this->BoxPath );
  GraphicsPath__Done( &_this->Path1 );
  GraphicsAttrSet__Done( &_this->AttrSet );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->ZoneNum );
  ViewsText__Done( &_this->ZoneText1 );
  ViewsText__Done( &_this->UnitNum );
  ViewsText__Done( &_this->ZoneText2 );
  ViewsText__Done( &_this->TypeText );
  ViewsText__Done( &_this->Extention );
  CoreTimer__Done( &_this->Timer );

  /* Release all used strings */
  EwReleaseString( &_this->RadioComb );
  EwReleaseString( &_this->DefinedComb );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MeshUnit' */
void ApplicationMeshUnit__Mark( ApplicationMeshUnit _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->Path2 );
  EwMarkObject( &_this->BoxPath );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->ZoneNum );
  EwMarkObject( &_this->ZoneText1 );
  EwMarkObject( &_this->UnitNum );
  EwMarkObject( &_this->ZoneText2 );
  EwMarkObject( &_this->TypeText );
  EwMarkObject( &_this->Extention );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMeshUnit_UpdateLayout( ApplicationMeshUnit _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMeshUnit_UpdateViewState( ApplicationMeshUnit _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->Selected )
  {
    ViewsStrokePath_OnSetWidth( &_this->BoxPath, 3.000000f );
  }
  else
  {
    ViewsStrokePath_OnSetWidth( &_this->BoxPath, 1.000000f );
  }

  if ( _this->Status == 3 )
  {
    ViewsText_OnSetString( &_this->Extention, EwLoadString( &_Const02A9 ));
    ViewsText_OnSetColor( &_this->Extention, _Const03E8 );
    ViewsFillPath_OnSetColor( &_this->FillPath, _Const03E9 );
  }
  else
    if ( _this->Status == 2 )
    {
      ViewsText_OnSetString( &_this->Extention, EwLoadString( &_Const03EA ));
      ViewsText_OnSetColor( &_this->Extention, _Const03EB );
      ViewsFillPath_OnSetColor( &_this->FillPath, _Const03EC );
      ViewsText_OnSetString( &_this->TypeText, _this->RadioComb );
    }
    else
      if ( _this->Status == 0 )
      {
        ViewsText_OnSetString( &_this->Extention, EwLoadString( &_Const03ED ));
        ViewsText_OnSetColor( &_this->Extention, _Const03EE );
        ViewsFillPath_OnSetColor( &_this->FillPath, _Const03EF );
        ViewsText_OnSetString( &_this->TypeText, _this->DefinedComb );
      }
      else
        if ( _this->Status == 1 )
        {
          ViewsText_OnSetString( &_this->Extention, 0 );
          ViewsText_OnSetColor( &_this->Extention, _Const03EB );
          ViewsFillPath_OnSetColor( &_this->FillPath, _Const03F0 );
          ViewsText_OnSetString( &_this->TypeText, _this->RadioComb );
        }

  if ( _this->SNR != -127 )
  {
    ViewsFillPath_OnSetColor( &_this->FillPath, ApplicationMeshUnit_Hue( _this, 
    _this->SNR ));
  }

  ApplicationMeshUnit_DrawFillBox( _this, 1, 1, EwGetRectW( _this->FillPath.Super1.Bounds 
  ) - 2, EwGetRectH( _this->FillPath.Super1.Bounds ) - 2 );
  ApplicationMeshUnit_DrawBox( _this, 1, 1, EwGetRectW( _this->BoxPath.Super1.Bounds 
  ) - 2, EwGetRectH( _this->BoxPath.Super1.Bounds ) - 2 );
}

/* 'C' function for method : 'Application::MeshUnit.DrawFillBox()' */
void ApplicationMeshUnit_DrawFillBox( ApplicationMeshUnit _this, XInt32 x, XInt32 
  y, XInt32 width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path2, 0, 24 );
  GraphicsPath_Begin( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path2, 0 );
}

/* 'C' function for method : 'Application::MeshUnit.DrawBox()' */
void ApplicationMeshUnit_DrawBox( ApplicationMeshUnit _this, XInt32 x, XInt32 y, 
  XInt32 width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
}

/* 'C' function for method : 'Application::MeshUnit.Slot()' */
void ApplicationMeshUnit_Slot( ApplicationMeshUnit _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !EwCompString( _this->TypeText.String, _this->DefinedComb ))
  {
    ViewsText_OnSetString( &_this->TypeText, _this->RadioComb );
  }
  else
  {
    ViewsText_OnSetString( &_this->TypeText, _this->DefinedComb );
  }
}

/* 'C' function for method : 'Application::MeshUnit.OnSetStatus()' */
void ApplicationMeshUnit_OnSetStatus( ApplicationMeshUnit _this, XInt32 value )
{
  if ( _this->Status == value )
    return;

  _this->Status = value;

  if ( _this->Status == 3 )
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  }
  else
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  }
}

/* 'C' function for method : 'Application::MeshUnit.Hue()' */
XColor ApplicationMeshUnit_Hue( ApplicationMeshUnit _this, XInt32 h )
{
  XInt32 val;
  XInt32 band;
  XColor res;

  if ( h < 0 )
    h = 0;

  val = (( h % _this->HueRange ) * 255 ) / ( _this->HueRange - 1 );
  band = h / _this->HueRange;
  res = _Const03F1;

  if ( band == 0 )
  {
    res.Red = 255;
    res.Green = (XUInt8)val;
  }
  else
  {
    res.Red = (XUInt8)( 255 - val );
    res.Green = 255;
  }

  return res;
}

/* Variants derived from the class : 'Application::MeshUnit' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMeshUnit )
EW_END_OF_CLASS_VARIANTS( ApplicationMeshUnit )

/* Virtual Method Table (VMT) for the class : 'Application::MeshUnit' */
EW_DEFINE_CLASS( ApplicationMeshUnit, CoreGroup, "Application::MeshUnit" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMeshUnit_UpdateLayout,
  ApplicationMeshUnit_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMeshUnit )

/* Initializer for the class 'Application::MeshUnitItem' */
void ApplicationMeshUnitItem__Init( ApplicationMeshUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ApplicationMeshUnit__Init( &_this->MeshUnit, &_this->_XObject, 0 );
  ApplicationMeshNCU__Init( &_this->MeshNCU, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMeshUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03F2 );
  CoreRectView__OnSetBounds( &_this->MeshUnit, _Const03F3 );
  CoreRectView__OnSetBounds( &_this->MeshNCU, _Const03F4 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshUnit ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshNCU ), 0 );
}

/* Re-Initializer for the class 'Application::MeshUnitItem' */
void ApplicationMeshUnitItem__ReInit( ApplicationMeshUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ApplicationMeshUnit__ReInit( &_this->MeshUnit );
  ApplicationMeshNCU__ReInit( &_this->MeshNCU );
}

/* Finalizer method for the class 'Application::MeshUnitItem' */
void ApplicationMeshUnitItem__Done( ApplicationMeshUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMeshUnitItem );

  /* Finalize all embedded objects */
  ApplicationMeshUnit__Done( &_this->MeshUnit );
  ApplicationMeshNCU__Done( &_this->MeshNCU );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MeshUnitItem' */
void ApplicationMeshUnitItem__Mark( ApplicationMeshUnitItem _this )
{
  EwMarkObject( &_this->MeshUnit );
  EwMarkObject( &_this->MeshNCU );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMeshUnitItem_UpdateLayout( ApplicationMeshUnitItem _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMeshUnitItem_UpdateViewState( ApplicationMeshUnitItem _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'Application::MeshUnitItem' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMeshUnitItem )
EW_END_OF_CLASS_VARIANTS( ApplicationMeshUnitItem )

/* Virtual Method Table (VMT) for the class : 'Application::MeshUnitItem' */
EW_DEFINE_CLASS( ApplicationMeshUnitItem, CoreGroup, "Application::MeshUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMeshUnitItem_UpdateLayout,
  ApplicationMeshUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMeshUnitItem )

/* Initializer for the class 'Application::MeshNCU' */
void ApplicationMeshNCU__Init( ApplicationMeshNCU _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path2, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->BoxPath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationMeshNCU );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03F5 );
  CoreView_OnSetLayout((CoreView)&_this->FillPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const03F6 );
  ViewsFillPath_OnSetColorBL( &_this->FillPath, _Const03F7 );
  ViewsFillPath_OnSetColorBR( &_this->FillPath, _Const03F7 );
  ViewsFillPath_OnSetColorTR( &_this->FillPath, _Const03F8 );
  ViewsFillPath_OnSetColorTL( &_this->FillPath, _Const03F8 );
  _this->Radius1 = 9;
  CoreView_OnSetLayout((CoreView)&_this->BoxPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->BoxPath, _Const03F5 );
  ViewsStrokePath_OnSetColor( &_this->BoxPath, _Const0018 );
  ViewsStrokePath_OnSetWidth( &_this->BoxPath, 1.000000f );
  CoreView_OnSetLayout((CoreView)&_this->TypeText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const03F9 );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const03FA ));
  ViewsText_OnSetColor( &_this->TypeText, _Const01AF );
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BoxPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path2 );
  ViewsStrokePath_OnSetPath( &_this->BoxPath, &_this->Path1 );
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'Application::MeshNCU' */
void ApplicationMeshNCU__ReInit( ApplicationMeshNCU _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  GraphicsPath__ReInit( &_this->Path2 );
  ViewsStrokePath__ReInit( &_this->BoxPath );
  GraphicsPath__ReInit( &_this->Path1 );
  ViewsText__ReInit( &_this->TypeText );
}

/* Finalizer method for the class 'Application::MeshNCU' */
void ApplicationMeshNCU__Done( ApplicationMeshNCU _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationMeshNCU );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  GraphicsPath__Done( &_this->Path2 );
  ViewsStrokePath__Done( &_this->BoxPath );
  GraphicsPath__Done( &_this->Path1 );
  ViewsText__Done( &_this->TypeText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::MeshNCU' */
void ApplicationMeshNCU__Mark( ApplicationMeshNCU _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->Path2 );
  EwMarkObject( &_this->BoxPath );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->TypeText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationMeshNCU_UpdateLayout( ApplicationMeshNCU _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationMeshNCU_UpdateViewState( ApplicationMeshNCU _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ApplicationMeshNCU_DrawFillBox( _this, 1, 1, EwGetRectW( _this->FillPath.Super1.Bounds 
  ) - 2, EwGetRectH( _this->FillPath.Super1.Bounds ) - 2 );
  ApplicationMeshNCU_DrawBox( _this, 1, 1, EwGetRectW( _this->BoxPath.Super1.Bounds 
  ) - 2, EwGetRectH( _this->BoxPath.Super1.Bounds ) - 2 );
}

/* 'C' function for method : 'Application::MeshNCU.DrawFillBox()' */
void ApplicationMeshNCU_DrawFillBox( ApplicationMeshNCU _this, XInt32 x, XInt32 
  y, XInt32 width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path2, 0, 24 );
  GraphicsPath_Begin( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path2, 0 );
}

/* 'C' function for method : 'Application::MeshNCU.DrawBox()' */
void ApplicationMeshNCU_DrawBox( ApplicationMeshNCU _this, XInt32 x, XInt32 y, XInt32 
  width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
}

/* Variants derived from the class : 'Application::MeshNCU' */
EW_DEFINE_CLASS_VARIANTS( ApplicationMeshNCU )
EW_END_OF_CLASS_VARIANTS( ApplicationMeshNCU )

/* Virtual Method Table (VMT) for the class : 'Application::MeshNCU' */
EW_DEFINE_CLASS( ApplicationMeshNCU, CoreGroup, "Application::MeshNCU" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationMeshNCU_UpdateLayout,
  ApplicationMeshNCU_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationMeshNCU )

/* Initializer for the class 'Application::Access' */
void ApplicationAccess__Init( ApplicationAccess _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationAccess );
}

/* Re-Initializer for the class 'Application::Access' */
void ApplicationAccess__ReInit( ApplicationAccess _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::Access' */
void ApplicationAccess__Done( ApplicationAccess _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationAccess );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Access' */
void ApplicationAccess__Mark( ApplicationAccess _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::Access' */
EW_DEFINE_CLASS_VARIANTS( ApplicationAccess )
EW_END_OF_CLASS_VARIANTS( ApplicationAccess )

/* Virtual Method Table (VMT) for the class : 'Application::Access' */
EW_DEFINE_CLASS( ApplicationAccess, XObject, "Application::Access" )
EW_END_OF_CLASS( ApplicationAccess )

/* Initializer for the class 'Application::LevelAccess' */
void ApplicationLevelAccess__Init( ApplicationLevelAccess _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->LevelText, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationLevelAccess );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03FB );
  CoreRectView__OnSetBounds( &_this->LevelText, _Const03FC );
  ViewsText_OnSetAlignment( &_this->LevelText, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertBottom );
  ViewsText_OnSetString( &_this->LevelText, EwLoadString( &_Const03FD ));
  ViewsText_OnSetColor( &_this->LevelText, _Const0018 );
  _this->Level = 1;
  CoreTimer_OnSetPeriod( &_this->Timer, 60000 );
  CoreGroup__Add( _this, ((CoreView)&_this->LevelText ), 0 );
  ViewsText_OnSetFont( &_this->LevelText, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationLevelAccess_Slot );
  _this->AccessEventHandler.OnEvent = EwNewSlot( _this, ApplicationLevelAccess_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessEventHandler, &EwGetAutoObject( 
  &ApplicationDevices, ApplicationDeviceClass )->AccessModeChangeEvent );
}

/* Re-Initializer for the class 'Application::LevelAccess' */
void ApplicationLevelAccess__ReInit( ApplicationLevelAccess _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->LevelText );
  CoreTimer__ReInit( &_this->Timer );
  CoreSystemEventHandler__ReInit( &_this->AccessEventHandler );
}

/* Finalizer method for the class 'Application::LevelAccess' */
void ApplicationLevelAccess__Done( ApplicationLevelAccess _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationLevelAccess );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->LevelText );
  CoreTimer__Done( &_this->Timer );
  CoreSystemEventHandler__Done( &_this->AccessEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::LevelAccess' */
void ApplicationLevelAccess__Mark( ApplicationLevelAccess _this )
{
  EwMarkObject( &_this->LevelText );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->AccessEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationLevelAccess_UpdateLayout( ApplicationLevelAccess _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationLevelAccess_UpdateViewState( ApplicationLevelAccess _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::LevelAccess.OnSetLevel()' */
void ApplicationLevelAccess_OnSetLevel( ApplicationLevelAccess _this, XInt32 value )
{
  ApplicationApplication app;

  if ( _this->Level == value )
    return;

  _this->Level = value;
  ViewsText_OnSetString( &_this->LevelText, EwConcatString( EwConcatString( EwLoadString( 
  &_Const03FE ), EwNewStringInt( _this->Level, 0, 10 )), EwLoadString( &_Const03FF 
  )));
  app = EwCastObject( _this->Super3.Owner, ApplicationApplication );

  if ( _this->Level > 1 )
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 1 );

    if ( app != 0 )
    {
      EwRetainString( &app->LogOnButton.ButtonText, EwLoadString( &_Const0400 ));
      app->LogOnButton.Icon = EwLoadResource( &ApplicationKey2Bitmap, ResourcesBitmap 
      );
      CoreGroup_InvalidateViewState((CoreGroup)&app->LogOnButton );
    }
  }
  else
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 0 );

    if ( app != 0 )
    {
      EwRetainString( &app->LogOnButton.ButtonText, EwLoadString( &_Const002D ));
      app->LogOnButton.Icon = EwLoadResource( &ApplicationKeyBitmap, ResourcesBitmap 
      );
      CoreGroup_InvalidateViewState((CoreGroup)&app->LogOnButton );
      EwPostSignal( EwNewSlot( &app->AlarmsTabButton, ApplicationTabButton_OnPress 
        ), ((XObject)_this ));
    }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void ApplicationLevelAccess_onEvent1( ApplicationLevelAccess _this, XObject sender )
{
  ApplicationAccess a;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  a = EwCastObject( _this->AccessEventHandler.Context, ApplicationAccess );

  if ( a->Level == 2 )
  {
    _this->KeySwitchOn = 1;

    if ( _this->Level == 1 )
      ApplicationLevelAccess_OnSetLevel( _this, 2 );
  }
  else
    if ( a->Level == 1 )
    {
      if ( _this->Level == 2 )
        ApplicationLevelAccess_OnSetLevel( _this, 1 );

      _this->KeySwitchOn = 0;
    }
}

/* 'C' function for method : 'Application::LevelAccess.Slot()' */
void ApplicationLevelAccess_Slot( ApplicationLevelAccess _this, XObject sender )
{
  XBool logout;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  logout = 0;
  {
    Command cmd;

    //  Command0( CMD_GET_LAST_TOUCH_TIME, &cmd );

    //  if ( now() - cmd.int0 > 100 * 60 * 10 )
      {
    //     logout = true;
      }
  }

  if ( logout )
  {
    ApplicationLevelAccess_OnSetLevel( _this, 1 );
  }
}

/* Variants derived from the class : 'Application::LevelAccess' */
EW_DEFINE_CLASS_VARIANTS( ApplicationLevelAccess )
EW_END_OF_CLASS_VARIANTS( ApplicationLevelAccess )

/* Virtual Method Table (VMT) for the class : 'Application::LevelAccess' */
EW_DEFINE_CLASS( ApplicationLevelAccess, CoreGroup, "Application::LevelAccess" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationLevelAccess_UpdateLayout,
  ApplicationLevelAccess_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationLevelAccess )

/* This autoobject provides the default customization for the 'push button' widget 
   (WidgetSet::PushButton) in its small size variant. */
EW_DEFINE_AUTOOBJECT( ApplicationSmallPushButton, WidgetSetPushButtonConfig )

/* Initializer for the auto object 'Application::SmallPushButton' */
void ApplicationSmallPushButton__Init( WidgetSetPushButtonConfig _this )
{
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const000A );
  WidgetSetPushButtonConfig_OnSetLabelColorFocused( _this, _Const000A );
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const0401 );
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( _this, _Const0018 );
  WidgetSetPushButtonConfig_OnSetLabelMarginBottom( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginTop( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginRight( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginLeft( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconTintDisabled( _this, _Const02DC );
  WidgetSetPushButtonConfig_OnSetIconTintDefault( _this, _Const02DB );
  WidgetSetPushButtonConfig_OnSetIconMarginBottom( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginTop( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginRight( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginLeft( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &ResourcesFontSmall, 
  ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( _this, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameFocused( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( _this, 0 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( _this, 1 );
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetWidgetMinSize( _this, _Const0402 );
}

/* Table with links to derived variants of the auto object : 'Application::SmallPushButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationSmallPushButton )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationSmallPushButton )

/* Initializer for the class 'Application::ProgressArrow' */
void ApplicationProgressArrow__Init( ApplicationProgressArrow _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line1, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line2, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line3, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Arrow, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line4, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationProgressArrow );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0403 );
  CoreView_OnSetLayout((CoreView)&_this->Line, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0404 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0405 );
  ViewsLine_OnSetWidth( &_this->Line, 5 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line1, _Const0004 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line1, _Const0406 );
  ViewsLine_OnSetWidth( &_this->Line1, 3 );
  ViewsLine_OnSetColor( &_this->Line1, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Line2, CoreLayoutAlignToLeft );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line2, _Const0407 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line2, _Const0408 );
  ViewsLine_OnSetWidth( &_this->Line2, 3 );
  ViewsLine_OnSetColor( &_this->Line2, _Const0018 );
  CoreView_OnSetLayout((CoreView)&_this->Line3, CoreLayoutAlignToLeft );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line3, _Const0409 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line3, _Const040A );
  ViewsLine_OnSetWidth( &_this->Line3, 3 );
  ViewsLine_OnSetColor( &_this->Line3, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Arrow, _Const040B );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Arrow, _Const040C );
  ViewsLine_OnSetWidth2( &_this->Arrow, 25 );
  ViewsLine_OnSetColor( &_this->Arrow, _Const004C );
  CoreTimer_OnSetPeriod( &_this->Timer, 1000 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Line4, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line4, _Const040D );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line4, _Const040E );
  ViewsLine_OnSetWidth( &_this->Line4, 3 );
  ViewsLine_OnSetColor( &_this->Line4, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Arrow ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line4 ), 0 );
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationProgressArrow_TickSlot );
}

/* Re-Initializer for the class 'Application::ProgressArrow' */
void ApplicationProgressArrow__ReInit( ApplicationProgressArrow _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsLine__ReInit( &_this->Line );
  ViewsLine__ReInit( &_this->Line1 );
  ViewsLine__ReInit( &_this->Line2 );
  ViewsLine__ReInit( &_this->Line3 );
  ViewsLine__ReInit( &_this->Arrow );
  CoreTimer__ReInit( &_this->Timer );
  ViewsLine__ReInit( &_this->Line4 );
}

/* Finalizer method for the class 'Application::ProgressArrow' */
void ApplicationProgressArrow__Done( ApplicationProgressArrow _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationProgressArrow );

  /* Finalize all embedded objects */
  ViewsLine__Done( &_this->Line );
  ViewsLine__Done( &_this->Line1 );
  ViewsLine__Done( &_this->Line2 );
  ViewsLine__Done( &_this->Line3 );
  ViewsLine__Done( &_this->Arrow );
  CoreTimer__Done( &_this->Timer );
  ViewsLine__Done( &_this->Line4 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ProgressArrow' */
void ApplicationProgressArrow__Mark( ApplicationProgressArrow _this )
{
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Line1 );
  EwMarkObject( &_this->Line2 );
  EwMarkObject( &_this->Line3 );
  EwMarkObject( &_this->Arrow );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->Line4 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationProgressArrow_UpdateLayout( ApplicationProgressArrow _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationProgressArrow_UpdateViewState( ApplicationProgressArrow _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'Application::ProgressArrow.TickSlot()' */
void ApplicationProgressArrow_TickSlot( ApplicationProgressArrow _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Arrow.Super1.Point1.Y < _this->Target )
  {
    CoreLineView_OnSetPoint1((CoreLineView)&_this->Arrow, EwSetPointY( _this->Arrow.Super1.Point1, 
    _this->Arrow.Super1.Point1.Y + 1 ));
    CoreLineView_OnSetPoint2((CoreLineView)&_this->Arrow, EwSetPointY( _this->Arrow.Super1.Point2, 
    _this->Arrow.Super1.Point1.Y ));
  }

  CoreTimer_OnSetPeriod( &_this->Timer, _this->Timer.Period + 20 );
}

/* Variants derived from the class : 'Application::ProgressArrow' */
EW_DEFINE_CLASS_VARIANTS( ApplicationProgressArrow )
EW_END_OF_CLASS_VARIANTS( ApplicationProgressArrow )

/* Virtual Method Table (VMT) for the class : 'Application::ProgressArrow' */
EW_DEFINE_CLASS( ApplicationProgressArrow, CoreGroup, "Application::ProgressArrow" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationProgressArrow_UpdateLayout,
  ApplicationProgressArrow_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationProgressArrow )

/* Initializer for the class 'Application::RoundBox' */
void ApplicationRoundBox__Init( ApplicationRoundBox _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->StrokePath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path2, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationRoundBox );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const040F );
  CoreView_OnSetLayout((CoreView)&_this->FillPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const040F );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const0410 );
  CoreView_OnSetLayout((CoreView)&_this->StrokePath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->StrokePath, _Const040F );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _Const0018 );
  ViewsStrokePath_OnSetWidth( &_this->StrokePath, 2.000000f );
  _this->Radius1 = 5;
  _this->LineColour = _Const0018;
  _this->FillColour = _Const0411;
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const040F );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0412 ));
  ViewsText_OnSetColor( &_this->Text, _Const0413 );
  EwRetainString( &_this->Label, EwLoadString( &_Const0414 ));
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StrokePath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path2 );
  ViewsStrokePath_OnSetPath( &_this->StrokePath, &_this->Path1 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontSmall, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::RoundBox' */
void ApplicationRoundBox__ReInit( ApplicationRoundBox _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  ViewsStrokePath__ReInit( &_this->StrokePath );
  GraphicsPath__ReInit( &_this->Path2 );
  GraphicsPath__ReInit( &_this->Path1 );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'Application::RoundBox' */
void ApplicationRoundBox__Done( ApplicationRoundBox _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationRoundBox );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  ViewsStrokePath__Done( &_this->StrokePath );
  GraphicsPath__Done( &_this->Path2 );
  GraphicsPath__Done( &_this->Path1 );
  ViewsText__Done( &_this->Text );

  /* Release all used strings */
  EwReleaseString( &_this->Label );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::RoundBox' */
void ApplicationRoundBox__Mark( ApplicationRoundBox _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->StrokePath );
  EwMarkObject( &_this->Path2 );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void ApplicationRoundBox_UpdateLayout( ApplicationRoundBox _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _this->LineColour );
  ViewsFillPath_OnSetColor( &_this->FillPath, _this->FillColour );
  ApplicationRoundBox_DrawBox( _this, (XInt16)_this->StrokePath.Width / 2, (XInt16)_this->StrokePath.Width 
  / 2, EwGetRectW( _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width, EwGetRectH( 
  _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width );
  ApplicationRoundBox_DrawFillBox( _this, (XInt16)_this->StrokePath.Width / 2, (XInt16)_this->StrokePath.Width 
  / 2, EwGetRectW( _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width, EwGetRectH( 
  _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationRoundBox_UpdateViewState( ApplicationRoundBox _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, _this->Label );
}

/* 'C' function for method : 'Application::RoundBox.DrawFillBox()' */
void ApplicationRoundBox_DrawFillBox( ApplicationRoundBox _this, XInt32 x, XInt32 
  y, XInt32 width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path2, 0, 24 );
  GraphicsPath_Begin( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path2, 0 );
}

/* 'C' function for method : 'Application::RoundBox.DrawBox()' */
void ApplicationRoundBox_DrawBox( ApplicationRoundBox _this, XInt32 x, XInt32 y, 
  XInt32 width, XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
}

/* Variants derived from the class : 'Application::RoundBox' */
EW_DEFINE_CLASS_VARIANTS( ApplicationRoundBox )
EW_END_OF_CLASS_VARIANTS( ApplicationRoundBox )

/* Virtual Method Table (VMT) for the class : 'Application::RoundBox' */
EW_DEFINE_CLASS( ApplicationRoundBox, CoreGroup, "Application::RoundBox" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationRoundBox_UpdateLayout,
  ApplicationRoundBox_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationRoundBox )

/* Initializer for the class 'Application::DeviceInfo' */
void ApplicationDeviceInfo__Init( ApplicationDeviceInfo _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationRoundBox__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  ViewsText__Init( &_this->snr, &_this->_XObject, 0 );
  ViewsText__Init( &_this->secondary, &_this->_XObject, 0 );
  ViewsText__Init( &_this->status, &_this->_XObject, 0 );
  ViewsText__Init( &_this->battery, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text11, &_this->_XObject, 0 );
  ViewsText__Init( &_this->live, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_sent, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_lost, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_success, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDeviceInfo );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0415 );
  _this->Super1.FillColour = _Const0416;
  ViewsText_OnSetVisible( &_this->Super1.Text, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0417 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0418 ));
  ViewsText_OnSetColor( &_this->Text1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text3, _Const0419 );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const041A ));
  ViewsText_OnSetColor( &_this->Text3, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text4, _Const041B );
  ViewsText_OnSetAlignment( &_this->Text4, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const041C ));
  ViewsText_OnSetColor( &_this->Text4, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text5, _Const041D );
  ViewsText_OnSetAlignment( &_this->Text5, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const041E ));
  ViewsText_OnSetColor( &_this->Text5, _Const0018 );
  CoreRectView__OnSetBounds( &_this->snr, _Const041F );
  ViewsText_OnSetAlignment( &_this->snr, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->snr, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->snr, _Const0018 );
  CoreRectView__OnSetBounds( &_this->secondary, _Const0420 );
  ViewsText_OnSetAlignment( &_this->secondary, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->secondary, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->secondary, _Const0018 );
  CoreRectView__OnSetBounds( &_this->status, _Const0421 );
  ViewsText_OnSetAlignment( &_this->status, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->status, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->status, _Const0018 );
  CoreRectView__OnSetBounds( &_this->battery, _Const0422 );
  ViewsText_OnSetAlignment( &_this->battery, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->battery, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->battery, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text11, _Const0423 );
  ViewsText_OnSetAlignment( &_this->Text11, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text11, EwLoadString( &_Const0424 ));
  ViewsText_OnSetColor( &_this->Text11, _Const0018 );
  CoreRectView__OnSetBounds( &_this->live, _Const0425 );
  ViewsText_OnSetAlignment( &_this->live, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->live, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->live, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_4, _Const0426 );
  ViewsText_OnSetAlignment( &_this->stats_4, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_4, EwLoadString( &_Const0427 ));
  ViewsText_OnSetColor( &_this->stats_4, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_sent, _Const0428 );
  ViewsText_OnSetAlignment( &_this->stats_sent, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_sent, EwLoadString( &_Const01A9 ));
  ViewsText_OnSetColor( &_this->stats_sent, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_1, _Const0429 );
  ViewsText_OnSetAlignment( &_this->stats_1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_1, EwLoadString( &_Const042A ));
  ViewsText_OnSetColor( &_this->stats_1, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_3, _Const042B );
  ViewsText_OnSetAlignment( &_this->stats_3, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_3, EwLoadString( &_Const042C ));
  ViewsText_OnSetColor( &_this->stats_3, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_lost, _Const042D );
  ViewsText_OnSetAlignment( &_this->stats_lost, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_lost, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->stats_lost, _Const0018 );
  CoreRectView__OnSetBounds( &_this->stats_success, _Const042E );
  ViewsText_OnSetAlignment( &_this->stats_success, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_success, EwLoadString( &_Const01EE ));
  ViewsText_OnSetColor( &_this->stats_success, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->snr ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->secondary ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->status ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->battery ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->live ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_sent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_lost ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_success ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->snr, EwLoadResource( &FlatFontS, ResourcesFont ));
  ViewsText_OnSetFont( &_this->secondary, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->status, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->battery, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text11, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->live, EwLoadResource( &FlatFontS, ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_4, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_sent, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationDeviceInfo_Slot );
  ViewsText_OnSetFont( &_this->stats_1, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_3, EwLoadResource( &ApplicationFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_lost, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->stats_success, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::DeviceInfo' */
void ApplicationDeviceInfo__ReInit( ApplicationDeviceInfo _this )
{
  /* At first re-initialize the super class ... */
  ApplicationRoundBox__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text3 );
  ViewsText__ReInit( &_this->Text4 );
  ViewsText__ReInit( &_this->Text5 );
  ViewsText__ReInit( &_this->snr );
  ViewsText__ReInit( &_this->secondary );
  ViewsText__ReInit( &_this->status );
  ViewsText__ReInit( &_this->battery );
  ViewsText__ReInit( &_this->Text11 );
  ViewsText__ReInit( &_this->live );
  ViewsText__ReInit( &_this->stats_4 );
  ViewsText__ReInit( &_this->stats_sent );
  CoreTimer__ReInit( &_this->Timer );
  ViewsText__ReInit( &_this->stats_1 );
  ViewsText__ReInit( &_this->stats_3 );
  ViewsText__ReInit( &_this->stats_lost );
  ViewsText__ReInit( &_this->stats_success );
}

/* Finalizer method for the class 'Application::DeviceInfo' */
void ApplicationDeviceInfo__Done( ApplicationDeviceInfo _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDeviceInfo );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text3 );
  ViewsText__Done( &_this->Text4 );
  ViewsText__Done( &_this->Text5 );
  ViewsText__Done( &_this->snr );
  ViewsText__Done( &_this->secondary );
  ViewsText__Done( &_this->status );
  ViewsText__Done( &_this->battery );
  ViewsText__Done( &_this->Text11 );
  ViewsText__Done( &_this->live );
  ViewsText__Done( &_this->stats_4 );
  ViewsText__Done( &_this->stats_sent );
  CoreTimer__Done( &_this->Timer );
  ViewsText__Done( &_this->stats_1 );
  ViewsText__Done( &_this->stats_3 );
  ViewsText__Done( &_this->stats_lost );
  ViewsText__Done( &_this->stats_success );

  /* Don't forget to deinitialize the super class ... */
  ApplicationRoundBox__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DeviceInfo' */
void ApplicationDeviceInfo__Mark( ApplicationDeviceInfo _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->snr );
  EwMarkObject( &_this->secondary );
  EwMarkObject( &_this->status );
  EwMarkObject( &_this->battery );
  EwMarkObject( &_this->Text11 );
  EwMarkObject( &_this->live );
  EwMarkObject( &_this->stats_4 );
  EwMarkObject( &_this->stats_sent );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->stats_1 );
  EwMarkObject( &_this->stats_3 );
  EwMarkObject( &_this->stats_lost );
  EwMarkObject( &_this->stats_success );

  /* Give the super class a chance to mark its objects and references */
  ApplicationRoundBox__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void ApplicationDeviceInfo_UpdateViewState( ApplicationDeviceInfo _this, XSet aState )
{
  XInt32 Status;
  XInt32 minutes;
  XInt16 second;
  XInt32 SNR;
  XUInt32 tx;
  XUInt32 lost;
  XInt32 child;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  Status = -1;
  minutes = -1;
  second = -1;
  SNR = -32768;
  tx = 0;
  lost = 0;
  child = _this->device;

  if ( _this->device != 0 )
    {
      RadioUnit* ru = (RadioUnit*) child;
      SNR           = ru->snrprimary;
      minutes       = ( now( ) - ru->starttime ) / 60;
      second        = ru->secondary;
      tx            = ru->sent;
      lost            = ru->lost;

      Command cmd;
      cmd.int0 = ru->unit;

      Command0( CMD_GET_DEVICE, &cmd );

      if ( cmd.int0 != 0 )
      {
         DeviceConfig* dc = (DeviceConfig*) cmd.int0;

         if ( dc->type == ru->combination )
         {
            Status = 1;   // ok
         }
         else
         {
            Status = 3;    // different ?
         }
      }
      else
      { 
         Status = 2;    // additional  +
      }
    }

  if ( second != -1 )
  {
    ViewsText_OnSetString( &_this->secondary, EwConcatString( EwLoadString( &_Const00FB 
    ), EwNewStringInt( second, 0, 10 )));
  }
  else
  {
    ViewsText_OnSetString( &_this->secondary, EwLoadString( &_Const01EE ));
  }

  switch ( Status )
  {
    case 0 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const042F ));
    break;

    case 1 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0430 ));
    break;

    case 2 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0431 ));
    break;

    case 3 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0432 ));
    break;

    default : 
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const01EE ));
  }

  if ( SNR != -32768 )
    ViewsText_OnSetString( &_this->snr, EwConcatString( EwNewStringInt( SNR, 0, 
    10 ), EwLoadString( &_Const0433 )));
  else
    ViewsText_OnSetString( &_this->snr, EwLoadString( &_Const01EE ));

  ViewsText_OnSetString( &_this->stats_sent, EwNewStringUInt( tx, 0, 10 ));
  ViewsText_OnSetString( &_this->stats_lost, EwNewStringUInt( lost, 0, 10 ));

  if ( tx == 0 )
  {
    ViewsText_OnSetString( &_this->stats_success, EwLoadString( &_Const0434 ));
  }
  else
  {
    ViewsText_OnSetString( &_this->stats_success, EwConcatString( EwNewStringFloat(((XFloat)( 
    tx - lost ) * 100.000000f ) / (XFloat)tx, 0, 2 ), EwLoadString( &_Const0435 
    )));
  }

  if ( minutes != -1 )
  {
    if ( minutes < 60 )
    {
      ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt( minutes, 
      0, 10 ), EwLoadString( &_Const0436 )));
    }
    else
      if ( minutes < 1440 )
      {
        ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt( minutes 
        / 60, 0, 10 ), EwLoadString( &_Const0437 )));
      }
      else
        if ( minutes < 10080 )
        {
          ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt(( 
          minutes / 60 ) / 24, 0, 10 ), EwLoadString( &_Const0438 )));
        }
        else
          if ( minutes < 525600 )
          {
            ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt((( 
            minutes / 60 ) / 24 ) / 7, 0, 10 ), EwLoadString( &_Const0439 )));
          }
          else
          {
            ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt((( 
            minutes / 60 ) / 24 ) / 30, 0, 10 ), EwLoadString( &_Const043A )));
          }
  }
}

/* 'C' function for method : 'Application::DeviceInfo.OnSetdevice()' */
void ApplicationDeviceInfo_OnSetdevice( ApplicationDeviceInfo _this, XInt32 value )
{
  if ( _this->device == value )
    return;

  _this->device = value;

  if ( _this->device == 0 )
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  }
  else
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'Application::DeviceInfo.Slot()' */
void ApplicationDeviceInfo_Slot( ApplicationDeviceInfo _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    if ( _this->device != 0 )
    {
      CoreGroup_InvalidateViewState((CoreGroup)_this );
    }
  }
}

/* Variants derived from the class : 'Application::DeviceInfo' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDeviceInfo )
EW_END_OF_CLASS_VARIANTS( ApplicationDeviceInfo )

/* Virtual Method Table (VMT) for the class : 'Application::DeviceInfo' */
EW_DEFINE_CLASS( ApplicationDeviceInfo, ApplicationRoundBox, "Application::DeviceInfo" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationRoundBox_UpdateLayout,
  ApplicationDeviceInfo_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDeviceInfo )

/* Initializer for the class 'Application::DFUPopup' */
void ApplicationDFUPopup__Init( ApplicationDFUPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  ApplicationPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDFUPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const043B );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const043C );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const043D );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const043E ));
  CoreRectView__OnSetBounds( &_this->Text1, _Const043F );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0440 ));
  CoreTimer_OnSetPeriod( &_this->Timer, 200 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontSmall, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, ApplicationDFUPopup_Activate );
}

/* Re-Initializer for the class 'Application::DFUPopup' */
void ApplicationDFUPopup__ReInit( ApplicationDFUPopup _this )
{
  /* At first re-initialize the super class ... */
  ApplicationPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'Application::DFUPopup' */
void ApplicationDFUPopup__Done( ApplicationDFUPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDFUPopup );

  /* Finalize all embedded objects */
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  CoreTimer__Done( &_this->Timer );

  /* Don't forget to deinitialize the super class ... */
  ApplicationPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DFUPopup' */
void ApplicationDFUPopup__Mark( ApplicationDFUPopup _this )
{
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  ApplicationPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::DFUPopup.Activate()' */
void ApplicationDFUPopup_Activate( ApplicationDFUPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_DFU_MODE, &cmd );
  }
}

/* Variants derived from the class : 'Application::DFUPopup' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDFUPopup )
EW_END_OF_CLASS_VARIANTS( ApplicationDFUPopup )

/* Virtual Method Table (VMT) for the class : 'Application::DFUPopup' */
EW_DEFINE_CLASS( ApplicationDFUPopup, ApplicationPopup, "Application::DFUPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  ApplicationPopup_UpdateLayout,
  ApplicationPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationDFUPopup )

/* Initializer for the class 'Application::LibClass' */
void ApplicationLibClass__Init( ApplicationLibClass _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationLibClass );
}

/* Re-Initializer for the class 'Application::LibClass' */
void ApplicationLibClass__ReInit( ApplicationLibClass _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::LibClass' */
void ApplicationLibClass__Done( ApplicationLibClass _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationLibClass );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::LibClass' */
void ApplicationLibClass__Mark( ApplicationLibClass _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::LibClass.GetConfig()' */
ApplicationDeviceConfig ApplicationLibClass_GetConfig( ApplicationLibClass _this, 
  XInt16 unit_num )
{
  ApplicationDeviceConfig dev = EwNewObject( ApplicationDeviceConfig, 0 );
  XString s = 0;
  XUInt8 i;
  XUInt8 o;
  XUInt8 p;

  if ( dev != 0 )
    {
      Command cmd;

      cmd.int0 = (int)unit_num & 0xFFFF;
      Command0( CMD_GET_DEVICE, &cmd );

      DeviceConfig* d = (DeviceConfig*) cmd.int0;

      if ( d != NULL ) 
      { 
        dev->combination = d->type;
        s    = EwNewStringAnsi( d->location );
      //     dev->locationptr = (int) d->location; 
           dev->numparams   = d->numParams;
           dev->unitnum     = d->unit;
           dev->zonenum     = d->zone;
         }
         else dev = NULL;
    }

  if ( dev != 0 )
  {
    EwRetainString( &dev->location, s );

    for ( i = 0; i < ApplicationLibClass_NumInputChannels( EwGetAutoObject( &ApplicationLib, 
         ApplicationLibClass ), unit_num ); i = (XUInt8)( i + 1 ))
    {
      dev->inputs[ EwCheckIndex( i, 32 )] = ApplicationLibClass_GetInput( _this, 
      unit_num, i );
    }

    for ( o = 0; o < ApplicationLibClass_NumOutputChannels( EwGetAutoObject( &ApplicationLib, 
         ApplicationLibClass ), unit_num ); o = (XUInt8)( o + 1 ))
    {
      dev->outputs[ EwCheckIndex( o, 32 )] = ApplicationLibClass_GetOutput( _this, 
      unit_num, o );
    }

    for ( p = 0; p < 4; p = (XUInt8)( p + 1 ))
    {
      dev->params[ EwCheckIndex( p, 4 )] = ApplicationLibClass_GetParameter( _this, 
      unit_num, p );
    }

    return dev;
  }

  return EwGetAutoObject( &ApplicationDummyConfig, ApplicationDeviceConfig );
}

/* 'C' function for method : 'Application::LibClass.GetInput()' */
ApplicationInputChannel ApplicationLibClass_GetInput( ApplicationLibClass _this, 
  XInt16 unitnum, XUInt8 channel )
{
  ApplicationInputChannel input;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  input = EwNewObject( ApplicationInputChannel, 0 );

  if ( input != 0 )
    {
      Command cmd;

      cmd.int0 = (int)unitnum & 0xFFFF;
      Command0( CMD_GET_DEVICE, &cmd );

      DeviceConfig* d = (DeviceConfig*) cmd.int0;
      InputChannel* i = d->input + channel;

      if ( d != NULL ) 
      {

        input->delay  = i->delay;
        input->flags  = i->flags;
        input->action = i->action;
        input->type   = i->type;

        return input;
      }
    }

  return 0;
}

/* 'C' function for method : 'Application::LibClass.NumInputChannels()' */
XInt32 ApplicationLibClass_NumInputChannels( ApplicationLibClass _this, XInt16 unitnum )
{
  XInt32 result;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  result = 0;
  {
    Command cmd;

    cmd.int0 = (int)unitnum & 0xFFFF;
    Command0( CMD_GET_DEVICE, &cmd );

    DeviceConfig* d = (DeviceConfig*) cmd.int0;

    if ( d != NULL ) 
    {
      InputChannel* i;
      for( i = d->input; i < d->input + SITE_MAX_INPUT_CHANNELS; i++ )
      {
         if ( i->type != CO_CHANNEL_NONE_E ) result++;
      }
    }
  }
  return result;
}

/* 'C' function for method : 'Application::LibClass.NumOutputChannels()' */
XInt32 ApplicationLibClass_NumOutputChannels( ApplicationLibClass _this, XInt16 
  unitnum )
{
  XInt32 result;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  result = 0;
  {
    Command cmd;

    cmd.int0 = (int)unitnum & 0xFFFF;
    Command0( CMD_GET_DEVICE, &cmd );

    DeviceConfig* d = (DeviceConfig*) cmd.int0;

    if ( d != NULL ) 
    {
      OutputChannel* o;
      for( o = d->output; o < d->output + SITE_MAX_OUTPUT_CHANNELS; o++ )
      {
         if ( o->type != CO_CHANNEL_NONE_E ) result++;
      }
    }
  }
  return result;
}

/* 'C' function for method : 'Application::LibClass.NumZones()' */
XInt32 ApplicationLibClass_NumZones( ApplicationLibClass _this )
{
  XInt32 numzones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  numzones = 32;
  {
    Command cmd;

    Command0( CMD_GET_NUM_ZONE_LEDS, &cmd );
    numzones = cmd.int0;
  }
  return numzones;
}

/* 'C' function for method : 'Application::LibClass.GetOutput()' */
ApplicationOutputChannel ApplicationLibClass_GetOutput( ApplicationLibClass _this, 
  XInt16 unitnum, XUInt8 channel )
{
  ApplicationOutputChannel output;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  output = EwNewObject( ApplicationOutputChannel, 0 );

  if ( output != 0 )
    {
      Command cmd;

      cmd.int0 = (int)unitnum & 0xFFFF;
      Command0( CMD_GET_DEVICE, &cmd );

      DeviceConfig* d = (DeviceConfig*) cmd.int0;
      OutputChannel* o = d->output + channel;

      if ( d != NULL ) 
      {

        output->delay1  = o->delay1;
        output->delay2  = o->delay2;
        output->flags   = o->flags;
        output->actions = o->actions;
        output->type    = o->type;
        return output;
      }
    }

  return 0;
}

/* 'C' function for method : 'Application::LibClass.TypeName()' */
XString ApplicationLibClass_TypeName( ApplicationLibClass _this, XEnum type )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( type )
  {
    case ApplicationChannelTypeNone :
      return EwLoadString( &_Const039B );

    case ApplicationChannelTypeSmoke :
      return EwLoadString( &_Const039C );

    case ApplicationChannelTypeHeat :
      return EwLoadString( &_Const039D );

    case ApplicationChannelTypeCo :
      return EwLoadString( &_Const039E );

    case ApplicationChannelTypePir :
      return EwLoadString( &_Const039F );

    case ApplicationChannelTypeSounder :
      return EwLoadString( &_Const03A3 );

    case ApplicationChannelTypeBeacon :
      return EwLoadString( &_Const03A4 );

    case ApplicationChannelTypeFire_callpoint :
      return EwLoadString( &_Const0441 );

    case ApplicationChannelTypeStatus_indicator_led :
      return EwLoadString( &_Const0442 );

    case ApplicationChannelTypeVisual_indicator :
      return EwLoadString( &_Const0443 );

    case ApplicationChannelTypeSounder_visual_indicator_combined :
      return EwLoadString( &_Const03A6 );

    case ApplicationChannelTypeMedical_callpoint :
      return EwLoadString( &_Const0444 );

    case ApplicationChannelTypeEvac_callpoint :
      return EwLoadString( &_Const0445 );

    case ApplicationChannelTypeOutput_routing :
      return EwLoadString( &_Const0446 );

    default : 
    {
      if (( type <= ApplicationChannelTypeInput32 ) && ( type >= ApplicationChannelTypeInput1 
          ))
        return EwConcatString( EwLoadString( &_Const0447 ), EwNewStringInt(( type 
          + 1 ) - ApplicationChannelTypeInput1, 0, 10 ));

      if (( type <= ApplicationChannelTypeOutput32 ) && ( type >= ApplicationChannelTypeOutput1 
          ))
        return EwConcatString( EwLoadString( &_Const0447 ), EwNewStringInt(( type 
          + 1 ) - ApplicationChannelTypeOutput1, 0, 10 ));
    }
  }

  return EwLoadString( &_Const02A9 );
}

/* 'C' function for method : 'Application::LibClass.SetConfig()' */
XBool ApplicationLibClass_SetConfig( ApplicationLibClass _this, XInt16 unit_num, 
  ApplicationDeviceConfig dev )
{
  XBool result;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  result = 0;
  {
    int i = 0;

    DeviceConfig d;
    Command cmd;

    d.type      = dev->combination;
    EwStringToAnsi( dev->location, d.location, SITE_MAX_STRING_LEN, '^' ); 
    d.numParams = dev->numparams;
    d.unit      = dev->unitnum;
    d.zone      = dev->zonenum;

    while ( dev->inputs[ i] != NULL && i < SITE_MAX_INPUT_CHANNELS )
    {
       d.input[ i].flags = (uint16_t) dev->inputs[ i]->flags;
       d.input[ i].delay = dev->inputs[ i]->delay;
       d.input[ i].action = dev->inputs[ i]->action;
       d.input[ i].type   = (ChannelType) dev->inputs[ i]->type;
       i++;
    }
    i = 0;
    while ( dev->outputs[ i] != NULL && i < SITE_MAX_OUTPUT_CHANNELS )
    {
       d.output[ i].flags = (uint16_t) dev->outputs[ i]->flags;
       d.output[ i].delay1 = dev->outputs[ i]->delay1;
       d.output[ i].delay2 = dev->outputs[ i]->delay2;

       d.output[ i].actions = dev->outputs[ i]->actions;
       d.output[ i].type   = (ChannelType) dev->outputs[ i]->type;
       i++;
    }
    for( i = 0; i < SITE_MAX_CHANNEL_PARAMS; i++ )
    {
       d.param[ i].code = (ParamType) dev->params[ i]->code;
       d.param[ i].channel =          dev->params[ i]->channel;
       d.param[ i].value =            dev->params[ i]->value;
       d.param[ i].min =            dev->params[ i]->min;
       d.param[ i].max =            dev->params[ i]->max;
       EwStringToAnsi( dev->params[ i]->name, d.param[ i].name, SITE_MAX_STRING_LEN, '^' ); 
    }

    if ( cmd.int0 != 0 )
    {
       cmd.int0 = unit_num;  // dest address
       cmd.int1 = (int) &d;        // new device data

       result = ( Command0( CMD_SET_DEVICE_ALL, &cmd ) == CMD_OK );
    }
  }
  return result;
}

/* 'C' function for method : 'Application::LibClass.GetParameter()' */
ApplicationParameter ApplicationLibClass_GetParameter( ApplicationLibClass _this, 
  XInt16 unitnum, XUInt8 index )
{
  ApplicationParameter param;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  param = EwNewObject( ApplicationParameter, 0 );

  if ( param != 0 )
    {
      if ( index < SITE_MAX_CHANNEL_PARAMS )
      {
       Command cmd;

       cmd.int0 = (int)unitnum & 0xFFFF;
       Command0( CMD_GET_DEVICE, &cmd );

       DeviceConfig* d = (DeviceConfig*) cmd.int0;
       Parameter* p = d->param + index;

       if ( d != NULL ) 
       {         
         param->code = (ParamType) p->code;
         param->channel =  p->channel;
         param->value   =  p->value;
         param->min     =  p->min;
         param->max     =  p->max;
         EwStringToAnsi( param->name, p->name, SITE_MAX_STRING_LEN, '^' ); 
         return param;
       }
      }
    }

  return 0;
}

/* 'C' function for method : 'Application::LibClass.NumDevsInZone()' */
XInt32 ApplicationLibClass_NumDevsInZone( ApplicationLibClass _this, XUInt8 zone )
{
  XInt32 numdevs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  numdevs = 4;
  {
    Command cmd;

    cmd.int0 = (int) zone;
    Command0( CMD_GET_NUM_DEVS_IN_ZONE, &cmd );
    numdevs = cmd.int0;
  }
  return numdevs;
}

/* 'C' function for method : 'Application::LibClass.GetDevInZone()' */
XInt16 ApplicationLibClass_GetDevInZone( ApplicationLibClass _this, XInt32 zone, 
  XInt32 devno )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = zone;
    cmd.int1 = devno;
    Command0( CMD_GET_DEV_IN_ZONE, &cmd );
    DeviceConfig* device = (DeviceConfig*) cmd.int0;

    return device->unit;
  }
  return (XInt16)( devno + 1 );
}

/* Wrapper function for the non virtual method : 'Application::LibClass.GetDevInZone()' */
XInt16 ApplicationLibClass__GetDevInZone( void* _this, XInt32 zone, XInt32 devno )
{
  return ApplicationLibClass_GetDevInZone((ApplicationLibClass)_this, zone, devno );
}

/* 'C' function for method : 'Application::LibClass.GetDevice()' */
ApplicationDevice ApplicationLibClass_GetDevice( ApplicationLibClass _this, XInt16 
  unit_num )
{
  ApplicationDevice dev;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  dev = EwNewObject( ApplicationDevice, 0 );
  {
    Command cmd;

    cmd.int0 = (int)unit_num & 0xFFFF;
    Command0( CMD_FIND_DEVICE_FROM_UNIT, &cmd );

    Device* d = (Device*) cmd.int0;

    if ( d != NULL ) 
    {
      for( int n = 0; n < SITE_MAX_INPUT_CHANNELS; n++ )
      {
         dev->flags[n]   = d->flags[n];    
      }
      dev->settings = d->settings;
      return dev; 
    }
  }
  return 0;
}

/* 'C' function for method : 'Application::LibClass.NumZonesWithDevices()' */
XInt32 ApplicationLibClass_NumZonesWithDevices( ApplicationLibClass _this )
{
  XInt32 z;
  XInt32 usedzones = 0;

  for ( z = 1; z <= 96; z = z + 1 )
  {
    if ( ApplicationLibClass_NumDevsInZone( _this, (XUInt8)z ) > 0 )
      usedzones = usedzones + 1;
  }

  return usedzones;
}

/* 'C' function for method : 'Application::LibClass.GetZoneFlags()' */
XSet ApplicationLibClass_GetZoneFlags( ApplicationLibClass _this, XInt16 zone )
{
  XSet zf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  zf = 0;
  {
    Command cmd;
    cmd.int0 = zone;
    Command0( CMD_GET_ZONE_FLAGS, &cmd );

    zf = (ApplicationZoneFlags) cmd.int0;
  }
  return zf;
}

/* 'C' function for method : 'Application::LibClass.SetZoneFlags()' */
void ApplicationLibClass_SetZoneFlags( ApplicationLibClass _this, XInt16 zone, XSet 
  flags )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  Command2( CMD_SET_ZONE_FLAGS, zone, flags );
}

/* 'C' function for method : 'Application::LibClass.SetDevice()' */
void ApplicationLibClass_SetDevice( ApplicationLibClass _this, XInt16 unit_num, 
  ApplicationDevice dev )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = (int)unit_num & 0xFFFF;
    Command0( CMD_FIND_DEVICE_FROM_UNIT, &cmd );

    Device* d = (Device*) cmd.int0;

    if ( d != NULL ) 
    {
      for( int n = 0; n < SITE_MAX_INPUT_CHANNELS; n++ )
      {
         d->flags[n]   = dev->flags[n];    
      }
      d->settings = dev->settings; 
    }
  }
}

/* 'C' function for method : 'Application::LibClass.SwitchOuput()' */
void ApplicationLibClass_SwitchOuput( ApplicationLibClass _this, XInt16 UnitNum, 
  XUInt8 ChanNum, XEnum profile, XBool state )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = (int) UnitNum;
    cmd.int1 = (int) ChanNum;
    cmd.int2 = (int) state;
    cmd.int3 = (int) profile;

    Command0( CMD_SET_OUTPUT_CHANNEL, &cmd ) == CMD_OK;
  }
}

/* 'C' function for method : 'Application::LibClass.ProfileName()' */
XString ApplicationLibClass_ProfileName( ApplicationLibClass _this, XEnum action )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( action )
  {
    case ApplicationActionFire :
      return EwLoadString( &_Const01F1 );

    case ApplicationActionFirstAid :
      return EwLoadString( &_Const030E );

    case ApplicationActionSecurity :
      return EwLoadString( &_Const0271 );

    case ApplicationActionTest :
      return EwLoadString( &_Const0448 );

    case ApplicationActionSilentTest :
      return EwLoadString( &_Const0449 );

    case ApplicationActionEvacuation :
      return EwLoadString( &_Const044A );

    case ApplicationActionGeneral :
      return EwLoadString( &_Const0307 );

    case ApplicationActionFault :
      return EwLoadString( &_Const01F0 );

    default : 
      return EwLoadString( &_Const0434 );
  }
}

/* 'C' function for method : 'Application::LibClass.TypeBitmap()' */
ResourcesBitmap ApplicationLibClass_TypeBitmap( ApplicationLibClass _this, XEnum 
  type )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( type )
  {
    case ApplicationChannelTypeNone :
      return 0;

    case ApplicationChannelTypeSmoke :
      return EwLoadResource( &ApplicationSmokeBitmap, ResourcesBitmap );

    case ApplicationChannelTypeHeat :
      return EwLoadResource( &ApplicationHeatSensorBitmap, ResourcesBitmap );

    case ApplicationChannelTypeCo :
      return EwLoadResource( &ApplicationCO, ResourcesBitmap );

    case ApplicationChannelTypePir :
      return EwLoadResource( &ApplicationPIRBitmap, ResourcesBitmap );

    case ApplicationChannelTypeSounder :
      return EwLoadResource( &ApplicationSounder, ResourcesBitmap );

    case ApplicationChannelTypeBeacon :
      return EwLoadResource( &ApplicationBeacon, ResourcesBitmap );

    case ApplicationChannelTypeFire_callpoint :
      return EwLoadResource( &ApplicationFireAlarmBitmap, ResourcesBitmap );

    case ApplicationChannelTypeStatus_indicator_led :
      return 0;

    case ApplicationChannelTypeVisual_indicator :
      return EwLoadResource( &ApplicationVI, ResourcesBitmap );

    case ApplicationChannelTypeSounder_visual_indicator_combined :
      return EwLoadResource( &ApplicationSounderVI, ResourcesBitmap );

    case ApplicationChannelTypeMedical_callpoint :
      return EwLoadResource( &ApplicationGreenCallpointBitmap, ResourcesBitmap );

    case ApplicationChannelTypeEvac_callpoint :
      return EwLoadResource( &Applicationevacuate, ResourcesBitmap );

    case ApplicationChannelTypeOutput_routing :
      return EwLoadResource( &ApplicationFireRouting, ResourcesBitmap );

    default : 
    {
      if (( type <= ApplicationChannelTypeInput32 ) && ( type >= ApplicationChannelTypeInput1 
          ))
        return EwLoadResource( &ApplicationGeneralInput, ResourcesBitmap );

      if (( type <= ApplicationChannelTypeOutput32 ) && ( type >= ApplicationChannelTypeOutput1 
          ))
        return EwLoadResource( &ApplicationGeneralOutput, ResourcesBitmap );
    }
  }

  return 0;
}

/* Variants derived from the class : 'Application::LibClass' */
EW_DEFINE_CLASS_VARIANTS( ApplicationLibClass )
EW_END_OF_CLASS_VARIANTS( ApplicationLibClass )

/* Virtual Method Table (VMT) for the class : 'Application::LibClass' */
EW_DEFINE_CLASS( ApplicationLibClass, XObject, "Application::LibClass" )
EW_END_OF_CLASS( ApplicationLibClass )

/* User defined auto object: 'Application::Lib' */
EW_DEFINE_AUTOOBJECT( ApplicationLib, ApplicationLibClass )

/* Initializer for the auto object 'Application::Lib' */
void ApplicationLib__Init( ApplicationLibClass _this )
{
  EW_UNUSED_ARG( _this );
}

/* Table with links to derived variants of the auto object : 'Application::Lib' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationLib )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationLib )

/* Initializer for the class 'Application::DeviceConfig' */
void ApplicationDeviceConfig__Init( ApplicationDeviceConfig _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDeviceConfig );
}

/* Re-Initializer for the class 'Application::DeviceConfig' */
void ApplicationDeviceConfig__ReInit( ApplicationDeviceConfig _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::DeviceConfig' */
void ApplicationDeviceConfig__Done( ApplicationDeviceConfig _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDeviceConfig );

  /* Release all used strings */
  EwReleaseString( &_this->location );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::DeviceConfig' */
void ApplicationDeviceConfig__Mark( ApplicationDeviceConfig _this )
{
  EwMarkObjects( _this->inputs );
  EwMarkObjects( _this->outputs );
  EwMarkObjects( _this->params );

  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'Application::DeviceConfig.NumInputs()' */
XInt32 ApplicationDeviceConfig_NumInputs( ApplicationDeviceConfig _this )
{
  XInt32 n = 0;

  while (( _this->inputs[ EwCheckIndex( n, 32 )] != 0 ) && ( _this->inputs[ EwCheckIndex( 
         n, 32 )]->type != ApplicationChannelTypeNone ))
  {
    n = n + 1;
  }

  return n;
}

/* 'C' function for method : 'Application::DeviceConfig.NumOutputs()' */
XInt32 ApplicationDeviceConfig_NumOutputs( ApplicationDeviceConfig _this )
{
  XInt32 n = 0;

  while (( _this->outputs[ EwCheckIndex( n, 32 )] != 0 ) && ( _this->outputs[ EwCheckIndex( 
         n, 32 )]->type != ApplicationChannelTypeNone ))
  {
    n = n + 1;
  }

  return n;
}

/* Default onget method for the property 'combination' */
XUInt8 ApplicationDeviceConfig_OnGetcombination( ApplicationDeviceConfig _this )
{
  return _this->combination;
}

/* Wrapper function for the non virtual method : 'Application::DeviceConfig.OnGetcombination()' */
XUInt8 ApplicationDeviceConfig__OnGetcombination( void* _this )
{
  return ApplicationDeviceConfig_OnGetcombination((ApplicationDeviceConfig)_this );
}

/* Default onset method for the property 'combination' */
void ApplicationDeviceConfig_OnSetcombination( ApplicationDeviceConfig _this, XUInt8 
  value )
{
  _this->combination = value;
}

/* Wrapper function for the non virtual method : 'Application::DeviceConfig.OnSetcombination()' */
void ApplicationDeviceConfig__OnSetcombination( void* _this, XUInt8 value )
{
  ApplicationDeviceConfig_OnSetcombination((ApplicationDeviceConfig)_this, value );
}

/* Default onget method for the property 'numparams' */
XUInt8 ApplicationDeviceConfig_OnGetnumparams( ApplicationDeviceConfig _this )
{
  return _this->numparams;
}

/* Wrapper function for the non virtual method : 'Application::DeviceConfig.OnGetnumparams()' */
XUInt8 ApplicationDeviceConfig__OnGetnumparams( void* _this )
{
  return ApplicationDeviceConfig_OnGetnumparams((ApplicationDeviceConfig)_this );
}

/* Default onset method for the property 'numparams' */
void ApplicationDeviceConfig_OnSetnumparams( ApplicationDeviceConfig _this, XUInt8 
  value )
{
  _this->numparams = value;
}

/* Wrapper function for the non virtual method : 'Application::DeviceConfig.OnSetnumparams()' */
void ApplicationDeviceConfig__OnSetnumparams( void* _this, XUInt8 value )
{
  ApplicationDeviceConfig_OnSetnumparams((ApplicationDeviceConfig)_this, value );
}

/* Variants derived from the class : 'Application::DeviceConfig' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDeviceConfig )
EW_END_OF_CLASS_VARIANTS( ApplicationDeviceConfig )

/* Virtual Method Table (VMT) for the class : 'Application::DeviceConfig' */
EW_DEFINE_CLASS( ApplicationDeviceConfig, XObject, "Application::DeviceConfig" )
EW_END_OF_CLASS( ApplicationDeviceConfig )

/* Initializer for the class 'Application::InputChannel' */
void ApplicationInputChannel__Init( ApplicationInputChannel _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationInputChannel );

  /* ... and initialize objects, variables, properties, etc. */
  _this->flags = 0;
  _this->type = ApplicationChannelTypeNone;
}

/* Re-Initializer for the class 'Application::InputChannel' */
void ApplicationInputChannel__ReInit( ApplicationInputChannel _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::InputChannel' */
void ApplicationInputChannel__Done( ApplicationInputChannel _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationInputChannel );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::InputChannel' */
void ApplicationInputChannel__Mark( ApplicationInputChannel _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::InputChannel' */
EW_DEFINE_CLASS_VARIANTS( ApplicationInputChannel )
EW_END_OF_CLASS_VARIANTS( ApplicationInputChannel )

/* Virtual Method Table (VMT) for the class : 'Application::InputChannel' */
EW_DEFINE_CLASS( ApplicationInputChannel, XObject, "Application::InputChannel" )
EW_END_OF_CLASS( ApplicationInputChannel )

/* Initializer for the class 'Application::OutputChannel' */
void ApplicationOutputChannel__Init( ApplicationOutputChannel _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationOutputChannel );

  /* ... and initialize objects, variables, properties, etc. */
  _this->flags = 0;
  _this->actions = 0;
  _this->type = ApplicationChannelTypeNone;
}

/* Re-Initializer for the class 'Application::OutputChannel' */
void ApplicationOutputChannel__ReInit( ApplicationOutputChannel _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::OutputChannel' */
void ApplicationOutputChannel__Done( ApplicationOutputChannel _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationOutputChannel );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::OutputChannel' */
void ApplicationOutputChannel__Mark( ApplicationOutputChannel _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::OutputChannel' */
EW_DEFINE_CLASS_VARIANTS( ApplicationOutputChannel )
EW_END_OF_CLASS_VARIANTS( ApplicationOutputChannel )

/* Virtual Method Table (VMT) for the class : 'Application::OutputChannel' */
EW_DEFINE_CLASS( ApplicationOutputChannel, XObject, "Application::OutputChannel" )
EW_END_OF_CLASS( ApplicationOutputChannel )

/* Initializer for the class 'Application::Parameter' */
void ApplicationParameter__Init( ApplicationParameter _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationParameter );

  /* ... and initialize objects, variables, properties, etc. */
  _this->code = ApplicationParamCodeUnused;
}

/* Re-Initializer for the class 'Application::Parameter' */
void ApplicationParameter__ReInit( ApplicationParameter _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::Parameter' */
void ApplicationParameter__Done( ApplicationParameter _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationParameter );

  /* Release all used strings */
  EwReleaseString( &_this->name );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Parameter' */
void ApplicationParameter__Mark( ApplicationParameter _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Default onget method for the property 'channel' */
XUInt8 ApplicationParameter_OnGetchannel( ApplicationParameter _this )
{
  return _this->channel;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetchannel()' */
XUInt8 ApplicationParameter__OnGetchannel( void* _this )
{
  return ApplicationParameter_OnGetchannel((ApplicationParameter)_this );
}

/* Default onset method for the property 'channel' */
void ApplicationParameter_OnSetchannel( ApplicationParameter _this, XUInt8 value )
{
  _this->channel = value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetchannel()' */
void ApplicationParameter__OnSetchannel( void* _this, XUInt8 value )
{
  ApplicationParameter_OnSetchannel((ApplicationParameter)_this, value );
}

/* Default onget method for the property 'name' */
XString ApplicationParameter_OnGetname( ApplicationParameter _this )
{
  return _this->name;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetname()' */
XString ApplicationParameter__OnGetname( void* _this )
{
  return ApplicationParameter_OnGetname((ApplicationParameter)_this );
}

/* Default onset method for the property 'name' */
void ApplicationParameter_OnSetname( ApplicationParameter _this, XString value )
{
  EwRetainString( &_this->name, value );
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetname()' */
void ApplicationParameter__OnSetname( void* _this, XString value )
{
  ApplicationParameter_OnSetname((ApplicationParameter)_this, value );
}

/* Default onget method for the property 'value' */
XInt16 ApplicationParameter_OnGetvalue( ApplicationParameter _this )
{
  return _this->value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetvalue()' */
XInt16 ApplicationParameter__OnGetvalue( void* _this )
{
  return ApplicationParameter_OnGetvalue((ApplicationParameter)_this );
}

/* Default onset method for the property 'value' */
void ApplicationParameter_OnSetvalue( ApplicationParameter _this, XInt16 value )
{
  _this->value = value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetvalue()' */
void ApplicationParameter__OnSetvalue( void* _this, XInt16 value )
{
  ApplicationParameter_OnSetvalue((ApplicationParameter)_this, value );
}

/* Default onget method for the property 'code' */
XEnum ApplicationParameter_OnGetcode( ApplicationParameter _this )
{
  return _this->code;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetcode()' */
XEnum ApplicationParameter__OnGetcode( void* _this )
{
  return ApplicationParameter_OnGetcode((ApplicationParameter)_this );
}

/* Default onset method for the property 'code' */
void ApplicationParameter_OnSetcode( ApplicationParameter _this, XEnum value )
{
  _this->code = value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetcode()' */
void ApplicationParameter__OnSetcode( void* _this, XEnum value )
{
  ApplicationParameter_OnSetcode((ApplicationParameter)_this, value );
}

/* Default onget method for the property 'max' */
XInt16 ApplicationParameter_OnGetmax( ApplicationParameter _this )
{
  return _this->max;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetmax()' */
XInt16 ApplicationParameter__OnGetmax( void* _this )
{
  return ApplicationParameter_OnGetmax((ApplicationParameter)_this );
}

/* Default onset method for the property 'max' */
void ApplicationParameter_OnSetmax( ApplicationParameter _this, XInt16 value )
{
  _this->max = value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetmax()' */
void ApplicationParameter__OnSetmax( void* _this, XInt16 value )
{
  ApplicationParameter_OnSetmax((ApplicationParameter)_this, value );
}

/* Default onget method for the property 'min' */
XInt16 ApplicationParameter_OnGetmin( ApplicationParameter _this )
{
  return _this->min;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnGetmin()' */
XInt16 ApplicationParameter__OnGetmin( void* _this )
{
  return ApplicationParameter_OnGetmin((ApplicationParameter)_this );
}

/* Default onset method for the property 'min' */
void ApplicationParameter_OnSetmin( ApplicationParameter _this, XInt16 value )
{
  _this->min = value;
}

/* Wrapper function for the non virtual method : 'Application::Parameter.OnSetmin()' */
void ApplicationParameter__OnSetmin( void* _this, XInt16 value )
{
  ApplicationParameter_OnSetmin((ApplicationParameter)_this, value );
}

/* Variants derived from the class : 'Application::Parameter' */
EW_DEFINE_CLASS_VARIANTS( ApplicationParameter )
EW_END_OF_CLASS_VARIANTS( ApplicationParameter )

/* Virtual Method Table (VMT) for the class : 'Application::Parameter' */
EW_DEFINE_CLASS( ApplicationParameter, XObject, "Application::Parameter" )
EW_END_OF_CLASS( ApplicationParameter )

/* Initializer for the class 'Application::ParamSlider' */
void ApplicationParamSlider__Init( ApplicationParamSlider _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationParamSlider );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const044B );
  CoreRectView__OnSetBounds( &_this->Text2, _Const044C );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const0018 );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const044D );
  WidgetSetHorizontalSlider_OnSetStepSize( &_this->HorzBarSlider, 1 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 14 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNullSlot;
  _this->HorzBarSlider.OnEnd = EwNullSlot;
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &ApplicationNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
}

/* Re-Initializer for the class 'Application::ParamSlider' */
void ApplicationParamSlider__ReInit( ApplicationParamSlider _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text2 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
}

/* Finalizer method for the class 'Application::ParamSlider' */
void ApplicationParamSlider__Done( ApplicationParamSlider _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationParamSlider );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text2 );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ParamSlider' */
void ApplicationParamSlider__Mark( ApplicationParamSlider _this )
{
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( _this->param );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::ParamSlider' */
EW_DEFINE_CLASS_VARIANTS( ApplicationParamSlider )
EW_END_OF_CLASS_VARIANTS( ApplicationParamSlider )

/* Virtual Method Table (VMT) for the class : 'Application::ParamSlider' */
EW_DEFINE_CLASS( ApplicationParamSlider, CoreGroup, "Application::ParamSlider" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationParamSlider )

/* Initializer for the class 'Application::ParamToggle' */
void ApplicationParamToggle__Init( ApplicationParamToggle _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationParamToggle );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const044E );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const044F );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const044C );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &WidgetSetSwitch_Medium, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::ParamToggle' */
void ApplicationParamToggle__ReInit( ApplicationParamToggle _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'Application::ParamToggle' */
void ApplicationParamToggle__Done( ApplicationParamToggle _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationParamToggle );

  /* Finalize all embedded objects */
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ParamToggle' */
void ApplicationParamToggle__Mark( ApplicationParamToggle _this )
{
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( _this->param );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::ParamToggle' */
EW_DEFINE_CLASS_VARIANTS( ApplicationParamToggle )
EW_END_OF_CLASS_VARIANTS( ApplicationParamToggle )

/* Virtual Method Table (VMT) for the class : 'Application::ParamToggle' */
EW_DEFINE_CLASS( ApplicationParamToggle, CoreGroup, "Application::ParamToggle" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationParamToggle )

/* Initializer for the class 'Application::ParamSpecific' */
void ApplicationParamSpecific__Init( ApplicationParamSpecific _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationParamSpecific );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const032E );
  CoreRectView__OnSetBounds( &_this->Text, _Const0311 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0450 ));
  ViewsText_OnSetColor( &_this->Text, _Const0018 );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0451 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0452 );
  ViewsLine_OnSetColor( &_this->Line, _Const0018 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0453 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const0018 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'Application::ParamSpecific' */
void ApplicationParamSpecific__ReInit( ApplicationParamSpecific _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'Application::ParamSpecific' */
void ApplicationParamSpecific__Done( ApplicationParamSpecific _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationParamSpecific );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::ParamSpecific' */
void ApplicationParamSpecific__Mark( ApplicationParamSpecific _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::ParamSpecific' */
EW_DEFINE_CLASS_VARIANTS( ApplicationParamSpecific )
EW_END_OF_CLASS_VARIANTS( ApplicationParamSpecific )

/* Virtual Method Table (VMT) for the class : 'Application::ParamSpecific' */
EW_DEFINE_CLASS( ApplicationParamSpecific, CoreGroup, "Application::ParamSpecific" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_GetIndexOfView,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( ApplicationParamSpecific )

/* Initializer for the class 'Application::Device' */
void ApplicationDevice__Init( ApplicationDevice _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( ApplicationDevice );

  /* ... and initialize objects, variables, properties, etc. */
  _this->settings = 0;
}

/* Re-Initializer for the class 'Application::Device' */
void ApplicationDevice__ReInit( ApplicationDevice _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'Application::Device' */
void ApplicationDevice__Done( ApplicationDevice _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( ApplicationDevice );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'Application::Device' */
void ApplicationDevice__Mark( ApplicationDevice _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'Application::Device' */
EW_DEFINE_CLASS_VARIANTS( ApplicationDevice )
EW_END_OF_CLASS_VARIANTS( ApplicationDevice )

/* Virtual Method Table (VMT) for the class : 'Application::Device' */
EW_DEFINE_CLASS( ApplicationDevice, XObject, "Application::Device" )
EW_END_OF_CLASS( ApplicationDevice )

/* User defined auto object: 'Application::DummyConfig' */
EW_DEFINE_AUTOOBJECT( ApplicationDummyConfig, ApplicationDeviceConfig )

/* Initializer for the auto object 'Application::DummyConfig' */
void ApplicationDummyConfig__Init( ApplicationDeviceConfig _this )
{
  _this->zonenum = 1;
  _this->unitnum = 1;
  _this->combination = 10;
  _this->numparams = 0;
  EwRetainString( &_this->location, EwLoadString( &_Const0454 ));
}

/* Table with links to derived variants of the auto object : 'Application::DummyConfig' */
EW_DEFINE_AUTOOBJECT_VARIANTS( ApplicationDummyConfig )
EW_END_OF_AUTOOBJECT_VARIANTS( ApplicationDummyConfig )

/* Bitmap resource : 'Application::FireRouting' */
EW_DEFINE_BITMAP_RES( ApplicationFireRouting )
  EW_BITMAP_FRAMES( ApplicationFireRouting, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationFireRouting, Default )       /* ratio 39.51 % */
    0xFC09FF00, 0xBBDDCF17, 0x157CE07F, 0x0E4BB7FB, 0xB2AF7FA0, 0x0AE7F9A4, 0x168A1A0B,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFE6A2D2B,
    0xE7D37AE5, 0xB757B61F, 0x39DBE5FE, 0x7CCEE050, 0xB2318CFF, 0x1ACB7104, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0x9264C4E2, 0x37ABFD38, 0xA1D05E6F, 0xA53AC353,
    0xD96C550A, 0xAAC966B1, 0x5FF12885, 0x20AB5134, 0x174B4CC2, 0x1EB3DDAD, 0xBB5DDEDB,
    0x3B2F6E97, 0xE5E2EA84, 0xE130583B, 0x6960FFC3, 0x2957DA39, 0xE86C2E2C, 0xE672BAB6,
    0x132E295F, 0xF5D2E9C1, 0x783D9F8F, 0xFAB95D36, 0xCC4BAA97, 0x171B95C9, 0x15117D56,
    0x30C9CA96, 0x6FB7FA6D, 0xD076C1DE, 0x8563FD9A, 0x56BFCE66, 0x049F83AB, 0x9AD6317E,
    0x31DAFF3A, 0x5ED0363B, 0xFEF781F3, 0xEC1633A9, 0x6F322ADF, 0x7A576B0C, 0x6E45CB4A,
    0xE3FB46B0, 0xC0B9EF47, 0x65BEF4E8, 0xCF8BA7FB, 0xC5C2DFA0, 0xEA998966, 0xC875E44B,
    0xF7C40A16, 0x723B5F0F, 0x4D63C0FF, 0x83C13A34, 0x99FC40CE, 0xFF2F8C13, 0x19858298,
    0x4A87C5DB, 0x33FC6415, 0x20A4290D, 0xED3D99D8, 0x34CD9410, 0x8E63D8FF, 0x13D61A37,
    0xD4FF368E, 0x111E8702, 0x4D53345E, 0x9D918CB0, 0xF2509132, 0x1CF73F4F, 0x003B0F84,
    0x22C86302, 0x44A248FF, 0x9304FF16, 0xE8FF2388, 0xFF3A8F23, 0x3C8FB3F8, 0xC822F4FF,
    0x42C4FF21, 0x92551C86, 0x5B964701, 0x96A5D95A, 0xA5E9865C, 0xF2C66098, 0x1E051E06,
    0xA03E4FD8, 0x2849F345, 0xC4923CFF, 0x42D0FF15, 0xC8FF1F07, 0xCF35CDD3, 0x2A4AA369,
    0x8FF76110, 0xA982652C, 0x291316CA, 0x2436CEE5, 0x30CCA3BA, 0x0E73DCFF, 0xA749FB89,
    0x409E42CC, 0x135B0601, 0x17C51281, 0x0DB37D04, 0x338E2174, 0x10CA3B2A, 0x0B32DC93,
    0xAAEAC3B5, 0x6AEABEAD, 0x6AC2B4AC, 0x50DB3CEB, 0xF13E6A43, 0x244FF3A4, 0xD2017450,
    0x0840562A, 0x68B22CCE, 0xE73C0FA8, 0x33CEF3FC, 0xEAAAB9CC, 0x3374FFAC, 0xF5482C0B,
    0xE7739024, 0x390F5A91, 0x8C03FCDD, 0xC6588920, 0x08BF4C45, 0xEF7F4882, 0xA92DBB34,
    0x291BC6DD, 0x1BCAF3BC, 0xDEF4BD9D, 0xF867621B, 0x258CC680, 0x8A83FC99, 0x32D54717,
    0x54EF9E07, 0xDCBD0D03, 0x7F30EBD6, 0x9483ED02, 0x33D4F43E, 0x66EFC590, 0xE53DAFBC,
    0x310E9890, 0x0EA7F4BF, 0xDC371A80, 0x5D5BC630, 0x2840B2AC, 0xCA72BCB7, 0xEFB79B2C,
    0xB9324FBB, 0xCDD531CE, 0x32358DD3, 0x6D33DC9B, 0xCF081CF2, 0x6520D235, 0xCAC92A8D,
    0xF8CFB28B, 0xD3B3FC96, 0x352CCF50, 0x5D3F53D3, 0x5354BCB5, 0xD27F328D, 0xC089F278,
    0x94A76462, 0x42308030, 0x6756D2EF, 0xFACCB69D, 0xBE76CDB6, 0x751DBB56, 0x8D4B72C3,
    0xBA553EB2, 0xC5584761, 0xD9C92218, 0xB6BDCF6B, 0x73CA5093, 0x4D0433CD, 0xCC924CC3,
    0x8023BA92, 0x4C9344F0, 0x3D14DA9E, 0x964D579E, 0x28388F57, 0x320D03BE, 0x0E03A291,
    0x43B99EA9, 0x10CE3590, 0xFBEA4D54, 0x73CEC3D0, 0x0E23A8F8, 0x89606945, 0x2B7FDF56,
    0x0ED3770D, 0x3DB6ABEB, 0x0B0800EB, 0xD2CE581A, 0xF0E53FDB, 0xDDA90B82, 0x9D4AC2B4,
    0xBB52B7C7, 0xED02BD4E, 0x14812F6B, 0x672CCFF2, 0x268CE6F8, 0xCEECC5B3, 0x72C62035,
    0x60672C7C, 0xCB33CEB9, 0x25CD073C, 0x1AF75898, 0x6E937EDF, 0x2EA8E98F, 0xB42E4E24,
    0x2F0E43FC, 0x005FF939, 0x7F8B6177, 0xBB180398, 0xC63A5488, 0x987A33F1, 0x99961C23,
    0x53AC1882, 0x22B16AAC, 0x46A2EF2E, 0x92013C27, 0x0B81384D, 0x39877291, 0x52C23718,
    0x1F262184, 0xB42085F1, 0xA47FB997, 0x9BED19C3, 0x414E8550, 0xE3FC3185, 0x8610C51C,
    0x07F182CA, 0x3286FC41, 0xEE443B7C, 0x678ED5E6, 0x5C142E4C, 0x102AC8B8, 0x35739D65,
    0xC0AB2631, 0x01FF13CC, 0xA935AF0D, 0x57DB981F, 0x8FF8163D, 0x0B61344C, 0x148510FF,
    0x591080C2, 0xD55482BC, 0x689C0508, 0x2C48A158, 0x71FD0B41, 0x11F4B347, 0x22A5038F,
    0x20A0710D, 0x08818484, 0x62C935B3, 0x6E8688EB, 0x5005013E, 0x2E0BCA65, 0x8673CFCC,
    0x112A0861, 0x13B7420B, 0x21D0A922, 0x83FC5E8C, 0x16104E13, 0x8C41FE6B, 0x8AE23C46,
    0x78CE7459, 0x6E0F23CA, 0xDB1E2CF0, 0x989299E0, 0xF9362DD4, 0xA27C94AA, 0xF5463807,
    0x03D99547, 0x878C101D, 0xC711AA36, 0x1F8B7611, 0x3CC7FAFD, 0x6F2793D4, 0x3933A360,
    0x132ACE7A, 0x10B09C73, 0x209110A3, 0xF5523AD5, 0x517C4C0F, 0x4478C63B, 0xC581FD34,
    0x72ECF997, 0x08C769FD, 0xD18E71ED, 0x101D23DD, 0xD4ECE73C, 0x865C2219, 0xFCEF9CA8,
    0xB5C056C6, 0x8B847295, 0xC6E0E21E, 0xA219F256, 0x9D30298E, 0x041D0CE8, 0x120E31EB,
    0x6878E2BD, 0xF61B45C1, 0x34770FF0, 0x793A1943, 0x116281C7, 0xB26D3407, 0x04808D18,
    0x9CF9BD28, 0x68A36078, 0x51C3009F, 0x4D8FF90E, 0x2691013C, 0x50142945, 0x3E4BC99A,
    0x989A5841, 0xD144A6C2, 0xB1208B85, 0x42F8A432, 0x86214C4C, 0x13C3FC36, 0x2650805A,
    0x93D25A56, 0x441343FE, 0x50A814F5, 0xE6A61613, 0xA07E0EE2, 0xE1D63CCD, 0x642C64C2,
    0x03285814, 0xD5A0AA69, 0xAB757054, 0x316AFD5D, 0x6E37F11E, 0xEF6D1166, 0x5234C772,
    0x542C09E7, 0x00A92FA8, 0xC0E62DA2, 0x02A86C50, 0x0760FF15, 0x57A87432, 0x18C72A1D,
    0x2DC6F8FF, 0x3DA7516A, 0xA41FE204, 0x908B61A8, 0x402B8A82, 0xC0A91B28, 0xF4943FAB,
    0xA2D8708F, 0xE8C8C87F, 0x8901943F, 0xB3A325BF, 0x24C48D9B, 0xD00CD392, 0x435BAE09,
    0xB6281023, 0xC8949A90, 0xA06A5070, 0x41AA3FC3, 0x6C88518A, 0x65FA9576, 0x8D31DB32,
    0x1062FD85, 0x18C502E5, 0x5897DB17, 0x0B74F6C4, 0x187951BB, 0x987BA4D7, 0x6DCE1FCE,
    0xA20E3E52, 0xC682E95C, 0x6EB5D31F, 0x1C98E893, 0x142E8067, 0xD8490A0F, 0x78A36B42,
    0x4D40835C, 0x792EA6EB, 0x44470C66, 0xDC2083D3, 0xA2537CA4, 0x75682B0A, 0xC3C87016,
    0x8A21AC3F, 0x14E3650C, 0x2906C578, 0x5293614C, 0x0326C29C, 0xFF7F6D9E, 0xD8500D41,
    0x4DB6C1B6, 0x614383E3, 0x21F45F5B, 0x6A309D30, 0xAEB10030, 0xBA50E474, 0xA45DEDD4,
    0x6F4F21CC, 0x9F5B02C0, 0x5B0FEA08, 0xB6F9988B, 0x4C9B3E38, 0x50DC1885, 0x2B6057AD,
    0xA060EB1F, 0x0FD3F8BC, 0xC3F0DD0E, 0x0F83D0BA, 0x17415153, 0x48C61713, 0x41520A96,
    0x684C0CF5, 0x6CBC9505, 0x51FD6E61, 0x4350781E, 0xC490CC37, 0xC12A7E25, 0xCBF8BF23,
    0x16057974, 0x52165512, 0x7816F974, 0x9A7483F8, 0x74CF3931, 0xBAF3B728, 0x71FE88C7,
    0x4864528D, 0xAA65C716, 0xE49CF791, 0x8802B2C5, 0x606910A4, 0xFE8B1165, 0x3C664F04,
    0x6C38264E, 0xDCF60B31, 0x50A3CD41, 0x3CC19F2C, 0xF52AC5E9, 0x180AFF1F, 0xA4DA0A3D,
    0x1DEDBD27, 0x306880D1, 0x552E5108, 0xA8D2B138, 0x7FA573EE, 0x4DB30861, 0x8B5297D7,
    0x71DC3E4E, 0x62546520, 0x8308ACCB, 0xD5ABEB4F, 0xD55A5354, 0x644C7919, 0xA80B3D2A,
    0x541E4926, 0xBA7966E5, 0xB56C0B21, 0x8C790CE2, 0xFD81242B, 0xC5236AEB, 0x05F8FF2A,
    0x12F5CA1F, 0xCBDB5214, 0x6275F6E0, 0x5C16128C, 0xDE4581B0, 0xB63005C8, 0xF5DB0637,
    0x36E2DB19, 0xACFBBC32, 0x02C89898, 0x4B2B620C, 0x2C915235, 0x2B0578AE, 0xB905815A,
    0x826DFDE3, 0xBF23FB5B, 0xE49503D0, 0xF4D00EF1, 0x3104E1E3, 0x41B43FC8, 0x09145E0B,
    0x4C488D10, 0xF06A7C17, 0x30BC1770, 0x720328B4, 0x338A71A6, 0x501E23CE, 0x004049EA,
    0x00000000

  EW_BITMAPS_TABLE( ApplicationFireRouting )
    EW_BITMAP( ApplicationFireRouting, Default )
EW_END_OF_BITMAP_RES( ApplicationFireRouting )

/* Table with links to derived variants of the bitmap resource : 'Application::FireRouting' */
EW_RES_WITHOUT_VARIANTS( ApplicationFireRouting )

/* Bitmap resource : 'Application::GeneralOutput' */
EW_DEFINE_BITMAP_RES( ApplicationGeneralOutput )
  EW_BITMAP_FRAMES( ApplicationGeneralOutput, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationGeneralOutput, Default )     /* ratio 24.23 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0x283A121E, 0x756B533F, 0x97AFF602, 0x071E63AA, 0xDE2EE475, 0xCE58B16A,
    0x55FB39FE, 0xFF7F3F4D, 0xE017EDFD, 0x6802027F, 0x94FD70E0, 0xFF4E1C07, 0x620942B8,
    0xCE9394E7, 0xA39CE93F, 0x48AD3FCE, 0xDE7D4B92, 0x354DD5F1, 0xCF23FCE2, 0x38922288,
    0xA2253CA2, 0x2C8A6278, 0x4C5AC8AE, 0x88C2A5AC, 0xA37CFF2D, 0x6E2B884D, 0xFF378D43,
    0x2CC84290, 0x21E7861C, 0x689A2D88, 0x16478AA4, 0x2A8BE289, 0x214A5659, 0xCCE35E40,
    0x63C0FF36, 0x8CE63FE5, 0x94860E73, 0x4817386C, 0xA6298081, 0x39926147, 0xA66697E6,
    0x659AE689, 0x38CD837E, 0xE2B9C64A, 0xC932499C, 0xECC86612, 0x7C3BDF92, 0x388E68B2,
    0x0CF35E5B, 0xF94CD695, 0x1A84A14F, 0x8AA1E88A, 0xA3E89A36, 0xE8BA428C, 0xC3A8EAA2,
    0xD2499C8E, 0xC1A6E489, 0x369838C1, 0xA71374D4, 0xC3FCF095, 0xB8FF3BE7, 0xABAA6AA3,
    0xAB0EEAAA, 0xEB0ABAAF, 0xDAD6B2AC, 0xAEB1ADEA, 0x98AECF1A, 0x9C69AA72, 0x5984B676,
    0x87B09F2D, 0xAE17398E, 0xED3ACEC8, 0x2F0C93FC, 0x8C53FCD0, 0x4B48CD2C, 0x4ED5B5AD,
    0xDAB5ED9B, 0xB76DEB62, 0x6E2B72E0, 0x838CE7B5, 0xFEE8AF4E, 0xCA289ACA, 0x79D83B09,
    0x89D2CD1D, 0x63ACFF2F, 0x52579569, 0xFF360CC3, 0x906332A0, 0x63887F00, 0x5AFB04A6,
    0x869E7027, 0xC42A0BC7, 0x3A4EA3FC, 0x8C5ACCEB, 0x6875682D, 0xA70258F1, 0xC0B0305B,
    0x77A77BB1, 0x0B83FD8E, 0x03FCC129, 0xFCD4314D, 0xBD270B23, 0xC0717720, 0xF32AFE44,
    0xDC762EC6, 0x25E182AE, 0x912B5537, 0x2CCFF2E8, 0x2692FC99, 0x3C65F47D, 0xB348C1B3,
    0xC1CE2C18, 0x2E08E2A9, 0x0DF38CFF, 0x439CFF39, 0x44ACB9CE, 0x2FD121B2, 0xD7F34D1B,
    0x123D2E9C, 0x5220A76B, 0x48D93FCB, 0xE18B0DC3, 0x29A7036C, 0x7002D087, 0xAD8331D1,
    0x7F3692F1, 0x8228D95C, 0x35B27900, 0xE119F6A6, 0x9260B084, 0x8D4DCE97, 0x8B7CF8AD,
    0xE3F8CE27, 0x4A1E478E, 0x035CDFE3, 0x2B77D1E7, 0x95BBB79D, 0x320B2305, 0xEA83BAA6,
    0x13FCF1AE, 0x3670374E, 0xFF348C23, 0x344C1330, 0x3B1EBFAD, 0x2ED3AEEC, 0xE7B3ED7B,
    0xB7EEFB8E, 0x3A3B0EF7, 0x798E6616, 0xCC79B2CD, 0x58DB5EB9, 0xA4BA0DF3, 0xF36A5BE2,
    0xFD195FD0, 0x4F57D2F3, 0x67CEF5FD, 0xEADDBC3F, 0x5F34CE6E, 0xCC329CB9, 0xAB36CB3F,
    0x50FFB32C, 0x7FBF0C93, 0xE00C5C9B, 0xBEFFC7ED, 0x2FCFF0FB, 0xD3F8FD7F, 0xC9857FAF,
    0xBAF76F72, 0x60DB1B37, 0x538BA642, 0xEC1DAC34, 0x9AABD5C8, 0xFC698C11, 0xE3726CA3,
    0xE29E909A, 0x2F6DA4B5, 0x126B086C, 0x0B018074, 0x55F021D0, 0x3FDD10EF, 0x658B4188,
    0x124183FC, 0x85054E0C, 0xCDB131B7, 0x037C3BC7, 0x015C2FD2, 0x23346A9F, 0x45B0FF1B,
    0xB883D828, 0x8566B214, 0xB0574417, 0x8C87713A, 0x4765F0F8, 0x88344A9C, 0xC1372FC1,
    0x7A3589C9, 0x289F1453, 0x515A2845, 0x44F1AC8A, 0x8EC15E1E, 0x1601EC4F, 0xDCE248C9,
    0x09C64890, 0x600F475E, 0x821F4A94, 0x94DE8AB1, 0x84668C71, 0xE8D8C023, 0x61F858C6,
    0x22F1A534, 0xC621E82C, 0x8FD1BE3E, 0x3D63D153, 0x60890168, 0xA3212064, 0x5C1C4A20,
    0xFCC908F1, 0x5C7191F1, 0x14802017, 0x02B8D632, 0x0B9B2D12, 0x98C0E82D, 0x16472481,
    0x23A4609B, 0x39490923, 0x2D92F0A6, 0xC626D8F3, 0x086C8BF1, 0xF90693A0, 0x90032C87,
    0x41C45948, 0xC610F68F, 0x4805AA2A, 0x18729653, 0x17E13CBB, 0x3F8A21ED, 0xFF9652D8,
    0xDF2C0008, 0xB084CCC2, 0xC0BA11E2, 0x80F8C780, 0xE3CC9A9D, 0x6524BE93, 0x4810F8CE,
    0x26A3CE34, 0x44088461, 0x0D0BD124, 0x0121332C, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( ApplicationGeneralOutput )
    EW_BITMAP( ApplicationGeneralOutput, Default )
EW_END_OF_BITMAP_RES( ApplicationGeneralOutput )

/* Table with links to derived variants of the bitmap resource : 'Application::GeneralOutput' */
EW_RES_WITHOUT_VARIANTS( ApplicationGeneralOutput )

/* Bitmap resource : 'Application::GeneralInput' */
EW_DEFINE_BITMAP_RES( ApplicationGeneralInput )
  EW_BITMAP_FRAMES( ApplicationGeneralInput, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationGeneralInput, Default )      /* ratio 24.54 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0x78BB921E, 0x7506A3CC, 0xD8EAA5EC, 0x809D5ABF, 0xBB23F721, 0xFF672C58,
    0x96AAFD9C, 0xFE7F7F7F, 0x5FE801FA, 0x3815FF80, 0x79E53F5C, 0xAD661E67, 0x3FCB9248,
    0xCEA39CE9, 0x9394E73F, 0x50AE3FCE, 0x7A4E1882, 0x388D5375, 0x6223C8FF, 0x288A2388,
    0x9A27890F, 0x2A8AE288, 0x82D316B2, 0x0A460E0A, 0xB3FCB321, 0xACDE350D, 0x20368DF8,
    0x2D88C2A6, 0x62C87E1D, 0x58A64489, 0xBA2790E4, 0x735E92A8, 0x93881481, 0xA4F47A50,
    0x49365194, 0x665695E5, 0x942B6539, 0x38CE683C, 0xCF03FCE7, 0xE35CFF98, 0x94FF36CC,
    0x568D4852, 0x38CD837D, 0xE2A9C648, 0xC92A479C, 0x9CD65F12, 0x689E4FF9, 0x9EA7B9F2,
    0xE80A067E, 0xFA127DA0, 0x5E68A167, 0xE69A0CF3, 0x8AA61388, 0x0FFA44EF, 0x67E0BB32,
    0xB0EA3A95, 0x7491E723, 0x7069E91A, 0xCEE57A2F, 0xEA8CFFA8, 0x9AA4A94E, 0xAAA9EA8A,
    0xABEA9AB6, 0xEABAC2AC, 0x23BE913F, 0xFE9D9926, 0xDD350DA3, 0xAFCF155C, 0x6B9A7E9B,
    0xC4B676AE, 0x34B23157, 0xCAB20FF3, 0xB26CBB32, 0xAD0B36CF, 0x6B4ED4B3, 0xFED8B4AD,
    0xD02F0C93, 0x3ACEC3FC, 0x8E88ACED, 0xF2D61339, 0x9D567C89, 0xC13A0E33, 0x702C4BB6,
    0x6C6728A2, 0x86B1E18C, 0x50FF8FCA, 0xB7360CC3, 0x3ACFF3C2, 0x4B33FE99, 0xD7CCBE27,
    0x821E5591, 0x0CA72C38, 0x826C5A7F, 0x17ABD2F5, 0xC2D8C587, 0xA4EAAA94, 0xBC3FCEB3,
    0x658C42A0, 0x70DBBB09, 0x7BC5AC9C, 0x4E30C4A7, 0xB254DC95, 0x3FCBD270, 0xCD4314D0,
    0x1290B83F, 0x814467CC, 0xC2C2E42C, 0xBC22DC8E, 0x1E7C42F2, 0x39595ECA, 0xFCBF264B,
    0xBA244AD3, 0xC85C0720, 0x30EC8B3C, 0x6C46A170, 0x44AC65B5, 0xE439E0F2, 0x37CE3BB0,
    0x8AA3FCE4, 0xACE8B823, 0x4F68CFB0, 0x43D55B2D, 0x2997CD5F, 0x4FF2D087, 0xA9C0DB38,
    0x70D23662, 0x8829CFF3, 0xD9E412D4, 0x6EDE073D, 0x148F41C9, 0x1F88E198, 0x8B53789C,
    0xE3F8D287, 0x0FFCAD1D, 0x55E4982C, 0xC2B585E1, 0x1E358C5C, 0x53E6C209, 0x77635CDF,
    0x670752DA, 0x3163BCF2, 0xFF344C13, 0xEBBACEA8, 0xFB1EAFAD, 0x6EC3B2EB, 0xD3B8ED7B,
    0xCD3FFBAE, 0xDCCD2308, 0x6BF9C0DD, 0x63BAB43C, 0x20B2306B, 0x123A1573, 0xCFF51E96,
    0xB42E9DB2, 0x5BFA6355, 0x5FD8BF7D, 0xDB993DAF, 0xF7FDCF5B, 0xEEDF87DE, 0x737CD636,
    0xBFA4F3D5, 0x07E17D1B, 0xE733157B, 0xFF0E6BEF, 0x1FD7F2E6, 0xE3F4FDFF, 0xF9FEFF3F,
    0xB7EFC326, 0x001152E1, 0x538B91FF, 0x112AE30C, 0x04FA109A, 0x48CB3EA7, 0x734470CF,
    0x26F8579B, 0x630466B7, 0x076AB31A, 0x8BA54E3B, 0x31CC7C53, 0xFA5A8157, 0x0830F748,
    0xFF84F04A, 0x683110E0, 0xD9E28CB1, 0x02A7834A, 0x87942C06, 0x70321119, 0xDAA24984,
    0x36D65292, 0x16C54DA7, 0x354F90A1, 0x7F8D919A, 0xEE15C2FC, 0xCCE78519, 0xEA123CE6,
    0xB89D23B0, 0x48784643, 0x23FE08C5, 0x97E0C41A, 0xC5B4E09B, 0x8BF1747F, 0x1862F26F,
    0xD62708C1, 0xAF0F2278, 0xF627C760, 0x54648B00, 0xEC6F8511, 0xE26A79A1, 0x21F48846,
    0x8DE8AB18, 0xC7C8E315, 0x8F057A3D, 0x1F858C7A, 0x359A5346, 0x7D1E82C2, 0x151FA384,
    0xD6361D79, 0x08901683, 0x32120646, 0xC1C4A20A, 0xCC908F15, 0x49B8E522, 0x6705ACBE,
    0x2B8D93ED, 0xB9B2F120, 0x8C0E82D0, 0x64724819, 0x6A4C09B1, 0x849C9192, 0xF94679A5,
    0x626D9332, 0x86C8BF1C, 0x90695200, 0x0032F87F, 0x1C459495, 0x610F690C, 0x895942AC,
    0xAD32A58C, 0xA6638C32, 0x10F68D90, 0xE9841FC5, 0x80047FCB, 0x66C96F97, 0x08F15842,
    0x64C0605D, 0x4D4EC07C, 0x65CAB1E6, 0xA0307276, 0xC654C3E0, 0x40A94749, 0xD0BD1244,
    0x12133600, 0x00000010, 0x00000000

  EW_BITMAPS_TABLE( ApplicationGeneralInput )
    EW_BITMAP( ApplicationGeneralInput, Default )
EW_END_OF_BITMAP_RES( ApplicationGeneralInput )

/* Table with links to derived variants of the bitmap resource : 'Application::GeneralInput' */
EW_RES_WITHOUT_VARIANTS( ApplicationGeneralInput )

/* Bitmap resource : 'Application::Sounder' */
EW_DEFINE_BITMAP_RES( ApplicationSounder )
  EW_BITMAP_FRAMES( ApplicationSounder, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationSounder, Default )           /* ratio 12.04 % */
    0xFC09FF00, 0xBB9DEF07, 0xF5B8E07F, 0x566BB7FA, 0x4EAF7F9C, 0xCAE7F961, 0x168A15D4,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFE59542B,
    0xE6E58AE5, 0xAE69B61F, 0x39DBE1FE, 0x7C4EE050, 0x5B098AFF, 0x1694F104, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0xC56444E2, 0x47A3FD22, 0xA1D05E6F, 0xA53AC353,
    0xD96C550A, 0xAAC966B1, 0x5A113A2D, 0x611050B3, 0xB68B9DA6, 0x6BBBD9EE, 0xDB2DE6ED,
    0xBA1D56CB, 0x1DEF0178, 0xDEB0B82C, 0x6D50B07F, 0xD4CADA41, 0x0390C3E2, 0x393C2647,
    0x63532B2C, 0x4CDE4B0C, 0x96E6B399, 0xF68B2B13, 0x2955968C, 0x7F539F2B, 0x8AAA3554,
    0x50A6D26A, 0xB17CEE8F, 0xB4D7E9D5, 0xAAB5CF71, 0x62B1F0FB, 0x0AA1FEA9, 0xEE761B25,
    0xF625BBD9, 0x1BD3DCF6, 0x42FF6537, 0x5CB2926D, 0xD5E32BEA, 0xD9EC7FB3, 0x71BB1DB3,
    0x725938FF, 0x763CBC8D, 0x7253C7F3, 0xDEEFFF5F, 0x3CFF7B3D, 0xFDA30A65, 0xE9D367BC,
    0xFFDFB373, 0x7FFF9FCF, 0x47B29CAB, 0xD481F97D, 0x15C349D8, 0xFC61E057, 0x309DC835,
    0x8FF288C0, 0x31A89D28, 0x5A178561, 0x1886A148, 0x78DE186E, 0x0A22A5D9, 0xE815F679,
    0xA62889E0, 0xAE2C9028, 0x8BE04218, 0xE328AA0C, 0xE8B1038C, 0x62307A22, 0x2A8EE347,
    0x729AA8DA, 0x11990638, 0xE83A448F, 0x960B90A3, 0x4C915208, 0x92A477B2, 0xE4D6EA48,
    0x98B63594, 0x51FA9263, 0x5893E539, 0x9357395E, 0xCA630CC5, 0x8294A93F, 0xA2669907,
    0x6B996679, 0x3FE6C9A6, 0x1A12589B, 0x29767494, 0xAA783F63, 0x7C9465E9, 0x3DA27606,
    0x4FF3D4F6, 0xD7D09827, 0xA6879767, 0xE0779FB6, 0xA2224789, 0xE3A9EE75, 0x2741CE40,
    0xF251751D, 0xD8A6E896, 0x2A8C6321, 0x292711C2, 0x6A8EA4A4, 0xA2A5A72A, 0xAAA46A7A,
    0x762ACAB6, 0x6AF63D89, 0xC766B3AA, 0x0CB82FDB, 0xAE4C52F8, 0x622BEAD2, 0x16851CA9,
    0xF1ACB02E, 0xE0DB378F, 0xAB2CCFF2, 0xAFEAB188, 0x972AC29A, 0x117CAB2C, 0xA0D03516,
    0xFF5755B2, 0x2C15A560, 0x2E2B3EC1, 0xF1E6B88E, 0xFD053C4F, 0x04BACFC3, 0x368FF419,
    0x0FF2CCD5, 0x81FCBA30, 0x8C5C2A18, 0xB4722B5B, 0x3FC642B0, 0xA63340D2, 0xC3C4F23C,
    0x0000405D, 0x00000000

  EW_BITMAPS_TABLE( ApplicationSounder )
    EW_BITMAP( ApplicationSounder, Default )
EW_END_OF_BITMAP_RES( ApplicationSounder )

/* Table with links to derived variants of the bitmap resource : 'Application::Sounder' */
EW_RES_WITHOUT_VARIANTS( ApplicationSounder )

/* Bitmap resource : 'Application::SounderVI' */
EW_DEFINE_BITMAP_RES( ApplicationSounderVI )
  EW_BITMAP_FRAMES( ApplicationSounderVI, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationSounderVI, Default )         /* ratio 21.84 % */
    0xFC09FF00, 0xBBDE2EE7, 0x0DC0BE7F, 0x576727FB, 0x5E597F9F, 0xC587F999, 0x168A1955,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xA532B91C, 0xFE675796,
    0xE7A5C9BD, 0xB56C2BDF, 0x39DBE5FE, 0x7CCEE050, 0xB31918FF, 0x4C0B6FF4, 0x26594895,
    0x8F71F94D, 0xE8FF3728, 0xF4B3527C, 0x4EAA54A2, 0xAADD54DF, 0x88CA6BB4, 0xDB252513,
    0xBD5E6FF4, 0x72874179, 0xA5B6CA65, 0x3665905B, 0x6E87F989, 0x547FB1DC, 0x99017942,
    0xBBDD6F77, 0x7D7AE771, 0x49ED783B, 0x4544FFB0, 0x65EFF54B, 0xDB90C2CC, 0xC557FE1A,
    0xF07F9753, 0x982345D4, 0x51DE19EE, 0xCE7B385F, 0xE5F2B9BC, 0xA32584C8, 0x17A76906,
    0x57ABC9A0, 0x8645695F, 0x7830AA32, 0x88168AF5, 0x7D3FDCEF, 0xF6F1C0F4, 0xEE73AEED,
    0xFF6E55BD, 0x763B5D9B, 0x26B02D46, 0x05C93F3A, 0x4EA41A16, 0xBADD5EA1, 0x73D6EB3D,
    0x7BFD8CE3, 0x797C79A7, 0x0DB6F17B, 0xF7AFFF5F, 0xC9EAF43F, 0x0FFF966F, 0xD66BF8BC,
    0x1A7F6168, 0xFF772A75, 0x4FF74DDE, 0x75D97460, 0xFDBA5F1C, 0x5B5CA035, 0x1809A181,
    0x0DF388FF, 0x93C1EF30, 0xB5EE7B0D, 0xEB869BE7, 0x846163D9, 0x20E3FE13, 0xA8118584,
    0xFA085F60, 0x02812065, 0x6619615A, 0x19E715E5, 0x46EDA015, 0x0A2F651A, 0x7028C7F8,
    0x8661B860, 0x0806FA40, 0x96C07129, 0x6E306991, 0xA167E326, 0x9223792D, 0x1B673185,
    0xC92E286E, 0x71C27021, 0x28718EF8, 0x949B8726, 0xD191651F, 0x13FE0F17, 0xACD33B0F,
    0xE23D8FC7, 0x7AE6C9A8, 0x2649A667, 0xE9492989, 0xBA5681E5, 0x4B7AE587, 0x981CA976,
    0xDE67D919, 0xE7A5E77C, 0xD2868763, 0xF8A09F47, 0x3FE237E9, 0xCC9394EA, 0x22ECAE6E,
    0x80E43FC9, 0x997ACC23, 0xA5E95A6E, 0xE93A464B, 0xAA091FA3, 0x71EAA168, 0xF07BAAA8,
    0xA32AEA0D, 0xA65889F9, 0x787A1484, 0xE63FAAE1, 0xB487E1DA, 0x45E74ACA, 0x87068634,
    0x7A01D727, 0xD4A72191, 0xE39ACFF1, 0xB2AC83FC, 0xEC39491F, 0xF482C175, 0x1EB6AF68,
    0x17AEEB8A, 0x64AA4AF6, 0xEDB8F63B, 0x590DEEB8, 0x214A80A4, 0xB9368DC9, 0x6A9A78E0,
    0xAE145EF0, 0x37AE41B6, 0xCD931CA4, 0x6E9A2669, 0x9AE1C9B6, 0xE717BAFE, 0x1BA2FA3F,
    0xE92791AF, 0x6FBFF03B, 0x6FB01C32, 0xD29C1703, 0x6A52A2A3, 0x729AA629, 0xBBA7F19A,
    0x6A6DFC55, 0x6D6C2320, 0xC92F1599, 0x7B1AA771, 0x9E96F17A, 0x47E65C79, 0x1CBB4ED5,
    0xBB3D206D, 0xDACD3DAC, 0x32CD2D1C, 0xC8706B57, 0xEC4CC5AB, 0x6465CDCC, 0x26CEB333,
    0x3D44D28B, 0xBAA028D7, 0xB22BBAEC, 0xBCFF22B1, 0x42EDD415, 0x8F445199, 0x80B56C1D,
    0xC97300B5, 0x22A4563F, 0x0368D798, 0x5C48369D, 0x80B6BD57, 0x8D53561C, 0xB288547E,
    0xBF5ED7D7, 0x625BF6A2, 0xDFF6F74A, 0x8EBA1F7B, 0xB450CA39, 0xE381BBC9, 0x6EE0389D,
    0x6FAE4E07, 0xCDC3C8F8, 0x326C673F, 0x2B98E346, 0x8FE3399E, 0x3E0FE7AF, 0x8853FCE6,
    0xBE6C7429, 0x63A6E9F8, 0x1CE779DE, 0x1A49E1C7, 0xBB0EB8FF, 0x5EBFB1EC, 0x63B6ECFB,
    0x9AEA7871, 0xEAD19EF7, 0x6BAF02F5, 0xC2AC90E7, 0xFB8CEF07, 0xF4F0927E, 0xF3FC1F0E,
    0xBC7F15BE, 0xFEA3C8F2, 0x43D8F311, 0xD5F4A87F, 0xF6756F77, 0xFCDF87CE, 0x6F53DC7A,
    0x83DAE73E, 0xE5B6FE3F, 0xE27EEF27, 0xFEA64F7A, 0x6FB7DAFC, 0xFFDEFBFD, 0xE2FEFE9E,
    0xFE7F6F33, 0xFAE00BF7, 0x5F8B27B4, 0x811FE250, 0x12BE0520, 0x220540B8, 0x7C0C81D0,
    0xA0B6BE20, 0xEFE1BB89, 0xDE64027C, 0x4121CAE7, 0x3AB07A00, 0x5220C1D7, 0x788F773A,
    0x17458E4C, 0x10C8614C, 0x185F87C3, 0x114731A2, 0x35EAF5E1, 0x0EE9C2B8, 0xD0141E71,
    0x15B3AC16, 0x0EE2E036, 0x3785C8FF, 0x318FF17E, 0x562B42CC, 0xE2614C43, 0xD8BC3736,
    0x644A7BAD, 0x0262741C, 0x61B45906, 0x06A8A92B, 0x9672CA2C, 0x2C85887F, 0x0AA10C3B,
    0x608B7241, 0x666C8260, 0x0B18E1CB, 0x105F87A3, 0x80F23C62, 0x41FA3FC7, 0xE4188247,
    0x1A88B41F, 0x88A18220, 0x1601747F, 0x1AE193B0, 0x32927907, 0xA747A2D0, 0xCC2B8698,
    0xF4790F34, 0x01011FE4, 0x00000000

  EW_BITMAPS_TABLE( ApplicationSounderVI )
    EW_BITMAP( ApplicationSounderVI, Default )
EW_END_OF_BITMAP_RES( ApplicationSounderVI )

/* Table with links to derived variants of the bitmap resource : 'Application::SounderVI' */
EW_RES_WITHOUT_VARIANTS( ApplicationSounderVI )

/* Bitmap resource : 'Application::VI' */
EW_DEFINE_BITMAP_RES( ApplicationVI )
  EW_BITMAP_FRAMES( ApplicationVI, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationVI, Default )                /* ratio 19.14 % */
    0xFC09FF00, 0xBC5E2EE7, 0x81AABE7F, 0xD48727FB, 0x28597FAE, 0x6587FABD, 0x168A2B92,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xA532B91C, 0xDEFF8916,
    0xEFF5CA88, 0xFF6C32D5, 0x281CE9F2, 0x7FBE6750, 0xFB19668C, 0x44D2A5B7, 0x22932A96,
    0x69929A5D, 0x9B4AA7CB, 0x348A854A, 0xB84944E2, 0x479BFD92, 0xA1501EAF, 0x0D4EA951,
    0xD969D64B, 0xA2D366B1, 0x9FF568CD, 0xFED161A8, 0x56BA3CBD, 0x77B3DDAC, 0x8BA9663F,
    0x8BDAAFB7, 0xF2F54E76, 0xE12FF7CB, 0x6AF985BC, 0x30EB04B1, 0x1D8C2E48, 0x189C9E1B,
    0x95C965B1, 0xBCA65F31, 0xCD673339, 0x1E762364, 0x69B3FA0D, 0x8AEFA8CF, 0x34FABBEE,
    0x53A5D769, 0xB174A443, 0x933EEC2D, 0x03B3FD36, 0x3AD91329, 0xE6E1FFBD, 0x6CB5FB14,
    0xCB5BABB3, 0xD2E89336, 0xA8E3743F, 0x2892A3FD, 0xD6EA4814, 0xEE674BA1, 0xE3F7B61C,
    0xAE93957C, 0x3FD3A872, 0x11BAEB78, 0xBA6DA74C, 0xDBEB51A2, 0xDE4F57A3, 0x7BCBF7FC,
    0x9FDF1AE9, 0x56A48AF4, 0x08E154FF, 0x4755D32A, 0xFDED3A90, 0xFF3B0FC3, 0x39CF73E8,
    0x60782D02, 0x3805D87B, 0x01FE3FE0, 0xF9525F78, 0x6E9B8639, 0x1666F9BC, 0x470DBE70,
    0x48E23A16, 0xDB3ACEF7, 0x8B62B3FC, 0x4E33CCF6, 0x582A0C84, 0xCE3184A3, 0x2C8BA2F8,
    0x3FE2973E, 0x4C7350D9, 0x16EE1F52, 0xF9C188DC, 0x9F710931, 0x745CF771, 0x51F75A05,
    0xE3FDDA85, 0x1C6159A4, 0xDE391CE2, 0x38A315C4, 0xA3698634, 0x03CE3898, 0x65719726,
    0x4E58DDD9, 0x94E15956, 0x46795606, 0x56389822, 0xC5E979DF, 0xEE7C1EE7, 0x7D2787B0,
    0x481639E5, 0xB3FDC425, 0xDE643ACF, 0xFFA1E358, 0x93096208, 0x9F39DD99, 0xA7BC549E,
    0x1C56A4E7, 0x195909E2, 0x8560485A, 0xA61820EE, 0x198E1083, 0x0A06852A, 0x48A76048,
    0x73886181, 0x4DE3B4F1, 0x83E0FC98, 0x86B6AD0E, 0xAEACEB19, 0xA75279AE, 0xE13946AA,
    0x79860FA8, 0x8889806A, 0xFF8629E2, 0x8AA28481, 0x6398EE3D, 0xBB4E61A2, 0x02CF8EE3,
    0x6A3FE429, 0x398EA3FE, 0x0B1B0CD7, 0x53FCB12D, 0x84D237CE, 0xE3BA6E79, 0xB7EC7B96,
    0x51FB76E1, 0xC3722BB6, 0x52328C23, 0xD1B5A63B, 0x906D98F6, 0xE68B7643, 0x2BEA5F3F,
    0x9AFB98E1, 0xF2C0CFF9, 0x7C295466, 0x1BE23872, 0xA22119AB, 0xE20A27C9, 0x163FCE93,
    0xA751FC63, 0xE7523871, 0xDC0920C3, 0x230AC125, 0x8ACAF07C, 0xC9E67CA2, 0x6835430D,
    0xDCAA8CA1, 0x3A88A1B2, 0xE47F290A, 0x360DEA6D, 0x69A804CB, 0x2CCCFF71, 0x8B2CCD50,
    0x7DCEA8C9, 0xAECFFAF5, 0x663ADEB8, 0x084B52AD, 0x661BD3B5, 0x50D3919D, 0xD7AB9D4F,
    0xF5783355, 0x0B7549AB, 0x9AE4B8AF, 0x6BBAAE8B, 0xD9EC3BB7, 0x99FD1331, 0x5DA2E0D9,
    0xB36CBAEE, 0x75BBF69B, 0xC4724DC7, 0x51FB3713, 0x4C6F19C7, 0x86CDC7F8, 0x5AA5B23C,
    0xC4B7F693, 0xF1586ACC, 0x4C7385C5, 0x2A00E239, 0x439DA7BE, 0xCF741CFF, 0xDFC78372,
    0x2E7BA047, 0x878DA6F4, 0xB66CBA3E, 0xEBFAAE89, 0x45A61BA9, 0xEEC58D25, 0xE7ABEDBA,
    0x4DEDFB0E, 0xEEFB84C1, 0xFBFEFFBA, 0x5EF3C15E, 0x27C0F1FC, 0xCAF1BC2F, 0x643BFF33,
    0x3D2F3BB5, 0xC4C3C3F2, 0xC8BF2A87, 0xCDF4FBE5, 0x51529F53, 0x06C543D1, 0x93FCB828,
    0x8EB3348B, 0xA02CC9A1, 0x7E3DEEB5, 0x7B3693DB, 0x22606063, 0x1CA9590B, 0x5D56CD53,
    0x569583FD, 0x009EEBE0, 0x3D127797, 0xEF7B22A4, 0xFE3C8790, 0x12068FD1, 0xA0FF20C4,
    0x03DA3385, 0xE3045688, 0x0C885D1F, 0xBAE80701, 0x16827032, 0x314538FF, 0x79B4F1A6,
    0xFF2783CC, 0x00000808, 0x00000000

  EW_BITMAPS_TABLE( ApplicationVI )
    EW_BITMAP( ApplicationVI, Default )
EW_END_OF_BITMAP_RES( ApplicationVI )

/* Table with links to derived variants of the bitmap resource : 'Application::VI' */
EW_RES_WITHOUT_VARIANTS( ApplicationVI )

/* Bitmap resource : 'Application::Beacon' */
EW_DEFINE_BITMAP_RES( ApplicationBeacon )
  EW_BITMAP_FRAMES( ApplicationBeacon, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationBeacon, Default )            /* ratio 16.20 % */
    0xFC09FF00, 0xBBDDCEF7, 0x5590D17F, 0x1109C7FB, 0xE68B7FA9, 0x48A7FA50, 0x168A24CE,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0x2532B91C, 0x35133A23,
    0xCFF51215, 0xFF65AED8, 0x281CE9F0, 0x7FBE2750, 0xFAD13AAE, 0xCA92B2F7, 0x66912CA3,
    0x9247144C, 0x9F5096D2, 0x354A4D4A, 0x1388C7E5, 0xF5C28965, 0x7A3CDE6F, 0xB54E8540,
    0xC7EA364A, 0xFD7CB25D, 0xD1E6F433, 0xDF65B358, 0x117AADCA, 0xB05EBFEB, 0x39851184,
    0x905D2E37, 0xC341AD3C, 0x9AD02FF6, 0xC2E17D44, 0x71B7F89D, 0x4E8B4FDC, 0x949C9E25,
    0xE674CF27, 0xB3FBFDD4, 0xBF6510C6, 0x61CAEBA0, 0xA368FA1C, 0x2B3E963A, 0xF5B96A96,
    0xEEF67BBF, 0x67442BFD, 0x49DBEA91, 0xF8B9D117, 0xC7518FA8, 0x75CB81AB, 0xBF9FFC4D,
    0x292EFFE3, 0xB4BB84E2, 0xA3CEE7F0, 0xDD4E2EAF, 0xB9562D72, 0xA489EE20, 0xEDA2FB9D,
    0xE77FC3DD, 0xF433D9CE, 0xA0E356E0, 0xBABACF5F, 0xFFF0F7FB, 0xF0F4A281, 0xF6BB64FC,
    0xCF8C67F3, 0xF9CF3FBF, 0x1CD749F5, 0xE45DFA7B, 0x01F181DF, 0x0582E038, 0x83E0851E,
    0xE0D829D5, 0x07DA0284, 0x49AE85E1, 0x0486E158, 0x86180872, 0x61A40A20, 0x58322487,
    0x8E21885A, 0x14896268, 0x2E61849E, 0x4FF2F0B0, 0x32688725, 0xDA378D63, 0x388EA348,
    0x200FF8EE, 0x61E7986D, 0x087E2B8B, 0xE6483F5F, 0x4C912458, 0x7B92990E, 0xCF63D4F6,
    0xA1D0843F, 0xD64E92C8, 0x598B0735, 0x661AD7B6, 0x2587959A, 0xE98E6497, 0x118240E0,
    0x4D621866, 0x995A496A, 0xCBC99A6D, 0xD5ACBF2C, 0xE6719996, 0x709EA5D9, 0x9F67E9EE,
    0x482245EC, 0xE1F48C6A, 0xF08C5FD4, 0x832494E1, 0x9FE7825C, 0xC845468F, 0x239A571C,
    0x1D8539CE, 0xFF9AD206, 0xA4E98A58, 0xE919F257, 0xF21D9CA8, 0x1CEC3B8F, 0xED3A8EC4,
    0x1B0823FC, 0x2ADAAE57, 0x3A9507AA, 0x3271A8AA, 0x6E2154E5, 0x62299234, 0x596AB0ED,
    0x165AC43E, 0xF29CAB6C, 0xB7AEABEA, 0x39644A42, 0xEB4A60E1, 0x53FEA9A9, 0xBCF53D0F,
    0xD3B66D77, 0xA62D0B4E, 0x184344D6, 0xF492CEAE, 0xBC815CA6, 0xDD386A61, 0x3D0FF388,
    0x2F083D5F, 0x9BBAEC58, 0x02E4A9AE, 0x8524EA3A, 0x2520F260, 0xACD26486, 0x596EB8BE,
    0x10881C18, 0x963C0EE4, 0x3F0FB3ED, 0x596C3F0D, 0x82070C41, 0xFF18C0F0, 0x361E8915,
    0x95C7020E, 0xCE9398E8, 0x73FEC73F, 0x78E2765D, 0x29658E33, 0xC9327CAF, 0xB23C86C2,
    0xBB96A1C7, 0xE5A969DA, 0x6D20D47B, 0x1EC8A6D8, 0xECC3FC90, 0xD22C9947, 0x430E3FC9,
    0x1FD1F45C, 0x5B87AD0D, 0xF36CFB3C, 0x028D7651, 0x9D7B2A89, 0xB670B3AB, 0x370D536E,
    0xEF81AD9B, 0xF69D49D4, 0x0C985C5B, 0xCE3FCA02, 0x3FCD2310, 0x6361EC91, 0x6D91F883,
    0xFD455477, 0xFE1E4903, 0x2D8C25FE, 0xAF1574C7, 0x6D995C56, 0xC742CE26, 0x77D6DDC1,
    0x23CA23FF, 0xCF03FCA9, 0x63F30C3B, 0x2907C2B9, 0xFF338BF3, 0x2B493294, 0x476234FF,
    0x5E338DCE, 0x6C7D24E6, 0xB4304FF2, 0x3C4FF314, 0x5963C8F1, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( ApplicationBeacon )
    EW_BITMAP( ApplicationBeacon, Default )
EW_END_OF_BITMAP_RES( ApplicationBeacon )

/* Table with links to derived variants of the bitmap resource : 'Application::Beacon' */
EW_RES_WITHOUT_VARIANTS( ApplicationBeacon )

/* Bitmap resource : 'Application::CO' */
EW_DEFINE_BITMAP_RES( ApplicationCO )
  EW_BITMAP_FRAMES( ApplicationCO, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( ApplicationCO, Default )                /* ratio 28.09 % */
    0xFC09FF00, 0xBCDE6EE7, 0x81C0BF7F, 0x976737FB, 0x5E5A7FAE, 0xC597FAB9, 0x168A2B55,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFEAF5796,
    0xEB95C9C1, 0xD86C2C1F, 0xA7D3E5FE, 0x9DC0A06F, 0x3B1D1B3D, 0x4C0B8FF6, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0xCA49C4E2, 0x679BFD94, 0xA13FDECF, 0x85529D44,
    0x58ACB53A, 0xAACF64B3, 0xEAD19B4D, 0xA4D251BF, 0x73197BFD, 0x68BBD8ED, 0xCBCDDAF1,
    0x3BC7EF77, 0x65F578BD, 0xE0F097AB, 0x230F88C2, 0x960B02ED, 0x2186BF62, 0x38FC9627,
    0x97C9E5B2, 0xACDE632B, 0x5716A919, 0xCE8B2913, 0xAB15A588, 0x72C85D7F, 0x996A18C9,
    0xFF385FD6, 0xAC562A4D, 0xA62D47F3, 0x3D3E95FF, 0xD06DF39A, 0x544F3F7C, 0x3FD80C14,
    0xFDBEDF64, 0xDCAE56A3, 0xAED85D3F, 0x0B93C3FD, 0xD15C3FD7, 0x2793BDFF, 0x83BD2B6F,
    0x7BC1E2ED, 0xBFD9ACDB, 0xFD82C242, 0xD86C3453, 0x1CB1323F, 0xCB738C7F, 0xC2617AD6,
    0x170B39FE, 0x6DB09FEE, 0xC7B3FCDB, 0x66D8BB2E, 0x49107098, 0xD51D5204, 0x324993FD,
    0x49E3FCC8, 0xE298FF56, 0x195B338C, 0xF63C8FF4, 0x3DE1B3D4, 0xE203CA1E, 0xF77CF03F,
    0x9E1D3D0F, 0x21572298, 0x8B8F18A6, 0xCFF3D0F5, 0xB376328B, 0xCCFF3A8E, 0xFF350D52,
    0x8D2263B4, 0xE2C87A1F, 0xE378CB3F, 0x2178818D, 0xAA44DAB8, 0x768D0344, 0x8F53D21A,
    0x19525287, 0x065389E3, 0x1C8A61B9, 0x8A229952, 0x25C90A5E, 0x53C62397, 0x9A1E99E6,
    0x2288E219, 0x578F790A, 0xCEB3B0E1, 0x87B4903F, 0x26135F24, 0xF495D5B3, 0x9862A9BC,
    0xA60A067F, 0x0A165FA0, 0xAE88A0E8, 0x339A22E8, 0x3D64388E, 0x8E73667E, 0x31A0FF39,
    0xEE772C8B, 0xB12C8645, 0x3B4E43FC, 0x280A10EC, 0xE8A15EA4, 0x1A7C3CD5, 0xA43FEA2A,
    0x8CAA8A06, 0xA7EA0AAF, 0xE9A68D9A, 0x74C38A68, 0xF43FCDC3, 0x675BD7D9, 0xDD62E075,
    0x98C8F43C, 0x750587A8, 0x8C749D87, 0x2F87F9D8, 0xC953FCBD, 0x2334FF50, 0xC6837F4E,
    0xD3350B0A, 0x201EA7DC, 0x48F3FD81, 0x53FCC431, 0xFCD5358B, 0xEF3C0E93, 0xBBEB696C,
    0x0818CA7B, 0xF66699B4, 0xD4B61BD1, 0x073D6242, 0x3A8FF9B5, 0x07F78CF0, 0x9556052F,
    0xB9B96DDB, 0x0CBC5712, 0xB057C7D5, 0x8DF3FCB7, 0xEAC8E93A, 0x84EC3915, 0xBFA6296A,
    0x4645BAFE, 0x17234CB0, 0xE8BE573C, 0x84C82621, 0xB41AD195, 0x330FF2D0, 0x71342CE1,
    0xB330A2C5, 0x5DAB480C, 0x94398D74, 0x738E6356, 0xCFFCFCD6, 0xF39CE836, 0x56E82D8F,
    0x8348297A, 0x95CF2BD0, 0xCF73E0F6, 0x58409B3F, 0xD8A1672F, 0xF3966ACC, 0xBB0E89F8,
    0x208A634A, 0x5A0F0B2C, 0x74F3970F, 0x20B08747, 0xA227AD55, 0xE29D9A7E, 0xF47DD92E,
    0x50DC45F1, 0xD59FAACC, 0x3FCE4390, 0x357A7063, 0xD3B4E35F, 0x0EB5BB8E, 0x0A6A237D,
    0x388D047E, 0x6FEA04E2, 0x0715EB95, 0x1F962212, 0x7E8AD5BB, 0x178FFCCE, 0xCC64678D,
    0x4BFA4737, 0x1AD341EC, 0xEF5EF833, 0xAD389DA4, 0x45DE2CDB, 0x033D17E8, 0x9A7E89F9,
    0xBF22626E, 0x225202FC, 0xA43AAB99, 0x3DE8DEBF, 0x3919687B, 0x93E44E33, 0x5CB648A7,
    0x519BDB1D, 0x088EFDEB, 0xB6EB88CF, 0xB32CC69B, 0x794A6480, 0x6FE95E1B, 0x91BB603B,
    0x38A9482F, 0x69D76AB9, 0xFA8AC8A6, 0x4B01851F, 0xA9C8E24C, 0xAFCFA0E5, 0x38C4D86E,
    0xAC34FA0E, 0x33451A29, 0x31120198, 0xD939E7C4, 0x9CCF89C8, 0xB8620903, 0x106623E7,
    0x0542A7DC, 0xE3686D8C, 0x46F0C41F, 0xB3148837, 0x6B42807F, 0x28C903C7, 0x201E619C,
    0x261E4AD1, 0xF4B9048A, 0xA44D1787, 0x62C544EC, 0x955A8A55, 0xCF007FAC, 0x03497B38,
    0x0C87BA2D, 0x75C89123, 0x59DC1069, 0x940FF6EE, 0xFC1DC511, 0xBC3E119A, 0x2C68AB42,
    0x68601FEF, 0xF2CB0B0C, 0x62808B99, 0xC7533719, 0xBEB1DC3B, 0x5743152B, 0x241AB445,
    0x690AD856, 0xE31FE344, 0x4AA0DFB0, 0x685E9074, 0xB8FF1B23, 0x55C70BC4, 0x033C52AE,
    0xC728D143, 0x3AF64CDF, 0x82C2FD46, 0xF44A3973, 0x3E12937C, 0xF026A2E8, 0x34E69D70,
    0xF521AB17, 0xA28A54E9, 0x64869F92, 0x6A2D32C2, 0x92D4984D, 0xA4B72313, 0x41065229,
    0x8046E8C2, 0x48C8B55A, 0xB45E11F6, 0x54A3254A, 0x7A52AF09, 0x840917A8, 0x32AA7008,
    0xF211E94B, 0xE1D86A22, 0x8E41A63F, 0x58C77871, 0x29E4BBC2, 0x7C427987, 0xC3896884,
    0x0F0A1CD4, 0xF8600862, 0x1948906E, 0x19A0D2C3, 0xE26498C5, 0x8700C985, 0xAD719C72,
    0x8B639C7F, 0x8897F25A, 0x11A6C898, 0xF11E43B1, 0xDC3807F8, 0x2671AA11, 0xBA4279AE,
    0x949EFBD2, 0xB2D98385, 0x9EE0642C, 0xB6B25327, 0x216CC188, 0x8CE740ED, 0xEE0F0862,
    0xCE6763FC, 0xC6718E21, 0x11ACC070, 0xF90A1950, 0x189E3407, 0xE3FD000C, 0xCDDB9610,
    0xD1B96F3E, 0xA3F3428E, 0x472904F7, 0x90D1EA45, 0x27A4749A, 0xE4630B2D, 0xBA925293,
    0x5207A5B4, 0x177A1F50, 0x14C0BAC8, 0x13BD38A5, 0x06D2CE82, 0x174C445C, 0x3E5238DD,
    0x414437BB, 0x5E3805B6, 0x394BE290, 0x225952B3, 0x2974338F, 0x91AA2A8B, 0x0578AE2E,
    0xC2E15A2B, 0xD39A4AFC, 0x0F65F2A5, 0x7685F0BF, 0xB28FE862, 0xB5434412, 0x0505C6D0,
    0x1E281F81, 0xBD70ABD0, 0xD0CC4829, 0x82A07FB2, 0x478A3C1A, 0x10127C96, 0x00000000

  EW_BITMAPS_TABLE( ApplicationCO )
    EW_BITMAP( ApplicationCO, Default )
EW_END_OF_BITMAP_RES( ApplicationCO )

/* Table with links to derived variants of the bitmap resource : 'Application::CO' */
EW_RES_WITHOUT_VARIANTS( ApplicationCO )

/* Bitmap resource : 'Application::evacuate' */
EW_DEFINE_BITMAP_RES( Applicationevacuate )
  EW_BITMAP_FRAMES( Applicationevacuate, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applicationevacuate, Default )          /* ratio 26.00 % */
    0xFC09FF00, 0xBCDDCEF7, 0x817EC87F, 0xCE6877FB, 0xB4727FAE, 0x2717FABC, 0x168A2B8B,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0x09132D9C,
    0x6FF5C9C1, 0xFF6C2C17, 0x37D3E5F2, 0x9E4EA050, 0xFB1D1A9E, 0x44CB8737, 0x22932A96,
    0x69929A5D, 0x9B4AA7CB, 0x348A854A, 0x9351C4E2, 0x37A3FD94, 0xA0BFDECF, 0xA5469D43,
    0x59AC753A, 0xA6CB68B1, 0xEAD17B25, 0xA4A3583F, 0x56798511, 0x75B65DAD, 0xAB6C464F,
    0x885FAF85, 0xDDFF017D, 0x59AF382B, 0x197A7745, 0x6EF8BB5E, 0x2E5B3952, 0xEF0753B2,
    0x0778BC5F, 0x6CC6672F, 0xCEE6B399, 0x83FF439B, 0xE357E7E4, 0xC0BA7493, 0x319ACD3A,
    0xE505C263, 0xBB4D9CF5, 0xDD81EDB6, 0x1883B1AE, 0xD763B5B9, 0xFD4383BF, 0xBFD90904,
    0x2B6FC87E, 0x549B5E5F, 0xA9BE65A5, 0x978E0606, 0x693F483A, 0xC9DCE56A, 0x8177BBBC,
    0x918CF39F, 0x9C7CBD15, 0xE3D1BFE9, 0xD88874CD, 0xFFF0F7F7, 0xCDB5BB05, 0x818A70BC,
    0x8C675ADD, 0xFFFC7DA9, 0xCFD721CC, 0xC1E08A3F, 0x4DD57D8B, 0x20821EA7, 0x801EE7F5,
    0x8D872E10, 0xE830E934, 0x95FB82DA, 0xFF8460E5, 0x3D9B7809, 0xD733DCF6, 0x5865F751,
    0x6D19895D, 0xBE7C21C8, 0x658DA2C8, 0x13D41CF0, 0x61D22288, 0x9E288594, 0x2B8A9788,
    0x2A8B677E, 0x0E13FCD5, 0x46CCED37, 0x92363FE3, 0x4B8E23A8, 0x17C76522, 0x63D8F1E4,
    0x62B0B877, 0x1A44908D, 0x37922219, 0x7E24C89A, 0xDFE8A64D, 0x7955DE94, 0xCDBB6E65,
    0x5F9265B8, 0x7DE187EE, 0x9CA99252, 0x9344FF99, 0xD65A394C, 0x208E65D8, 0x69886259,
    0xCD7318CB, 0x11907A3F, 0x19299B4B, 0xFF2E8722, 0x3E0F73DC, 0x4D3364FF, 0xF2F4C685,
    0xD0FF9C8D, 0xC52289B9, 0x358DC6CC, 0xE5E614EB, 0x12D0BD47, 0x94B187A4, 0x50A20CF2,
    0x2C527641, 0xD3D5C8A4, 0x43D2A1A7, 0xD1F03D4F, 0x7F2451F9, 0x93CFF300, 0xD29A8E87,
    0xF2F88324, 0x12C83F0F, 0xD86C8EE4, 0x641662D1, 0x2D16F0AD, 0xCB56D2B4, 0x25134BD8,
    0x7581C752, 0x84E87178, 0x0BE4F615, 0x63EE2F2D, 0xF2BA6CEE, 0xFFAB9D69, 0x388CC348,
    0x4AB2D5B3, 0xB93D2034, 0xE0BA309A, 0xE635CDB4, 0xBF6FB3FC, 0xEFCBFAFF, 0xD358DA3F,
    0x64BC312F, 0x87B75E53, 0x2D86B202, 0xC611DCFF, 0x8C54FAA1, 0x9AAC95AE, 0xC6208935,
    0x3FCFCB22, 0x4FF8C4F0, 0x4790681F, 0xFCB71C48, 0x463EEE63, 0x3D95E3D6, 0xB303FF2E,
    0xFCC4F557, 0x0A1536CD, 0x14C4927B, 0xBA53DC5B, 0x120D0661, 0xDBC2EE61, 0xD0A92D13,
    0x341E88CB, 0x348D7879, 0x06C1FE78, 0x3D535279, 0xA87E3FF5, 0x5F1D5E41, 0xCF162D08,
    0xD3CC54FF, 0x5CEB18CF, 0x2881249E, 0xEFCB3156, 0x2ADB23B4, 0x61E568A0, 0x2C28BD31,
    0x3B5E9BD2, 0x17D8B606, 0xA8F6695F, 0xCCEB445A, 0x24F50B31, 0xFD3D670F, 0x7F4E0B62,
    0x1D08863B, 0x8792350F, 0xC4D132B1, 0x5CADCFF7, 0x9281E059, 0x1A47FB1B, 0xED1E0310,
    0x81C2D179, 0x91492B05, 0x1E718962, 0x29CB26DA, 0xF7979EAB, 0xF39CE992, 0x28C96CCE,
    0xE83A8FF4, 0x2C21EEDC, 0x1C971EB1, 0x37DF7ED9, 0x6B0A2ECC, 0xD9BF4D53, 0x34678350,
    0x88842CCA, 0x047D341D, 0x79B5D1BD, 0x83250FFC, 0x7F51F698, 0x86D206BE, 0x545F8D76,
    0xE274EDFB, 0x83790611, 0x3FCB81BC, 0x8FF714A0, 0x3789E4FA, 0x64DF3FCB, 0x86D02453,
    0x37F0AC21, 0x001508DA, 0x9BBDA543, 0x8E13AA85, 0x7CD84610, 0x3C6A9B56, 0xE1441C83,
    0x512A45C2, 0x24E95F08, 0xC528FF1F, 0xBE538C25, 0x1FEF9C7F, 0x34C530B3, 0x4EA9B1FE,
    0xE9206E5D, 0xF83FDDE8, 0xA1670660, 0x53655329, 0x51464A57, 0xEF68A189, 0xDB59B727,
    0x98A0FC68, 0x1C4B44A2, 0x3A4DD8DE, 0x3E3B71CC, 0x847EE19C, 0x4307DB31, 0x74714238,
    0x79DD1DC3, 0xF5E82845, 0x1075FE42, 0xCEEB8B18, 0x0CE1FECA, 0x1FE37864, 0x3A06C0DC,
    0x4F2C958E, 0x1D53A23C, 0x4512C8FC, 0x606F0FF8, 0x51CB4D23, 0xF19C2705, 0x70C62A8F,
    0xCA294976, 0x8B217645, 0x1CEA4A11, 0x201098FF, 0x6F463795, 0x86542364, 0x562D950C,
    0xA5761721, 0x1C6B2331, 0x357CAF21, 0xCAE0798F, 0x5FA42F43, 0xC303751D, 0x3525E1E2,
    0x240C61AB, 0x6998A0FE, 0xC95E0338, 0xB0374610, 0xF6240696, 0xC4118F46, 0xD83E75A3,
    0xA3FD170B, 0x49A07110, 0x2070EC22, 0x8142084A, 0x2E14628A, 0xFDA43269, 0x1231F1DD,
    0xFA23C7F9, 0x996C1A60, 0xC0D01AC5, 0xC8E46D93, 0xD2CD8C8C, 0x62B29876, 0x86D1044A,
    0x174311F7, 0xFDD42C5F, 0x570B92C4, 0xFB654350, 0xBCAD98F8, 0xC9EF4BE2, 0xE1199650,
    0x7986CA66, 0x93D65CCB, 0xA7CCF426, 0x87B9E93D, 0x2CB38C32, 0x57120A3F, 0xAD1582BC,
    0xEF9428D8, 0x3B4266B4, 0x983D88E8, 0xA0EF1E06, 0x41FC3FC7, 0xE41D6551, 0x9178B517,
    0x0768152F, 0xA16B0430, 0xD0A78520, 0x7FC2D0F6, 0xE71502D4, 0x7AAE1C3C, 0x00001012,
    0x00000000

  EW_BITMAPS_TABLE( Applicationevacuate )
    EW_BITMAP( Applicationevacuate, Default )
EW_END_OF_BITMAP_RES( Applicationevacuate )

/* Table with links to derived variants of the bitmap resource : 'Application::evacuate' */
EW_RES_WITHOUT_VARIANTS( Applicationevacuate )

/* Embedded Wizard */
