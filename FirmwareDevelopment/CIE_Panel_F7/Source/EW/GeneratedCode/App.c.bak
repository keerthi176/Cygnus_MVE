/*******************************************************************************
*
* E M B E D D E D   W I Z A R D   P R O J E C T
*
*                                                Copyright (c) TARA Systems GmbH
*                                    written by Paul Banach and Manfred Schweyer
*
********************************************************************************
*
* This file was generated automatically by Embedded Wizard Studio.
*
* Please do not make any modifications of this file! The modifications are lost
* when the file is generated again by Embedded Wizard Studio!
*
* The template of this heading text can be found in the file 'head.ewt' in the
* directory 'Platforms' of your Embedded Wizard installation directory. If you
* wish to adapt this text, please copy the template file 'head.ewt' into your
* project directory and edit the copy only. Please avoid any modifications of
* the original template file!
*
* Version  : 9.00
* Profile  : STM32F746
* Platform : STM.STM32.RGB565
*
*******************************************************************************/

#include "ewlocale.h"
#include "_AppAccess.h"
#include "_AppAccesssPopup.h"
#include "_AppAddDevicePopup.h"
#include "_AppAdditionalPopup.h"
#include "_AppAdditionalUnit.h"
#include "_AppAlarmRowItem.h"
#include "_AppAlert.h"
#include "_AppAppSupportPopup.h"
#include "_AppApplication.h"
#include "_AppBoolean.h"
#include "_AppButton.h"
#include "_AppButtonState.h"
#include "_AppChannelImage.h"
#include "_AppConfirmPopup.h"
#include "_AppConfirmTimerPopup.h"
#include "_AppCountView.h"
#include "_AppDFUPopup.h"
#include "_AppDatePicker.h"
#include "_AppDayTimeRow.h"
#include "_AppDayTimesPopup.h"
#include "_AppDevice.h"
#include "_AppDeviceClass.h"
#include "_AppDeviceConfig.h"
#include "_AppDeviceInfo.h"
#include "_AppDisable.h"
#include "_AppDisableChannelItem.h"
#include "_AppDisableItem.h"
#include "_AppDisableUnitItem.h"
#include "_AppDisableZoneItem.h"
#include "_AppDisablementItem.h"
#include "_AppDisablements.h"
#include "_AppDisablementsTabButton.h"
#include "_AppDisplayPopup.h"
#include "_AppDropDownMenu.h"
#include "_AppDropMenuItem.h"
#include "_AppEvents.h"
#include "_AppFaultItem.h"
#include "_AppFaults.h"
#include "_AppFire.h"
#include "_AppFireChannel.h"
#include "_AppFireContainer.h"
#include "_AppFireZone.h"
#include "_AppInputAction.h"
#include "_AppInputChannel.h"
#include "_AppInputChannels.h"
#include "_AppInputDelay.h"
#include "_AppInputSignal.h"
#include "_AppKey.h"
#include "_AppKeyBmp.h"
#include "_AppKeyLetter.h"
#include "_AppKeySwitch.h"
#include "_AppKeyboard.h"
#include "_AppKeypadChangePopup.h"
#include "_AppKeypadKey.h"
#include "_AppKeypadPopup.h"
#include "_AppLEDPopup.h"
#include "_AppLevelAccess.h"
#include "_AppLibClass.h"
#include "_AppListViewer.h"
#include "_AppLogChoice.h"
#include "_AppLogItem.h"
#include "_AppLogPopup.h"
#include "_AppMattsKeyboard.h"
#include "_AppMenuItem.h"
#include "_AppMeshLogPopup2.h"
#include "_AppMeshStage.h"
#include "_AppMeshStatus.h"
#include "_AppMeshTree.h"
#include "_AppMeshUnit.h"
#include "_AppMeshUnitItem.h"
#include "_AppMeshVector.h"
#include "_AppModify.h"
#include "_AppModifyPopup.h"
#include "_AppNewNumberPopup.h"
#include "_AppNumboard.h"
#include "_AppOnTest.h"
#include "_AppOnTestItem.h"
#include "_AppOutputAction.h"
#include "_AppOutputChannel.h"
#include "_AppOutputChannels.h"
#include "_AppOutputDelays.h"
#include "_AppOutputSignal.h"
#include "_AppParamSlider.h"
#include "_AppParamSpecific.h"
#include "_AppParamToggle.h"
#include "_AppParameter.h"
#include "_AppPhoneNumber.h"
#include "_AppPopup.h"
#include "_AppProgress.h"
#include "_AppProgressPopup.h"
#include "_AppPtrClass.h"
#include "_AppRBUProgress.h"
#include "_AppRadioSetup.h"
#include "_AppRadioUnit.h"
#include "_AppRoundBox.h"
#include "_AppSetTimePopup.h"
#include "_AppSettings.h"
#include "_AppSmallChannelImage.h"
#include "_AppSmallDropDownMenu.h"
#include "_AppSmallDropDownMenuList.h"
#include "_AppSmallDropMenuItem.h"
#include "_AppSystemPage.h"
#include "_AppTabButton.h"
#include "_AppTabButtonPull.h"
#include "_AppTest.h"
#include "_AppTestChannelItem.h"
#include "_AppTestItem.h"
#include "_AppTestUnitItem.h"
#include "_AppTestZoneItem.h"
#include "_AppTextEditor.h"
#include "_AppTextEditor1.h"
#include "_AppTextPopup.h"
#include "_AppTimePicker.h"
#include "_AppTimePicker1.h"
#include "_AppToggleItem.h"
#include "_AppTreeView.h"
#include "_AppUnitNumber.h"
#include "_AppUpdateDevicePopup.h"
#include "_AppUserButton.h"
#include "_AppWritable.h"
#include "_AppWritable1.h"
#include "_AppZoneAlert.h"
#include "_AppZoneAndCombi.h"
#include "_AppZoneSpinner.h"
#include "_AppZoneToggle.h"
#include "_CoreGroup.h"
#include "_CoreHorizontalList.h"
#include "_CoreKeyPressHandler.h"
#include "_CoreOutline.h"
#include "_CorePropertyObserver.h"
#include "_CoreRoot.h"
#include "_CoreSimpleTouchHandler.h"
#include "_CoreSlideTouchHandler.h"
#include "_CoreSystemEvent.h"
#include "_CoreSystemEventHandler.h"
#include "_CoreTime.h"
#include "_CoreTimer.h"
#include "_CoreVerticalList.h"
#include "_CoreView.h"
#include "_EffectsBoolEffect.h"
#include "_GraphicsAttrSet.h"
#include "_GraphicsPath.h"
#include "_ResourcesBitmap.h"
#include "_ResourcesExternBitmap.h"
#include "_ResourcesFont.h"
#include "_ViewsAttrText.h"
#include "_ViewsBevel.h"
#include "_ViewsBorder.h"
#include "_ViewsFillPath.h"
#include "_ViewsImage.h"
#include "_ViewsLine.h"
#include "_ViewsRectangle.h"
#include "_ViewsStrokePath.h"
#include "_ViewsText.h"
#include "_ViewsWallpaper.h"
#include "_ViewsWarpGroup.h"
#include "_WidgetSetHorizontalSlider.h"
#include "_WidgetSetHorizontalSliderConfig.h"
#include "_WidgetSetHorizontalValueBar.h"
#include "_WidgetSetHorizontalValueBarConfig.h"
#include "_WidgetSetPushButton.h"
#include "_WidgetSetPushButtonConfig.h"
#include "_WidgetSetRadioButton.h"
#include "_WidgetSetRadioButtonConfig.h"
#include "_WidgetSetToggleButton.h"
#include "_WidgetSetToggleButtonConfig.h"
#include "_WidgetSetVerticalScrollbar.h"
#include "_WidgetSetVerticalScrollbarConfig.h"
#include "App.h"
#include "Core.h"
#include "Flat.h"
#include "Graphics.h"
#include "OldResources.h"
#include "Resources.h"
#include "Steel.h"
#include "Templates.h"
#include "Views.h"
#include "WidgetSet.h"

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault0[] =
{
  0x00000422, /* ratio 51.42 % */
  0xB8002D00, 0x80000452, 0x00680018, 0xC6C00170, 0x00320042, 0x114880C0, 0x350041C4,
  0x0848E800, 0x8EC68660, 0x240A0D20, 0x000F7068, 0x00DC0033, 0x0FB203A0, 0x00639300,
  0xE72001B0, 0x468B4BA2, 0x09A1A400, 0x39800CA0, 0x18480106, 0x0025F058, 0xF0C20038,
  0xA0B2E98C, 0x6200A49D, 0xD2CA81D6, 0x440DC1A7, 0xB94C9E4B, 0x97002252, 0xAD2A9126,
  0x134014C9, 0x02AB5300, 0x2D0428B0, 0x7B6F3D00, 0x217834F2, 0x2A9451AB, 0x1B047A59,
  0x844F2655, 0x54E40137, 0x4B26753A, 0xD83306A0, 0xEBB78935, 0x6731A35E, 0xB6BC04D6,
  0x16AE13F2, 0xCA05C8A9, 0xC58720D2, 0x84B6F35B, 0x57F277EC, 0xA2599700, 0xA2D35B91,
  0x11A2B953, 0x5A007803, 0x52D3D2EC, 0x0CEDCB36, 0xA86D4220, 0xD14F4F64, 0xCAA7D7E9,
  0x40015698, 0xAFB63DF8, 0xDE00264B, 0x99633800, 0x760541AB, 0xFE45F483, 0xE5C1BBB3,
  0x21100124, 0x98A9540E, 0xC0DA00E2, 0x687B2AEE, 0xCD2A82F8, 0x9E217FA3, 0x33F3D43C,
  0xABB02F93, 0xE26727D9, 0x9067512A, 0xB70DE16F, 0x0D165A93, 0x2C4B13E7, 0x77A014ED,
  0x9675D9B3, 0x96AC007F, 0xB14A5760, 0x136C9534, 0x1E5C35D8, 0xDEA5A9DD, 0xE5760B85,
  0xBA1074E0, 0xD259D457, 0x4A1C4191, 0x9E345A20, 0xC4ED4F4F, 0x85B46C9D, 0x53572137,
  0x001F9459, 0x9334F94F, 0x18750645, 0x2000095E, 0x679211F1, 0x70E48431, 0x54A92116,
  0x008C0094, 0x19068B80, 0x416A9760, 0x7FDE1969, 0x12A5DA59, 0x59780096, 0x1E644D54,
  0xE7951760, 0x7461E80D, 0x99598D6E, 0xA7353352, 0x043F501E, 0x335D8375, 0x8DDC4902,
  0x92A74995, 0x67FD6A45, 0x593E7351, 0x334EDFF4, 0x4C55090D, 0x13E9FA0D, 0x46E51643,
  0x9D168961, 0x167492C8, 0x4F275769, 0x1069E5EA, 0xB541FC09, 0xB9165C86, 0xBA9FE348,
  0x4A1D2459, 0x1BAA1128, 0xE572874B, 0x95BAA562, 0x766F6A28, 0xA61DDA59, 0xA2187C00,
  0x6506A15C, 0x0000406C, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault1[] =
{
  0x00000406, /* ratio 52.82 % */
  0xB8005700, 0x80000452, 0x00D20029, 0x0CA003A0, 0xC8001000, 0x70B30800, 0x720043E2,
  0x0388021A, 0x8C424EA0, 0x3442251A, 0x480DE003, 0x68E71E88, 0x8ED108CC, 0x251F3645,
  0xD0A86452, 0x2E001BA4, 0x3078020C, 0x2A8020B0, 0x643A5400, 0x43A60009, 0x42610E97,
  0xA7A13834, 0x4D308841, 0xE009299E, 0x0E8CC426, 0x88547A39, 0x054EA235, 0xB10C014E,
  0x468C7378, 0x844B0698, 0xE2B5524D, 0x9514B6D0, 0xD4523002, 0x17344AA2, 0x7884AA15,
  0x8642A407, 0x01C2210E, 0x00301269, 0x1A2586B3, 0x2976102C, 0x9B610800, 0x11E9BC68,
  0x75A446AA, 0x59D0B621, 0xC39EEC21, 0x00C63375, 0x150007D0, 0x422A788D, 0x26F24CFC,
  0x75A41843, 0x028B0822, 0x00DB0CC0, 0x4C64E852, 0xC5ED60D0, 0xBC1B7561, 0xC3B4F610,
  0xC63D0CD4, 0xA34448BD, 0x1519B34A, 0xF549A60E, 0xBDD9C1A6, 0x68AEA34D, 0x2D584250,
  0x1C4235D5, 0xCDE8110D, 0xE06517BF, 0xB4761EEE, 0x6FB81D7A, 0xFA3DBC43, 0x00F70005,
  0xF1C68FEC, 0x8E90AC35, 0x93643115, 0x67653C4E, 0x5DC8001C, 0x6D4299F4, 0x6C153000,
  0x40D419A5, 0x01891671, 0x311E7FC0, 0x4C5B6024, 0x46852585, 0x9264A99B, 0x04893747,
  0x51751040, 0x2A835194, 0x58411419, 0x12480D63, 0x08340057, 0xB9984151, 0x28586046,
  0x5B46B59A, 0x9465F526, 0x64395357, 0x021E0250, 0x0B63A438, 0x78117634, 0x13A60603,
  0xD941D992, 0x1D069496, 0x8E4424E0, 0x141D9581, 0x91759D64, 0x06781641, 0xDD156B40,
  0x6667DA56, 0x6C5A24C1, 0x11E45174, 0x08B50C4C, 0x713E7600, 0x006FD179, 0x98DC1018,
  0x90E8518F, 0xD4410C4A, 0x0C005E9C, 0x79451306, 0xA08144E8, 0x0006A941, 0xD4140013,
  0x61F64A9C, 0x9B1E8008, 0x765FD4AE, 0xA84A3508, 0x191E0D46, 0x9926A516, 0x5E419CB5,
  0x429084FA, 0x9068EA43, 0x25D63C06, 0x4651A717, 0x386D510A, 0x4328DA7A, 0xD3742978,
  0x64E9C254, 0x00004050, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault2[] =
{
  0x0000040C, /* ratio 50.97 % */
  0xB8002900, 0x00000452, 0x00E40022, 0x0E000378, 0x9A001000, 0x60032800, 0x0F34000E,
  0x9859D001, 0x8F000A11, 0x18020C55, 0xC1E0B031, 0x421D1C84, 0x2346E8A4, 0x29283480,
  0xB1336C42, 0x308CC5E2, 0x08646E5B, 0x8CC823D1, 0xA9921934, 0x81E443F9, 0xD4A50692,
  0x01306A1C, 0x62470052, 0x10696CD6, 0x002153C1, 0x53A800D8, 0xA782E0D3, 0x3800C312,
  0xD8A5D533, 0x00874FAA, 0x2C4003C8, 0x9E0A0055, 0x55A9A966, 0x223BC32B, 0xA834129D,
  0x8A4DAED6, 0x453C2706, 0x0BED9628, 0x8E5E4E00, 0x2211B9BD, 0x2934C515, 0xE108345A,
  0x008894E9, 0x4CBC432E, 0x9CC6E371, 0x1003278B, 0x5A8017BC, 0xCB176E8C, 0x092008FC,
  0x856A8CE2, 0xB4FB8576, 0x62B14B60, 0xF066CEB2, 0x16C52954, 0x6D721936, 0x844014C9,
  0xBAB64FA7, 0xF1B5C874, 0x0B5A8A49, 0xD4FA6CDB, 0x22E86A63, 0x0CBE96AD, 0x00602373,
  0xA95B4B5F, 0x4C22D0A9, 0x3C576F86, 0x3571690D, 0xC5B9BF59, 0xDED8856A, 0x2D0067E5,
  0x68845AC9, 0x8842A386, 0x9FC6E9F2, 0x16AD0A62, 0xD10A58A0, 0x4F065A24, 0x5F9BA105,
  0x9AE44178, 0x3571284E, 0x01FF4514, 0x1856A0E0, 0x035A24BA, 0x4005B596, 0xC1691964,
  0x85DF4B51, 0x6B611267, 0x891304B9, 0x5A588106, 0x85913062, 0xCD906791, 0x9D884176,
  0x8692A729, 0x9CA18C00, 0x04DD9244, 0x0D625291, 0x95489E75, 0x7360E695, 0x18A66D1C,
  0x3905F887, 0xC94F049B, 0xC2461190, 0x001FB4A1, 0x03500031, 0x75BD8A50, 0xEDCA8343,
  0xBA799194, 0x682564B1, 0x1BA80164, 0x04DA2382, 0x0A5F4C11, 0x304D9E89, 0x50D5285D,
  0x11B97510, 0x0A067E9B, 0x15107F40, 0x3498D894, 0x695C7488, 0x93681046, 0x27610873,
  0x8828441D, 0x33695714, 0x0A536995, 0xDA583122, 0x51D80084, 0x91F74593, 0xA67DD625,
  0x9CE956AE, 0xD79A622D, 0xD4518953, 0x89224A2A, 0x00001014, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault3[] =
{
  0x00000426, /* ratio 49.72 % */
  0xB8001300, 0x00000452, 0x00DA0010, 0x0DC00348, 0x01063980, 0x10581828, 0x00838C40,
  0x037800D0, 0x39000EA0, 0x34501711, 0x46A11178, 0x22411E8E, 0xA0922834, 0x4F181941,
  0x30F8FC76, 0x009181A2, 0x1258009E, 0x1D4E00B1, 0x08D6713D, 0x0E4012EA, 0x206F15A2,
  0x29634835, 0x6D4E1C00, 0xD068BD38, 0x55985167, 0x0A70CE71, 0x9C01E223, 0x01940044,
  0x036226C0, 0xD21D059C, 0x21134B11, 0x00490014, 0x00C88938, 0x63001067, 0x0385B2F0,
  0x3258ED60, 0x0D162711, 0xC321D63B, 0xE02B11BF, 0x30108A6C, 0xFB0B33C3, 0x720844D6,
  0x0C999C6C, 0x6C00032B, 0xB7CE0270, 0x5C426A61, 0xC60F36C3, 0x3B431ABC, 0x6B388C84,
  0x05111551, 0x16C2A516, 0xAE89E48F, 0x6006E22B, 0x9B0962B5, 0xF0014138, 0x6E7894E2,
  0xE025BB83, 0x0011B264, 0x290E8E64, 0x31ECBDB3, 0x12CE5B33, 0xC3B002D1, 0xE44D6D56,
  0x08008D38, 0x5AECB1ED, 0x57650688, 0x2C7D6F14, 0x8B75007A, 0x76BB614E, 0xDFD5C32D,
  0xD837A801, 0xBCC43224, 0x5385782E, 0x4810000B, 0x71DA7A60, 0x08649857, 0x791E2516,
  0x00083164, 0xA645E102, 0x16144199, 0xFF431FD5, 0x7CD38485, 0x1917D563, 0x44E2187E,
  0x66127B9B, 0x6B7CD158, 0x4197C471, 0xC524E019, 0xD6190E4C, 0x31187390, 0x08585057,
  0x429A1595, 0x57E4217C, 0x04196B4D, 0x447B4E09, 0x30699A18, 0x0B15D575, 0x07D6C000,
  0xC5E64900, 0x26535951, 0x6B8DC669, 0x5EA594C1, 0xD1748165, 0xA4D1EC94, 0xD1E31DD0,
  0x0A421634, 0x431104D2, 0xD7A951D0, 0xB97C0095, 0x7D5B77A5, 0x16985799, 0x8067D9D5,
  0x20B9CA4E, 0x08FA5F60, 0x04009300, 0x7294A50A, 0x9DA1195A, 0x65E0025C, 0xE98A11A3,
  0xE28710E7, 0x104790E8, 0x7CD3A421, 0xD205B26C, 0x5439CD9B, 0xCA587365, 0x7964A779,
  0x98E7CA52, 0x6B2A267F, 0xB9FA8392, 0x0400445B, 0x00000004, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault4[] =
{
  0x000006DE, /* ratio 42.09 % */
  0xB8001B00, 0x00000452, 0x00D2002B, 0x0EE00328, 0x98001000, 0xE0037800, 0x0639800C,
  0x58184801, 0x0014C010, 0xA0022E79, 0x9B4010B3, 0x94A40087, 0xA29248C4, 0x1906929C,
  0x91F83470, 0x54884921, 0x09849A12, 0x004CC1C0, 0x54BC0042, 0x48CD1168, 0x8A566E00,
  0xA7E11834, 0x00610011, 0x12EA398C, 0x0C954A24, 0x58CCDA31, 0x001427E1, 0x65262946,
  0x00083108, 0x16516738, 0x0C551A4C, 0xC9253600, 0xF3F07C64, 0x6A8F1363, 0xE0054291,
  0xB9432E16, 0x3CFC2706, 0xD96EF782, 0x7E2168B4, 0xA27883AC, 0xE906A3D0, 0x02883412,
  0x6BBD1540, 0x987452F4, 0xCF0007F4, 0x9C0A3229, 0x6587800C, 0xEA1B9ACC, 0xC0B191F5,
  0x7FA2174F, 0x18E27656, 0x24854622, 0x98368619, 0xB79EE7E3, 0x00CA437B, 0x00388300,
  0x00540016, 0xF7E003E8, 0x99708A54, 0x97A336FF, 0x52E970E4, 0xB18CBF81, 0xA8D7C01C,
  0xBC438163, 0x9100049C, 0x77A1D9E6, 0xC01D5E9F, 0xE1D9F58C, 0xB06EEF6E, 0x4992EF87,
  0x1B8762E5, 0xE2F1B855, 0xDD8729C8, 0x4761C073, 0xC1D6525D, 0x007C9537, 0x5DDCC770,
  0x12858159, 0x47A1E679, 0x1DE87460, 0x037BD478, 0x7D20D76A, 0xDA459800, 0x07E50C6F,
  0x0D567F1F, 0xC9801C57, 0x8618E829, 0xC00821EC, 0xE87A1675, 0x00430020, 0x10415E50,
  0x4BD0A53D, 0xD5143927, 0xF7390C4B, 0x921A7C22, 0x0C8D61C4, 0x889068DE, 0x97A8911D,
  0xE8A1E87E, 0xB5C78ADF, 0x067AA1D8, 0x91A347B6, 0x5B47764D, 0xA8F5978E, 0x0DAA9013,
  0x5C919259, 0x92DED866, 0x24E63E60, 0x57DC0A00, 0xD6540022, 0x012F1069, 0x7F5C088C,
  0xA597FE33, 0x19B63580, 0xC65F51E3, 0x5F776727, 0x0026547D, 0x12743139, 0x14BD0C5A,
  0x118C4915, 0x6E816859, 0xA2A708CA, 0x195731F3, 0x96654963, 0x857A66D4, 0xFB89A526,
  0x96281705, 0x2868BA01, 0xDA064900, 0x3DCC9861, 0x24630001, 0x4A2BC5A1, 0x5247A908,
  0x99151654, 0x2A87A71E, 0x00AE22E9, 0xA9DA8A8C, 0x2AA525AA, 0xE89E787E, 0xC5C68AAA,
  0xB4B225BA, 0xA2ECB97A, 0x514449CC, 0x05FD7254, 0x56C391EC, 0x30B1E6B4, 0xB7E9EB76,
  0xEBBB36A1, 0x06718EB3, 0x5277B4C0, 0xAF959BF9, 0xA6E5AB66, 0xE89AD6ED, 0x969EE082,
  0x56E35C14, 0xC1442E6B, 0xB16E9702, 0x26F92300, 0x3A8A1FBC, 0xD9A9A96F, 0xD694EF8B,
  0x8B2D8A02, 0xADC9B284, 0x18DF14C0, 0x5547A5D4, 0x9A44156A, 0xBA5226DE, 0xEC654D49,
  0x7BBF1285, 0x62CEC16B, 0xE8C6AD0C, 0x8A71DBE5, 0x711B6A82, 0x6C0E3297, 0x1F277763,
  0x2163DB95, 0xCA1476D9, 0x7224618C, 0x1CDF13C0, 0x9D148E6F, 0x10461274, 0xCF72FC21,
  0x5197331C, 0x00010146, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault5[] =
{
  0x0000046E, /* ratio 44.09 % */
  0xB8001100, 0x80000452, 0x24DE0023, 0x20C64004, 0x0B030380, 0xF0B26002, 0x1106438E,
  0x20010E0D, 0x001A4007, 0x18023C74, 0x000C2003, 0x64270E36, 0xE4448004, 0x00680019,
  0xA008E080, 0x2239800C, 0xE9348671, 0x874D6466, 0x8C6E560F, 0x4BE3B269, 0x94CD339B,
  0xA0D28914, 0x00289584, 0xB3D001D4, 0x3690CDA1, 0xD911B63B, 0x14C366D3, 0xB4AC0B0E,
  0xCAC0D0E2, 0x1806A9AD, 0xCF72B1FC, 0x0079A5C9, 0x830000C8, 0x0016002E, 0x03E80054,
  0x85492DC0, 0x55BAF928, 0x5CE433DA, 0x76513EC1, 0x0017B18C, 0x00530014, 0x80099154,
  0x70ADCFCA, 0x1934767E, 0x9B476A72, 0xEE06177E, 0x4830800B, 0x871A3300, 0x31800C56,
  0x560B835F, 0xD1B002C2, 0x8DAACDAD, 0xFB68FA0D, 0xB9DC64D6, 0xD5E2EB75, 0x5BEFF88B,
  0xAB0DA6C4, 0x35D34C4E, 0x4F522780, 0x721A9E67, 0xA7C05926, 0x6D251E4D, 0xAA60F47C,
  0x7F1753A7, 0x003738BB, 0xDF496305, 0x377E6866, 0x516E8341, 0x576B96FA, 0xDDE5DE78,
  0x3FA72797, 0x8A73B59E, 0x1564990A, 0x9689D67B, 0x85DB001D, 0xE0721D86, 0x771E2485,
  0x1E66B5E4, 0x07C9BC10, 0xDDF56FC0, 0x0B78DF75, 0x61DFB692, 0xD8D7FA10, 0x14A13D64,
  0x515E7B20, 0x3B5BDD76, 0x8293F821, 0x20D879C7, 0xE845F86A, 0xF009419C, 0xAF435EB6,
  0x85442001, 0x9C17D170, 0xD841C486, 0xF18577E1, 0x8D736217, 0x69D9C8FD, 0xD9485D59,
  0x74E53767, 0x81244F60, 0xA591D3E6, 0x6AE0F8CD, 0x9EE8F64C, 0x0905F144, 0xD5C35D9C,
  0x3587E5C8, 0x9397C88A, 0x534561A7, 0xB4E9335C, 0xC2556754, 0x49975DE8, 0x795CC97E,
  0x1EF8FE3D, 0xD5159969, 0xCE657A18, 0x457DA677, 0x8CDFA9EA, 0xA8098220, 0xB4914B63,
  0xE1214FC6, 0x494FE754, 0x9F60CA3A, 0xD0E9866D, 0x000101A8, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault6[] =
{
  0x0000044C, /* ratio 50.55 % */
  0xB8000D00, 0x80000452, 0x1852001F, 0x60611004, 0x00200041, 0x065001CC, 0x6F0018C0,
  0x4001B800, 0x00442246, 0xC19C0061, 0x43617098, 0xB6230682, 0x23469001, 0xE8003A80,
  0x3118F450, 0x0A8CC8E4, 0x98703E0D, 0x921A0012, 0x04D0E530, 0x4E649229, 0x7E780E00,
  0xCF3218EC, 0x17469B50, 0xF1F944EE, 0x6B8ACCCE, 0x29C5169E, 0x8CCAE955, 0x9CFE651B,
  0x496B7358, 0xEE941F83, 0xA886C001, 0x60001953, 0x02C005C4, 0x7D000A80, 0x98BDAC00,
  0xB5DE6DB1, 0x84CA5C66, 0x5B22D7FB, 0xE0634200, 0xAD41585D, 0x018BBEE1, 0x2330060B,
  0x89B6E1B2, 0xA0841B17, 0xA21C2234, 0x9456B317, 0x4463F649, 0x280F0B14, 0xC00428ED,
  0x5605834A, 0xB4AD808B, 0x0D006CCC, 0xB986A294, 0x8CC6EB31, 0x4D1E3756, 0xC86AD54A,
  0x6E5B3296, 0x4002E91C, 0x3106E6F3, 0x7AD006AC, 0xA6EBC465, 0xAEDF63B3, 0xA2EBA597,
  0xA6C401AF, 0x02E0D79A, 0xFA5C55A5, 0xA4DC1926, 0x65242752, 0x31589C46, 0x3F8BD0A4,
  0xD8351795, 0x9994A941, 0x9134B523, 0x5509154C, 0xF9A74751, 0x154AD244, 0x68D1B445,
  0x91955800, 0x351D5950, 0xCC5343D5, 0xF9619F64, 0x739CC4B9, 0x1FE05D0B, 0x880DDE80,
  0x91C95118, 0x1D4451B4, 0x4B51B455, 0x1D242E07, 0x1455FF55, 0x9E0447A0, 0xFF826318,
  0x4AD21465, 0x54748DFA, 0x58DA2306, 0x19334C62, 0xA847D1C8, 0x0004D865, 0xD6044619,
  0x151D4E61, 0x09459142, 0x33816488, 0x6A000821, 0xA405123D, 0x00BC0087, 0x464F0025,
  0x679522A9, 0x52816001, 0x04699C43, 0x86FD1F75, 0x023A67A4, 0x4A971810, 0x5513D476,
  0x67386671, 0xF7C60E6B, 0xEE4A67D1, 0x4C9F6279, 0x8FE61002, 0x66D72DDE, 0x9865546E,
  0xF11F9A04, 0x06509249, 0x67D8E101, 0x40A5E61B, 0x05356D77, 0xC9725C00, 0x855DD755,
  0x615875F1, 0xAA758581, 0x06611765, 0x1D796280, 0x1193E671, 0x48D2D865, 0xD6D4851B,
  0xD5F9245E, 0x5648AC5D, 0x9961EAD6, 0x4190B795, 0x00000101, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault7[] =
{
  0x0000040E, /* ratio 55.11 % */
  0xB8007700, 0x80000452, 0x00D8003D, 0x0F200308, 0x60001900, 0x02C00444, 0x7D000A80,
  0x0318020E, 0x8C424DE0, 0x7000CD1A, 0x43CE8003, 0x2A390890, 0x06200394, 0xA60023C8,
  0x00026800, 0x00270004, 0x700494CA, 0x960023A7, 0xF472346B, 0x422330A8, 0xCE4D2491,
  0x23F1B940, 0x0D19974B, 0x505818F2, 0x0E8642A3, 0x58944A21, 0xA6D1A2F1, 0xDD229944,
  0xCAABF109, 0xE2412D9F, 0xA7B269D4, 0x6F35A047, 0x26D0042E, 0x459F50A7, 0xB9DC8E43,
  0xB4D3ACD4, 0x35522951, 0x9CEEC528, 0xDAED6F9D, 0xA150A864, 0x0F0EC3CD, 0xF759D49B,
  0x26935DB1, 0x033DECD3, 0x934DB0E0, 0xB1926D1E, 0x9D61922B, 0xFF0F268F, 0xC6A00830,
  0x820081E0, 0x338C2800, 0x2E985C89, 0x800152E2, 0xCF668006, 0x747F7D3C, 0x4EA154DC,
  0xCA6D2C86, 0xB9800266, 0x293BC8E5, 0x724865C7, 0x93CD65B4, 0x68668EE3, 0x0741A192,
  0xB68F65AF, 0x5D88800E, 0xEA39C23B, 0x35E0C834, 0xB91C8F73, 0xD248F70B, 0xB6D78560,
  0x7001C249, 0x21CDA4DA, 0x1245CDBC, 0x74293A49, 0xB2086E58, 0x4F6BC166, 0x7ED3B7F0,
  0x6005C5FD, 0x55EDD46F, 0x24006760, 0x13419B98, 0x5A0576BC, 0xC00629D8, 0x7795A16E,
  0x19767A5E, 0x2B6BC114, 0x8B834000, 0x0000DC00, 0x30E4000E, 0x2D104B91, 0x366BA2F5,
  0x411ED6B0, 0x1E841506, 0x269D1C43, 0x34007ADF, 0xC2119AF0, 0x001924B1, 0xDC26C42D,
  0x26BDEC68, 0x82454E93, 0x064393B8, 0x4C1AF02D, 0x1688113A, 0x0929AC63, 0x453E6CE4,
  0x4D729B98, 0x785DF505, 0x17178C00, 0x25D5A749, 0xA92C5D86, 0xD2615AF8, 0x4E9E8479,
  0x1749D136, 0x94EA7700, 0xBC080027, 0x874E9346, 0x049066F5, 0xA2F8C22C, 0x28DA348C,
  0xE8008E11, 0x3D001AD8, 0xA29F68CA, 0x97166173, 0x0000426C, 0x310579A0, 0x00121309,
  0x6D800128, 0x9AC12DCC, 0x8432A007, 0xD5757087, 0x22479719, 0x4494B4D9, 0x9344C936,
  0xB50D364C, 0xA54D7757, 0x67979AC6, 0x0BEBA4E2, 0xA8343531, 0xB6BC0541, 0x5DEE975A,
  0x875A1D16, 0x405AC6B1, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault8[] =
{
  0x00000476, /* ratio 48.34 % */
  0xB8001700, 0x80000452, 0x00D00021, 0x4DC00308, 0x00650043, 0xC00831B0, 0x0082C0C0,
  0x98A4647E, 0x24C1A2E0, 0x0440E800, 0x080006D0, 0x023C0D8A, 0xCC90F2A8, 0xD2003348,
  0xD2E88C3C, 0x20950320, 0x03948A1D, 0x97000EA0, 0xA41A7911, 0x4C48D2A0, 0x9E233C00,
  0x4DE00294, 0x1D4790CF, 0x2009319E, 0x00318008, 0xC95470D6, 0x919CE234, 0x24A60D22,
  0x4CA8D068, 0x9E455F9E, 0x26B32AB4, 0x01648100, 0x313A394C, 0x11AC43A2, 0xF9C0420D,
  0xB553CE10, 0x9542AF55, 0x5EA1D4E9, 0xFAFD0EBE, 0xE6573C04, 0x270C8754, 0xC00C44DA,
  0x229E48CE, 0x19BC5269, 0xA842C997, 0x94CA1558, 0x4A82314A, 0x00F20021, 0xEBF0CBF0,
  0x464493D7, 0xFAA8644E, 0x089550EB, 0xDC168E9D, 0x91DDE476, 0x4C4B0B27, 0x6501F14D,
  0xCB6150C5, 0x76FAACFE, 0xD33EB9DC, 0x127DDE7E, 0x54180005, 0xFAC446BF, 0xCF450535,
  0x78009D71, 0x800A8002, 0xE6A83A82, 0x2A97FD5C, 0x01B4E1D0, 0xF4EA86BC, 0xC0B3CC24,
  0x4A46CF3F, 0x86553E52, 0xD4E55149, 0xA6F5FE62, 0x1D0A5414, 0xDB5F95F8, 0x609F751D,
  0xD844890C, 0x0001C143, 0x890549D3, 0x34000357, 0x4502E000, 0x1E24A85D, 0x47A1E679,
  0x01904155, 0xBB70C620, 0x6352754D, 0xD825D9C3, 0x55521181, 0x9DCB6557, 0x827FC314,
  0x7CDFE5E1, 0x9587CD32, 0xC8195F70, 0x1215669F, 0xF94FE458, 0x76609489, 0xD32835EC,
  0x38D55883, 0x5E1543A1, 0x1A001E78, 0x4521E872, 0x5E38885B, 0xA7A65B79, 0xAD9F905C,
  0x548B5138, 0x5657209D, 0x2495F947, 0xF601C854, 0xB9AA7EDE, 0xF5489279, 0x44DC3841,
  0x90F6E97E, 0x37FA4048, 0xBD47A127, 0xF94267B7, 0x5612382D, 0xE5551E53, 0x58514D60,
  0x021996A9, 0x1F8761B0, 0x9884D41A, 0x95499624, 0xB49DC278, 0x45A1489F, 0x168B8005,
  0x49E0151E, 0xD324B9BB, 0x37F27CA4, 0x0DF9801F, 0x8A92D508, 0x9468D822, 0xEB3AB5BC,
  0x8A561267, 0x7227A5E5, 0x9D97A9A9, 0x40506452, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault9[] =
{
  0x00000406, /* ratio 53.59 % */
  0xB8007F00, 0x00000452, 0x009E0027, 0xA0A002A0, 0x0020000E, 0x86C00104, 0x00378022,
  0x034800EE, 0x33800DC0, 0x01480110, 0x1CC00650, 0x84E80092, 0x2432930C, 0x50769413,
  0x23188C56, 0x1193C724, 0x68EC5CC7, 0x32002372, 0x04A0E528, 0x9D63111A, 0x02392796,
  0x20B1192D, 0x68001AC2, 0x10617000, 0x05818340, 0x70014C01, 0x964AA4F4, 0x44463D1C,
  0x56015551, 0x964F1183, 0x453279D4, 0x016708D5, 0x8709E124, 0x4488CB6B, 0x99600264,
  0x83592427, 0xD922E21D, 0x46A2B16B, 0x845800BE, 0x28400234, 0x232A8F46, 0xB1CBB18A,
  0x1FB0D022, 0x1B28CA43, 0x8F4ECB57, 0x34D4014C, 0xC16E2088, 0x1A0D2DCB, 0xA2311B88,
  0x877105C1, 0x92ABAE10, 0x0CAAE3E3, 0xBC6942E2, 0x92D0A413, 0x341A4F27, 0x6320D04B,
  0x024B16B0, 0xEB771D7D, 0x813A9D51, 0xB70834F7, 0x2ABB4278, 0x2C8D1EEB, 0xDACE8011,
  0x55C6DF9F, 0xF6801DB8, 0x827D5ABB, 0xA2B2C8F4, 0x7DCD07C1, 0x31E92C56, 0xF3C9E13A,
  0x3B887AAB, 0x98CFBBF1, 0x9184BDA1, 0x10BD1146, 0x09184212, 0x156106D5, 0x4457D455,
  0x12047183, 0x1069551A, 0xEDEB5CD7, 0x79485BF4, 0x62115495, 0x1DC77538, 0x40021242,
  0x51064AA1, 0x3D155710, 0x45847685, 0x1ED64D18, 0x66217A87, 0xC9D655D0, 0x424B1F96,
  0x83513445, 0x5D67C155, 0x17998E5E, 0x45184A92, 0x2C6EDBB4, 0x71D71752, 0xD2A45576,
  0xD7D1E983, 0x41558253, 0x1C5E5710, 0x48653509, 0x1279595B, 0xF05D0696, 0x49476124,
  0x065F4009, 0x97DBC972, 0xD3C98511, 0x2419BC98, 0xA93C85C1, 0xEC509254, 0x94111459,
  0x8006A669, 0xC4A18203, 0x09057712, 0xA450A455, 0x495235C5, 0x40072D2C, 0x65517102,
  0x1A9854E9, 0x355C4164, 0x0D954549, 0x03066E98, 0x466D9B00, 0x3D500013, 0x000CD524,
  0x66EAC43C, 0xDD696906, 0x04792C48, 0xFE0B4614, 0x2845A689, 0x565D5002, 0x10548DBB,
  0x90014E43, 0xB113AE97, 0x554312F8, 0x00101555, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault10[] =
{
  0x00000410, /* ratio 52.69 % */
  0xB8002100, 0x80000452, 0x1CB20029, 0x40054004, 0x400026C1, 0x20023000, 0x002A8008,
  0x08343098, 0x82C0C2A0, 0x7800B400, 0x800DC003, 0xD4011132, 0x22529950, 0x00699346,
  0x12B949D0, 0x069B0006, 0x58347C29, 0x0019E4D0, 0x44A24D31, 0x42252729, 0x06673394,
  0xA0D3F005, 0xA1068240, 0xF2530800, 0x29360024, 0x03A800C5, 0xAB574F40, 0xD8760D45,
  0x80281139, 0x5A2528A2, 0x68B54AC4, 0xB64F949B, 0x470004CA, 0x44894CEE, 0x3B31DAAC,
  0x8E1CEAC6, 0x8D96A112, 0xDAE53689, 0xBC0167A9, 0xA4652895, 0x533EB35D, 0x37238C16,
  0x28B7DD66, 0x1834CE4D, 0x870A2C81, 0x4E269555, 0x50B1D21B, 0x36382900, 0xAF200CF0,
  0x930D8545, 0x30588000, 0xAC07C1B5, 0x7D90009D, 0x8D920004, 0xB68367B1, 0xEB01200D,
  0x0C4C0021, 0xEC8188E7, 0xE18AB6E1, 0xF5CBAE3E, 0x7CBD6B6E, 0x409472FD, 0xBFCC6F36,
  0x2562B554, 0x57AE442D, 0x763944AF, 0xE63BAC16, 0x2573344F, 0x26493552, 0x79AA7D65,
  0x50073B98, 0xFE5ABEBF, 0x1A24C600, 0x85512649, 0x09554B95, 0x4E5FC008, 0x4A18D591,
  0x9D04CD7F, 0x08411075, 0x31067C00, 0x33559DD0, 0x8757D4A1, 0xC0A41A00, 0xB59A1F7E,
  0x919C4A17, 0xA25D5715, 0x7A1315BD, 0xE0B85529, 0x8591EA85, 0x021E7C1C, 0xDA8C46B0,
  0x451127C1, 0x83747057, 0x9849DA83, 0x49916898, 0x3E8CD984, 0x4A5F8746, 0x1A48EE46,
  0x45611255, 0x9A505320, 0x860BA4B5, 0x7E52968D, 0xD1257124, 0xF6155C5F, 0x90054703,
  0x649A02B5, 0x60A6C0B5, 0x1209BC21, 0x40791C1E, 0xE9714896, 0x7C449056, 0x461294B6,
  0x50D6C9BA, 0x29FA849F, 0x490A4351, 0x4F001205, 0x6E908481, 0xD1515A5C, 0xD9713675,
  0xDC317958, 0x6A0191C4, 0x8A667002, 0x1741ED82, 0xD5F54562, 0xFD8E4647, 0x665C5124,
  0x41AAD000, 0xE5C59008, 0x697000AC, 0x35827190, 0xB2421086, 0x0391C0E9, 0x40051D64,
  0x97DE575F, 0x72BE7E58, 0x004051C4, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault11[] =
{
  0x00000408, /* ratio 51.55 % */
  0xB8001700, 0x80000452, 0x00E80029, 0x40109308, 0x0073001D, 0x800830E8, 0x0082C0C1,
  0xA86C2C84, 0x39000CB0, 0xA448F200, 0x41A2E098, 0x00D20026, 0xE3C003B0, 0x4C0D8344,
  0x12D29002, 0x2A9A98C0, 0x33247A59, 0x824960D2, 0x80006306, 0x0005E001, 0xCA7D44A1,
  0x4DD1E844, 0x971597C3, 0xD549B43A, 0x5088C463, 0xD0050263, 0x8C880002, 0x99AE6F1B,
  0x8027A70A, 0x7A693208, 0xCDE0036C, 0x895F9ACA, 0xF2A964D4, 0x3B8347A6, 0xE000CA64,
  0x2357E794, 0x1DB4D800, 0x936BF20C, 0xAA151E9A, 0xEBC67A74, 0xD96EC1CC, 0x36587D7E,
  0x208642A2, 0xEAFC4615, 0x8557E9D6, 0xAE06E068, 0xD7E1A669, 0x7A792A88, 0xF4A00CE4,
  0x4200C657, 0x1320B41B, 0x7C208005, 0xC9153B07, 0xCDC3EDD6, 0xADBF5400, 0x4905335B,
  0xAB725599, 0xA615F854, 0x9983274C, 0x3BEC0003, 0x5BA54F37, 0x4BED4FA9, 0xDC4C81D1,
  0x4F2E793C, 0x60A37BA9, 0x1EB7DE83, 0x2D911956, 0x43378543, 0x4078A4EF, 0x14A451A6,
  0x012CC80D, 0x0441BF80, 0x18B5B132, 0x156DC744, 0x4520755A, 0x3C4C9FF4, 0x82922431,
  0xD184FC00, 0x3001881D, 0x040A8416, 0x04681E58, 0x56DFA41A, 0xE0B5755D, 0x37DD4456,
  0xC82C4514, 0x82479724, 0x709A2625, 0x58E55574, 0xC4811E59, 0x391B5356, 0x226090A5,
  0x6E18E085, 0xD216AD20, 0x369D0F60, 0xFC009055, 0x32065140, 0x8D92A601, 0x99885000,
  0xD595C968, 0x090C4818, 0xC260D867, 0x76568419, 0x98E8B5E4, 0x16E65842, 0x16356951,
  0xBD421188, 0x41935859, 0x44856E19, 0xA639EF4D, 0x0D328791, 0xF413C001, 0x000504C9,
  0x90663C49, 0x54215B40, 0xC269771D, 0x1E469329, 0x67537431, 0x24D04914, 0xA57E4879,
  0x09824327, 0x035B9656, 0x7D50642A, 0x9056095B, 0x2051065C, 0x45E41593, 0x8EA610F4,
  0x711DCA05, 0x1205BA75, 0x1A1D527A, 0x19204D5C, 0x14A06A85, 0x00101451, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault12[] =
{
  0x00000424, /* ratio 47.17 % */
  0xB8002F00, 0x00000452, 0x00D20023, 0x0E600390, 0x5A003A00, 0x10920800, 0x20001900,
  0x10010C00, 0x8F1B0006, 0x7800E000, 0x43CDD153, 0x0C240083, 0xA0A0082C, 0xC6008E1D,
  0xF308D460, 0x249147E3, 0x68849A15, 0x83412550, 0x39D4004F, 0xC4287229, 0x0A46528C,
  0xC013A93D, 0x560C9419, 0xA002441A, 0x13A3CC0C, 0x9000C401, 0xA903E0D4, 0x64763F59,
  0x126666D8, 0x9E8B2600, 0xA2960AF4, 0xCA0085D8, 0xB20AAD22, 0x13941E63, 0x68EC6EC0,
  0xA6D2A433, 0x5DA6CF58, 0xD7C013CA, 0x0E61079F, 0xAD1818FD, 0x0F28A35F, 0x71D844B3,
  0x56B9C9F1, 0xE835DEDF, 0x85422C00, 0xAE62AD0C, 0x8033600B, 0x9293600A, 0x69F4DC84,
  0xD7328A46, 0xB6AC7598, 0xAA964FB0, 0x3A749709, 0xDAE42833, 0x9D802328, 0x55A3F152,
  0x03453293, 0x6D78FC10, 0x874AE1CA, 0x9568BC9A, 0x9AD1C3A1, 0x8C467651, 0xA64C7A50,
  0xDC664D4A, 0x52F3D9CA, 0x8A49E0E4, 0xAA032007, 0x6068005E, 0x7999349A, 0xB9C45B26,
  0x9D763B59, 0x06CA3635, 0x97415160, 0xA8095843, 0x413D5D1E, 0x2E0004E7, 0x00044000,
  0x03071202, 0x20015C83, 0x4E130004, 0xCF7920D8, 0x82DC4621, 0x20283E0D, 0x78561A55,
  0x72148661, 0x1F419B78, 0x00222852, 0x60D56D54, 0x98622752, 0x022B4A22, 0x108862D0,
  0x8D2254D2, 0xA2A89636, 0xB8F62E82, 0x06268C91, 0x1E826379, 0x00220002, 0x20F56456,
  0xB8A24092, 0x5D6076A1, 0x1B451058, 0x15E4F505, 0x2380CE14, 0x49460D91, 0x5A3F83D1,
  0xE595E4A8, 0x5665A621, 0xE1493A5D, 0xD98A0D46, 0x012D6E26, 0x410004D0, 0x83505809,
  0x20F82D67, 0xA8ED2C93, 0x40001326, 0x6A8CE361, 0x98E4256E, 0xA2F93E4D, 0xE9021484,
  0x161D92E8, 0x238F272A, 0xA5E49A2E, 0x5064A26C, 0x00000040, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault13[] =
{
  0x0000042E, /* ratio 44.49 % */
  0xB8002500, 0x80000452, 0x009C0029, 0x08800170, 0x90002A00, 0x10B18800, 0x42001480,
  0x51800226, 0x8141A291, 0x54220D04, 0xC421D0C8, 0x5E2B1B21, 0x239148CC, 0x40008F43,
  0xB0983C16, 0x280049A2, 0xA95C3229, 0x8FC6A5D1, 0xAC8E6703, 0x90400568, 0x62771A86,
  0x20D1D9EC, 0x0D410700, 0x14782C66, 0x0C9A93E5, 0xE19454AF, 0xAC48A654, 0x751E8A00,
  0xCB6793E8, 0xD24340A6, 0x0994B924, 0x95292800, 0x13EAE466, 0x36B5D7A6, 0xBB2CD21F,
  0x98DA2E94, 0xD496F151, 0xDCEF912B, 0xAB013FB8, 0xA2183A1D, 0xFB169D44, 0x981BB622,
  0x8893D231, 0xD97DFA79, 0x9BD832B5, 0xAE4A5539, 0x604174EB, 0x44920023, 0x2510C82E,
  0x1750835C, 0xB57D5583, 0x06D24A4A, 0xC946041B, 0xB851F516, 0xD53B831C, 0x457796AD,
  0x72996FDF, 0x2C1BBDCC, 0xCF14B872, 0xDCEE2F32, 0xC3E54E28, 0x8006F79B, 0xECEDFA1A,
  0xD777B7D4, 0x03C01D28, 0x0B3179ED, 0xAD35C9F7, 0xAE4DB050, 0x719D1703, 0x00F6E206,
  0xDEB69C12, 0x99F4F93A, 0x5CF431C6, 0x0711E54A, 0x91557560, 0xE7419297, 0x75DE9785,
  0x10C59D1C, 0x9659777E, 0xC9F35B91, 0xFF671DF5, 0x18570419, 0x4001B800, 0x01B00019,
  0x01A90800, 0x570002F0, 0x001DC875, 0xC0088475, 0x01D00018, 0xBC001A40, 0x4E1CE321,
  0x87D81031, 0x22689232, 0x1695B48A, 0xDA314658, 0x228EA368, 0x029068F2, 0x2226D981,
  0xF8A2368E, 0xCE0D5383, 0x6D8C50E4, 0x89C79000, 0x22319000, 0x38DC7600, 0x210698E3,
  0x59441810, 0x00133724, 0x95760407, 0x69D00019, 0xCA720190, 0xCD059068, 0x880001A1,
  0x24288A22, 0x09FC7098, 0x76861C80, 0x248DA249, 0x53A4EA22, 0x00040506, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault14[] =
{
  0x0000044E, /* ratio 50.82 % */
  0xB8002900, 0x00000452, 0x00CA0022, 0x0C6003B0, 0x130D3480, 0x80010002, 0x11378009,
  0xF3A000C3, 0x370022F0, 0x18280106, 0x15801058, 0xD4006C8F, 0xA246D001, 0x0D0491C1,
  0xA770014E, 0x68874723, 0x69204242, 0x90478870, 0x61CA3A66, 0x11801139, 0x08012EA1,
  0x4820098C, 0x3D1F35C4, 0x90A94CD6, 0x1233800C, 0x38851E29, 0x1141A154, 0xF138013C,
  0x462291C8, 0x6A871238, 0x231108E4, 0x29298D48, 0x33EA28B6, 0x508742A7, 0xB8D002B5,
  0x39C72532, 0x95843121, 0xC2B01122, 0x2A9146B2, 0x2DD3E8A4, 0xD910AB00, 0x21690CFE,
  0x29001EEC, 0x6001E635, 0x000D4003, 0x00C4002C, 0x6833C300, 0xF4002A00, 0x21D97001,
  0x0DAB94C6, 0xF11CB03A, 0x5A006AB5, 0x990E2F26, 0xCC6BB680, 0x66560DB7, 0x8033397A,
  0x9F4837CD, 0xF47A1D4E, 0x5BABD30C, 0xE00E0CA3, 0xD1E9EF83, 0x38D5A001, 0x9F6AE874,
  0x2E18017C, 0x55A414EA, 0x0683058A, 0xE431BBBD, 0xB3B6EB83, 0x9DD0076F, 0xC0F8077A,
  0xCFA5EFE5, 0xC3D8F57F, 0x14347934, 0xA5155554, 0xD1216E87, 0x9B719B40, 0x7359F675,
  0xDA883DCA, 0x07C5D26D, 0x95CA0C80, 0x154E51C6, 0x821B87E6, 0x5A568D14, 0x06C21D69,
  0x81FB1400, 0xA25C50A4, 0x68D616F1, 0xE170EA18, 0x458D068C, 0x019A701C, 0x18849C90,
  0x68E12862, 0xDD967E0A, 0x1156266F, 0xE1456455, 0x4A928000, 0x459B7896, 0xD0A4D518,
  0x612D1450, 0x45764453, 0xDC7EA4E5, 0x610007F5, 0x1924AD18, 0xE5CD5848, 0x25455E14,
  0x625A1511, 0x58408486, 0x91E55E50, 0xF5840641, 0xBD0673DC, 0x394214C7, 0x6ED2D64A,
  0x52179905, 0x79F16104, 0xFD107B5C, 0x1C4CD459, 0x4191C975, 0xE8C531BD, 0x0A3D437E,
  0x21259E80, 0x1A601104, 0xA29C0189, 0x1215FD20, 0xB58D254C, 0x4E9E4B52, 0x635866E9,
  0x41A8A469, 0x58D5842E, 0x84462A54, 0x310A5598, 0xBB439104, 0x45118471, 0x5DA5661B,
  0x04A5128A, 0xCE464518, 0x39514424, 0x62180461, 0x69546168, 0x0406D448, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault15[] =
{
  0x00000446, /* ratio 52.65 % */
  0xB8001B00, 0x00000452, 0x00DE002A, 0x08800100, 0xEC003280, 0x60034800, 0x008343CC,
  0x782C0C18, 0x0042E130, 0x01840050, 0x1B22E6E0, 0x1A361C8C, 0xCE4002BC, 0x2E740044,
  0x31739C32, 0x258A4C66, 0xC9A000CF, 0x8642A630, 0xA44A210E, 0x41A21168, 0x34012A05,
  0xA5E648F1, 0x30790019, 0x04EA48FA, 0x058E93C0, 0xF29C7C75, 0x99C42632, 0xAC78D000,
  0x5364E003, 0x02646286, 0xE2D23B48, 0x01678B9A, 0xF1F38590, 0x2793C2A9, 0x9979DE15,
  0x92C8E3F3, 0x61B61951, 0xC5A5F4EA, 0x963D3791, 0x40D18174, 0x9347BED2, 0x1179690E,
  0x1A8345F1, 0x42AC1A09, 0x1AC7EBB2, 0xC6846000, 0x0F292108, 0x2AC59300, 0x2BF34854,
  0xE800A84C, 0x5480051A, 0x5AD38033, 0x8A9C5F14, 0xB047AA99, 0x065EDB74, 0x6A76D290,
  0x5AD5AC8F, 0x2D383854, 0x29AF914E, 0x13D92C2A, 0x8C006CB6, 0xCA485E0D, 0x98C524B9,
  0x749E470C, 0xD3647109, 0xBCF117C0, 0xA69319A4, 0x3BDC0FC1, 0xD27B4C8F, 0x7B8FCFB5,
  0x5B577E5D, 0x865EE212, 0xD865094D, 0x5001D945, 0x45416D9A, 0xDD6BA034, 0x6450C679,
  0x041431B6, 0x48054D00, 0x24114621, 0x5E495055, 0x7F50C651, 0x1207FC00, 0x50004900,
  0x480F4195, 0x1453DBA6, 0x431834B9, 0x22789521, 0x38A81900, 0x522C001D, 0xD2659836,
  0x7AD82675, 0x9AF8EC00, 0x54196245, 0xCE0D6DA3, 0xF75A9657, 0x78110581, 0x51F7F99D,
  0x8462268C, 0x002A5240, 0xA496E590, 0x87609525, 0x97187516, 0x668C2F68, 0x95490150,
  0xB695D069, 0x0017C131, 0x9024196F, 0xA650426D, 0x41157990, 0x0E461EC7, 0x4BC46524,
  0xE65001E4, 0xE48D2784, 0xDA5E95A2, 0xB5461B19, 0x4C55C471, 0x1EE59196, 0x45240900,
  0x1A877428, 0x1B6DA7D4, 0x5452E9E6, 0xA3762574, 0x193DBEA6, 0xBD2E47A2, 0x0E8950C5,
  0x6DA95419, 0x03200031, 0x40003300, 0x19A00003, 0x00A58244, 0x439939D4, 0x5A29FD05,
  0x7AD6B3AC, 0x0036682B, 0x38000370, 0x00039000, 0x10DAFA13, 0x468EC100, 0xE2B6AD2C,
  0xCBB2400A, 0x462CFB36, 0x00040518, 0x00000000
};

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault16[] =
{
  0x000003F8, /* ratio 53.15 % */
  0xB8002700, 0x80000452, 0x00DE0021, 0x0CC00370, 0xCE003480, 0x4003A800, 0x0032800E,
  0x02900040, 0x32000C20, 0x041A130F, 0x41606080, 0x4E3A4200, 0x82F238FC, 0x0E418349,
  0xA002A802, 0x53828009, 0x28C92000, 0x270009F3, 0xA4CA6F3F, 0x00089422, 0x72474717,
  0x0A000978, 0x63422600, 0x11A82CE6, 0x40A04FA1, 0xAA24220B, 0xAA4EE891, 0x34C4011B,
  0x4F80049A, 0xD2981883, 0xE81659CC, 0x855E9E11, 0x928B5C6A, 0x2998C227, 0x6A4416A1,
  0x834124B0, 0x00D80039, 0x48F08300, 0x22634C0D, 0xA71369A4, 0x01649E4E, 0x341AB4E4,
  0x49A2D0EB, 0xC09002F9, 0xA2002A74, 0x7802DB44, 0x4C6531AB, 0x6A91469A, 0xF4D4C07E,
  0x3546004C, 0xA00B111A, 0x23D5542C, 0x4CFE741D, 0xA0E8639B, 0x841B716F, 0xE820BBB0,
  0x9679C0DA, 0xE0D49D4D, 0x8592BFD2, 0x5A4D171E, 0x1C845028, 0x5DE534B3, 0x25CF2AF6,
  0x070BB542, 0xCE7A1880, 0x3EB7C82B, 0xE0B3CEA6, 0x9DDAB0F5, 0xDE3EF6FE, 0xDCE979A5,
  0x1A346B93, 0x8D4C6893, 0xD427F51C, 0x46EC1578, 0x39084213, 0xB2521396, 0x4E540721,
  0x1CD6C15F, 0x85300700, 0x3009669B, 0x81000315, 0x615860C9, 0xDD086506, 0x00E0000C,
  0x8E1F0D00, 0x3549E224, 0x60837000, 0x80A41A29, 0xD86C0086, 0x818587A2, 0x6A058008,
  0x4B070001, 0x1211D11E, 0x77ED1243, 0x84760011, 0x1791C634, 0x7DD0248E, 0x91890910,
  0x84816546, 0x42424311, 0x184410E4, 0x93D06459, 0xE514E527, 0xB4C51A91, 0xCD1892E4,
  0x1A9A8001, 0x1E518781, 0x1F785523, 0xB41A4246, 0xE56F5300, 0xDB995364, 0x03106501,
  0x11E4D94C, 0x04690C44, 0xFD124295, 0x6A91E819, 0xA1D3C1A2, 0x1AC48D11, 0x04813174,
  0x25189192, 0x6B9A1109, 0x741C448E, 0x2479A546, 0x292E471B, 0x92A49F24, 0x736E906A,
  0x462A4002, 0x5314F2A6, 0x75F923AA, 0x31221692, 0x4C8C9184, 0x9064BA41, 0x52348E47,
  0x00000040, 0x00000000
};

/* Constant values used in this 'C' module only. */
static const XColor _Const0000 = { 0xFF, 0xFF, 0xFF, 0xFF };
static const XColor _Const0001 = { 0x56, 0x56, 0x56, 0xFF };
static const XRect _Const0002 = {{ 0, 0 }, { 800, 480 }};
static const XRect _Const0003 = {{ 0, 50 }, { 800, 480 }};
static const XColor _Const0004 = { 0x38, 0x38, 0x38, 0xFF };
static const XColor _Const0005 = { 0x66, 0x66, 0x66, 0xFF };
static const XColor _Const0006 = { 0x20, 0x20, 0x20, 0xFF };
static const XColor _Const0007 = { 0x21, 0x21, 0x21, 0xFF };
static const XRect _Const0008 = {{ 0, 45 }, { 800, 50 }};
static const XColor _Const0009 = { 0x78, 0xAA, 0xFF, 0xFF };
static const XColor _Const000A = { 0x2B, 0x38, 0x44, 0xFF };
static const XColor _Const000B = { 0x8B, 0xB8, 0xE8, 0xFF };
static const XRect _Const000C = {{ 610, 391 }, { 796, 412 }};
static const XStringRes _Const000D = { _StringsDefault0, 0x0003 };
static const XColor _Const000E = { 0x00, 0x00, 0x00, 0xFF };
static const XRect _Const000F = {{ 0, 0 }, { 133, 45 }};
static const XStringRes _Const0010 = { _StringsDefault0, 0x0019 };
static const XRect _Const0011 = {{ 128, 425 }, { 248, 470 }};
static const XStringRes _Const0012 = { _StringsDefault0, 0x002F };
static const XRect _Const0013 = {{ 3, 425 }, { 123, 470 }};
static const XStringRes _Const0014 = { _StringsDefault0, 0x0041 };
static const XRect _Const0015 = {{ 620, 349 }, { 800, 388 }};
static const XRect _Const0016 = {{ 133, 0 }, { 266, 45 }};
static const XStringRes _Const0017 = { _StringsDefault0, 0x005C };
static const XRect _Const0018 = {{ 533, 0 }, { 666, 45 }};
static const XStringRes _Const0019 = { _StringsDefault0, 0x0073 };
static const XRect _Const001A = {{ 266, 0 }, { 400, 45 }};
static const XStringRes _Const001B = { _StringsDefault0, 0x008C };
static const XRect _Const001C = {{ 378, 425 }, { 498, 470 }};
static const XStringRes _Const001D = { _StringsDefault0, 0x00A8 };
static const XRect _Const001E = {{ 503, 425 }, { 623, 470 }};
static const XStringRes _Const001F = { _StringsDefault0, 0x00B7 };
static const XRect _Const0020 = {{ 253, 425 }, { 373, 470 }};
static const XStringRes _Const0021 = { _StringsDefault0, 0x00C8 };
static const XRect _Const0022 = {{ 10, 60 }, { 800, 410 }};
static const XRect _Const0023 = {{ 10, 60 }, { 790, 410 }};
static const XRect _Const0024 = {{ 10, 60 }, { 795, 410 }};
static const XRect _Const0025 = {{ 5, 55 }, { 795, 405 }};
static const XRect _Const0026 = {{ 620, 405 }, { 647, 426 }};
static const XRect _Const0027 = {{ 5, 60 }, { 795, 410 }};
static const XRect _Const0028 = {{ 5, 55 }, { 785, 405 }};
static const XRect _Const0029 = {{ 2, 55 }, { 796, 415 }};
static const XRect _Const002A = {{ 170, 140 }, { 600, 370 }};
static const XRect _Const002B = {{ 630, 0 }, { 800, 340 }};
static const XStringRes _Const002C = { _StringsDefault0, 0x00D8 };
static const XRect _Const002D = {{ 170, 140 }, { 600, 350 }};
static const XRect _Const002E = {{ 400, 0 }, { 533, 45 }};
static const XStringRes _Const002F = { _StringsDefault0, 0x00E2 };
static const XRect _Const0030 = {{ 632, 425 }, { 712, 470 }};
static const XRect _Const0031 = {{ 717, 425 }, { 797, 470 }};
static const XStringRes _Const0032 = { _StringsDefault0, 0x00F2 };
static const XStringRes _Const0033 = { _StringsDefault0, 0x0104 };
static const XStringRes _Const0034 = { _StringsDefault0, 0x010F };
static const XStringRes _Const0035 = { _StringsDefault0, 0x0120 };
static const XStringRes _Const0036 = { _StringsDefault0, 0x012F };
static const XStringRes _Const0037 = { _StringsDefault0, 0x0142 };
static const XStringRes _Const0038 = { _StringsDefault0, 0x0154 };
static const XColor _Const0039 = { 0xBB, 0xBB, 0xBB, 0xFF };
static const XStringRes _Const003A = { _StringsDefault0, 0x0163 };
static const XStringRes _Const003B = { _StringsDefault0, 0x0176 };
static const XStringRes _Const003C = { _StringsDefault0, 0x017C };
static const XStringRes _Const003D = { _StringsDefault0, 0x0182 };
static const XStringRes _Const003E = { _StringsDefault0, 0x0188 };
static const XStringRes _Const003F = { _StringsDefault0, 0x018E };
static const XStringRes _Const0040 = { _StringsDefault0, 0x0195 };
static const XStringRes _Const0041 = { _StringsDefault0, 0x01A6 };
static const XStringRes _Const0042 = { _StringsDefault0, 0x01DD };
static const XStringRes _Const0043 = { _StringsDefault0, 0x0201 };
static const XStringRes _Const0044 = { _StringsDefault1, 0x0003 };
static const XStringRes _Const0045 = { _StringsDefault1, 0x002E };
static const XStringRes _Const0046 = { _StringsDefault1, 0x003D };
static const XColor _Const0047 = { 0xFF, 0x00, 0x00, 0xFF };
static const XColor _Const0048 = { 0x3C, 0x00, 0x00, 0xFF };
static const XStringRes _Const0049 = { _StringsDefault1, 0x0050 };
static const XStringRes _Const004A = { _StringsDefault1, 0x005A };
static const XStringRes _Const004B = { _StringsDefault1, 0x007F };
static const XStringRes _Const004C = { _StringsDefault1, 0x0084 };
static const XColor _Const004D = { 0xE2, 0xE2, 0xE2, 0xFF };
static const XRect _Const004E = {{ 1, 1 }, { 134, 44 }};
static const XColor _Const004F = { 0xEC, 0xEC, 0xEC, 0xFF };
static const XColor _Const0050 = { 0x73, 0x73, 0x73, 0xFF };
static const XColor _Const0051 = { 0x30, 0x30, 0x30, 0xFF };
static const XPoint _Const0052 = { 0, 0 };
static const XPoint _Const0053 = { 133, 0 };
static const XPoint _Const0054 = { 133, 45 };
static const XPoint _Const0055 = { 0, 45 };
static const XStringRes _Const0056 = { _StringsDefault1, 0x0094 };
static const XRect _Const0057 = {{ 0, 0 }, { 40, 45 }};
static const XRect _Const0058 = {{ 40, 20 }, { 85, 45 }};
static const XStringRes _Const0059 = { _StringsDefault1, 0x00A9 };
static const XColor _Const005A = { 0x0A, 0x06, 0x37, 0xFF };
static const XRect _Const005B = {{ 35, 5 }, { 132, 45 }};
static const XColor _Const005C = { 0x11, 0x11, 0x11, 0xFF };
static const XStringRes _Const005D = { _StringsDefault1, 0x00B1 };
static const XStringRes _Const005E = { _StringsDefault1, 0x00B6 };
static const XColor _Const005F = { 0xFF, 0x11, 0x11, 0xFF };
static const XColor _Const0060 = { 0xEE, 0x00, 0x00, 0xFF };
static const XColor _Const0061 = { 0x93, 0xC2, 0xFF, 0xFF };
static const XColor _Const0062 = { 0x83, 0xB2, 0xF0, 0xFF };
static const XRect _Const0063 = {{ 0, 0 }, { 550, 45 }};
static const XRect _Const0064 = {{ 68, 20 }, { 460, 43 }};
static const XStringRes _Const0065 = { _StringsDefault1, 0x00BB };
static const XColor _Const0066 = { 0x16, 0x16, 0x16, 0xFF };
static const XRect _Const0067 = {{ 0, 0 }, { 65, 45 }};
static const XStringRes _Const0068 = { _StringsDefault1, 0x00D2 };
static const XRect _Const0069 = {{ 70, 1 }, { 365, 19 }};
static const XStringRes _Const006A = { _StringsDefault1, 0x00DA };
static const XRect _Const006B = {{ 365, 0 }, { 495, 18 }};
static const XStringRes _Const006C = { _StringsDefault1, 0x00EC };
static const XRect _Const006D = {{ 460, 20 }, { 492, 42 }};
static const XRect _Const006E = {{ 510, 4 }, { 546, 40 }};
static const XRect _Const006F = {{ 0, 0 }, { 120, 45 }};
static const XStringRes _Const0070 = { _StringsDefault1, 0x00FE };
static const XRect _Const0071 = {{ 40, 0 }, { 120, 45 }};
static const XStringRes _Const0072 = { _StringsDefault1, 0x0108 };
static const XColor _Const0073 = { 0x75, 0x75, 0x75, 0xFF };
static const XColor _Const0074 = { 0x64, 0x64, 0x64, 0xFF };
static const XPoint _Const0075 = { 120, 0 };
static const XPoint _Const0076 = { 120, 45 };
static const XColor _Const0077 = { 0xEC, 0xEC, 0xEC, 0x96 };
static const XRect _Const0078 = {{ 0, 0 }, { 180, 295 }};
static const XRect _Const0079 = {{ 47, 1 }, { 179, 44 }};
static const XRect _Const007A = {{ 46, 0 }, { 180, 45 }};
static const XColor _Const007B = { 0x30, 0x30, 0x30, 0xFF };
static const XStringRes _Const007C = { _StringsDefault1, 0x0117 };
static const XRect _Const007D = {{ 50, 0 }, { 129, 25 }};
static const XRect _Const007E = {{ 143, 3 }, { 175, 32 }};
static const XPoint _Const007F = { 45, 0 };
static const XPoint _Const0080 = { 179, 0 };
static const XPoint _Const0081 = { 179, 45 };
static const XPoint _Const0082 = { 45, 45 };
static const XRect _Const0083 = {{ 10, 45 }, { 180, 285 }};
static const XRect _Const0084 = {{ 50, 20 }, { 145, 46 }};
static const XRect _Const0085 = {{ 10, 285 }, { 180, 295 }};
static const XColor _Const0086 = { 0x00, 0x00, 0x00, 0x00 };
static const XColor _Const0087 = { 0x00, 0x00, 0x00, 0x80 };
static const XRect _Const0088 = {{ 0, 285 }, { 10, 295 }};
static const XRect _Const0089 = {{ 0, 45 }, { 10, 285 }};
static const XPoint _Const008A = { 630, 0 };
static const XPoint _Const008B = { 630, 325 };
static const XPoint _Const008C = { 0, 325 };
static const XPoint _Const008D = { 800, 325 };
static const XPoint _Const008E = { 800, 480 };
static const XPoint _Const008F = { 0, 480 };
static const XColor _Const0090 = { 0x8E, 0x8E, 0x8E, 0xFF };
static const XRect _Const0091 = {{ 0, 0 }, { 790, 350 }};
static const XRect _Const0092 = {{ 0, 0 }, { 600, 350 }};
static const XRect _Const0093 = {{ 600, 150 }, { 785, 205 }};
static const XStringRes _Const0094 = { _StringsDefault1, 0x0124 };
static const XRect _Const0095 = {{ 600, 0 }, { 785, 55 }};
static const XStringRes _Const0096 = { _StringsDefault1, 0x0137 };
static const XRect _Const0097 = {{ 600, 75 }, { 785, 130 }};
static const XStringRes _Const0098 = { _StringsDefault1, 0x0148 };
static const XStringRes _Const0099 = { _StringsDefault1, 0x0157 };
static const XStringRes _Const009A = { _StringsDefault1, 0x0160 };
static const XStringRes _Const009B = { _StringsDefault1, 0x016B };
static const XStringRes _Const009C = { _StringsDefault1, 0x0174 };
static const XStringRes _Const009D = { _StringsDefault1, 0x017B };
static const XStringRes _Const009E = { _StringsDefault1, 0x0185 };
static const XStringRes _Const009F = { _StringsDefault1, 0x019B };
static const XStringRes _Const00A0 = { _StringsDefault1, 0x01A3 };
static const XRect _Const00A1 = {{ 0, 0 }, { 170, 40 }};
static const XRect _Const00A2 = {{ 260, 40 }, { 430, 80 }};
static const XColor _Const00A3 = { 0x41, 0x41, 0x41, 0xFF };
static const XColor _Const00A4 = { 0x82, 0x82, 0x82, 0xFF };
static const XColor _Const00A5 = { 0xDB, 0xDB, 0xDB, 0xFF };
static const XPoint _Const00A6 = { 170, 0 };
static const XPoint _Const00A7 = { 170, 40 };
static const XPoint _Const00A8 = { 0, 40 };
static const XRect _Const00A9 = {{ 0, 0 }, { 780, 350 }};
static const XRect _Const00AA = {{ 610, 0 }, { 780, 50 }};
static const XStringRes _Const00AB = { _StringsDefault1, 0x01A9 };
static const XRect _Const00AC = {{ 610, 63 }, { 780, 113 }};
static const XStringRes _Const00AD = { _StringsDefault1, 0x01B9 };
static const XRect _Const00AE = {{ 0, 50 }, { 600, 350 }};
static const XRect _Const00AF = {{ 610, 133 }, { 760, 178 }};
static const XStringRes _Const00B0 = { _StringsDefault1, 0x01CD };
static const XRect _Const00B1 = {{ 610, 183 }, { 765, 227 }};
static const XStringRes _Const00B2 = { _StringsDefault1, 0x01D7 };
static const XRect _Const00B3 = {{ 610, 231 }, { 760, 276 }};
static const XStringRes _Const00B4 = { _StringsDefault1, 0x01E0 };
static const XRect _Const00B5 = {{ 10, 0 }, { 60, 50 }};
static const XRect _Const00B6 = {{ 60, 10 }, { 280, 40 }};
static const XStringRes _Const00B7 = { _StringsDefault1, 0x01EA };
static const XColor _Const00B8 = { 0xFF, 0xFF, 0xFF, 0x7F };
static const XRect _Const00B9 = {{ 355, 5 }, { 535, 44 }};
static const XStringRes _Const00BA = { _StringsDefault2, 0x0003 };
static const XStringRes _Const00BB = { _StringsDefault2, 0x0017 };
static const XRect _Const00BC = {{ 0, 0 }, { 680, 460 }};
static const XPoint _Const00BD = { -200, -200 };
static const XPoint _Const00BE = { 1000, -200 };
static const XPoint _Const00BF = { 1000, 680 };
static const XPoint _Const00C0 = { -200, 680 };
static const XRect _Const00C1 = {{ 650, 10 }, { 680, 430 }};
static const XColor _Const00C2 = { 0x19, 0x19, 0x19, 0xBC };
static const XColor _Const00C3 = { 0x19, 0x19, 0x19, 0x00 };
static const XRect _Const00C4 = {{ 650, 430 }, { 680, 460 }};
static const XRect _Const00C5 = {{ 10, 430 }, { 650, 460 }};
static const XRect _Const00C6 = {{ 650, 0 }, { 680, 10 }};
static const XRect _Const00C7 = {{ 0, 430 }, { 10, 460 }};
static const XRect _Const00C8 = {{ 10, 0 }, { 650, 10 }};
static const XRect _Const00C9 = {{ 0, 0 }, { 10, 10 }};
static const XRect _Const00CA = {{ 0, 10 }, { 10, 430 }};
static const XRect _Const00CB = {{ 10, 10 }, { 650, 430 }};
static const XColor _Const00CC = { 0x7F, 0x7F, 0x7F, 0xFF };
static const XPoint _Const00CD = { 800, 0 };
static const XColor _Const00CE = { 0x00, 0x00, 0x00, 0x20 };
static const XRect _Const00CF = {{ 20, 320 }, { 640, 360 }};
static const XRect _Const00D0 = {{ 20, 20 }, { 220, 160 }};
static const XRect _Const00D1 = {{ 230, 20 }, { 430, 160 }};
static const XColor _Const00D2 = { 0x00, 0xFF, 0x00, 0xFF };
static const XRect _Const00D3 = {{ 440, 20 }, { 640, 160 }};
static const XColor _Const00D4 = { 0x00, 0x00, 0xFF, 0xFF };
static const XRect _Const00D5 = {{ 20, 170 }, { 220, 310 }};
static const XColor _Const00D6 = { 0x00, 0xFF, 0xFF, 0xFF };
static const XRect _Const00D7 = {{ 230, 170 }, { 430, 310 }};
static const XColor _Const00D8 = { 0xFF, 0x00, 0xFF, 0xFF };
static const XRect _Const00D9 = {{ 440, 170 }, { 640, 310 }};
static const XColor _Const00DA = { 0xFF, 0xFF, 0x00, 0xFF };
static const XStringRes _Const00DB = { _StringsDefault2, 0x003A };
static const XStringRes _Const00DC = { _StringsDefault2, 0x0041 };
static const XStringRes _Const00DD = { _StringsDefault2, 0x004A };
static const XStringRes _Const00DE = { _StringsDefault2, 0x0052 };
static const XStringRes _Const00DF = { _StringsDefault2, 0x005D };
static const XStringRes _Const00E0 = { _StringsDefault2, 0x0065 };
static const XRect _Const00E1 = {{ 440, 280 }, { 640, 310 }};
static const XRect _Const00E2 = {{ 230, 280 }, { 430, 310 }};
static const XRect _Const00E3 = {{ 20, 280 }, { 220, 310 }};
static const XRect _Const00E4 = {{ 440, 130 }, { 640, 160 }};
static const XRect _Const00E5 = {{ 230, 130 }, { 430, 160 }};
static const XRect _Const00E6 = {{ 20, 130 }, { 220, 160 }};
static const XRect _Const00E7 = {{ 250, 370 }, { 400, 420 }};
static const XStringRes _Const00E8 = { _StringsDefault2, 0x006F };
static const XRect _Const00E9 = {{ 120, 940 }, { 666, 1296 }};
static const XColor _Const00EA = { 0x35, 0x35, 0x35, 0xFF };
static const XRect _Const00EB = {{ 0, 0 }, { 785, 350 }};
static const XRect _Const00EC = {{ 580, 1 }, { 785, 51 }};
static const XStringRes _Const00ED = { _StringsDefault2, 0x0078 };
static const XRect _Const00EE = {{ 580, 60 }, { 785, 110 }};
static const XStringRes _Const00EF = { _StringsDefault2, 0x008B };
static const XRect _Const00F0 = {{ 580, 120 }, { 785, 170 }};
static const XStringRes _Const00F1 = { _StringsDefault2, 0x009B };
static const XRect _Const00F2 = {{ 1, 214 }, { 126, 264 }};
static const XStringRes _Const00F3 = { _StringsDefault2, 0x00AE };
static const XRect _Const00F4 = {{ 349, 92 }, { 444, 128 }};
static const XStringRes _Const00F5 = { _StringsDefault2, 0x00B8 };
static const XRect _Const00F6 = {{ 2, 183 }, { 147, 216 }};
static const XStringRes _Const00F7 = { _StringsDefault2, 0x00C4 };
static const XRect _Const00F8 = {{ 4, 28 }, { 58, 54 }};
static const XStringRes _Const00F9 = { _StringsDefault2, 0x00D5 };
static const XRect _Const00FA = {{ 5, 0 }, { 55, 27 }};
static const XStringRes _Const00FB = { _StringsDefault2, 0x00DE };
static const XRect _Const00FC = {{ 4, 52 }, { 84, 87 }};
static const XStringRes _Const00FD = { _StringsDefault2, 0x00E6 };
static const XRect _Const00FE = {{ 64, 30 }, { 265, 53 }};
static const XRect _Const00FF = {{ 64, 0 }, { 265, 26 }};
static const XRect _Const0100 = {{ 82, 52 }, { 141, 88 }};
static const XRect _Const0101 = {{ 149, 209 }, { 512, 264 }};
static const XStringRes _Const0102 = { _StringsDefault2, 0x00F1 };
static const XRect _Const0103 = {{ 0, 264 }, { 275, 303 }};
static const XRect _Const0104 = {{ 275, 255 }, { 565, 308 }};
static const XRect _Const0105 = {{ 0, 305 }, { 280, 349 }};
static const XRect _Const0106 = {{ 275, 305 }, { 565, 350 }};
static const XRect _Const0107 = {{ 3, 92 }, { 210, 127 }};
static const XStringRes _Const0108 = { _StringsDefault2, 0x011C };
static const XRect _Const0109 = {{ 348, 124 }, { 498, 174 }};
static const XStringRes _Const010A = { _StringsDefault2, 0x0135 };
static const XRect _Const010B = {{ 151, 124 }, { 281, 174 }};
static const XStringRes _Const010C = { _StringsDefault2, 0x0142 };
static const XRect _Const010D = {{ 0, 124 }, { 140, 174 }};
static const XStringRes _Const010E = { _StringsDefault2, 0x014D };
static const XRect _Const010F = {{ 580, 180 }, { 785, 230 }};
static const XStringRes _Const0110 = { _StringsDefault2, 0x015A };
static const XRect _Const0111 = {{ 275, 5 }, { 421, 41 }};
static const XStringRes _Const0112 = { _StringsDefault2, 0x0171 };
static const XRect _Const0113 = {{ 275, 40 }, { 555, 84 }};
static const XRect _Const0114 = {{ 419, 5 }, { 555, 41 }};
static const XStringRes _Const0115 = { _StringsDefault2, 0x0181 };
static const XRect _Const0116 = {{ 580, 235 }, { 782, 275 }};
static const XStringRes _Const0117 = { _StringsDefault2, 0x0193 };
static const XColor _Const0118 = { 0xC6, 0x00, 0x03, 0xFF };
static const XColor _Const0119 = { 0x55, 0x55, 0x55, 0xFF };
static const XStringRes _Const011A = { _StringsDefault2, 0x01CA };
static const XStringRes _Const011B = { _StringsDefault2, 0x01DB };
static const XStringRes _Const011C = { _StringsDefault2, 0x01E5 };
static const XColor _Const011D = { 0x88, 0x88, 0x88, 0xFF };
static const XStringRes _Const011E = { _StringsDefault2, 0x01FE };
static const XStringRes _Const011F = { _StringsDefault3, 0x0003 };
static const XStringRes _Const0120 = { _StringsDefault3, 0x000C };
static const XStringRes _Const0121 = { _StringsDefault3, 0x0016 };
static const XStringRes _Const0122 = { _StringsDefault3, 0x0021 };
static const XRect _Const0123 = {{ 0, 0 }, { 530, 330 }};
static const XColor _Const0124 = { 0xCD, 0xCD, 0xCD, 0xFF };
static const XRect _Const0125 = {{ 29, 30 }, { 219, 180 }};
static const XRect _Const0126 = {{ 246, 30 }, { 476, 180 }};
static const XRect _Const0127 = {{ 30, 240 }, { 180, 290 }};
static const XStringRes _Const0128 = { _StringsDefault3, 0x002C };
static const XRect _Const0129 = {{ 330, 240 }, { 480, 290 }};
static const XRect _Const012A = {{ 0, 0 }, { 190, 150 }};
static const XRect _Const012B = {{ 10, 59 }, { 180, 91 }};
static const XColor _Const012C = { 0xE1, 0xE1, 0xE1, 0xFF };
static const XRect _Const012D = {{ 130, 0 }, { 180, 150 }};
static const XPoint _Const012E = { 0, 30 };
static const XRect _Const012F = {{ 70, 0 }, { 120, 150 }};
static const XRect _Const0130 = {{ 10, 0 }, { 60, 150 }};
static const XRect _Const0131 = {{ 0, 0 }, { 10, 150 }};
static const XColor _Const0132 = { 0x1B, 0xFF, 0x52, 0x00 };
static const XColor _Const0133 = { 0x87, 0xB6, 0xDB, 0xFF };
static const XColor _Const0134 = { 0xFF, 0xFF, 0xFF, 0x00 };
static const XRect _Const0135 = {{ 60, 0 }, { 70, 150 }};
static const XRect _Const0136 = {{ 120, 0 }, { 130, 150 }};
static const XRect _Const0137 = {{ 180, 0 }, { 190, 150 }};
static const XRect _Const0138 = {{ 0, 88 }, { 190, 150 }};
static const XColor _Const0139 = { 0xCC, 0xCC, 0xCC, 0xFF };
static const XColor _Const013A = { 0xC6, 0xC6, 0xC6, 0xFF };
static const XColor _Const013B = { 0xFF, 0xFF, 0xFF, 0x22 };
static const XRect _Const013C = {{ 0, 0 }, { 190, 58 }};
static const XRect _Const013D = {{ 113, 57 }, { 136, 89 }};
static const XStringRes _Const013E = { _StringsDefault3, 0x0032 };
static const XColor _Const013F = { 0x83, 0x80, 0x83, 0xFF };
static const XRect _Const0140 = {{ 53, 57 }, { 76, 89 }};
static const XColor _Const0141 = { 0xC1, 0xC1, 0xC1, 0xFF };
static const XRect _Const0142 = {{ 0, 0 }, { 230, 150 }};
static const XRect _Const0143 = {{ 10, 59 }, { 220, 91 }};
static const XRect _Const0144 = {{ 150, 0 }, { 220, 150 }};
static const XRect _Const0145 = {{ 70, 0 }, { 140, 150 }};
static const XRect _Const0146 = {{ 140, 0 }, { 150, 150 }};
static const XRect _Const0147 = {{ 220, 0 }, { 230, 150 }};
static const XRect _Const0148 = {{ 0, 88 }, { 230, 150 }};
static const XColor _Const0149 = { 0xD7, 0xD7, 0xD7, 0xFF };
static const XColor _Const014A = { 0xCF, 0xCF, 0xCF, 0xFF };
static const XRect _Const014B = {{ 0, 0 }, { 230, 58 }};
static const XRect _Const014C = {{ 0, 0 }, { 630, 340 }};
static const XColor _Const014D = { 0x37, 0x55, 0xAF, 0xFF };
static const XRect _Const014E = {{ 30, 110 }, { 580, 190 }};
static const XRect _Const014F = {{ 30, 250 }, { 180, 300 }};
static const XRect _Const0150 = {{ 425, 250 }, { 575, 300 }};
static const XColor _Const0151 = { 0x00, 0x00, 0x00, 0x30 };
static const XRect _Const0152 = {{ 0, 0 }, { 480, 390 }};
static const XColor _Const0153 = { 0xCB, 0xCB, 0xCB, 0xFF };
static const XRect _Const0154 = {{ 290, 100 }, { 350, 150 }};
static const XStringRes _Const0155 = { _StringsDefault3, 0x0037 };
static const XRect _Const0156 = {{ 360, 40 }, { 420, 90 }};
static const XStringRes _Const0157 = { _StringsDefault3, 0x003C };
static const XRect _Const0158 = {{ 220, 40 }, { 280, 90 }};
static const XStringRes _Const0159 = { _StringsDefault3, 0x0041 };
static const XRect _Const015A = {{ 220, 100 }, { 280, 150 }};
static const XStringRes _Const015B = { _StringsDefault3, 0x0046 };
static const XRect _Const015C = {{ 290, 40 }, { 350, 90 }};
static const XStringRes _Const015D = { _StringsDefault3, 0x004B };
static const XRect _Const015E = {{ 360, 100 }, { 420, 150 }};
static const XStringRes _Const015F = { _StringsDefault3, 0x0050 };
static const XRect _Const0160 = {{ 220, 160 }, { 280, 210 }};
static const XStringRes _Const0161 = { _StringsDefault3, 0x0055 };
static const XRect _Const0162 = {{ 290, 160 }, { 350, 210 }};
static const XStringRes _Const0163 = { _StringsDefault3, 0x005A };
static const XRect _Const0164 = {{ 360, 160 }, { 420, 210 }};
static const XStringRes _Const0165 = { _StringsDefault3, 0x005F };
static const XRect _Const0166 = {{ 220, 220 }, { 280, 270 }};
static const XStringRes _Const0167 = { _StringsDefault3, 0x0064 };
static const XRect _Const0168 = {{ 290, 220 }, { 420, 270 }};
static const XStringRes _Const0169 = { _StringsDefault3, 0x0069 };
static const XRect _Const016A = {{ 40, 84 }, { 140, 124 }};
static const XRect _Const016B = {{ 40, 51 }, { 130, 80 }};
static const XStringRes _Const016C = { _StringsDefault3, 0x0070 };
static const XColor _Const016D = { 0x02, 0x02, 0x02, 0xFF };
static const XRect _Const016E = {{ 40, 134 }, { 140, 164 }};
static const XStringRes _Const016F = { _StringsDefault3, 0x007D };
static const XColor _Const0170 = { 0x07, 0x9E, 0x1D, 0xFF };
static const XStringRes _Const0171 = { _StringsDefault3, 0x0089 };
static const XRect _Const0172 = {{ 280, 300 }, { 420, 350 }};
static const XRect _Const0173 = {{ 40, 300 }, { 180, 350 }};
static const XRect _Const0174 = {{ 40, 132 }, { 210, 162 }};
static const XStringRes _Const0175 = { _StringsDefault3, 0x0093 };
static const XColor _Const0176 = { 0x36, 0x51, 0xAA, 0xFF };
static const XRect _Const0177 = {{ 30, 132 }, { 210, 162 }};
static const XStringRes _Const0178 = { _StringsDefault3, 0x00A8 };
static const XStringRes _Const0179 = { _StringsDefault3, 0x00BB };
static const XRect _Const017A = {{ 0, 0 }, { 60, 50 }};
static const XRect _Const017B = {{ 5, 5 }, { 55, 45 }};
static const XColor _Const017C = { 0xBA, 0xBA, 0xBA, 0xFF };
static const XColor _Const017D = { 0x42, 0x42, 0x42, 0xFF };
static const XColor _Const017E = { 0xA6, 0xD2, 0xFF, 0x92 };
static const XRect _Const017F = {{ 0, 0 }, { 150, 50 }};
static const XColor _Const0180 = { 0x33, 0x33, 0x33, 0xFF };
static const XColor _Const0181 = { 0xC9, 0xC9, 0xC9, 0xFF };
static const XRect _Const0182 = {{ 3, 3 }, { 147, 47 }};
static const XPoint _Const0183 = { 150, 0 };
static const XPoint _Const0184 = { 150, 50 };
static const XPoint _Const0185 = { 0, 50 };
static const XRect _Const0186 = {{ 0, 0 }, { 160, 120 }};
static const XPoint _Const0187 = { 0, 120 };
static const XPoint _Const0188 = { 160, 120 };
static const XPoint _Const0189 = { 160, 0 };
static const XRect _Const018A = {{ 2, 2 }, { 157, 117 }};
static const XStringRes _Const018B = { _StringsDefault3, 0x00C0 };
static const XPoint _Const018C = { 50, 70 };
static const XPoint _Const018D = { 50, 50 };
static const XPoint _Const018E = { 20, 20 };
static const XPoint _Const018F = { -10, -10 };
static const XColor _Const0190 = { 0xEE, 0xEE, 0xEE, 0xCC };
static const XStringRes _Const0191 = { _StringsDefault3, 0x00C9 };
static const XStringRes _Const0192 = { _StringsDefault3, 0x00CE };
static const XStringRes _Const0193 = { _StringsDefault3, 0x00D3 };
static const XStringRes _Const0194 = { _StringsDefault3, 0x00D9 };
static const XStringRes _Const0195 = { _StringsDefault3, 0x00DE };
static const XRect _Const0196 = {{ 0, 0 }, { 520, 190 }};
static const XRect _Const0197 = {{ 490, 10 }, { 520, 160 }};
static const XRect _Const0198 = {{ 490, 160 }, { 520, 190 }};
static const XRect _Const0199 = {{ 10, 160 }, { 490, 190 }};
static const XRect _Const019A = {{ 10, 10 }, { 490, 160 }};
static const XColor _Const019B = { 0x7F, 0x37, 0x31, 0xFF };
static const XRect _Const019C = {{ 490, 0 }, { 520, 10 }};
static const XRect _Const019D = {{ 0, 160 }, { 10, 190 }};
static const XRect _Const019E = {{ 10, 0 }, { 490, 10 }};
static const XRect _Const019F = {{ 0, 10 }, { 10, 160 }};
static const XRect _Const01A0 = {{ 30, 55 }, { 470, 100 }};
static const XStringRes _Const01A1 = { _StringsDefault3, 0x00E3 };
static const XRect _Const01A2 = {{ 0, 0 }, { 800, 470 }};
static const XRect _Const01A3 = {{ 10, 360 }, { 770, 440 }};
static const XRect _Const01A4 = {{ 599, 376 }, { 749, 426 }};
static const XRect _Const01A5 = {{ 30, 360 }, { 138, 400 }};
static const XStringRes _Const01A6 = { _StringsDefault3, 0x00F5 };
static const XRect _Const01A7 = {{ 160, 360 }, { 268, 400 }};
static const XStringRes _Const01A8 = { _StringsDefault3, 0x00FF };
static const XRect _Const01A9 = {{ 290, 360 }, { 398, 400 }};
static const XRect _Const01AA = {{ 430, 360 }, { 538, 400 }};
static const XStringRes _Const01AB = { _StringsDefault3, 0x0109 };
static const XRect _Const01AC = {{ 30, 400 }, { 138, 440 }};
static const XStringRes _Const01AD = { _StringsDefault3, 0x0112 };
static const XRect _Const01AE = {{ 160, 400 }, { 268, 440 }};
static const XRect _Const01AF = {{ 290, 400 }, { 398, 440 }};
static const XRect _Const01B0 = {{ 430, 400 }, { 538, 440 }};
static const XStringRes _Const01B1 = { _StringsDefault3, 0x011E };
static const XRect _Const01B2 = {{ 20, 20 }, { 750, 345 }};
static const XStringRes _Const01B3 = { _StringsDefault3, 0x0127 };
static const XStringRes _Const01B4 = { _StringsDefault3, 0x012E };
static const XStringRes _Const01B5 = { _StringsDefault3, 0x0137 };
static const XStringRes _Const01B6 = { _StringsDefault3, 0x0140 };
static const XStringRes _Const01B7 = { _StringsDefault3, 0x0148 };
static const XStringRes _Const01B8 = { _StringsDefault3, 0x0150 };
static const XStringRes _Const01B9 = { _StringsDefault3, 0x015B };
static const XRect _Const01BA = {{ 0, 0 }, { 710, 25 }};
static const XRect _Const01BB = {{ 0, 0 }, { 30, 25 }};
static const XRect _Const01BC = {{ 95, 0 }, { 710, 25 }};
static const XRect _Const01BD = {{ 37, 0 }, { 100, 25 }};
static const XRect _Const01BE = {{ 0, 0 }, { 370, 210 }};
static const XColor _Const01BF = { 0xB1, 0xB1, 0xB1, 0xFF };
static const XRect _Const01C0 = {{ 110, 110 }, { 240, 160 }};
static const XStringRes _Const01C1 = { _StringsDefault3, 0x0163 };
static const XRect _Const01C2 = {{ 10, 35 }, { 340, 80 }};
static const XStringRes _Const01C3 = { _StringsDefault3, 0x016B };
static const XRect _Const01C4 = {{ 0, 0 }, { 550, 250 }};
static const XColor _Const01C5 = { 0xE5, 0xE5, 0xE5, 0xFF };
static const XRect _Const01C6 = {{ 2, 2 }, { 545, 250 }};
static const XColor _Const01C7 = { 0xAE, 0xAE, 0xAE, 0xFF };
static const XColor _Const01C8 = { 0x90, 0x90, 0x90, 0xFF };
static const XColor _Const01C9 = { 0x2C, 0x2C, 0x2C, 0xFF };
static const XRect _Const01CA = {{ 8, 5 }, { 530, 87 }};
static const XStringRes _Const01CB = { _StringsDefault3, 0x0184 };
static const XRect _Const01CC = {{ 6, 95 }, { 543, 410 }};
static const XRect _Const01CD = {{ 550, 0 }, { 595, 250 }};
static const XRect _Const01CE = {{ 605, 0 }, { 785, 48 }};
static const XStringRes _Const01CF = { _StringsDefault4, 0x0003 };
static const XRect _Const01D0 = {{ 605, 167 }, { 785, 215 }};
static const XStringRes _Const01D1 = { _StringsDefault4, 0x0010 };
static const XRect _Const01D2 = {{ 605, 56 }, { 785, 104 }};
static const XStringRes _Const01D3 = { _StringsDefault4, 0x0022 };
static const XRect _Const01D4 = {{ 7, 315 }, { 107, 345 }};
static const XStringRes _Const01D5 = { _StringsDefault4, 0x002E };
static const XRect _Const01D6 = {{ 167, 305 }, { 545, 349 }};
static const XRect _Const01D7 = {{ 605, 223 }, { 785, 271 }};
static const XStringRes _Const01D8 = { _StringsDefault4, 0x003C };
static const XRect _Const01D9 = {{ 290, 255 }, { 545, 301 }};
static const XStringRes _Const01DA = { _StringsDefault4, 0x004D };
static const XRect _Const01DB = {{ 8, 255 }, { 235, 299 }};
static const XStringRes _Const01DC = { _StringsDefault4, 0x0062 };
static const XRect _Const01DD = {{ 605, 111 }, { 785, 159 }};
static const XStringRes _Const01DE = { _StringsDefault4, 0x0071 };
static const XStringRes _Const01DF = { _StringsDefault4, 0x0084 };
static const XStringRes _Const01E0 = { _StringsDefault4, 0x0093 };
static const XStringRes _Const01E1 = { _StringsDefault4, 0x00A0 };
static const XStringRes _Const01E2 = { _StringsDefault4, 0x00A5 };
static const XStringRes _Const01E3 = { _StringsDefault4, 0x00B2 };
static const XStringRes _Const01E4 = { _StringsDefault4, 0x00EB };
static const XStringRes _Const01E5 = { _StringsDefault4, 0x0128 };
static const XStringRes _Const01E6 = { _StringsDefault4, 0x0169 };
static const XStringRes _Const01E7 = { _StringsDefault4, 0x01AA };
static const XStringRes _Const01E8 = { _StringsDefault4, 0x01B4 };
static const XStringRes _Const01E9 = { _StringsDefault5, 0x0003 };
static const XStringRes _Const01EA = { _StringsDefault5, 0x000B };
static const XStringRes _Const01EB = { _StringsDefault5, 0x0012 };
static const XStringRes _Const01EC = { _StringsDefault5, 0x001E };
static const XStringRes _Const01ED = { _StringsDefault5, 0x0031 };
static const XStringRes _Const01EE = { _StringsDefault5, 0x0040 };
static const XStringRes _Const01EF = { _StringsDefault5, 0x0052 };
static const XStringRes _Const01F0 = { _StringsDefault5, 0x0057 };
static const XStringRes _Const01F1 = { _StringsDefault5, 0x005D };
static const XStringRes _Const01F2 = { _StringsDefault5, 0x009C };
static const XStringRes _Const01F3 = { _StringsDefault5, 0x00A7 };
static const XStringRes _Const01F4 = { _StringsDefault5, 0x00E5 };
static const XStringRes _Const01F5 = { _StringsDefault5, 0x00EF };
static const XStringRes _Const01F6 = { _StringsDefault5, 0x012D };
static const XStringRes _Const01F7 = { _StringsDefault5, 0x016D };
static const XStringRes _Const01F8 = { _StringsDefault5, 0x0176 };
static const XStringRes _Const01F9 = { _StringsDefault5, 0x01B8 };
static const XStringRes _Const01FA = { _StringsDefault5, 0x01F6 };
static const XStringRes _Const01FB = { _StringsDefault6, 0x0003 };
static const XStringRes _Const01FC = { _StringsDefault6, 0x0009 };
static const XStringRes _Const01FD = { _StringsDefault6, 0x001A };
static const XStringRes _Const01FE = { _StringsDefault6, 0x002B };
static const XStringRes _Const01FF = { _StringsDefault6, 0x003A };
static const XStringRes _Const0200 = { _StringsDefault6, 0x0048 };
static const XStringRes _Const0201 = { _StringsDefault6, 0x0057 };
static const XStringRes _Const0202 = { _StringsDefault6, 0x0066 };
static const XStringRes _Const0203 = { _StringsDefault6, 0x0085 };
static const XStringRes _Const0204 = { _StringsDefault6, 0x009A };
static const XStringRes _Const0205 = { _StringsDefault6, 0x00AA };
static const XStringRes _Const0206 = { _StringsDefault6, 0x00B1 };
static const XStringRes _Const0207 = { _StringsDefault6, 0x00B6 };
static const XStringRes _Const0208 = { _StringsDefault6, 0x00BB };
static const XStringRes _Const0209 = { _StringsDefault6, 0x00C8 };
static const XStringRes _Const020A = { _StringsDefault6, 0x00D6 };
static const XStringRes _Const020B = { _StringsDefault6, 0x00EE };
static const XStringRes _Const020C = { _StringsDefault6, 0x00F3 };
static const XStringRes _Const020D = { _StringsDefault6, 0x00FE };
static const XStringRes _Const020E = { _StringsDefault6, 0x010F };
static const XStringRes _Const020F = { _StringsDefault6, 0x012C };
static const XStringRes _Const0210 = { _StringsDefault6, 0x013B };
static const XStringRes _Const0211 = { _StringsDefault6, 0x0152 };
static const XStringRes _Const0212 = { _StringsDefault6, 0x016A };
static const XStringRes _Const0213 = { _StringsDefault6, 0x0183 };
static const XStringRes _Const0214 = { _StringsDefault6, 0x01A4 };
static const XStringRes _Const0215 = { _StringsDefault6, 0x01BA };
static const XStringRes _Const0216 = { _StringsDefault6, 0x01DA };
static const XStringRes _Const0217 = { _StringsDefault6, 0x01E7 };
static const XStringRes _Const0218 = { _StringsDefault7, 0x0003 };
static const XStringRes _Const0219 = { _StringsDefault7, 0x003E };
static const XStringRes _Const021A = { _StringsDefault7, 0x007A };
static const XStringRes _Const021B = { _StringsDefault7, 0x00A6 };
static const XRect _Const021C = {{ 0, 0 }, { 555, 350 }};
static const XRect _Const021D = {{ 600, 0 }, { 780, 49 }};
static const XStringRes _Const021E = { _StringsDefault7, 0x00DB };
static const XRect _Const021F = {{ 0, 0 }, { 725, 445 }};
static const XRect _Const0220 = {{ 680, 10 }, { 710, 400 }};
static const XRect _Const0221 = {{ 680, 400 }, { 710, 430 }};
static const XRect _Const0222 = {{ 10, 400 }, { 680, 435 }};
static const XRect _Const0223 = {{ 680, 0 }, { 710, 10 }};
static const XRect _Const0224 = {{ 0, 400 }, { 10, 430 }};
static const XRect _Const0225 = {{ 10, 0 }, { 680, 10 }};
static const XRect _Const0226 = {{ 0, 10 }, { 10, 400 }};
static const XRect _Const0227 = {{ 10, 10 }, { 680, 400 }};
static const XColor _Const0228 = { 0xC7, 0xC7, 0xC7, 0xFF };
static const XRect _Const0229 = {{ 21, 160 }, { 579, 368 }};
static const XRect _Const022A = {{ 128, 100 }, { 610, 137 }};
static const XRect _Const022B = {{ 31, 108 }, { 118, 132 }};
static const XStringRes _Const022C = { _StringsDefault7, 0x00E9 };
static const XRect _Const022D = {{ 508, 329 }, { 673, 380 }};
static const XRect _Const022E = {{ 30, 28 }, { 235, 83 }};
static const XStringRes _Const022F = { _StringsDefault7, 0x00F5 };
static const XRect _Const0230 = {{ 466, 28 }, { 671, 83 }};
static const XStringRes _Const0231 = { _StringsDefault7, 0x010A };
static const XRect _Const0232 = {{ 507, 262 }, { 672, 313 }};
static const XStringRes _Const0233 = { _StringsDefault7, 0x0120 };
static const XRect _Const0234 = {{ 0, 0 }, { 710, 30 }};
static const XRect _Const0235 = {{ 0, 0 }, { 720, 30 }};
static const XRect _Const0236 = {{ 0, 0 }, { 180, 30 }};
static const XStringRes _Const0237 = { _StringsDefault7, 0x0133 };
static const XRect _Const0238 = {{ 150, 0 }, { 700, 30 }};
static const XRect _Const0239 = {{ 0, 0 }, { 800, 440 }};
static const XRect _Const023A = {{ 770, 0 }, { 800, 10 }};
static const XRect _Const023B = {{ 182, 10 }, { 232, 30 }};
static const XRect _Const023C = {{ 312, 10 }, { 387, 30 }};
static const XStringRes _Const023D = { _StringsDefault7, 0x0144 };
static const XRect _Const023E = {{ 236, 10 }, { 312, 30 }};
static const XStringRes _Const023F = { _StringsDefault7, 0x0150 };
static const XRect _Const0240 = {{ 529, 10 }, { 585, 30 }};
static const XRect _Const0241 = {{ 383, 10 }, { 453, 30 }};
static const XStringRes _Const0242 = { _StringsDefault7, 0x015D };
static const XRect _Const0243 = {{ 15, 40 }, { 715, 340 }};
static const XPoint _Const0244 = { 20, 40 };
static const XPoint _Const0245 = { 720, 40 };
static const XPoint _Const0246 = { 720, 340 };
static const XPoint _Const0247 = { 20, 340 };
static const XRect _Const0248 = {{ 17, 40 }, { 725, 340 }};
static const XRect _Const0249 = {{ 449, 10 }, { 523, 30 }};
static const XStringRes _Const024A = { _StringsDefault7, 0x0169 };
static const XRect _Const024B = {{ 590, 10 }, { 665, 30 }};
static const XStringRes _Const024C = { _StringsDefault7, 0x0174 };
static const XRect _Const024D = {{ 730, 40 }, { 769, 340 }};
static const XRect _Const024E = {{ 600, 350 }, { 750, 400 }};
static const XRect _Const024F = {{ 20, 350 }, { 200, 400 }};
static const XStringRes _Const0250 = { _StringsDefault7, 0x0181 };
static const XRect _Const0251 = {{ 220, 350 }, { 400, 400 }};
static const XStringRes _Const0252 = { _StringsDefault7, 0x018F };
static const XPoint _Const0253 = { 10, 30 };
static const XPoint _Const0254 = { 720, 30 };
static const XPoint _Const0255 = { 10, 340 };
static const XRect _Const0256 = {{ 665, 10 }, { 733, 30 }};
static const XStringRes _Const0257 = { _StringsDefault7, 0x01A0 };
static const XRect _Const0258 = {{ 190, 40 }, { 710, 340 }};
static const XColor _Const0259 = { 0xCD, 0xCD, 0xCD, 0x93 };
static const XStringRes _Const025A = { _StringsDefault7, 0x01A8 };
static const XStringRes _Const025B = { _StringsDefault7, 0x01BA };
static const XColor _Const025C = { 0x66, 0x66, 0x88, 0xFF };
static const XStringRes _Const025D = { _StringsDefault7, 0x01CF };
static const XRect _Const025E = {{ 0, 0 }, { 450, 160 }};
static const XRect _Const025F = {{ 0, 0 }, { 40, 40 }};
static const XRect _Const0260 = {{ 40, 0 }, { 80, 40 }};
static const XRect _Const0261 = {{ 80, 0 }, { 120, 40 }};
static const XRect _Const0262 = {{ 120, 0 }, { 160, 40 }};
static const XRect _Const0263 = {{ 160, 0 }, { 200, 40 }};
static const XRect _Const0264 = {{ 200, 0 }, { 240, 40 }};
static const XRect _Const0265 = {{ 240, 0 }, { 280, 40 }};
static const XRect _Const0266 = {{ 280, 0 }, { 320, 40 }};
static const XRect _Const0267 = {{ 320, 0 }, { 360, 40 }};
static const XRect _Const0268 = {{ 360, 0 }, { 400, 40 }};
static const XRect _Const0269 = {{ 20, 40 }, { 60, 80 }};
static const XRect _Const026A = {{ 60, 40 }, { 100, 80 }};
static const XRect _Const026B = {{ 100, 40 }, { 140, 80 }};
static const XRect _Const026C = {{ 140, 40 }, { 180, 80 }};
static const XRect _Const026D = {{ 180, 40 }, { 220, 80 }};
static const XRect _Const026E = {{ 220, 40 }, { 260, 80 }};
static const XRect _Const026F = {{ 260, 40 }, { 300, 80 }};
static const XRect _Const0270 = {{ 300, 40 }, { 340, 80 }};
static const XRect _Const0271 = {{ 340, 40 }, { 380, 80 }};
static const XRect _Const0272 = {{ 40, 80 }, { 80, 120 }};
static const XRect _Const0273 = {{ 80, 80 }, { 120, 120 }};
static const XRect _Const0274 = {{ 120, 80 }, { 160, 120 }};
static const XRect _Const0275 = {{ 160, 80 }, { 200, 120 }};
static const XRect _Const0276 = {{ 200, 80 }, { 240, 120 }};
static const XRect _Const0277 = {{ 240, 80 }, { 280, 120 }};
static const XRect _Const0278 = {{ 280, 80 }, { 320, 120 }};
static const XRect _Const0279 = {{ 100, 120 }, { 340, 160 }};
static const XRect _Const027A = {{ 320, 80 }, { 370, 120 }};
static const XRect _Const027B = {{ 400, 0 }, { 450, 40 }};
static const XRect _Const027C = {{ 0, 120 }, { 80, 160 }};
static const XStringRes _Const027D = { _StringsDefault7, 0x01ED };
static const XPoint _Const027E = { 450, 0 };
static const XPoint _Const027F = { 450, 160 };
static const XPoint _Const0280 = { 0, 160 };
static const XRect _Const0281 = {{ 0, 0 }, { 300, 200 }};
static const XRect _Const0282 = {{ 4, 0 }, { 296, 196 }};
static const XColor _Const0283 = { 0xDD, 0xDD, 0xDD, 0xFF };
static const XRect _Const0284 = {{ 0, -10 }, { 300, 200 }};
static const XColor _Const0285 = { 0x99, 0x99, 0x99, 0xFF };
static const XColor _Const0286 = { 0x88, 0xCC, 0xFF, 0xFF };
static const XColor _Const0287 = { 0x3A, 0x3A, 0x3A, 0xFF };
static const XStringRes _Const0288 = { _StringsDefault7, 0x01F8 };
static const XRect _Const0289 = {{ 0, 0 }, { 400, 160 }};
static const XRect _Const028A = {{ 210, 0 }, { 250, 40 }};
static const XRect _Const028B = {{ 40, 40 }, { 80, 80 }};
static const XRect _Const028C = {{ 80, 40 }, { 120, 80 }};
static const XRect _Const028D = {{ 120, 40 }, { 160, 80 }};
static const XRect _Const028E = {{ 210, 40 }, { 250, 80 }};
static const XRect _Const028F = {{ 80, 120 }, { 160, 160 }};
static const XRect _Const0290 = {{ 250, 40 }, { 290, 80 }};
static const XRect _Const0291 = {{ 250, 80 }, { 290, 120 }};
static const XRect _Const0292 = {{ 290, 40 }, { 330, 80 }};
static const XRect _Const0293 = {{ 210, 120 }, { 250, 160 }};
static const XRect _Const0294 = {{ 210, 80 }, { 250, 120 }};
static const XRect _Const0295 = {{ 410, 80 }, { 460, 120 }};
static const XStringRes _Const0296 = { _StringsDefault7, 0x01FD };
static const XRect _Const0297 = {{ 250, 120 }, { 290, 160 }};
static const XRect _Const0298 = {{ 290, 0 }, { 330, 40 }};
static const XRect _Const0299 = {{ 290, 80 }, { 330, 120 }};
static const XRect _Const029A = {{ 250, 0 }, { 290, 40 }};
static const XRect _Const029B = {{ 355, 0 }, { 400, 40 }};
static const XRect _Const029C = {{ 290, 120 }, { 330, 160 }};
static const XPoint _Const029D = { 400, 0 };
static const XPoint _Const029E = { 400, 160 };
static const XColor _Const029F = { 0x6C, 0x6E, 0x70, 0xFF };
static const XColor _Const02A0 = { 0xA8, 0xAB, 0xAB, 0xAA };
static const XPoint _Const02A1 = { 39, 39 };
static const XColor _Const02A2 = { 0xAE, 0xAE, 0xAE, 0xB0 };
static const XColor _Const02A3 = { 0xFF, 0x00, 0x7A, 0xFF };
static const XColor _Const02A4 = { 0xB2, 0xB2, 0xB2, 0xB1 };
static const XColor _Const02A5 = { 0xB1, 0xB1, 0xB1, 0xB3 };
static const XPoint _Const02A6 = { 45, 39 };
static const XRect _Const02A7 = {{ 10, 10 }, { 770, 450 }};
static const XColor _Const02A8 = { 0xC3, 0xC3, 0xC3, 0xFF };
static const XRect _Const02A9 = {{ 24, 20 }, { 130, 50 }};
static const XStringRes _Const02AA = { _StringsDefault8, 0x0003 };
static const XRect _Const02AB = {{ 30, 370 }, { 155, 425 }};
static const XRect _Const02AC = {{ 174, 10 }, { 764, 198 }};
static const XRect _Const02AD = {{ 15, 20 }, { 170, 360 }};
static const XRect _Const02AE = {{ 178, 194 }, { 770, 284 }};
static const XRect _Const02AF = {{ 174, 285 }, { 780, 450 }};
static const XStringRes _Const02B0 = { _StringsDefault8, 0x000E };
static const XRect _Const02B1 = {{ 0, 0 }, { 240, 480 }};
static const XRect _Const02B2 = {{ 2, 7 }, { 188, 47 }};
static const XRect _Const02B3 = {{ 0, 5 }, { 190, 49 }};
static const XColor _Const02B4 = { 0x1C, 0x1C, 0x1C, 0xFF };
static const XColor _Const02B5 = { 0xBF, 0xBF, 0xBF, 0xFF };
static const XPoint _Const02B6 = { 0, 1 };
static const XPoint _Const02B7 = { 240, 1 };
static const XPoint _Const02B8 = { 240, 50 };
static const XRect _Const02B9 = {{ 8, 11 }, { 185, 43 }};
static const XRect _Const02BA = {{ 0, 50 }, { 200, 480 }};
static const XRect _Const02BB = {{ 0, 48 }, { 200, 480 }};
static const XPoint _Const02BC = { 0, 47 };
static const XPoint _Const02BD = { 200, 47 };
static const XPoint _Const02BE = { 200, 480 };
static const XRect _Const02BF = {{ 189, 0 }, { 239, 55 }};
static const XRect _Const02C0 = {{ 0, 0 }, { 240, 55 }};
static const XColor _Const02C1 = { 0xD9, 0xD9, 0xD9, 0xA3 };
static const XStringRes _Const02C2 = { _StringsDefault8, 0x0014 };
static const XRect _Const02C3 = {{ 0, 0 }, { 595, 180 }};
static const XRect _Const02C4 = {{ 10, 29 }, { 120, 77 }};
static const XRect _Const02C5 = {{ 139, 32 }, { 269, 77 }};
static const XRect _Const02C6 = {{ 452, 85 }, { 592, 132 }};
static const XStringRes _Const02C7 = { _StringsDefault8, 0x001D };
static const XRect _Const02C8 = {{ 452, 29 }, { 592, 74 }};
static const XRect _Const02C9 = {{ 10, 85 }, { 160, 130 }};
static const XRect _Const02CA = {{ 297, 29 }, { 427, 74 }};
static const XStringRes _Const02CB = { _StringsDefault8, 0x002A };
static const XRect _Const02CC = {{ 140, 136 }, { 340, 181 }};
static const XStringRes _Const02CD = { _StringsDefault8, 0x0036 };
static const XRect _Const02CE = {{ 298, 85 }, { 448, 130 }};
static const XStringRes _Const02CF = { _StringsDefault8, 0x004A };
static const XRect _Const02D0 = {{ 138, 85 }, { 288, 130 }};
static const XStringRes _Const02D1 = { _StringsDefault8, 0x0053 };
static const XRect _Const02D2 = {{ 10, 133 }, { 130, 181 }};
static const XStringRes _Const02D3 = { _StringsDefault8, 0x0060 };
static const XRect _Const02D4 = {{ 9, 0 }, { 290, 29 }};
static const XStringRes _Const02D5 = { _StringsDefault8, 0x006B };
static const XPoint _Const02D6 = { 590, 15 };
static const XPoint _Const02D7 = { 150, 15 };
static const XRect _Const02D8 = {{ 0, 0 }, { 595, 80 }};
static const XRect _Const02D9 = {{ 9, 1 }, { 180, 30 }};
static const XStringRes _Const02DA = { _StringsDefault8, 0x007B };
static const XPoint _Const02DB = { 590, 16 };
static const XPoint _Const02DC = { 150, 16 };
static const XRect _Const02DD = {{ 142, 36 }, { 264, 81 }};
static const XStringRes _Const02DE = { _StringsDefault8, 0x008B };
static const XRect _Const02DF = {{ 291, 36 }, { 411, 81 }};
static const XStringRes _Const02E0 = { _StringsDefault8, 0x0097 };
static const XRect _Const02E1 = {{ 6, 36 }, { 116, 81 }};
static const XStringRes _Const02E2 = { _StringsDefault8, 0x00A3 };
static const XRect _Const02E3 = {{ 438, 36 }, { 588, 81 }};
static const XStringRes _Const02E4 = { _StringsDefault8, 0x00B4 };
static const XRect _Const02E5 = {{ 0, 0 }, { 595, 170 }};
static const XRect _Const02E6 = {{ 9, -1 }, { 140, 29 }};
static const XStringRes _Const02E7 = { _StringsDefault8, 0x00C8 };
static const XPoint _Const02E8 = { 590, 14 };
static const XPoint _Const02E9 = { 140, 14 };
static const XRect _Const02EA = {{ 13, 31 }, { 215, 61 }};
static const XStringRes _Const02EB = { _StringsDefault8, 0x00D7 };
static const XRect _Const02EC = {{ 226, 24 }, { 585, 68 }};
static const XRect _Const02ED = {{ 2, 72 }, { 478, 92 }};
static const XStringRes _Const02EE = { _StringsDefault8, 0x00EB };
static const XRect _Const02EF = {{ -3, 91 }, { 592, 110 }};
static const XStringRes _Const02F0 = { _StringsDefault8, 0x0137 };
static const XRect _Const02F1 = {{ -15, 110 }, { 577, 129 }};
static const XStringRes _Const02F2 = { _StringsDefault8, 0x0194 };
static const XRect _Const02F3 = {{ 6, 129 }, { 580, 147 }};
static const XStringRes _Const02F4 = { _StringsDefault8, 0x01EF };
static const XRect _Const02F5 = {{ 6, 147 }, { 580, 165 }};
static const XStringRes _Const02F6 = { _StringsDefault9, 0x0003 };
static const XStringRes _Const02F7 = { _StringsDefault9, 0x0042 };
static const XStringRes _Const02F8 = { _StringsDefault9, 0x004F };
static const XStringRes _Const02F9 = { _StringsDefault9, 0x0059 };
static const XColor _Const02FA = { 0x93, 0x93, 0x93, 0xFF };
static const XPoint _Const02FB = { 70, 39 };
static const XColor _Const02FC = { 0xA8, 0xAB, 0xAB, 0xFF };
static const XRect _Const02FD = {{ 0, 0 }, { 550, 40 }};
static const XRect _Const02FE = {{ 60, 0 }, { 200, 17 }};
static const XRect _Const02FF = {{ 60, 15 }, { 415, 40 }};
static const XStringRes _Const0300 = { _StringsDefault9, 0x006A };
static const XRect _Const0301 = {{ 7, 5 }, { 37, 35 }};
static const XRect _Const0302 = {{ 60, 5 }, { 230, 36 }};
static const XStringRes _Const0303 = { _StringsDefault9, 0x0087 };
static const XPoint _Const0304 = { 50, 0 };
static const XPoint _Const0305 = { 50, 40 };
static const XRect _Const0306 = {{ 420, 0 }, { 505, 40 }};
static const XStringRes _Const0307 = { _StringsDefault9, 0x0091 };
static const XRect _Const0308 = {{ 512, 2 }, { 548, 38 }};
static const XStringRes _Const0309 = { _StringsDefault9, 0x0099 };
static const XRect _Const030A = {{ 0, 0 }, { 220, 40 }};
static const XRect _Const030B = {{ 10, 0 }, { 210, 40 }};
static const XStringRes _Const030C = { _StringsDefault9, 0x009F };
static const XColor _Const030D = { 0xAA, 0xAA, 0xAA, 0xFF };
static const XColor _Const030E = { 0x44, 0x44, 0x44, 0xFF };
static const XRect _Const030F = {{ 0, 0 }, { 430, 230 }};
static const XRect _Const0310 = {{ 38, 80 }, { 368, 125 }};
static const XRect _Const0311 = {{ 38, 43 }, { 218, 68 }};
static const XStringRes _Const0312 = { _StringsDefault9, 0x00AA };
static const XRect _Const0313 = {{ 148, 149 }, { 260, 190 }};
static const XStringRes _Const0314 = { _StringsDefault9, 0x00B6 };
static const XStringRes _Const0315 = { _StringsDefault9, 0x00C0 };
static const XRect _Const0316 = {{ 177, 20 }, { 727, 440 }};
static const XRect _Const0317 = {{ 729, 20 }, { 769, 440 }};
static const XRect _Const0318 = {{ 30, 379 }, { 155, 434 }};
static const XRect _Const0319 = {{ 17, 20 }, { 172, 360 }};
static const XRect _Const031A = {{ 180, 20 }, { 720, 150 }};
static const XRect _Const031B = {{ 180, 158 }, { 730, 258 }};
static const XRect _Const031C = {{ 180, 265 }, { 730, 435 }};
static const XRect _Const031D = {{ 0, 0 }, { 550, 130 }};
static const XRect _Const031E = {{ 9, 1 }, { 210, 30 }};
static const XStringRes _Const031F = { _StringsDefault9, 0x00CB };
static const XPoint _Const0320 = { 540, 16 };
static const XPoint _Const0321 = { 155, 16 };
static const XRect _Const0322 = {{ 10, 37 }, { 110, 77 }};
static const XRect _Const0323 = {{ 130, 38 }, { 260, 78 }};
static const XRect _Const0324 = {{ 270, 35 }, { 400, 75 }};
static const XRect _Const0325 = {{ 410, 35 }, { 540, 75 }};
static const XRect _Const0326 = {{ 10, 84 }, { 110, 124 }};
static const XRect _Const0327 = {{ 130, 85 }, { 250, 125 }};
static const XRect _Const0328 = {{ 0, 0 }, { 550, 100 }};
static const XRect _Const0329 = {{ 9, 1 }, { 170, 30 }};
static const XStringRes _Const032A = { _StringsDefault9, 0x00DC };
static const XPoint _Const032B = { 165, 16 };
static const XRect _Const032C = {{ 203, 43 }, { 353, 88 }};
static const XStringRes _Const032D = { _StringsDefault9, 0x00ED };
static const XRect _Const032E = {{ 3, 43 }, { 175, 88 }};
static const XStringRes _Const032F = { _StringsDefault9, 0x00FC };
static const XRect _Const0330 = {{ 380, 30 }, { 550, 99 }};
static const XStringRes _Const0331 = { _StringsDefault9, 0x011A };
static const XRect _Const0332 = {{ 0, 0 }, { 550, 180 }};
static const XRect _Const0333 = {{ 9, -1 }, { 160, 29 }};
static const XPoint _Const0334 = { 540, 15 };
static const XPoint _Const0335 = { 170, 15 };
static const XRect _Const0336 = {{ 13, 38 }, { 215, 68 }};
static const XRect _Const0337 = {{ 230, 35 }, { 543, 74 }};
static const XRect _Const0338 = {{ 12, 87 }, { 225, 116 }};
static const XRect _Const0339 = {{ 230, 83 }, { 540, 124 }};
static const XRect _Const033A = {{ 10, 130 }, { 220, 174 }};
static const XStringRes _Const033B = { _StringsDefault9, 0x0134 };
static const XRect _Const033C = {{ 0, 0 }, { 555, 50 }};
static const XRect _Const033D = {{ 10, 15 }, { 40, 45 }};
static const XRect _Const033E = {{ 450, 10 }, { 535, 46 }};
static const XStringRes _Const033F = { _StringsDefault9, 0x0148 };
static const XRect _Const0340 = {{ 108, 15 }, { 340, 45 }};
static const XRect _Const0341 = {{ 340, 15 }, { 415, 45 }};
static const XRect _Const0342 = {{ 60, 0 }, { 205, 50 }};
static const XRect _Const0343 = {{ 0, 0 }, { 550, 50 }};
static const XRect _Const0344 = {{ 135, 1 }, { 295, 25 }};
static const XColor _Const0345 = { 0x3D, 0x3D, 0x3D, 0xFF };
static const XRect _Const0346 = {{ 135, 20 }, { 432, 46 }};
static const XRect _Const0347 = {{ 39, 11 }, { 69, 41 }};
static const XPoint _Const0348 = { 29, 1 };
static const XPoint _Const0349 = { 79, 1 };
static const XPoint _Const034A = { 79, 50 };
static const XPoint _Const034B = { 29, 50 };
static const XRect _Const034C = {{ 80, 0 }, { 140, 50 }};
static const XRect _Const034D = {{ 445, 5 }, { 550, 45 }};
static const XStringRes _Const034E = { _StringsDefault9, 0x0155 };
static const XRect _Const034F = {{ 0, 0 }, { 600, 300 }};
static const XRect _Const0350 = {{ 40, 380 }, { 594, 730 }};
static const XStringRes _Const0351 = { _StringsDefault9, 0x0164 };
static const XStringRes _Const0352 = { _StringsDefault9, 0x0175 };
static const XStringRes _Const0353 = { _StringsDefault9, 0x0185 };
static const XStringRes _Const0354 = { _StringsDefault9, 0x019C };
static const XStringRes _Const0355 = { _StringsDefault9, 0x01AE };
static const XRect _Const0356 = {{ 90, 10 }, { 280, 40 }};
static const XRect _Const0357 = {{ 435, 10 }, { 485, 42 }};
static const XRect _Const0358 = {{ 432, 0 }, { 482, 50 }};
static const XRect _Const0359 = {{ 275, 5 }, { 400, 45 }};
static const XRect _Const035A = {{ 40, 0 }, { 90, 50 }};
static const XRect _Const035B = {{ 509, 7 }, { 545, 43 }};
static const XRect _Const035C = {{ 245, 7 }, { 320, 42 }};
static const XStringRes _Const035D = { _StringsDefault9, 0x01BC };
static const XRect _Const035E = {{ 325, 5 }, { 425, 45 }};
static const XColor _Const035F = { 0x70, 0x70, 0x70, 0xFF };
static const XRect _Const0360 = {{ 327, 7 }, { 423, 43 }};
static const XColor _Const0361 = { 0xE8, 0xE8, 0xE8, 0xFF };
static const XRect _Const0362 = {{ 325, 9 }, { 424, 41 }};
static const XStringRes _Const0363 = { _StringsDefault9, 0x01C4 };
static const XRect _Const0364 = {{ 0, 0 }, { 135, 40 }};
static const XRect _Const0365 = {{ 2, 5 }, { 95, 35 }};
static const XRect _Const0366 = {{ 0, 5 }, { 95, 35 }};
static const XPoint _Const0367 = { 135, 0 };
static const XPoint _Const0368 = { 135, 40 };
static const XRect _Const0369 = {{ 5, 5 }, { 90, 32 }};
static const XRect _Const036A = {{ 95, 0 }, { 136, 40 }};
static const XRect _Const036B = {{ 0, 0 }, { 90, 35 }};
static const XPoint _Const036C = { 0, 35 };
static const XPoint _Const036D = { 95, 35 };
static const XPoint _Const036E = { 95, 0 };
static const XRect _Const036F = {{ 4, 0 }, { 89, 35 }};
static const XRect _Const0370 = {{ 0, 0 }, { 78, 320 }};
static const XRect _Const0371 = {{ 0, 0 }, { 78, 322 }};
static const XStringRes _Const0372 = { _StringsDefault9, 0x01CD };
static const XStringRes _Const0373 = { _StringsDefault9, 0x01E3 };
static const XStringRes _Const0374 = { _StringsDefault9, 0x01F3 };
static const XColor _Const0375 = { 0xD4, 0xD4, 0xD4, 0xFF };
static const XRect _Const0376 = {{ 365, 0 }, { 505, 23 }};
static const XRect _Const0377 = {{ 160, 0 }, { 360, 24 }};
static const XStringRes _Const0378 = { _StringsDefault10, 0x0003 };
static const XRect _Const0379 = {{ 2, 20 }, { 430, 46 }};
static const XRect _Const037A = {{ 5, 3 }, { 145, 23 }};
static const XStringRes _Const037B = { _StringsDefault10, 0x0013 };
static const XRect _Const037C = {{ 512, 4 }, { 548, 40 }};
static const XRect _Const037D = {{ 365, 20 }, { 505, 43 }};
static const XColor _Const037E = { 0x94, 0x94, 0x94, 0x99 };
static const XColor _Const037F = { 0x94, 0x94, 0x94, 0x93 };
static const XColor _Const0380 = { 0x85, 0x85, 0x85, 0x87 };
static const XPoint _Const0381 = { 30, 30 };
static const XStringRes _Const0382 = { _StringsDefault10, 0x0028 };
static const XStringRes _Const0383 = { _StringsDefault10, 0x003C };
static const XStringRes _Const0384 = { _StringsDefault10, 0x004C };
static const XStringRes _Const0385 = { _StringsDefault10, 0x0069 };
static const XStringRes _Const0386 = { _StringsDefault10, 0x0089 };
static const XStringRes _Const0387 = { _StringsDefault10, 0x009A };
static const XStringRes _Const0388 = { _StringsDefault10, 0x00A7 };
static const XRect _Const0389 = {{ 12, 20 }, { 460, 43 }};
static const XRect _Const038A = {{ 13, 0 }, { 435, 20 }};
static const XRect _Const038B = {{ 210, 0 }, { 500, 19 }};
static const XRect _Const038C = {{ 511, 5 }, { 547, 41 }};
static const XRect _Const038D = {{ 458, 20 }, { 508, 43 }};
static const XStringRes _Const038E = { _StringsDefault10, 0x00B6 };
static const XRect _Const038F = {{ 9, 21 }, { 459, 43 }};
static const XRect _Const0390 = {{ 10, 0 }, { 190, 18 }};
static const XRect _Const0391 = {{ 220, 0 }, { 460, 18 }};
static const XRect _Const0392 = {{ 510, 5 }, { 546, 41 }};
static const XRect _Const0393 = {{ 120, 10 }, { 450, 40 }};
static const XRect _Const0394 = {{ 70, 0 }, { 120, 50 }};
static const XStringRes _Const0395 = { _StringsDefault10, 0x00BF };
static const XRect _Const0396 = {{ 135, 20 }, { 550, 46 }};
static const XRect _Const0397 = {{ 0, 0 }, { 520, 50 }};
static const XRect _Const0398 = {{ 615, 14 }, { 765, 64 }};
static const XStringRes _Const0399 = { _StringsDefault10, 0x00D7 };
static const XRect _Const039A = {{ 350, 10 }, { 505, 40 }};
static const XRect _Const039B = {{ 120, 0 }, { 170, 50 }};
static const XRect _Const039C = {{ 510, 7 }, { 546, 43 }};
static const XRect _Const039D = {{ 240, 0 }, { 290, 50 }};
static const XRect _Const039E = {{ 280, 10 }, { 350, 40 }};
static const XRect _Const039F = {{ 160, 10 }, { 230, 40 }};
static const XRect _Const03A0 = {{ 160, 10 }, { 270, 40 }};
static const XStringRes _Const03A1 = { _StringsDefault10, 0x00E9 };
static const XRect _Const03A2 = {{ 0, 0 }, { 800, 360 }};
static const XPoint _Const03A3 = { -3, 26 };
static const XPoint _Const03A4 = { 16, 30 };
static const XRect _Const03A5 = {{ 0, 0 }, { 550, 360 }};
static const XRect _Const03A6 = {{ 0, 0 }, { 600, 360 }};
static const XPoint _Const03A7 = { 0, -5 };
static const XPoint _Const03A8 = { 550, -5 };
static const XPoint _Const03A9 = { 550, 355 };
static const XPoint _Const03AA = { 0, 355 };
static const XRect _Const03AB = {{ 625, 170 }, { 705, 200 }};
static const XStringRes _Const03AC = { _StringsDefault10, 0x00FA };
static const XRect _Const03AD = {{ 600, 0 }, { 793, 45 }};
static const XStringRes _Const03AE = { _StringsDefault10, 0x0112 };
static const XRect _Const03AF = {{ 600, 247 }, { 795, 287 }};
static const XStringRes _Const03B0 = { _StringsDefault10, 0x0122 };
static const XRect _Const03B1 = {{ 601, 203 }, { 796, 243 }};
static const XStringRes _Const03B2 = { _StringsDefault10, 0x012E };
static const XRect _Const03B3 = {{ 349, 2 }, { 549, 307 }};
static const XRect _Const03B4 = {{ 600, 53 }, { 793, 98 }};
static const XStringRes _Const03B5 = { _StringsDefault10, 0x0138 };
static const XRect _Const03B6 = {{ 601, 106 }, { 794, 151 }};
static const XStringRes _Const03B7 = { _StringsDefault10, 0x0149 };
static const XStringRes _Const03B8 = { _StringsDefault10, 0x015A };
static const XStringRes _Const03B9 = { _StringsDefault10, 0x0191 };
static const XColor _Const03BA = { 0x00, 0x22, 0x22, 0xFF };
static const XStringRes _Const03BB = { _StringsDefault10, 0x0196 };
static const XColor _Const03BC = { 0x22, 0x00, 0x22, 0xFF };
static const XColor _Const03BD = { 0x22, 0x00, 0x00, 0xFF };
static const XStringRes _Const03BE = { _StringsDefault10, 0x019B };
static const XStringRes _Const03BF = { _StringsDefault10, 0x01A0 };
static const XRect _Const03C0 = {{ 0, 0 }, { 310, 25 }};
static const XRect _Const03C1 = {{ -10, 0 }, { 280, 25 }};
static const XRect _Const03C2 = {{ 14, 6 }, { 165, 20 }};
static const XStringRes _Const03C3 = { _StringsDefault10, 0x01A5 };
static const XRect _Const03C4 = {{ 51, 6 }, { 72, 21 }};
static const XRect _Const03C5 = {{ 105, 6 }, { 134, 21 }};
static const XRect _Const03C6 = {{ 166, 6 }, { 262, 21 }};
static const XStringRes _Const03C7 = { _StringsDefault10, 0x01C3 };
static const XRect _Const03C8 = {{ 290, 0 }, { 310, 25 }};
static const XStringRes _Const03C9 = { _StringsDefault10, 0x01D3 };
static const XRect _Const03CA = {{ 262, 5 }, { 287, 20 }};
static const XRect _Const03CB = {{ 0, 5 }, { 280, 22 }};
static const XColor _Const03CC = { 0x5F, 0xEE, 0xFF, 0x7F };
static const XColor _Const03CD = { 0xED, 0x76, 0xFF, 0x7F };
static const XRect _Const03CE = {{ 0, 0 }, { 290, 25 }};
static const XColor _Const03CF = { 0x11, 0x11, 0xFF, 0xFF };
static const XColor _Const03D0 = { 0x99, 0x88, 0x44, 0xFF };
static const XColor _Const03D1 = { 0xFF, 0x88, 0xBB, 0xFF };
static const XColor _Const03D2 = { 0xFF, 0x22, 0x77, 0xFF };
static const XColor _Const03D3 = { 0x00, 0x00, 0xAA, 0xFF };
static const XRect _Const03D4 = {{ 0, 0 }, { 550, 26 }};
static const XRect _Const03D5 = {{ 0, 0 }, { 314, 25 }};
static const XRect _Const03D6 = {{ 0, 0 }, { 30, 40 }};
static const XStringRes _Const03D7 = { _StringsDefault10, 0x01D9 };
static const XPoint _Const03D8 = { 23, 23 };
static const XRect _Const03D9 = {{ 0, 0 }, { 270, 210 }};
static const XColor _Const03DA = { 0xFF, 0x00, 0xB2, 0xFF };
static const XColor _Const03DB = { 0xFF, 0x43, 0x99, 0xFF };
static const XStringRes _Const03DC = { _StringsDefault10, 0x01EA };
static const XColor _Const03DD = { 0x37, 0x37, 0x37, 0xFF };
static const XRect _Const03DE = {{ 0, 0 }, { 200, 305 }};
static const XColor _Const03DF = { 0xE0, 0xE0, 0xE0, 0xFF };
static const XRect _Const03E0 = {{ 7, 34 }, { 52, 59 }};
static const XStringRes _Const03E1 = { _StringsDefault10, 0x01F2 };
static const XRect _Const03E2 = {{ 6, 59 }, { 96, 84 }};
static const XStringRes _Const03E3 = { _StringsDefault10, 0x01FB };
static const XRect _Const03E4 = {{ 7, 84 }, { 97, 109 }};
static const XStringRes _Const03E5 = { _StringsDefault11, 0x0003 };
static const XRect _Const03E6 = {{ 7, 109 }, { 97, 134 }};
static const XStringRes _Const03E7 = { _StringsDefault11, 0x000E };
static const XRect _Const03E8 = {{ 86, 34 }, { 134, 59 }};
static const XRect _Const03E9 = {{ 86, 59 }, { 183, 84 }};
static const XRect _Const03EA = {{ 86, 84 }, { 183, 109 }};
static const XRect _Const03EB = {{ 86, 109 }, { 183, 134 }};
static const XRect _Const03EC = {{ 7, 158 }, { 97, 183 }};
static const XStringRes _Const03ED = { _StringsDefault11, 0x001A };
static const XRect _Const03EE = {{ 86, 158 }, { 183, 183 }};
static const XRect _Const03EF = {{ 7, 208 }, { 97, 233 }};
static const XStringRes _Const03F0 = { _StringsDefault11, 0x0023 };
static const XRect _Const03F1 = {{ 86, 185 }, { 132, 205 }};
static const XStringRes _Const03F2 = { _StringsDefault11, 0x0030 };
static const XRect _Const03F3 = {{ 7, 183 }, { 97, 208 }};
static const XStringRes _Const03F4 = { _StringsDefault11, 0x0039 };
static const XRect _Const03F5 = {{ 7, 233 }, { 97, 258 }};
static const XStringRes _Const03F6 = { _StringsDefault11, 0x0042 };
static const XRect _Const03F7 = {{ 86, 212 }, { 132, 229 }};
static const XRect _Const03F8 = {{ 86, 233 }, { 183, 258 }};
static const XRect _Const03F9 = {{ 7, 134 }, { 97, 159 }};
static const XStringRes _Const03FA = { _StringsDefault11, 0x004E };
static const XRect _Const03FB = {{ 86, 134 }, { 183, 159 }};
static const XPoint _Const03FC = { 200, 0 };
static const XPoint _Const03FD = { 200, 305 };
static const XPoint _Const03FE = { 0, 305 };
static const XRect _Const03FF = {{ 134, 185 }, { 194, 227 }};
static const XRect _Const0400 = {{ 41, 263 }, { 161, 299 }};
static const XStringRes _Const0401 = { _StringsDefault11, 0x005B };
static const XRect _Const0402 = {{ 5, 5 }, { 190, 31 }};
static const XStringRes _Const0403 = { _StringsDefault11, 0x006C };
static const XColor _Const0404 = { 0x20, 0x29, 0x59, 0xFF };
static const XStringRes _Const0405 = { _StringsDefault11, 0x00A7 };
static const XStringRes _Const0406 = { _StringsDefault11, 0x00BD };
static const XStringRes _Const0407 = { _StringsDefault11, 0x00C6 };
static const XStringRes _Const0408 = { _StringsDefault11, 0x00D3 };
static const XStringRes _Const0409 = { _StringsDefault11, 0x00DC };
static const XStringRes _Const040A = { _StringsDefault11, 0x00EA };
static const XStringRes _Const040B = { _StringsDefault11, 0x00F8 };
static const XStringRes _Const040C = { _StringsDefault11, 0x00FF };
static const XStringRes _Const040D = { _StringsDefault11, 0x0105 };
static const XStringRes _Const040E = { _StringsDefault11, 0x010D };
static const XStringRes _Const040F = { _StringsDefault11, 0x0116 };
static const XStringRes _Const0410 = { _StringsDefault11, 0x011E };
static const XStringRes _Const0411 = { _StringsDefault11, 0x0127 };
static const XStringRes _Const0412 = { _StringsDefault11, 0x0131 };
static const XStringRes _Const0413 = { _StringsDefault11, 0x0137 };
static const XStringRes _Const0414 = { _StringsDefault11, 0x013F };
static const XRect _Const0415 = {{ 0, 0 }, { 430, 210 }};
static const XRect _Const0416 = {{ 37, 105 }, { 367, 150 }};
static const XRect _Const0417 = {{ 38, 21 }, { 279, 54 }};
static const XStringRes _Const0418 = { _StringsDefault11, 0x016B };
static const XRect _Const0419 = {{ 42, 84 }, { 290, 105 }};
static const XStringRes _Const041A = { _StringsDefault11, 0x0184 };
static const XStringRes _Const041B = { _StringsDefault11, 0x0195 };
static const XStringRes _Const041C = { _StringsDefault11, 0x019E };
static const XStringRes _Const041D = { _StringsDefault11, 0x01A8 };
static const XStringRes _Const041E = { _StringsDefault11, 0x01AE };
static const XStringRes _Const041F = { _StringsDefault11, 0x01B5 };
static const XStringRes _Const0420 = { _StringsDefault11, 0x01C0 };
static const XStringRes _Const0421 = { _StringsDefault11, 0x01CA };
static const XStringRes _Const0422 = { _StringsDefault11, 0x01DC };
static const XStringRes _Const0423 = { _StringsDefault11, 0x01E3 };
static const XStringRes _Const0424 = { _StringsDefault11, 0x01F7 };
static const XStringRes _Const0425 = { _StringsDefault12, 0x0003 };
static const XStringRes _Const0426 = { _StringsDefault12, 0x001A };
static const XStringRes _Const0427 = { _StringsDefault12, 0x002C };
static const XStringRes _Const0428 = { _StringsDefault12, 0x003E };
static const XStringRes _Const0429 = { _StringsDefault12, 0x004A };
static const XStringRes _Const042A = { _StringsDefault12, 0x0059 };
static const XStringRes _Const042B = { _StringsDefault12, 0x0068 };
static const XStringRes _Const042C = { _StringsDefault12, 0x007B };
static const XStringRes _Const042D = { _StringsDefault12, 0x008A };
static const XStringRes _Const042E = { _StringsDefault12, 0x0099 };
static const XStringRes _Const042F = { _StringsDefault12, 0x00A7 };
static const XStringRes _Const0430 = { _StringsDefault12, 0x00BC };
static const XStringRes _Const0431 = { _StringsDefault12, 0x00CE };
static const XStringRes _Const0432 = { _StringsDefault12, 0x00DF };
static const XStringRes _Const0433 = { _StringsDefault12, 0x00F1 };
static const XStringRes _Const0434 = { _StringsDefault12, 0x00FF };
static const XStringRes _Const0435 = { _StringsDefault12, 0x010D };
static const XStringRes _Const0436 = { _StringsDefault12, 0x0119 };
static const XStringRes _Const0437 = { _StringsDefault12, 0x0128 };
static const XStringRes _Const0438 = { _StringsDefault12, 0x0135 };
static const XStringRes _Const0439 = { _StringsDefault12, 0x0147 };
static const XStringRes _Const043A = { _StringsDefault12, 0x0159 };
static const XStringRes _Const043B = { _StringsDefault12, 0x016B };
static const XStringRes _Const043C = { _StringsDefault12, 0x017D };
static const XStringRes _Const043D = { _StringsDefault12, 0x018F };
static const XStringRes _Const043E = { _StringsDefault12, 0x01A1 };
static const XStringRes _Const043F = { _StringsDefault12, 0x01AF };
static const XStringRes _Const0440 = { _StringsDefault12, 0x01C1 };
static const XStringRes _Const0441 = { _StringsDefault12, 0x01CF };
static const XStringRes _Const0442 = { _StringsDefault12, 0x01DD };
static const XStringRes _Const0443 = { _StringsDefault12, 0x01EF };
static const XStringRes _Const0444 = { _StringsDefault12, 0x0201 };
static const XStringRes _Const0445 = { _StringsDefault13, 0x0003 };
static const XStringRes _Const0446 = { _StringsDefault13, 0x0015 };
static const XStringRes _Const0447 = { _StringsDefault13, 0x0027 };
static const XStringRes _Const0448 = { _StringsDefault13, 0x0039 };
static const XStringRes _Const0449 = { _StringsDefault13, 0x004B };
static const XStringRes _Const044A = { _StringsDefault13, 0x0059 };
static const XStringRes _Const044B = { _StringsDefault13, 0x006B };
static const XStringRes _Const044C = { _StringsDefault13, 0x007D };
static const XStringRes _Const044D = { _StringsDefault13, 0x008F };
static const XStringRes _Const044E = { _StringsDefault13, 0x00A1 };
static const XStringRes _Const044F = { _StringsDefault13, 0x00B3 };
static const XStringRes _Const0450 = { _StringsDefault13, 0x00C5 };
static const XStringRes _Const0451 = { _StringsDefault13, 0x00D7 };
static const XStringRes _Const0452 = { _StringsDefault13, 0x00E2 };
static const XStringRes _Const0453 = { _StringsDefault13, 0x00F0 };
static const XStringRes _Const0454 = { _StringsDefault13, 0x00FD };
static const XStringRes _Const0455 = { _StringsDefault13, 0x010A };
static const XStringRes _Const0456 = { _StringsDefault13, 0x0117 };
static const XStringRes _Const0457 = { _StringsDefault13, 0x0124 };
static const XStringRes _Const0458 = { _StringsDefault13, 0x0131 };
static const XStringRes _Const0459 = { _StringsDefault13, 0x013E };
static const XStringRes _Const045A = { _StringsDefault13, 0x014D };
static const XStringRes _Const045B = { _StringsDefault13, 0x015F };
static const XStringRes _Const045C = { _StringsDefault13, 0x0168 };
static const XStringRes _Const045D = { _StringsDefault13, 0x0175 };
static const XStringRes _Const045E = { _StringsDefault13, 0x0182 };
static const XStringRes _Const045F = { _StringsDefault13, 0x0191 };
static const XStringRes _Const0460 = { _StringsDefault13, 0x01A3 };
static const XStringRes _Const0461 = { _StringsDefault13, 0x01B0 };
static const XStringRes _Const0462 = { _StringsDefault13, 0x01BD };
static const XStringRes _Const0463 = { _StringsDefault13, 0x01C9 };
static const XStringRes _Const0464 = { _StringsDefault13, 0x01D4 };
static const XStringRes _Const0465 = { _StringsDefault13, 0x01DE };
static const XStringRes _Const0466 = { _StringsDefault13, 0x01ED };
static const XRect _Const0467 = {{ 0, 0 }, { 550, 70 }};
static const XRect _Const0468 = {{ 10, 16 }, { 212, 46 }};
static const XRect _Const0469 = {{ 221, 10 }, { 538, 52 }};
static const XRect _Const046A = {{ 0, 0 }, { 550, 60 }};
static const XRect _Const046B = {{ 220, 10 }, { 345, 55 }};
static const XStringRes _Const046C = { _StringsDefault13, 0x01F5 };
static const XStringRes _Const046D = { _StringsDefault13, 0x01FC };
static const XRect _Const046E = {{ 9, 1 }, { 299, 36 }};
static const XStringRes _Const046F = { _StringsDefault13, 0x0202 };
static const XPoint _Const0470 = { 542, 20 };
static const XPoint _Const0471 = { 222, 20 };
static const XRect _Const0472 = {{ 11, 46 }, { 213, 76 }};
static const XStringRes _Const0473 = { _StringsDefault14, 0x0003 };
static const XStringRes _Const0474 = { _StringsDefault14, 0x0017 };
static const XStringRes _Const0475 = { _StringsDefault14, 0x0021 };
static const XRect _Const0476 = {{ 589, 133 }, { 786, 188 }};
static const XRect _Const0477 = {{ 589, 0 }, { 786, 55 }};
static const XStringRes _Const0478 = { _StringsDefault14, 0x002B };
static const XRect _Const0479 = {{ 589, 66 }, { 786, 121 }};
static const XStringRes _Const047A = { _StringsDefault14, 0x003B };
static const XRect _Const047B = {{ 10, 10 }, { 550, 340 }};
static const XRect _Const047C = {{ 0, 0 }, { 590, 350 }};
static const XRect _Const047D = {{ 152, 27 }, { 402, 247 }};
static const XRect _Const047E = {{ 111, 270 }, { 450, 309 }};
static const XStringRes _Const047F = { _StringsDefault14, 0x004F };
static const XRect _Const0480 = {{ 589, 200 }, { 786, 255 }};
static const XStringRes _Const0481 = { _StringsDefault14, 0x0071 };
static const XStringRes _Const0482 = { _StringsDefault14, 0x0089 };
static const XStringRes _Const0483 = { _StringsDefault14, 0x009F };
static const XStringRes _Const0484 = { _StringsDefault14, 0x00AD };
static const XStringRes _Const0485 = { _StringsDefault14, 0x00B6 };
static const XStringRes _Const0486 = { _StringsDefault14, 0x00CC };
static const XStringRes _Const0487 = { _StringsDefault14, 0x00EB };
static const XStringRes _Const0488 = { _StringsDefault14, 0x00FA };
static const XRect _Const0489 = {{ 4, 0 }, { 550, 45 }};
static const XPoint _Const048A = { 50, 45 };
static const XRect _Const048B = {{ 495, 0 }, { 550, 45 }};
static const XRect _Const048C = {{ 50, 0 }, { 500, 45 }};
static const XStringRes _Const048D = { _StringsDefault14, 0x0117 };
static const XRect _Const048E = {{ 6, 5 }, { 46, 40 }};
static const XRect _Const048F = {{ 0, 0 }, { 545, 25 }};
static const XRect _Const0490 = {{ 0, 0 }, { 550, 25 }};
static const XRect _Const0491 = {{ 499, 0 }, { 539, 25 }};
static const XStringRes _Const0492 = { _StringsDefault14, 0x014B };
static const XRect _Const0493 = {{ 445, 0 }, { 470, 24 }};
static const XRect _Const0494 = {{ 20, 0 }, { 442, 25 }};
static const XStringRes _Const0495 = { _StringsDefault14, 0x0154 };
static const XRect _Const0496 = {{ 472, 0 }, { 497, 25 }};
static const XRect _Const0497 = {{ 445, 0 }, { 470, 25 }};
static const XRect _Const0498 = {{ 0, 5 }, { 550, 50 }};
static const XStringRes _Const0499 = { _StringsDefault14, 0x01A2 };
static const XRect _Const049A = {{ 0, 0 }, { 36, 36 }};
static const XRect _Const049B = {{ 3, 10 }, { 21, 26 }};
static const XStringRes _Const049C = { _StringsDefault14, 0x01AA };
static const XRect _Const049D = {{ 0, 0 }, { 25, 24 }};
static const XRect _Const049E = {{ 2, 6 }, { 15, 18 }};
static const XRect _Const049F = {{ 0, 0 }, { 25, 25 }};
static const XRect _Const04A0 = {{ 0, 0 }, { 750, 480 }};
static const XColor _Const04A1 = { 0xCE, 0xCE, 0xCE, 0xFF };
static const XRect _Const04A2 = {{ 20, 40 }, { 710, 380 }};
static const XRect _Const04A3 = {{ 200, 390 }, { 350, 440 }};
static const XRect _Const04A4 = {{ 400, 390 }, { 550, 440 }};
static const XRect _Const04A5 = {{ 520, 10 }, { 630, 39 }};
static const XStringRes _Const04A6 = { _StringsDefault14, 0x01B0 };
static const XRect _Const04A7 = {{ 200, 10 }, { 330, 39 }};
static const XStringRes _Const04A8 = { _StringsDefault14, 0x01BF };
static const XPoint _Const04A9 = { 710, 40 };
static const XPoint _Const04AA = { 710, 380 };
static const XPoint _Const04AB = { 20, 380 };
static const XRect _Const04AC = {{ 0, 0 }, { 270, 40 }};
static const XRect _Const04AD = {{ 90, 5 }, { 180, 35 }};
static const XRect _Const04AE = {{ 135, 5 }, { 180, 35 }};
static const XRect _Const04AF = {{ 90, 5 }, { 135, 36 }};
static const XRect _Const04B0 = {{ 141, 5 }, { 180, 36 }};
static const XRect _Const04B1 = {{ 92, 5 }, { 130, 36 }};
static const XRect _Const04B2 = {{ 124, 2 }, { 147, 34 }};
static const XRect _Const04B3 = {{ 180, 0 }, { 225, 40 }};
static const XRect _Const04B4 = {{ 225, 0 }, { 270, 40 }};
static const XRect _Const04B5 = {{ 0, 0 }, { 45, 40 }};
static const XRect _Const04B6 = {{ 45, 0 }, { 90, 40 }};
static const XRect _Const04B7 = {{ 90, 5 }, { 180, 37 }};
static const XColor _Const04B8 = { 0xA3, 0xA3, 0xA3, 0xFF };
static const XRect _Const04B9 = {{ 92, 7 }, { 178, 13 }};
static const XRect _Const04BA = {{ 92, 27 }, { 178, 35 }};
static const XColor _Const04BB = { 0xA4, 0xA4, 0xA4, 0xFF };
static const XRect _Const04BC = {{ 0, 0 }, { 690, 40 }};
static const XRect _Const04BD = {{ 110, 0 }, { 380, 40 }};
static const XRect _Const04BE = {{ 420, 0 }, { 690, 40 }};
static const XRect _Const04BF = {{ 0, 0 }, { 110, 40 }};
static const XStringRes _Const04C0 = { _StringsDefault14, 0x01D0 };
static const XRect _Const04C1 = {{ 0, 0 }, { 80, 30 }};
static const XRect _Const04C2 = {{ 10, 0 }, { 290, 25 }};
static const XRect _Const04C3 = {{ 555, 0 }, { 595, 350 }};
static const XRect _Const04C4 = {{ 0, 0 }, { 550, 350 }};
static const XPoint _Const04C5 = { 0, -1000 };
static const XPoint _Const04C6 = { 550, 0 };
static const XPoint _Const04C7 = { 600, 0 };
static const XPoint _Const04C8 = { 600, 350 };
static const XPoint _Const04C9 = { 550, 350 };
static const XRect _Const04CA = {{ 0, 0 }, { 130, 45 }};
static const XRect _Const04CB = {{ 0, 0 }, { 35, 45 }};
static const XRect _Const04CC = {{ 38, 20 }, { 78, 45 }};
static const XRect _Const04CD = {{ 33, 3 }, { 128, 23 }};
static const XStringRes _Const04CE = { _StringsDefault14, 0x01D9 };
static const XRect _Const04CF = {{ 75, 22 }, { 104, 41 }};
static const XRect _Const04D0 = {{ 106, 21 }, { 127, 43 }};
static const XRect _Const04D1 = {{ 30, 60 }, { 580, 140 }};
static const XRect _Const04D2 = {{ 30, 190 }, { 180, 240 }};
static const XRect _Const04D3 = {{ 425, 190 }, { 575, 240 }};
static const XRect _Const04D4 = {{ 30, 260 }, { 570, 300 }};
static const XRect _Const04D5 = {{ 0, 0 }, { 720, 420 }};
static const XRect _Const04D6 = {{ 20, 170 }, { 600, 370 }};
static const XRect _Const04D7 = {{ 120, 30 }, { 610, 80 }};
static const XRect _Const04D8 = {{ 120, 100 }, { 610, 150 }};
static const XRect _Const04D9 = {{ 30, 110 }, { 130, 140 }};
static const XStringRes _Const04DA = { _StringsDefault14, 0x01E8 };
static const XRect _Const04DB = {{ 30, 40 }, { 130, 70 }};
static const XStringRes _Const04DC = { _StringsDefault14, 0x01F2 };
static const XRect _Const04DD = {{ 535, 257 }, { 675, 307 }};
static const XRect _Const04DE = {{ 534, 330 }, { 674, 380 }};
static const XPoint _Const04DF = { 120, 100 };
static const XPoint _Const04E0 = { 610, 100 };
static const XPoint _Const04E1 = { 610, 150 };
static const XPoint _Const04E2 = { 120, 150 };
static const XPoint _Const04E3 = { 120, 30 };
static const XPoint _Const04E4 = { 610, 30 };
static const XPoint _Const04E5 = { 610, 80 };
static const XPoint _Const04E6 = { 120, 80 };
static const XRect _Const04E7 = {{ 0, 0 }, { 729, 470 }};
static const XColor _Const04E8 = { 0xD9, 0xD9, 0xD9, 0xFF };
static const XRect _Const04E9 = {{ 454, 86 }, { 604, 226 }};
static const XRect _Const04EA = {{ 225, 129 }, { 455, 249 }};
static const XStringRes _Const04EB = { _StringsDefault14, 0x01FA };
static const XRect _Const04EC = {{ 75, 108 }, { 195, 218 }};
static const XRect _Const04ED = {{ 74, 208 }, { 184, 268 }};
static const XStringRes _Const04EE = { _StringsDefault15, 0x0003 };
static const XRect _Const04EF = {{ 480, 211 }, { 590, 271 }};
static const XStringRes _Const04F0 = { _StringsDefault15, 0x0010 };
static const XRect _Const04F1 = {{ 51, 296 }, { 640, 337 }};
static const XRect _Const04F2 = {{ 508, 365 }, { 658, 415 }};
static const XRect _Const04F3 = {{ 75, 338 }, { 615, 368 }};
static const XRect _Const04F4 = {{ 227, 364 }, { 467, 414 }};
static const XStringRes _Const04F5 = { _StringsDefault15, 0x001C };
static const XRect _Const04F6 = {{ 40, 364 }, { 190, 414 }};
static const XStringRes _Const04F7 = { _StringsDefault15, 0x0038 };
static const XRect _Const04F8 = {{ 62, 262 }, { 622, 302 }};
static const XStringRes _Const04F9 = { _StringsDefault15, 0x0042 };
static const XColor _Const04FA = { 0xF1, 0x03, 0x00, 0xFF };
static const XRect _Const04FB = {{ 251, 25 }, { 407, 480 }};
static const XRect _Const04FC = {{ 20, 26 }, { 230, 481 }};
static const XStringRes _Const04FD = { _StringsDefault15, 0x0080 };
static const XRect _Const04FE = {{ 540, 26 }, { 684, 76 }};
static const XStringRes _Const04FF = { _StringsDefault15, 0x0086 };
static const XRect _Const0500 = {{ 424, 30 }, { 519, 72 }};
static const XColor _Const0501 = { 0xED, 0xED, 0xED, 0xFF };
static const XRect _Const0502 = {{ 423, 29 }, { 520, 73 }};
static const XRect _Const0503 = {{ 432, 38 }, { 511, 64 }};
static const XStringRes _Const0504 = { _StringsDefault15, 0x0090 };
static const XStringRes _Const0505 = { _StringsDefault15, 0x009C };
static const XStringRes _Const0506 = { _StringsDefault15, 0x00AC };
static const XStringRes _Const0507 = { _StringsDefault15, 0x00B6 };
static const XColor _Const0508 = { 0xEE, 0x00, 0x22, 0xFF };
static const XStringRes _Const0509 = { _StringsDefault15, 0x00C2 };
static const XColor _Const050A = { 0x00, 0x00, 0xEE, 0xFF };
static const XStringRes _Const050B = { _StringsDefault15, 0x00DE };
static const XStringRes _Const050C = { _StringsDefault15, 0x00F5 };
static const XStringRes _Const050D = { _StringsDefault15, 0x0114 };
static const XStringRes _Const050E = { _StringsDefault15, 0x0124 };
static const XRect _Const050F = {{ 0, 0 }, { 480, 440 }};
static const XRect _Const0510 = {{ 33, 59 }, { 133, 99 }};
static const XRect _Const0511 = {{ 33, 20 }, { 163, 54 }};
static const XStringRes _Const0512 = { _StringsDefault15, 0x012E };
static const XRect _Const0513 = {{ 290, 346 }, { 430, 396 }};
static const XRect _Const0514 = {{ 30, 346 }, { 170, 396 }};
static const XRect _Const0515 = {{ 33, 100 }, { 203, 130 }};
static const XRect _Const0516 = {{ 33, 296 }, { 213, 326 }};
static const XRect _Const0517 = {{ 34, 180 }, { 134, 220 }};
static const XRect _Const0518 = {{ 34, 144 }, { 164, 178 }};
static const XStringRes _Const0519 = { _StringsDefault15, 0x013F };
static const XRect _Const051A = {{ 34, 222 }, { 203, 280 }};
static const XStringRes _Const051B = { _StringsDefault15, 0x014E };
static const XStringRes _Const051C = { _StringsDefault15, 0x0167 };
static const XStringRes _Const051D = { _StringsDefault15, 0x0180 };
static const XRect _Const051E = {{ 0, 0 }, { 195, 40 }};
static const XRect _Const051F = {{ 0, 2 }, { 190, 19 }};
static const XStringRes _Const0520 = { _StringsDefault15, 0x0188 };
static const XRect _Const0521 = {{ 0, 20 }, { 195, 40 }};
static const XStringRes _Const0522 = { _StringsDefault15, 0x0198 };
static const XRect _Const0523 = {{ 20, 360 }, { 160, 400 }};
static const XStringRes _Const0524 = { _StringsDefault15, 0x019D };
static const XRect _Const0525 = {{ 180, 360 }, { 297, 400 }};
static const XRect _Const0526 = {{ 320, 360 }, { 450, 400 }};
static const XStringRes _Const0527 = { _StringsDefault15, 0x01A5 };
static const XRect _Const0528 = {{ 20, 400 }, { 160, 440 }};
static const XStringRes _Const0529 = { _StringsDefault15, 0x01B2 };
static const XRect _Const052A = {{ 470, 360 }, { 587, 400 }};
static const XRect _Const052B = {{ 180, 400 }, { 310, 440 }};
static const XStringRes _Const052C = { _StringsDefault15, 0x01C0 };
static const XRect _Const052D = {{ 320, 400 }, { 437, 440 }};
static const XStringRes _Const052E = { _StringsDefault15, 0x01C8 };
static const XRect _Const052F = {{ 471, 400 }, { 588, 440 }};
static const XStringRes _Const0530 = { _StringsDefault15, 0x01D2 };
static const XRect _Const0531 = {{ 0, 0 }, { 80, 45 }};
static const XRect _Const0532 = {{ 0, 20 }, { 80, 45 }};
static const XPoint _Const0533 = { 80, 0 };
static const XPoint _Const0534 = { 80, 45 };
static const XRect _Const0535 = {{ 1, 1 }, { 79, 19 }};
static const XRect _Const0536 = {{ 49, 1 }, { 69, 21 }};
static const XRect _Const0537 = {{ 0, 0 }, { 530, 420 }};
static const XColor _Const0538 = { 0xD1, 0xD1, 0xD1, 0xFF };
static const XRect _Const0539 = {{ 130, 100 }, { 270, 140 }};
static const XRect _Const053A = {{ 120, 160 }, { 420, 200 }};
static const XColor _Const053B = { 0x2B, 0x2B, 0x2B, 0xFF };
static const XRect _Const053C = {{ 22, 159 }, { 126, 198 }};
static const XStringRes _Const053D = { _StringsDefault15, 0x01DB };
static const XRect _Const053E = {{ 22, 99 }, { 136, 138 }};
static const XStringRes _Const053F = { _StringsDefault15, 0x01E9 };
static const XRect _Const0540 = {{ 428, 156 }, { 488, 202 }};
static const XRect _Const0541 = {{ 307, 99 }, { 357, 139 }};
static const XRect _Const0542 = {{ 364, 99 }, { 414, 139 }};
static const XRect _Const0543 = {{ 138, 108 }, { 262, 132 }};
static const XStringRes _Const0544 = { _StringsDefault15, 0x01F7 };
static const XRect _Const0545 = {{ 130, 170 }, { 410, 190 }};
static const XStringRes _Const0546 = { _StringsDefault15, 0x0200 };
static const XRect _Const0547 = {{ 305, 240 }, { 478, 290 }};
static const XStringRes _Const0548 = { _StringsDefault16, 0x0003 };
static const XRect _Const0549 = {{ 26, 235 }, { 275, 375 }};
static const XRect _Const054A = {{ 31, 240 }, { 270, 369 }};
static const XRect _Const054B = {{ 306, 325 }, { 476, 373 }};
static const XRect _Const054C = {{ 24, 28 }, { 71, 61 }};
static const XStringRes _Const054D = { _StringsDefault16, 0x0016 };
static const XRect _Const054E = {{ 84, 20 }, { 290, 268 }};
static const XStringRes _Const054F = { _StringsDefault16, 0x001E };
static const XStringRes _Const0550 = { _StringsDefault16, 0x0035 };
static const XStringRes _Const0551 = { _StringsDefault16, 0x0051 };
static const XStringRes _Const0552 = { _StringsDefault16, 0x0069 };
static const XStringRes _Const0553 = { _StringsDefault16, 0x0071 };
static const XStringRes _Const0554 = { _StringsDefault16, 0x008B };
static const XStringRes _Const0555 = { _StringsDefault16, 0x009D };
static const XStringRes _Const0556 = { _StringsDefault16, 0x00AC };
static const XStringRes _Const0557 = { _StringsDefault16, 0x00BA };
static const XStringRes _Const0558 = { _StringsDefault16, 0x00CA };
static const XStringRes _Const0559 = { _StringsDefault16, 0x00E6 };
static const XStringRes _Const055A = { _StringsDefault16, 0x0100 };
static const XStringRes _Const055B = { _StringsDefault16, 0x0117 };
static const XStringRes _Const055C = { _StringsDefault16, 0x012C };
static const XStringRes _Const055D = { _StringsDefault16, 0x0133 };
static const XStringRes _Const055E = { _StringsDefault16, 0x013C };
static const XStringRes _Const055F = { _StringsDefault16, 0x0145 };
static const XStringRes _Const0560 = { _StringsDefault16, 0x014E };
static const XStringRes _Const0561 = { _StringsDefault16, 0x0158 };
static const XRect _Const0562 = {{ 0, 0 }, { 660, 420 }};
static const XRect _Const0563 = {{ 22, 190 }, { 570, 380 }};
static const XRect _Const0564 = {{ 27, 35 }, { 170, 61 }};
static const XStringRes _Const0565 = { _StringsDefault16, 0x016E };
static const XRect _Const0566 = {{ 25, 86 }, { 182, 115 }};
static const XStringRes _Const0567 = { _StringsDefault16, 0x0181 };
static const XRect _Const0568 = {{ 500, 262 }, { 620, 311 }};
static const XStringRes _Const0569 = { _StringsDefault16, 0x0194 };
static const XRect _Const056A = {{ 500, 327 }, { 620, 378 }};
static const XRect _Const056B = {{ 190, -1 }, { 566, 69 }};
static const XRect _Const056C = {{ 190, 51 }, { 565, 121 }};
static const XRect _Const056D = {{ 23, 138 }, { 150, 169 }};
static const XStringRes _Const056E = { _StringsDefault16, 0x019B };
static const XRect _Const056F = {{ 190, 105 }, { 565, 175 }};
static const XRect _Const0570 = {{ 0, 0 }, { 160, 65 }};
static const XRect _Const0571 = {{ 0, 30 }, { 160, 65 }};
static const XPoint _Const0572 = { 0, 65 };
static const XPoint _Const0573 = { 160, 65 };
static const XPoint _Const0574 = { 160, 30 };
static const XRect _Const0575 = {{ 5, 30 }, { 160, 65 }};
static const XPoint _Const0576 = { 4, 59 };
static const XPoint _Const0577 = { 4, 35 };
static const XRect _Const0578 = {{ 0, 0 }, { 150, 70 }};
static const XRect _Const0579 = {{ 0, 30 }, { 150, 70 }};
static const XRect _Const057A = {{ 3, 32 }, { 147, 68 }};
static const XRect _Const057B = {{ 5, 0 }, { 150, 70 }};
static const XRect _Const057C = {{ 0, 0 }, { 290, 300 }};
static const XColor _Const057D = { 0xD2, 0xD2, 0xD2, 0xFF };
static const XRect _Const057E = {{ 40, 30 }, { 230, 80 }};
static const XStringRes _Const057F = { _StringsDefault16, 0x01A6 };
static const XRect _Const0580 = {{ 40, 100 }, { 230, 150 }};
static const XStringRes _Const0581 = { _StringsDefault16, 0x01B2 };
static const XRect _Const0582 = {{ 60, 200 }, { 210, 250 }};
static const XRect _Const0583 = {{ 0, 0 }, { 680, 385 }};
static const XRect _Const0584 = {{ 10, 10 }, { 650, 355 }};
static const XRect _Const0585 = {{ 20, 20 }, { 480, 340 }};
static const XRect _Const0586 = {{ 485, 285 }, { 635, 335 }};
static const XRect _Const0587 = {{ 485, 220 }, { 635, 270 }};
static const XStringRes _Const0588 = { _StringsDefault16, 0x01BE };
static const XRect _Const0589 = {{ 485, 80 }, { 635, 130 }};
static const XStringRes _Const058A = { _StringsDefault16, 0x01CD };
static const XRect _Const058B = {{ 485, 20 }, { 635, 70 }};
static const XStringRes _Const058C = { _StringsDefault16, 0x01DD };
static const XRect _Const058D = {{ 0, 0 }, { 420, 40 }};
static const XRect _Const058E = {{ 150, 4 }, { 388, 35 }};
static const XRect _Const058F = {{ 0, 0 }, { 50, 40 }};
static const XRect _Const0590 = {{ 88, 3 }, { 144, 36 }};
static const XRect _Const0591 = {{ 49, 10 }, { 86, 30 }};
static const XStringRes _Const0592 = { _StringsDefault16, 0x01EB };
static const XRect _Const0593 = {{ 340, 4 }, { 419, 36 }};
static const XStringRes _Const0594 = { _StringsDefault16, 0x01F3 };
static const XRect _Const0595 = {{ 0, 0 }, { 90, 32 }};
static const XRect _Const0596 = {{ 3, 3 }, { 87, 29 }};
static const XRect _Const0597 = {{ 2, 3 }, { 88, 9 }};
static const XRect _Const0598 = {{ 2, 22 }, { 88, 30 }};
static const XColor _Const0599 = { 0x95, 0x95, 0x95, 0xFF };
static const XRect _Const059A = {{ 4, 3 }, { 86, 30 }};

#ifndef EW_DONT_CHECK_INDEX
  /* This function is used to check the indices when accessing an array.
     If you don't want this verification add the define EW_DONT_CHECK_INDEX
     to your Makefile or project settings. */
  static int EwCheckIndex( int aIndex, int aRange, const char* aFile, int aLine )
  {
    if (( aIndex < 0 ) || ( aIndex >= aRange ))
    {
      EwPrint( "[FATAL ERROR in %s:%d] Array index %d out of bounds %d",
                aFile, aLine, aIndex, aRange );
      EwPanic();
    }
    return aIndex;
  }

  #define EwCheckIndex( aIndex, aRange ) \
    EwCheckIndex( aIndex, aRange, __FILE__, __LINE__ )
#else
  #define EwCheckIndex( aIndex, aRange ) aIndex
#endif

/* User defined inline code: 'App::Inline1' */
#include "stm32f7xx_hal_rtc.h"

#include "MM_Command2.h"
#include "MM_CUtils.h"

#include "CO_Site.h"
#include "CO_RBU.h"
#include "MM_Device.h" 

#include "MM_Application.h"

#include <stdio.h>
#include <string.h>


/* User defined auto object: 'App::NormalPushButton' */
EW_DEFINE_AUTOOBJECT( AppNormalPushButton, WidgetSetPushButtonConfig )

/* Initializer for the auto object 'App::NormalPushButton' */
void AppNormalPushButton__Init( WidgetSetPushButtonConfig _this )
{
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const0001 );
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( _this, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameFocused( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( _this, 0 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( _this, 1 );
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
}

/* Table with links to derived variants of the auto object : 'App::NormalPushButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppNormalPushButton )
EW_END_OF_AUTOOBJECT_VARIANTS( AppNormalPushButton )

/* Initializer for the class 'App::Application' */
void AppApplication__Init( AppApplication _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreRoot__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Seperator, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeDateText, &_this->_XObject, 0 );
  AppTabButton__Init( &_this->AlarmsTabButton, &_this->_XObject, 0 );
  AppButton__Init( &_this->EvacuateButton, &_this->_XObject, 0 );
  AppButton__Init( &_this->MuteButton, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  AppTabButton__Init( &_this->FaultsTabButton, &_this->_XObject, 0 );
  AppTabButton__Init( &_this->OnTestTabButton, &_this->_XObject, 0 );
  AppTabButton__Init( &_this->EventsTabButton, &_this->_XObject, 0 );
  AppButton__Init( &_this->ResetButton, &_this->_XObject, 0 );
  AppButton__Init( &_this->SilenceButton, &_this->_XObject, 0 );
  AppButton__Init( &_this->LogOnButton, &_this->_XObject, 0 );
  AppEvents__Init( &_this->DeviceList, &_this->_XObject, 0 );
  AppTest__Init( &_this->Test, &_this->_XObject, 0 );
  AppSettings__Init( &_this->Settings, &_this->_XObject, 0 );
  AppSystemPage__Init( &_this->SystemPage, &_this->_XObject, 0 );
  AppModify__Init( &_this->Modify, &_this->_XObject, 0 );
  AppFaults__Init( &_this->Faults, &_this->_XObject, 0 );
  AppLevelAccess__Init( &_this->LevelAccess, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->FireListChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->StartProgressEventHandler, &_this->_XObject, 0 );
  AppFire__Init( &_this->Alarms, &_this->_XObject, 0 );
  AppDisablements__Init( &_this->Disablements, &_this->_XObject, 0 );
  AppOnTest__Init( &_this->OnTest, &_this->_XObject, 0 );
  AppDisable__Init( &_this->EnableDisable, &_this->_XObject, 0 );
  AppMeshTree__Init( &_this->MeshTree, &_this->_XObject, 0 );
  AppProgressPopup__Init( &_this->ProgressPopup, &_this->_XObject, 0 );
  AppTabButtonPull__Init( &_this->TabButtonPull, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->WriteProtectedEventHandler, &_this->_XObject, 0 );
  AppDFUPopup__Init( &_this->DFUPopup, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->DFUEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->GotoFireEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SwitchConfirmFireEvent, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->ConfirmButtonTimer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SwitchAcknowledgeEvent, &_this->_XObject, 0 );
  AppDisablementsTabButton__Init( &_this->DisablementsTabButton, &_this->_XObject, 0 );
  ViewsWallpaper__Init( &_this->HazardWallpaper, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SafeStateEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedEventHandler, &_this->_XObject, 0 );
  AppUserButton__Init( &_this->UserButton, &_this->_XObject, 0 );
  AppUserButton__Init( &_this->UserButton1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->GotoSysPageEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppApplication );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0002 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0003 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const0004 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const0005 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const0006 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const0007 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0000 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Rectangle, 1 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 1 );
  CoreRectView__OnSetBounds( &_this->Seperator, _Const0008 );
  ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const0009 );
  ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const000A );
  ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const000A );
  ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const0009 );
  ViewsRectangle_OnSetColor( &_this->Seperator, _Const000B );
  CoreRectView__OnSetBounds( &_this->TimeDateText, _Const000C );
  ViewsText_OnSetAlignment( &_this->TimeDateText, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertBottom );
  ViewsText_OnSetString( &_this->TimeDateText, EwLoadString( &_Const000D ));
  ViewsText_OnSetColor( &_this->TimeDateText, _Const000E );
  CoreRectView__OnSetBounds( &_this->AlarmsTabButton, _Const000F );
  EwRetainString( &_this->AlarmsTabButton.Text, EwLoadString( &_Const0010 ));
  AppTabButton_OnSetpressed( &_this->AlarmsTabButton, 1 );
  _this->AlarmsTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->EvacuateButton, _Const0011 );
  EwRetainString( &_this->EvacuateButton.ButtonText, EwLoadString( &_Const0012 ));
  AppButton_OnSetElevation( &_this->EvacuateButton, 2 );
  CoreRectView__OnSetBounds( &_this->MuteButton, _Const0013 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->MuteButton, 1 );
  EwRetainString( &_this->MuteButton.ButtonText, EwLoadString( &_Const0014 ));
  CoreRectView__OnSetBounds( &_this->Image, _Const0015 );
  ViewsImage_OnSetAutoSize( &_this->Image, 1 );
  CoreRectView__OnSetBounds( &_this->FaultsTabButton, _Const0016 );
  EwRetainString( &_this->FaultsTabButton.Text, EwLoadString( &_Const0017 ));
  _this->FaultsTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->OnTestTabButton, _Const0018 );
  EwRetainString( &_this->OnTestTabButton.Text, EwLoadString( &_Const0019 ));
  _this->OnTestTabButton.NumberOf = 0;
  CoreRectView__OnSetBounds( &_this->EventsTabButton, _Const001A );
  EwRetainString( &_this->EventsTabButton.Text, EwLoadString( &_Const001B ));
  _this->EventsTabButton.NumberOf = 0;
  EwRetainString( &_this->SelectedTab, EwLoadString( &_Const0010 ));
  CoreRectView__OnSetBounds( &_this->ResetButton, _Const001C );
  EwRetainString( &_this->ResetButton.ButtonText, EwLoadString( &_Const001D ));
  AppButton_OnSetElevation( &_this->ResetButton, 2 );
  CoreRectView__OnSetBounds( &_this->SilenceButton, _Const001E );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->SilenceButton, 1 );
  EwRetainString( &_this->SilenceButton.ButtonText, EwLoadString( &_Const001F ));
  AppButton_OnSetElevation( &_this->SilenceButton, 2 );
  CoreRectView__OnSetBounds( &_this->LogOnButton, _Const0020 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->LogOnButton, 1 );
  EwRetainString( &_this->LogOnButton.ButtonText, EwLoadString( &_Const0021 ));
  CoreRectView__OnSetBounds( &_this->DeviceList, _Const0022 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 0 );
  CoreGroup__OnSetVisible( &_this->DeviceList, 0 );
  CoreRectView__OnSetBounds( &_this->Test, _Const0023 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 0 );
  CoreGroup__OnSetVisible( &_this->Test, 0 );
  CoreRectView__OnSetBounds( &_this->Settings, _Const0024 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 0 );
  CoreGroup__OnSetVisible( &_this->Settings, 0 );
  CoreRectView__OnSetBounds( &_this->SystemPage, _Const0024 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
  CoreGroup__OnSetVisible( &_this->SystemPage, 0 );
  CoreRectView__OnSetBounds( &_this->Modify, _Const0023 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 0 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Modify, 1 );
  CoreGroup__OnSetVisible( &_this->Modify, 0 );
  CoreRectView__OnSetBounds( &_this->Faults, _Const0025 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 0 );
  CoreGroup__OnSetVisible( &_this->Faults, 0 );
  CoreRectView__OnSetBounds( &_this->LevelAccess, _Const0026 );
  AppLevelAccess_OnSetAccessLevel( &_this->LevelAccess, 1 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const0000 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  CoreSystemEventHandler_OnSetEnabled( &_this->StartProgressEventHandler, 1 );
  CoreRectView__OnSetBounds( &_this->Alarms, _Const0022 );
  CoreRectView__OnSetBounds( &_this->Disablements, _Const0027 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 0 );
  CoreGroup__OnSetVisible( &_this->Disablements, 0 );
  CoreRectView__OnSetBounds( &_this->OnTest, _Const0025 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 0 );
  CoreGroup__OnSetVisible( &_this->OnTest, 0 );
  CoreRectView__OnSetBounds( &_this->EnableDisable, _Const0028 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 0 );
  CoreGroup__OnSetVisible( &_this->EnableDisable, 0 );
  CoreRectView__OnSetBounds( &_this->MeshTree, _Const0029 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 0 );
  CoreGroup__OnSetVisible( &_this->MeshTree, 0 );
  CoreRectView__OnSetBounds( &_this->ProgressPopup, _Const002A );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ProgressPopup, 0 );
  CoreGroup__OnSetVisible( &_this->ProgressPopup, 0 );
  CoreRectView__OnSetBounds( &_this->TabButtonPull, _Const002B );
  EwRetainString( &_this->TabButtonPull.Text, EwLoadString( &_Const002C ));
  CoreSystemEventHandler_OnSetEnabled( &_this->WriteProtectedEventHandler, 1 );
  CoreRectView__OnSetBounds( &_this->DFUPopup, _Const002D );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DFUPopup, 0 );
  CoreGroup__OnSetVisible( &_this->DFUPopup, 0 );
  CoreTimer_OnSetPeriod( &_this->ConfirmButtonTimer, 800 );
  CoreTimer_OnSetEnabled( &_this->ConfirmButtonTimer, 1 );
  CoreRectView__OnSetBounds( &_this->DisablementsTabButton, _Const002E );
  EwRetainString( &_this->DisablementsTabButton.Super1.Text, EwLoadString( &_Const002F 
  ));
  CoreRectView__OnSetBounds( &_this->HazardWallpaper, _Const0008 );
  ViewsWallpaper_OnSetVisible( &_this->HazardWallpaper, 0 );
  CoreRectView__OnSetBounds( &_this->UserButton, _Const0030 );
  CoreRectView__OnSetBounds( &_this->UserButton1, _Const0031 );
  _this->UserButton1.ButtonIndex = 1;
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Seperator ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeDateText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AlarmsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EvacuateButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MuteButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->FaultsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OnTestTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EventsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ResetButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SilenceButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->LogOnButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DeviceList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Test ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Settings ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SystemPage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Modify ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Faults ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->LevelAccess ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Alarms ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Disablements ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OnTest ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->EnableDisable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshTree ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ProgressPopup ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TabButtonPull ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DFUPopup ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisablementsTabButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HazardWallpaper ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UserButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UserButton1 ), 0 );
  ViewsText_OnSetFont( &_this->TimeDateText, EwLoadResource( &AppFontVerdana16, 
  ResourcesFont ));
  _this->AlarmsTabButton.OnActivate = EwNewSlot( _this, AppApplication_AlarmsEnter 
  );
  _this->AlarmsTabButton.Icon = EwLoadResource( &AppFire4Bitmap, ResourcesBitmap 
  );
  _this->AlarmsTabButton.Selected = EwNewRef( _this, AppApplication_OnGetSelectedTab, 
  AppApplication_OnSetSelectedTab );
  _this->AlarmsTabButton.OnDeactivate = EwNewSlot( _this, AppApplication_AlarmsExit 
  );
  _this->EvacuateButton.Icon = EwLoadResource( &AppEvacuateBitmap, ResourcesBitmap 
  );
  _this->EvacuateButton.ActionPress = EwNewSlot( _this, AppApplication_Evacuate 
  );
  _this->MuteButton.Icon = EwLoadResource( &AppMuteBitmap, ResourcesBitmap );
  _this->MuteButton.ActionPress = EwNewSlot( _this, AppApplication_Mute );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &Appcygnusblue2, ResourcesBitmap 
  ));
  _this->FaultsTabButton.OnActivate = EwNewSlot( _this, AppApplication_FaultsEnter 
  );
  _this->FaultsTabButton.Icon = EwLoadResource( &AppFaultBitmap, ResourcesBitmap 
  );
  _this->FaultsTabButton.Selected = EwNewRef( _this, AppApplication_OnGetSelectedTab, 
  AppApplication_OnSetSelectedTab );
  _this->FaultsTabButton.OnDeactivate = EwNewSlot( _this, AppApplication_FaultsExit 
  );
  _this->OnTestTabButton.OnActivate = EwNewSlot( _this, AppApplication_OnTestEnter 
  );
  _this->OnTestTabButton.Icon = EwLoadResource( &Appontest, ResourcesBitmap );
  _this->OnTestTabButton.Selected = EwNewRef( _this, AppApplication_OnGetSelectedTab, 
  AppApplication_OnSetSelectedTab );
  _this->OnTestTabButton.OnDeactivate = EwNewSlot( _this, AppApplication_OnTestExit 
  );
  _this->EventsTabButton.OnActivate = EwNewSlot( _this, AppApplication_EventsEnter 
  );
  _this->EventsTabButton.Icon = EwLoadResource( &AppAlertBitmap, ResourcesBitmap 
  );
  _this->EventsTabButton.Selected = EwNewRef( _this, AppApplication_OnGetSelectedTab, 
  AppApplication_OnSetSelectedTab );
  _this->EventsTabButton.OnDeactivate = EwNewSlot( _this, AppApplication_EventsExit 
  );
  _this->ResetButton.Icon = EwLoadResource( &AppResetBitmap, ResourcesBitmap );
  _this->ResetButton.ActionPress = EwNewSlot( _this, AppApplication_Reset );
  _this->SilenceButton.Icon = EwLoadResource( &AppSilenceBitmap, ResourcesBitmap 
  );
  _this->SilenceButton.ActionPress = EwNewSlot( _this, AppApplication_Silence );
  _this->LogOnButton.Icon = EwLoadResource( &AppKeyBitmap, ResourcesBitmap );
  _this->LogOnButton.ActionPress = EwNewSlot( _this, AppApplication_LogOn );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &AppFontVerdana16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &AppFontVerdana14, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppApplication_Tick );
  _this->FireListChangeEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onFireEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->FireListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->FireListChangeEvent );
  _this->StartProgressEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->StartProgressEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->StartProgressEvent );
  _this->TabButtonPull.Icon = EwLoadResource( &AppAccessBitmap, ResourcesBitmap 
  );
  _this->TabButtonPull.OnSelectItem = EwNewSlot( _this, AppApplication_PageSelection 
  );
  _this->WriteProtectedEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->WriteProtectedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->WriteProtectedEvent );
  _this->DFUEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onEvent2 );
  CoreSystemEventHandler_OnSetEvent( &_this->DFUEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->DFUEvent );
  _this->GotoFireEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onFireEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->GotoFireEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->GotoFireDisplay );
  _this->SwitchConfirmFireEvent.OnEvent = EwNewSlot( _this, AppApplication_onConfirmFireSwitch 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SwitchConfirmFireEvent, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->ConfirmFireAvailable );
  _this->ConfirmButtonTimer.OnTrigger = EwNewSlot( _this, AppApplication_TimerEvent 
  );
  _this->SwitchAcknowledgeEvent.OnEvent = EwNewSlot( _this, AppApplication_onAcknowldegeSwitch 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SwitchAcknowledgeEvent, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AcknowledgeFireAvailable );
  _this->DisablementsTabButton.Super1.OnActivate = EwNewSlot( _this, AppApplication_DisablementsEnter 
  );
  _this->DisablementsTabButton.Super1.Icon = EwLoadResource( &AppDisableBitmap, 
  ResourcesBitmap );
  _this->DisablementsTabButton.Super1.Selected = EwNewRef( _this, AppApplication_OnGetSelectedTab, 
  AppApplication_OnSetSelectedTab );
  _this->DisablementsTabButton.Super1.OnDeactivate = EwNewSlot( _this, AppApplication_DisablementsExit 
  );
  ViewsWallpaper_OnSetBitmap( &_this->HazardWallpaper, EwLoadResource( &Apphazardstripe, 
  ResourcesBitmap ));
  _this->SafeStateEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onSafeState 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SafeStateEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SafeStateEvent );
  _this->SiteChangedEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onFireEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->UserButton.ActionPress = EwNewSlot( _this, AppApplication_Function1 );
  _this->UserButton.ActionRelease = EwNewSlot( _this, AppApplication_Function1off 
  );
  _this->UserButton1.ActionPress = EwNewSlot( _this, AppApplication_Function2 );
  _this->UserButton1.ActionRelease = EwNewSlot( _this, AppApplication_Function2off 
  );
  _this->GotoSysPageEventHandler.OnEvent = EwNewSlot( _this, AppApplication_onEvent3 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->GotoSysPageEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->GotoSysPageEvent );
}

/* Re-Initializer for the class 'App::Application' */
void AppApplication__ReInit( AppApplication _this )
{
  /* At first re-initialize the super class ... */
  CoreRoot__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Seperator );
  ViewsText__ReInit( &_this->TimeDateText );
  AppTabButton__ReInit( &_this->AlarmsTabButton );
  AppButton__ReInit( &_this->EvacuateButton );
  AppButton__ReInit( &_this->MuteButton );
  ViewsImage__ReInit( &_this->Image );
  AppTabButton__ReInit( &_this->FaultsTabButton );
  AppTabButton__ReInit( &_this->OnTestTabButton );
  AppTabButton__ReInit( &_this->EventsTabButton );
  AppButton__ReInit( &_this->ResetButton );
  AppButton__ReInit( &_this->SilenceButton );
  AppButton__ReInit( &_this->LogOnButton );
  AppEvents__ReInit( &_this->DeviceList );
  AppTest__ReInit( &_this->Test );
  AppSettings__ReInit( &_this->Settings );
  AppSystemPage__ReInit( &_this->SystemPage );
  AppModify__ReInit( &_this->Modify );
  AppFaults__ReInit( &_this->Faults );
  AppLevelAccess__ReInit( &_this->LevelAccess );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  CoreTimer__ReInit( &_this->Timer );
  CoreSystemEventHandler__ReInit( &_this->FireListChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->StartProgressEventHandler );
  AppFire__ReInit( &_this->Alarms );
  AppDisablements__ReInit( &_this->Disablements );
  AppOnTest__ReInit( &_this->OnTest );
  AppDisable__ReInit( &_this->EnableDisable );
  AppMeshTree__ReInit( &_this->MeshTree );
  AppProgressPopup__ReInit( &_this->ProgressPopup );
  AppTabButtonPull__ReInit( &_this->TabButtonPull );
  CoreSystemEventHandler__ReInit( &_this->WriteProtectedEventHandler );
  AppDFUPopup__ReInit( &_this->DFUPopup );
  CoreSystemEventHandler__ReInit( &_this->DFUEventHandler );
  CoreSystemEventHandler__ReInit( &_this->GotoFireEventHandler );
  CoreSystemEventHandler__ReInit( &_this->SwitchConfirmFireEvent );
  CoreTimer__ReInit( &_this->ConfirmButtonTimer );
  CoreSystemEventHandler__ReInit( &_this->SwitchAcknowledgeEvent );
  AppDisablementsTabButton__ReInit( &_this->DisablementsTabButton );
  ViewsWallpaper__ReInit( &_this->HazardWallpaper );
  CoreSystemEventHandler__ReInit( &_this->SafeStateEventHandler );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedEventHandler );
  AppUserButton__ReInit( &_this->UserButton );
  AppUserButton__ReInit( &_this->UserButton1 );
  CoreSystemEventHandler__ReInit( &_this->GotoSysPageEventHandler );
}

/* Finalizer method for the class 'App::Application' */
void AppApplication__Done( AppApplication _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppApplication );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Seperator );
  ViewsText__Done( &_this->TimeDateText );
  AppTabButton__Done( &_this->AlarmsTabButton );
  AppButton__Done( &_this->EvacuateButton );
  AppButton__Done( &_this->MuteButton );
  ViewsImage__Done( &_this->Image );
  AppTabButton__Done( &_this->FaultsTabButton );
  AppTabButton__Done( &_this->OnTestTabButton );
  AppTabButton__Done( &_this->EventsTabButton );
  AppButton__Done( &_this->ResetButton );
  AppButton__Done( &_this->SilenceButton );
  AppButton__Done( &_this->LogOnButton );
  AppEvents__Done( &_this->DeviceList );
  AppTest__Done( &_this->Test );
  AppSettings__Done( &_this->Settings );
  AppSystemPage__Done( &_this->SystemPage );
  AppModify__Done( &_this->Modify );
  AppFaults__Done( &_this->Faults );
  AppLevelAccess__Done( &_this->LevelAccess );
  GraphicsAttrSet__Done( &_this->AttrSet );
  CoreTimer__Done( &_this->Timer );
  CoreSystemEventHandler__Done( &_this->FireListChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->StartProgressEventHandler );
  AppFire__Done( &_this->Alarms );
  AppDisablements__Done( &_this->Disablements );
  AppOnTest__Done( &_this->OnTest );
  AppDisable__Done( &_this->EnableDisable );
  AppMeshTree__Done( &_this->MeshTree );
  AppProgressPopup__Done( &_this->ProgressPopup );
  AppTabButtonPull__Done( &_this->TabButtonPull );
  CoreSystemEventHandler__Done( &_this->WriteProtectedEventHandler );
  AppDFUPopup__Done( &_this->DFUPopup );
  CoreSystemEventHandler__Done( &_this->DFUEventHandler );
  CoreSystemEventHandler__Done( &_this->GotoFireEventHandler );
  CoreSystemEventHandler__Done( &_this->SwitchConfirmFireEvent );
  CoreTimer__Done( &_this->ConfirmButtonTimer );
  CoreSystemEventHandler__Done( &_this->SwitchAcknowledgeEvent );
  AppDisablementsTabButton__Done( &_this->DisablementsTabButton );
  ViewsWallpaper__Done( &_this->HazardWallpaper );
  CoreSystemEventHandler__Done( &_this->SafeStateEventHandler );
  CoreSystemEventHandler__Done( &_this->SiteChangedEventHandler );
  AppUserButton__Done( &_this->UserButton );
  AppUserButton__Done( &_this->UserButton1 );
  CoreSystemEventHandler__Done( &_this->GotoSysPageEventHandler );

  /* Release all used strings */
  EwReleaseString( &_this->SelectedTab );

  /* Don't forget to deinitialize the super class ... */
  CoreRoot__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Application' */
void AppApplication__Mark( AppApplication _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Seperator );
  EwMarkObject( &_this->TimeDateText );
  EwMarkObject( &_this->AlarmsTabButton );
  EwMarkObject( &_this->EvacuateButton );
  EwMarkObject( &_this->MuteButton );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->FaultsTabButton );
  EwMarkObject( &_this->OnTestTabButton );
  EwMarkObject( &_this->EventsTabButton );
  EwMarkObject( &_this->ResetButton );
  EwMarkObject( &_this->SilenceButton );
  EwMarkObject( &_this->LogOnButton );
  EwMarkObject( &_this->DeviceList );
  EwMarkObject( &_this->Test );
  EwMarkObject( &_this->Settings );
  EwMarkObject( &_this->SystemPage );
  EwMarkObject( &_this->Modify );
  EwMarkObject( &_this->Faults );
  EwMarkObject( &_this->LevelAccess );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->FireListChangeEventHandler );
  EwMarkObject( &_this->StartProgressEventHandler );
  EwMarkObject( &_this->Alarms );
  EwMarkObject( &_this->Disablements );
  EwMarkObject( &_this->OnTest );
  EwMarkObject( &_this->EnableDisable );
  EwMarkObject( &_this->MeshTree );
  EwMarkObject( &_this->ProgressPopup );
  EwMarkObject( &_this->TabButtonPull );
  EwMarkObject( &_this->WriteProtectedEventHandler );
  EwMarkObject( &_this->DFUPopup );
  EwMarkObject( &_this->DFUEventHandler );
  EwMarkObject( &_this->GotoFireEventHandler );
  EwMarkObject( &_this->SwitchConfirmFireEvent );
  EwMarkObject( &_this->ConfirmButtonTimer );
  EwMarkObject( &_this->SwitchAcknowledgeEvent );
  EwMarkObject( &_this->DisablementsTabButton );
  EwMarkObject( &_this->HazardWallpaper );
  EwMarkObject( &_this->SafeStateEventHandler );
  EwMarkObject( &_this->SiteChangedEventHandler );
  EwMarkObject( &_this->UserButton );
  EwMarkObject( &_this->UserButton1 );
  EwMarkObject( &_this->GotoSysPageEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreRoot__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::Application.AlarmsEnter()' */
void AppApplication_AlarmsEnter( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Alarms, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms, 1 );
}

/* 'C' function for method : 'App::Application.DisablementsEnter()' */
void AppApplication_DisablementsEnter( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Disablements, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 1 );
}

/* 'C' function for method : 'App::Application.DisablementsExit()' */
void AppApplication_DisablementsExit( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Disablements, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Disablements, 0 );
}

/* 'C' function for method : 'App::Application.EventsEnter()' */
void AppApplication_EventsEnter( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->DeviceList, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 1 );
}

/* 'C' function for method : 'App::Application.EventsExit()' */
void AppApplication_EventsExit( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->DeviceList, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceList, 0 );
}

/* 'C' function for method : 'App::Application.AlarmsExit()' */
void AppApplication_AlarmsExit( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Alarms, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms, 0 );
}

/* 'C' function for method : 'App::Application.PageSelection()' */
void AppApplication_PageSelection( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0032 )))
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 1 );
    CoreGroup__OnSetVisible( &_this->EnableDisable, 1 );
  }
  else
    if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0033 )))
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 1 );
      CoreGroup__OnSetVisible( &_this->Test, 1 );
    }
    else
      if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0034 )))
      {
        CoreGroup__OnSetVisible( &_this->Settings, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 1 );
      }
      else
        if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0035 )))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 1 );
          CoreGroup__OnSetVisible( &_this->MeshTree, 1 );
        }
        else
          if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0036 )))
          {
            CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 1 );
            CoreGroup__OnSetVisible( &_this->SystemPage, 1 );
            CoreTimer_OnSetEnabled( &_this->SystemPage.Timer, 1 );
          }
          else
            if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0037 )))
            {
              CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 1 );
              CoreGroup__OnSetVisible( &_this->Modify, 1 );
            }
}

/* 'C' function for method : 'App::Application.PageDeselection()' */
void AppApplication_PageDeselection( AppApplication _this )
{
  XObject v = ((XObject)_this->Super2.first );

  while ( v != (XObject)_this->Super2.last )
  {
    AppTabButton tb = EwCastObject( v, AppTabButton );

    if ( tb != 0 )
    {
      if ( !EwCompString( tb->Text1.String, _this->SelectedTab ))
      {
        AppTabButton_OnSetpressed( tb, 0 );
        EwPostSignal( tb->OnDeactivate, ((XObject)_this ));
        return;
      }
    }
    else
    {
      if ( !EwCompString( _this->DisablementsTabButton.Super1.Text1.String, _this->SelectedTab 
          ))
      {
        AppTabButton_OnSetpressed((AppTabButton)&_this->DisablementsTabButton, 0 
        );
        EwPostSignal( _this->DisablementsTabButton.Super1.OnDeactivate, ((XObject)_this 
          ));
        return;
      }
    }

    v = ((XObject)EwCastObject( v, CoreView )->next );
  }

  ViewsText_OnSetString( &_this->TabButtonPull.SelectionText, EwConcatString( EwLoadString( 
  &_Const0038 ), EwNewStringInt( _this->LevelAccess.AccessLevel, 0, 10 )));
  ViewsRectangle_OnSetColor( &_this->TabButtonPull.TabPullBackground, _Const0039 
  );

  if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0032 )))
  {
    CoreGroup__OnSetVisible( &_this->EnableDisable, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->EnableDisable, 0 );
  }
  else
    if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0034 )))
    {
      CoreGroup__OnSetVisible( &_this->Settings, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Settings, 0 );
    }
    else
      if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0033 )))
      {
        CoreGroup_OnSetEnabled((CoreGroup)&_this->Test, 0 );
        CoreGroup__OnSetVisible( &_this->Test, 0 );
        AppTreeView_j( &_this->Test.TreeView );
        EwSignal( EwNewSlot( &_this->Test, AppTest_AllOff ), ((XObject)_this ));
      }
      else
        if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0035 )))
        {
          CoreGroup_OnSetEnabled((CoreGroup)&_this->MeshTree, 0 );
          CoreGroup__OnSetVisible( &_this->MeshTree, 0 );
        }
        else
          if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0036 )))
          {
            CoreGroup__OnSetVisible( &_this->SystemPage, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&_this->SystemPage, 0 );
            CoreTimer_OnSetEnabled( &_this->SystemPage.Timer, 0 );
          }
          else
            if ( !EwCompString( _this->SelectedTab, EwLoadString( &_Const0037 )))
            {
              CoreGroup_OnSetEnabled((CoreGroup)&_this->Modify, 0 );
              CoreGroup__OnSetVisible( &_this->Modify, 0 );
            }

  return;
}

/* 'C' function for method : 'App::Application.FaultsEnter()' */
void AppApplication_FaultsEnter( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Faults, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 1 );
}

/* 'C' function for method : 'App::Application.FaultsExit()' */
void AppApplication_FaultsExit( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->Faults, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Faults, 0 );
}

/* 'C' function for method : 'App::Application.OnTestEnter()' */
void AppApplication_OnTestEnter( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->OnTest, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 1 );
}

/* 'C' function for method : 'App::Application.OnTestExit()' */
void AppApplication_OnTestExit( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->OnTest, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->OnTest, 0 );
}

/* 'C' function for method : 'App::Application.Mute()' */
void AppApplication_Mute( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_MUTE_BUZZER_BUTTON );
}

/* 'C' function for method : 'App::Application.Tick()' */
void AppApplication_Tick( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    CoreTime Time = EwNewObject( CoreTime, 0 );
    XString pf;
    Time = CoreTime_OnGetCurrentTime( Time );
    ViewsText_OnSetString( &_this->TimeDateText, CoreTime_Format( Time, EwLoadString( 
    &_Const003A )));

    if (( Time->Day > 3 ) && ( Time->Day < 21 ))
    {
      pf = EwLoadString( &_Const003B );
    }
    else
      switch ( Time->Day % 10 )
      {
        case 1 :
          pf = EwLoadString( &_Const003C );
        break;

        case 2 :
          pf = EwLoadString( &_Const003D );
        break;

        case 3 :
          pf = EwLoadString( &_Const003E );
        break;

        default : 
          pf = EwLoadString( &_Const003B );
      }

    ViewsText_OnSetString( &_this->TimeDateText, EwConcatString( EwConcatString( 
    _this->TimeDateText.String, pf ), CoreTime_Format( Time, EwLoadString( &_Const003F 
    ))));
  }
}

/* 'C' function for method : 'App::Application.Evacuate()' */
void AppApplication_Evacuate( AppApplication _this, XObject sender )
{
  AppConfirmPopup popup;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( AppConfirmPopup, 0 );
  ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const0040 ));
  AppConfirmPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( _this, 
  AppApplication_Evacuate1 ));
}

/* 'C' function for method : 'App::Application.LogOn()' */
void AppApplication_LogOn( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !EwCompString( _this->LogOnButton.ButtonText, EwLoadString( &_Const0021 )))
  {
    AppKeypadPopup popup = EwNewObject( AppKeypadPopup, 0 );
    popup->getting = 1;
    AppPopup_Show((AppPopup)popup, CoreView__GetRoot( _this ));
    CoreGroup_ObtainFocus((CoreGroup)&popup->Writable );
  }
  else
  {
    {
      AppLevelAccess_OnSetAccessLevel( &_this->LevelAccess, 1 );
    }
  }
}

/* 'C' function for method : 'App::Application.Reset()' */
void AppApplication_Reset( AppApplication _this, XObject sender )
{
  AppConfirmPopup popup;
  XBool inputs_active;
  XBool inputs_inactive;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( AppConfirmPopup, 0 );
  inputs_active = 0;
  inputs_inactive = 0;
  {
    Command cmd;

    Command0( CMD_CHECK_ACTIVE_ON_TEST, &cmd );

     inputs_active = cmd.int0;
     inputs_inactive = cmd.int1;
  }

  if ( inputs_active )
  {
    ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const0041 ));
  }
  else
    if ( inputs_inactive )
    {
      ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const0042 ));
    }
    else
    {
      ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const0043 ));
    }

  AppConfirmPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( _this, 
  AppApplication_Reset1 ));
}

/* 'C' function for method : 'App::Application.LowLevel()' */
void AppApplication_LowLevel( AppApplication _this, XInt8 level )
{
  AppAccesssPopup ll = EwNewObject( AppAccesssPopup, 0 );

  if ( level == 1 )
  {
    ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const0044 ));
  }
  else
  {
    ViewsText_OnSetString( &ll->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const0045 ), EwNewStringInt( level, 0, 10 )), EwLoadString( &_Const0046 )));
  }

  AppAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onFireEvent( AppApplication _this, XObject sender )
{
  XInt32 fires = AppFire_SetListSize( &_this->Alarms );

  if ( fires > 0 )
  {
    ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const0047 );
    ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const0048 );
    ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const0047 );
    ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const0048 );
    ViewsImage_OnSetVisible( &_this->Alarms.LogoImage, 0 );
  }
  else
  {
    Command2( CMD_BUZZER, 1, 0 );
    ViewsRectangle_OnSetColorBL( &_this->Seperator, _Const0009 );
    ViewsRectangle_OnSetColorBR( &_this->Seperator, _Const000A );
    ViewsRectangle_OnSetColorTL( &_this->Seperator, _Const0009 );
    ViewsRectangle_OnSetColorTR( &_this->Seperator, _Const000A );
    ViewsImage_OnSetVisible( &_this->Alarms.LogoImage, 1 );
  }

  _this->AlarmsTabButton.NumberOf = (XUInt16)fires;
  AppTabButton_OnSetpressed( &_this->AlarmsTabButton, _this->AlarmsTabButton.pressed 
  );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->AlarmsTabButton );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->Alarms );

  if ((( fires != 0 ) || ViewsWallpaper_OnGetVisible( &_this->HazardWallpaper )) 
      && ( sender != ((XObject)&_this->SiteChangedEventHandler )))
  {
    EwPostSignal( EwNewSlot( &_this->AlarmsTabButton, AppTabButton_OnPress ), ((XObject)_this 
      ));
    AppListViewer_OnSetScrollOffset( &_this->Alarms.ListViewer, 0 );
  }
}

/* 'C' function for method : 'App::Application.Reset1()' */
void AppApplication_Reset1( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_RESET_BUTTON );
}

/* 'C' function for method : 'App::Application.Evacuate1()' */
void AppApplication_Evacuate1( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_EVACUATE_BUTTON );
}

/* 'C' function for method : 'App::Application.Silence()' */
void AppApplication_Silence( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_SILENCE_BUTTON );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onEvent( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->ProgressPopup.HorizontalValueBar, 
  0 );
  CoreGroup__OnSetVisible( &_this->ProgressPopup, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ProgressPopup, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->ProgressPopup.PushButton, EwLoadString( 
  &_Const0049 ));
  CoreTimer_OnSetEnabled( &_this->ProgressPopup.UnusedTimer, 1 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onEvent1( AppApplication _this, XObject sender )
{
  AppAccesssPopup ll;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ll = EwNewObject( AppAccesssPopup, 0 );
  ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const004A ));
  AppAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onEvent2( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->DFUPopup, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DFUPopup, 1 );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
  ViewsText_OnSetString( &_this->DFUPopup.Text, EwConcatString( _this->DFUPopup.Text.String, 
  EwLoadString( &_Const004B )));
  CoreGroup_InvalidateViewState((CoreGroup)_this );
  CoreGroup__InvalidateArea( &_this->DFUPopup, _this->DFUPopup.Super3.Bounds );
  CoreTimer_OnSetEnabled( &_this->DFUPopup.Timer, 1 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onConfirmFireSwitch( AppApplication _this, XObject sender )
{
  AppButtonState conf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  conf = EwCastObject( _this->SwitchConfirmFireEvent.Context, AppButtonState );

  if ( conf->on )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.ConfirmFireButton, 1 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.ConfirmFireButton, 0 );
  }
}

/* 'C' function for method : 'App::Application.TimerEvent()' */
void AppApplication_TimerEvent( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetEnabled((CoreGroup)&_this->Alarms.ConfirmFireButton ))
  {
    if ( _this->Alarms.ConfirmFireButton.Appearance == EwGetAutoObject( &AppNormalPushButton, 
        WidgetSetPushButtonConfig ))
    {
      WidgetSetPushButton_OnSetAppearance( &_this->Alarms.ConfirmFireButton, EwGetAutoObject( 
      &AppFocusedPushButton, WidgetSetPushButtonConfig ));
    }
    else
    {
      WidgetSetPushButton_OnSetAppearance( &_this->Alarms.ConfirmFireButton, EwGetAutoObject( 
      &AppNormalPushButton, WidgetSetPushButtonConfig ));
    }
  }

  if ( CoreGroup_OnGetEnabled((CoreGroup)&_this->Alarms.AcknowledgeFireButton ))
  {
    if ( _this->Alarms.AcknowledgeFireButton.Appearance == EwGetAutoObject( &AppNormalPushButton, 
        WidgetSetPushButtonConfig ))
    {
      WidgetSetPushButton_OnSetAppearance( &_this->Alarms.AcknowledgeFireButton, 
      EwGetAutoObject( &AppFocusedPushButton, WidgetSetPushButtonConfig ));
    }
    else
      WidgetSetPushButton_OnSetAppearance( &_this->Alarms.AcknowledgeFireButton, 
      EwGetAutoObject( &AppNormalPushButton, WidgetSetPushButtonConfig ));
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onAcknowldegeSwitch( AppApplication _this, XObject sender )
{
  AppButtonState conf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  conf = EwCastObject( _this->SwitchAcknowledgeEvent.Context, AppButtonState );

  if ( conf->on )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.AcknowledgeFireButton, 1 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Alarms.AcknowledgeFireButton, 0 );
  }

  CoreGroup_InvalidateViewState((CoreGroup)&_this->SilenceButton );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onSafeState( AppApplication _this, XObject sender )
{
  AppBoolean b;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  b = EwCastObject( _this->SafeStateEventHandler.Context, AppBoolean );

  if ( b->State )
  {
    ViewsWallpaper_OnSetVisible( &_this->HazardWallpaper, 1 );
    ViewsImage_OnSetVisible( &_this->Alarms.NotOperationalBitmap, 1 );
    ViewsText_OnSetVisible( &_this->Alarms.NotOperationalText, 1 );
    ViewsImage_OnSetVisible( &_this->Alarms.LogoImage, 0 );
    ViewsRectangle_OnSetVisible( &_this->Seperator, 0 );
    AppButton_OnSetElevation( &_this->LogOnButton, 10 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->LogOnButton, 0 );
    ViewsText_OnSetString( &_this->TabButtonPull.SelectionText, EwLoadString( &_Const004C 
    ));
    AppLevelAccess_OnSetAccessLevel( &_this->LevelAccess, 1 );
  }
  else
  {
    ViewsWallpaper_OnSetVisible( &_this->HazardWallpaper, 0 );
    ViewsImage_OnSetVisible( &_this->Alarms.NotOperationalBitmap, 0 );
    ViewsText_OnSetVisible( &_this->Alarms.NotOperationalText, 0 );
    ViewsImage_OnSetVisible( &_this->Alarms.LogoImage, 1 );
    ViewsRectangle_OnSetVisible( &_this->Seperator, 1 );
    AppButton_OnSetElevation( &_this->LogOnButton, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->LogOnButton, 1 );
    CoreGroup_InvalidateViewState((CoreGroup)&_this->TabButtonPull );
  }
}

/* 'C' function for method : 'App::Application.Function1()' */
void AppApplication_Function1( AppApplication _this, XObject sender )
{
  AppApplication_ButtonFunc( _this, 1, sender, 0 );
}

/* 'C' function for method : 'App::Application.Function2()' */
void AppApplication_Function2( AppApplication _this, XObject sender )
{
  AppApplication_ButtonFunc( _this, 1, sender, 1 );
}

/* 'C' function for method : 'App::Application.Function1off()' */
void AppApplication_Function1off( AppApplication _this, XObject sender )
{
  AppApplication_ButtonFunc( _this, 0, sender, 0 );
}

/* 'C' function for method : 'App::Application.Function2off()' */
void AppApplication_Function2off( AppApplication _this, XObject sender )
{
  AppApplication_ButtonFunc( _this, 0, sender, 1 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppApplication_onEvent3( AppApplication _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppTabButtonPull_SetChoice( &_this->TabButtonPull, EwLoadString( &_Const0036 ));
}

/* 'C' function for method : 'App::Application.ButtonFunc()' */
void AppApplication_ButtonFunc( AppApplication _this, XBool pressed, XObject sender, 
  XInt32 chan )
{
  AppUserButton b;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  b = EwCastObject( sender, AppUserButton );

  if ( b != 0 )
  {
    XBool state;
    {
      Command cmd;
      cmd.int0 = chan;
      cmd.int1 = pressed;
      Command0( CMD_FUNCTION_BUTTON, &cmd );

      state =  cmd.int1;
    }

    if ( state )
    {
      ViewsFillPath_OnSetColor( &b->FillPath, _Const000B );
    }
    else
    {
      ViewsFillPath_OnSetColor( &b->FillPath, _Const004D );
    }
  }
}

/* Default onget method for the property 'SelectedTab' */
XString AppApplication_OnGetSelectedTab( AppApplication _this )
{
  return _this->SelectedTab;
}

/* Default onset method for the property 'SelectedTab' */
void AppApplication_OnSetSelectedTab( AppApplication _this, XString value )
{
  EwRetainString( &_this->SelectedTab, value );
}

/* Variants derived from the class : 'App::Application' */
EW_DEFINE_CLASS_VARIANTS( AppApplication )
EW_END_OF_CLASS_VARIANTS( AppApplication )

/* Virtual Method Table (VMT) for the class : 'App::Application' */
EW_DEFINE_CLASS( AppApplication, CoreRoot, "App::Application" )
  CoreRectView_initLayoutContext,
  CoreRoot_GetRoot,
  CoreRoot_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreRoot_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreRoot_OnSetFocus,
  CoreRoot_OnSetBuffered,
  CoreRoot_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreRoot_DispatchEvent,
  CoreRoot_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreRoot_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreRoot_RestackBehind,
  CoreRoot_RestackTop,
  CoreRoot_Restack,
  CoreGroup_Remove,
  CoreRoot_Add,
EW_END_OF_CLASS( AppApplication )

/* Initializer for the class 'App::TabButton' */
void AppTabButton__Init( AppTabButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->TabBackground, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->Text1, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTabButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)_this, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( _this, _Const000F );
  CoreView_OnSetLayout((CoreView)&_this->TabBackground, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TabBackground, _Const004E );
  ViewsRectangle_OnSetColorBL( &_this->TabBackground, _Const004F );
  ViewsRectangle_OnSetColorBR( &_this->TabBackground, _Const004F );
  ViewsRectangle_OnSetColorTR( &_this->TabBackground, _Const004F );
  ViewsRectangle_OnSetColorTL( &_this->TabBackground, _Const004F );
  ViewsRectangle_OnSetColor( &_this->TabBackground, _Const004F );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const000F );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0050 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0051 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0051 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0050 );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0053 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0054 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0055 );
  EwRetainString( &_this->Text, EwLoadString( &_Const0056 ));
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToLeft | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0057 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0058 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const0059 ));
  ViewsText_OnSetColor( &_this->Text2, _Const005A );
  CoreRectView__OnSetBounds( &_this->Text1, _Const005B );
  ViewsAttrText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->Text1, 0 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet1, _Const000E );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet1, _Const005C );
  CoreTimer_OnSetPeriod( &_this->Timer, 400 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TabBackground ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  _this->TouchHandler.OnLeave = EwNullSlot;
  _this->TouchHandler.OnRelease = EwNullSlot;
  _this->TouchHandler.OnPress = EwNewSlot( _this, AppTabButton_OnPress );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &AppFontVerdana16, ResourcesFont 
  ));
  ViewsAttrText_OnSetAttrSet( &_this->Text1, &_this->AttrSet1 );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet1, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet1, EwLoadResource( &AppFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet1, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppTabButton_TimerSlot );
}

/* Re-Initializer for the class 'App::TabButton' */
void AppTabButton__ReInit( AppTabButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->TabBackground );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->Text2 );
  ViewsAttrText__ReInit( &_this->Text1 );
  GraphicsAttrSet__ReInit( &_this->AttrSet1 );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'App::TabButton' */
void AppTabButton__Done( AppTabButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTabButton );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->TabBackground );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->Text2 );
  ViewsAttrText__Done( &_this->Text1 );
  GraphicsAttrSet__Done( &_this->AttrSet1 );
  CoreTimer__Done( &_this->Timer );

  /* Release all used strings */
  EwReleaseString( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TabButton' */
void AppTabButton__Mark( AppTabButton _this )
{
  EwMarkObject( &_this->TabBackground );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->TouchHandler );
  EwMarkSlot( _this->OnActivate );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->Image );
  EwMarkRef( _this->Selected );
  EwMarkSlot( _this->OnDeactivate );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->AttrSet1 );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppTabButton_UpdateLayout( AppTabButton _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTabButton_UpdateViewState( AppTabButton _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsAttrText_OnSetString( &_this->Text1, _this->Text );
  ViewsImage_OnSetBitmap( &_this->Image, _this->Icon );

  if ( _this->NumberOf > 0 )
  {
    ViewsText_OnSetString( &_this->Text2, EwConcatString( EwConcatString( EwLoadString( 
    &_Const005D ), EwNewStringInt( _this->NumberOf, 0, 10 )), EwLoadString( &_Const005E 
    )));
  }
  else
  {
    ViewsText_OnSetString( &_this->Text2, 0 );
  }
}

/* 'C' function for method : 'App::TabButton.OnPress()' */
void AppTabButton_OnPress( AppTabButton _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsImage_OnSetVisible( &_this->Image, 1 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );

  if ( !EwCompString( EwOnGetString( _this->Selected ), _this->Text1.String ))
    return;

  app = EwCastObject( _this->Super3.Owner, AppApplication );
  AppApplication_PageDeselection( app );
  EwRetainString( &app->SelectedTab, _this->Text1.String );
  AppTabButton_OnSetpressed( _this, 1 );
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
}

/* 'C' function for method : 'App::TabButton.OnSetpressed()' */
void AppTabButton_OnSetpressed( AppTabButton _this, XBool value )
{
  XColor t;

  _this->pressed = value;
  t = _this->Bevel.ColorB;
  ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
  ViewsBevel_OnSetColorT( &_this->Bevel, t );
  t = _this->Bevel.ColorL;
  ViewsBevel_OnSetColorL( &_this->Bevel, _this->Bevel.ColorR );
  ViewsBevel_OnSetColorR( &_this->Bevel, t );

  if ( _this->pressed )
  {
    if ( !EwCompString( _this->Text, EwLoadString( &_Const0010 )) && ( _this->NumberOf 
        > 0 ))
    {
      ViewsRectangle_OnSetColorBL( &_this->TabBackground, _Const005F );
      ViewsRectangle_OnSetColorBR( &_this->TabBackground, _Const0060 );
      ViewsRectangle_OnSetColorTL( &_this->TabBackground, _Const005F );
      ViewsRectangle_OnSetColorTR( &_this->TabBackground, _Const005F );
    }
    else
    {
      ViewsRectangle_OnSetColorBL( &_this->TabBackground, _Const0061 );
      ViewsRectangle_OnSetColorBR( &_this->TabBackground, _Const0062 );
      ViewsRectangle_OnSetColorTL( &_this->TabBackground, _Const0061 );
      ViewsRectangle_OnSetColorTR( &_this->TabBackground, _Const0061 );
    }
  }
  else
  {
    ViewsRectangle_OnSetColorBL( &_this->TabBackground, _Const004F );
    ViewsRectangle_OnSetColorBR( &_this->TabBackground, _Const004F );
    ViewsRectangle_OnSetColorTL( &_this->TabBackground, _Const004F );
    ViewsRectangle_OnSetColorTR( &_this->TabBackground, _Const004F );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::TabButton.TimerSlot()' */
void AppTabButton_TimerSlot( AppTabButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsImage_OnSetVisible( &_this->Image, (XBool)!ViewsImage_OnGetVisible( &_this->Image 
  ));
}

/* Variants derived from the class : 'App::TabButton' */
EW_DEFINE_CLASS_VARIANTS( AppTabButton )
EW_END_OF_CLASS_VARIANTS( AppTabButton )

/* Virtual Method Table (VMT) for the class : 'App::TabButton' */
EW_DEFINE_CLASS( AppTabButton, CoreGroup, "App::TabButton" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppTabButton_UpdateLayout,
  AppTabButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTabButton )

/* Bitmap resource : 'App::AlertBitmap' */
EW_DEFINE_BITMAP_RES( AppAlertBitmap )
  EW_BITMAP_FRAMES( AppAlertBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 27, 0 )
    EW_BITMAP_FRAME( 5, 15, 7, 11, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppAlertBitmap, Default )               /* ratio 26.30 % */
    0xAB418700, 0x1504A3D6, 0xF00CDB34, 0x410FA290, 0x1CF82A0F, 0xF1189442, 0x1689C561,
    0xC8CC6A29, 0x8BC7A311, 0x147E3720, 0x4823B219, 0x220D0C85, 0x9AACF614, 0xDE5C178F,
    0x03900B44, 0x369A3FCA, 0xB9ACDE71, 0x9D4F2733, 0xF50A7F40, 0xD1A7B449, 0x1E9145A0,
    0x2934BA1D, 0xDC5B1753, 0xB4A8A348, 0x4EAB532A, 0x8ADD36B3, 0xAFD5EB95, 0x98F00F45,
    0xD4AA0F92, 0x7AC168AE, 0xA6A029B5, 0xEE651DBF, 0x2681F314, 0x3501B08F, 0xBAD5A5FB,
    0x2D0B6B77, 0xD29DA66D, 0xDF4B2C25, 0x42F16AC3, 0x18AB57E9, 0x22FF25B3, 0x0FFC8803,
    0xD1652F00, 0x11D01088, 0xBE621F85, 0xCA9A756A, 0xE50B4C15, 0xE0CC3C00, 0xED79F621,
    0xEC641CD6, 0x593CA31C, 0x42DA6D32, 0xD5F1F0D6, 0xB95C35BA, 0xBB3369A7, 0x62868DB6,
    0x6B93A1BD, 0x0DA59165, 0xA3B6DBB5, 0x6601AE57, 0xCADEB2CE, 0x665F1DFF, 0xE80D5B6D,
    0x218B6995, 0x7613C924, 0x750545D0, 0x1F67E542, 0xDE057E3F, 0x88B023F7, 0xE73AAB94,
    0x3304EB5D, 0xF0281228, 0x192785B5, 0x83BCED3A, 0x60420381, 0x7D7E4F21, 0x15C41035,
    0x210838F3, 0x3849D983, 0xB4EB398F, 0x1C8001A3, 0x2888964A, 0xA141DCAD, 0x910C0F56,
    0x80863C45, 0x291E8AB2, 0x128188AE, 0xE233A05F, 0xD1EA2D56, 0x063880A1, 0xFA3E4008,
    0x090073EC, 0xCDC19C53, 0x10D93A8C, 0x00CA1D06, 0x7F1B8468, 0x4F2442E8, 0x86614822,
    0x88F0F837, 0x623A8DC0, 0xC8304B09, 0x4DA4F140, 0x08B1F058, 0x819E002A, 0x7C992548,
    0xBE2B4FF9, 0x96053318, 0x23A74A70, 0xC1F46C11, 0x5C7A8CCB, 0x00218A32, 0x1E220222,
    0xC6A10633, 0x99C4BF1E, 0x4E3AA1A3, 0x2D380DC3, 0x1483B014, 0x49C7E4FB, 0x0190BA2C,
    0x0CBB2A60, 0x9B7E4573, 0x368D0675, 0xE880C0DE, 0xB6D272A8, 0x549822C6, 0xCC2F9F92,
    0x80042348, 0x8DA354CA, 0x8999F90D, 0x9687A926, 0xED8E6BAA, 0x04CF23C4, 0x85B11412,
    0x7381AD3B, 0x00203A4E, 0xF13BCEB8, 0x041AD054, 0x8F016844, 0x63C0EE3A, 0xEE59AE01,
    0x95AE6D9A, 0x2CCA9249, 0xC0A5F46E, 0xE3D8550F, 0x6002B9CF, 0x7DB0EC19, 0x2C0A5235,
    0xAF2B6073, 0x07B9B4B6, 0xAC580A9F, 0x27574D61, 0x36469154, 0xC5D0C288, 0x6574D01B,
    0x68681542, 0x063EE3D3, 0xB6EDCBCC, 0x0B996310, 0xD11CCE32, 0x74470555, 0xFEB9CEB1,
    0x006BBBA4, 0x8631381E, 0x32CD5D38, 0x384D328C, 0x2CBD311C, 0x1CC4DC3F, 0x55D2CC83,
    0xB27C931D, 0xE0F73D48, 0x0D9540B3, 0x29C9C201, 0xC4757480, 0xA2E47F1B, 0x432DD1F2,
    0xE5388DAC, 0x59162098, 0xA9D71D5D, 0x0A396A67, 0x88DE3569, 0x0FD202B3, 0x6572BD73,
    0x88C79474, 0xA2306D9A, 0xA75E24C9, 0xF180349D, 0x03CF53D0, 0x45E12417, 0x604DF93A,
    0xB8ED16C4, 0x123CCF13, 0xDAF5DDA8, 0x09BC3F80, 0x9194BA2C, 0xD0AA24DF, 0x5FDF86D2,
    0x3F78CE37, 0x43100F90, 0xD33C7017, 0xB0590AD7, 0x047C8D51, 0xE079EE30, 0x0CE30710,
    0xA5F43F35, 0x18CF324B, 0xACDFF9F1, 0x803A0E3B, 0x0AF2948C, 0x68C62F1D, 0xA85D1201,
    0xAEEAE353, 0x00101657, 0x00000000

  EW_BITMAPS_TABLE( AppAlertBitmap )
    EW_BITMAP( AppAlertBitmap, Default )
EW_END_OF_BITMAP_RES( AppAlertBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::AlertBitmap' */
EW_RES_WITHOUT_VARIANTS( AppAlertBitmap )

/* Initializer for the class 'App::AlarmRowItem' */
void AppAlarmRowItem__Init( AppAlarmRowItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->OrderPos, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAlarmRowItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0063 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0063 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const004D );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0064 );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0065 ));
  ViewsText_OnSetColor( &_this->Text, _Const0066 );
  CoreView_OnSetLayout((CoreView)&_this->OrderPos, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->OrderPos, _Const0067 );
  ViewsText_OnSetString( &_this->OrderPos, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->OrderPos, _Const0066 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const0069 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const0066 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const006B );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->TimeText, _Const0066 );
  CoreTimer_OnSetPeriod( &_this->Timer, 600 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Image1, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  );
  CoreRectView__OnSetBounds( &_this->Image1, _Const006D );
  ViewsImage_OnSetAlignment( &_this->Image1, ViewsImageAlignmentAlignHorzCenter 
  | ViewsImageAlignmentAlignVertCenter );
  CoreView_OnSetLayout((CoreView)&_this->ChannelImage, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const006E );
  CoreRectView__OnSetBounds( &_this->Image, _Const006E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OrderPos ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->OrderPos, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppAlarmRowItem_Trigger );
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppSilencedBitmap, ResourcesBitmap 
  ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'App::AlarmRowItem' */
void AppAlarmRowItem__ReInit( AppAlarmRowItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->OrderPos );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->TimeText );
  CoreTimer__ReInit( &_this->Timer );
  ViewsImage__ReInit( &_this->Image1 );
  AppChannelImage__ReInit( &_this->ChannelImage );
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'App::AlarmRowItem' */
void AppAlarmRowItem__Done( AppAlarmRowItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAlarmRowItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->OrderPos );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->TimeText );
  CoreTimer__Done( &_this->Timer );
  ViewsImage__Done( &_this->Image1 );
  AppChannelImage__Done( &_this->ChannelImage );
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AlarmRowItem' */
void AppAlarmRowItem__Mark( AppAlarmRowItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->OrderPos );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->ChannelImage );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppAlarmRowItem_UpdateLayout( AppAlarmRowItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppAlarmRowItem_UpdateViewState( AppAlarmRowItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->OrderPos, AppLibClass_Order( EwGetAutoObject( &AppLib, 
  AppLibClass ), _this->OrderPosition ));
}

/* 'C' function for method : 'App::AlarmRowItem.Trigger()' */
void AppAlarmRowItem_Trigger( AppAlarmRowItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetVisible( &_this->OrderPos, (XBool)!ViewsText_OnGetVisible( &_this->OrderPos 
  ));
}

/* Variants derived from the class : 'App::AlarmRowItem' */
EW_DEFINE_CLASS_VARIANTS( AppAlarmRowItem )
EW_END_OF_CLASS_VARIANTS( AppAlarmRowItem )

/* Virtual Method Table (VMT) for the class : 'App::AlarmRowItem' */
EW_DEFINE_CLASS( AppAlarmRowItem, CoreGroup, "App::AlarmRowItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppAlarmRowItem_UpdateLayout,
  AppAlarmRowItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAlarmRowItem )

/* Bitmap resource : 'App::FireAlarmBitmap' */
EW_DEFINE_BITMAP_RES( AppFireAlarmBitmap )
  EW_BITMAP_FRAMES( AppFireAlarmBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppFireAlarmBitmap, Default )           /* ratio 28.32 % */
    0x186DDB00, 0x89204011, 0xB4C3060E, 0xDAE240E3, 0x1EFE1242, 0x914893FE, 0x158B44E1,
    0x98D45C49, 0x8EC7A371, 0xE48A3120, 0xC963F238, 0x3DF82490, 0x8F3066E4, 0x620005C1,
    0x82385802, 0x0F5743C1, 0x4934A1F7, 0x9FCF27B2, 0x1C9E833B, 0x516853EA, 0x961EFDA2,
    0xE6816832, 0x892A879D, 0x746A9502, 0x56ABD1EA, 0x1A3556B3, 0x46090371, 0xED05B30F,
    0xD52B4250, 0x924158B3, 0x5DB6B89D, 0xDD65B7DB, 0x36CB85C6, 0x24B35A2E, 0x27CC3DA2,
    0x562A5F11, 0x1385FAFF, 0xB9DCD817, 0x3598FB7F, 0x52CF77FB, 0x86F07FA6, 0x194BC128,
    0x811307A4, 0xAC0B81BF, 0xCF671D6E, 0x1E7F3AFD, 0xE8B41A1D, 0x39E2FFD2, 0x289952A1,
    0xE2FE92DF, 0xBB47FBC5, 0xB5DBEDB6, 0xA7FBF5FB, 0x7FAF978F, 0x690072EF, 0xDAE3169D,
    0x2B71867E, 0xF6BCCE5F, 0x26CC653E, 0x359E265E, 0xD8E6ECF6, 0x379BFB6B, 0x2DBC9FEF,
    0x9C77A861, 0x6D0DC687, 0x67D3D9DD, 0x8E86F7A7, 0x82FAA978, 0xEC5C430D, 0x8B65E218,
    0xF6DB69F9, 0x7F79FACF, 0x4F83F9CC, 0x7145A93E, 0xC4EF7505, 0xF77F4380, 0x83DEA3DC,
    0xCEA685D9, 0x00A4EE3F, 0xA5C57BC3, 0xC009C1F5, 0x3FC390C9, 0xC6C19CF3, 0x42C8F93F,
    0xE8FA6D0B, 0xE6395813, 0x0BC27850, 0x45C3C994, 0xF8D61078, 0x809D3DE0, 0x6B47E182,
    0x198603C9, 0x8A73E0FF, 0x931D882A, 0x28C8620C, 0xAF2B2413, 0x1A063880, 0x83770175,
    0xA2E2240F, 0x20F63FCB, 0x5C8C48C2, 0x97E36188, 0x8F07A1E9, 0xE8EC4D11, 0x802E09CE,
    0x551C46C8, 0x8A9BC95E, 0xCBD3E9D9, 0x20AE142F, 0x3CF39443, 0x6097A5C9, 0x3E9D89F6,
    0xE3B314C3, 0xA70DC14E, 0xA4BC2E4F, 0xC0371FA7, 0x7503F0E1, 0xA7E9F232, 0xB800FE8D,
    0x6CED7F9C, 0x6D3D1D48, 0x165DE1C8, 0x2308B85F, 0x43E16B45, 0xA66129CA, 0x4B6A4E93,
    0xA4E7B144, 0x8973DE36, 0x7AA98126, 0x7020A61B, 0xFE4595B8, 0x810F96DD, 0x8C12FCFA,
    0x21785877, 0x18F5661D, 0xFC6D08A2, 0xAFDCD3F0, 0x49D2658C, 0x14761F87, 0xDA35AC29,
    0x8823C8B3, 0xADCD3345, 0x2B944DB2, 0x5766BD75, 0x35F26F29, 0x533C68FA, 0xA2CFF168,
    0x8F9B41EA, 0xEB50B82D, 0x42D8975D, 0x92238F68, 0x6DADFB74, 0x977AEAB8, 0x03C0FE44,
    0xBCFE9F4F, 0x543C7073, 0x74CEDBB8, 0xC60168F2, 0x820CF53F, 0x2484C508, 0x5018A202,
    0x9A4263BA, 0xAF9B5D12, 0xFBF6FB7A, 0x8700745C, 0xBBB8CEDB, 0x878EF46A, 0x06B19A20,
    0xC2C0AD89, 0xDEE683A0, 0x56778F83, 0xC8A3B170, 0x32576723, 0x02E4B789, 0x0B2B6CEE,
    0xEE65219C, 0x960350B4, 0x4F57F6FC, 0xFB86013D, 0x50410E8E, 0x450F8F07, 0x6F1DC7F4,
    0x4A6905F5, 0xDD43412A, 0xDA408FAF, 0xCB324FB6, 0x9472D944, 0xE300A0EE, 0x274EA399,
    0x16533BD1, 0xFA72E479, 0xA0CC6310, 0x0F545B76, 0xCDAB1721, 0xB8EE7F76, 0x12D46D93,
    0x158503C5, 0x82C09214, 0x60AC2399, 0x162A8A36, 0x613EB07C, 0x1F0773D3, 0xD8CC7E14,
    0x1730A327, 0x836FC4F1, 0x496469A4, 0x6F395850, 0x8F76DE81, 0x36DF98B4, 0x9703EA74,
    0x58148F14, 0x3BCEF7F4, 0x8D93F1CC, 0xD0D9C036, 0x5C939603, 0xBB2E2BE2, 0x3B977A0C,
    0xC343BFAF, 0x29A7A10E, 0xDDB6CEE0, 0x12D2FB9E, 0x3BE3A8E1, 0x51E1083B, 0xE140493C,
    0xEDCB7775, 0xE2340CE3, 0xCD6410A2, 0x33B3E1FD, 0xCEE396F4, 0xB71E497D, 0xB5F63F10,
    0xFFFF7F69, 0xF5D709FD, 0xB9317630, 0x6A0CA880, 0x96B9CDA0, 0xE0398F43, 0xD0254281,
    0x0788F09F, 0x8FD9F13E, 0x9FDBF93A, 0x3DB718ED, 0x370B94CA, 0x27C4D8F7, 0xE632723C,
    0x134583F4, 0x520A4111, 0x40278483, 0x03CE6B86, 0x98070660, 0xB0020E3D, 0xD16C272A,
    0x31B3DA7A, 0x0E07AD28, 0x65218875, 0x240411E0, 0x9009D0B0, 0xB3069F09, 0x404988F7,
    0xB4474C86, 0x469B05D7, 0xE2C51203, 0x8D41CB44, 0x8FB4D2C7, 0x8B2FB067, 0x0B0771C9,
    0x9DC42066, 0xDD1B83F0, 0x005F8DB8, 0x7C6F0FC3, 0xAA008143, 0x53D0E158, 0x905D7EC3,
    0x07B16554, 0x9CB79425, 0x7C89413C, 0x3ECC442E, 0xF99F1398, 0x2B0423B4, 0xCE54A3BC,
    0xD1A1C698, 0x0358380D, 0x20DA1A11, 0xE0A90A2A, 0xC668FB4E, 0xC8A72E33, 0x1F25ACA2,
    0x259D93CC, 0x7A112568, 0xE70EE1C8, 0xF072CDD9, 0x294CBF01, 0xA48C884D, 0xE11621D8,
    0xA194301D, 0x0DB2D03F, 0x46F1BA3F, 0x69E0B877, 0x195FF425, 0x1A8EF22D, 0x047E20F0,
    0x5C2AC7C2, 0x657613F1, 0x10C03781, 0x81EC7F46, 0xA3E4DAB3, 0x25848895, 0xCB49651A,
    0x5FE3487D, 0x1FC7A9D8, 0xE8188106, 0x6F83B270, 0x642BC7CB, 0x945018C1, 0x20EE2AAE,
    0xB412E581, 0x0A8DB8A0, 0x66DC8B9D, 0x9F79663D, 0x0F27ACC5, 0x7467287E, 0x9FC9D984,
    0xFF8803D0, 0x401E07A0, 0x5A86D057, 0xA4FB9624, 0x1720E3A5, 0x07F5C511, 0xDB69CF40,
    0x43698323, 0x8006BCBC, 0x120238F0, 0x1D0331DF, 0xF986F30C, 0x36ACA34C, 0x0C1E1901,
    0x58443201, 0xB0AA7782, 0xA1121785, 0x87DD2FA5, 0xA199CEB7, 0x190430A4, 0x4A287150,
    0x58959A87, 0x44A08D06, 0xD24D0701, 0x087790F0, 0xCA08A4F5, 0x8A5C3C1B, 0xF54EAAD3,
    0x2AB557A5, 0xC648C555, 0x104578A0, 0x5280A934, 0xA78FA21E, 0x449F159A, 0x0C32996D,
    0x0C7601C2, 0x41060044, 0xF0E45788, 0xA43C6010, 0x2B4D671E, 0x0ECA4F5A, 0x20C21083,
    0x41081018, 0x00000202, 0x00000000

  EW_BITMAPS_TABLE( AppFireAlarmBitmap )
    EW_BITMAP( AppFireAlarmBitmap, Default )
EW_END_OF_BITMAP_RES( AppFireAlarmBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::FireAlarmBitmap' */
EW_RES_WITHOUT_VARIANTS( AppFireAlarmBitmap )

/* Initializer for the class 'App::Button' */
void AppButton__Init( AppButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->StrokePath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Greyed, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const006F );
  CoreView_OnSetLayout((CoreView)&_this->FillPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const006F );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const004D );
  ViewsFillPath_OnSetQuality( &_this->FillPath, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToLeft | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0057 );
  EwRetainString( &_this->ButtonText, EwLoadString( &_Const0070 ));
  CoreView_OnSetLayout((CoreView)&_this->AttrText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const0071 );
  ViewsAttrText_OnSetAlignment( &_this->AttrText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const0072 ));
  GraphicsAttrSet_OnSetColor2( &_this->AttrSet, _Const000E );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const0073 );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->StrokePath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->StrokePath, _Const006F );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _Const0074 );
  ViewsStrokePath_OnSetQuality( &_this->StrokePath, 1 );
  ViewsStrokePath_OnSetJoinPoints( &_this->StrokePath, GraphicsPathJoinRound );
  ViewsStrokePath_OnSetWidth( &_this->StrokePath, 2.000000f );
  _this->Radius = 5;
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0075 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0076 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0055 );
  CoreView_OnSetLayout((CoreView)&_this->Greyed, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Greyed, _Const006F );
  ViewsRectangle_OnSetColor( &_this->Greyed, _Const0077 );
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StrokePath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Greyed ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path1 );
  ViewsImage_OnSetBitmap( &_this->Image, 0 );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, &_this->AttrSet );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &SteelFontArial12, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &AppFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &AppFontVerdanaProSemiBold18, 
  ResourcesFont ));
  ViewsStrokePath_OnSetPath( &_this->StrokePath, &_this->Path1 );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppButton_Release );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppButton_Touch );

  /* Call the user defined constructor */
  AppButton_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Button' */
void AppButton__ReInit( AppButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  ViewsImage__ReInit( &_this->Image );
  ViewsAttrText__ReInit( &_this->AttrText );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  ViewsStrokePath__ReInit( &_this->StrokePath );
  GraphicsPath__ReInit( &_this->Path1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsRectangle__ReInit( &_this->Greyed );
}

/* Finalizer method for the class 'App::Button' */
void AppButton__Done( AppButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppButton );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  ViewsImage__Done( &_this->Image );
  ViewsAttrText__Done( &_this->AttrText );
  GraphicsAttrSet__Done( &_this->AttrSet );
  ViewsStrokePath__Done( &_this->StrokePath );
  GraphicsPath__Done( &_this->Path1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsRectangle__Done( &_this->Greyed );

  /* Release all used strings */
  EwReleaseString( &_this->ButtonText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Button' */
void AppButton__Mark( AppButton _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->Image );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->StrokePath );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkSlot( _this->ActionPress );
  EwMarkObject( &_this->Greyed );
  EwMarkSlot( _this->ActionRelease );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppButton_UpdateLayout( AppButton _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)_this->Radius, 0.000000f );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)(( EwGetRectH( _this->Super2.Bounds ) - 3 ) 
  - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 0.000000f, 90.000000f, 
  5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)(( EwGetRectH( 
  _this->Super2.Bounds ) - 3 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  (XFloat)_this->Radius, (XFloat)_this->Radius, 180.000000f, 270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
  return;
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppButton_UpdateViewState( AppButton _this, XSet aState )
{
  AppApplication app;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( _this->Elevation > EwCastObject( CoreView__GetRoot( _this ), AppApplication 
        )->LevelAccess.AccessLevel )
    {
      ViewsRectangle_OnSetVisible( &_this->Greyed, 1 );
    }
    else
    {
      ViewsRectangle_OnSetVisible( &_this->Greyed, 0 );
    }
  }

  ViewsImage_OnSetBitmap( &_this->Image, _this->Icon );
  ViewsAttrText_OnSetString( &_this->AttrText, _this->ButtonText );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppButton_Init( AppButton _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Translate( &_this->Path1, 1.000000f, 1.000000f );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)_this->Radius, 0.000000f );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)(( EwGetRectH( _this->Super2.Bounds ) - 3 ) 
  - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 0.000000f, 90.000000f, 
  5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)(( EwGetRectH( 
  _this->Super2.Bounds ) - 3 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  (XFloat)_this->Radius, (XFloat)_this->Radius, 180.000000f, 270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
  return;
}

/* 'C' function for method : 'App::Button.Touch()' */
void AppButton_Touch( AppButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsFillPath_OnSetColor( &_this->FillPath, _Const000B );

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= _this->Elevation )
  {
    EwPostSignal( _this->ActionPress, ((XObject)_this ));
  }
  else
  {
    AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    ), _this->Elevation );
  }
}

/* 'C' function for method : 'App::Button.Release()' */
void AppButton_Release( AppButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsFillPath_OnSetColor( &_this->FillPath, _Const004D );
  EwPostSignal( _this->ActionRelease, ((XObject)_this ));
}

/* 'C' function for method : 'App::Button.OnSetElevation()' */
void AppButton_OnSetElevation( AppButton _this, XInt8 value )
{
  if ( _this->Elevation == value )
    return;

  _this->Elevation = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'App::Button' */
EW_DEFINE_CLASS_VARIANTS( AppButton )
EW_END_OF_CLASS_VARIANTS( AppButton )

/* Virtual Method Table (VMT) for the class : 'App::Button' */
EW_DEFINE_CLASS( AppButton, CoreGroup, "App::Button" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppButton_UpdateLayout,
  AppButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppButton )

/* Bitmap resource : 'App::KeyBitmap' */
EW_DEFINE_BITMAP_RES( AppKeyBitmap )
  EW_BITMAP_FRAMES( AppKeyBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppKeyBitmap, Default )                 /* ratio 17.00 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0xB74553F1, 0xC4ABFDCE, 0x54BFDCCB, 0xCBFDD2C8, 0xBFDDAD35, 0xFDDCD962, 0xDE0DE66B,
    0xE6E269BF, 0x4E168BFD, 0xDD663FDE, 0x66BB0B5C, 0x763416FA, 0x43154AFF, 0x2ED24FF7,
    0x3F9395CD, 0xCC64F0ED, 0xF589BA38, 0x39A5D242, 0xB0E03396, 0x87A3BF6D, 0xEFBF9FEF,
    0x1F8BC305, 0xF97CBE4F, 0xA9FFE87E, 0x76EF6783, 0x88C8CFEE, 0x59E5C233, 0x8DE85DF9,
    0xBCCA2ED9, 0x7C3FF5BA, 0xDE63ECF9, 0x68160480, 0xCDE181E0, 0xFF3E4F63, 0x700D32EC,
    0xDF9659F6, 0x32F49A4B, 0x6618820E, 0xFB86E1A8, 0x224FF874, 0xE12390B5, 0xB2661188,
    0x6A1B37CB, 0xB580A008, 0x305C033C, 0x2296A8D7, 0xF3F9DF86, 0x84B3220F, 0x3C746243,
    0x8A22646E, 0x4D782233, 0xE4BDB239, 0x04F73C8E, 0x378D6049, 0x84E3B8E6, 0xA3F3FE3D,
    0x535A0792, 0xB1503D4E, 0xE6952483, 0x8EA38931, 0xD6B98611, 0x68125C94, 0x692F9625,
    0xE3996499, 0x98A4E979, 0x2647E650, 0x999DE59B, 0x867496E5, 0x519826E7, 0x9CD6C9C2,
    0x0C378A79, 0x5365506F, 0x16813C4E, 0x8C93E7B4, 0x9E6805EA, 0x2583A4DF, 0xF4C5C866,
    0xC4FF7508, 0x74830F53, 0xA7E7EA2E, 0xA74A3D31, 0xB840D42F, 0xC8E43596, 0x5F7829D6,
    0x98E7DA36, 0x502A2627, 0x62296C76, 0xC0E9678B, 0x9E9B26B3, 0x62A71ABE, 0xCFC9B2A2,
    0x02E0FFB0, 0x30FF3A8D, 0xFF394B72, 0x32D9E74C, 0x6898C8DC, 0x4A82BFAF, 0x0AB2B055,
    0xFF3F21D4, 0xB66DCB0C, 0xA6FAB28A, 0x4552AEAF, 0xEECC2EC9, 0xECB82C43, 0x770F0812,
    0xEE5A50FF, 0x428963BC, 0x80D0688C, 0xB2BB6883, 0x3FEEA3EA, 0xCEF368C7, 0x52F8983F,
    0x46E4B569, 0x9A2E48E8, 0x7827A931, 0xDB6390D7, 0xA7B4F13A, 0xE25CC5CF, 0xE93FE003,
    0x376493BC, 0x9E63D0E8, 0x4C26F49A, 0x830DC2EE, 0xFD7A1E17, 0x7D08D540, 0xEE824CFF,
    0x43049D3F, 0x68C2279C, 0xA230C9F6, 0x710C026D, 0x5FB67B32, 0x4285217D, 0x91E5B20C,
    0xBFC96D6C, 0xCA9DECA2, 0x34CCB105, 0x4D23465B, 0x2326D29E, 0x4E4AF5AC, 0x7A751C3B,
    0xF5558F4B, 0x9D865BC8, 0x435D88F5, 0x66D4902D, 0xD2763553, 0xB6DD9F65, 0x2B7B4E62,
    0x32CA931E, 0xA347F73B, 0x795A2314, 0xF729A31D, 0x53CEBFE0, 0x7DE5774F, 0x2FD4F392,
    0x795C06F9, 0x37BC8B20, 0x63658AE1, 0x25E4AA8E, 0x73C0CDB3, 0x3A4E0BCB, 0x9BB78F98,
    0x1D6F936A, 0xACCC2C21, 0x02C5DE63, 0xD2DC4E2A, 0xF56334B2, 0xF26B7678, 0x53A6D10B,
    0x9A7CE11E, 0x7B4EF3A1, 0x8F63C9E5, 0x3284FF3E, 0xBE51EBCC, 0xF9B20CC2, 0x349E6BF8,
    0x3A5A20E1, 0xACE251E3, 0x97CE3E19, 0xD080A1D7, 0x2A5AE37C, 0x99CB20C9, 0xF67B0567,
    0x6AC832CA, 0x056D8E63, 0x774F33BE, 0x3D4C1DC6, 0x72E08B55, 0xE7B9520E, 0x2BB23E07,
    0xBBDE1BF2, 0x3044DA0C, 0x97BD3344, 0xCC7EEFD4, 0x9F014E71, 0x686009C2, 0x10EA1C46,
    0x546CAAD9, 0x2A20710D, 0x4C53F368, 0x98F1C702, 0x3F302CC8, 0xB20640A8, 0xDB0E019E,
    0xF53DAC74, 0x0C9247B0, 0xAC719ED7, 0xD8C86443, 0x86703FDC, 0xEBCDFCBC, 0x0508F031,
    0x1162E660, 0x83F065FC, 0x5FD28C3F, 0x9E032214, 0xF21B2308, 0x97100430, 0xBCC4BBA8,
    0xE95F10A5, 0xA1860049, 0x27E04295, 0x22643688, 0xC552B055, 0x8A3144AE, 0x0E01913A,
    0x2BC1B143, 0x6C8B116A, 0xC706CA39, 0x0E2FC618, 0x00002024, 0x00000000

  EW_BITMAPS_TABLE( AppKeyBitmap )
    EW_BITMAP( AppKeyBitmap, Default )
EW_END_OF_BITMAP_RES( AppKeyBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::KeyBitmap' */
EW_RES_WITHOUT_VARIANTS( AppKeyBitmap )

/* Bitmap resource : 'App::SmokeBitmap' */
EW_DEFINE_BITMAP_RES( AppSmokeBitmap )
  EW_BITMAP_FRAMES( AppSmokeBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 6, 5, 24, 26, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSmokeBitmap, Default )               /* ratio 50.08 % */
    0x1C080100, 0xC1A0B048, 0x0E130883, 0x0D8660FC, 0xEC6B0D0A, 0x06C0C9C8, 0x6D0BAACF,
    0xD0C35CF0, 0x8C3C8F26, 0xEC81FA78, 0xC823D1C7, 0xB0F1146B, 0xA1912882, 0x63308543,
    0x33499CCA, 0x552A8AA1, 0x2340700C, 0x8A860C47, 0xE1C02CCE, 0x1D426FF3, 0x301AFF41,
    0x412FF4E2, 0x0CFF5827, 0xAFF5D298, 0x555FAA80, 0xDA9D46AF, 0x47D269F4, 0xE049FEA0,
    0x509FE8A3, 0x38F13FA2, 0x8EA6A0E3, 0x6B399B98, 0xB72B9DCA, 0x4F3819C3, 0x10AB764A,
    0x07BFCFA7, 0xED45107C, 0x001FEAE4, 0xF30CCF5C, 0x3198A6A2, 0x238DC580, 0x790C763F,
    0xB101E472, 0x405BFD8E, 0x0A3FD4A9, 0xB5E9FF47, 0x69AE978B, 0x30D537B9, 0xD47110C8,
    0x0A79BFD9, 0xEA34A545, 0xCD5B005F, 0x50164324, 0x053FD98B, 0x83FD5699, 0x3FD2A860,
    0x7F919ACC, 0x80EFF4FD, 0x75B65B28, 0x994DD349, 0x9BC40071, 0xD0B67927, 0x3B6B1FF7,
    0x383352A3, 0x87001E4D, 0xA4366733, 0xCE61468D, 0x1A81DF9F, 0x2B551F1D, 0xCE5B8072,
    0xF49A1386, 0x2A93C40F, 0x82D0A8FF, 0x00BE010B, 0x08243FC3, 0x9C534451, 0x7680C614,
    0xC3909CFF, 0x60ACFF0E, 0xC8293FE1, 0x1D3FC330, 0x72C61164, 0xDD474986, 0x32B4043F,
    0x247B514C, 0xD1465A22, 0x06C7179C, 0x5E74C9E5, 0xA1B8177A, 0xD41236C7, 0x083FC811,
    0x3FC90210, 0x4BD2A402, 0xF7EC1064, 0xF03A098F, 0x3A0E2110, 0x1BC173FC, 0x8AF8307A,
    0x3340B96D, 0x099665A2, 0xFF328B30, 0x6D492030, 0x06E1901A, 0x28221A86, 0x465D1184,
    0xF788CA22, 0x20C10625, 0xE3693892, 0x18C22E36, 0xADE240E3, 0x088EE397, 0x9008F20C,
    0x5C72ECA8, 0x407CFF66, 0xCE1816C5, 0x7C514340, 0x625D78A8, 0x8B227C08, 0xF1DC6C93,
    0x3047088F, 0x320C6181, 0x5265F974, 0x6472788E, 0x107E4A0E, 0xDD9F1605, 0x58564841,
    0x324B300D, 0xE0550D66, 0x106CFF0B, 0xE2401A86, 0xD12E5F66, 0x8AE7070C, 0x5E234478,
    0xD28DDF8C, 0xFE7D7BDE, 0x53278049, 0x300AB016, 0x60B10608, 0x513C4A08, 0x823CB3D5,
    0x507F4B42, 0x0B601158, 0x453A142D, 0xB8AA8C16, 0x50A925C0, 0xCB6F2569, 0x2340E3FC,
    0x0715989D, 0xA1182351, 0x72E1B7C4, 0xAC1945D0, 0x740A3736, 0x697B4824, 0x82C9C7B5,
    0x24B77D8C, 0xFF8A4136, 0x698A34B0, 0x9AF13DA4, 0x12308002, 0x0EF12395, 0xD1318B00,
    0x1541E82E, 0xDF97DE88, 0x12187904, 0x6E040BA0, 0x5119C5F0, 0x00A432A1, 0xC0E970B4,
    0x99C89A22, 0x4A8256C7, 0x77051545, 0x2519B20C, 0x252BA8A6, 0xB866DEB7, 0x648903E1,
    0x21C1F052, 0xC0C5012C, 0xABA00AD6, 0xC89E2565, 0xDE1C1F9D, 0x704C44F5, 0x03D7A019,
    0x23E735B1, 0x5310AF90, 0x50FFA1E8, 0xA2C8AD6B, 0x990741A9, 0xD600368B, 0x31A5A2D2,
    0xC4308607, 0x3D0EA470, 0x1701C3FC, 0xA8254AFC, 0x06149B02, 0xE0541382, 0x3709F7AD,
    0x1D99F0E4, 0xC12DB148, 0xE0A9F21F, 0x0B0BAD02, 0xB02C8036, 0xADA0BC06, 0xD90962B8,
    0xD5EA1002, 0xF53B4235, 0xC95F97C4, 0x29094556, 0x8297F1FA, 0x4B42D7A2, 0x3770C941,
    0x4D2C49E5, 0xA9211E15, 0xC4E12697, 0x0D049566, 0x5CD32EC0, 0xBA6ED959, 0x09ABF046,
    0xE080F83B, 0x9CE04710, 0x9CA12414, 0x4AD22B4C, 0x2DCA301F, 0x80D81E05, 0x0761F69A,
    0x8BA9521A, 0xCE5A5081, 0x01DB2D80, 0x0A800F63, 0x392B7B2F, 0x6ED9A341, 0x7281396B,
    0x2B784587, 0x8D54EA9B, 0x1100166E, 0xCA3AAE89, 0x68966043, 0x7D0EAED1, 0x138E7188,
    0x4728589C, 0x0B390DA6, 0x4A21DC5A, 0x0004D082, 0x33AE8E03, 0x410A01A2, 0xD782825C,
    0x513E2024, 0xF425C451, 0x3013A713, 0x01D836C9, 0xF56AB741, 0x4A0C3405, 0xD0A21233,
    0xC3C81300, 0x4450F603, 0xF55E9C0E, 0x6F4326D8, 0x660BC071, 0x1296D200, 0x3047B715,
    0x79CA32C7, 0x90C607CD, 0x44B01486, 0xDB12C70E, 0x09B0088F, 0x4007F8E1, 0xA4528A4F,
    0x70A02526, 0xDE65C019, 0x821C0331, 0x4E02BC37, 0x5C7087C7, 0xC8E5029E, 0x0BB59843,
    0x80A3D27A, 0x94E67C1D, 0x5FB19529, 0x1BC3281A, 0x11A1E438, 0x650FA049, 0x564A62B9,
    0xAC3C0101, 0x0C5B7E0A, 0x3406FE85, 0x4A540BB4, 0xCCC2E45C, 0x206054C1, 0x8E8F19E2,
    0x245E7196, 0xC88756DA, 0x7A364EDC, 0x6E6599F4, 0xF254B267, 0x6C2D79D0, 0xB5EAD09C,
    0x41E0CF84, 0x9D820F36, 0x2BD3A2D1, 0x3BCFF4CB, 0x4648B915, 0xC080D1AE, 0xA1337168,
    0x30D09F0A, 0x95FBCB55, 0xD8963885, 0x978EDF5B, 0xC63238BC, 0x0159D039, 0x9550580B,
    0x7882F854, 0x901598A7, 0x714E0662, 0x3E4B8CC2, 0x526E5A94, 0x4A72B790, 0xB2E40A51,
    0xD9B68563, 0xC644E79C, 0x49395029, 0x00B1E449, 0x9205943F, 0x28C411C3, 0xCB20B413,
    0xBF5380A4, 0x482A84C1, 0xF57DB7E9, 0xE4BB8E90, 0x66D8D04C, 0x0BF815A1, 0x279A8F7C,
    0x0A400F37, 0x70F0F05C, 0xAAD9E389, 0x132F15DE, 0x4832CF00, 0x9EDC9252, 0xAD9D1908,
    0xE91924C8, 0xB0FE0287, 0x072A6388, 0x94989E01, 0x50A01465, 0x2ACBF65E, 0x6466B158,
    0xE608E01A, 0x25408808, 0x603FC612, 0xD0140FF9, 0xC1B606A0, 0xE57F52CF, 0x4DB2A854,
    0xD49D38A8, 0x2BA65F19, 0x32C6D52F, 0x2A04B00B, 0xA01966E8, 0x23A6293A, 0x014D6999,
    0x4549537A, 0x2AE95CE6, 0xBACCAF60, 0x55CA1E55, 0x80A8FF9A, 0xB075067B, 0x3F89165D,
    0x70E0AC9A, 0xA11FC10A, 0x2D8C665A, 0xBC6E6AE3, 0x92B156FA, 0x1D663215, 0xF9FB3EC9,
    0x4041B1CF, 0x282A66A0, 0xA9DA0E64, 0x2854F405, 0xBF28687B, 0x0ACD8A84, 0x0773685D,
    0x98F6006B, 0x25E41868, 0x43D91225, 0xF78E9941, 0x11D25046, 0x291CB6A4, 0x24A546BC,
    0x4410E4CB, 0x3EE97196, 0xC14C524F, 0xC9017400, 0x0281E4E4, 0x654BA550, 0x7165518A,
    0x4AF052C0, 0xE00D11CD, 0x1008C515, 0xD3C5C20B, 0x8FF62285, 0x2E452807, 0x6D56E478,
    0xE3A38B86, 0x153AAA15, 0x1579CEE7, 0xE4E39E0A, 0x2A373692, 0x0658FA8A, 0x48D5679F,
    0xC8D1584A, 0x008D8E47, 0xB7C598A1, 0x4E009408, 0x9692C94C, 0xC6B8C0FA, 0x7ACE2ED9,
    0x90168792, 0xA02A5F83, 0x4064C8A3, 0xB0B42C90, 0xD7F90619, 0x820AFE57, 0x2D4234B3,
    0x4F4B7029, 0x779766D5, 0xF6DCE5F5, 0x022CC57B, 0xFC5E8B94, 0x44A0938F, 0xAB82325E,
    0x80C2439B, 0xA218D8DB, 0xC7F1CEDA, 0x02F2050F, 0x54BD18EF, 0x7E13B1F1, 0xC359B1BC,
    0xFA20A634, 0x8C892C70, 0x68481C88, 0x401A1442, 0x61761985, 0x445A3293, 0xB510DA1A,
    0x945393F5, 0x215B6B0C, 0xD3B5B997, 0xA8092209, 0x74FCD517, 0xD44988F9, 0xD4329712,
    0x26329644, 0x629AB28A, 0x3EC20915, 0x7E74D9F7, 0xFE667661, 0xB9BFC64E, 0x0E30B815,
    0x7D0761DE, 0x323AE41C, 0x7C0F9090, 0x214E01A1, 0x67C9C9A8, 0x958C1797, 0xE3D41506,
    0x27F082B7, 0xEA067877, 0xD58622DA, 0xAE4FC8F1, 0x67875D83, 0xB34CA8B7, 0xD809B592,
    0xF800EF5D, 0xEF08115B, 0x3325D5C1, 0x54CBD663, 0x2A310A3C, 0xF65EBE94, 0x453DB72C,
    0xCA7BEF74, 0x2CF65F1C, 0xF9F3D193, 0xE908D48D, 0x06C2D7DA, 0xED940150, 0xD6A2886C,
    0xE3A6D8D3, 0x2BFAB1B7, 0x064E5161, 0xE84CA8D4, 0xFC5F4DF5, 0xFB566B32, 0x82F63883,
    0x933E6798, 0x2D89051C, 0xD981FC16, 0xD5BAB573, 0x19E74888, 0x00C4E1D3, 0xC4D88931,
    0x8CB1762A, 0x445A2C6D, 0x42C7C7F8, 0xEF57D526, 0x2B2C868F, 0x3AF93780, 0x5344431C,
    0x2BA4A5C7, 0x4E5A451A, 0x8FA95AE6, 0x03DDCB44, 0xCDB35114, 0x4F69AAC1, 0xD6C10113,
    0xC913354B, 0x33116B0B, 0xD8B2B14D, 0x0B3565BA, 0xB84B015B, 0x2D976BB6, 0x5F117F01,
    0x426E8498, 0x5CC6EA17, 0xF2A486E5, 0x8E08CBF2, 0xC23FCB50, 0x03DEE799, 0x46A1411F,
    0x0C276671, 0x09622A45, 0x27946229, 0x4789ED16, 0xA0401363, 0xA6ED886E, 0x8E7EEED2,
    0x11BACEC2, 0x1D4D5CEC, 0x35DD6F54, 0xAC155E31, 0xCD84CF85, 0xBA4CE7AC, 0x06956D32,
    0x57AAEFA3, 0x47138A6F, 0x3BAC3582, 0x354EA409, 0x7BD7D1BA, 0x0D20A3F4, 0x4E1DBAA9,
    0xF874EFE9, 0x7816D086, 0x6D6F1E4A, 0x4F2CCF35, 0xDC708006, 0xF4EAAC6B, 0x35BE34D0,
    0xBE4DB0F9, 0xE9E2538A, 0x19178674, 0x1A75215E, 0xAAF67B3C, 0x800E1400, 0x4FCB083E,
    0x6F4CBB87, 0x08808F07, 0x66F1A848, 0x128FF5D0, 0x010800F4, 0x5081C182, 0xF81B8350,
    0xB8630B6D, 0x3D16585E, 0x1D61AAA2, 0xBD6A2D58, 0x134F5E9D, 0x35EC38F1, 0x6D00367E,
    0x3A35336C, 0x0A37C6F2, 0xFE2B04D0, 0x9A158882, 0x52B060BC, 0x2A7D45F6, 0xD44A8CD4,
    0x8F78722C, 0x8A452A06, 0x0C418813, 0xDC7DC00D, 0x517A3117, 0x35807201, 0x2A07D00F,
    0x66480062, 0x6BA1D818, 0xB145068D, 0x500B3070, 0x0134E109, 0x50016625, 0xC01B0DE2,
    0x05207606, 0x021EF000, 0x60FF0000, 0x8278021B, 0x6D024000, 0xC00706D0, 0x06381E01,
    0x7906E018, 0x817C0CF0, 0x62501235, 0x911CC544, 0x45756022, 0x0C10AC00, 0x4A0AC224,
    0x84DF7125, 0x1F50A100, 0x81341815, 0x733E38F7, 0x0D21EE01, 0x6A1EE018, 0x90990110,
    0x00000F09, 0x000D40AA, 0x40BF0BF7, 0x24082100, 0x28826824, 0x18251A78, 0x82385F00,
    0x030AA0AA, 0xA85A8580, 0x07F07401, 0x7F611030, 0x061407A0, 0x4A90B208, 0xF45220DB,
    0xE0856240, 0x07A0130F, 0x2987E087, 0xF4CE0F52, 0x07E0130D, 0x930BA08B, 0x308808E3,
    0x04314B01, 0xD40BF000, 0x41870180, 0x0000120D, 0x010C40B0, 0x90C60A98, 0x0CC00000,
    0x580050CC, 0x186786A8, 0x13486686, 0x00000101, 0x00000000

  EW_BITMAPS_TABLE( AppSmokeBitmap )
    EW_BITMAP( AppSmokeBitmap, Default )
EW_END_OF_BITMAP_RES( AppSmokeBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SmokeBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSmokeBitmap )

/* Bitmap resource : 'App::MuteBitmap' */
EW_DEFINE_BITMAP_RES( AppMuteBitmap )
  EW_BITMAP_FRAMES( AppMuteBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppMuteBitmap, Default )                /* ratio 20.13 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0x98CAE271, 0xDBBE6B2F, 0x7198C9E1, 0xECAF3774, 0xBFDD6C34, 0xFDDCCA54, 0x71B969A3,
    0xEF99D7EB, 0x92FD7686, 0xFF7631D4, 0x57EBF1F4, 0x7335E050, 0xB235FEF6, 0xEC745B08,
    0xC78DB4E2, 0x5E4DA61C, 0xA5BDE7EF, 0x1AB7AB8D, 0x8ED7BA17, 0x47235388, 0x79B6D8DD,
    0xBAE91EFF, 0xF2BCBC7E, 0x19452AE4, 0x1F6FADC3, 0x9BD0E86F, 0xDAF7A381, 0x02F86953,
    0xF7CBBDCB, 0x7530130F, 0x1E6805C8, 0xE2BD2B7A, 0xECFB6A8C, 0xC873DF86, 0x5E9F4374,
    0xDA63109F, 0x73CD0582, 0xA0FF3F0F, 0x023B4CA2, 0x8121D79E, 0xCEF344B4, 0x8828FC3F,
    0xFE283F5F, 0x63739593, 0x85213845, 0x9BC825CF, 0xF3C4D72F, 0x42038DE1, 0x34751D25,
    0x350B98DA, 0xE283FCF0, 0xF90DF07B, 0xD8D62F4F, 0x308B92F8, 0x35502936, 0xC90704E5,
    0xE8E0E92E, 0x3CB171E1, 0xBB91A233, 0x310A06F1, 0x6428F5B8, 0xF975F88A, 0x04D32E0F,
    0x4E9311F9, 0x3A0FF9B6, 0x25F7F0F0, 0x02F8966E, 0xDA779D60, 0x7A254FF9, 0x95DE470E,
    0x8FF9F9A2, 0xF3E8F43B, 0xBDC1941C, 0x63734C44, 0x895D0912, 0xCD02CDBC, 0x63049B88,
    0x666E919A, 0xF33B29AA, 0x44898A18, 0xA066BA56, 0xE3E5BD6A, 0x7EA07F5E, 0xFFA4CB44,
    0x32623818, 0xA4D780DD, 0x333AAD8C, 0xD0DE32A2, 0x9AAEE9A7, 0xA85DF316, 0x1CFA218A,
    0xF4AE5135, 0x59D72EC8, 0xBC7B6188, 0x3FDB728D, 0x2BA384CE, 0xB6F2A68C, 0x3DAA32CA,
    0xBC750E13, 0x32E0BB76, 0xA8083CDF, 0xB3D0EF6B, 0x8E9273CF, 0x5A2C91F8, 0x3E4F673E,
    0x4BD24E18, 0xF7588C95, 0x39DC34CF, 0x196E8F89, 0xB121C326, 0xF02B79C1, 0x4B8AE03F,
    0x56536560, 0xA473ECC9, 0x7C91F699, 0x30040AD3, 0x73628254, 0xBE30C04E, 0xB86DA18B,
    0x3DCE7365, 0x305AEF03, 0x5BC963B0, 0xE24691A5, 0xC03612B9, 0x782BE73D, 0xDE323963,
    0x03A4DD3F, 0x5CF49372, 0xB87A8FF8, 0xCDCEA375, 0x7238C321, 0xC2497A8E, 0x3E90954B,
    0x00304997, 0x73E3B47E, 0xD8A7CCCC, 0xC385D7B1, 0xC64E3E0E, 0xA1B9CF63, 0x389B8314,
    0xDF8D0757, 0x55B2E3D0, 0xE0F475EF, 0xAA6F6183, 0x9212B86C, 0x8EB6F636, 0xAD9E863C,
    0xFF472458, 0xFC3B8E53, 0xB9E84935, 0x9FB39A4C, 0x7D9105D8, 0xACDF68B0, 0xC76F7583,
    0x48730370, 0x0FF7FC99, 0x92DDBDAD, 0xE49362A6, 0x6F8489ED, 0x8C37D3C6, 0x0FFA74EB,
    0x63C4E993, 0x9386C868, 0xBD9894FC, 0xB9CF53C1, 0x11B9FDD9, 0x5B70E234, 0xB138C2D0,
    0xA3E9BA45, 0xE9FA1E73, 0x1FC9C230, 0xBF029C93, 0xAB06836B, 0x559F154E, 0xA38FA3E6,
    0xE492F0FF, 0xF950914A, 0x3E7139CF, 0x89CB2467, 0x4166C4C6, 0x79CF0DFA, 0x4936E7B9,
    0xCCFFDF0E, 0xE5EB8FF9, 0x862FB8C3, 0xBCAD78A0, 0x5ACAB062, 0x83E9FBD0, 0x55E652B9,
    0x91B20C7A, 0xF7CA83C5, 0x768E23A0, 0xB86BA7F0, 0x9CD6C791, 0x71B08E04, 0xB9A61842,
    0xF8246A96, 0x225E0A0F, 0x4E3B6555, 0xBBF1FEC2, 0x6B9028E7, 0xCF097BF2, 0xEF34D550,
    0x3E49AE71, 0xD308D903, 0x711836B6, 0x88FF66C3, 0x1688FCDD, 0x23FD8693, 0x08142D67,
    0x0D817EFE, 0x764788E7, 0x9BA13BBA, 0x11B2D1AC, 0x1649CC6A, 0x68A09903, 0x6CD73878,
    0x28ED34CE, 0xA7C282D4, 0x482E0198, 0x45D9BC37, 0x12149435, 0x1FEBF853, 0xD3D26BF8,
    0x19C4C6EC, 0x5568C486, 0x146E5882, 0x40FE1094, 0x91D08848, 0xE5CE3DC7, 0x458D0E45,
    0x47FAD815, 0x0C949CB5, 0x89AE3C6F, 0xF30BBC66, 0xBD41B1FE, 0x8674B06C, 0x2F0C06DA,
    0x1D514258, 0x82267268, 0x5358FE0F, 0xF0664AC6, 0xD5595492, 0x9BD69288, 0x92CD6202,
    0x20650480, 0x640A62D9, 0x368B4870, 0x80BCC4A2, 0x9C5C08B5, 0xC4A12903, 0x394528E4,
    0xB2BE5696, 0xA5A19F33, 0x4B19752C, 0x1C6678CE, 0x2F0C898F, 0x594BB967, 0xA11E063E,
    0x2C5CCC00, 0xF6624B02, 0xFA0199D2, 0xC064428B, 0x43646113, 0xA618861E, 0xC8098B36,
    0x2BE214B7, 0x7300093D, 0xD98851E6, 0xCF9B7340, 0xB456097C, 0x80A0CDF2, 0x913A9C13,
    0x814331C1, 0x1330D04B, 0xCB5CE79D, 0xCF39EA51, 0x2073BE78, 0x00000101, 0x00000000

  EW_BITMAPS_TABLE( AppMuteBitmap )
    EW_BITMAP( AppMuteBitmap, Default )
EW_END_OF_BITMAP_RES( AppMuteBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::MuteBitmap' */
EW_RES_WITHOUT_VARIANTS( AppMuteBitmap )

/* Bitmap resource : 'App::FaultBitmap' */
EW_DEFINE_BITMAP_RES( AppFaultBitmap )
  EW_BITMAP_FRAMES( AppFaultBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 3, 8, 7, 14, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppFaultBitmap, Default )               /* ratio 24.11 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xEED7444A, 0x168A061D,
    0x28DC421B, 0x88C76351, 0x1C82431E, 0xC96451C9, 0xEDF4F988, 0x5448903B, 0x840E3BAB,
    0x73179160, 0x2997CB66, 0x78FC9A57, 0x9FCF27B2, 0x9492833B, 0x32182B08, 0x9CA62428,
    0x072016E1, 0x9F4D7F94, 0xF4EA8546, 0x45A5D25F, 0xB9F50A8F, 0xAED0E815, 0x0371A709,
    0x9B0882D7, 0xAAA6BC3E, 0x2A56BAAD, 0xCD4FB7DB, 0x2DD6A5A2, 0x5FB00B1C, 0xDA1D72F3,
    0x09BC9E2E, 0xAA61166B, 0x94876054, 0xBAA96D7D, 0x71B8AC5D, 0x0F85A9E2, 0xF7DC1E07,
    0x98BDDE2F, 0xC7E3EE25, 0x54A480AF, 0x2848DCB3, 0x63DDC5B2, 0x9F518EB8, 0x0961AA7E,
    0x5FAD7318, 0x64609E27, 0xA1CFBB4B, 0x7023F739, 0x5CC72BD9, 0x591D9CC8, 0xB54D8591,
    0x2319A9D5, 0xA9C02C4F, 0x5CA3453F, 0x9A8E59D9, 0xC2E071B8, 0x56F4277B, 0x26889D0E,
    0xA2CD0673, 0xF9B55CAE, 0x3CE18CF2, 0xCEA904E2, 0xC88B4FA4, 0x84EC6F27, 0xDC59210E,
    0xC40577BD, 0xF92014E9, 0x9F379E00, 0x21B85B0B, 0xE4F83D8D, 0x4D0700A3, 0x804E4188,
    0x9FC635E8, 0xF7F5FB7F, 0xCE10809F, 0x3E025897, 0x588F7150, 0x4CA2F164, 0x28644434,
    0x548084DF, 0x18899FE8, 0x2454F8B6, 0x1091BDA0, 0x02448318, 0x4E118B0A, 0x178AA285,
    0x86A2E8E6, 0x06F121A8, 0x1414B820, 0xD60A8200, 0x408E0F24, 0x5EA3B53E, 0xA4C8A000,
    0xD120167C, 0xB0E73A85, 0x09064EE3, 0x308BA29D, 0xE3F94C59, 0xF9499993, 0x08B29323,
    0x1E138C93, 0x2087212D, 0xA3E988B5, 0x28F21693, 0x20687CE7, 0x1E260962, 0x3C0ED3A5,
    0xD8864417, 0x46328499, 0x5A516FA6, 0x2954E778, 0x35C6B15C, 0xD1E02A48, 0x9026093D,
    0x5E97089F, 0x6815025A, 0xA1E7736C, 0x6739993B, 0xC01CFF93, 0x34F914C3, 0x33370D83,
    0x33D03768, 0xC31378D9, 0x3A8155A2, 0x22A4A894, 0x861D8517, 0x11DD82BC, 0x0D8AFEBF,
    0xB0A0E438, 0x688D1B93, 0x74AD0922, 0xAE250852, 0xCAE7CECC, 0xE148C72F, 0x50074E51,
    0xEC170470, 0x4FAB6B44, 0x6B9A16D0, 0xE1241755, 0x759B3A45, 0xBE2B11E6, 0xB4454314,
    0xACF9D63A, 0xE866E2A2, 0xB93B7C1E, 0xB5BC2709, 0xBD265BCA, 0xCD7932A3, 0xE0A4E337,
    0xB4EA3951, 0x3A0101B3, 0xBF0FC144, 0x2508A6CD, 0x8364D432, 0xA8560A03, 0x3CB44D81,
    0x31078198, 0x12E2213B, 0x83FF101E, 0x54C9C6B1, 0xE96F437C, 0x2988E016, 0x0111C8B1,
    0xC3BC5A11, 0xF0B427E4, 0x01498612, 0x1A45509C, 0x7339DCD9, 0x129C8FCD, 0xBB2D1C4B,
    0xEF3AD3EA, 0x19C153C4, 0x09925488, 0x37230EC3, 0x88FD5380, 0x5E2F8B62, 0xD7AD5B4C,
    0x8A824052, 0x4930702C, 0xEE793F35, 0x4AD3B4C9, 0x3453BA23, 0x02F37CDB, 0x01EC6A10,
    0x05C8C94C, 0x702FF751, 0xDFF6DDCB, 0x6EEBB250, 0xF1945108, 0x4822B44D, 0xAD378661,
    0x14CC62F8, 0xF9166780, 0x83EA094F, 0xA89F2140, 0x410347B2, 0x7C8F315C, 0xB98E7B9C,
    0x302395E6, 0x7650E9F9, 0x5EC2B085, 0x2888F204, 0x4FE141CD, 0xFEB4FEEC, 0xB4EB39BA,
    0x92EA01A3, 0xEF7BEEA7, 0xCD9CA53E, 0xFCAFC20D, 0x27C7DBBB, 0x00001014, 0x00000000

  EW_BITMAPS_TABLE( AppFaultBitmap )
    EW_BITMAP( AppFaultBitmap, Default )
EW_END_OF_BITMAP_RES( AppFaultBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::FaultBitmap' */
EW_RES_WITHOUT_VARIANTS( AppFaultBitmap )

/* Bitmap resource : 'App::DisableBitmap' */
EW_DEFINE_BITMAP_RES( AppDisableBitmap )
  EW_BITMAP_FRAMES( AppDisableBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 28, 0 )
    EW_BITMAP_FRAME( 15, 8, 5, 4, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppDisableBitmap, Default )             /* ratio 30.25 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC8CC5A2F, 0x8DC7A311, 0xEC8A351F, 0xC8E4B208, 0x9A4F2490, 0xE512C94C, 0xBAD400C7,
    0x2C416385, 0x351E359A, 0x69C4E66F, 0x9ECEA793, 0x1D02833B, 0xCFA8B3FA, 0x81B13BA3,
    0xE5A28723, 0xFF4F974A, 0x28330005, 0x3900A812, 0xBACD48A0, 0xAF562B55, 0x1D76BF5C,
    0xD86CB62B, 0x92D360B3, 0xCE2FFB45, 0x9C8F4E23, 0x109B9CAA, 0x1877BB5D, 0xA290F00C,
    0x290EC0AF, 0x817462FB, 0x98068CF3, 0x1C6ACC39, 0x0E78A65E, 0xBC32C5E3, 0x186671C4,
    0x8EC7E371, 0x3C9E472F, 0x669C4BE3, 0x96434397, 0xD6406CEC, 0xF4A1A67E, 0x1EEF67A3,
    0x23B0B903, 0xAEB74B8E, 0xFEAC8083, 0xB2E91C2A, 0x7E3F1F6E, 0xA5476205, 0x8340350B,
    0x89E65720, 0x5E2EF75D, 0x2DC4E105, 0x1B7DAECE, 0xEBDDEE4A, 0x0023F77E, 0x85543BBD,
    0xE72B91C6, 0x7439DCCA, 0xF1549E42, 0xDAED1629, 0x6DD3948E, 0xA480B6E3, 0xDCED3A8B,
    0x4E1F7BBF, 0xB1727C31, 0xCF03B4E9, 0x53C97205, 0x1C0E3D8F, 0xF914C3C0, 0x16C45048,
    0xCE3370EE, 0x14642439, 0xD0FE755F, 0xFB7E1F67, 0x360CD449, 0x8830CCDC, 0x41F4A927,
    0x70C02DCA, 0xF23C4ED1, 0x7F94E04C, 0xDE5569E3, 0x97E1DF73, 0xDC540F80, 0x55099623,
    0x5D8DA1A0, 0xE1742578, 0xC7DDF57C, 0x0A1D76CF, 0x3E354CF3, 0x1584002C, 0x95A598F5,
    0x62307D16, 0x3C0C8BCA, 0xCD72CF49, 0x40DFC8D1, 0x4611301B, 0xE3FE5239, 0x486E16C2,
    0xF23C0EC3, 0x19DF8050, 0x89925488, 0x06F9BC6E, 0x84D9741C, 0x1309CE43, 0x3B45B118,
    0x88958A65, 0xF1DCAD28, 0x91FF71E2, 0x3F7425D7, 0x3047A1A0, 0x42B57281, 0x23546C16,
    0x78EB3A0E, 0x97005050, 0x1A4B72B4, 0x803A84FD, 0x33C4EE5C, 0xFA3C048F, 0x0E56A918,
    0x3C858108, 0x1E2A1E33, 0x37E9E697, 0x1CBF2B90, 0xFD6A4523, 0x984FFAAC, 0x8DA34263,
    0x67403037, 0x28F93E0F, 0x76190390, 0x58ABE31C, 0x4B42A893, 0x08C1C21B, 0xDA0480A0,
    0x961E516A, 0xB3C87288, 0x0569655C, 0x52F4AB3D, 0xE529154C, 0x073ECFA3, 0x1F86D114,
    0x15AB80BB, 0xC1F46C11, 0x69C19D8B, 0xB5A2AD6B, 0x3F91697E, 0xC7000B00, 0xE860905B,
    0x4C76AF2B, 0xEB228A02, 0xB20063EE, 0x049020FA, 0x22DC811C, 0x399B3FEF, 0xF43CCF03,
    0x005FB040, 0xAFC96EE2, 0x14A9D197, 0xA89F2140, 0x17AF07B2, 0x1DC650EF, 0xE8FA34C5,
    0xAA5693C5, 0x58F03B8E, 0x88A6E1D0, 0xAC4FF8C6, 0x0AAC96DA, 0x1158C42F, 0xA717C5F2,
    0xD71AC570, 0x3B8EC39C, 0xD0FCEC19, 0x1A2E32BE, 0x60CE7434, 0x210C8DD3, 0x37C65144,
    0x34A5B348, 0x206240D3, 0xFF544975, 0x6780E013, 0x2CC9EC97, 0x306188BC, 0xD022BE5B,
    0xE8F81503, 0x8628C971, 0xDB608818, 0x323ACF3C, 0x3BE111E0, 0x349E2447, 0x8CDD32C2,
    0x062655AB, 0x8E817C4A, 0xE2CCA924, 0x7C08C406, 0x57E0F47C, 0x37CD7487, 0x1950A4E3,
    0xC8631733, 0x506D1642, 0x1C5AB613, 0x39062134, 0xB0DE5B94, 0x83DD0901, 0x861F026C,
    0x4E0CFB98, 0xC92B4942, 0xB28BE1D0, 0x78E637CA, 0x543F02B1, 0xB5284F61, 0xA6C5F2F8,
    0xB908A627, 0x558FABE4, 0x6C681502, 0xE237CD63, 0x6A2A10A8, 0xC621381D, 0x686A6538,
    0xC3419224, 0x50320C12, 0x1A8560A0, 0x7A7F54D8, 0x94CD31EA, 0xD00EDF92, 0x8C278921,
    0xF5778DD8, 0x42539270, 0x4D08C0DA, 0x5805424C, 0x7C358358, 0x083C8680, 0xE9722763,
    0x31A232C5, 0x8F558C84, 0x44606C57, 0xAC712826, 0x42487564, 0x1EC2BA14, 0xBF0A9114,
    0x5357C600, 0x5A2203C0, 0xB88B3841, 0x13D55E0B, 0xE182610C, 0xA0FC6A0C, 0x59B92285,
    0x3716DECE, 0x11C1FC2E, 0x18C1C0A4, 0x1E0C80EA, 0x0987018A, 0x6802A0E9, 0xB04AC368,
    0xD06B16A2, 0x90D2FF1F, 0x625C4B88, 0x4650C316, 0x0FE60013, 0x73B12001, 0x17D92AFE,
    0x314638C3, 0x648CD182, 0xCB19633C, 0x00001018, 0x00000000

  EW_BITMAPS_TABLE( AppDisableBitmap )
    EW_BITMAP( AppDisableBitmap, Default )
EW_END_OF_BITMAP_RES( AppDisableBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::DisableBitmap' */
EW_RES_WITHOUT_VARIANTS( AppDisableBitmap )

/* Initializer for the class 'App::TabButtonPull' */
void AppTabButtonPull__Init( AppTabButtonPull _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->TabPullBackground, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->Menu, &_this->_XObject, 0 );
  ViewsText__Init( &_this->SelectionText, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTabButtonPull );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)_this, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( _this, _Const0078 );
  CoreView_OnSetLayout((CoreView)&_this->TabPullBackground, CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->TabPullBackground, _Const0079 );
  ViewsRectangle_OnSetColorBL( &_this->TabPullBackground, _Const0039 );
  ViewsRectangle_OnSetColorBR( &_this->TabPullBackground, _Const0039 );
  ViewsRectangle_OnSetColorTR( &_this->TabPullBackground, _Const0039 );
  ViewsRectangle_OnSetColorTL( &_this->TabPullBackground, _Const0039 );
  ViewsRectangle_OnSetColor( &_this->TabPullBackground, _Const0039 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const007A );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0050 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const007B );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const007B );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0050 );
  EwRetainString( &_this->Text, EwLoadString( &_Const007C ));
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const007D );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const002C ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const007E );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const007F );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0080 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0081 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0082 );
  CoreView_OnSetLayout((CoreView)&_this->Menu, CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  );
  CoreRectView__OnSetBounds( &_this->Menu, _Const0083 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  CoreGroup__OnSetVisible( &_this->Menu, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->Menu, 40 );
  CoreVerticalList_OnSetNoOfItems( &_this->Menu, 6 );
  CoreVerticalList_OnSetItemClass( &_this->Menu, EW_CLASS( AppMenuItem ));
  CoreView_OnSetLayout((CoreView)&_this->SelectionText, CoreLayoutAlignToRight | 
  CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->SelectionText, _Const0084 );
  ViewsText_OnSetAlignment( &_this->SelectionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->SelectionText, 0 );
  ViewsText_OnSetColor( &_this->SelectionText, _Const000E );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const0085 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const0086 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const0086 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle1, _Const0087 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle1, _Const0087 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle1, 0 );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const0088 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const0086 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const0086 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const0087 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const0086 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle2, 0 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0089 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const0086 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const0087 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const0087 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const0086 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TabPullBackground ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Menu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SelectionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &AppDropdownBitmap, ResourcesBitmap 
  ));
  _this->TouchHandler.OnLeave = EwNullSlot;
  _this->TouchHandler.OnRelease = EwNullSlot;
  _this->TouchHandler.OnPress = EwNewSlot( _this, AppTabButtonPull_OnPress );
  _this->Menu.OnLoadItem = EwNewSlot( _this, AppTabButtonPull_OnLoadItem );
  ViewsText_OnSetFont( &_this->SelectionText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::TabButtonPull' */
void AppTabButtonPull__ReInit( AppTabButtonPull _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->TabPullBackground );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->Text1 );
  ViewsImage__ReInit( &_this->Image );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  CoreVerticalList__ReInit( &_this->Menu );
  ViewsText__ReInit( &_this->SelectionText );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  ViewsRectangle__ReInit( &_this->Rectangle );
}

/* Finalizer method for the class 'App::TabButtonPull' */
void AppTabButtonPull__Done( AppTabButtonPull _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTabButtonPull );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->TabPullBackground );
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->Text1 );
  ViewsImage__Done( &_this->Image );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  CoreVerticalList__Done( &_this->Menu );
  ViewsText__Done( &_this->SelectionText );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  ViewsRectangle__Done( &_this->Rectangle );

  /* Release all used strings */
  EwReleaseString( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TabButtonPull' */
void AppTabButtonPull__Mark( AppTabButtonPull _this )
{
  EwMarkObject( &_this->TabPullBackground );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( _this->Icon );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->Menu );
  EwMarkSlot( _this->OnSelectItem );
  EwMarkObject( &_this->SelectionText );
  EwMarkObject( _this->outside1 );
  EwMarkObject( _this->outside2 );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Rectangle );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppTabButtonPull_UpdateLayout( AppTabButtonPull _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTabButtonPull_UpdateViewState( AppTabButtonPull _this, XSet aState )
{
  AppApplication app;
  XUInt8 Access;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text1, _this->Text );
  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );
  Access = 5;

  if ( app != 0 )
    Access = (XUInt8)app->LevelAccess.AccessLevel;

  ViewsText_OnSetString( &_this->SelectionText, EwConcatString( EwLoadString( &_Const0038 
  ), EwNewStringInt( Access, 0, 10 )));
}

/* 'C' function for method : 'App::TabButtonPull.OnPress()' */
void AppTabButtonPull_OnPress( AppTabButtonPull _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->pressed )
  {
    AppApplication ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication 
      );

    if ( ap->LevelAccess.AccessLevel > 1 )
    {
      AppTabButtonPull_OnSetpressed( _this, 1 );
      CoreGroup__OnSetVisible( &_this->Menu, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 1 );
      ViewsRectangle_OnSetVisible( &_this->Rectangle, 1 );
      ViewsRectangle_OnSetVisible( &_this->Rectangle1, 1 );
      ViewsRectangle_OnSetVisible( &_this->Rectangle2, 1 );
      _this->outside1 = EwNewObject( CoreSimpleTouchHandler, 0 );
      _this->outside2 = EwNewObject( CoreSimpleTouchHandler, 0 );
      CoreQuadView__OnSetPoint1( _this->outside1, _Const0052 );
      CoreQuadView__OnSetPoint2( _this->outside1, _Const008A );
      CoreQuadView__OnSetPoint3( _this->outside1, _Const008B );
      CoreQuadView__OnSetPoint4( _this->outside1, _Const008C );
      CoreQuadView__OnSetPoint1( _this->outside2, _Const008C );
      CoreQuadView__OnSetPoint2( _this->outside2, _Const008D );
      CoreQuadView__OnSetPoint3( _this->outside2, _Const008E );
      CoreQuadView__OnSetPoint4( _this->outside2, _Const008F );
      _this->outside1->OnPress = EwNewSlot( _this, AppTabButtonPull_OutsidePress 
      );
      _this->outside2->OnPress = EwNewSlot( _this, AppTabButtonPull_OutsidePress 
      );
      CoreGroup__Add( _this->Super3.Owner, ((CoreView)_this->outside1 ), 0 );
      CoreGroup__Add( _this->Super3.Owner, ((CoreView)_this->outside2 ), 0 );
      CoreGroup_InvalidateViewState((CoreGroup)_this );
    }
    else
    {
      AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
      ), 2 );
    }
  }
}

/* 'C' function for method : 'App::TabButtonPull.OnSetpressed()' */
void AppTabButtonPull_OnSetpressed( AppTabButtonPull _this, XBool value )
{
  XColor t;

  if ( _this->pressed == value )
    return;

  _this->pressed = value;
  t = _this->Bevel.ColorB;
  ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
  ViewsBevel_OnSetColorT( &_this->Bevel, t );
  t = _this->Bevel.ColorL;
  ViewsBevel_OnSetColorL( &_this->Bevel, _this->Bevel.ColorR );
  ViewsBevel_OnSetColorR( &_this->Bevel, t );

  if ( _this->pressed )
  {
    ViewsRectangle_OnSetColorBR( &_this->TabPullBackground, _Const0090 );
  }
  else
  {
    ViewsRectangle_OnSetColorBR( &_this->TabPullBackground, _this->TabPullBackground.ColorTR 
    );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppTabButtonPull_OnLoadItem( AppTabButtonPull _this, XObject sender )
{
  XInt32 itemNo;
  AppMenuItem item;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->Menu.Item;
  item = EwCastObject( _this->Menu.View, AppMenuItem );

  if ( item == 0 )
    return;

  item->Elevation = 2;

  switch ( itemNo )
  {
    case 0 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0032 ));
    break;

    case 1 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0033 ));
    break;

    case 5 :
    {
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0036 ));
      item->Elevation = 3;
    }
    break;

    case 3 :
    {
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0037 ));
      item->Elevation = 3;
    }
    break;

    case 4 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0035 ));
    break;

    case 2 :
      ViewsText_OnSetString( &item->Text1, EwLoadString( &_Const0034 ));
    break;
  }

  CoreRectView__OnSetBounds( item, EwSetRectSize( item->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->Menu.Super2.Bounds ), _this->Menu.ItemHeight )));
}

/* 'C' function for method : 'App::TabButtonPull.MenuChoice()' */
void AppTabButtonPull_MenuChoice( AppTabButtonPull _this, AppMenuItem choice )
{
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside1 ));
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside2 ));
  AppApplication_PageDeselection( EwCastObject( _this->Super3.Owner, AppApplication 
  ));
  ViewsText_OnSetString( &_this->SelectionText, choice->Text1.String );
  ViewsRectangle_OnSetColor( &_this->TabPullBackground, _Const0061 );
  EwRetainString( &EwCastObject( _this->Super3.Owner, AppApplication )->SelectedTab, 
  _this->SelectionText.String );
  CoreGroup__OnSetVisible( &_this->Menu, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle1, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle2, 0 );
  AppTabButtonPull_OnSetpressed( _this, 0 );
  EwPostSignal( _this->OnSelectItem, ((XObject)_this ));
  return;
}

/* 'C' function for method : 'App::TabButtonPull.OutsidePress()' */
void AppTabButtonPull_OutsidePress( AppTabButtonPull _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside1 ));
  CoreGroup__Remove( _this->Super3.Owner, ((CoreView)_this->outside2 ));
  CoreGroup__OnSetVisible( &_this->Menu, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Menu, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle1, 0 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle2, 0 );
  AppTabButtonPull_OnSetpressed( _this, 0 );
}

/* 'C' function for method : 'App::TabButtonPull.SetChoice()' */
void AppTabButtonPull_SetChoice( AppTabButtonPull _this, XString choice )
{
  AppApplication_PageDeselection( EwCastObject( _this->Super3.Owner, AppApplication 
  ));
  ViewsText_OnSetString( &_this->SelectionText, choice );
  ViewsRectangle_OnSetColor( &_this->TabPullBackground, _Const0061 );
  EwRetainString( &EwCastObject( _this->Super3.Owner, AppApplication )->SelectedTab, 
  choice );
  EwPostSignal( _this->OnSelectItem, ((XObject)_this ));
  return;
}

/* Variants derived from the class : 'App::TabButtonPull' */
EW_DEFINE_CLASS_VARIANTS( AppTabButtonPull )
EW_END_OF_CLASS_VARIANTS( AppTabButtonPull )

/* Virtual Method Table (VMT) for the class : 'App::TabButtonPull' */
EW_DEFINE_CLASS( AppTabButtonPull, CoreGroup, "App::TabButtonPull" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppTabButtonPull_UpdateLayout,
  AppTabButtonPull_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTabButtonPull )

/* Bitmap resource : 'App::AccessBitmap' */
EW_DEFINE_BITMAP_RES( AppAccessBitmap )
  EW_BITMAP_FRAMES( AppAccessBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 29, 29, 0 )
    EW_BITMAP_FRAME( 20, 3, 7, 22, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppAccessBitmap, Default )              /* ratio 19.38 % */
    0x1C09FF00, 0xC11FF020, 0x1A0F0581, 0xA070C84C, 0x1E0D87BF, 0xB122BBFA, 0x0D364495,
    0xA8DC2217, 0x8FC2A3B1, 0x14724119, 0x464051D9, 0x0A510502, 0x258FF954, 0x24538903,
    0xAF4892A2, 0x789B4DA0, 0xB95CEA52, 0x964F65B3, 0xE50A7F40, 0xC8E7D449, 0x3E240A9E,
    0x624A3891, 0xA3509BBC, 0x47B8940A, 0x3C828262, 0x98156AB0, 0x17C4AB95, 0x0D8A8D43,
    0x47AC945A, 0xBA249D89, 0xEDB6CA93, 0x247E894D, 0x56CB7066, 0x66B0B0A2, 0x485586F3,
    0xBA3EE240, 0xB2030380, 0x614A512A, 0x4B105189, 0xAF1766B4, 0xF93DB2E3, 0x394C0DFA,
    0x8F41C4AA, 0xD61C4AC7, 0xB1E7B218, 0x94AE4D99, 0xE9B2AFA8, 0x650D1282, 0x33B9BA06,
    0x3F7ACFE8, 0xFA48368B, 0x88816DB4, 0xFD6CA756, 0x87EED350, 0x2EC3742C, 0xED407B38,
    0x2E2594DB, 0xE252DE12, 0x2408829B, 0x8DC890E6, 0x0FB3EC79, 0xFE4F21F3, 0xDFF591B0,
    0x841472FE, 0xF7DD9127, 0x6A251FCF, 0x22580EDF, 0xC7D2EB24, 0x905F2CDB, 0x02FBFD41,
    0xFFC7E7ED, 0x7F763F4F, 0xDED7B0F8, 0x26AC9243, 0x09F20E91, 0xFE4496E8, 0x42405414,
    0x60A80512, 0x8255125B, 0x4E0981D7, 0x0E831748, 0x3DD0F842, 0xD123FE1A, 0x22D91238,
    0x1D3F2611, 0x958854E8, 0x83D02871, 0x4F643D0E, 0x2415A988, 0x809B4482, 0x2C88C0B7,
    0x58A2E6DA, 0xE348C9C6, 0x443E2443, 0xF1615A0B, 0x038F62B0, 0x4499143E, 0x152930F5,
    0xF9299928, 0x5A5253D0, 0x0F93D126, 0x54E59945, 0x9CC2890F, 0xF960FE95, 0xD2308FE5,
    0x5F4D50F6, 0x2910F88A, 0xA643FDE7, 0xC3FA6E99, 0x3D11448E, 0x7C9E00E4, 0x3FA7D442,
    0x5344840D, 0x129E759B, 0x4A734B27, 0x91A1CEB4, 0x3CCFE879, 0x0AA41684, 0x21C50F7C,
    0x495801D1, 0x45A30DE4, 0x3C90F7A5, 0xA9445684, 0x7448C73F, 0x70304F49, 0xA0A3A40A,
    0x2BD129B6, 0xD0FA96A3, 0xFAD5C35D, 0x2DC5589A, 0xB243E679, 0x75DAEAC4, 0xEB9586C0,
    0x543EA195, 0xFCC6A8CB, 0xC559AAAA, 0x44A59865, 0x452780B7, 0x4B506041, 0x28DB44AD,
    0x9DB06B6B, 0x4487CA3A, 0xA33448BF, 0x02E91286, 0xCE2D35DE, 0x275EECBA, 0x0F912521,
    0x50FB7D12, 0xBA41122E, 0x80BC43E0, 0x2B448247, 0x0A912BF0, 0xC2144AFF, 0x1711E8BA,
    0xCD02C1D2, 0x12A5C026, 0x1D1120DD, 0xEA22C912, 0x4C1B0951, 0xFF0847B1, 0x18C5B0A3,
    0x40402473, 0x00000000

  EW_BITMAPS_TABLE( AppAccessBitmap )
    EW_BITMAP( AppAccessBitmap, Default )
EW_END_OF_BITMAP_RES( AppAccessBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::AccessBitmap' */
EW_RES_WITHOUT_VARIANTS( AppAccessBitmap )

/* Bitmap resource : 'App::DropdownBitmap' */
EW_DEFINE_BITMAP_RES( AppDropdownBitmap )
  EW_BITMAP_FRAMES( AppDropdownBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 33, 27, 0 )
    EW_BITMAP_FRAME( 2, 1, 1, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppDropdownBitmap, Default )            /* ratio 28.28 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0x00182C4A, 0x157493C7,
    0x68C4662F, 0x8EC6A391, 0x1C82431B, 0xC7A4B1F9, 0xA64D2293, 0x65B1393C, 0x493095C2,
    0x531994A2, 0x369BCD25, 0x6278DE35, 0x8A4FA5CE, 0x0BF49E39, 0x45A87410, 0x30A1155C,
    0x69879A4A, 0xCD4932D2, 0x94938D24, 0x6EA4D550, 0x8A496E92, 0xA493E925, 0xA526BC51,
    0x5112F192, 0xDC02FF28, 0xA7EFB280, 0x9F44005B, 0x0FAB8BE8, 0x7624C580, 0x2BC83CA3,
    0xBC82EF21, 0xC80AF204, 0x4270801B, 0x230D611C, 0x70B88C1E, 0x1F3BC363, 0xB6BB4D9C,
    0x679F5BED, 0xEB3E65F1, 0x2A8FC003, 0x80D4000C, 0x0F000262, 0x43442328, 0x4A1A60A1,
    0x5A1ED505, 0xA24D6883, 0xA5D3E975, 0x6D26E747, 0xD9CEC01B, 0x89685B04, 0xDB2D5930,
    0x407398CB, 0x9F1CACD1, 0x719D27DD, 0x7671B140, 0x50EB72A8, 0x77F1428C, 0xEAF5FB96,
    0xE72BC3DD, 0xD0BC9D2E, 0x0A0AD78C, 0xF29CAE27, 0x372DE471, 0x39DE7F37, 0x71259387,
    0xAE5009DB, 0x287EFF9F, 0x5FF801FD, 0x93B9193B, 0x1E0580DF, 0x443B1418, 0x7A8C9139,
    0x195715C3, 0x9505F17C, 0xD8F95C4F, 0x140FC4E5, 0x7AD02876, 0xE1E7BE12, 0x685E0D43,
    0x744E899F, 0x207C2236, 0x659C67B6, 0xE254362B, 0x18A9F68C, 0xA22D5BE3, 0x328DE2F5,
    0x86A1885A, 0x44E0E21C, 0x9915DF58, 0x6DDE525D, 0x49919E07, 0x46648936, 0x5E913D46,
    0x38BA1170, 0xC90B8F21, 0x007D1CB7, 0x0E4500E8, 0x5DF91E4B, 0x6989E279, 0x3DE393A6,
    0x53945169, 0x7BA3940E, 0xD0896230, 0xF9D0F87F, 0xB6728D9F, 0x798EE6F4, 0x3E65E9CE,
    0xD719FC02, 0x17D80018, 0x1C4EA143, 0x53A1686A, 0xA2289A28, 0xA8CA468E, 0x0A3439A4,
    0x2E98A4E9, 0x210FDD2A, 0x59D049C6, 0x04E4549F, 0x13CDF646, 0x9EA73C97, 0x88008F25,
    0xAADD2AA1, 0x1FF3CD41, 0x13FA5EA0, 0xD5CA92A8, 0x41AA1FF3, 0xAC050AF1, 0x6A6836BF,
    0xE72AA9AF, 0x3EAE146A, 0x71AB6B21, 0xAB2C8B2D, 0xA81B0AC8, 0x19FA9DB2, 0x4CF57685,
    0xB6146816, 0xAD9FFAD6, 0x56992541, 0x7B76DB7B, 0x91D8B6ED, 0x3ABAADB3, 0xBBAEC144,
    0xCE5526EB, 0xFBB6F4BA, 0xC6F2392E, 0xF9395D2B, 0x72AF9BDA, 0xD07B54E6, 0x97497359,
    0x36568BAD, 0x460C9731, 0xC30012E4, 0xC36004B1, 0x88EA2612, 0x29731430, 0x04A6D757,
    0x1431EC70, 0xB20C743F, 0x1C7F235D, 0x0724A6F2, 0x4CC97259, 0xC8B2D904, 0x8030FF2A,
    0x6C084C72, 0x17068CD0, 0x6A3EDD27, 0x000CE135, 0x02511831, 0x810C3000, 0xD0B2CF40,
    0x2589DC55, 0x956389F6, 0x33795E3A, 0xC45B39D3, 0x20CB5C4F, 0x3D00065A, 0x00016144,
    0x00615433, 0x10B050AB, 0xF1493017, 0x4E89F4CC, 0xD4A7B5BB, 0x61713940, 0xD331F6CE,
    0xF8691425, 0x086844D6, 0x6044E0E9, 0x43313837, 0x28D0C746, 0xBD3FDB77, 0x3645222D,
    0xE3617128, 0xC49D80F5, 0x50D80024, 0x54556C44, 0x9BE65831, 0xE7000E6B, 0x00E13360,
    0xD1203400, 0x3B8FE354, 0x8A4FB88E, 0x0CD04A7B, 0xC3285C47, 0x5D00BB11, 0x2DA20B84,
    0x4FA141C1, 0x07FBC06C, 0x437F07BF, 0x50C1B513, 0x1F600E44, 0x19F24A81, 0xF398540A,
    0x570F3D03, 0x6F43D4F4, 0x4BD7F4FD, 0xD8F57DAF, 0x1518C1FF, 0x940CD812, 0x739D495C,
    0x5B4B36D6, 0xEBB8FEAC, 0x5C4E359F, 0xA855D0E8, 0x3FD1F514, 0xDFF8FD7F, 0xF60F7FAF,
    0xFFFFD0E7, 0xCC5959D1, 0xFB404652, 0x8B4AC7E0, 0xA48B94FB, 0xB1F48F43, 0x8C0E81EF,
    0x67D8C5E0, 0x7049712E, 0x20BAE57D, 0x41A82704, 0x475029F1, 0x0720EC0C, 0x8BBED847,
    0x18845055, 0x4905976C, 0xBA12C1B8, 0x8BAB4E10, 0x10010CA1, 0x00000010, 0x00000000

  EW_BITMAPS_TABLE( AppDropdownBitmap )
    EW_BITMAP( AppDropdownBitmap, Default )
EW_END_OF_BITMAP_RES( AppDropdownBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::DropdownBitmap' */
EW_RES_WITHOUT_VARIANTS( AppDropdownBitmap )

/* Bitmap resource : 'App::EvacuateBitmap' */
EW_DEFINE_BITMAP_RES( AppEvacuateBitmap )
  EW_BITMAP_FRAMES( AppEvacuateBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppEvacuateBitmap, Default )            /* ratio 17.56 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0xB2B65DAD, 0x67FBB99E,
    0x7FBCDB8C, 0x6BB592A8, 0xE12EB6BB, 0x268F2FBB, 0xA1D0C7D4, 0x0B90C328, 0x0D15AC87,
    0xFE81415E, 0xC7E3FF32, 0x62281FF9, 0x8E8B0EEB, 0x2DAD788C, 0xD942F169, 0xF47A4724,
    0xE8DF665A, 0xEFECCBFD, 0x96D3EDB2, 0x5C96EB5B, 0x2787655A, 0xE5D1C663, 0x332EFAED,
    0x176DB270, 0x770FFDA4, 0x7BBBE7F1, 0x3D2E1BFF, 0xC9E3DB3A, 0xECBE6B97, 0xE277BADC,
    0x8F83ABDF, 0x76F67D89, 0x8FBBB5ED, 0xFA1ECF17, 0x6154F77A, 0x5E7CC767, 0xABAA7AA0,
    0x4775ED98, 0x78BFDF6F, 0x4F07F8F6, 0x17FCFA3D, 0x120281A0, 0x033FE088, 0x7FA00816,
    0xCF73A0DB, 0x92F0923F, 0x86187C0E, 0xCC7952B7, 0x439F6729, 0x9C83396C, 0x67A21D6D,
    0x95976D5E, 0xBF731CA8, 0x864F2360, 0x51F869EF, 0xD89E1E79, 0x3963881C, 0x2A6C8E13,
    0x8F6358DA, 0x4FF7D629, 0x25FCDB31, 0x6E488C63, 0x42891F24, 0x889507DE, 0x21E8F9F3,
    0x365E2690, 0x6DFE3DCF, 0x47684C22, 0x8721A7B6, 0x8CB65E42, 0xB8E5B237, 0xB5CA94A3,
    0xC02622F8, 0x260FF3A8, 0xA7085CBF, 0x19BE6D9C, 0x588E3FE7, 0x4997A304, 0x8FE4B542,
    0x4F039E42, 0x8298FF3E, 0x411F60CC, 0x4E8DA359, 0xA3E7B976, 0xCCE2BD86, 0x83F19C5E,
    0xF5B59326, 0xD53FE9A3, 0x3FCF6394, 0x69F39CD9, 0xD4162890, 0xA68E9F68, 0xCA2A16BA,
    0x3CCEC60C, 0xE98A9205, 0x987E54A2, 0xF2B8AA1B, 0x8E542BA9, 0x3FCE82E8, 0x62F368C4,
    0x5A58FB3E, 0x9EB2A5EB, 0xCBAAABBA, 0x270FFAE6, 0x8EB3FE5B, 0x3956B13C, 0x3A389365,
    0x965B2CCB, 0x37E6E2F8, 0x4EF84CEB, 0x5B8DFE3D, 0x98FFB92E, 0xEABA2E9B, 0x29205ABE,
    0xD2B3B0C7, 0x93DCFF9C, 0x5A61B18F, 0xC53ED02B, 0xB6ED1B3E, 0x4C24C700, 0x7B1E2F36,
    0x54BC8D6C, 0xDD4ACF13, 0xC1A133A4, 0x66340AF9, 0x2C56DA99, 0xFD8229DD, 0xFD3F0FA3,
    0xA9680ACC, 0xF096D5F4, 0xF344B4C2, 0xDAFAB20E, 0x903FE0D6, 0xC5A90AF8, 0xCBE25218,
    0x5BC99F85, 0xD8C467B3, 0x9EA7339C, 0x36CC6A5E, 0x8F83D22F, 0xAAD31FA5, 0x9CCE2C19,
    0x4CB3701C, 0x6C4CB68B, 0xB1B3E28B, 0xCACF20D1, 0x372FC38D, 0x3F68B4BD, 0xD16B28BF,
    0xA96D4B45, 0xF970C126, 0xFCB82314, 0xB8880B7A, 0xDA19634C, 0x772D6EBF, 0x05FD7D4C,
    0x175FD571, 0x86C2D434, 0xA5E2E301, 0xAB7350B9, 0x16B730D6, 0xE2D7D7AC, 0x84B4F29D,
    0x53F71AF6, 0xF629BA6C, 0x3358BDA2, 0xB798D678, 0xF2314A16, 0xC74FB3EA, 0x4A9ACF77,
    0x2369A2AB, 0x3EEAA2E1, 0x84E3CBB2, 0xD91A2EB7, 0xE2FDF9A1, 0x3E26A3D5, 0xA71DB16B,
    0xBA814F13, 0x3FFBBEF3, 0x0EA3FFBD, 0xE3FF54B5, 0xCD7B334A, 0xA74BFAED, 0xE831BC9D,
    0x3A1A5F11, 0x836FB6D8, 0xC799F2B5, 0xA130C9D4, 0xE2AF8BF1, 0xCE86DB21, 0x4424FFA0,
    0x462BDE68, 0xFA3E5CCF, 0xF67B0C74, 0x4C85AFCB, 0x2FAA3C37, 0x5B9E7324, 0x342EC91A,
    0x28CFFE73, 0x001790C6, 0xFFC01805, 0x06807015, 0xE0BCA024, 0x61EC26E4, 0xA8E41A6F,
    0x67D0F147, 0xEFC2061B, 0x04596382, 0x1481CE2E, 0x63CEC9D7, 0x3D4CBB29, 0x469FE1F0,
    0x3081C9E8, 0x7F0720D3, 0x516D9C13, 0xA21717A2, 0x16883DC7, 0xE50D1342, 0xDF8C2845,
    0x8E385846, 0x6B66A4D3, 0x3AD7939B, 0xDC28B560, 0xDD18E3FD, 0x96E15230, 0x84DC1778,
    0xB1733162, 0x082F0748, 0xF1047FB7, 0xCBDBA31F, 0x43942F0B, 0x3144860C, 0x4F01910A,
    0x430F2606, 0x4C8CF174, 0x0A5BCA84, 0x049E95F1, 0x295A1860, 0xA8BC7504, 0x05423A43,
    0x4AEC712B, 0x13A8DB1B, 0x87913819, 0x1D634473, 0x1E1472C7, 0x7B8FB13A, 0x0040481C,
    0x00000000

  EW_BITMAPS_TABLE( AppEvacuateBitmap )
    EW_BITMAP( AppEvacuateBitmap, Default )
EW_END_OF_BITMAP_RES( AppEvacuateBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::EvacuateBitmap' */
EW_RES_WITHOUT_VARIANTS( AppEvacuateBitmap )

/* Bitmap resource : 'App::ResetBitmap' */
EW_DEFINE_BITMAP_RES( AppResetBitmap )
  EW_BITMAP_FRAMES( AppResetBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppResetBitmap, Default )               /* ratio 16.19 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x2AF787BE, 0xA3788C2E, 0x42F1692D, 0x78C724D9,
    0x98CAE271, 0xDBBE6B2F, 0x7198C9E1, 0x6E5B3774, 0x3013350C, 0x395EFF75, 0x574FF77B,
    0x7CFF78B5, 0x18FD835D, 0xC9533FDE, 0xB47BFDDA, 0xDFE8DD0B, 0x25222D7E, 0xA534999D,
    0x0DFEE95E, 0x1FEF26D3, 0x0AFA79BB, 0xBD4E9F4A, 0xFD7E3EBA, 0x774B71FE, 0x662B5FEF,
    0x2E8B80EE, 0xAF349E2E, 0xE9F0FFD7, 0xBDBD5ECB, 0xC7EFF7FB, 0xCFF7C3B9, 0xE575B0D3,
    0x0CAF93F3, 0x6DF25769, 0xDF0774E8, 0x48160480, 0x64FB3E5D, 0xAC340B37, 0x83DE37ED,
    0x8BA23D54, 0x43B0E26F, 0xD0FF819F, 0xFF3F0F83, 0x3D0DF32C, 0x4FF781DE, 0xA3FDF727,
    0x89F83049, 0xFF3B0C62, 0x6C0D42E4, 0x5DD3A8DD, 0x4812343F, 0xE9B57663, 0x1B8EA107,
    0x3D8E5355, 0xDD83F204, 0x336CC63F, 0xF1BD6ECF, 0xC5280FF8, 0x3BCE58B0, 0xCFB810F9,
    0xA320A690, 0xEDC4839B, 0xAC33CB08, 0x7ACF980D, 0x4CB2A8FF, 0xD5B25878, 0x50FF4588,
    0x043D4E43, 0x744F43BA, 0xE656FA12, 0xF4D1319C, 0xECF43BCF, 0xFF8DDEE3, 0x990CD2B8,
    0x08C6563B, 0x28C5BE2E, 0x5CBF7C20, 0x599D1CD3, 0x970B15DE, 0x0E334604, 0x67E68C9B,
    0xDDA82F89, 0xF07B9D73, 0x9DA7A3D8, 0xCD899695, 0x27B64039, 0x9C987664, 0xC8A564A6,
    0x80E47374, 0xE8195E55, 0xC8691BAC, 0xACE07B61, 0xB4A85F43, 0x7E0C47D6, 0x68B72E03,
    0xE251E4AF, 0xB67C724B, 0x2B918C57, 0x8F9F889D, 0x0E234240, 0xC725C79B, 0xE4F55DEB,
    0xD6756B73, 0x8EEAB8FC, 0x604AFC9F, 0xA3791F8E, 0x84CF7BAB, 0x6BB12943, 0xAE251425,
    0xE8DB7E16, 0x38B24C4A, 0xAD2B4E20, 0x867B9D03, 0x39D8ABCA, 0x5D5BBCF0, 0xFB5EF138,
    0x1298255B, 0xFBBE6C28, 0xC1AFD7B6, 0xCF73D163, 0x6361D4B6, 0x8B10900E, 0xD3C52D96,
    0xBE921C3D, 0xA32C39D1, 0x826D63BF, 0x1ECB8122, 0x00BCF199, 0x94DD4A1E, 0x1A8A5DD9,
    0xBC8EFCC8, 0x0F0B4AF2, 0xF3A02628, 0x344B4C1A, 0x0CD7C25D, 0x2CD22038, 0x4B377772,
    0xB6724BC2, 0x873127BA, 0x6EC9CA67, 0x823921CF, 0xBA9E3C66, 0x08765D87, 0xC79D57B2,
    0x2D05DF54, 0x5CDECCCA, 0x1E188E66, 0xAD48724D, 0x3CDF0ABE, 0xC919E8F7, 0x65DF6BD2,
    0x04D96A1A, 0x5193CFF8, 0x9437BDF2, 0x780398FF, 0x040B69B2, 0x48977E76, 0x36CB4FF4,
    0x9FCAD8D6, 0x54362B75, 0xFE578573, 0x556BCDB5, 0x222B0FFB, 0x3FED3346, 0x0C0DA75D,
    0xAD86C336, 0xA796E4E4, 0xEBB49D2E, 0x378CA552, 0xF85E1220, 0x16CDB1D6, 0xA3897939,
    0xFFC5CD76, 0x944EE390, 0x7BFF03BE, 0x4F07C3EF, 0x1FC8F0BC, 0x08D8CFFF, 0x2392F6A3,
    0x4FA3FE13, 0xF3B7A982, 0xE4A83FE6, 0xDBD4FB76, 0xC34ED693, 0x6EE9F1D5, 0x66D8D48B,
    0x9BA6D4B5, 0xB9997DCD, 0x7A0BB3FF, 0x7776B20B, 0x9FABF4F7, 0x2FDCFAFE, 0xC339CB82,
    0xFDFF8FD5, 0xFE8B6400, 0xCF99D7F8, 0x017FCFD8, 0xC7015834, 0x1CC898F1, 0xCBFF81F0,
    0x01426D4F, 0x0708B998, 0x608C0982, 0x10A2FE99, 0x1844F019, 0x218790D9, 0x12C08830,
    0x852DE4BE, 0x024F4AF8, 0x14799CB0, 0x8C193422, 0x82D709A1, 0x30A4AD15, 0xA1542A28,
    0xC130644E, 0x8670C205, 0x70941432, 0x1DC13816, 0x012070E6, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( AppResetBitmap )
    EW_BITMAP( AppResetBitmap, Default )
EW_END_OF_BITMAP_RES( AppResetBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::ResetBitmap' */
EW_RES_WITHOUT_VARIANTS( AppResetBitmap )

/* Font resource : 'App::FontVerdana16' */
EW_DEFINE_FONT_RES( AppFontVerdana16, 13, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 2, -10, 10, 10, 13, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x000000CC ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -9, 1, 9, 5, 0x000000CC ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 3, 4, 5, 0x000000E6 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 8, 8, 10, 0x00000110 ),              /* '#' */
  EW_GLYPH( 0x0024, 1, -10, 6, 12, 8, 0x000001FD ),             /* '$' */
  EW_GLYPH( 0x0025, 1, -9, 11, 9, 13, 0x000002F2 ),             /* '%' */
  EW_GLYPH( 0x0026, 1, -9, 9, 9, 9, 0x0000046B ),               /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 1, 4, 3, 0x0000059E ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -10, 4, 13, 6, 0x000005AE ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 4, 13, 6, 0x0000065D ),             /* ')' */
  EW_GLYPH( 0x002A, 2, -10, 5, 5, 9, 0x0000070C ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -8, 7, 7, 9, 0x00000775 ),               /* '+' */
  EW_GLYPH( 0x002C, 1, -2, 3, 4, 5, 0x000007DA ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -5, 5, 1, 7, 0x0000080D ),               /* '-' */
  EW_GLYPH( 0x002E, 2, -2, 1, 2, 5, 0x00000826 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 7, 12, 6, 0x0000082C ),             /* '/' */
  EW_GLYPH( 0x0030, 1, -9, 6, 9, 8, 0x000008D3 ),               /* '0' */
  EW_GLYPH( 0x0031, 2, -9, 5, 9, 8, 0x0000098C ),               /* '1' */
  EW_GLYPH( 0x0032, 1, -9, 6, 9, 8, 0x000009E4 ),               /* '2' */
  EW_GLYPH( 0x0033, 1, -9, 6, 9, 8, 0x00000ABE ),               /* '3' */
  EW_GLYPH( 0x0034, 1, -9, 7, 9, 8, 0x00000B90 ),               /* '4' */
  EW_GLYPH( 0x0035, 1, -9, 6, 9, 8, 0x00000C3A ),               /* '5' */
  EW_GLYPH( 0x0036, 1, -9, 6, 9, 8, 0x00000CEC ),               /* '6' */
  EW_GLYPH( 0x0037, 1, -9, 6, 9, 8, 0x00000DC3 ),               /* '7' */
  EW_GLYPH( 0x0038, 1, -9, 6, 9, 8, 0x00000E66 ),               /* '8' */
  EW_GLYPH( 0x0039, 1, -9, 6, 9, 8, 0x00000F68 ),               /* '9' */
  EW_GLYPH( 0x003A, 2, -7, 1, 7, 6, 0x00001041 ),               /* ':' */
  EW_GLYPH( 0x003B, 1, -7, 3, 9, 6, 0x00001054 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 7, 9, 9, 0x0000109E ),               /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 7, 4, 9, 0x00001180 ),               /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 7, 9, 9, 0x000011F0 ),               /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 5, 9, 7, 0x000012D2 ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 11, 11, 13, 0x0000135F ),            /* '@' */
  EW_GLYPH( 0x0041, 0, -9, 9, 9, 9, 0x00001545 ),               /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 6, 9, 8, 0x00001637 ),               /* 'B' */
  EW_GLYPH( 0x0043, 1, -9, 7, 9, 9, 0x000016F2 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 7, 9, 9, 0x000017CD ),               /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 6, 9, 8, 0x0000188C ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 6, 9, 8, 0x0000192A ),               /* 'F' */
  EW_GLYPH( 0x0047, 1, -9, 7, 9, 9, 0x000019AC ),               /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 7, 9, 9, 0x00001A94 ),               /* 'H' */
  EW_GLYPH( 0x0049, 1, -9, 3, 9, 5, 0x00001B03 ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 5, 9, 6, 0x00001B3A ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 6, 9, 8, 0x00001B99 ),               /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 6, 9, 7, 0x00001C41 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 9, 9, 11, 0x00001C8F ),              /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 7, 9, 9, 0x00001D67 ),               /* 'N' */
  EW_GLYPH( 0x004F, 1, -9, 8, 9, 10, 0x00001DFE ),              /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 6, 9, 8, 0x00001F0A ),               /* 'P' */
  EW_GLYPH( 0x0051, 1, -9, 8, 11, 10, 0x00001FA3 ),             /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 8, 9, 8, 0x000020EA ),               /* 'R' */
  EW_GLYPH( 0x0053, 1, -9, 7, 9, 9, 0x000021C1 ),               /* 'S' */
  EW_GLYPH( 0x0054, 1, -9, 7, 9, 9, 0x000022DD ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 7, 9, 9, 0x00002350 ),               /* 'U' */
  EW_GLYPH( 0x0056, 0, -9, 9, 9, 9, 0x000023D9 ),               /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 13, 9, 13, 0x000024C8 ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 9, 9, 9, 0x00002637 ),               /* 'X' */
  EW_GLYPH( 0x0059, 1, -9, 7, 9, 9, 0x0000274F ),               /* 'Y' */
  EW_GLYPH( 0x005A, 1, -9, 7, 9, 9, 0x000027F2 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 2, -10, 3, 12, 6, 0x000028CD ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 6, 12, 6, 0x0000290D ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 3, 12, 6, 0x000029A8 ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 9, 5, 11, 0x000029E8 ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 8, 1, 8, 0x00002A82 ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 3, 2, 8, 0x00002AAA ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -7, 6, 7, 8, 0x00002AC8 ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 6, 10, 8, 0x00002B73 ),             /* 'b' */
  EW_GLYPH( 0x0063, 1, -7, 6, 7, 8, 0x00002C12 ),               /* 'c' */
  EW_GLYPH( 0x0064, 1, -10, 6, 10, 8, 0x00002CB5 ),             /* 'd' */
  EW_GLYPH( 0x0065, 1, -7, 6, 7, 8, 0x00002D54 ),               /* 'e' */
  EW_GLYPH( 0x0066, 1, -10, 5, 10, 5, 0x00002E0A ),             /* 'f' */
  EW_GLYPH( 0x0067, 1, -7, 6, 10, 8, 0x00002E7E ),              /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 6, 10, 8, 0x00002F51 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 1, 10, 3, 0x00002FCD ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -10, 4, 13, 4, 0x00002FE3 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 6, 10, 7, 0x00003045 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 1, 10, 3, 0x000030D2 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 9, 7, 11, 0x000030E0 ),              /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 6, 7, 8, 0x00003179 ),               /* 'n' */
  EW_GLYPH( 0x006F, 1, -7, 6, 7, 8, 0x000031E3 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 6, 10, 8, 0x0000327B ),              /* 'p' */
  EW_GLYPH( 0x0071, 1, -7, 6, 10, 8, 0x0000332A ),              /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 4, 7, 5, 0x000033DD ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x0000341D ),               /* 's' */
  EW_GLYPH( 0x0074, 1, -9, 4, 9, 6, 0x000034D0 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 6, 7, 8, 0x00003524 ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 8, 7, 8, 0x0000357B ),               /* 'v' */
  EW_GLYPH( 0x0077, 1, -7, 9, 7, 11, 0x00003626 ),              /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 7, 7, 7, 0x00003725 ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -7, 8, 10, 8, 0x000037D8 ),              /* 'y' */
  EW_GLYPH( 0x007A, 1, -7, 5, 7, 7, 0x000038C9 ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 5, 12, 8, 0x0000395D ),             /* '{' */
  EW_GLYPH( 0x007C, 3, -10, 1, 12, 7, 0x000039FE ),             /* '|' */
  EW_GLYPH( 0x007D, 2, -10, 5, 12, 8, 0x00003A0E ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -6, 8, 3, 11, 0x00003AAF ),              /* '~' */

  EW_FONT_PIXEL( AppFontVerdana16, 0x00003B14 )                 /* ratio 76.80 % */
    0xEF7BDEF7, 0xF7BAF7BD, 0x05EF7BDE, 0x00000000, 0x00000000, 0x7BDEF7B8, 0x7E2975EF,
    0xB18775D7, 0x5FC410AC, 0x8AA551FE, 0xCEFBCDFB, 0x79B9E6EB, 0xE11910AE, 0x71FFBC9E,
    0xE7DEF9DD, 0x82A954BB, 0x9DFC600B, 0xECE39EFD, 0x6F560633, 0xBFBAF30F, 0x37DF7C32,
    0xEBDCF583, 0xF8F7BF7F, 0x7D8C01BF, 0xDC7E60F7, 0xEFC57DBE, 0x7C3528C7, 0x8D4A306F,
    0x6FB70A27, 0x77D9EFBF, 0xBEEFB18F, 0xE2FB7DDD, 0x0D4A3519, 0x528D7DE2, 0xFB735F83,
    0xFEFB1DF6, 0xF7DF4E0B, 0xA12A5183, 0xB83F3D56, 0xDE59FFFF, 0xFFBDFDE5, 0x308CB99D,
    0x8353FDEF, 0xF3DEF829, 0xC6FC7F8F, 0x3CB50B1D, 0xCCFF4567, 0x731FEC27, 0xC1CC4890,
    0x109F31FE, 0x6B39E3FD, 0xFC3CEB15, 0xF933C43A, 0x2244C66D, 0x16DF9319, 0x58EBF4CF,
    0x7BE5C1E7, 0x7CFEDF3C, 0xFDBE7F7B, 0x170F9E3D, 0xD7BDC000, 0xEBDEF7BD, 0xF8000BDE,
    0x59F31CCF, 0x7BDEE7F6, 0x001605EF, 0xCC0409AC, 0xF3C24407, 0xFD427F80, 0x3F501EC0,
    0xE7D007B0, 0xB273967C, 0x655F1F7F, 0x01101992, 0xEFE64991, 0xE715ABE3, 0xEE1C6BE4,
    0x0005EE0E, 0xDD7B8000, 0xF9CEFCFB, 0xFCE7DBE2, 0xD558B5BF, 0x2E750318, 0x5543BF73,
    0xC22FF797, 0x6E73FF9C, 0x717CE7BD, 0xF7F673BE, 0x1541660D, 0xF71F7EF7, 0xF3E60FF6,
    0x3EED660D, 0x2E787EE7, 0x17BC868C, 0xEFC49EF1, 0xF7FE784D, 0x7BDEF7BA, 0xB8000BDD,
    0xBDCBDEF7, 0xF70002F7, 0xE7BDD2FC, 0x37E6607F, 0x3DF6EA78, 0x73BF27FB, 0x78E739C4,
    0xCFB3C2DF, 0xCFFE45F9, 0x3D629FD9, 0x86F7E023, 0xECF72E67, 0x7BDEF7BE, 0x1777BDEF,
    0x8591177C, 0x983F6079, 0xD44FF87F, 0xFCE77E46, 0xFE73ECF2, 0xDF332727, 0xD9F398F5,
    0xBEF7FFFF, 0xABEFFFDD, 0xAC9AACC1, 0xFCE7DBE7, 0x5A73DE7F, 0xCD6373EF, 0x620FF447,
    0x3BE50F3C, 0x7E33FCE7, 0x8C1FFCE7, 0x27D39D7E, 0x82E5CBAE, 0x399FF00B, 0x0FECB3E6,
    0x25DF9090, 0xF9FFBBBF, 0xFE9FFDDD, 0x9FF13FF3, 0xEEFC89FF, 0x77E44FFE, 0xBBF21FF7,
    0xEF7BDEF7, 0x7BDEF7BD, 0x7BDEE02F, 0xDC09BDEF, 0xEFBFE12F, 0x7DFF9897, 0xCFFCC4BF,
    0xFE7FE63F, 0x5FBEFFCD, 0x92FDF7FE, 0x7DCC25FB, 0xEFFEE37F, 0x02786FB9, 0x418D61CF,
    0x00B85C4F, 0xFCF7FFB2, 0xBEEF750A, 0xEF94F6E7, 0xFBFBBF5D, 0xFBF1BFFD, 0x8AFBDF65,
    0x79E5ADF7, 0x2432B524, 0x2010CC88, 0x1E5A96A2, 0xB2FDFA9E, 0xFEF3277F, 0x73ADF64E,
    0xF2DEFFD6, 0xFDEF7BDC, 0x58027103, 0xFBFF80B1, 0xF84A6907, 0xD41FFEFE, 0xB8D41F34,
    0x7E7166F7, 0x11DFDEF7, 0x7B8AA855, 0xF7B8BFEF, 0x3C06A17D, 0x08DFBDC5, 0xC1FDDEF7,
    0xBDCAB053, 0xEFC9FFE7, 0x7BCCDF9C, 0xFBFDE9CF, 0x16AF8C3D, 0xA01100C8, 0xC3DFE816,
    0x73DCF2F8, 0xFBDEFFEF, 0xEF7B837F, 0x5F9C81DD, 0x12205983, 0xC8598244, 0xEF7BB5F5,
    0xBDEF71D9, 0xDEF7BAF7, 0xBDEE000B, 0xDEF7BAF7, 0xBDEE000B, 0xEF7BDEF7, 0xF7BDEEBD,
    0xEF7B8002, 0x017BDEE5, 0x73BF2000, 0x9EF799BE, 0xF7FBFEF3, 0x40B57E30, 0xDEE08804,
    0xF57B8B5B, 0xB9E521EF, 0xC1759EE7, 0xEE000005, 0xEF72F7BD, 0x000017BD, 0x175EF7B8,
    0x72EB8000, 0x005EE5EF, 0xEB300000, 0x2F7ECF7F, 0xCD39E356, 0x7EF12FB8, 0xFF786FF8,
    0x81D7CF03, 0x79C60FE8, 0x0000002F, 0xBDC00000, 0xC1BBDEF7, 0x0541E2BE, 0x98FF46BF,
    0xDF898AA6, 0xFA60FF4F, 0xF3DF8262, 0xC04F6603, 0x35C2FB82, 0xB906E806, 0x805F5827,
    0x0CF3C1B7, 0x93182F70, 0x37E73BF1, 0x9CE739E4, 0x787BFD93, 0x560B5D7E, 0x04444045,
    0x5582D444, 0x7E787BFD, 0x739CE79D, 0xCF7BDE4E, 0x7CF7BDCB, 0x90105588, 0x6AF7BA73,
    0x0017FEF7, 0xFCE77E30, 0x9CE73C86, 0x0F7FB273, 0xC16BAFCF, 0x888808AA, 0xB05AC880,
    0xCF0F7FAA, 0x9CE797EF, 0xFC69BDFB, 0xF405CDCE, 0xCF7BDCFF, 0xFCF7B817, 0x1015603F,
    0xDC5FA209, 0xDEE14E7B, 0xCE300DFD, 0x3BEE3029, 0xDFFEFFF5, 0xEFFFFBE7, 0x21E79FFE,
    0x047357EA, 0x79CF73BE, 0x7DDF7A33, 0xDFCAE40E, 0xECEB3C13, 0xF7FFFF7D, 0xBDEF7BDE,
    0x5EF75EF7, 0x00000000, 0x5C170000, 0x00000000, 0xFDF22064, 0xB5BDF885, 0xE6B7DDF7,
    0x2B39DE0B, 0x133D3510, 0xE1FDE1F3, 0xD4B312F7, 0x79C7BC0C, 0x0731CC61, 0x4C07CEF8,
    0x0B0BCF13, 0xF90AA7DE, 0x2662AA26, 0x0CC47F5F, 0x5166317B, 0xED9EDA9B, 0x918BFD37,
    0x19F3C7DE, 0xA948F903, 0x87EFF602, 0xE2A1BBDF, 0xF58B93C1, 0x62B5BF03, 0xFDF2C661,
    0x387FFC86, 0xFE42FBD7, 0xF7213B7E, 0xAFBC276F, 0xA7FBE0F7, 0x262B3EFC, 0x83DFAC66,
    0x5F17EBF9, 0xD0D6A50F, 0x2D6A6DD7, 0x650DDD03, 0x7BDC0000, 0xDEF7BDEF, 0xA0BBEF7B,
    0x87EF2376, 0xDEF83F78, 0xBE89D7C0, 0xEF77D603, 0xEBDEF7BD, 0x0000005E, 0x1EC1B7B8,
    0x12703F50, 0xCC0403E6, 0x133C0109, 0xC15F80F2, 0x7BDEF7D8, 0xE0000001, 0x03EE785E,
    0x881EBFB2, 0x83739E7B, 0x7F461DEF, 0x6EA17FDE, 0xBDEF7BDF, 0xB313CEF7, 0x7BB9F67F,
    0x077EE7D8, 0xFFEF4666, 0x5F67BFF5, 0xEF8F1959, 0x00BA7FDC, 0xBE7D8C00, 0x6ECFFCF0,
    0x0205CC33, 0xF79541A4, 0xDF8EF19C, 0xCFA7BFB9, 0x879F7DB9, 0xF04805F1, 0xE2B7C64D,
    0x5C1FEF7F, 0xE7FEB000, 0xB4FFE567, 0x904861EF, 0xBCB11EA0, 0x9D60ECF7, 0x4E72C5F3,
    0x95E8B7F6, 0x791BDEF7, 0x9BF7BDEE, 0xDF65BF21, 0x3DDFC8F7, 0x7A8F73DE, 0xDD75EEB8,
    0x8000000B, 0x3BBF3FF5, 0x2DFB4FFD, 0xD6010486, 0xCF7D3F23, 0xF677C579, 0xFF2E9348,
    0x002FB273, 0x7BBECF00, 0x77EFFFF8, 0x00039875, 0x175EE000, 0xEE05C5C0, 0x000002E5,
    0xBEE719E0, 0x800002F7, 0x1E79E0F5, 0xA81649F2, 0x57F3181A, 0x005E77D0, 0xF599F6B7,
    0xEFEC653F, 0xB5EFFF1D, 0x0012A594, 0xEE000000, 0xFE1EEFB3, 0x1D5DFBFF, 0x000000E6,
    0xEAF39EF0, 0x67EDCE7B, 0x4C849F32, 0x9F3267C8, 0xBEDCE7BE, 0x10BE7FF3, 0x0ADBFCFB,
    0x6900816B, 0x139F4B30, 0x0B39DFAF, 0x7CE75800, 0x5E73DD77, 0x4824335F, 0xDEBE4B50,
    0xBE3F79FF, 0xE0001BF3, 0xFF2BFF3E, 0xC00002D7, 0x72F3DDF8, 0x2983DEFA, 0xBBB9EF16,
    0x3F7DDFA8, 0x7B839866, 0x702E1F6F, 0x0BDD7BDD, 0xFFD06200, 0x0002E173, 0x96298C00,
    0xF27FDDFB, 0x818D3783, 0xF31FBF4C, 0xC1FB0630, 0xEB0FF2BF, 0x11884DFF, 0x53714EC1,
    0x78A95FEE, 0xDD73DFAC, 0xA64FDB77, 0x1A6466B9, 0xF0733CAB, 0xEF7E7F7B, 0xC8C3918F,
    0x93F63721, 0x63D4F4DF, 0xAFC6FF5E, 0x87FAF83F, 0xFC9777F9, 0xCF1BF31E, 0x567CDF07,
    0x7DFA6B92, 0xE1F31F7C, 0x7CE6F899, 0x3EFBF302, 0xE2099A88, 0xBC039105, 0xF7BDEE17,
    0xC9BF7BDE, 0x1FE8AFB8, 0x37BC37BF, 0x97BDDF99, 0xF7DE5FFA, 0x9AC08592, 0xFFDCDDDC,
    0x0020B98B, 0xEFB7078C, 0x17FDC005, 0x09517DF7, 0x7FA17301, 0xBF2E7997, 0x833C0244,
    0x67DC97DB, 0xF677F4E1, 0x7E9AACCF, 0x000D7CFB
EW_END_OF_FONT_RES( AppFontVerdana16 )

/* Table with links to derived variants of the font resource : 'App::FontVerdana16' */
EW_RES_WITHOUT_VARIANTS( AppFontVerdana16 )

/* Bitmap resource : 'App::ExpandBitmap' */
EW_DEFINE_BITMAP_RES( AppExpandBitmap )
  EW_BITMAP_FRAMES( AppExpandBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 5, 0, 19, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppExpandBitmap, Default )              /* ratio 29.44 % */
    0x2409F700, 0x011F7020, 0x7417087A, 0x89E6285A, 0x222F5843, 0x71416342, 0x1616451A,
    0x88CC5E2B, 0x8D47A371, 0xE4863B20, 0xC8A3F248, 0xA85AD393, 0x65A42694, 0xF330432F,
    0xA1599BA8, 0x387E0120, 0xC704D807, 0x9F8E03F3, 0xF50802C7, 0xBFE8A007, 0x1A8E00A2,
    0x2934AA45, 0xA34BA7D3, 0xB4DA953A, 0x58A9D42A, 0xFABD52AD, 0x71D7838F, 0xC0DEC2C8,
    0x42006FC9, 0xE27E0B7A, 0x8095C638, 0xE21F7DDB, 0xB7411382, 0x76115D1B, 0xCBD88EEB,
    0xBC5E6EED, 0x1DEEFD7E, 0x606EB7D1, 0x17077CBD, 0x31186C06, 0x2209BF61, 0xA17AE3DB,
    0x98723A32, 0x24EC2C37, 0xA2006846, 0x90B65546, 0x0D34ACB6, 0xCC1BA879, 0xF560CD5B,
    0xE5A8063C, 0x3B3D8835, 0xACD6EBB5, 0xCDBED369, 0xDDEA773B, 0xFEEB6FAC, 0x719C7A9D,
    0xC7924E0E, 0xB9A71AE2, 0x604F8723, 0xB04B7531, 0x361A32F4, 0x6ED40FB3, 0xEDC13B90,
    0xFF87BBE0, 0xF93CBE2E, 0xA9F536F3, 0xE6DDE02F, 0x2A10F7BB, 0x34C7405F, 0x116F7D84,
    0x1A63405F, 0xDA3803F7, 0xA0178DED, 0x67ADE979, 0x24B80D1D, 0x0C3D4478, 0x79E0302A,
    0x9EC3E9EA, 0x5845E380, 0xDA181240, 0x1C0094C2, 0x5311B3F6, 0xE0F6DD7E, 0x141A1488,
    0x581E89CE, 0x053A62A0, 0x298FA8B4, 0xA0F16630, 0x38122485, 0xCA381350, 0x4687D5C2,
    0x8D5AC885, 0xDE7895E8, 0xC0A24435, 0xF6482095, 0x428D1DE1, 0x93C4C902, 0x1158ECB3,
    0xD8017588, 0x1A3695E4, 0x2996CD64, 0x8164991C, 0x24090212, 0x48E84D8E, 0x29498F15,
    0x41966566, 0x016609B2, 0x24635E44, 0xD20A4855, 0x626E9307, 0x647AE109, 0x9A15999A,
    0x66B5F8FF, 0xB92E849B, 0xCE714D9E, 0x8C205599, 0x9EA621FA, 0x2529F66F, 0x25E25446,
    0x1E15A422, 0x5CA25E3A, 0xA3881A31, 0xE6C9E698, 0x79444C93, 0xD63D94E6, 0x7BA8A975,
    0x96E42986, 0xE74974D6, 0xCABA9997, 0x9AA483EA, 0x49AA27FA, 0x9BDA9A09, 0x41E38627,
    0x90A6B0A2, 0x1645B1E8, 0x48B2CB7B, 0xB3C70570, 0x2C5B148F, 0xCB1272B2, 0x96D836A5,
    0x08B6CF70, 0xA4E39A44, 0xE6A530D3, 0xA81D03AF, 0x70E905A2, 0xEC56EEA5, 0xBBAEB566,
    0x2F201D54, 0x3BD49C3E, 0x8265B786, 0xAB37695B, 0x2E209012, 0x8058B447, 0x056AEF3E,
    0x2706C1EF, 0x7F53305C, 0xBE080C34, 0xA805567E, 0xC4D9AF8F, 0xC00A3D60, 0x75164A68,
    0xC771D1F6, 0x7211FA9E, 0xF1C2CFC7, 0x092D5708, 0x49C7CBD1, 0xC768DC82, 0xC7CCC483,
    0xB1B33424, 0x7814CDCE, 0xA9BEAB97, 0xA863FA5A, 0x6849E004, 0xF9DA5EB1, 0xEDE3ADE8,
    0x46A52A7C, 0x901B2B8D, 0xF4483F42, 0x0D0346AC, 0x2EDF9F35, 0x7CD36E1D, 0xADA86A0D,
    0x21640E85, 0x692B54A7, 0x4A169EB5, 0xFDBEF5AA, 0x90F479BE, 0xE8DA7645, 0xA84B57DB,
    0xF74CAEF6, 0x06CFEAAA, 0x41B67D45, 0x31D56764, 0x8D2B40DD, 0xE37AD6F7, 0x48DF9B45,
    0x567539B3, 0x07C20F31, 0x60138DE1, 0xFEBCC4B8, 0x940374E3, 0xB6106D87, 0xEF2094DA,
    0x4530F801, 0x746C24F3, 0xF9D6233E, 0x349A2552, 0x37FD7AFB, 0x83DEDBA1, 0x346266C0,
    0x372007FC, 0xECF393AF, 0x39784BAB, 0xC2F72953, 0xD8096454, 0x1C38DC63, 0xF3FC0EA8,
    0xBD23E6AC, 0x9F542601, 0x6415530D, 0x864C0EAF, 0x7255C1E4, 0xDEF2C44E, 0xDE30103B,
    0x9A9AC0EA, 0xE9FAE167, 0xD83ECF9F, 0x7D285A6F, 0x61F4063E, 0x695C20BF, 0x33297FA1,
    0x578153A9, 0x6507181C, 0x24A1832C, 0xB94FA2D8, 0x730293EA, 0xE604AB94, 0x6A658168,
    0x28209420, 0xC942040B, 0x52841181, 0x3D704CF5, 0x83E018AA, 0x088690F9, 0xB093605B,
    0xF206E320, 0x14BB4FA1, 0xB585C2B6, 0x730885F0, 0x683E5261, 0x2C687C80, 0x4019640B,
    0x1988730E, 0x39A06C72, 0x7D847071, 0x0E0DE042, 0x321FA009, 0x610C6164, 0x6626C4A8,
    0xD0EA02AF, 0x214A169F, 0x20B46942, 0xA2C8FD87, 0x00020200, 0x00000000

  EW_BITMAPS_TABLE( AppExpandBitmap )
    EW_BITMAP( AppExpandBitmap, Default )
EW_END_OF_BITMAP_RES( AppExpandBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::ExpandBitmap' */
EW_RES_WITHOUT_VARIANTS( AppExpandBitmap )

/* Bitmap resource : 'App::CollapseBitmap' */
EW_DEFINE_BITMAP_RES( AppCollapseBitmap )
  EW_BITMAP_FRAMES( AppCollapseBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 30, 30, 0 )
    EW_BITMAP_FRAME( 5, 0, 19, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppCollapseBitmap, Default )            /* ratio 29.44 % */
    0x2409F700, 0x011F7020, 0x7417087A, 0x89E6285A, 0x222F5843, 0x71416342, 0x1616451A,
    0x88CC5E2B, 0x8D47A371, 0xE4863B20, 0xC8A3F248, 0xA85AD393, 0x65A42694, 0xF330432F,
    0xA1599BA8, 0x387E0120, 0xC704D807, 0x9F8E03F3, 0xF50802C7, 0xBFE8A007, 0x1A8E00A2,
    0x2934AA45, 0xA34BA7D3, 0xB4DA953A, 0x58A9D42A, 0xFABD52AD, 0x71D7838F, 0xC0DEC2C8,
    0x42006FC9, 0xE27E0B7A, 0x8095C638, 0xE21F7DDB, 0xB7411382, 0x76115D1B, 0xCBD88EEB,
    0xBC5E6EED, 0x1DEEFD7E, 0x606EB7D1, 0x17077CBD, 0x31186C06, 0x2209BF61, 0xA17AE3DB,
    0x98723A32, 0x24EC2C37, 0xA2006846, 0x90B65546, 0x0D34ACB6, 0xCC1BA879, 0xF560CD5B,
    0xE5A8063C, 0x3B3D8835, 0xACD6EBB5, 0xCDBED369, 0xDDEA773B, 0xFEEB6FAC, 0x719C7A9D,
    0xC7924E0E, 0xB9A71AE2, 0x604F8723, 0xB04B7531, 0x361A32F4, 0x6ED40FB3, 0x9CCDFB90,
    0xEF840764, 0xF9005E47, 0x8FC2027E, 0x805E7F2F, 0x0BF07D77, 0xAEF9B778, 0x17CA843E,
    0xC10D31D0, 0x17C45BDF, 0xD71530D0, 0x36D0E007, 0x760876DF, 0x03412097, 0x5260E3FD,
    0x94783A0F, 0x184E1084, 0xD94785E1, 0xF23E9F04, 0x7C5EF82D, 0x0B688449, 0xD8940253,
    0xF94C46CF, 0x0A81DB75, 0x8BA0C8B6, 0x232851E1, 0x38D61586, 0x761B51E3, 0x2F8B22E8,
    0x8FC4D012, 0xA28570B2, 0xC6B22A51, 0xC50391E3, 0x368DE348, 0x9220F92E, 0xC4C82E3B,
    0x5908B394, 0x19758A51, 0x5196E1E8, 0x85A4A41A, 0x26193660, 0xE8F65093, 0x044D8FDD,
    0x4990D549, 0x9765A629, 0x5DF97266, 0xE9D64C59, 0x7E659864, 0x6A9A21C8, 0x3FE6C566,
    0x2719BD7E, 0x39DA3C9C, 0xE6359DE6, 0x7C8E60B9, 0x9611895A, 0x2728AD78, 0x297E398F,
    0x0286A5E6, 0x539C28A0, 0x9AE55132, 0x97591257, 0x1A2E84A4, 0x66964D9F, 0x9393EAAA,
    0xA7506AB6, 0x6A19FA9F, 0xA6A68152, 0xE4E17C61, 0xBC35C1EA, 0xAFCD60A2, 0x0D7AF029,
    0x80A2C20A, 0x6827B1CD, 0xCA096CA3, 0xB2ECC36A, 0x6CEB3ECD, 0x5B46D1B1, 0x5ABFB16C,
    0xF7B44293, 0xADC08B74, 0xE8E9027B, 0x69B94C34, 0xD1D640EB, 0xE9BAC160, 0x56EEE570,
    0xAEF566F0, 0x601D54BC, 0xE49C3E2F, 0x05B8063B, 0xA3EA0A34, 0xE46A46A2, 0x7C14B840,
    0xEB080144, 0xF456AF33, 0xC3F0CC36, 0xC7F5330B, 0xEBF080C4, 0xD300ACAF, 0x06C0EA3A,
    0x02B1E3D5, 0x859C84A6, 0x41F72420, 0x972620B2, 0x7ECAC81C, 0x1F881CAC, 0xC8B1F727,
    0x620C74CC, 0x0F361F33, 0x2ECC47C2, 0xCEF391FB, 0xF31CB32A, 0xCD1493CF, 0x53483AC6,
    0xE3AC1DE0, 0xA90DDA42, 0x639D4683, 0x482E6499, 0xDB51A6E1, 0xE4BFF4C4, 0x6CAE651A,
    0x6AED4E65, 0x39E2AB8F, 0x5DF1A536, 0x5F9FD55C, 0x87368037, 0x2A97C761, 0x2D9F57A2,
    0x72E2A327, 0xFCD434ED, 0x4E6A8D62, 0x376A2765, 0xD9A7789C, 0x734FC074, 0xA5D8804C,
    0x00E73E36, 0x78EDD781, 0xDC635B99, 0xD178C6B5, 0x83D678C6, 0x8D374D93, 0xF959CB7E,
    0xD3FEB3DA, 0x3793E876, 0xA9D9B9F8, 0xDE769E13, 0x8D268959, 0x1EA282D3, 0xE4F07875,
    0xE1AE40FE, 0xDC7B6078, 0x54CE8E1C, 0xC2F4424B, 0xD8096454, 0x1C38DC63, 0xF3B9DEFC,
    0xCF9013AD, 0x609806F4, 0x554C367D, 0x303ABDA0, 0x57079219, 0x4B1139C9, 0xB040EF7D,
    0x9C059EB9, 0xEC8E503F, 0x872A6A9F, 0x7EFDC3ED, 0x9F4DF1FA, 0xE47D018F, 0x5A57082F,
    0x4CCA5FF4, 0x5780A8EA, 0xCA0E3038, 0x49442658, 0x609F05B0, 0x0206A7C5, 0x040C5609,
    0x04D30392, 0x504D2A41, 0x52A40B16, 0x25482904, 0x7B0099EB, 0x08803154, 0x128D21F3,
    0x6126C0B6, 0xF00DC641, 0x41789FA3, 0x831185CC, 0x161D0CA1, 0xD088A4C3, 0x9908F900,
    0x1EA0B229, 0x3304E4F0, 0x7340D8E4, 0xFE08E0E2, 0x251BC084, 0x5F0D4F32, 0x3219C348,
    0xABDA89F1, 0xA7FA3A80, 0x50945285, 0x0F582D1A, 0x0002027A, 0x00000000

  EW_BITMAPS_TABLE( AppCollapseBitmap )
    EW_BITMAP( AppCollapseBitmap, Default )
EW_END_OF_BITMAP_RES( AppCollapseBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::CollapseBitmap' */
EW_RES_WITHOUT_VARIANTS( AppCollapseBitmap )

/* Initializer for the class 'App::Events' */
void AppEvents__Init( AppEvents _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEventHandler__Init( &_this->EventListChangeHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ResoundAlarmsButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ConfirmEventButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->AcknowledgeEventButton, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SwitchConfirmEventEvent, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SwitchAcknowledgeEventEvent, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->ResoundStateEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppEvents );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0091 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppAlarmRowItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreRectView__OnSetBounds( &_this->ResoundAlarmsButton1, _Const0093 );
  WidgetSetPushButton_OnSetLabel( &_this->ResoundAlarmsButton1, EwLoadString( &_Const0094 
  ));
  CoreRectView__OnSetBounds( &_this->ConfirmEventButton, _Const0095 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ConfirmEventButton, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->ConfirmEventButton, EwLoadString( &_Const0096 
  ));
  CoreRectView__OnSetBounds( &_this->AcknowledgeEventButton, _Const0097 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->AcknowledgeEventButton, 0 );
  WidgetSetPushButton_OnSetIconFrame( &_this->AcknowledgeEventButton, -1 );
  WidgetSetPushButton_OnSetLabel( &_this->AcknowledgeEventButton, EwLoadString( 
  &_Const0098 ));
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ResoundAlarmsButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ConfirmEventButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AcknowledgeEventButton ), 0 );
  _this->EventListChangeHandler.OnEvent = EwNewSlot( _this, AppEvents_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->EventListChangeHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->EventListChangedEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppEvents_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppEvents_RefreshAll );
  _this->ResoundAlarmsButton1.OnRelease = EwNullSlot;
  _this->ResoundAlarmsButton1.OnActivate = EwNewSlot( _this, AppEvents_ResoundSlot1 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->ResoundAlarmsButton1, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->ConfirmEventButton.OnRelease = EwNullSlot;
  _this->ConfirmEventButton.OnActivate = EwNewSlot( _this, AppEvents_ConfirmSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->ConfirmEventButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->AcknowledgeEventButton.OnRelease = EwNullSlot;
  _this->AcknowledgeEventButton.OnActivate = EwNewSlot( _this, AppEvents_AckSlot 
  );
  WidgetSetPushButton_OnSetIcon( &_this->AcknowledgeEventButton, 0 );
  WidgetSetPushButton_OnSetAppearance( &_this->AcknowledgeEventButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->SwitchConfirmEventEvent.OnEvent = EwNewSlot( _this, AppEvents_onConfirmEventSwitch 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SwitchConfirmEventEvent, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->ConfirmEventAvailable );
  _this->SwitchAcknowledgeEventEvent.OnEvent = EwNewSlot( _this, AppEvents_onAcknowldegeEventSwitch 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SwitchAcknowledgeEventEvent, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AcknowledgeEventAvailable );
  _this->SiteChangeEventHandler.OnEvent = EwNewSlot( _this, AppEvents_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->ResoundStateEventHandler.OnEvent = EwNewSlot( _this, AppEvents_onResoundStateEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->ResoundStateEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->ResoudStateEvent );
}

/* Re-Initializer for the class 'App::Events' */
void AppEvents__ReInit( AppEvents _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEventHandler__ReInit( &_this->EventListChangeHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  WidgetSetPushButton__ReInit( &_this->ResoundAlarmsButton1 );
  WidgetSetPushButton__ReInit( &_this->ConfirmEventButton );
  WidgetSetPushButton__ReInit( &_this->AcknowledgeEventButton );
  CoreSystemEventHandler__ReInit( &_this->SwitchConfirmEventEvent );
  CoreSystemEventHandler__ReInit( &_this->SwitchAcknowledgeEventEvent );
  CoreSystemEventHandler__ReInit( &_this->SiteChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->ResoundStateEventHandler );
}

/* Finalizer method for the class 'App::Events' */
void AppEvents__Done( AppEvents _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppEvents );

  /* Finalize all embedded objects */
  CoreSystemEventHandler__Done( &_this->EventListChangeHandler );
  AppListViewer__Done( &_this->ListViewer );
  WidgetSetPushButton__Done( &_this->ResoundAlarmsButton1 );
  WidgetSetPushButton__Done( &_this->ConfirmEventButton );
  WidgetSetPushButton__Done( &_this->AcknowledgeEventButton );
  CoreSystemEventHandler__Done( &_this->SwitchConfirmEventEvent );
  CoreSystemEventHandler__Done( &_this->SwitchAcknowledgeEventEvent );
  CoreSystemEventHandler__Done( &_this->SiteChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->ResoundStateEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Events' */
void AppEvents__Mark( AppEvents _this )
{
  EwMarkObject( &_this->EventListChangeHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->ResoundAlarmsButton1 );
  EwMarkObject( &_this->ConfirmEventButton );
  EwMarkObject( &_this->AcknowledgeEventButton );
  EwMarkObject( &_this->SwitchConfirmEventEvent );
  EwMarkObject( &_this->SwitchAcknowledgeEventEvent );
  EwMarkObject( &_this->SiteChangeEventHandler );
  EwMarkObject( &_this->ResoundStateEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppEvents_UpdateLayout( AppEvents _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppEvents_UpdateViewState( AppEvents _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppEvents_OnLoadItem( AppEvents _this, XObject sender )
{
  XInt16 itemNo;
  AppAlarmRowItem row;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.View, AppAlarmRowItem );

  if ( row != 0 )
  {
    AppAlert alert;
    XInt32 numAlarms = 0;
    {
      Command cmd;
      Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );
      numAlarms = cmd.int0;
    }

    if ((( numAlarms == 0 ) || ( itemNo < 0 )) || ( itemNo >= numAlarms ))
    {
      CoreGroup__OnSetVisible( row, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)row );
      return;
    }

    CoreGroup__OnSetVisible( row, 1 );

    if ( itemNo == 0 )
    {
      CoreTimer_OnSetEnabled( &row->Timer, 1 );
      row->OrderPosition = numAlarms;
      alert = AppLibClass_GetAlertNum( EwGetAutoObject( &AppLib, AppLibClass ), 
      AppActionBitsEvacuation | AppActionBitsFirstAid | AppActionBitsGeneral | AppActionBitsRoutingAck 
      | AppActionBitsSecurity, numAlarms - 1 );
    }
    else
    {
      CoreTimer_OnSetEnabled( &row->Timer, 0 );
      ViewsText_OnSetVisible( &row->OrderPos, 1 );
      row->OrderPosition = itemNo;
      alert = AppLibClass_GetAlertNum( EwGetAutoObject( &AppLib, AppLibClass ), 
      AppActionBitsEvacuation | AppActionBitsFirstAid | AppActionBitsGeneral | AppActionBitsRoutingAck 
      | AppActionBitsSecurity, itemNo - 1 );
    }

    if ((( alert->flags & AppAlertFlagsSilenced ) == AppAlertFlagsSilenced ))
    {
      ViewsImage_OnSetVisible( &row->Image1, 1 );
    }
    else
    {
      ViewsImage_OnSetVisible( &row->Image1, 0 );
    }

    if ((( alert->flags & AppAlertFlagsCAE ) == AppAlertFlagsCAE ))
    {
      ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
      EwLoadString( &_Const0099 ), EwNewStringInt( alert->unitnum, 0, 10 )), EwLoadString( 
      &_Const009A )), EwNewStringInt( alert->zonenum, 0, 10 )));
      ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &AppCauseEffect2, ResourcesBitmap 
      ));
      AppChannelImage_OnSetBitmap( &row->ChannelImage, AppChannelTypeNone );
    }
    else
      if ((( alert->flags & AppAlertFlagsDevice ) == AppAlertFlagsDevice ))
      {
        ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
        EwConcatString( EwConcatString( EwLoadString( &_Const009B ), EwNewStringInt( 
        alert->zonenum, 0, 10 )), EwLoadString( &_Const004B )), AppLibClass_Unit( 
        EwGetAutoObject( &AppLib, AppLibClass ), alert->unitnum )), EwLoadString( 
        &_Const009C )), AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
        ), alert->chanimg )));
        AppChannelImage_OnSetBitmap( &row->ChannelImage, alert->chanimg );
        ViewsImage_OnSetBitmap( &row->Image, 0 );
      }
      else
        if ((( alert->flags & AppAlertFlagsNetwork ) == AppAlertFlagsNetwork ))
        {
          ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( 
          EwConcatString( EwLoadString( &_Const009D ), EwNewStringInt( alert->unitnum, 
          0, 10 )), EwLoadString( &_Const009A )), EwNewStringInt( alert->zonenum, 
          0, 10 )));
          ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &Appzone3, ResourcesBitmap 
          ));
          AppChannelImage_OnSetBitmap( &row->ChannelImage, AppChannelTypeNone );
        }

    ViewsText_OnSetString( &row->Text, alert->description );
    ViewsText_OnSetString( &row->TimeText, alert->time );
    CoreGroup_InvalidateViewState((CoreGroup)row );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppEvents_onEvent( AppEvents _this, XObject sender )
{
  XInt32 numItems;
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );

    numItems = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numItems );
  ap = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( ap != 0 )
  {
    ap->EventsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->EventsTabButton );

    if (((( ap->AlarmsTabButton.NumberOf == 0 ) || ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const0010 )) != 0 )) && (( ap->FaultsTabButton.NumberOf 
        == 0 ) || ( EwCompString( ap->SelectedTab, EwLoadString( &_Const009E )) 
        != 0 ))) && (( EwCompString( ap->SelectedTab, EwLoadString( &_Const001B 
        )) != 0 ) && ( numItems != 0 )))
    {
      EwPostSignal( EwNewSlot( &ap->EventsTabButton, AppTabButton_OnPress ), ((XObject)_this 
        ));
    }
    else
      if (( numItems > 0 ) && ( EwCompString( ap->SelectedTab, EwLoadString( &_Const001B 
          )) != 0 ))
      {
        CoreTimer_OnSetEnabled( &ap->EventsTabButton.Timer, 1 );
      }
      else
      {
        CoreTimer_OnSetEnabled( &ap->EventsTabButton.Timer, 0 );
        ViewsImage_OnSetVisible( &ap->EventsTabButton.Image, 1 );
      }
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppEvents_RefreshAll( AppEvents _this, XObject sender )
{
  XInt16 itemNo;
  AppAlarmRowItem row;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppAlarmRowItem 
  );

  if ( row != 0 )
  {
    AppAlert alert;
    XInt32 numAlarms = 0;
    XSet settings = 0;
    {
      Command cmd;
      Command0( CMD_GET_NUM_OTHER_EVENTS, &cmd );
      numAlarms = cmd.int0;

      Command0( CMD_GET_SETTINGS, &cmd );

      settings = cmd.int0;
    }

    while ((( numAlarms == 0 ) || ( itemNo < 0 )) || ( itemNo >= numAlarms ))
    {
      CoreGroup__OnSetVisible( row, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)row );
      row = EwCastObject( row->Super3.next, AppAlarmRowItem );

      if ( row == 0 )
        return;

      itemNo = (XInt16)( itemNo + 1 );
    }

    while ( row != 0 )
    {
      if ( itemNo >= numAlarms )
      {
        CoreGroup__OnSetVisible( row, 0 );
      }
      else
      {
        CoreGroup__OnSetVisible( row, 1 );

        if ( itemNo == 0 )
        {
          CoreTimer_OnSetEnabled( &row->Timer, 1 );
          row->OrderPosition = numAlarms;
          alert = AppLibClass_GetAlertNum( EwGetAutoObject( &AppLib, AppLibClass 
          ), AppActionBitsEvacuation | AppActionBitsFirstAid | AppActionBitsGeneral 
          | AppActionBitsRoutingAck | AppActionBitsSecurity, numAlarms - 1 );
        }
        else
        {
          CoreTimer_OnSetEnabled( &row->Timer, 0 );
          ViewsText_OnSetVisible( &row->OrderPos, 1 );
          row->OrderPosition = itemNo;
          alert = AppLibClass_GetAlertNum( EwGetAutoObject( &AppLib, AppLibClass 
          ), AppActionBitsEvacuation | AppActionBitsFirstAid | AppActionBitsGeneral 
          | AppActionBitsRoutingAck | AppActionBitsSecurity, itemNo - 1 );
        }

        if ( !alert->flags )
        {
          CoreGroup__OnSetVisible( row, 0 );
        }
        else
        {
          if ((( alert->flags & AppAlertFlagsSilenced ) == AppAlertFlagsSilenced 
              ))
          {
            ViewsImage_OnSetVisible( &row->Image1, 1 );
          }
          else
          {
            ViewsImage_OnSetVisible( &row->Image1, 0 );
          }

          if ((( alert->flags & AppAlertFlagsCAE ) == AppAlertFlagsCAE ))
          {
            ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( 
            EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const0099 
            ), EwNewStringInt( alert->unitnum, 0, 10 )), EwLoadString( &_Const009A 
            )), EwNewStringInt( alert->zonenum, 0, 10 )), EwLoadString( &_Const004B 
            )), AppLibClass_ProfileName( EwGetAutoObject( &AppLib, AppLibClass ), 
            (XEnum)alert->action )));
            ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &AppCauseEffect2, 
            ResourcesBitmap ));
            AppChannelImage_OnSetBitmap( &row->ChannelImage, AppChannelTypeNone 
            );
          }
          else
            if ((( alert->flags & AppAlertFlagsDevice ) == AppAlertFlagsDevice ))
            {
              ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( 
              EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
              EwLoadString( &_Const009B ), EwNewStringInt( alert->zonenum, 0, 10 
              )), EwLoadString( &_Const004B )), AppLibClass_Unit( EwGetAutoObject( 
              &AppLib, AppLibClass ), alert->unitnum )), EwLoadString( &_Const009F 
              )), AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass ), 
              alert->chanimg )), EwLoadString( &_Const00A0 )), AppLibClass_ProfileName( 
              EwGetAutoObject( &AppLib, AppLibClass ), (XEnum)alert->action )));
              AppChannelImage_OnSetBitmap( &row->ChannelImage, alert->chanimg );
              ViewsImage_OnSetBitmap( &row->Image, 0 );
            }
            else
              if ((( alert->flags & AppAlertFlagsNetwork ) == AppAlertFlagsNetwork 
                  ))
              {
                ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( 
                EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const009D 
                ), EwNewStringInt( alert->unitnum, 0, 10 )), EwLoadString( &_Const009A 
                )), EwNewStringInt( alert->zonenum, 0, 10 )), EwLoadString( &_Const004B 
                )), AppLibClass_ProfileName( EwGetAutoObject( &AppLib, AppLibClass 
                ), (XEnum)alert->action )));
                ViewsImage_OnSetBitmap( &row->Image, EwLoadResource( &Appzone3, 
                ResourcesBitmap ));
                AppChannelImage_OnSetBitmap( &row->ChannelImage, AppChannelTypeNone 
                );
              }

          ViewsText_OnSetString( &row->Text, alert->description );
          ViewsText_OnSetString( &row->TimeText, alert->time );
        }
      }

      CoreGroup_InvalidateViewState((CoreGroup)row );
      row = EwCastObject( row->Super3.next, AppAlarmRowItem );
      itemNo = (XInt16)( itemNo + 1 );
    }
  }
}

/* 'C' function for method : 'App::Events.ResoundSlot1()' */
void AppEvents_ResoundSlot1( AppEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= 2 )
  {
    event( EVENT_RESOUND_BUTTON );
    EwSignal( _this->ListViewer.onRefreshAll, ((XObject)_this ));
  }
  else
  {
    AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    ), 2 );
  }
}

/* 'C' function for method : 'App::Events.ConfirmSlot()' */
void AppEvents_ConfirmSlot( AppEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_CONFIRM_EVENT_BUTTON );
}

/* 'C' function for method : 'App::Events.AckSlot()' */
void AppEvents_AckSlot( AppEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_ACKNOWLEDGE_EVENT_BUTTON );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppEvents_onConfirmEventSwitch( AppEvents _this, XObject sender )
{
  AppButtonState conf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  conf = EwCastObject( _this->SwitchConfirmEventEvent.Context, AppButtonState );

  if ( conf->on )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ConfirmEventButton, 1 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ConfirmEventButton, 0 );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppEvents_onAcknowldegeEventSwitch( AppEvents _this, XObject sender )
{
  AppButtonState conf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  conf = EwCastObject( _this->SwitchAcknowledgeEventEvent.Context, AppButtonState 
  );

  if ( conf->on )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->AcknowledgeEventButton, 1 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->AcknowledgeEventButton, 0 );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppEvents_onResoundStateEvent( AppEvents _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetEnabled((CoreGroup)&_this->ResoundAlarmsButton1, (XBool)( _this->ResoundStateEventHandler.Context 
  != 0 ));
}

/* Variants derived from the class : 'App::Events' */
EW_DEFINE_CLASS_VARIANTS( AppEvents )
EW_END_OF_CLASS_VARIANTS( AppEvents )

/* Virtual Method Table (VMT) for the class : 'App::Events' */
EW_DEFINE_CLASS( AppEvents, CoreGroup, "App::Events" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppEvents_UpdateLayout,
  AppEvents_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppEvents )

/* Font resource : 'App::VerdanaProSemiBold16' */
EW_DEFINE_FONT_RES( AppVerdanaProSemiBold16, 13, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -10, 11, 10, 13, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x000000E0 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -9, 3, 9, 5, 0x000000E0 ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 5, 4, 7, 0x00000146 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 9, 9, 11, 0x00000199 ),              /* '#' */
  EW_GLYPH( 0x0024, 0, -9, 8, 11, 9, 0x000002ED ),              /* '$' */
  EW_GLYPH( 0x0025, 0, -9, 15, 9, 15, 0x00000461 ),             /* '%' */
  EW_GLYPH( 0x0026, 0, -9, 11, 9, 10, 0x00000644 ),             /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 2, 4, 4, 0x000007C0 ),              /* ''' */
  EW_GLYPH( 0x0028, 0, -10, 6, 13, 6, 0x000007E8 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 5, 13, 6, 0x000008B9 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -10, 7, 6, 9, 0x00000973 ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -9, 9, 9, 11, 0x00000A12 ),              /* '+' */
  EW_GLYPH( 0x002C, 0, -2, 4, 4, 5, 0x00000AEA ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -5, 6, 2, 6, 0x00000B2C ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 3, 3, 5, 0x00000B63 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 7, 12, 7, 0x00000B82 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -9, 8, 9, 9, 0x00000C62 ),               /* '0' */
  EW_GLYPH( 0x0031, 1, -9, 7, 9, 9, 0x00000D65 ),               /* '1' */
  EW_GLYPH( 0x0032, 0, -9, 8, 9, 9, 0x00000E05 ),               /* '2' */
  EW_GLYPH( 0x0033, 0, -9, 8, 9, 9, 0x00000F14 ),               /* '3' */
  EW_GLYPH( 0x0034, 0, -9, 9, 9, 9, 0x00001033 ),               /* '4' */
  EW_GLYPH( 0x0035, 0, -9, 8, 9, 9, 0x00001122 ),               /* '5' */
  EW_GLYPH( 0x0036, 0, -9, 8, 9, 9, 0x0000123E ),               /* '6' */
  EW_GLYPH( 0x0037, 0, -9, 8, 9, 9, 0x00001367 ),               /* '7' */
  EW_GLYPH( 0x0038, 0, -9, 8, 9, 9, 0x00001454 ),               /* '8' */
  EW_GLYPH( 0x0039, 0, -9, 8, 9, 9, 0x000015A5 ),               /* '9' */
  EW_GLYPH( 0x003A, 1, -7, 3, 7, 5, 0x000016CC ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -7, 4, 9, 5, 0x00001715 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 9, 8, 11, 0x0000178C ),              /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 9, 4, 11, 0x00001891 ),              /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 9, 8, 11, 0x00001931 ),              /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 6, 9, 8, 0x00001A3A ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 11, 10, 13, 0x00001B09 ),            /* '@' */
  EW_GLYPH( 0x0041, 0, -9, 10, 9, 10, 0x00001CDB ),             /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 8, 9, 9, 0x00001E0A ),               /* 'B' */
  EW_GLYPH( 0x0043, 0, -9, 9, 9, 9, 0x00001F05 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 9, 9, 10, 0x0000202E ),              /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 7, 9, 9, 0x0000212D ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 7, 9, 8, 0x00002226 ),               /* 'F' */
  EW_GLYPH( 0x0047, 0, -9, 10, 9, 10, 0x000022DF ),             /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 8, 9, 10, 0x00002443 ),              /* 'H' */
  EW_GLYPH( 0x0049, 0, -9, 6, 9, 7, 0x000024EF ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 6, 9, 7, 0x00002588 ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 9, 9, 10, 0x00002615 ),              /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 7, 9, 8, 0x00002709 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 10, 9, 12, 0x00002784 ),             /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 9, 9, 10, 0x00002879 ),              /* 'N' */
  EW_GLYPH( 0x004F, 0, -9, 11, 9, 11, 0x00002934 ),             /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 8, 9, 9, 0x00002A95 ),               /* 'P' */
  EW_GLYPH( 0x0051, 0, -9, 11, 12, 11, 0x00002B6E ),            /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 9, 9, 10, 0x00002D2B ),              /* 'R' */
  EW_GLYPH( 0x0053, 0, -9, 9, 9, 9, 0x00002E33 ),               /* 'S' */
  EW_GLYPH( 0x0054, 0, -9, 9, 9, 9, 0x00002FAA ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 8, 9, 10, 0x00003063 ),              /* 'U' */
  EW_GLYPH( 0x0056, 0, -9, 10, 9, 9, 0x0000310F ),              /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 14, 9, 14, 0x0000321F ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 10, 9, 9, 0x000033BC ),              /* 'X' */
  EW_GLYPH( 0x0059, 0, -9, 9, 9, 9, 0x000034F4 ),               /* 'Y' */
  EW_GLYPH( 0x005A, 0, -9, 9, 9, 9, 0x000035D5 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 1, -10, 5, 12, 7, 0x000036F8 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 7, 12, 7, 0x0000377D ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 4, 12, 7, 0x0000385F ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 9, 5, 11, 0x000038D5 ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 9, 2, 9, 0x00003972 ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 4, 2, 9, 0x000039CC ),              /* '`' */
  EW_GLYPH( 0x0061, 0, -7, 8, 7, 8, 0x000039EB ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 7, 10, 9, 0x00003AC5 ),             /* 'b' */
  EW_GLYPH( 0x0063, 0, -7, 7, 7, 7, 0x00003B95 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -10, 8, 10, 9, 0x00003C5D ),             /* 'd' */
  EW_GLYPH( 0x0065, 0, -7, 8, 7, 8, 0x00003D3C ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -10, 6, 10, 5, 0x00003E44 ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -7, 8, 10, 9, 0x00003EE9 ),              /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 7, 10, 9, 0x00004010 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 3, 10, 4, 0x000040A7 ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -10, 5, 13, 5, 0x000040EB ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 8, 10, 8, 0x00004195 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 2, 10, 4, 0x0000425F ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 12, 7, 13, 0x0000427D ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 7, 7, 9, 0x00004357 ),               /* 'n' */
  EW_GLYPH( 0x006F, 0, -7, 8, 7, 8, 0x000043D7 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 7, 10, 9, 0x000044B9 ),              /* 'p' */
  EW_GLYPH( 0x0071, 0, -7, 8, 10, 9, 0x0000459E ),              /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 5, 7, 6, 0x0000468E ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x000046ED ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -9, 6, 9, 6, 0x000047D8 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 7, 7, 9, 0x00004873 ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 8, 7, 8, 0x000048E3 ),               /* 'v' */
  EW_GLYPH( 0x0077, 0, -7, 12, 7, 11, 0x000049B4 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 8, 7, 8, 0x00004AEF ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -7, 8, 10, 8, 0x00004BCD ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -7, 7, 7, 8, 0x00004CCC ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 7, 12, 9, 0x00004DAF ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -10, 3, 12, 6, 0x00004EAD ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -10, 7, 12, 9, 0x00004EDD ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -6, 9, 4, 11, 0x00004FDE ),              /* '~' */

  EW_FONT_PIXEL( AppVerdanaProSemiBold16, 0x00005087 )          /* ratio 82.34 % */
    0xDEF7BDCF, 0xF47DEF7B, 0x7BDEF7BD, 0x0000001B, 0x00000000, 0xF7D00000, 0x6DEF7BDE,
    0x5C85FDCF, 0xE370C420, 0x39AEF1AE, 0xFEEFFFF7, 0x25AC6422, 0xF075A646, 0xF507D6BE,
    0xDEE2BBF7, 0xFDF1DDFC, 0xEF38F4E3, 0x8A9C5B38, 0x3C4444F3, 0xFB09C627, 0x9F54F78C,
    0xEEE37FF8, 0x9FEC37BC, 0x07E3015F, 0xFFAFF7E3, 0xDEBFE32F, 0x78C88BF1, 0x31BF359E,
    0xDF9FFE6A, 0x98D7B7E4, 0xEAFC62EF, 0xAADF8F6F, 0xAF8CFF6C, 0xDF19DEAB, 0x009ED77F,
    0x0BFEFFD4, 0xFCEF06FF, 0x5E3597CD, 0x53B5DC88, 0xE4406FBC, 0x2C7A9DAE, 0xF9BF9DE0,
    0xF7DCECE6, 0xFDFFA93F, 0x379E3BD7, 0xAA01D57E, 0x8FF559AE, 0xB30CFD04, 0x93C244EA,
    0xD5BF1BCD, 0xF773BE21, 0xEFCF7E03, 0xE6604BEF, 0x9C6F018A, 0x1805F9F7, 0xDEF3F663,
    0xF3EEFE21, 0xE33190BE, 0x90C6B9EB, 0x11995D51, 0xF99FFC43, 0x3FFB67EB, 0xCC4733FF,
    0xC939C411, 0xAA34BF17, 0xA5073E1E, 0x08041990, 0x83CA1320, 0x7AAA83BF, 0xDF2FC5F0,
    0x0D63BCDB, 0xC959535A, 0x03247163, 0xA3C91C06, 0xED685654, 0xFC606B1D, 0x37E24EF0,
    0xEFCEE77E, 0xB9F4018C, 0x9DE33BF3, 0x9E206FC4, 0x004BF200, 0xBBDEF000, 0xEFDF7BED,
    0xDF7F5AFB, 0xD4A79E37, 0x88000CF3, 0xF5F7180A, 0x995A9F8B, 0xDEF713F9, 0xF77744FB,
    0x4F73118A, 0xE330D380, 0x181AFF07, 0x4C5F87F5, 0xFC661398, 0xA3035FE0, 0x098BF0FE,
    0x1F8CC273, 0xFDDCF788, 0xF8EACDF0, 0xD6F8D446, 0x8F0F4BEB, 0x81310267, 0x278F0F48,
    0xF5EB7C6A, 0x7C7566F9, 0xFBBF3C63, 0xEF057DF0, 0x0000009D, 0x771EB500, 0xA787BFC5,
    0x7E7BEF53, 0x53E6B583, 0xBDFFF0FF, 0x112911BF, 0x06F9D091, 0xFC45CD7A, 0xAEC4BF66,
    0xE993D6B2, 0xDDE3EEE9, 0x9AC5EEE7, 0xE74F476F, 0xF027EB5B, 0x7C4E5FAC, 0x39C09E3D,
    0xD888BD73, 0x577FF19E, 0xAAB97EBF, 0xF782F457, 0x602F40FE, 0xFA781FCE, 0xAFDFA82B,
    0x7BBE3FC0, 0x777F8DD4, 0x6B51D92F, 0x005CD7AD, 0xEF7BDDF8, 0xFBBAB17D, 0x55AD778F,
    0xF8BFF7B8, 0xBA37BFBF, 0xA3CCF9CD, 0xEFF15840, 0xF51B8EB9, 0x15FCEFBC, 0x09EFFDF9,
    0x9DE7AF63, 0xC767BB5C, 0xE73BF918, 0x3DFEC535, 0xF3E6A5F3, 0xC8C24B59, 0x7CF9FAA7,
    0xF5BF35BE, 0xBDEF71AE, 0xBBB3FEF7, 0xD6B111FB, 0xA9E1A15A, 0x6178E82A, 0x1BE44AE5,
    0xA06F1D0D, 0xBF20B19E, 0xADCDFF73, 0x8DEB9BF7, 0x46BCF5CC, 0xF3ABD8D4, 0xACFD19D5,
    0x9FFCFFC8, 0x218ACE7E, 0x73158C56, 0xF93C5F3D, 0xAE6FDE7F, 0xEEE77C4F, 0x8EACFD87,
    0x779F2AAF, 0x860C371D, 0xD3D6B159, 0x4BFD97C4, 0xFE7BED53, 0xAFCE6AFE, 0x9DF7CA6B,
    0x0FEE33FD, 0x44227CE3, 0xB8C1F38C, 0x47CE303F, 0xF5F71804, 0x995A9F8B, 0xEF8C03F9,
    0x8577B981, 0xF7AEF3EC, 0xB9CFFAD4, 0x0908937F, 0xDED77DE6, 0xDFFEB113, 0xF3C14F7A,
    0x7B9E2BDB, 0x3EF7BDEF, 0xEFBEFBEB, 0x6005BEFB, 0x7DF7DF7D, 0x779EB7DF, 0xEFF6B100,
    0xFAEFBA81, 0xB9882BFE, 0x04EF7AF7, 0xDBF98229, 0x9D57FE73, 0x53A7BD77, 0x7C27BDAC,
    0x58BE7BFF, 0xFDF3D74F, 0xDA167D7B, 0x4DFA9C67, 0xDCF16E33, 0xC857E781, 0x7FF7C80A,
    0xEF30AFCF, 0xBB73DFFE, 0xFF8EDF8D, 0xEABBBFF9, 0x4F66F9FD, 0x45557FBE, 0x40F3CDCF,
    0xE5ACF2C0, 0x9FB13F9D, 0x7E7DE3DB, 0xD5FCCF2B, 0x7FFCF3B7, 0x3AD27BFF, 0xC0D3DCE7,
    0x45F007BA, 0xC6F9504C, 0x8D678E07, 0xDB91A881, 0x4F3F1987, 0xDEFA7C2C, 0x7C72A988,
    0x1DFCB7DF, 0x3D3CF3EF, 0xBDEEFC6A, 0xBAB037E7, 0x9F5DE0EA, 0x8BCB1A81, 0xB9C2776F,
    0x6C417AA7, 0xB6ACF587, 0xDE37BF79, 0xF7FF7C87, 0x67B1A6FC, 0x6E7F35CC, 0x7FDF7EF4,
    0x4F0588E7, 0x40184018, 0x6E50588E, 0xFF7DEFF4, 0x9CE7B1AF, 0xDEEFF56B, 0x581EFFFB,
    0xE2F7D56B, 0x2CE76FED, 0xA40D9F90, 0xFC805200, 0xDBFB78FC, 0xAD6B06B9, 0xEF77EDDA,
    0xBAB2F7BD, 0x5AD779BB, 0x4F3CF58B, 0x77DF7EF1, 0x8F9CE7D9, 0x5DE0888C, 0x77562D6B,
    0x7BDEEFF7, 0xEEEACBEF, 0xAB5AEF3F, 0x6F7B9C00, 0x783BBAB0, 0x00005AD7, 0xECF7FFA2,
    0xB9AEF215, 0xE274EAE6, 0xFEFF75FD, 0x64272399, 0xEF7BC984, 0x7DF2615D, 0x31F2392F,
    0xDF1B859E, 0xB8C3FAB7, 0xEB5CF66B, 0xFFC0DDF9, 0x9EB00002, 0xFBF781E7, 0xF7B7C4BE,
    0x0318D44E, 0xF7B88000, 0x30F45FDE, 0x1EF8F58F, 0xEB000000, 0xC3D13DF1, 0x77BDD63C,
    0xB58C2EA9, 0x97000001, 0xB2A77DF7, 0x77E37E66, 0xC0FEE783, 0xF20FD5F8, 0xCDE41F9F,
    0x021DC07F, 0xA07E3DBC, 0x7817ACE6, 0xCBE02E6B, 0x00377E7E, 0x00000000, 0xFBEF7E00,
    0xCE733C3E, 0xEC1FBBFD, 0x3524F2FB, 0x82DC7EA0, 0x039F22BB, 0x26B7F395, 0x03F5DF78,
    0xE024F19E, 0x7E0003FF, 0xC1BBF1B7, 0x02F3C04C, 0x7201E7DE, 0xC02DA036, 0x7CC05DEF,
    0xBE41A006, 0xC0EFFBFF, 0x5AF56BD8, 0xFBF1B83B, 0x93F9D7D6, 0x78AC1F23, 0x08860984,
    0x23910C13, 0x6E28CC1F, 0x76F5DEFC, 0x56BD8CBE, 0x77E9DAD7, 0x81BFFDEF, 0x8FF35DF7,
    0x0231BF35, 0xF1BF3580, 0xD6BBEF04, 0x0DFF7387, 0xFEF10000, 0x7903BFEF, 0x76B5EAD7,
    0x5BEFC6F0, 0x544FE75F, 0xD251583E, 0x4C222304, 0x8591C830, 0xBE370A8A, 0x2F17F4F5,
    0xB7EF5FE3, 0x77C6276A, 0xE94049DA, 0xC6F180B9, 0x7BDDF9FB, 0xF560AFCF, 0xAEF02FAA,
    0x98C122B7, 0x8EEE7031, 0x1ACBBC3F, 0x17A9FAB0, 0xC05CC6F8, 0xDF91FB3F, 0x23DFFFB9,
    0xE7DFBD76, 0x59EB58A8, 0xDEB4CFBF, 0xCBF18527, 0x0FFFFDF9, 0xE4F7CFB5, 0xF3C4322F,
    0xEFBAE455, 0x6319FA7C, 0x67BFA7AD, 0xBDEFFDFE, 0xFEFBDEF7, 0xFBA787BA, 0xDC7AD73F,
    0x00000AB5, 0x00000000, 0x17B85FF8, 0x00000000, 0xE4315310, 0xDFEFBDF1, 0x9ACF7CF7,
    0x0EEFCEF9, 0x1F1DFFF8, 0x0B2A7E46, 0x072F879F, 0x33E3C955, 0x7CAB20F2, 0xAAC9C0F1,
    0xFCE89E09, 0x818C6B01, 0xFEE32775, 0xA6C78FB1, 0xCC8F9264, 0x8A947EC5, 0xEE78654D,
    0xAB6286B8, 0x63B2AA8A, 0xC463FE50, 0x62167CCE, 0xBF152ED4, 0xCF1BF0D8, 0x4A0A59E6,
    0x50463B14, 0x7EE787F7, 0xBF12D56A, 0x8EF1E8FC, 0x5FE381CF, 0x115C80EF, 0xD1158C0B,
    0x0AB5D8E0, 0x8DF2FE6F, 0x1F39CC37, 0xDDF3F9D9, 0x2FF6F307, 0xF8ECBF1A, 0xF2F95B65,
    0x53EF1CD4, 0x20FDFD78, 0x2E01BC67, 0xBDC00000, 0x877BDEF7, 0xC229EEEE, 0x7E3E6B5A,
    0x07E8DF09, 0xD60B9ADE, 0x1E9E17AC, 0x679FC83F, 0x8446B5AD, 0xCF5DDDD9, 0xBF3177BD,
    0x0024FD87, 0xD8000000, 0x67BF324F, 0x3E3301DE, 0xC5F81730, 0xF81F5184, 0x3E33018F,
    0xC5F81730, 0xF81F5184, 0xBE33018F, 0xFDF7BDFF, 0x00167A86, 0x67A80000, 0xEB01BF79,
    0xF1BC603E, 0xEFE3384B, 0xFC77CDE0, 0xCAB9AB46, 0x7BDD56B3, 0xDEF7BDEF, 0x7BDEF7BD,
    0xF9B7EDEF, 0xEFFEF6AD, 0xFBF10FD9, 0x67A97E75, 0xDF3C29CD, 0x73EA2CFF, 0x6786936E,
    0x9FFAE733, 0x0001FEE4, 0x979FFAC0, 0x25CE5FDC, 0x41F8EB7F, 0x98D3080A, 0xFF8C73F3,
    0xBC47DF3B, 0x3FE9EEE7, 0x8C7B57D7, 0xA6FE9F7A, 0xC6A03084, 0xFCFACFD3, 0x1B7EFCE7,
    0x0001773C, 0x179CEF88, 0x937F33DF, 0x973F4F51, 0x03A60FE9, 0x5F35AE46, 0x217FEC9C,
    0xC3F773DE, 0xF5BF7EB7, 0xA9F351CB, 0xEEB4DF1B, 0x9E6989FD, 0xB18F4E73, 0xF2EF3E66,
    0xC6FEDF5F, 0xCA73BE23, 0x34DFBCFB, 0xDCB7CAAC, 0xAF7D2FBF, 0x000053C1, 0xCE77C400,
    0xA9EF9777, 0xDF551837, 0x4C1B4C3A, 0xD6A2307F, 0xFECFF17C, 0xFDDF630A, 0x667AE617,
    0xD7DF12C7, 0x0FF71FF3, 0xFFD60000, 0x2AFE42FE, 0x7DFB95EB, 0x0000580D, 0x3BA37B80,
    0x00BFF2D6, 0x9FEE2000, 0xB4D61FE8, 0x5E79FDEE, 0x000002E4, 0x72D3E418, 0xFEFAAAFE,
    0xF8000001, 0xF3DF019D, 0x174FBC0D, 0x5F884A72, 0xC751897E, 0x9F9D180D, 0xE00005FF,
    0xBCFFD7FE, 0x43FF9DF1, 0xAAF31AEE, 0xF7BF91FC, 0x8ABEFDE7, 0x00000180, 0xFB800000,
    0x91F3FF5F, 0x92CF1ABF, 0x581D7DFB, 0xF1000000, 0xFE1FBB9E, 0x357D7DEB, 0xB8F35AC6,
    0x70CD21D3, 0x5AC6B348, 0xD7FAEBCF, 0xEEAFADFB, 0x4BCFFD7F, 0x4B9CBFFE, 0x07EFEB7E,
    0x634D2021, 0x7FF0E3CE, 0xDF8C7DE3, 0x80004FFD, 0xDDF9CEF8, 0x2FE67BE5, 0x73F4F518,
    0x3A60FE99, 0xF5EAE460, 0x3DFAE4E2, 0x0DEEFB18, 0x3FFDC000, 0x3D746DFF, 0x017DFFC6,
    0xEFB3C000, 0x3DF18DF9, 0x1A731BFB, 0x59E7E9EB, 0xD4BF3BF5, 0x9EFD7767, 0xF1CCE12E,
    0xFE5ADFED, 0xEE9BC017, 0xBEFA5F1D, 0x004F3C1C, 0xD0E7A980, 0x7FBAF563, 0x00017DC6,
    0xD7E46000, 0xFA9E3B87, 0xF790FBE8, 0x5F1E5CFD, 0xC31BF156, 0xF1F1CA89, 0x8589FFC4,
    0xF02B7EB9, 0xDEF1F18B, 0xEFCBEE30, 0x5151EFEF, 0xDB62A53C, 0xCD88E66F, 0x9EB35153,
    0x58F61E27, 0x07DF7B15, 0x4F56DF8F, 0x1966646D, 0x3F3A8B23, 0x6B7ACEFA, 0x7AD39AD5,
    0x745EAFDE, 0xF91385C4, 0xCEF8EF06, 0x35D9CCF8, 0xC3EFBABA, 0xF0E7EFB8, 0x985565F3,
    0x13E63863, 0x4EFC4F1F, 0x2B51CC2C, 0xC603E3F0, 0x5107D780, 0xBDEE30B1, 0xBEFCDEF7,
    0x79E2786F, 0xD3C7D472, 0xF2FC63E3, 0x4F1FF21F, 0xEB0ACF3D, 0xB9F43EFB, 0xDF3D678B,
    0x0127EA43, 0xFDC18BF2, 0xC73D1FC7, 0x333EF587, 0x30002FE1, 0x7AD493F4, 0x01BDE7BE,
    0xE0000000, 0x7DE1777F, 0x15CD43F3, 0x7ED80C01, 0xBEEBBCF0, 0x3FAC6FC4, 0x8E2EDF33,
    0x95CD4007, 0x81E6FBC1, 0xFDE2ECEF, 0x1BE327CF, 0xEFB1D89E, 0x6FC6FFF8, 0xF53EF23E,
    0x0000002C
EW_END_OF_FONT_RES( AppVerdanaProSemiBold16 )

/* Table with links to derived variants of the font resource : 'App::VerdanaProSemiBold16' */
EW_RES_WITHOUT_VARIANTS( AppVerdanaProSemiBold16 )

/* Bitmap resource : 'App::SilenceBitmap' */
EW_DEFINE_BITMAP_RES( AppSilenceBitmap )
  EW_BITMAP_FRAMES( AppSilenceBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSilenceBitmap, Default )             /* ratio 13.19 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x1A4B519B, 0x7E96513C, 0x28C723A9, 0x017EBA17,
    0x97F94072, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0x6128964B,
    0x3178ACAA, 0x0F86C4E2, 0x782C2E13, 0x9FCF20D0, 0xCB040302, 0x4D10EF36, 0x2A5F318C,
    0x65D4CA4D, 0x97509953, 0xF51A9D3A, 0xC2A3C7E9, 0x5433CDB4, 0x83500030, 0xAD4A8B43,
    0x59AC754A, 0xA6CB68AB, 0x6C76CB25, 0x753CADD6, 0x567A38CE, 0x6BB6DDAD, 0xABBDE2EB,
    0x84D1EF57, 0x143A18FA, 0x61AF37D5, 0x79FF87BE, 0x1FEEB61A, 0xF6E95EA5, 0xD54C2E4A,
    0xA178B496, 0x3CA3926C, 0x47673139, 0x5B79FF16, 0xBF5FEF87, 0xF1F4FFD3, 0xD7EFF7EB,
    0x119D7935, 0xE1D95ECB, 0x747198C9, 0xAD9EEB3D, 0x79B75917, 0x669F51A6, 0xEB383C3D,
    0x7380DB62, 0x3734FE5E, 0xD9B1DDEF, 0xEED63A96, 0xC6D5BEDF, 0x8EDF17B3, 0xE872B91A,
    0x8F8B9FCC, 0x2E91F7AE, 0xCDD8FF74, 0xB85DA7D3, 0xB3EFE27B, 0x3B06CB0B, 0xF8F0793C,
    0xF6647FC7, 0xF87B5E8D, 0x6027FE00, 0x5368C371, 0xE9F77E5F, 0xA858E087, 0x6ADD5324,
    0x61177201, 0xE80A127C, 0xDA18825D, 0x904C61A7, 0x3B9912EC, 0x2033ECF4, 0x684E2485,
    0x66067CA2, 0xB38AE0B8, 0x3D4E2341, 0xE1589E23, 0x380A258C, 0xE60A81DF, 0xAB5DE2A8,
    0x8C4EE32C, 0x0F83D240, 0x8298FF3F, 0xD8F1754C, 0x328D2223, 0x86E177C6, 0x92B9423A,
    0x0644BC24, 0x3240928F, 0xD02C8FF9, 0x2712B3BC, 0x0F2634C2, 0x89965A96, 0xC4D52EDA,
    0xF69AE3B3, 0x8C0E4351, 0x8D789E66, 0xD5B0F639, 0x24FF6309, 0x5A8D64B9, 0x3DCE836A,
    0xD928B26C, 0x1978CE2B, 0xDCF380A7, 0x9163E223, 0x3049B5E9, 0x67B95D8D, 0xA3E5AC93,
    0x56466B0F, 0x6BA6E527, 0xA24FFA31, 0x1F196693, 0x07DA5EA1, 0xC66498A6, 0xAC3ECF97,
    0xA68CA2A5, 0xD77A7282, 0x5A1E759C, 0x066F34E1, 0x8D9DD1BA, 0x3D1EC7A9, 0x8AA910F7,
    0x3B16BA8F, 0x8A5D2CD6, 0xFFA4A27A, 0xAC68D950, 0xA08946D0, 0xF3A8BE25, 0xDA44908F,
    0x3F8F5F1A, 0xB46C6ACA, 0xA809FA18, 0x08BA01B6, 0x82E8B7A3, 0xF0659F6B, 0x3BE02B28,
    0xE1D3FE21, 0xFBD6D2B3, 0x48988EAD, 0xF93D8FF4, 0x7C67CB64, 0x20D3FE10, 0x5BA6F6AC,
    0xA8DE8230, 0x27BFEE33, 0xBDDFD32E, 0x992C1B10, 0x49A8D42E, 0xFEBE766E, 0x127A1E63,
    0x53EEAC77, 0x0FFA409A, 0x5BB9AA3E, 0x91D83F1C, 0x113B0C72, 0x6CF07C7F, 0xDA53B0E1,
    0xF31DC5C5, 0xE32FCB5B, 0x1E2456CC, 0x3A5F1C9A, 0xC8E7B0F1, 0x9C7B3A79, 0xBAE65EB3,
    0xA16B1D7B, 0xD1B2C314, 0x192CBB45, 0x2B625E97, 0x42293120, 0xF6D4B5AD, 0x7F0FF4D9,
    0x48D85DFE, 0xCD1F5B68, 0xA766D9F5, 0xB822F3AD, 0xDA94839C, 0x23AD4765, 0x76D76EDB,
    0xA378DC5B, 0xE3DD9D1D, 0xDE598658, 0xAEBDEB70, 0x3600A143, 0xCB6F4597, 0x2BE038AD,
    0x0C90A5FD, 0x0868DD3C, 0x1E0B94E3, 0x7C855BD2, 0x050053D5, 0x738853CE, 0x339E5B8B,
    0x1E655A56, 0xEB9AE694, 0xA1BB0324, 0xE57A0DF0, 0x14755381, 0x8EABACDF, 0x010140FA,
    0x00000000

  EW_BITMAPS_TABLE( AppSilenceBitmap )
    EW_BITMAP( AppSilenceBitmap, Default )
EW_END_OF_BITMAP_RES( AppSilenceBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SilenceBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSilenceBitmap )

/* Bitmap resource : 'App::HeatBSensorBitmap' */
EW_DEFINE_BITMAP_RES( AppHeatBSensorBitmap )
  EW_BITMAP_FRAMES( AppHeatBSensorBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppHeatBSensorBitmap, Default )         /* ratio 28.70 % */
    0x1C080100, 0x8FD7F028, 0x1D7C3C1F, 0x47F0A5D4, 0x7C3E5EBE, 0x1115F3EC, 0x161F451F,
    0x88CC5E2B, 0x8D47A371, 0xE4863B20, 0xC8A3F248, 0x9A472593, 0x62510924, 0x750D7CC3,
    0x83D88B01, 0x2D81CDA0, 0xF83C78B5, 0x9E4F61AF, 0x1D02833E, 0x5167E3FA, 0x1A8947A1,
    0xA9948A5D, 0x9F50A6D2, 0x547A4D4A, 0x5B201023, 0xD1EB0608, 0xAA4EC7C3, 0x1546C14E,
    0x9157F4AB, 0xA998FF22, 0x9AEFF351, 0xB0FF4522, 0x6FF48A45, 0xFF40201A, 0xD2F97D90,
    0xBFD86AF3, 0x054F0163, 0x8F0791AC, 0x05650D1F, 0xA7D83C5E, 0xFE4B25B0, 0xEAA55389,
    0xEC763E5F, 0x97CBF5FE, 0x77BE9FEF, 0x5BAF2CEF, 0x3D1F6FF7, 0xFF399A7A, 0x5BEDF7A3,
    0x833DB7DB, 0xB64C1104, 0x89DBED36, 0xCC6C4E5B, 0x2B3176DB, 0xFEB75656, 0xBA9D4F87,
    0x5D2EDB7F, 0x4BAC77FA, 0x84429E97, 0xE4321CF4, 0x4723AFDF, 0xF359AED2, 0x592C9C8F,
    0xB3D9F8FF, 0x2F9D2FF7, 0xE3A9D65F, 0xAC1EBDEE, 0x6D8CDD6E, 0xD3C5ED37, 0xFF66B35D,
    0xF6E371E6, 0x2914986F, 0xD745C94B, 0x5398E63D, 0xFCF23C9A, 0xC8320EC3, 0x15CC53FC,
    0x4CE52C57, 0x981C711C, 0x6C9B3760, 0xF186DED2, 0x445EF3FD, 0x9EC7C9BB, 0x5194CA4F,
    0xE0F86686, 0x6E334FF3, 0x3554B1B8, 0xA2821886, 0x38A4FD8A, 0x80F58DE3, 0xC03FCE03,
    0x3794B760, 0x5C4284A1, 0x57A4E93A, 0x0E48875D, 0x234BA1F6, 0x21CD27B2, 0x0F067887,
    0xC3FE463C, 0x78F44F0B, 0x358DCDE3, 0x976368D2, 0x88235237, 0x78521220, 0x60583163,
    0xB69361C1, 0x9AE2192D, 0xA31349B6, 0x63C4F167, 0xFC44111D, 0x4C130C13, 0x3D4F5784,
    0xA8297E5C, 0xC3722A97, 0x3D4B2709, 0x671D0743, 0xA3E70702, 0xA499B93E, 0x932D4588,
    0x75A91A46, 0x62188C96, 0x3C53C878, 0x28135CD7, 0xD5B6A3A1, 0x754B2348, 0xF73FE873,
    0x6C4E739C, 0x290A4DB3, 0x89B2924F, 0x16AC745B, 0xA337CFF8, 0x28A3F28C, 0xE60A94A2,
    0x832E36B0, 0xD2551A06, 0xE33FE3A3, 0xACCAD2B4, 0x6B56DE94, 0xD376B2B4, 0xB9962749,
    0xC23FCEE3, 0x7304E138, 0xDE11705C, 0x38DAC278, 0xF4DB36CF, 0x8C5B4405, 0x792E3230,
    0xEB273DCD, 0x0B4D4ABC, 0x40C15FED, 0xE4916436, 0xA78B12C4, 0x0B839945, 0x18AAE52E,
    0xFC7A1E8D, 0x55154C43, 0x3B4ED658, 0x2F765192, 0x0881EEBD, 0x56B2AD9F, 0x9A210843,
    0x3FCF73DD, 0x8781E0D0, 0x41284A9E, 0x8237719C, 0x7729CA73, 0x344EF9E6, 0xA5A6ACD1,
    0x3124499E, 0x5AF5C631, 0x8FC5220C, 0x2E4B939E, 0x5D668DC4, 0xB8E4FFCD, 0x40D69823,
    0xA5380FF9, 0x6819E294, 0x29DA6CFF, 0x2CE754CF, 0xE2D4C5D1, 0xE131D60C, 0x14CC28DE,
    0x2CBD1453, 0xCD28D598, 0xFCC9324E, 0xB72DCE63, 0xDBF59CDC, 0x24CCEA1E, 0x57D21DDC,
    0x18FFDD94, 0x5E16C5B3, 0xD8850143, 0x7658DB47, 0x6DA76794, 0xB8B62D8E, 0x72A478AD,
    0x517559BF, 0x8FF9E0BF, 0x3360D83C, 0xC8D93679, 0xC29825BC, 0x8DF80DF8, 0xB6882B83,
    0xAE2F88DA, 0x3EF65FF5, 0xE8755D3E, 0x794C0300, 0x20A304C1, 0x11475E83, 0x9B64E7C5,
    0x89E1FA3D, 0xAD3BEEAB, 0xED1EFF8D, 0xFD7B7B31, 0xEB82EE1F, 0xC2E9786E, 0xE9FA9E2B,
    0x3785F9F3, 0x0E72E2D7, 0x862AF236, 0xBDE9385E, 0x9B7DEF43, 0x94BF7FC1, 0x33ED6859,
    0x9DE13CCF, 0xD6A027E6, 0xE8346D87, 0xE1BF73CA, 0xC5A9EA2F, 0x52328C16, 0xFD204813,
    0xF3F3CE79, 0xAE0A7B74, 0x520A41BE, 0xCC69AAEC, 0xA8D797F2, 0xFDEC0540, 0x63BB7B43,
    0x41CA7B1E, 0x4BBC5A0B, 0xD302544A, 0x28A34267, 0x800AC946, 0xF15ADBA6, 0x6119D336,
    0x1081D030, 0xDAF75E5C, 0x913113C4, 0xF3C71889, 0xC1A4AE05, 0xEC743E07, 0x8D71AC63,
    0x21B3642F, 0x2FCD5210, 0x1642C8C6, 0x15C426F2, 0xDC848999, 0xE30A1862, 0x1610BBC7,
    0xB8E11C2D, 0x80903011, 0x2F861E84, 0xDF21B680, 0x2A55330D, 0x7DEA3861, 0x045C23B9,
    0xBF313857, 0xE81D03DC, 0xE8B6D6C8, 0xF8F62477, 0x0C3C7A10, 0x8110355D, 0x43687F88,
    0xE2FB5E39, 0x462792D8, 0x19CE2A15, 0x8DC38070, 0x5E0BC1D0, 0x588DEA3C, 0x87104DBC,
    0x2D0839C8, 0x0BF28FB1, 0xF7F8FE8C, 0x81C8390C, 0x46832664, 0x2B90EA1D, 0x5B43E903,
    0x301712E0, 0x4B0FF2CE, 0x79722A61, 0x1715CF9A, 0xDC6843C7, 0x13200EE1, 0xB1AC3FD9,
    0x51704588, 0xA47A6918, 0x9818FCE8, 0x15C2B871, 0xA80D52C2, 0x13A25544, 0x0D416DE1,
    0x522A470A, 0xEC740FF1, 0x5BA81762, 0xC8B4EAA5, 0xA8DD8F0F, 0x5CE31F9A, 0xC7C8C111,
    0x31B2465D, 0xDF1E217E, 0x3786F19A, 0xB039C5E4, 0xE4AE0A62, 0xECBCB981, 0x98F01FE5,
    0xE43C34C6, 0x6D5DC617, 0x8A0BE267, 0x96B1965F, 0x1A33F4B4, 0x36DAF435, 0x39BD98F7,
    0xCD89AF6D, 0xEC340A6B, 0xF87F8760, 0x60CD680C, 0xE9A21B03, 0x93E48D12, 0x0E09BF3D,
    0xD1219898, 0x1243647F, 0x3B47F892, 0xFE8CB196, 0xF71DAF5C, 0x6A3947F9, 0xFA270B51,
    0x683FA2CE, 0xC3074245, 0x4389A2C6, 0x8778FF1C, 0xB201A434, 0x3B876A57, 0x78944286,
    0x3A0D63C8, 0x31A2F4BA, 0x600FC835, 0xCC7910D0, 0x08C936D4, 0x49E01843, 0x49706A0D,
    0x87FC1B35, 0x89E13C37, 0x90F53E74, 0x52879911, 0xA5104061, 0xF325A162, 0xFC542AF8,
    0x85DB0C32, 0x539227B2, 0xAAD0E9EB, 0xE4DC2CD4, 0x4888BB26, 0x8AC25A0C, 0xAFE9B88D,
    0x3DEC038D, 0xC10FBB07, 0x88B03616, 0x0D61AC25, 0xE45715FB, 0xB83107D5, 0x0202002B,
    0x00000000

  EW_BITMAPS_TABLE( AppHeatBSensorBitmap )
    EW_BITMAP( AppHeatBSensorBitmap, Default )
EW_END_OF_BITMAP_RES( AppHeatBSensorBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::HeatBSensorBitmap' */
EW_RES_WITHOUT_VARIANTS( AppHeatBSensorBitmap )

/* Bitmap resource : 'App::GreenCallpointBitmap' */
EW_DEFINE_BITMAP_RES( AppGreenCallpointBitmap )
  EW_BITMAP_FRAMES( AppGreenCallpointBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 1, 30, 33, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppGreenCallpointBitmap, Default )      /* ratio 26.70 % */
    0x14080100, 0x004928A8, 0x3C908A00, 0x1DC49841, 0x230F7FC3, 0x51388416, 0x178A1262,
    0x9013FE2D, 0x44819FF0, 0xF4823C48, 0x4863F1D8, 0x964F2493, 0xA512392C, 0x430891CB,
    0x8F58B46A, 0x07861D61, 0x9824EA06, 0x2AC30064, 0xF431AD0C, 0xD1A2B337, 0x2A31478C,
    0xD544E87D, 0xEAEC7F9E, 0xCED7FBC1, 0xF1AAD4DE, 0x7AD55AA8, 0xAED56B75, 0x9542B960,
    0xBCDD2FFA, 0x3418FF76, 0xA934B26A, 0xB50C7645, 0x53B2BC31, 0x05BA1291, 0x27EC31E1,
    0xBFDBA651, 0xBDB70348, 0x9FD5A538, 0xFF12FE7F, 0xB1B8CC5B, 0x2390C7E3, 0x78A7EE3B,
    0x8339A948, 0xC7CC5B33, 0x08431D70, 0x160A8B71, 0xBFF019AD, 0x39391301, 0xB158859B,
    0x5FB0D7E4, 0xAFF7F627, 0x1B663797, 0xBD16923B, 0x0030E18F, 0x35F0928B, 0x69B89BBD,
    0xFD26B938, 0xB62FDCA3, 0xF9AFE7F3, 0xC44E6BF5, 0xA3D29D14, 0x57E122FF, 0xEC77BB3C,
    0xBC86394A, 0x6B5C0EA6, 0xABD3D0DA, 0x1CCCEC6F, 0x16057FB6, 0xD45F0129, 0xF4EEF7EF,
    0x37FF8A93, 0xF5BA5E2E, 0xDCC80600, 0x42C05C3F, 0x19F77E48, 0x9982E097, 0x7FDFD7ED,
    0x9E984601, 0x83C0E362, 0x388D5A4E, 0xF886E081, 0x6E5F6715, 0x8EA7F521, 0xA84E2484,
    0x74C01F98, 0x2B82A1C2, 0x46D31832, 0xE2588923, 0xD371E98C, 0x04FF38CE, 0x2D118880,
    0x8761F452, 0x40243E2C, 0x488CF18C, 0x45E88023, 0xFF368E73, 0x374E9350, 0x58D94588,
    0x9394EE37, 0x023D8EE3, 0xFA8FE099, 0x91E46911, 0xCC120601, 0x7224FF27, 0x39E72A0C,
    0x3A95A546, 0x9661E8F2, 0xE4369A41, 0x0915FC11, 0x82628466, 0xC8230FF2, 0x9AD922A8,
    0xA719BA57, 0x1696838B, 0xDE768392, 0x6498A009, 0x2B0C923E, 0x6559AA52, 0x6A1270A0,
    0x2A5E8369, 0x6430A8BA, 0x2B8CB24A, 0x26DA4E7F, 0x6A55F287, 0x0D215B68, 0x76391230,
    0x3E4FF6CE, 0x8FF3E8FB, 0xA3E0FA3D, 0x088163E9, 0xCC24E7A3, 0x94E692BC, 0xA6F962A2,
    0x143EA696, 0x6CB748C0, 0xD372CC73, 0x308883FD, 0xCE03FCA1, 0xEADCE63B, 0x54FF9E58,
    0xCC200AD1, 0x3B653736, 0xEC4A50E4, 0x746A85B8, 0xFC4C2300, 0x5B258213, 0x9D08969C,
    0x4D0384C3, 0x23F0FA9A, 0xFDB72FEB, 0xB998E8BA, 0x2D06145D, 0x0A23FC8A, 0x13FCB634,
    0xF87E2B05, 0x97971F98, 0x06297B92, 0x0FF15892, 0xF270BF1F, 0xE4A9128F, 0xBD1D4FF1,
    0x62ABF264, 0xD593D8EE, 0x9646D5B4, 0x051A9EAB, 0xE5B15760, 0x8B30DCB6, 0xC5023C10,
    0xD350AA3F, 0xB8CD3FCB, 0xA9134FF7, 0x274FF1E8, 0x5922D4CF, 0xCB9264AE, 0x272FCB30,
    0x1FCAA3DD, 0xD0F4127A, 0x352D229C, 0xBD534790, 0x0B4E6670, 0x0EBF326D, 0xD7B2ED4F,
    0x343D674A, 0x07D75FD7, 0xA75DA951, 0x628B365D, 0xD82BAC9B, 0x548DAB0A, 0x57CF2A48,
    0x6F6B8E77, 0x7B116579, 0x6436DA53, 0x23ADF68C, 0x0BBC00DF, 0x99C14CA7, 0x5224013A,
    0x354AD3FC, 0x8AE3FCBE, 0x4E38BF35, 0x64283FF9, 0x36D48612, 0x3FC6B27C, 0x0EB3C8E6,
    0x93FFA2E8, 0x58FF6AC9, 0xAEAF8CB2, 0x30081ABA, 0x7A3E909E, 0xF163A3E8, 0x4B8720CA,
    0x5724C1BD, 0xB78FE72C, 0x4FF7A18C, 0x21B4A10E, 0xB8A20EF5, 0xB91BE691, 0x0E0FF248,
    0x01D3FFC9, 0x03FC5825, 0x08FF9F49, 0x8DE2F6F2, 0x3FFB7167, 0xCF63E4F4, 0x92CC613F,
    0xEDA4DC08, 0x980A3BDE, 0x0F4FF17C, 0x603E7CA0, 0xC15EAE63, 0xBBEC61CA, 0x592541FF,
    0xF2BC88F4, 0xE6DCCAAE, 0x7FBD4036, 0xC91B82E8, 0xF83EC7F8, 0xD0B28FB1, 0x70FF1DC3,
    0xF1202E03, 0xE474040F, 0x0798F71D, 0xBE87CCF9, 0x22ECA8A4, 0x2EC698A7, 0xC8AAE4D2,
    0xAE314EB4, 0x9C37C612, 0x19AAB781, 0x4BFF2425, 0x01320A53, 0x03087F86, 0xD7D0CF1C,
    0x9CD3A663, 0x0F02A027, 0x06A0C0FF, 0xB93E77CB, 0xFF83E781, 0x7834C540, 0xB21BA771,
    0x142E58F0, 0xE55D0C4C, 0x61884D02, 0x87B8FA56, 0x08F55C73, 0x1FE28C62, 0x06E0C8F0,
    0xD2446603, 0x23843120, 0x1EF0A13C, 0xA2369B43, 0x642A3150, 0x33F08BE1, 0x80A8C545,
    0x0698FF86, 0xC3A1B83A, 0x0BE628C9, 0x10E30BDF, 0x39B56839, 0xC6288416, 0x24C40909,
    0x744B8236, 0x509F7861, 0xB780EF83, 0x614D5718, 0x47F87D15, 0xC0491F23, 0x8EAD59EA,
    0x3FE011B4, 0x3309D060, 0xE01BA3FC, 0xF66D1DF2, 0x4A068FD1, 0x58FF51E2, 0x4884A940,
    0xB1145A3E, 0x05D1F665, 0x2C41EC43, 0x31D24DF5, 0xF19E23C2, 0x7FCA088C, 0x6F146104,
    0x2A0787F8, 0x907F85A1, 0x28FF5D80, 0xF0E42902, 0xF2941A0F, 0x44A01F1F, 0xCCC048FF,
    0x1EE3C47F, 0x2DE5A8F4, 0x7317D6F5, 0x0C042430, 0xF4430571, 0x3C089F81, 0x00FF0A22,
    0x116833C5, 0x53C9A7CF, 0xDF682568, 0x1947A2F1, 0x39A748DA, 0x3FC7E1D2, 0x7ED03A02,
    0x08A09408, 0xC12FE835, 0x0CED4840, 0xC90C1C26, 0x520E4301, 0x84301890, 0xA242C41A,
    0x1996F346, 0x5D4BA004, 0xBB575CD0, 0x91D20A44, 0x26A4F486, 0xFF4942E5, 0x3C4700D1,
    0x60F44101, 0x72620DC8, 0xA40C9D90, 0xC8601E20, 0xD1C8CA32, 0x52D074BE, 0x0AC860DB,
    0x8093AA26, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( AppGreenCallpointBitmap )
    EW_BITMAP( AppGreenCallpointBitmap, Default )
EW_END_OF_BITMAP_RES( AppGreenCallpointBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::GreenCallpointBitmap' */
EW_RES_WITHOUT_VARIANTS( AppGreenCallpointBitmap )

/* Bitmap resource : 'App::PIRBitmap' */
EW_DEFINE_BITMAP_RES( AppPIRBitmap )
  EW_BITMAP_FRAMES( AppPIRBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppPIRBitmap, Default )                 /* ratio 44.21 % */
    0x1C080100, 0x8020B048, 0x59A0961C, 0xD88820A0, 0x887F071E, 0x67D05311, 0x820ABB18,
    0xA8C3FD8C, 0x8CC6E391, 0xF4823B1F, 0x49A47248, 0xAA432891, 0xE592992C, 0x1B168A3F,
    0xD0C891F8, 0x06854221, 0x99CCEA73, 0x36B190A1, 0x1BD18910, 0x3FDB2AB3, 0xFDDAD85C,
    0xDEEEF71B, 0xF4F577BF, 0x6F5783FD, 0x57AAD4DF, 0x0AB552AD, 0xA8562B95, 0xDD4AAEF9,
    0xD92B14FA, 0xDA9F62AE, 0x6A363AF3, 0xA550B7D6, 0x14E7838E, 0xAC31D2A9, 0x462C428C,
    0x63A102EF, 0x060A766E, 0x319081A0, 0x3524314D, 0xDD0D57FB, 0xFEFE7FBC, 0xB947FBF5,
    0x98CBE5B2, 0xCCDE6B33, 0xCFE7B3B9, 0xFE89FD98, 0x3FF1CD67, 0x69FF8A19, 0xD36C5418,
    0x8D7E0060, 0xD8BC49B1, 0xA0A93D9D, 0xCDDEEB73, 0xC8E777BB, 0x4585EAED, 0x602FD8BD,
    0x1D203782, 0x1000D0BB, 0x1FA579B1, 0xBBEC8E53, 0xD8EBF5BA, 0x96BE8FA7, 0xBDBFDE8E,
    0xB2607AF4, 0xA0824196, 0xE4CA7B63, 0x726FEC85, 0x21D4CBF6, 0xDF4F9FBF, 0x66C8E8B2,
    0xC7FB695A, 0x069F58B0, 0x8C43147F, 0x4528D92E, 0xE4F77C5F, 0xEE645523, 0x769F17D5,
    0x4FC3ED91, 0xF6E5F764, 0x68BB7560, 0x7E77CEE3, 0x4C0C7314, 0x574394EC, 0x37C9F67D,
    0x48FA6EDD, 0xCA278FF8, 0x188FF398, 0x4FF360AA, 0x7374B51D, 0xFDB73C19, 0x856A9C63,
    0x120FF31C, 0x5923489D, 0xB369977B, 0xE8FF3D4E, 0xBC834FC3, 0x3E0F23A1, 0x1174CD2F,
    0x46E15448, 0x10FD67E2, 0xF0384CB9, 0x549B73FC, 0x04555A4B, 0xA0064227, 0x24FF3087,
    0xE73FD150, 0x966503C4, 0xCD078993, 0x999C003F, 0x78C41F66, 0x4165E4A9, 0x4F64226C,
    0xC693FCC8, 0x1329FB2B, 0x32433C4E, 0xF83D1979, 0x20413558, 0x11E3F4C5, 0x595E568E,
    0xB4FF8519, 0x60584F43, 0x00E322A4, 0x8FF30C7B, 0x2378B91F, 0x8CCB645F, 0x043FCF23,
    0x1E674A84, 0x8C223668, 0x13FE9738, 0xFCE12F08, 0xBB9A2663, 0x3B4E03FE, 0xC9C9F0F6,
    0x59DA7434, 0xE8029A27, 0xFF9CAA21, 0x65A88AA4, 0xCFC3E0F5, 0x68E6544A, 0xA5A37DA9,
    0xAC3A0CF2, 0x3FEB0B1A, 0xA791F007, 0xC3FE89B3, 0xFCD72A05, 0xCF2583B3, 0xACC8F3FC,
    0xDB638597, 0xE3209A3F, 0xD0BF2222, 0x96B06F2A, 0xB109E119, 0x6DF002BD, 0xF006A29D,
    0xB0D82DED, 0xD3B45973, 0x83A944BA, 0xEC037DA3, 0x23E0F33F, 0x0CFF9C15, 0xBA380BC2,
    0x136BD9DA, 0xE4BB96FF, 0x78561564, 0x132468A2, 0x96B97289, 0x558F73C9, 0xCEB350B1,
    0x6298583F, 0xE0083FCD, 0x8003CFF9, 0xA30FF314, 0x30C3FE95, 0x4C3D1AB5, 0x382AC3DF,
    0x413FCCB2, 0x54CD1264, 0xE4B584F6, 0xB2B869B4, 0x52351D9F, 0x177B316C, 0x3CCEC89E,
    0xCE533D61, 0xCB4E59AA, 0x7E1B36CB, 0x8C39CCB2, 0x685DE39D, 0x973B975C, 0xC338A753,
    0x4AD0CAED, 0xD85A744B, 0x7E867CAD, 0xAC79A31D, 0xA3FEECBA, 0x4CFFC54E, 0x4AA29ECD,
    0x3C4E664E, 0xDC23B94E, 0xE20C163F, 0xBF3ECF23, 0xC7262393, 0x3FF81394, 0x19651978,
    0x11B9EB19, 0x28FF36CB, 0x18A20E23, 0xC3B4367B, 0xF237656B, 0xC2CC713F, 0x8AA03FCD,
    0xCAEE304A, 0xCCF313FE, 0x0EA3619A, 0xE24C3692, 0x3C2E3FCC, 0x0AD08CC2, 0x2E87F3FE,
    0x09BE7CDF, 0x73739E32, 0xFEE2CE24, 0x97990473, 0xC0B21111, 0xF4DEF6C8, 0x63ECF99C,
    0x9FAF6695, 0xE78E12A7, 0xDC76575F, 0xC1DC2948, 0x41B28121, 0x37F8E2E8, 0x90396D3A,
    0x22C253FF, 0x1F1CF8CA, 0x1C2A616E, 0xD0152585, 0x443FC748, 0x094C14E4, 0x0B925A67,
    0xC19A285A, 0x69CD75B6, 0x4843BD00, 0x99975ABB, 0x7D84A5F4, 0x8C1879D5, 0x24312464,
    0x881D2CAD, 0x8C65A103, 0x28169DE4, 0x38D41FEF, 0xF3B863C7, 0x82842818, 0x0D31A41A,
    0x9A3876A6, 0x54F0F592, 0x64620C3D, 0x7FC321A6, 0xB52922E4, 0x30DE9F42, 0xC549A3E2,
    0x90B037CE, 0xC544C759, 0xA3FD0080, 0x5AD2A50F, 0x84C330FB, 0x4ECC004F, 0x36C7FA80,
    0x32AA7786, 0x043E4C96, 0xB629CA52, 0x8C680FF5, 0x485E1FED, 0xF1D4BA45, 0xA3447FA4,
    0x60798F1C, 0x99D6F0B9, 0x5AB135F4, 0x1E4DD341, 0x62C53808, 0x68592A89, 0x2EDBCC6A,
    0xA86D1A35, 0x6AEB3BC3, 0x23520D17, 0x31962D9C, 0x87FB9D13, 0xBD117820, 0x47502453,
    0xE68A5B96, 0x480121FE, 0xDF1883FD, 0xBC1252E8, 0x16509FC8, 0xE2B917A2, 0xB83C6723,
    0x26F0B73E, 0x0B0B9A32, 0x9C473CE7, 0x1100807F, 0x3F5C48C9, 0x4219141A, 0xC56382F4,
    0xFE3BC6F8, 0x887FBFA1, 0xAB2B9463, 0xF1CC34D0, 0x63144A98, 0x840CA41C, 0xCA31C846,
    0x494AAE69, 0xB4DF2AD3, 0x62156494, 0x62996378, 0xEA8C8560, 0x99DB8B40, 0x3C4B8FAC,
    0x892CD409, 0xCF59D99D, 0x50924484, 0x17F02C64, 0x0F8AB956, 0x0ED530B8, 0x690B03E5,
    0x3A25E3A8, 0x1941E28B, 0x80F94668, 0xA9527993, 0x34289598, 0xC6E9D99A, 0xE27BEB8F,
    0x06F3226E, 0x12AEA058, 0x3FC720C6, 0x608EC1BA, 0x8D42AECD, 0x822307FB, 0x3013AB41,
    0xE31A8022, 0xF766A618, 0xCDFCA738, 0xC708C728, 0x35B65B32, 0x1FF41856, 0xBA45385D,
    0x7FC1414A, 0xFF74E1C0, 0x13520378, 0x8E588BF1, 0xFCF1A2E6, 0xD5ACD163, 0x6240181B,
    0x964BBB31, 0x53256EA8, 0x5A66DCF9, 0x43CAB316, 0xB1496721, 0xC004263D, 0x948647FC,
    0x59A8A982, 0x95451485, 0x870CED83, 0x284E94B8, 0x9EB8DB32, 0xD4F6EEB6, 0x89D460DC,
    0x0FCDCC81, 0x57C8669C, 0x1E0DAA89, 0x94309FC5, 0x665091B9, 0xE0FF66C1, 0xB44E53A6,
    0x05487A0E, 0x87FBD010, 0xBC01AA2C, 0x1FF3DCCA, 0x388FDD88, 0xC8AD88CB, 0xCF582C48,
    0xA22ADE8B, 0xCE77C0A1, 0x0D19AA32, 0x98E2682C, 0xEF81DDAE, 0xC528561F, 0x43142ACD,
    0x57AAF4EF, 0x32C6E8C4, 0x6B0B342B, 0xB998CCCC, 0x2EA30762, 0xDAB98743, 0xC3331AE2,
    0x31FF6954, 0xC801B641, 0x9512AD67, 0x0FF47A06, 0x45C3244E, 0x6C185DAE, 0xDECB6527,
    0x2E45CF4C, 0xFA061A5D, 0xC48483C9, 0x30FF822D, 0x9706AB80, 0x1196D60A, 0x56E0CB14,
    0x8DC182AF, 0x1106590D, 0x3C205CB0, 0x77DD34A0, 0x68831361, 0x441F0032, 0x4AFB0A85,
    0xB83F2C2E, 0x41269CC4, 0xD12A910C, 0x67A3B02A, 0xBB36566F, 0x3A934666, 0xAAC730D1,
    0x924CBBF8, 0xDD3E509A, 0x4D401898, 0x3C720CF5, 0x987332AB, 0x175632EB, 0x43685E37,
    0x70580529, 0x2680F77C, 0x8CCDD852, 0x3FE5CA44, 0x4A584084, 0x799B0310, 0x553C986B,
    0x470F9D78, 0xC38AA1E6, 0xF31B9094, 0xCA231998, 0x23599187, 0x53F15EB7, 0x4377F0CB,
    0x43EA28A3, 0xA588D055, 0xF855C015, 0x22681175, 0x70B0B903, 0xFA8110A0, 0xA51ACFDD,
    0x83113512, 0xCECD351D, 0xA361681D, 0x0275A40F, 0xB96D0920, 0x0114AC6C, 0xA2CCEB7C,
    0xF2FE3132, 0x68079463, 0x7B935333, 0xA0B6B066, 0xA3647FDB, 0xE440FFB2, 0xB1C98C3F,
    0x53067913, 0xDB0670A5, 0x8ABDC08C, 0x751CE559, 0x1F9DC8A4, 0xAC649330, 0x98AE3B35,
    0x560541C6, 0x4799DEB0, 0xCA939023, 0x8FF9863E, 0x73F99413, 0x8D85B077, 0xEF439418,
    0xED12A0E4, 0x7897719A, 0xDD2220C8, 0x10536B21, 0xA9983545, 0x0644CE22, 0x423C9F15,
    0x9978B490, 0x1FEDA05E, 0x32462132, 0x3EB3D024, 0xBDB49A30, 0x832FE669, 0x89333BB9,
    0xF0C612CA, 0x6132A61C, 0xAEF74CAF, 0x9F2AEDBD, 0xDE1630A2, 0x5A684EE9, 0x14A4207A,
    0xAFC38144, 0xB2157196, 0x300FC7FE, 0xC0B8A731, 0x70673E47, 0x694A5185, 0x67243F0C,
    0x10080F39, 0x6E88683D, 0x73F818DE, 0x22410ABD, 0xA91C2802, 0x8F9A7334, 0xFB5F7289,
    0xBD69A436, 0x08485732, 0x218A2499, 0xE9CF85D2, 0xC6C99BC1, 0xB3D67723, 0x11C0C87A,
    0x060821E4, 0x1A071232, 0x0631624C, 0x4C6E624C, 0x201D0FFD, 0xBE311FFB, 0xF4B8325D,
    0xEB4F5D8F, 0xDF79B95A, 0x74FE9BCB, 0xC8466B9C, 0xF1C4A035, 0x64086034, 0xA535E1D0,
    0x8FD18D6C, 0xC4EE8D87, 0xC6FD374D, 0xA656767A, 0x464787EF, 0x81A9DE78, 0x8C79B2F1,
    0x0FE1FC4D, 0x654D7E99, 0x63743002, 0xC4E321C4, 0xAC1987B0, 0x6F1B0FF6, 0x8A508E88,
    0x4E0CB4CA, 0x7E553DF9, 0x3CCF96F2, 0x27AF37E6, 0xF3BE5FCE, 0xE4BCFFA0, 0x3A8E91FF,
    0x11436D9E, 0xECE60FDF, 0x0FA20161, 0x09AF35FE, 0x5030327B, 0x81F063CA, 0x863A1D01,
    0x8F343A03, 0x235367B4, 0xF0BDFF14, 0x47FC4F83, 0xC6F81F17, 0x97F23E4F, 0x0BE57C3F,
    0xDE8F023F, 0x11E6317D, 0x5B9771EE, 0x00D74707, 0x101207EC, 0x00000000

  EW_BITMAPS_TABLE( AppPIRBitmap )
    EW_BITMAP( AppPIRBitmap, Default )
EW_END_OF_BITMAP_RES( AppPIRBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::PIRBitmap' */
EW_RES_WITHOUT_VARIANTS( AppPIRBitmap )

/* Font resource : 'App::FontVerdanaProCondSemiBold18' */
EW_DEFINE_FONT_RES( AppFontVerdanaProCondSemiBold18, 15, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -11, 13, 11, 15, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 4, 0x00000115 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -11, 3, 11, 5, 0x00000115 ),             /* '!' */
  EW_GLYPH( 0x0022, 0, -12, 7, 5, 7, 0x00000172 ),              /* '"' */
  EW_GLYPH( 0x0023, 0, -11, 10, 11, 10, 0x000001D9 ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -12, 8, 15, 8, 0x0000037C ),             /* '$' */
  EW_GLYPH( 0x0025, 0, -11, 14, 11, 15, 0x00000523 ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -11, 11, 11, 10, 0x0000074A ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -12, 3, 5, 4, 0x000008F8 ),              /* ''' */
  EW_GLYPH( 0x0028, 0, -12, 6, 15, 6, 0x0000092A ),             /* '(' */
  EW_GLYPH( 0x0029, 0, -12, 5, 15, 6, 0x00000A1D ),             /* ')' */
  EW_GLYPH( 0x002A, 0, -11, 8, 7, 8, 0x00000AFD ),              /* '*' */
  EW_GLYPH( 0x002B, 0, -10, 10, 10, 10, 0x00000BE5 ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 4, 5, 4, 0x00000CC0 ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -6, 6, 2, 6, 0x00000D09 ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 3, 3, 4, 0x00000D41 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -12, 7, 14, 7, 0x00000D5F ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -11, 8, 11, 8, 0x00000E69 ),             /* '0' */
  EW_GLYPH( 0x0031, 1, -11, 7, 11, 8, 0x00000F92 ),             /* '1' */
  EW_GLYPH( 0x0032, 0, -11, 8, 11, 8, 0x00001045 ),             /* '2' */
  EW_GLYPH( 0x0033, 0, -11, 8, 11, 8, 0x0000117D ),             /* '3' */
  EW_GLYPH( 0x0034, 0, -11, 9, 11, 8, 0x000012E5 ),             /* '4' */
  EW_GLYPH( 0x0035, 0, -11, 8, 11, 8, 0x000013F4 ),             /* '5' */
  EW_GLYPH( 0x0036, 0, -11, 8, 11, 8, 0x00001546 ),             /* '6' */
  EW_GLYPH( 0x0037, 0, -11, 8, 11, 8, 0x00001695 ),             /* '7' */
  EW_GLYPH( 0x0038, 0, -11, 8, 11, 8, 0x000017AB ),             /* '8' */
  EW_GLYPH( 0x0039, 0, -11, 8, 11, 8, 0x0000191C ),             /* '9' */
  EW_GLYPH( 0x003A, 1, -8, 3, 8, 5, 0x00001A84 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -8, 4, 10, 5, 0x00001ADC ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -9, 8, 9, 10, 0x00001B63 ),              /* '<' */
  EW_GLYPH( 0x003D, 1, -8, 8, 5, 10, 0x00001C60 ),              /* '=' */
  EW_GLYPH( 0x003E, 1, -9, 8, 9, 10, 0x00001D34 ),              /* '>' */
  EW_GLYPH( 0x003F, 0, -11, 7, 11, 7, 0x00001E4A ),             /* '?' */
  EW_GLYPH( 0x0040, 0, -11, 13, 13, 13, 0x00001F3F ),           /* '@' */
  EW_GLYPH( 0x0041, -1, -11, 10, 11, 9, 0x000021A0 ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -11, 8, 11, 9, 0x000022E0 ),             /* 'B' */
  EW_GLYPH( 0x0043, 0, -11, 8, 11, 8, 0x00002401 ),             /* 'C' */
  EW_GLYPH( 0x0044, 1, -11, 8, 11, 9, 0x00002534 ),             /* 'D' */
  EW_GLYPH( 0x0045, 1, -11, 7, 11, 8, 0x00002639 ),             /* 'E' */
  EW_GLYPH( 0x0046, 1, -11, 7, 11, 7, 0x00002730 ),             /* 'F' */
  EW_GLYPH( 0x0047, 0, -11, 9, 11, 9, 0x000027F3 ),             /* 'G' */
  EW_GLYPH( 0x0048, 1, -11, 8, 11, 9, 0x0000295D ),             /* 'H' */
  EW_GLYPH( 0x0049, 0, -11, 6, 11, 6, 0x000029FF ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -11, 6, 11, 6, 0x00002A98 ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -11, 8, 11, 9, 0x00002B3F ),             /* 'K' */
  EW_GLYPH( 0x004C, 1, -11, 6, 11, 7, 0x00002C3C ),             /* 'L' */
  EW_GLYPH( 0x004D, 1, -11, 10, 11, 11, 0x00002CAC ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -11, 8, 11, 9, 0x00002DB3 ),             /* 'N' */
  EW_GLYPH( 0x004F, 0, -11, 10, 11, 10, 0x00002E88 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -11, 7, 11, 8, 0x00002FE2 ),             /* 'P' */
  EW_GLYPH( 0x0051, 0, -11, 10, 14, 10, 0x000030BA ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -11, 9, 11, 9, 0x00003263 ),             /* 'R' */
  EW_GLYPH( 0x0053, 0, -11, 8, 11, 8, 0x00003371 ),             /* 'S' */
  EW_GLYPH( 0x0054, 0, -11, 8, 11, 8, 0x000034E3 ),             /* 'T' */
  EW_GLYPH( 0x0055, 0, -11, 9, 11, 10, 0x00003592 ),            /* 'U' */
  EW_GLYPH( 0x0056, -1, -11, 9, 11, 8, 0x0000365B ),            /* 'V' */
  EW_GLYPH( 0x0057, 0, -11, 13, 11, 12, 0x00003777 ),           /* 'W' */
  EW_GLYPH( 0x0058, -1, -11, 10, 11, 8, 0x00003950 ),           /* 'X' */
  EW_GLYPH( 0x0059, -1, -11, 10, 11, 9, 0x00003AA3 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -11, 8, 11, 8, 0x00003BA3 ),             /* 'Z' */
  EW_GLYPH( 0x005B, 1, -12, 5, 15, 6, 0x00003CCE ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -12, 7, 14, 7, 0x00003D5C ),             /* '\' */
  EW_GLYPH( 0x005D, 0, -12, 5, 15, 6, 0x00003E61 ),             /* ']' */
  EW_GLYPH( 0x005E, 0, -11, 9, 6, 10, 0x00003EF4 ),             /* '^' */
  EW_GLYPH( 0x005F, -1, 1, 8, 2, 7, 0x00003FA2 ),               /* '_' */
  EW_GLYPH( 0x0060, 2, -12, 4, 3, 8, 0x00003FEC ),              /* '`' */
  EW_GLYPH( 0x0061, 0, -8, 8, 8, 8, 0x0000401D ),               /* 'a' */
  EW_GLYPH( 0x0062, 0, -12, 8, 12, 8, 0x00004117 ),             /* 'b' */
  EW_GLYPH( 0x0063, 0, -8, 7, 8, 7, 0x00004201 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -12, 8, 12, 8, 0x000042D6 ),             /* 'd' */
  EW_GLYPH( 0x0065, 0, -8, 8, 8, 8, 0x000043BE ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -12, 6, 12, 5, 0x000044BE ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -8, 8, 11, 8, 0x00004579 ),              /* 'g' */
  EW_GLYPH( 0x0068, 0, -12, 8, 12, 8, 0x000046B1 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -11, 3, 11, 4, 0x0000475F ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -11, 5, 14, 5, 0x0000479E ),            /* 'j' */
  EW_GLYPH( 0x006B, 0, -12, 9, 12, 8, 0x00004856 ),             /* 'k' */
  EW_GLYPH( 0x006C, 0, -12, 3, 12, 4, 0x0000494D ),             /* 'l' */
  EW_GLYPH( 0x006D, 0, -8, 13, 8, 13, 0x0000497E ),             /* 'm' */
  EW_GLYPH( 0x006E, 0, -8, 8, 8, 8, 0x00004A77 ),               /* 'n' */
  EW_GLYPH( 0x006F, 0, -8, 8, 8, 8, 0x00004B05 ),               /* 'o' */
  EW_GLYPH( 0x0070, 0, -8, 8, 11, 8, 0x00004BF7 ),              /* 'p' */
  EW_GLYPH( 0x0071, 0, -8, 8, 11, 8, 0x00004CEF ),              /* 'q' */
  EW_GLYPH( 0x0072, 0, -8, 6, 8, 6, 0x00004DE7 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -8, 7, 8, 7, 0x00004E51 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -11, 5, 11, 5, 0x00004F56 ),             /* 't' */
  EW_GLYPH( 0x0075, 0, -8, 8, 8, 8, 0x00004FDA ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -8, 8, 8, 8, 0x00005060 ),               /* 'v' */
  EW_GLYPH( 0x0077, 0, -8, 12, 8, 11, 0x00005144 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -8, 8, 8, 7, 0x00005299 ),               /* 'x' */
  EW_GLYPH( 0x0079, 0, -8, 8, 11, 8, 0x00005394 ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -8, 7, 8, 7, 0x000054A9 ),               /* 'z' */
  EW_GLYPH( 0x007B, 0, -12, 7, 15, 7, 0x0000558A ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -12, 2, 15, 6, 0x000056AA ),             /* '|' */
  EW_GLYPH( 0x007D, 0, -12, 7, 15, 7, 0x000056D0 ),             /* '}' */
  EW_GLYPH( 0x007E, 0, -7, 10, 4, 10, 0x000057F1 ),             /* '~' */

  EW_FONT_PIXEL( AppFontVerdanaProCondSemiBold18, 0x000058A0 )  /* ratio 75.60 % */
    0xF7BDEF71, 0x0DEF7BDE, 0xF7BDEF79, 0x00137BDE, 0x00000000, 0x00000000, 0x80000000,
    0x7BDEF7BC, 0x77E9BDEF, 0x11821217, 0x8CF3985C, 0xFDE42CEF, 0x4C31DDFB, 0x91486041,
    0xE020460E, 0xF0C0F396, 0x8CA82C64, 0x76EFC915, 0x72EE2FDE, 0x3E5F98BF, 0x7E2AA3DF,
    0xA9279E4F, 0xDD61E1C8, 0x7E76EE2F, 0x6F9F2F9E, 0x33E577D4, 0x29E793CE, 0x80A32A2A,
    0xF18005E7, 0x15FFE6FD, 0x56B1AAFF, 0x7CFBF454, 0xC24FF837, 0xDF5BEA33, 0xD9E57F60,
    0xEBD673C5, 0xEB14819F, 0xC6F3CEFE, 0xCE566AB7, 0xFFF7E67F, 0x00006FD6, 0x17F7FE30,
    0xF44E0B38, 0x185A63F3, 0xFC55ADF9, 0xE610605E, 0xFC20C058, 0x2FEFFD66, 0xAAD6FE46,
    0xAC5F7C67, 0xFCFD1DA7, 0x76F119DE, 0xFEFFC63D, 0x1A69DF2A, 0xD315DE01, 0x7F2A0234,
    0x0F5DBC46, 0x58BE4AF4, 0x73BF1B4F, 0xDEA700BE, 0x73221A7A, 0x1CC884B5, 0xF8DE0D8F,
    0x45205CF7, 0xDEA7FBB6, 0x10FF1BE7, 0x72F9E76C, 0x97EAD82B, 0xBF98BF36, 0xD3788DF7,
    0xEB59EAF8, 0xF79B8DFF, 0x0E610A46, 0x14E71131, 0x9F2598BF, 0x8F133E68, 0x4831911F,
    0x06900003, 0xFCA06322, 0x4F1899F0, 0xAAB17E34, 0xF51E8FEF, 0x318CBD70, 0x863F3F06,
    0x301934C1, 0x830C9A60, 0x9646AD9F, 0x03D47AD6, 0x25F887EB, 0xAF7B92DE, 0xBF78AE7F,
    0xC46FCF1A, 0x7E78D5FB, 0xFEBDEE43, 0x7897E2B9, 0x007F710B, 0xAC000000, 0xF7BA8F7B,
    0xA8955646, 0xF7EFCF2A, 0x5FBF7E79, 0x00000000, 0x2BCA7EFA, 0xA9F118C7, 0xEF7B9E98,
    0x3333227D, 0x05EECAD6, 0x5F81F758, 0x813C7214, 0x145F81C7, 0xC7813C72, 0x72145F81,
    0x81C7813C, 0x3C62145F, 0x3FC0E581, 0xF9CF780A, 0xB239BE0D, 0xBFE2788E, 0xC51E7C9F,
    0x21830FF6, 0x30880101, 0xD8B1F218, 0xFEE4F1FE, 0x66F8F93D, 0xEEB1753E, 0x30BDFBC3,
    0x277B809F, 0x00000000, 0xEF2BF7E0, 0xA34AA9EF, 0xF3DF7A32, 0xA965721B, 0xBBF3BE23,
    0x310F9591, 0xA078CC80, 0xC67CC0AD, 0x3F8EF98B, 0x60FF5BE6, 0x5FBF7CBE, 0x23555507,
    0x1BF3DF7A, 0xFA8D6572, 0xEFCEFC47, 0x4593C4FF, 0xF71878CE, 0x8D441FEF, 0xBDBF9171,
    0x19C704C6, 0xFF53BF89, 0xAE57FBFD, 0x73C6A27A, 0xC1FEFA03, 0x25FC80B3, 0xDE0BC670,
    0xECE60B3C, 0xBBDEFE01, 0xAAA31DE5, 0xDFE8A886, 0x5F8D77EF, 0xDEE00002, 0x445DEF7B,
    0xFCF25555, 0x03DFBF7E, 0xAFEF73C0, 0xFA8E6B18, 0x5DDF7ED2, 0x322D81F1, 0xFFD773F1,
    0xCE47FDF7, 0x3C67CCF5, 0x7B9DF91B, 0x33CFD8C2, 0xEFDF1B93, 0x1EA351DD, 0x4E77E218,
    0x6B4C6A3B, 0x7CFF76F1, 0x9B28CA07, 0xBEAA33C7, 0x59BF1D7E, 0xB9E7BE2B, 0x7F7BDEF7,
    0xD4955551, 0x4DFBF7EF, 0x1315187F, 0x62A30BDA, 0xF2056BC2, 0x24F683F1, 0x8BF0BCB2,
    0xB9DF901A, 0xD4FD8A7B, 0x78A9F7CC, 0x8767F7BE, 0x9C6AA709, 0x84E59FB7, 0xCF7D4399,
    0xFEF98DF9, 0xF854751D, 0xEB17E213, 0xFF1DE3EB, 0x23DF15AA, 0x437E73BF, 0xE7A9E7EC,
    0xBF3C6F9F, 0xF0DF8DEF, 0x40E93CA7, 0x2FAFCDFE, 0x3CF3E5F5, 0xFFBFF3D2, 0x7D7C81E3,
    0x63B7DF7E, 0xBE7A9E0D, 0xFF17DEF6, 0xD42AD7FE, 0xE1FF7FAA, 0xF7F82FBD, 0xEF02AD5F,
    0xE65F957D, 0x6BB5E593, 0xAC0FD100, 0xE74EB0BB, 0xF3A73CF7, 0xB5138FDB, 0xFF51DC1F,
    0xF7AFDA89, 0x3DFF313F, 0x69D607DE, 0xBDEF7BBF, 0xCE73D9F7, 0xEF5CE739, 0x3BEFBEFB,
    0x7BDEF77E, 0x9CE7B3EF, 0x3EF9CE73, 0xE0BB7E40, 0x45DBF95B, 0xFBF95DF4, 0xA8FFD125,
    0x78FFBE45, 0x9F3DDF2A, 0xCCEF17FF, 0xB7F24BFD, 0xB9DF8C07, 0x53CF51FB, 0xBF3AABE3,
    0xB81FF2DF, 0x9E7F3E20, 0x7CE8B39D, 0x9F60B05F, 0x00067380, 0x7E7BEF44, 0x7B8EE413,
    0x10FFFDCF, 0xF5077BF7, 0x35CEF2F3, 0xA7DDF9F6, 0x19D79857, 0x19518C51, 0x7F73E54F,
    0x5C221998, 0x7B60840B, 0x8A9E3220, 0x653C5F79, 0x4C65F89D, 0xD7527DDF, 0x7BCFFCF3,
    0xFF11FDEF, 0x7180275F, 0x03FF7BDD, 0x180BBFF0, 0x231407E9, 0x40F4CFC1, 0xB0D9F18C,
    0xE05446FC, 0xC7852CAF, 0x62A5D3BE, 0xF8ABDF7C, 0xCCCF3DFB, 0xFE50A528, 0x17BBDEF7,
    0xE17B27CC, 0x841B5EFD, 0xE37EB581, 0x707A7745, 0x80BE37EF, 0x1881E327, 0x63BBEF16,
    0xFF34E60C, 0xBF39DF18, 0xE78FFEA9, 0xCE78E9F9, 0xF8637CEF, 0x40463D61, 0xF02C2058,
    0xFD230118, 0x39E378F0, 0xFFAB7FBF, 0xEF7D99E3, 0x2A07BF3D, 0xDBF17BEB, 0x78C1663B,
    0x80F0C1FD, 0x6012C025, 0x1F4C607B, 0x0D63BDBF, 0xEED7EB2A, 0x41DEF7BD, 0xFBF05555,
    0xE0097EFD, 0x82FDFBF7, 0x7BDC2AAA, 0xFC00006F, 0x525FBF7E, 0xDEF71555, 0x55506F7B,
    0xF7EFDF85, 0xDFBF000B, 0x0EAAA16F, 0x002FBDEE, 0xBF200000, 0x630AF773, 0xA7A2A33F,
    0xFBFFF31B, 0x3446317F, 0x00C8F99E, 0xFDEF7161, 0x787CC585, 0x918FEF24, 0xA37818B1,
    0xFEA36FF7, 0xF7CE564F, 0x1F77E0DE, 0xF6000000, 0x6640FFFF, 0x0B7B9C06, 0x80000000,
    0x4FBDEF75, 0xC7CF1516, 0x000000AF, 0xF8F9E000, 0xFE151655, 0x2AA5DEF7, 0x000AFEF1,
    0x25000000, 0xC67FBF7E, 0x8BEB278A, 0x139E437B, 0xE817E270, 0x95A83CF1, 0x0379F83F,
    0x378F00C2, 0x05E337E1, 0xBC40F51D, 0x7D91AC1A, 0x0000006F, 0x80000000, 0x51FBF7EF,
    0x87EF7555, 0xC15177BC, 0x04F26207, 0x82C9E7D4, 0x0FEB7593, 0x0FE7DE4F, 0xF813153C,
    0x06DE404C, 0xF7B80000, 0x1787DD61, 0x1C440A30, 0xE093D630, 0xCCF903E7, 0x504C4E0B,
    0xF0178023, 0x9CEFD424, 0xEAFCF12F, 0xED2767C9, 0xAF19EDFD, 0x54FC98CA, 0x064907A4,
    0x1E900080, 0x8B195924, 0x7FAD0A9F, 0xFCF3467B, 0x3FE7C9EA, 0xEFCF7BDC, 0x0F7D6541,
    0x940EDDBF, 0xFEF26505, 0x53E65E3A, 0xBF39C1FF, 0x50000001, 0xC4BE73BF, 0x9F27ABF3,
    0xEDFEB49D, 0xB191AF19, 0x83C794F8, 0x010008C1, 0xB2083D20, 0x42A98A22, 0x8DEFDEFB,
    0x9F397E66, 0xBD9E06FC, 0xEF3F0174, 0xFD68C17A, 0x7FDEF7B8, 0x2F5CAA83, 0x02D7BF7C,
    0x80CB004A, 0xAC34FD77, 0x4CE0AF8E, 0x16B37807, 0x601DE270, 0x77C438CC, 0x7EC37EEE,
    0x4F55AE6A, 0xDDFDEFCE, 0x96440C35, 0x7C92BFE7, 0x0BFFFB23, 0x544F7CF3, 0xF53EF9E3,
    0xF7332C0C, 0x33BFDF7E, 0xEF9F3997, 0xEF7BDFF9, 0xA2AAFFBD, 0xC7DFDEAA, 0x0002F7EF,
    0x00000000, 0xBDC40000, 0x0005F758, 0x00000000, 0x2A440000, 0xFBE7E3B6, 0xBE69CAED,
    0x70DCF959, 0x56EE326E, 0x2ED9478A, 0x561E56DB, 0x9911CC94, 0x6CB3CA0F, 0x50AFFB6C,
    0x8C40C546, 0xF0A81467, 0xEF879B07, 0x7E0EE726, 0xE194DFC7, 0xDB0C79E1, 0x1E18CAE4,
    0xE58F1B69, 0xA319722F, 0xCAC5BF86, 0x31BF9E78, 0x715BF922, 0x3079E797, 0x17C655FC,
    0x548A8F03, 0x1E911FC3, 0x06582CFE, 0xB77E2443, 0x9B427389, 0x630DE3A1, 0x85CAE746,
    0x4346F58E, 0x01E351BC, 0x7C980F93, 0x6318DE20, 0x1FB74742, 0x2AB31CC6, 0xDED35717,
    0x77E16FB0, 0x6A3357A7, 0xE518CF4C, 0xF275E2F5, 0xF19E0F19, 0x1AB41ABC, 0x00BD2A05,
    0x00000000, 0xF7BDEE78, 0xAAAA37DE, 0x7EFDFA88, 0xDA22F17F, 0x0B18E81B, 0xE6D0BA63,
    0x6868ACC0, 0xFFE1581D, 0x545EFDFB, 0xEF7BD555, 0x9C1CD45D, 0x000000B7, 0xE0000000,
    0xF5D3C1AE, 0x0B7F01BB, 0x3D443F96, 0x5828FF01, 0x013D440E, 0x071E0A3B, 0xBF013C72,
    0xC81C7828, 0xA2FC04F1, 0xDAEF7BDE, 0x3FBCF073, 0x00000000, 0xB5A80000, 0xBA8177F9,
    0x03D5A03F, 0xD0D13C73, 0xD1737BF1, 0x9BE56331, 0x45F9A339, 0xDEF7BDC7, 0xEEEE8BFB,
    0x25BF93EE, 0xDB3A1BC7, 0x97CF7FEF, 0xC39EBA78, 0x2397D7AF, 0x49BFF7D4, 0x93FF66FD,
    0xC7127EBF, 0x3D64DE7D, 0xB8922FCF, 0x0000007F, 0x91A73E80, 0xFC935963, 0x1E0FEDBD,
    0x31E01013, 0x97B67319, 0x37C77FF1, 0x6FCE77C4, 0x5ACF3FF8, 0xBDF8C6B3, 0x704286BB,
    0x93C46D21, 0xB95FADF5, 0x5816BD4F, 0x00000177, 0xFFFDDFC8, 0xD43EAA70, 0x31FADFC8,
    0x09480014, 0x97EDEA2A, 0x858D72F8, 0x92F9CF78, 0x1D6FBD6F, 0x35CE6B55, 0x99CF30C6,
    0x3BDEF7D0, 0xD46A0D86, 0xFF877B37, 0x04F3EF53, 0x9FA539DF, 0xBBCA5DE7, 0xA5F83086,
    0xFAC277F3, 0x02778679, 0xE4000000, 0x777FFEEF, 0xA4DF5539, 0xC7D6FE46, 0x25200050,
    0x7DFA8A97, 0x89F2F893, 0xDF9FFA85, 0xFBDF7C30, 0x9AE4A33D, 0xFEE2FF35, 0x00000001,
    0xC8BCFFD6, 0xF90F996F, 0x1704A6FF, 0x80000000, 0xC6F7037B, 0x000000BD, 0x9E01FDCF,
    0xF7BBF3FB, 0x1F3C4CE7, 0x98000000, 0x7FDB79E2, 0xDC5731AC, 0x0000003F, 0x0FF3C800,
    0x77809C70, 0x8CC603BC, 0x0FC46209, 0x01E7CEE4, 0x3500BF5E, 0x1FEE27E3, 0x40000000,
    0x9FFAFFDC, 0x2FF3BE37, 0x1BCCB7E4, 0xFFC87E4F, 0x2FDFCD37, 0x32EB8063, 0x00000001,
    0xB8800000, 0x2F3FF5FF, 0x43E65BF2, 0xC129BFFE, 0x00000005, 0xFCE77C40, 0x56B3FF92,
    0xF79E355D, 0x7F0E727D, 0xFA400EFE, 0x9F279C73, 0xFBA72B5E, 0xB8AEB7CC, 0x234E75FF,
    0xE49ACB7F, 0x3C1FDB7E, 0x63C02026, 0x2F6CE632, 0x06F8EFFE, 0x0FFF77E3, 0xBBF90000,
    0x4E5DDFFF, 0x91A8B7D5, 0x2863F5BF, 0x54129000, 0xC4BEFBD4, 0xEA172B97, 0x00077E7F,
    0xFAFFB880, 0xEC0FC66F, 0x000C66FF, 0xFFCC0000, 0x9DEA7FFD, 0xD86337DF, 0x44F1DACF,
    0x7B94DFFF, 0xFB233B99, 0xAF7351DF, 0xBD6A7B67, 0x7B86FCDF, 0xBDCFE001, 0x6B27BA3F,
    0xF8608001, 0xC554775E, 0x02EEB3FD, 0x00000000, 0x7DFC8897, 0x263E5F13, 0x77583BBF,
    0xC5F8FDFE, 0xF1C8F15A, 0xC78E5444, 0x78EDFAE1, 0x82A9E278, 0x45FC0E95, 0xEE30DDF1,
    0xAFE37BC7, 0xE23514FC, 0x151157F1, 0xC62B3259, 0xA6C7FF1B, 0xB53CF4C6, 0x91DED8A3,
    0x1283E73B, 0x88D88F3F, 0xE62A64A1, 0xC7F9C57D, 0xF17E39AC, 0xF3CE3786, 0xFC66F914,
    0x9EA24FE0, 0xBE378972, 0x765F9639, 0xBBF9BE74, 0xF1D77583, 0xC4F98BF1, 0x15854632,
    0xFBF973F5, 0x3950F13F, 0x07C3C173, 0xFBF80E5B, 0x466132C0, 0xF7BDD605, 0x3BBAB7DE,
    0xA896B19C, 0x23F378C5, 0xF97C138E, 0x79C5560E, 0x9CC475DF, 0x7DF6A373, 0x13678EF1,
    0x8003DF99, 0xAF10B480, 0xB59E73CD, 0x8C951598, 0x12868F5F, 0x44004C30, 0xCBE0F7E4,
    0x000BDF67, 0xDDEF0000, 0xC5C6BB03, 0x86018BF3, 0xF0184000, 0xE6B583F3, 0x3C4F187D,
    0xDF7F3793, 0x80002960, 0xF60CCBE7, 0xFFD42F93, 0xC5773C7C, 0x49F9E397, 0x3FFAC4F9,
    0xF0A8DE75, 0x17E32DF7
EW_END_OF_FONT_RES( AppFontVerdanaProCondSemiBold18 )

/* Table with links to derived variants of the font resource : 'App::FontVerdanaProCondSemiBold18' */
EW_RES_WITHOUT_VARIANTS( AppFontVerdanaProCondSemiBold18 )

/* Initializer for the class 'App::MenuItem' */
void AppMenuItem__Init( AppMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A1 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00A2 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const00A1 );
  ViewsRectangle_OnSetColorBL( &_this->Background, _Const00A3 );
  ViewsRectangle_OnSetColorBR( &_this->Background, _Const00A3 );
  ViewsRectangle_OnSetColorTR( &_this->Background, _Const00A4 );
  ViewsRectangle_OnSetColorTL( &_this->Background, _Const00A4 );
  ViewsRectangle_OnSetColor( &_this->Background, _Const00A5 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const00A1 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 1 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0050 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0051 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0051 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0050 );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const00A1 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const00A6 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const00A7 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const00A8 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana18, 
  ResourcesFont ));
  _this->SimpleTouchHandler.OnLeave = EwNewSlot( _this, AppMenuItem_Leave );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppMenuItem_Release );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppMenuItem_Press );
}

/* Re-Initializer for the class 'App::MenuItem' */
void AppMenuItem__ReInit( AppMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsText__ReInit( &_this->Text1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'App::MenuItem' */
void AppMenuItem__Done( AppMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Background );
  ViewsBevel__Done( &_this->Bevel );
  ViewsText__Done( &_this->Text1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MenuItem' */
void AppMenuItem__Mark( AppMenuItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->SimpleTouchHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppMenuItem_UpdateLayout( AppMenuItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMenuItem_UpdateViewState( AppMenuItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::MenuItem.Leave()' */
void AppMenuItem_Leave( AppMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->pressed )
  {
    XColor t;
    _this->pressed = 0;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* 'C' function for method : 'App::MenuItem.Press()' */
void AppMenuItem_Press( AppMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->pressed )
  {
    XColor t;
    _this->pressed = 1;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X + 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y + 2 ));
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* 'C' function for method : 'App::MenuItem.Release()' */
void AppMenuItem_Release( AppMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->pressed )
  {
    XColor t;
    _this->pressed = 0;
    t = _this->Bevel.ColorB;
    ViewsBevel_OnSetColorB( &_this->Bevel, _this->Bevel.ColorT );
    ViewsBevel_OnSetColorT( &_this->Bevel, t );
    t = _this->Bevel.ColorR;
    ViewsBevel_OnSetColorR( &_this->Bevel, _this->Bevel.ColorL );
    ViewsBevel_OnSetColorL( &_this->Bevel, t );
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectX1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.X - 2 ));
    CoreRectView__OnSetBounds( &_this->Text1, EwSetRectY1( _this->Text1.Super1.Bounds, 
    _this->Text1.Super1.Bounds.Point1.Y - 2 ));
  }

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= _this->Elevation )
  {
    AppTabButtonPull_MenuChoice( EwCastObject( _this->Super3.Owner->Super2.Owner, 
    AppTabButtonPull ), _this );
  }
  else
  {
    AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    ), _this->Elevation );
  }
}

/* Variants derived from the class : 'App::MenuItem' */
EW_DEFINE_CLASS_VARIANTS( AppMenuItem )
EW_END_OF_CLASS_VARIANTS( AppMenuItem )

/* Virtual Method Table (VMT) for the class : 'App::MenuItem' */
EW_DEFINE_CLASS( AppMenuItem, CoreGroup, "App::MenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppMenuItem_UpdateLayout,
  AppMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMenuItem )

/* Font resource : 'App::FontVerdana14' */
EW_DEFINE_FONT_RES( AppFontVerdana14, 12, 2, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 2, -9, 9, 9, 12, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 4, 0x000000AD ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -9, 1, 9, 5, 0x000000AD ),               /* '!' */
  EW_GLYPH( 0x0022, 1, -10, 4, 3, 6, 0x000000CC ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -9, 8, 9, 10, 0x000000F0 ),              /* '#' */
  EW_GLYPH( 0x0024, 1, -10, 6, 12, 8, 0x000001FC ),             /* '$' */
  EW_GLYPH( 0x0025, 1, -9, 11, 9, 13, 0x000002F7 ),             /* '%' */
  EW_GLYPH( 0x0026, 1, -9, 9, 9, 9, 0x00000461 ),               /* '&' */
  EW_GLYPH( 0x0027, 1, -10, 1, 3, 3, 0x00000589 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -10, 3, 12, 5, 0x00000593 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -10, 3, 12, 5, 0x0000061E ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -10, 5, 5, 8, 0x000006A9 ),              /* '*' */
  EW_GLYPH( 0x002B, 1, -7, 7, 7, 9, 0x00000712 ),               /* '+' */
  EW_GLYPH( 0x002C, 1, -2, 3, 4, 4, 0x00000777 ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -4, 4, 1, 5, 0x000007A9 ),               /* '-' */
  EW_GLYPH( 0x002E, 2, -2, 1, 2, 4, 0x000007BD ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -10, 6, 12, 5, 0x000007C3 ),             /* '/' */
  EW_GLYPH( 0x0030, 1, -9, 6, 9, 8, 0x00000883 ),               /* '0' */
  EW_GLYPH( 0x0031, 2, -9, 5, 9, 8, 0x0000093A ),               /* '1' */
  EW_GLYPH( 0x0032, 1, -9, 6, 9, 8, 0x00000992 ),               /* '2' */
  EW_GLYPH( 0x0033, 1, -9, 6, 9, 8, 0x00000A6D ),               /* '3' */
  EW_GLYPH( 0x0034, 1, -9, 7, 9, 8, 0x00000B40 ),               /* '4' */
  EW_GLYPH( 0x0035, 1, -9, 6, 9, 8, 0x00000BEA ),               /* '5' */
  EW_GLYPH( 0x0036, 1, -9, 6, 9, 8, 0x00000CAD ),               /* '6' */
  EW_GLYPH( 0x0037, 1, -9, 6, 9, 8, 0x00000D85 ),               /* '7' */
  EW_GLYPH( 0x0038, 1, -9, 6, 9, 8, 0x00000E23 ),               /* '8' */
  EW_GLYPH( 0x0039, 1, -9, 6, 9, 8, 0x00000F26 ),               /* '9' */
  EW_GLYPH( 0x003A, 2, -7, 1, 7, 5, 0x00001000 ),               /* ':' */
  EW_GLYPH( 0x003B, 1, -7, 3, 9, 5, 0x00001013 ),               /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 7, 9, 9, 0x0000105C ),               /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 7, 3, 9, 0x0000113E ),               /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 7, 9, 9, 0x000011A7 ),               /* '>' */
  EW_GLYPH( 0x003F, 1, -9, 5, 9, 7, 0x00001289 ),               /* '?' */
  EW_GLYPH( 0x0040, 1, -9, 10, 10, 12, 0x0000131C ),            /* '@' */
  EW_GLYPH( 0x0041, -1, -9, 10, 9, 8, 0x000014A7 ),             /* 'A' */
  EW_GLYPH( 0x0042, 1, -9, 6, 9, 8, 0x000015C5 ),               /* 'B' */
  EW_GLYPH( 0x0043, 1, -9, 7, 9, 9, 0x00001680 ),               /* 'C' */
  EW_GLYPH( 0x0044, 1, -9, 7, 9, 9, 0x0000175B ),               /* 'D' */
  EW_GLYPH( 0x0045, 1, -9, 6, 9, 8, 0x0000181A ),               /* 'E' */
  EW_GLYPH( 0x0046, 1, -9, 6, 9, 7, 0x000018B8 ),               /* 'F' */
  EW_GLYPH( 0x0047, 1, -9, 7, 9, 9, 0x0000193A ),               /* 'G' */
  EW_GLYPH( 0x0048, 1, -9, 7, 9, 9, 0x00001A22 ),               /* 'H' */
  EW_GLYPH( 0x0049, 1, -9, 3, 9, 5, 0x00001A91 ),               /* 'I' */
  EW_GLYPH( 0x004A, 0, -9, 4, 9, 5, 0x00001AC8 ),               /* 'J' */
  EW_GLYPH( 0x004B, 1, -9, 6, 9, 8, 0x00001B1A ),               /* 'K' */
  EW_GLYPH( 0x004C, 1, -9, 6, 9, 7, 0x00001BC2 ),               /* 'L' */
  EW_GLYPH( 0x004D, 1, -9, 8, 9, 10, 0x00001C10 ),              /* 'M' */
  EW_GLYPH( 0x004E, 1, -9, 7, 9, 9, 0x00001CDB ),               /* 'N' */
  EW_GLYPH( 0x004F, 1, -9, 8, 9, 10, 0x00001D6C ),              /* 'O' */
  EW_GLYPH( 0x0050, 1, -9, 6, 9, 8, 0x00001E78 ),               /* 'P' */
  EW_GLYPH( 0x0051, 1, -9, 8, 11, 10, 0x00001F11 ),             /* 'Q' */
  EW_GLYPH( 0x0052, 1, -9, 7, 9, 8, 0x00002058 ),               /* 'R' */
  EW_GLYPH( 0x0053, 1, -9, 6, 9, 8, 0x0000211C ),               /* 'S' */
  EW_GLYPH( 0x0054, 0, -9, 7, 9, 7, 0x0000220D ),               /* 'T' */
  EW_GLYPH( 0x0055, 1, -9, 7, 9, 9, 0x00002280 ),               /* 'U' */
  EW_GLYPH( 0x0056, -1, -9, 10, 9, 8, 0x00002309 ),             /* 'V' */
  EW_GLYPH( 0x0057, 0, -9, 13, 9, 13, 0x0000240D ),             /* 'W' */
  EW_GLYPH( 0x0058, 0, -9, 8, 9, 8, 0x0000257A ),               /* 'X' */
  EW_GLYPH( 0x0059, 0, -9, 7, 9, 7, 0x00002678 ),               /* 'Y' */
  EW_GLYPH( 0x005A, 1, -9, 6, 9, 8, 0x00002720 ),               /* 'Z' */
  EW_GLYPH( 0x005B, 1, -10, 3, 12, 5, 0x000027E5 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -10, 5, 12, 5, 0x00002825 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -10, 3, 12, 5, 0x000028DA ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -9, 8, 4, 10, 0x0000291A ),              /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 8, 1, 8, 0x0000298A ),                /* '_' */
  EW_GLYPH( 0x0060, 2, -10, 2, 2, 8, 0x000029B2 ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -7, 6, 7, 8, 0x000029CA ),               /* 'a' */
  EW_GLYPH( 0x0062, 1, -10, 6, 10, 8, 0x00002A75 ),             /* 'b' */
  EW_GLYPH( 0x0063, 1, -7, 5, 7, 6, 0x00002B14 ),               /* 'c' */
  EW_GLYPH( 0x0064, 1, -10, 6, 10, 8, 0x00002B8F ),             /* 'd' */
  EW_GLYPH( 0x0065, 1, -7, 6, 7, 8, 0x00002C2A ),               /* 'e' */
  EW_GLYPH( 0x0066, 0, -10, 4, 10, 4, 0x00002CE7 ),             /* 'f' */
  EW_GLYPH( 0x0067, 1, -7, 6, 9, 8, 0x00002D47 ),               /* 'g' */
  EW_GLYPH( 0x0068, 1, -10, 6, 10, 8, 0x00002E18 ),             /* 'h' */
  EW_GLYPH( 0x0069, 1, -10, 1, 10, 3, 0x00002E94 ),             /* 'i' */
  EW_GLYPH( 0x006A, 0, -10, 3, 12, 4, 0x00002EAA ),             /* 'j' */
  EW_GLYPH( 0x006B, 1, -10, 6, 10, 7, 0x00002EF6 ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -10, 1, 10, 3, 0x00002F88 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -7, 9, 7, 11, 0x00002F96 ),              /* 'm' */
  EW_GLYPH( 0x006E, 1, -7, 6, 7, 8, 0x0000302B ),               /* 'n' */
  EW_GLYPH( 0x006F, 1, -7, 6, 7, 8, 0x00003095 ),               /* 'o' */
  EW_GLYPH( 0x0070, 1, -7, 6, 9, 8, 0x0000312D ),               /* 'p' */
  EW_GLYPH( 0x0071, 1, -7, 6, 9, 8, 0x000031D7 ),               /* 'q' */
  EW_GLYPH( 0x0072, 1, -7, 4, 7, 5, 0x00003281 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -7, 7, 7, 7, 0x000032C1 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -9, 5, 9, 5, 0x00003374 ),               /* 't' */
  EW_GLYPH( 0x0075, 1, -7, 6, 7, 8, 0x000033DF ),               /* 'u' */
  EW_GLYPH( 0x0076, 0, -7, 7, 7, 7, 0x00003436 ),               /* 'v' */
  EW_GLYPH( 0x0077, 1, -7, 9, 7, 11, 0x000034C7 ),              /* 'w' */
  EW_GLYPH( 0x0078, 0, -7, 7, 7, 7, 0x000035C6 ),               /* 'x' */
  EW_GLYPH( 0x0079, 1, -7, 5, 9, 7, 0x00003679 ),               /* 'y' */
  EW_GLYPH( 0x007A, 1, -7, 5, 7, 7, 0x00003725 ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -10, 5, 12, 8, 0x000037B9 ),             /* '{' */
  EW_GLYPH( 0x007C, 2, -10, 1, 12, 5, 0x0000385C ),             /* '|' */
  EW_GLYPH( 0x007D, 2, -10, 5, 12, 8, 0x0000386C ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -5, 8, 3, 10, 0x0000390E ),              /* '~' */

  EW_FONT_PIXEL( AppFontVerdana14, 0x00003973 )                 /* ratio 78.38 % */
    0xEF7BDEF7, 0xF7BDD7BD, 0x00017BDE, 0x00000000, 0xF7BDEE00, 0x0F12EBDE, 0x0F387BBF,
    0x5FC4104F, 0xB52CF1FC, 0xE6FFB7B0, 0xF7AEF7AE, 0xDC6F71BA, 0xC3C63C6B, 0x5D7775DD,
    0xF9F77E77, 0xC156552E, 0xCEFE3005, 0xF671CF7E, 0xB7EB0319, 0xDDD73C3D, 0xFFFBE18F,
    0x739EB056, 0x1EF7EFFD, 0x3A8037FF, 0x787E21E7, 0xBDE6FFFF, 0x2A9231C8, 0xBD6918E4,
    0xEBFFFFD0, 0xCF39D4F7, 0x3F3D4E73, 0xF0DFFFEF, 0xA246392E, 0x71231C8A, 0x7FFFFA5F,
    0x82FFBEC7, 0x60FDF7D3, 0x57784A94, 0xFF8C2F3D, 0xFD2E3CFF, 0x932FEF7B, 0x1DFBEA11,
    0xF878F06A, 0x9DFE73DE, 0x3F316EBB, 0xD8ACDFBF, 0x0191EB7F, 0xFF63D619, 0xDFBF0ACD,
    0xA27EFD37, 0x2CF6FFA6, 0x59E91091, 0xFE6A3BFE, 0x8F7CB87E, 0x6F9FDBE7, 0xBFB7CFEF,
    0x02E1F3C7, 0xBAF7B800, 0xDD7BDEF7, 0xFF00017B, 0x65AE6399, 0xF7BDEE7F, 0x1561FC42,
    0x1CC43FFC, 0x0FBF0598, 0x03CF0319, 0x06321FBF, 0x3F7E079E, 0x967CE7D0, 0x1F7FB273,
    0x1992655F, 0x49910110, 0xABE3EFE6, 0x1B64E715, 0x7B83BB87, 0xE0000001, 0xBF3EF75E,
    0xF6F8BE73, 0x2D6FFF39, 0xC0C63556, 0x7BF99738, 0xFD2EAA87, 0xFFCD6117, 0x73BEB739,
    0x39EF38BE, 0xB306FBFB, 0xF77B8B20, 0x83FDBDC7, 0x59837CF9, 0x7EE73DE7, 0x868C2E78,
    0x9EF117BC, 0x784DEFC4, 0xF7BAF7FE, 0x0BDD7BDE, 0xEF7BDC00, 0xF7BDEEBD, 0xB7FDEE02,
    0x1F3DEF7B, 0x6F841672, 0xDFBE7788, 0xE77E5AD9, 0xF1CE7388, 0x9F6785BE, 0x9FFC8BF3,
    0x7AC53FB3, 0xC3AFC046, 0xB3DC5733, 0xEF7BDEFB, 0x5DDEF7BD, 0xA0618DD0, 0x742AC62F,
    0xBF42AC63, 0x5F9CEFC8, 0xFFCE7D9E, 0xFBE664E4, 0xF27CE63E, 0xB7DEFFFF, 0x357DFFFB,
    0xEB0F5598, 0xFF39EEF9, 0xD69CF79F, 0xF358DCFB, 0x1883FD11, 0xFF7CA4CF, 0xBF19FE73,
    0x460FFE73, 0x13E9CEBF, 0xC172E5D7, 0x1CCFF805, 0x03FB2D73, 0xC977E424, 0x7E7FEEEF,
    0xFFA7FF77, 0xE7FC4FFC, 0xBBBF227F, 0xDDF913FF, 0xEEFC87FD, 0x7BDEF7BD, 0xDEF7BDEF,
    0xF7BDEF7B, 0x97EE04DE, 0x4BF7DFF0, 0x5FBEFFCC, 0x1FE7FE62, 0xE6FF3FF3, 0xFF2FDF7F,
    0xFDC97EFB, 0xBFBED612, 0xDCF7FE71, 0xE7893C37, 0xBD1FBD61, 0x42E17003, 0x0BDDCEFD,
    0xFBDCF7DD, 0xEBDAA9FF, 0xF317F7BF, 0xEF3FEEB6, 0x09E794F7, 0x67802246, 0xE7A83518,
    0xE37BFADF, 0xDF8CEEFE, 0xB7B9DF3A, 0xF73EFF7C, 0x01FFF80F, 0xFC09A9F3, 0xE41FDF7F,
    0x7C26631A, 0x9E0FBE3F, 0x79507CC9, 0x9C593DEE, 0xBF7BDEEF, 0xA781EA23, 0x2FFBDEE2,
    0xA85F7DEE, 0xEF714F01, 0x77BDC237, 0xAC14F07F, 0x7FF9EF72, 0x3F773BF2, 0x77B9EF79,
    0xE30F7EFF, 0x403205AD, 0xFA05A804, 0x3CBE30F7, 0xBFFBDCF7, 0xE0DFFEF7, 0x20777BDE,
    0x1660D7E7, 0x60910488, 0xED7D7216, 0xDC767BDE, 0xEEBDEF7B, 0x8002F7BD, 0xEEBDEF7B,
    0x8002F7BD, 0xF7BDEF7B, 0x7BAF7BDE, 0xE000BDEF, 0xF7B97BDE, 0xC800005E, 0xCCDF9CEF,
    0x7FE9CF7B, 0xAFC61EFF, 0xDEE08816, 0x6ABDC11B, 0x0C3DFE81, 0xFD39EE79, 0x0001705D,
    0xBDEF7B80, 0x05EF7BDC, 0xBDEE0000, 0xE00005D7, 0xEEBDEEBA, 0x3C000005, 0x5EF7DCE3,
    0x9A73C6AC, 0xFDE25F71, 0xEEF0DFF0, 0x81D7E781, 0xF3C83F78, 0x0000005E, 0x7B800000,
    0x07F7BDEF, 0x3906B5DF, 0x8FBE5EF9, 0xF133C2B9, 0xF983F3BD, 0x2AA2137C, 0xB800DBC0,
    0xF00C570D, 0x01FB906B, 0x06DE05EB, 0x1BA018CF, 0xCEFC608C, 0xCE790DF9, 0xFF64E739,
    0xD75F9E1E, 0x10115582, 0xB5110111, 0x1EFF5560, 0x39E75F9E, 0xF7939CE7, 0xEF72F3DE,
    0x15621F3D, 0xBDD39C80, 0xFFBDDA37, 0xDF8C0005, 0xCF21BF39, 0xEC9CE739, 0xEBF3C3DF,
    0x022AB05A, 0xB2202222, 0xDFEAAC16, 0xE5FBF3C3, 0x6F7EE739, 0x7373BF1A, 0xF73FFD01,
    0xEE4BF3DE, 0x6603FF3D, 0xBDC9AC42, 0x1F7B9B37, 0xE2137BE0, 0x1BEF20BC, 0xFCDF39DF,
    0xBBBCE7FE, 0x35ABE316, 0xE7FFFDF0, 0x7B3BE237, 0x6FCAE45F, 0x73EED4F0, 0x7BDEEFF6,
    0x5EF7BDEF, 0x00005EF7, 0x00000000, 0x00005C17, 0x20640000, 0xF885FDF2, 0xDDF775BD,
    0xFC0FF2B7, 0xCD416733, 0xFE703FF4, 0x9AC415CC, 0xF82AC5A8, 0x860FBE3E, 0xFDF00C31,
    0x9EB01F7E, 0x6179E167, 0x2154FBC2, 0x98AA897F, 0x390FD7C9, 0x73D45EC3, 0x4F6D4DA9,
    0x316E3FF9, 0x8E79FBD2, 0x959F2067, 0x77FB09A8, 0xD4377FF1, 0xCC5CAC28, 0x5A737E0F,
    0xDF7E98AC, 0xF447EFC8, 0xC4781D39, 0x44C44F03, 0xFC1DB9F4, 0x67EF1CBE, 0xDF9962C6,
    0x87FAFCC4, 0xACB3E75F, 0x7E2FF52F, 0x786DEF0B, 0x000000A2, 0xEF7BDEF7, 0x26FEF7BD,
    0x1AF8BEE2, 0x7FC60F6B, 0x6F787FA1, 0xBDEEFE60, 0x5EEBDEF7, 0xB8000000, 0x0B7E0777,
    0x02B91FCF, 0x87E789BF, 0x83FF895C, 0xC4AC43F5, 0xDDFAC1FF, 0x0005EF7B, 0xE17B8000,
    0xBDDF03F7, 0xEAB7DE1F, 0xA837D6BC, 0xEF7BDD6F, 0xCF7EF7BD, 0xEEE7D8EF, 0x1DFB9F61,
    0xFFBD1998, 0x7D9EFFD7, 0xBE3C6565, 0x02E9FF73, 0xF9F63000, 0xBB3FF3C2, 0x081730CD,
    0xDE550690, 0xCFABC673, 0xEFB3B67F, 0x484DE2D3, 0x1DBC5A78, 0x01705F67, 0x9F9FFAC0,
    0xB7DA7FE5, 0xA8241218, 0x3DF79621, 0x7CE7583B, 0xEC9CE2B1, 0xEF2BD26F, 0xDCF237BD,
    0x42B7EF7B, 0xFBEC6B7E, 0xF47FE31E, 0xEEB86A39, 0x0005EEBD, 0x7E7FEB00, 0xB4FFC677,
    0x104864DF, 0xD5F23D60, 0x88BFBCF7, 0xF956FCEF, 0x177F73DF, 0xDF678000, 0xF7FFFC3D,
    0x01CC3ABB, 0xAF700000, 0x70B9700B, 0x60000BAF, 0x05F7F9E4, 0xC1EB0000, 0x93E43CF3,
    0x06B501AC, 0xF415FCC6, 0xEDC0179D, 0x539F6673, 0x7BDEF9EE, 0x9652D7BE, 0x0000004A,
    0xBECFB800, 0xEFFFF87B, 0x03987577, 0x7BC00000, 0x39EFABCE, 0x7CC99FB7, 0x9F213212,
    0x9EFA7CC9, 0xFFCEFB73, 0xF3EC42F9, 0x05AC2B6F, 0x5CC1A402, 0xFCF89CFA, 0xEB0059CE,
    0x38AEEF9C, 0x864DF5E7, 0xE4AA0904, 0xFDE73DEB, 0x015F9DF3, 0xF2BFF3EE, 0x00002D7F,
    0x2F3DDF8C, 0x983DEFA7, 0xBB9EF162, 0xF7DDFA8B, 0xB8398663, 0x02E1F6F7, 0xEBDEF75C,
    0x90000BDE, 0xFFBDF785, 0x0000170B, 0xDCB14C60, 0x8D93FEEF, 0x61F293CD, 0xF3CD9E3F,
    0xE6B07BF3, 0x2A17D384, 0xA6E29D8A, 0xF152BFDC, 0xBAE7BF58, 0x4C9FB6EF, 0x34C8CD73,
    0xE0E67956, 0xDEFCFEF7, 0x9187231F, 0x27EC6E43, 0xC7A9E9BF, 0x5F8DFEBC, 0x0FF5F07F,
    0xF92EEFF3, 0x7637E63D, 0xD47BFDCA, 0x93F6D9EF, 0xF5BF4CCB, 0x461F79E3, 0xEF87EB26,
    0xEF7BDEE1, 0x8C9BF7BD, 0xF1FE8AFB, 0x937BC37B, 0xA97BDDF9, 0x2F7DE5FF, 0xC5AC0859,
    0xEFDCBDFD, 0x00082CC3, 0x7BEDC1E3, 0xC5FF7001, 0x42545F7D, 0xDFE85AC0, 0x77977E65,
    0xC19E0022, 0xB3EE4BED, 0xFB3BFA70, 0xBF4D5667, 0x0006BE7D
EW_END_OF_FONT_RES( AppFontVerdana14 )

/* Table with links to derived variants of the font resource : 'App::FontVerdana14' */
EW_RES_WITHOUT_VARIANTS( AppFontVerdana14 )

/* Initializer for the class 'App::Test' */
void AppTest__Init( AppTest _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  AppTreeView__Init( &_this->TreeView, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton1, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton2, &_this->_XObject, 0 );
  CorePropertyObserver__Init( &_this->PropertyObserver, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleEverything, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTest );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A9 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const00AA );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00AB 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const00AC );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const00AD 
  ));
  CoreRectView__OnSetBounds( &_this->TreeView, _Const00AE );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->TreeView, 1 );
  CoreRectView__OnSetBounds( &_this->RadioButton, _Const00AF );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton, 0 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton, EwLoadString( &_Const00B0 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton1, _Const00B1 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton1, 1 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton1, EwLoadString( &_Const00B2 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton2, _Const00B3 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton2, 2 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton2, EwLoadString( &_Const00B4 
  ));
  CoreRectView__OnSetBounds( &_this->ToggleEverything, _Const00B5 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleEverything, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const00B6 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const00B7 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00AE );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00B8 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const00B9 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const00BA 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TreeView ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleEverything ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppTest_TestDisplay );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppTest_TestLED );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton, EwNewRef( _this, AppTest_OnGetTone, 
  AppTest_OnSetTone ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton1, EwNewRef( _this, AppTest_OnGetTone, 
  AppTest_OnSetTone ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton1, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton2, EwNewRef( _this, AppTest_OnGetTone, 
  AppTest_OnSetTone ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton2, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  _this->PropertyObserver.OnEvent = EwNewSlot( _this, AppTest_onEvent );
  CorePropertyObserver_OnSetOutlet( &_this->PropertyObserver, EwNewRef( _this, AppTest_OnGetTone, 
  AppTest_OnSetTone ));
  _this->ToggleEverything.OnSwitchOn = EwNewSlot( _this, AppTest_EverythingSlot 
  );
  _this->ToggleEverything.OnSwitchOff = EwNewSlot( _this, AppTest_EverythingSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleEverything, EwGetAutoObject( 
  &AppLargeCheckBox, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, AppTest_onEvent1 );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppTest_DropAllSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  AppTest_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Test' */
void AppTest__ReInit( AppTest _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  AppTreeView__ReInit( &_this->TreeView );
  WidgetSetRadioButton__ReInit( &_this->RadioButton );
  WidgetSetRadioButton__ReInit( &_this->RadioButton1 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton2 );
  CorePropertyObserver__ReInit( &_this->PropertyObserver );
  WidgetSetToggleButton__ReInit( &_this->ToggleEverything );
  ViewsText__ReInit( &_this->Text );
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'App::Test' */
void AppTest__Done( AppTest _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTest );

  /* Finalize all embedded objects */
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  AppTreeView__Done( &_this->TreeView );
  WidgetSetRadioButton__Done( &_this->RadioButton );
  WidgetSetRadioButton__Done( &_this->RadioButton1 );
  WidgetSetRadioButton__Done( &_this->RadioButton2 );
  CorePropertyObserver__Done( &_this->PropertyObserver );
  WidgetSetToggleButton__Done( &_this->ToggleEverything );
  ViewsText__Done( &_this->Text );
  ViewsRectangle__Done( &_this->Rectangle );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Test' */
void AppTest__Mark( AppTest _this )
{
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->TreeView );
  EwMarkObject( &_this->RadioButton );
  EwMarkObject( &_this->RadioButton1 );
  EwMarkObject( &_this->RadioButton2 );
  EwMarkObject( &_this->PropertyObserver );
  EwMarkObject( &_this->ToggleEverything );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->SystemEventHandler );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppTest_UpdateLayout( AppTest _this, XPoint aSize )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTest_UpdateViewState( AppTest _this, XSet aState )
{
  XBool everything;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->TreeView );
  everything = _this->ToggleEverything.Checked;
  {
    Command cmd;
    Command0( CMD_GET_TEST_EVERYTHING, &cmd );

    everything = cmd.char0;
  }
  WidgetSetToggleButton_OnSetChecked( &_this->ToggleEverything, everything );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->TreeView );
}

/* 'C' function for method : 'App::Test.TestDisplay()' */
void AppTest_TestDisplay( AppTest _this, XObject sender )
{
  CoreRoot rootObject;
  AppPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  rootObject = CoreView__GetRoot( _this );
  pop = ((AppPopup)EwNewObject( AppDisplayPopup, 0 ));
  AppPopup_Show( pop, rootObject );
}

/* 'C' function for method : 'App::Test.TestLED()' */
void AppTest_TestLED( AppTest _this, XObject sender )
{
  CoreRoot rootObject;
  AppPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  rootObject = CoreView__GetRoot( _this );
  pop = ((AppPopup)EwNewObject( AppLEDPopup, 0 ));
  {
    Command cmd;
    cmd.int0 = 1;
    Command0( CMD_LEDS_TEST, &cmd );
  }
  AppPopup_Show( pop, rootObject );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppTest_Init( AppTest _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'App::Test.AllOff()' */
void AppTest_AllOff( AppTest _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppLibClass_SwitchOutput( EwGetAutoObject( &AppLib, AppLibClass ), -1, -1, AppProfileFire, 
  0 );
  CoreVerticalList_InvalidateItems( &_this->TreeView.ListViewer.VerticalList, 0, 
  _this->TreeView.ListViewer.VerticalList.NoOfItems - 1 );
}

/* This slot method is executed when the associated property observer 'PropertyObserver' 
   is notified. */
void AppTest_onEvent( AppTest _this, XObject sender )
{
  XInt32 tone;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  tone = _this->Tone;
  Command1( CMD_SET_TEST_PROFILE, tone );
}

/* 'C' function for method : 'App::Test.EverythingSlot()' */
void AppTest_EverythingSlot( AppTest _this, XObject sender )
{
  XBool allzones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsRectangle_OnSetVisible( &_this->Rectangle, _this->ToggleEverything.Checked 
  );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->TreeView, (XBool)!_this->ToggleEverything.Checked 
  );
  allzones = _this->ToggleEverything.Checked;
  EwPostSignal( _this->TreeView.ListViewer.onRefreshAll, ((XObject)_this ));
  Command1( CMD_TEST_EVERYTHING, allzones );
  EwPostSignal( EwNewSlot( &_this->TreeView, AppTreeView_CountOnTest ), ((XObject)_this 
    ));
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppTest_onEvent1( AppTest _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::Test.DropAllSlot()' */
void AppTest_DropAllSlot( AppTest _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( app->LevelAccess.AccessLevel < 3 )
    {
      AppApplication_LowLevel( app, 3 );
    }
    else
    {
      AppConfirmPopup cp = EwNewObject( AppConfirmPopup, 0 );
      ViewsText_OnSetString( &cp->Text1, EwLoadString( &_Const00BB ));
      AppConfirmPopup_ShowThen( cp, CoreView__GetRoot( _this ), EwNewSlot( _this, 
      AppTest_DropAllGo ));
    }
  }
}

/* 'C' function for method : 'App::Test.DropAllGo()' */
void AppTest_DropAllGo( AppTest _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  Command2( CMD_DROP_TO_PPU, 4095, 4095 );
}

/* Default onget method for the property 'Tone' */
XInt32 AppTest_OnGetTone( AppTest _this )
{
  return _this->Tone;
}

/* Default onset method for the property 'Tone' */
void AppTest_OnSetTone( AppTest _this, XInt32 value )
{
  _this->Tone = value;
}

/* Variants derived from the class : 'App::Test' */
EW_DEFINE_CLASS_VARIANTS( AppTest )
EW_END_OF_CLASS_VARIANTS( AppTest )

/* Virtual Method Table (VMT) for the class : 'App::Test' */
EW_DEFINE_CLASS( AppTest, CoreGroup, "App::Test" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppTest_UpdateLayout,
  AppTest_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTest )

/* Initializer for the class 'App::Popup' */
void AppPopup__Init( AppPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSimpleTouchHandler__Init( &_this->InsideTouchHandler, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle5, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle6, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle8, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler2, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00BC );
  CoreQuadView__OnSetPoint4( &_this->InsideTouchHandler, _Const00BD );
  CoreQuadView__OnSetPoint3( &_this->InsideTouchHandler, _Const00BE );
  CoreQuadView__OnSetPoint2( &_this->InsideTouchHandler, _Const00BF );
  CoreQuadView__OnSetPoint1( &_this->InsideTouchHandler, _Const00C0 );
  CoreSimpleTouchHandler_OnSetRetargetDelay( &_this->InsideTouchHandler, 10000 );
  CoreSimpleTouchHandler_OnSetRetargetOffset( &_this->InsideTouchHandler, 1000 );
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->InsideTouchHandler, 100 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00C1 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle1, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const00C4 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle1, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const00C5 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle4, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle4, _Const00C6 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle4, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle5, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle5, _Const00C7 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle5, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle5, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle5, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle5, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle6, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle6, _Const00C8 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle6, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle6, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle6, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle6, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle7, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle7, _Const00C9 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle7, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle7, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle7, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle7, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle8, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle8, _Const00CA );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle8, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle8, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle8, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle8, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const00CB );
  ViewsRectangle_OnSetColor( &_this->Background, _Const00CC );
  CoreGroup__Add( _this, ((CoreView)&_this->InsideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  _this->InsideTouchHandler.OnPress = EwNewSlot( _this, AppPopup_CatchBackgroundTap 
  );
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, AppPopup_FireHide );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->FireListChangeEvent );
  _this->SystemEventHandler2.OnEvent = EwNewSlot( _this, AppPopup_FireHide );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler2, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->EventListChangedEvent );
  _this->SystemEventHandler1.OnEvent = EwNewSlot( _this, AppPopup_FireHide );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->GotoFireDisplay );

  /* Call the user defined constructor */
  AppPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Popup' */
void AppPopup__ReInit( AppPopup _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSimpleTouchHandler__ReInit( &_this->InsideTouchHandler );
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  ViewsRectangle__ReInit( &_this->Rectangle4 );
  ViewsRectangle__ReInit( &_this->Rectangle5 );
  ViewsRectangle__ReInit( &_this->Rectangle6 );
  ViewsRectangle__ReInit( &_this->Rectangle7 );
  ViewsRectangle__ReInit( &_this->Rectangle8 );
  ViewsRectangle__ReInit( &_this->Background );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler2 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler1 );
}

/* Finalizer method for the class 'App::Popup' */
void AppPopup__Done( AppPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppPopup );

  /* Finalize all embedded objects */
  CoreSimpleTouchHandler__Done( &_this->InsideTouchHandler );
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  ViewsRectangle__Done( &_this->Rectangle4 );
  ViewsRectangle__Done( &_this->Rectangle5 );
  ViewsRectangle__Done( &_this->Rectangle6 );
  ViewsRectangle__Done( &_this->Rectangle7 );
  ViewsRectangle__Done( &_this->Rectangle8 );
  ViewsRectangle__Done( &_this->Background );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler2 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler1 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Popup' */
void AppPopup__Mark( AppPopup _this )
{
  EwMarkObject( &_this->InsideTouchHandler );
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Rectangle4 );
  EwMarkObject( &_this->Rectangle5 );
  EwMarkObject( &_this->Rectangle6 );
  EwMarkObject( &_this->Rectangle7 );
  EwMarkObject( &_this->Rectangle8 );
  EwMarkObject( &_this->Background );
  EwMarkObject( _this->mask );
  EwMarkObject( _this->touch );
  EwMarkObject( _this->root );
  EwMarkObject( _this->Parent );
  EwMarkObject( &_this->SystemEventHandler );
  EwMarkObject( &_this->SystemEventHandler2 );
  EwMarkSlot( _this->onHide );
  EwMarkObject( &_this->SystemEventHandler1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppPopup_UpdateLayout( AppPopup _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppPopup_UpdateViewState( AppPopup _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppPopup_Init( AppPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'App::Popup.Show()' */
void AppPopup_Show( AppPopup _this, CoreRoot rootObject )
{
  XPoint m;

  _this->mask = EwNewObject( ViewsRectangle, 0 );
  _this->touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->root = rootObject;
  CoreQuadView__OnSetPoint1( _this->touch, _Const0052 );
  CoreQuadView__OnSetPoint2( _this->touch, _Const008F );
  CoreQuadView__OnSetPoint3( _this->touch, _Const008E );
  CoreQuadView__OnSetPoint4( _this->touch, _Const00CD );
  _this->touch->OnPress = EwNewSlot( _this, AppPopup_OutsideTap );
  CoreGroup__Add( rootObject, ((CoreView)_this->touch ), 0 );
  ViewsRectangle_OnSetColor( _this->mask, _Const00CE );
  CoreRectView__OnSetBounds( _this->mask, _Const0002 );
  CoreGroup__Add( rootObject, ((CoreView)_this->mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super2.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super2.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super2.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super2.Bounds, EwMovePointNeg( 
  _Const008E, m )));
  _this->Dead = 0;
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  return;
}

/* 'C' function for method : 'App::Popup.Hide()' */
void AppPopup_Hide( AppPopup _this )
{
  if ( !_this->Dead )
  {
    if ( _this->root != 0 )
    {
      EwSignal( _this->onHide, ((XObject)_this ));
      CoreGroup__Remove( _this->root, ((CoreView)_this->mask ));
      CoreGroup__Remove( _this->root, ((CoreView)_this->touch ));
      CoreGroup__Remove( _this->root, ((CoreView)_this ));
      _this->Dead = 1;

      if ( _this->Parent != 0 )
      {
        if ( CoreGroup_OnGetVisible((CoreGroup)_this->Parent ) == 0 )
        {
          CoreGroup__OnSetVisible( _this->Parent, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)_this->Parent, 1 );
        }
      }
    }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppPopup_FireHide( AppPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide( _this );
}

/* 'C' function for method : 'App::Popup.OutsideTap()' */
void AppPopup_OutsideTap( AppPopup _this, XObject sender )
{
  CoreSimpleTouchHandler tap = EwCastObject( sender, CoreSimpleTouchHandler );

  if ( !EwIsPointInRect( _this->Super2.Bounds, tap->HittingPos ))
  {
    AppPopup_Hide( _this );
  }
}

/* 'C' function for method : 'App::Popup.CatchBackgroundTap()' */
void AppPopup_CatchBackgroundTap( AppPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* Variants derived from the class : 'App::Popup' */
EW_DEFINE_CLASS_VARIANTS( AppPopup )
EW_END_OF_CLASS_VARIANTS( AppPopup )

/* Virtual Method Table (VMT) for the class : 'App::Popup' */
EW_DEFINE_CLASS( AppPopup, CoreGroup, "App::Popup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppPopup )

/* Initializer for the class 'App::DisplayPopup' */
void AppDisplayPopup__Init( AppDisplayPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle10, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle11, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle12, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle13, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle14, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle15, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text6, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle16, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle23, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle24, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle25, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle26, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle27, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle28, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisplayPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const00CF );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle9, _Const0000 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle9, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle9, _Const000E );
  CoreRectView__OnSetBounds( &_this->Rectangle10, _Const00D0 );
  ViewsRectangle_OnSetColor( &_this->Rectangle10, _Const0047 );
  CoreRectView__OnSetBounds( &_this->Rectangle11, _Const00D1 );
  ViewsRectangle_OnSetColor( &_this->Rectangle11, _Const00D2 );
  CoreRectView__OnSetBounds( &_this->Rectangle12, _Const00D3 );
  ViewsRectangle_OnSetColor( &_this->Rectangle12, _Const00D4 );
  CoreRectView__OnSetBounds( &_this->Rectangle13, _Const00D5 );
  ViewsRectangle_OnSetColor( &_this->Rectangle13, _Const00D6 );
  CoreRectView__OnSetBounds( &_this->Rectangle14, _Const00D7 );
  ViewsRectangle_OnSetColor( &_this->Rectangle14, _Const00D8 );
  CoreRectView__OnSetBounds( &_this->Rectangle15, _Const00D9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle15, _Const00DA );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const00D0 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const00DB ));
  CoreView_OnSetLayout((CoreView)&_this->Text2, CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Text2, _Const00D1 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const00DC ));
  CoreView_OnSetLayout((CoreView)&_this->Text3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text3, _Const00D3 );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const00DD ));
  CoreView_OnSetLayout((CoreView)&_this->Text4, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text4, _Const00D7 );
  ViewsText_OnSetAlignment( &_this->Text4, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const00DE ));
  ViewsText_OnSetColor( &_this->Text4, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->Text5, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Text5, _Const00D0 );
  ViewsText_OnSetAlignment( &_this->Text5, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const00DB ));
  CoreView_OnSetLayout((CoreView)&_this->Text6, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text6, _Const00D5 );
  ViewsText_OnSetAlignment( &_this->Text6, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text6, EwLoadString( &_Const00DF ));
  ViewsText_OnSetColor( &_this->Text6, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->Text7, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text7, _Const00D9 );
  ViewsText_OnSetAlignment( &_this->Text7, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text7, EwLoadString( &_Const00E0 ));
  ViewsText_OnSetColor( &_this->Text7, _Const000E );
  CoreRectView__OnSetBounds( &_this->Rectangle16, _Const00CF );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle16, _Const0000 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle16, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle16, _Const000E );
  CoreRectView__OnSetBounds( &_this->Rectangle23, _Const00E1 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle23, _Const00DA );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle23, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle23, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle23, _Const00DA );
  CoreRectView__OnSetBounds( &_this->Rectangle24, _Const00E2 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle24, _Const00D8 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle24, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle24, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle24, _Const00D8 );
  CoreRectView__OnSetBounds( &_this->Rectangle25, _Const00E3 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle25, _Const00D6 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle25, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle25, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle25, _Const00D6 );
  CoreRectView__OnSetBounds( &_this->Rectangle26, _Const00E4 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle26, _Const00D4 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle26, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle26, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle26, _Const00D4 );
  CoreRectView__OnSetBounds( &_this->Rectangle27, _Const00E5 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle27, _Const00D2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle27, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle27, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle27, _Const00D2 );
  CoreRectView__OnSetBounds( &_this->Rectangle28, _Const00E6 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle28, _Const0047 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle28, _Const000E );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle28, _Const000E );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle28, _Const0047 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const00E7 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00E8 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle27 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text6, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text7, EwLoadResource( &FlatFontXL, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppDisplayPopup_Proceed );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::DisplayPopup' */
void AppDisplayPopup__ReInit( AppDisplayPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  ViewsRectangle__ReInit( &_this->Rectangle10 );
  ViewsRectangle__ReInit( &_this->Rectangle11 );
  ViewsRectangle__ReInit( &_this->Rectangle12 );
  ViewsRectangle__ReInit( &_this->Rectangle13 );
  ViewsRectangle__ReInit( &_this->Rectangle14 );
  ViewsRectangle__ReInit( &_this->Rectangle15 );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text2 );
  ViewsText__ReInit( &_this->Text3 );
  ViewsText__ReInit( &_this->Text4 );
  ViewsText__ReInit( &_this->Text5 );
  ViewsText__ReInit( &_this->Text6 );
  ViewsText__ReInit( &_this->Text7 );
  ViewsRectangle__ReInit( &_this->Rectangle16 );
  ViewsRectangle__ReInit( &_this->Rectangle23 );
  ViewsRectangle__ReInit( &_this->Rectangle24 );
  ViewsRectangle__ReInit( &_this->Rectangle25 );
  ViewsRectangle__ReInit( &_this->Rectangle26 );
  ViewsRectangle__ReInit( &_this->Rectangle27 );
  ViewsRectangle__ReInit( &_this->Rectangle28 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'App::DisplayPopup' */
void AppDisplayPopup__Done( AppDisplayPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisplayPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle9 );
  ViewsRectangle__Done( &_this->Rectangle10 );
  ViewsRectangle__Done( &_this->Rectangle11 );
  ViewsRectangle__Done( &_this->Rectangle12 );
  ViewsRectangle__Done( &_this->Rectangle13 );
  ViewsRectangle__Done( &_this->Rectangle14 );
  ViewsRectangle__Done( &_this->Rectangle15 );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text2 );
  ViewsText__Done( &_this->Text3 );
  ViewsText__Done( &_this->Text4 );
  ViewsText__Done( &_this->Text5 );
  ViewsText__Done( &_this->Text6 );
  ViewsText__Done( &_this->Text7 );
  ViewsRectangle__Done( &_this->Rectangle16 );
  ViewsRectangle__Done( &_this->Rectangle23 );
  ViewsRectangle__Done( &_this->Rectangle24 );
  ViewsRectangle__Done( &_this->Rectangle25 );
  ViewsRectangle__Done( &_this->Rectangle26 );
  ViewsRectangle__Done( &_this->Rectangle27 );
  ViewsRectangle__Done( &_this->Rectangle28 );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisplayPopup' */
void AppDisplayPopup__Mark( AppDisplayPopup _this )
{
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->Rectangle10 );
  EwMarkObject( &_this->Rectangle11 );
  EwMarkObject( &_this->Rectangle12 );
  EwMarkObject( &_this->Rectangle13 );
  EwMarkObject( &_this->Rectangle14 );
  EwMarkObject( &_this->Rectangle15 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->Text6 );
  EwMarkObject( &_this->Text7 );
  EwMarkObject( &_this->Rectangle16 );
  EwMarkObject( &_this->Rectangle23 );
  EwMarkObject( &_this->Rectangle24 );
  EwMarkObject( &_this->Rectangle25 );
  EwMarkObject( &_this->Rectangle26 );
  EwMarkObject( &_this->Rectangle27 );
  EwMarkObject( &_this->Rectangle28 );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::DisplayPopup.Proceed()' */
void AppDisplayPopup_Proceed( AppDisplayPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* Variants derived from the class : 'App::DisplayPopup' */
EW_DEFINE_CLASS_VARIANTS( AppDisplayPopup )
EW_END_OF_CLASS_VARIANTS( AppDisplayPopup )

/* Virtual Method Table (VMT) for the class : 'App::DisplayPopup' */
EW_DEFINE_CLASS( AppDisplayPopup, AppPopup, "App::DisplayPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisplayPopup )

/* Initializer for the class 'App::Settings' */
void AppSettings__Init( AppSettings _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->OutputDelaysButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Resound, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DelaysText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Panel, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Site, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Version, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Panel1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Site1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Version1, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->OutputOverrideButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Intruder, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->SameZoneButton, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Daytime, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->NightTime, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->SetupRadio, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangeEventHandler1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangeEventHandler2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->AutoSilernce, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->SilenceBarSlider2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->silencetime, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSettings );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const00E9 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00EA );
  CoreRectView__OnSetBounds( _this, _Const00EB );
  GraphicsAttrSet_OnSetColor0( &_this->AttrSet, _Const0000 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const00EC );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const00ED 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const00EE );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const00EF 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const00F0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const00F1 
  ));
  CoreRectView__OnSetBounds( &_this->OutputDelaysButton, _Const00F2 );
  WidgetSetToggleButton_OnSetLabelOn( &_this->OutputDelaysButton, 0 );
  WidgetSetToggleButton_OnSetLabelOff( &_this->OutputDelaysButton, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->OutputDelaysButton, EwLoadString( &_Const00F3 
  ));
  CoreRectView__OnSetBounds( &_this->Resound, _Const00F4 );
  ViewsText_OnSetAlignment( &_this->Resound, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Resound, EwLoadString( &_Const00F5 ));
  ViewsText_OnSetColor( &_this->Resound, _Const000E );
  CoreRectView__OnSetBounds( &_this->DelaysText, _Const00F6 );
  ViewsText_OnSetAlignment( &_this->DelaysText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DelaysText, EwLoadString( &_Const00F7 ));
  ViewsText_OnSetColor( &_this->DelaysText, _Const000E );
  CoreRectView__OnSetBounds( &_this->Panel, _Const00F8 );
  ViewsText_OnSetAlignment( &_this->Panel, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Panel, EwLoadString( &_Const00F9 ));
  ViewsText_OnSetColor( &_this->Panel, _Const000E );
  CoreRectView__OnSetBounds( &_this->Site, _Const00FA );
  ViewsText_OnSetAlignment( &_this->Site, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Site, EwLoadString( &_Const00FB ));
  ViewsText_OnSetColor( &_this->Site, _Const000E );
  CoreRectView__OnSetBounds( &_this->Version, _Const00FC );
  ViewsText_OnSetAlignment( &_this->Version, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Version, EwLoadString( &_Const00FD ));
  ViewsText_OnSetColor( &_this->Version, _Const000E );
  CoreRectView__OnSetBounds( &_this->Panel1, _Const00FE );
  ViewsText_OnSetAlignment( &_this->Panel1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Panel1, EwLoadString( &_Const00F9 ));
  ViewsText_OnSetColor( &_this->Panel1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Site1, _Const00FF );
  ViewsText_OnSetAlignment( &_this->Site1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Site1, EwLoadString( &_Const00FB ));
  ViewsText_OnSetColor( &_this->Site1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Version1, _Const0100 );
  ViewsText_OnSetAlignment( &_this->Version1, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->Version1, EwLoadString( &_Const00FD ));
  ViewsText_OnSetColor( &_this->Version1, _Const000E );
  CoreRectView__OnSetBounds( &_this->OutputOverrideButton, _Const0101 );
  WidgetSetToggleButton_OnSetLabelOn( &_this->OutputOverrideButton, 0 );
  WidgetSetToggleButton_OnSetLabelOff( &_this->OutputOverrideButton, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->OutputOverrideButton, EwLoadString( 
  &_Const0102 ));
  CoreRectView__OnSetBounds( &_this->Text, _Const0103 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const0104 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 20 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0105 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, 0 );
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider1, _Const0106 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider1, 19 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
  CoreRectView__OnSetBounds( &_this->Intruder, _Const0107 );
  ViewsText_OnSetAlignment( &_this->Intruder, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->Intruder, EwLoadString( &_Const0108 ));
  ViewsText_OnSetColor( &_this->Intruder, _Const000E );
  CoreRectView__OnSetBounds( &_this->SameZoneButton, _Const0109 );
  WidgetSetToggleButton_OnSetLabel( &_this->SameZoneButton, EwLoadString( &_Const010A 
  ));
  CoreRectView__OnSetBounds( &_this->Daytime, _Const010B );
  WidgetSetToggleButton_OnSetLabel( &_this->Daytime, EwLoadString( &_Const010C ));
  CoreRectView__OnSetBounds( &_this->NightTime, _Const010D );
  WidgetSetToggleButton_OnSetLabel( &_this->NightTime, EwLoadString( &_Const010E 
  ));
  CoreRectView__OnSetBounds( &_this->SetupRadio, _Const010F );
  WidgetSetPushButton_OnSetLabel( &_this->SetupRadio, EwLoadString( &_Const0110 
  ));
  CoreRectView__OnSetBounds( &_this->AutoSilernce, _Const0111 );
  ViewsText_OnSetAlignment( &_this->AutoSilernce, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->AutoSilernce, EwLoadString( &_Const0112 ));
  ViewsText_OnSetColor( &_this->AutoSilernce, _Const000E );
  CoreRectView__OnSetBounds( &_this->SilenceBarSlider2, _Const0113 );
  WidgetSetHorizontalSlider_OnSetStepSize( &_this->SilenceBarSlider2, 15 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->SilenceBarSlider2, 120 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->SilenceBarSlider2, 0 );
  CoreRectView__OnSetBounds( &_this->silencetime, _Const0114 );
  ViewsText_OnSetAlignment( &_this->silencetime, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->silencetime, EwLoadString( &_Const0115 ));
  ViewsText_OnSetColor( &_this->silencetime, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0116 );
  ViewsText_OnSetWrapText( &_this->Text2, 1 );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const0117 ));
  ViewsText_OnSetColor( &_this->Text2, _Const0118 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputDelaysButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Resound ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DelaysText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Panel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Site ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Version ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Panel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Site1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Version1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputOverrideButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Intruder ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SameZoneButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Daytime ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NightTime ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SetupRadio ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AutoSilernce ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SilenceBarSlider2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->silencetime ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &AppFontVerdanaProSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  _this->PushButton1.OnRelease = EwNullSlot;
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppSettings_DaySlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNullSlot;
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppSettings_SMSSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNullSlot;
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppSettings_SetPin );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->OutputDelaysButton.OnSwitchOn = EwNewSlot( _this, AppSettings_DelaysSlot 
  );
  _this->OutputDelaysButton.OnSwitchOff = EwNewSlot( _this, AppSettings_DelaysSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->OutputDelaysButton, EwGetAutoObject( 
  &AppNormalCheckBox, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Resound, EwLoadResource( &AppFontMediumBold, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->DelaysText, EwLoadResource( &AppFontMediumBold, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Panel, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Site, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Version, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Panel1, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Site1, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Version1, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  _this->OutputOverrideButton.OnSwitchOn = EwNewSlot( _this, AppSettings_OverrideSlot 
  );
  _this->OutputOverrideButton.OnSwitchOff = EwNewSlot( _this, AppSettings_OverrideSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->OutputOverrideButton, EwGetAutoObject( 
  &AppNormalCheckBox, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNewSlot( _this, AppSettings_Delay1SliderSlot 
  );
  _this->HorzBarSlider.OnEnd = EwNewSlot( _this, AppSettings_End );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider1.OnChange = EwNewSlot( _this, AppSettings_Delay2SliderSlot 
  );
  _this->HorzBarSlider1.OnEnd = EwNewSlot( _this, AppSettings_End );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider1, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->Intruder, EwLoadResource( &AppFontMediumBold, ResourcesFont 
  ));
  _this->SameZoneButton.OnSwitchOn = EwNewSlot( _this, AppSettings_ResoundSlot );
  _this->SameZoneButton.OnSwitchOff = EwNewSlot( _this, AppSettings_ResoundSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->SameZoneButton, EwGetAutoObject( 
  &AppNormalCheckBox, WidgetSetToggleButtonConfig ));
  _this->Daytime.OnSwitchOn = EwNewSlot( _this, AppSettings_SecuritySlot );
  _this->Daytime.OnSwitchOff = EwNewSlot( _this, AppSettings_SecuritySlot );
  WidgetSetToggleButton_OnSetAppearance( &_this->Daytime, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->NightTime.OnSwitchOn = EwNewSlot( _this, AppSettings_SecuritySlot );
  _this->NightTime.OnSwitchOff = EwNewSlot( _this, AppSettings_SecuritySlot );
  WidgetSetToggleButton_OnSetAppearance( &_this->NightTime, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->SetupRadio.OnRelease = EwNullSlot;
  _this->SetupRadio.OnActivate = EwNewSlot( _this, AppSettings_SetupAcumesh );
  WidgetSetPushButton_OnSetAppearance( &_this->SetupRadio, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SiteChangeEventHandler1.OnEvent = EwNewSlot( _this, AppSettings_SiteChange 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangeEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->SiteChangeEventHandler2.OnEvent = EwNewSlot( _this, AppSettings_SiteChange 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangeEventHandler2, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );
  ViewsText_OnSetFont( &_this->AutoSilernce, EwLoadResource( &AppFontMediumBold, 
  ResourcesFont ));
  _this->SilenceBarSlider2.OnChange = EwNewSlot( _this, AppSettings_AutoSilenceSlot 
  );
  _this->SilenceBarSlider2.OnEnd = EwNewSlot( _this, AppSettings_AutoSilenceSlotEnd 
  );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->SilenceBarSlider2, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->silencetime, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::Settings' */
void AppSettings__ReInit( AppSettings _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  WidgetSetToggleButton__ReInit( &_this->OutputDelaysButton );
  ViewsText__ReInit( &_this->Resound );
  ViewsText__ReInit( &_this->DelaysText );
  ViewsText__ReInit( &_this->Panel );
  ViewsText__ReInit( &_this->Site );
  ViewsText__ReInit( &_this->Version );
  ViewsText__ReInit( &_this->Panel1 );
  ViewsText__ReInit( &_this->Site1 );
  ViewsText__ReInit( &_this->Version1 );
  WidgetSetToggleButton__ReInit( &_this->OutputOverrideButton );
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider1 );
  ViewsText__ReInit( &_this->Intruder );
  WidgetSetToggleButton__ReInit( &_this->SameZoneButton );
  WidgetSetToggleButton__ReInit( &_this->Daytime );
  WidgetSetToggleButton__ReInit( &_this->NightTime );
  WidgetSetPushButton__ReInit( &_this->SetupRadio );
  CoreSystemEventHandler__ReInit( &_this->SiteChangeEventHandler1 );
  CoreSystemEventHandler__ReInit( &_this->SiteChangeEventHandler2 );
  ViewsText__ReInit( &_this->AutoSilernce );
  WidgetSetHorizontalSlider__ReInit( &_this->SilenceBarSlider2 );
  ViewsText__ReInit( &_this->silencetime );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'App::Settings' */
void AppSettings__Done( AppSettings _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSettings );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  GraphicsAttrSet__Done( &_this->AttrSet );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  WidgetSetToggleButton__Done( &_this->OutputDelaysButton );
  ViewsText__Done( &_this->Resound );
  ViewsText__Done( &_this->DelaysText );
  ViewsText__Done( &_this->Panel );
  ViewsText__Done( &_this->Site );
  ViewsText__Done( &_this->Version );
  ViewsText__Done( &_this->Panel1 );
  ViewsText__Done( &_this->Site1 );
  ViewsText__Done( &_this->Version1 );
  WidgetSetToggleButton__Done( &_this->OutputOverrideButton );
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );
  ViewsText__Done( &_this->Text1 );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider1 );
  ViewsText__Done( &_this->Intruder );
  WidgetSetToggleButton__Done( &_this->SameZoneButton );
  WidgetSetToggleButton__Done( &_this->Daytime );
  WidgetSetToggleButton__Done( &_this->NightTime );
  WidgetSetPushButton__Done( &_this->SetupRadio );
  CoreSystemEventHandler__Done( &_this->SiteChangeEventHandler1 );
  CoreSystemEventHandler__Done( &_this->SiteChangeEventHandler2 );
  ViewsText__Done( &_this->AutoSilernce );
  WidgetSetHorizontalSlider__Done( &_this->SilenceBarSlider2 );
  ViewsText__Done( &_this->silencetime );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Settings' */
void AppSettings__Mark( AppSettings _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->OutputDelaysButton );
  EwMarkObject( &_this->Resound );
  EwMarkObject( &_this->DelaysText );
  EwMarkObject( &_this->Panel );
  EwMarkObject( &_this->Site );
  EwMarkObject( &_this->Version );
  EwMarkObject( &_this->Panel1 );
  EwMarkObject( &_this->Site1 );
  EwMarkObject( &_this->Version1 );
  EwMarkObject( &_this->OutputOverrideButton );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->HorzBarSlider1 );
  EwMarkObject( &_this->Intruder );
  EwMarkObject( &_this->SameZoneButton );
  EwMarkObject( &_this->Daytime );
  EwMarkObject( &_this->NightTime );
  EwMarkObject( &_this->SetupRadio );
  EwMarkObject( &_this->SiteChangeEventHandler1 );
  EwMarkObject( &_this->SiteChangeEventHandler2 );
  EwMarkObject( &_this->AutoSilernce );
  EwMarkObject( &_this->SilenceBarSlider2 );
  EwMarkObject( &_this->silencetime );
  EwMarkObject( &_this->Text2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSettings_UpdateLayout( AppSettings _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSettings_UpdateViewState( AppSettings _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  EwSignal( EwNewSlot( _this, AppSettings_GetSettings ), ((XObject)_this ));
}

/* 'C' function for method : 'App::Settings.SetPin()' */
void AppSettings_SetPin( AppSettings _this, XObject sender )
{
  AppKeypadChangePopup kp;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  kp = EwNewObject( AppKeypadChangePopup, 0 );
  AppPopup_Show((AppPopup)kp, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::Settings.DelaysSlot()' */
void AppSettings_DelaysSlot( AppSettings _this, XObject sender )
{
  AppApplication app = EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    );

  if ( app != 0 )
  {
    if ( app->LevelAccess.AccessLevel > 2 )
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider, _this->OutputDelaysButton.Checked 
      );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, _this->OutputDelaysButton.Checked 
      );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputOverrideButton, _this->OutputDelaysButton.Checked 
      );

      if ( _this->OutputDelaysButton.Checked )
      {
        ViewsText_OnSetColor( &_this->Text, _Const000E );
        ViewsText_OnSetColor( &_this->Text1, _Const000E );
      }
      else
      {
        ViewsText_OnSetColor( &_this->Text, _Const0119 );
        ViewsText_OnSetColor( &_this->Text1, _Const0119 );
      }
    }
  }

  if ( sender == ((XObject)&_this->OutputDelaysButton ))
  {
    EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::Settings.DaySlot()' */
void AppSettings_DaySlot( AppSettings _this, XObject sender )
{
  AppDayTimesPopup bl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bl = EwNewObject( AppDayTimesPopup, 0 );

  if ( bl != 0 )
  {
    AppApplication app;
    CoreVerticalList_InvalidateItems( &bl->VerticalList, 0, 6 );
    AppPopup_Show((AppPopup)bl, CoreView__GetRoot( _this ));
    app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

    if ( app != 0 )
    {
      CoreGroup_OnSetEnabled((CoreGroup)&bl->VerticalList, (XBool)( app->LevelAccess.AccessLevel 
      >= 3 ));
      CoreSimpleTouchHandler_OnSetEnabled( &bl->Super1.InsideTouchHandler, (XBool)( 
      app->LevelAccess.AccessLevel < 3 ));
    }
  }
}

/* 'C' function for method : 'App::Settings.SMSSlot()' */
void AppSettings_SMSSlot( AppSettings _this, XObject sender )
{
  AppTextPopup bl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bl = EwNewObject( AppTextPopup, 0 );
  AppPopup_Show((AppPopup)bl, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::Settings.SetSettings()' */
void AppSettings_SetSettings( AppSettings _this, XObject sender )
{
  XSet settings;
  XInt32 delay1;
  XInt32 delay2;
  XInt32 autosi;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  settings = 0;
  {
    Command cmd;

    Command0( CMD_GET_SETTINGS, &cmd );  

    settings = cmd.int0;
  }

  if ( !_this->SameZoneButton.Checked )
  {
    settings = settings | AppSiteSettingResoundNewZone;
  }
  else
  {
    settings = settings & ~AppSiteSettingResoundNewZone;
  }

  if ( !_this->Daytime.Checked )
  {
    settings = settings | AppSiteSettingIgnoreSecurityInDay;
  }
  else
  {
    settings = settings & ~AppSiteSettingIgnoreSecurityInDay;
  }

  if ( !_this->NightTime.Checked )
  {
    settings = settings | AppSiteSettingIgnoreSecurityAtNight;
  }
  else
  {
    settings = settings & ~AppSiteSettingIgnoreSecurityAtNight;
  }

  if ( !_this->OutputDelaysButton.Checked )
  {
    settings = settings | AppSiteSettingDisableOutputDelays;
  }
  else
  {
    settings = settings & ~AppSiteSettingDisableOutputDelays;
  }

  if ( _this->OutputOverrideButton.Checked )
  {
    settings = settings | AppSiteSettingOverrideOutputDelays;
  }
  else
  {
    settings = settings & ~AppSiteSettingOverrideOutputDelays;
  }

  delay1 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  delay2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );
  autosi = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->SilenceBarSlider2 
  );
  {
    Command cmd;

     cmd.int0 = autosi;
     cmd.int1 = settings;
     cmd.short4 = delay1 * 30;
     cmd.short5 = delay2 * 30; 

     Command0( CMD_SET_SETTINGS, &cmd );
  }
}

/* 'C' function for method : 'App::Settings.ResoundSlot()' */
void AppSettings_ResoundSlot( AppSettings _this, XObject sender )
{
  if ( sender == ((XObject)&_this->SameZoneButton ))
  {
    EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::Settings.Delay1SliderSlot()' */
void AppSettings_Delay1SliderSlot( AppSettings _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i2 = 20 - i;

  if ( i == 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
  }

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, i2 );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011A ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const011B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011C ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const011B )));
}

/* 'C' function for method : 'App::Settings.End()' */
void AppSettings_End( AppSettings _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i == 0 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
    ViewsText_OnSetColor( &_this->Text1, _Const011D );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
    ViewsText_OnSetColor( &_this->Text1, _Const000E );
  }

  EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
}

/* 'C' function for method : 'App::Settings.Delay2SliderSlot()' */
void AppSettings_Delay2SliderSlot( AppSettings _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i = 20 - i2;

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, i );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011A ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const011B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011C ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const011B )));
}

/* 'C' function for method : 'App::Settings.OverrideSlot()' */
void AppSettings_OverrideSlot( AppSettings _this, XObject sender )
{
  if ( sender == ((XObject)&_this->OutputOverrideButton ))
  {
    EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::Settings.GetSettings()' */
void AppSettings_GetSettings( AppSettings _this, XObject sender )
{
  AppApplication app;
  XSet settings;
  XString site;
  XInt32 version;
  XString panel;
  XInt32 delay1;
  XInt32 delay2;
  XInt32 autosilence;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->Daytime, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->NightTime, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->SameZoneButton, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputOverrideButton, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputDelaysButton, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->SetupRadio, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->SilenceBarSlider2, 0 );

    if ( app->LevelAccess.AccessLevel >= 3 )
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Daytime, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->NightTime, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->SameZoneButton, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputOverrideButton, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->SetupRadio, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->SilenceBarSlider2, 1 );
    }

    if ( app->LevelAccess.AccessLevel >= 2 )
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputDelaysButton, 1 );
    }
  }

  settings = 0;
  site = 0;
  version = 0;
  panel = 0;
  delay1 = 0;
  delay2 = 0;
  autosilence = 0;
  {
    Command cmd;

    Command0( CMD_GET_SETTINGS, &cmd );

    settings = cmd.int0;

    if ( capp->site != NULL && capp->panel != NULL )
    {
      site    = EwNewStringAnsi( capp->site->name );
      panel   = EwNewStringAnsi( capp->panel->name ); 
      version = capp->site->version;

      delay1 =  capp->panel->delay1;
      delay2 =  capp->panel->delay2;

      autosilence = capp->panel->autoSilence;
    }
  }
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->SilenceBarSlider2, autosilence 
  );
  ViewsText_OnSetString( &_this->Site1, site );
  ViewsText_OnSetString( &_this->Version1, EwNewStringFloat((XFloat)version, 0, 
  2 ));
  ViewsText_OnSetString( &_this->Panel1, panel );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, delay1 / 30 
  );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, delay2 / 
  30 );
  WidgetSetToggleButton_OnSetChecked( &_this->SameZoneButton, (XBool)!(( settings 
  & AppSiteSettingResoundNewZone ) == AppSiteSettingResoundNewZone ));
  WidgetSetToggleButton_OnSetChecked( &_this->NightTime, (XBool)!(( settings & AppSiteSettingIgnoreSecurityAtNight 
  ) == AppSiteSettingIgnoreSecurityAtNight ));
  WidgetSetToggleButton_OnSetChecked( &_this->Daytime, (XBool)!(( settings & AppSiteSettingIgnoreSecurityInDay 
  ) == AppSiteSettingIgnoreSecurityInDay ));
  WidgetSetToggleButton_OnSetChecked( &_this->OutputDelaysButton, (XBool)!(( settings 
  & AppSiteSettingDisableOutputDelays ) == AppSiteSettingDisableOutputDelays ));
  WidgetSetToggleButton_OnSetChecked( &_this->OutputOverrideButton, (( settings 
  & AppSiteSettingOverrideOutputDelays ) == AppSiteSettingOverrideOutputDelays ));
  EwSignal( EwNewSlot( _this, AppSettings_AutoSilenceSlotEnd ), ((XObject)_this 
    ));
  EwSignal( EwNewSlot( _this, AppSettings_AutoSilenceSlot ), ((XObject)_this ));
  EwSignal( EwNewSlot( _this, AppSettings_ResoundSlot ), ((XObject)_this ));
  EwSignal( EwNewSlot( _this, AppSettings_OverrideSlot ), ((XObject)_this ));
  EwSignal( EwNewSlot( _this, AppSettings_Delay2SliderSlot ), ((XObject)_this ));
  EwSignal( EwNewSlot( _this, AppSettings_SecuritySlot ), ((XObject)_this ));
}

/* 'C' function for method : 'App::Settings.SecuritySlot()' */
void AppSettings_SecuritySlot( AppSettings _this, XObject sender )
{
  if (( sender == ((XObject)&_this->NightTime )) || ( sender == ((XObject)&_this->Daytime 
      )))
  {
    EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::Settings.SetupAcumesh()' */
void AppSettings_SetupAcumesh( AppSettings _this, XObject sender )
{
  AppPopup p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = ((AppPopup)EwNewObject( AppRadioSetup, 0 ));
  AppPopup_Show( p, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::Settings.SiteChange()' */
void AppSettings_SiteChange( AppSettings _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::Settings.AutoSilenceSlot()' */
void AppSettings_AutoSilenceSlot( AppSettings _this, XObject sender )
{
  XInt32 t;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  t = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->SilenceBarSlider2 );

  if ( t == 0 )
  {
    ViewsText_OnSetString( &_this->silencetime, EwLoadString( &_Const011E ));
  }
  else
    if ( t < 60 )
    {
      ViewsText_OnSetString( &_this->silencetime, EwConcatString( EwNewStringInt( 
      t, 0, 10 ), EwLoadString( &_Const011F )));
    }
    else
      if ( t == 60 )
      {
        ViewsText_OnSetString( &_this->silencetime, EwLoadString( &_Const0120 ));
      }
      else
        if ( t < 120 )
        {
          ViewsText_OnSetString( &_this->silencetime, EwConcatString( EwConcatString( 
          EwLoadString( &_Const0121 ), EwNewStringInt( t - 60, 0, 10 )), EwLoadString( 
          &_Const011F )));
        }
        else
          if ( t == 120 )
          {
            ViewsText_OnSetString( &_this->silencetime, EwLoadString( &_Const0122 
            ));
          }
          else
          {
            WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->SilenceBarSlider2, 
            0 );
            ViewsText_OnSetString( &_this->silencetime, EwLoadString( &_Const011E 
            ));
            EwPostSignal( EwNewSlot( _this, AppSettings_AutoSilenceSlotEnd ), ((XObject)_this 
              ));
          }
}

/* 'C' function for method : 'App::Settings.AutoSilenceSlotEnd()' */
void AppSettings_AutoSilenceSlotEnd( AppSettings _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetVisible( &_this->Text2, (XBool)( WidgetSetHorizontalSlider_OnGetCurrentValue( 
  &_this->SilenceBarSlider2 ) != 0 ));
  EwSignal( EwNewSlot( _this, AppSettings_SetSettings ), ((XObject)_this ));
}

/* Variants derived from the class : 'App::Settings' */
EW_DEFINE_CLASS_VARIANTS( AppSettings )
EW_END_OF_CLASS_VARIANTS( AppSettings )

/* Virtual Method Table (VMT) for the class : 'App::Settings' */
EW_DEFINE_CLASS( AppSettings, CoreGroup, "App::Settings" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSettings_UpdateLayout,
  AppSettings_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSettings )

/* Initializer for the class 'App::SetTimePopup' */
void AppSetTimePopup__Init( AppSetTimePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppTimePicker__Init( &_this->TimePicker, &_this->_XObject, 0 );
  AppDatePicker__Init( &_this->DatePicker, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSetTimePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0123 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0124 );
  CoreRectView__OnSetBounds( &_this->TimePicker, _Const0125 );
  CoreRectView__OnSetBounds( &_this->DatePicker, _Const0126 );
  AppDatePicker_OnSetYear( &_this->DatePicker, 2018 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0127 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0129 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->TimePicker ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DatePicker ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  _this->PushButton.OnRelease = EwNullSlot;
  _this->PushButton.OnActivate = EwNewSlot( _this, AppSetTimePopup_Proceed );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppSetTimePopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  AppSetTimePopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::SetTimePopup' */
void AppSetTimePopup__ReInit( AppSetTimePopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppTimePicker__ReInit( &_this->TimePicker );
  AppDatePicker__ReInit( &_this->DatePicker );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
}

/* Finalizer method for the class 'App::SetTimePopup' */
void AppSetTimePopup__Done( AppSetTimePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSetTimePopup );

  /* Finalize all embedded objects */
  AppTimePicker__Done( &_this->TimePicker );
  AppDatePicker__Done( &_this->DatePicker );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SetTimePopup' */
void AppSetTimePopup__Mark( AppSetTimePopup _this )
{
  EwMarkObject( &_this->TimePicker );
  EwMarkObject( &_this->DatePicker );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppSetTimePopup_Init( AppSetTimePopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  AppSetTimePopup_GetCurrent( _this );
}

/* 'C' function for method : 'App::SetTimePopup.Proceed()' */
void AppSetTimePopup_Proceed( AppSetTimePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppSetTimePopup_SetCurrent( _this );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::SetTimePopup.Cancel()' */
void AppSetTimePopup_Cancel( AppSetTimePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::SetTimePopup.GetCurrent()' */
void AppSetTimePopup_GetCurrent( AppSetTimePopup _this )
{
  CoreTime t = EwNewObject( CoreTime, 0 );

  t = CoreTime_OnGetCurrentTime( t );
  AppTimePicker_OnSetHour( &_this->TimePicker, t->Hour );
  AppTimePicker_OnSetMinute( &_this->TimePicker, t->Minute );
  AppTimePicker_OnSetSecond( &_this->TimePicker, t->Second );
  AppDatePicker_OnSetDay( &_this->DatePicker, t->Day );
  AppDatePicker_OnSetMonth( &_this->DatePicker, t->Month );
  AppDatePicker_OnSetYear( &_this->DatePicker, t->Year );
}

/* 'C' function for method : 'App::SetTimePopup.SetCurrent()' */
void AppSetTimePopup_SetCurrent( AppSetTimePopup _this )
{
  XInt32 h = AppTimePicker_OnGetHour( &_this->TimePicker );
  XInt32 m = AppTimePicker_OnGetMinute( &_this->TimePicker );
  XInt32 s = AppTimePicker_OnGetSecond( &_this->TimePicker );
  XInt32 d = AppDatePicker_OnGetDay( &_this->DatePicker );
  XInt32 M = AppDatePicker_OnGetMonth( &_this->DatePicker );
  XInt32 y = AppDatePicker_OnGetYear( &_this->DatePicker );

  {
    Command3( CMD_SET_TIME, h, m, s );
    Command3( CMD_SET_DATE, d, M, y );
  }
}

/* Variants derived from the class : 'App::SetTimePopup' */
EW_DEFINE_CLASS_VARIANTS( AppSetTimePopup )
EW_END_OF_CLASS_VARIANTS( AppSetTimePopup )

/* Virtual Method Table (VMT) for the class : 'App::SetTimePopup' */
EW_DEFINE_CLASS( AppSetTimePopup, AppPopup, "App::SetTimePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSetTimePopup )

/* Initializer for the class 'App::TimePicker' */
void AppTimePicker__Init( AppTimePicker _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesPickerControl__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerSecond, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerMinute, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerHour, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListSecond, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListMinute, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListHour, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel2, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtBottom, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtTop, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Separator2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Separator1, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTimePicker );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const012A );
  CoreRectView__OnSetBounds( &_this->Background, _Const012A );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const012B );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const012C );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->TouchHandlerSecond, _Const012D );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerSecond, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerSecond, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerMinute, _Const012F );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerMinute, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerMinute, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerHour, _Const0130 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerHour, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerHour, 0.200000f );
  CoreRectView__OnSetBounds( &_this->ListSecond, _Const012D );
  CoreVerticalList_OnSetEndless( &_this->ListSecond, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListSecond, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListSecond, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListSecond, 60 );
  CoreRectView__OnSetBounds( &_this->ListMinute, _Const012F );
  CoreVerticalList_OnSetEndless( &_this->ListMinute, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListMinute, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListMinute, 60 );
  CoreRectView__OnSetBounds( &_this->ListHour, _Const0130 );
  CoreVerticalList_OnSetEndless( &_this->ListHour, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListHour, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListHour, 24 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0131 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0132 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0135 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel2, _Const0136 );
  ViewsBevel_OnSetWidth( &_this->Bevel2, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel2, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel2, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel2, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel2, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel3, _Const0137 );
  ViewsBevel_OnSetWidth( &_this->Bevel3, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel3, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel3, _Const0132 );
  ViewsBevel_OnSetColorB( &_this->Bevel3, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel3, _Const0134 );
  CoreRectView__OnSetBounds( &_this->ShineAtBottom, _Const0138 );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtBottom, _Const0139 );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtBottom, _Const013A );
  ViewsRectangle_OnSetColorTR( &_this->ShineAtBottom, _Const013B );
  ViewsRectangle_OnSetColorTL( &_this->ShineAtBottom, _Const013B );
  CoreRectView__OnSetBounds( &_this->ShineAtTop, _Const013C );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtTop, _Const013B );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtTop, _Const013B );
  CoreRectView__OnSetBounds( &_this->Separator2, _Const013D );
  ViewsText_OnSetString( &_this->Separator2, EwLoadString( &_Const013E ));
  ViewsText_OnSetColor( &_this->Separator2, _Const013F );
  CoreRectView__OnSetBounds( &_this->Separator1, _Const0140 );
  ViewsText_OnSetString( &_this->Separator1, EwLoadString( &_Const013E ));
  ViewsText_OnSetColor( &_this->Separator1, _Const013F );
  CoreRectView__OnSetBounds( &_this->Border, _Const012A );
  ViewsBorder_OnSetColor( &_this->Border, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerSecond ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListSecond ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtBottom ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtTop ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Separator2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Separator1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  _this->TouchHandlerSecond.OnEnd = EwNewSlot( _this, AppTimePicker_onEndSlide );
  _this->TouchHandlerSecond.OnStart = EwNewSlot( _this, AppTimePicker_onStartSlide 
  );
  _this->TouchHandlerMinute.OnEnd = EwNewSlot( _this, AppTimePicker_onEndSlide );
  _this->TouchHandlerMinute.OnStart = EwNewSlot( _this, AppTimePicker_onStartSlide 
  );
  _this->TouchHandlerHour.OnEnd = EwNewSlot( _this, AppTimePicker_onEndSlide );
  _this->TouchHandlerHour.OnStart = EwNewSlot( _this, AppTimePicker_onStartSlide 
  );
  _this->ListSecond.OnLoadItem = EwNewSlot( _this, AppTimePicker_OnLoadSecondItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListSecond, &_this->TouchHandlerSecond 
  );
  _this->ListMinute.OnLoadItem = EwNewSlot( _this, AppTimePicker_OnLoadMinuteItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListMinute, &_this->TouchHandlerMinute 
  );
  _this->ListHour.OnLoadItem = EwNewSlot( _this, AppTimePicker_OnLoadHourItem );
  CoreVerticalList_OnSetSlideHandler( &_this->ListHour, &_this->TouchHandlerHour 
  );
  ViewsText_OnSetFont( &_this->Separator2, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Separator1, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::TimePicker' */
void AppTimePicker__ReInit( AppTimePicker _this )
{
  /* At first re-initialize the super class ... */
  TemplatesPickerControl__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerSecond );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerHour );
  CoreVerticalList__ReInit( &_this->ListSecond );
  CoreVerticalList__ReInit( &_this->ListMinute );
  CoreVerticalList__ReInit( &_this->ListHour );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsBevel__ReInit( &_this->Bevel2 );
  ViewsBevel__ReInit( &_this->Bevel3 );
  ViewsRectangle__ReInit( &_this->ShineAtBottom );
  ViewsRectangle__ReInit( &_this->ShineAtTop );
  ViewsText__ReInit( &_this->Separator2 );
  ViewsText__ReInit( &_this->Separator1 );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'App::TimePicker' */
void AppTimePicker__Done( AppTimePicker _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTimePicker );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->BorderCurrent );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerSecond );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerHour );
  CoreVerticalList__Done( &_this->ListSecond );
  CoreVerticalList__Done( &_this->ListMinute );
  CoreVerticalList__Done( &_this->ListHour );
  ViewsBevel__Done( &_this->Bevel );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsBevel__Done( &_this->Bevel2 );
  ViewsBevel__Done( &_this->Bevel3 );
  ViewsRectangle__Done( &_this->ShineAtBottom );
  ViewsRectangle__Done( &_this->ShineAtTop );
  ViewsText__Done( &_this->Separator2 );
  ViewsText__Done( &_this->Separator1 );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  TemplatesPickerControl__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TimePicker' */
void AppTimePicker__Mark( AppTimePicker _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->TouchHandlerSecond );
  EwMarkObject( &_this->TouchHandlerMinute );
  EwMarkObject( &_this->TouchHandlerHour );
  EwMarkObject( &_this->ListSecond );
  EwMarkObject( &_this->ListMinute );
  EwMarkObject( &_this->ListHour );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Bevel2 );
  EwMarkObject( &_this->Bevel3 );
  EwMarkObject( &_this->ShineAtBottom );
  EwMarkObject( &_this->ShineAtTop );
  EwMarkObject( &_this->Separator2 );
  EwMarkObject( &_this->Separator1 );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  TemplatesPickerControl__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTimePicker_UpdateViewState( AppTimePicker _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isSliding;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isSliding = (XBool)(( _this->TouchHandlerHour.Sliding || _this->TouchHandlerMinute.Sliding 
  ) || _this->TouchHandlerSecond.Sliding );

  if ( isSliding )
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0141 );
  else
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const012C );

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->sliding = isSliding;
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has finished the slide animation. Thereupon 
   the owner of the time picker is notified, that the time has been changed. */
void AppTimePicker_onEndSlide( AppTimePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );

  if (( !_this->TouchHandlerHour.Sliding && !_this->TouchHandlerMinute.Sliding ) 
      && !_this->TouchHandlerSecond.Sliding )
    EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has begun the slide animation. */
void AppTimePicker_onStartSlide( AppTimePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'ListSecond' vertical list every time the list loads 
   or updates an item. */
void AppTimePicker_OnLoadSecondItem( AppTimePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListSecond.Item;
  itemView = EwCastObject( _this->ListSecond.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListSecond.Super2.Bounds ), _this->ListSecond.ItemHeight )));
}

/* This method is called by 'ListMinute' vertical list every time the list loads 
   or updates an item. */
void AppTimePicker_OnLoadMinuteItem( AppTimePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListMinute.Item;
  itemView = EwCastObject( _this->ListMinute.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListMinute.Super2.Bounds ), _this->ListMinute.ItemHeight )));
}

/* This method is called by 'ListHour' vertical list every time the list loads or 
   updates an item. */
void AppTimePicker_OnLoadHourItem( AppTimePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListHour.Item;
  itemView = EwCastObject( _this->ListHour.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListHour.Super2.Bounds ), _this->ListHour.ItemHeight )));
}

/* 'C' function for method : 'App::TimePicker.OnGetSecond()' */
XInt32 AppTimePicker_OnGetSecond( AppTimePicker _this )
{
  return (( -_this->ListSecond.ScrollOffset / _this->ListSecond.ItemHeight ) + 2 
    ) % 60;
}

/* 'C' function for method : 'App::TimePicker.OnSetSecond()' */
void AppTimePicker_OnSetSecond( AppTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 59 )
    value = 59;

  CoreVerticalList_OnSetScrollOffset( &_this->ListSecond, ( value - 2 ) * -_this->ListSecond.ItemHeight 
  );
}

/* 'C' function for method : 'App::TimePicker.OnGetMinute()' */
XInt32 AppTimePicker_OnGetMinute( AppTimePicker _this )
{
  return (( -_this->ListMinute.ScrollOffset / _this->ListMinute.ItemHeight ) + 2 
    ) % 60;
}

/* 'C' function for method : 'App::TimePicker.OnSetMinute()' */
void AppTimePicker_OnSetMinute( AppTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 59 )
    value = 59;

  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, ( value - 2 ) * -_this->ListMinute.ItemHeight 
  );
}

/* 'C' function for method : 'App::TimePicker.OnGetHour()' */
XInt32 AppTimePicker_OnGetHour( AppTimePicker _this )
{
  return (( -_this->ListHour.ScrollOffset / _this->ListHour.ItemHeight ) + 2 ) % 
    24;
}

/* 'C' function for method : 'App::TimePicker.OnSetHour()' */
void AppTimePicker_OnSetHour( AppTimePicker _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 23 )
    value = 23;

  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, ( value - 2 ) * -_this->ListHour.ItemHeight 
  );
}

/* Variants derived from the class : 'App::TimePicker' */
EW_DEFINE_CLASS_VARIANTS( AppTimePicker )
EW_END_OF_CLASS_VARIANTS( AppTimePicker )

/* Virtual Method Table (VMT) for the class : 'App::TimePicker' */
EW_DEFINE_CLASS( AppTimePicker, TemplatesPickerControl, "App::TimePicker" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTimePicker_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTimePicker )

/* Initializer for the class 'App::DatePicker' */
void AppDatePicker__Init( AppDatePicker _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesPickerControl__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerYear, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerMonth, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerDay, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListYear, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListMonth, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListDay, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel2, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtBottom, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->ShineAtTop, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDatePicker );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0142 );
  CoreRectView__OnSetBounds( &_this->Background, _Const0142 );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const0143 );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const012C );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->TouchHandlerYear, _Const0144 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerYear, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerYear, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerMonth, _Const0145 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerMonth, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerMonth, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerDay, _Const0130 );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerDay, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerDay, 0.200000f );
  CoreRectView__OnSetBounds( &_this->ListYear, _Const0144 );
  CoreVerticalList_OnSetEndless( &_this->ListYear, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListYear, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListYear, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListYear, 200 );
  CoreRectView__OnSetBounds( &_this->ListMonth, _Const0145 );
  CoreVerticalList_OnSetEndless( &_this->ListMonth, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListMonth, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListMonth, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListMonth, 12 );
  CoreRectView__OnSetBounds( &_this->ListDay, _Const0130 );
  CoreVerticalList_OnSetEndless( &_this->ListDay, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListDay, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListDay, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, 31 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0131 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0134 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0135 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel2, _Const0146 );
  ViewsBevel_OnSetWidth( &_this->Bevel2, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel2, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel2, _Const0133 );
  ViewsBevel_OnSetColorB( &_this->Bevel2, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel2, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Bevel3, _Const0147 );
  ViewsBevel_OnSetWidth( &_this->Bevel3, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel3, _Const0133 );
  ViewsBevel_OnSetColorR( &_this->Bevel3, _Const0132 );
  ViewsBevel_OnSetColorB( &_this->Bevel3, _Const0086 );
  ViewsBevel_OnSetColorT( &_this->Bevel3, _Const0134 );
  CoreRectView__OnSetBounds( &_this->ShineAtBottom, _Const0148 );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtBottom, _Const0149 );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtBottom, _Const014A );
  ViewsRectangle_OnSetColorTR( &_this->ShineAtBottom, _Const013B );
  ViewsRectangle_OnSetColorTL( &_this->ShineAtBottom, _Const013B );
  CoreRectView__OnSetBounds( &_this->ShineAtTop, _Const014B );
  ViewsRectangle_OnSetColorBL( &_this->ShineAtTop, _Const013B );
  ViewsRectangle_OnSetColorBR( &_this->ShineAtTop, _Const013B );
  CoreRectView__OnSetBounds( &_this->Border, _Const0142 );
  ViewsBorder_OnSetColor( &_this->Border, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerYear ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerMonth ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerDay ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListYear ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListMonth ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListDay ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtBottom ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ShineAtTop ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  _this->TouchHandlerYear.OnEnd = EwNewSlot( _this, AppDatePicker_onEndSlide );
  _this->TouchHandlerYear.OnStart = EwNewSlot( _this, AppDatePicker_onStartSlide 
  );
  _this->TouchHandlerMonth.OnEnd = EwNewSlot( _this, AppDatePicker_onEndSlide );
  _this->TouchHandlerMonth.OnStart = EwNewSlot( _this, AppDatePicker_onStartSlide 
  );
  _this->TouchHandlerDay.OnEnd = EwNewSlot( _this, AppDatePicker_onEndSlide );
  _this->TouchHandlerDay.OnStart = EwNewSlot( _this, AppDatePicker_onStartSlide 
  );
  _this->ListYear.OnLoadItem = EwNewSlot( _this, AppDatePicker_OnLoadYearItem );
  CoreVerticalList_OnSetSlideHandler( &_this->ListYear, &_this->TouchHandlerYear 
  );
  _this->ListMonth.OnLoadItem = EwNewSlot( _this, AppDatePicker_OnLoadMonthItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListMonth, &_this->TouchHandlerMonth 
  );
  _this->ListDay.OnLoadItem = EwNewSlot( _this, AppDatePicker_OnLoadDayItem );
  CoreVerticalList_OnSetSlideHandler( &_this->ListDay, &_this->TouchHandlerDay );
}

/* Re-Initializer for the class 'App::DatePicker' */
void AppDatePicker__ReInit( AppDatePicker _this )
{
  /* At first re-initialize the super class ... */
  TemplatesPickerControl__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerYear );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerMonth );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerDay );
  CoreVerticalList__ReInit( &_this->ListYear );
  CoreVerticalList__ReInit( &_this->ListMonth );
  CoreVerticalList__ReInit( &_this->ListDay );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsBevel__ReInit( &_this->Bevel2 );
  ViewsBevel__ReInit( &_this->Bevel3 );
  ViewsRectangle__ReInit( &_this->ShineAtBottom );
  ViewsRectangle__ReInit( &_this->ShineAtTop );
  ViewsBorder__ReInit( &_this->Border );
}

/* Finalizer method for the class 'App::DatePicker' */
void AppDatePicker__Done( AppDatePicker _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDatePicker );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->BorderCurrent );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerYear );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerMonth );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerDay );
  CoreVerticalList__Done( &_this->ListYear );
  CoreVerticalList__Done( &_this->ListMonth );
  CoreVerticalList__Done( &_this->ListDay );
  ViewsBevel__Done( &_this->Bevel );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsBevel__Done( &_this->Bevel2 );
  ViewsBevel__Done( &_this->Bevel3 );
  ViewsRectangle__Done( &_this->ShineAtBottom );
  ViewsRectangle__Done( &_this->ShineAtTop );
  ViewsBorder__Done( &_this->Border );

  /* Don't forget to deinitialize the super class ... */
  TemplatesPickerControl__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DatePicker' */
void AppDatePicker__Mark( AppDatePicker _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->TouchHandlerYear );
  EwMarkObject( &_this->TouchHandlerMonth );
  EwMarkObject( &_this->TouchHandlerDay );
  EwMarkObject( &_this->ListYear );
  EwMarkObject( &_this->ListMonth );
  EwMarkObject( &_this->ListDay );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Bevel2 );
  EwMarkObject( &_this->Bevel3 );
  EwMarkObject( &_this->ShineAtBottom );
  EwMarkObject( &_this->ShineAtTop );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->Border );

  /* Give the super class a chance to mark its objects and references */
  TemplatesPickerControl__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDatePicker_UpdateViewState( AppDatePicker _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isSliding;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isSliding = (XBool)(( _this->TouchHandlerDay.Sliding || _this->TouchHandlerMonth.Sliding 
  ) || _this->TouchHandlerYear.Sliding );

  if ( isSliding )
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0141 );
  else
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const012C );

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->sliding = isSliding;
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerDay, TouchHandlerMonth 
   or TouchHandlerYear) has finished the slide animation. Thereupon the owner of 
   the date picker is notified, that the date has been changed. */
void AppDatePicker_onEndSlide( AppDatePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );

  if (( !_this->TouchHandlerDay.Sliding && !_this->TouchHandlerMonth.Sliding ) && 
      !_this->TouchHandlerYear.Sliding )
  {
    XInt32 daysInMonth = AppDatePicker_getDaysInMonth( _this, AppDatePicker_OnGetMonth( 
      _this ), AppDatePicker_OnGetYear( _this ));
    XInt32 day = AppDatePicker_OnGetDay( _this );
    CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

    if ( day > daysInMonth )
      AppDatePicker_OnSetDay( _this, daysInMonth );

    EwPostSignal( _this->OnChange, ((XObject)_this ));
  }
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerDay, TouchHandlerMonth 
   or TouchHandlerYear) has begun the slide animation. */
void AppDatePicker_onStartSlide( AppDatePicker _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'ListYear' vertical list every time the list loads or 
   updates an item. */
void AppDatePicker_OnLoadYearItem( AppDatePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListYear.Item;
  itemView = EwCastObject( _this->ListYear.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo + 1900, 4, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListYear.Super2.Bounds ), _this->ListYear.ItemHeight )));
}

/* This method is called by 'ListMonth' vertical list every time the list loads 
   or updates an item. */
void AppDatePicker_OnLoadMonthItem( AppDatePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListMonth.Item;
  itemView = EwCastObject( _this->ListMonth.View, ViewsText );

  if ( itemView == 0 )
    return;

  switch ( itemNo )
  {
    case 1 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesFebruaryAbbr ));
    break;

    case 2 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesMarchAbbr ));
    break;

    case 3 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesAprilAbbr ));
    break;

    case 4 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesMayAbbr ));
    break;

    case 5 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJuneAbbr ));
    break;

    case 6 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJulyAbbr ));
    break;

    case 7 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesAugustAbbr ));
    break;

    case 8 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesSeptemberAbbr ));
    break;

    case 9 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesOctoberAbbr ));
    break;

    case 10 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesNovemberAbbr ));
    break;

    case 11 :
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesDecemberAbbr ));
    break;

    default : 
      ViewsText_OnSetString( itemView, EwLoadString( &ResourcesJanuaryAbbr ));
  }

  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListMonth.Super2.Bounds ), _this->ListMonth.ItemHeight )));
}

/* This method is called by 'ListDay' vertical list every time the list loads or 
   updates an item. */
void AppDatePicker_OnLoadDayItem( AppDatePicker _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListDay.Item;
  itemView = EwCastObject( _this->ListDay.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo + 1, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListDay.Super2.Bounds ), _this->ListDay.ItemHeight )));
}

/* 'C' function for method : 'App::DatePicker.OnGetYear()' */
XInt32 AppDatePicker_OnGetYear( AppDatePicker _this )
{
  return 1900 + ((( -_this->ListYear.ScrollOffset / _this->ListYear.ItemHeight ) 
    + 2 ) % 200 );
}

/* 'C' function for method : 'App::DatePicker.OnSetYear()' */
void AppDatePicker_OnSetYear( AppDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth;

  if ( value < 1900 )
    value = 1900;

  if ( value > 2100 )
    value = 2100;

  CoreVerticalList_OnSetScrollOffset( &_this->ListYear, (( value - 1900 ) - 2 ) 
  * -_this->ListYear.ItemHeight );
  daysInMonth = AppDatePicker_getDaysInMonth( _this, AppDatePicker_OnGetMonth( _this 
  ), value );
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

  if ( AppDatePicker_OnGetDay( _this ) > daysInMonth )
    AppDatePicker_OnSetDay( _this, daysInMonth );
}

/* 'C' function for method : 'App::DatePicker.OnGetMonth()' */
XInt32 AppDatePicker_OnGetMonth( AppDatePicker _this )
{
  return 1 + ((( -_this->ListMonth.ScrollOffset / _this->ListMonth.ItemHeight ) 
    + 2 ) % 12 );
}

/* 'C' function for method : 'App::DatePicker.OnSetMonth()' */
void AppDatePicker_OnSetMonth( AppDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth;

  if ( value < 1 )
    value = 1;

  if ( value > 12 )
    value = 12;

  CoreVerticalList_OnSetScrollOffset( &_this->ListMonth, (( value - 1 ) - 2 ) * 
  -_this->ListMonth.ItemHeight );
  daysInMonth = AppDatePicker_getDaysInMonth( _this, value, AppDatePicker_OnGetYear( 
  _this ));
  CoreVerticalList_OnSetNoOfItems( &_this->ListDay, daysInMonth );

  if ( AppDatePicker_OnGetDay( _this ) > daysInMonth )
    AppDatePicker_OnSetDay( _this, daysInMonth );
}

/* 'C' function for method : 'App::DatePicker.OnGetDay()' */
XInt32 AppDatePicker_OnGetDay( AppDatePicker _this )
{
  return 1 + ((( -_this->ListDay.ScrollOffset / _this->ListDay.ItemHeight ) + 2 
    ) % _this->ListDay.NoOfItems );
}

/* 'C' function for method : 'App::DatePicker.OnSetDay()' */
void AppDatePicker_OnSetDay( AppDatePicker _this, XInt32 value )
{
  XInt32 daysInMonth = AppDatePicker_getDaysInMonth( _this, AppDatePicker_OnGetMonth( 
    _this ), AppDatePicker_OnGetYear( _this ));

  if ( value < 1 )
    value = 1;

  if ( value > daysInMonth )
    value = daysInMonth;

  CoreVerticalList_OnSetScrollOffset( &_this->ListDay, (( value - 2 ) - 1 ) * -_this->ListDay.ItemHeight 
  );
}

/* This function returns the number of days in the month and year specified in the 
   method parameters aMonth and aYear. The function takes care of the February and 
   its dependency of the leap year. */
XInt32 AppDatePicker_getDaysInMonth( AppDatePicker _this, XInt32 aMonth, XInt32 
  aYear )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( aMonth == 2 )
    if ((( aYear % 4 ) == 0 ) && ((( aYear % 100 ) != 0 ) || (( aYear % 400 ) == 
        0 )))
      return 29;
    else
      return 28;
  else
    if (((( aMonth == 4 ) || ( aMonth == 6 )) || ( aMonth == 9 )) || ( aMonth == 
        11 ))
      return 30;
    else
      return 31;
}

/* Variants derived from the class : 'App::DatePicker' */
EW_DEFINE_CLASS_VARIANTS( AppDatePicker )
EW_END_OF_CLASS_VARIANTS( AppDatePicker )

/* Virtual Method Table (VMT) for the class : 'App::DatePicker' */
EW_DEFINE_CLASS( AppDatePicker, TemplatesPickerControl, "App::DatePicker" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppDatePicker_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDatePicker )

/* Initializer for the class 'App::ConfirmPopup' */
void AppConfirmPopup__Init( AppConfirmPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppConfirmPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const014C );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const014D );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const014E );
  ViewsText_OnSetWrapText( &_this->Text1, 1 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const014F );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0150 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppConfirmPopup_Proceed );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppConfirmPopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::ConfirmPopup' */
void AppConfirmPopup__ReInit( AppConfirmPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
}

/* Finalizer method for the class 'App::ConfirmPopup' */
void AppConfirmPopup__Done( AppConfirmPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppConfirmPopup );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ConfirmPopup' */
void AppConfirmPopup__Mark( AppConfirmPopup _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkSlot( _this->meth );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::ConfirmPopup.Proceed()' */
void AppConfirmPopup_Proceed( AppConfirmPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwSignal( _this->meth, ((XObject)_this ));
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::ConfirmPopup.Cancel()' */
void AppConfirmPopup_Cancel( AppConfirmPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::ConfirmPopup.ShowThen()' */
void AppConfirmPopup_ShowThen( AppConfirmPopup _this, CoreRoot rootObject, XSlot 
  method )
{
  XPoint m;

  _this->Super1.mask = EwNewObject( ViewsRectangle, 0 );
  _this->Super1.touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->Super1.root = rootObject;
  _this->meth = method;
  CoreQuadView__OnSetPoint1( _this->Super1.touch, _Const0052 );
  CoreQuadView__OnSetPoint2( _this->Super1.touch, _Const008F );
  CoreQuadView__OnSetPoint3( _this->Super1.touch, _Const008E );
  CoreQuadView__OnSetPoint4( _this->Super1.touch, _Const00CD );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.touch ), 0 );
  ViewsRectangle_OnSetColor( _this->Super1.mask, _Const0151 );
  CoreRectView__OnSetBounds( _this->Super1.mask, _Const0002 );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super3.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super3.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super3.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super3.Bounds, EwMovePointNeg( 
  _Const008E, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  return;
}

/* Variants derived from the class : 'App::ConfirmPopup' */
EW_DEFINE_CLASS_VARIANTS( AppConfirmPopup )
EW_END_OF_CLASS_VARIANTS( AppConfirmPopup )

/* Virtual Method Table (VMT) for the class : 'App::ConfirmPopup' */
EW_DEFINE_CLASS( AppConfirmPopup, AppPopup, "App::ConfirmPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppConfirmPopup )

/* Initializer for the class 'App::KeypadPopup' */
void AppKeypadPopup__Init( AppKeypadPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppKeypadKey__Init( &_this->KeypadKey, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey1, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey2, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey3, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey4, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey5, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey6, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey7, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey8, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey9, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey10, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->accept, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->AcceptTimer, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->DenyTimer, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->StarTimer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->accept2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeypadPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0152 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0153 );
  CoreRectView__OnSetBounds( &_this->KeypadKey, _Const0154 );
  EwRetainString( &_this->KeypadKey.NumProperty, EwLoadString( &_Const0155 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey1, _Const0156 );
  EwRetainString( &_this->KeypadKey1.NumProperty, EwLoadString( &_Const0157 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey2, _Const0158 );
  EwRetainString( &_this->KeypadKey2.NumProperty, EwLoadString( &_Const0159 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey3, _Const015A );
  EwRetainString( &_this->KeypadKey3.NumProperty, EwLoadString( &_Const015B ));
  CoreRectView__OnSetBounds( &_this->KeypadKey4, _Const015C );
  EwRetainString( &_this->KeypadKey4.NumProperty, EwLoadString( &_Const015D ));
  CoreRectView__OnSetBounds( &_this->KeypadKey5, _Const015E );
  EwRetainString( &_this->KeypadKey5.NumProperty, EwLoadString( &_Const015F ));
  CoreRectView__OnSetBounds( &_this->KeypadKey6, _Const0160 );
  EwRetainString( &_this->KeypadKey6.NumProperty, EwLoadString( &_Const0161 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey7, _Const0162 );
  EwRetainString( &_this->KeypadKey7.NumProperty, EwLoadString( &_Const0163 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey8, _Const0164 );
  EwRetainString( &_this->KeypadKey8.NumProperty, EwLoadString( &_Const0165 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey9, _Const0166 );
  EwRetainString( &_this->KeypadKey9.NumProperty, EwLoadString( &_Const0167 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey10, _Const0168 );
  EwRetainString( &_this->KeypadKey10.NumProperty, EwLoadString( &_Const0169 ));
  CoreRectView__OnSetBounds( &_this->Writable, _Const016A );
  AppWritable_OnSetMaxLength( &_this->Writable, 4 );
  CoreRectView__OnSetBounds( &_this->Text, _Const016B );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const016C ));
  ViewsText_OnSetColor( &_this->Text, _Const016D );
  CoreRectView__OnSetBounds( &_this->accept, _Const016E );
  ViewsText_OnSetString( &_this->accept, EwLoadString( &_Const016F ));
  ViewsText_OnSetColor( &_this->accept, _Const0170 );
  ViewsText_OnSetVisible( &_this->accept, 0 );
  CoreTimer_OnSetPeriod( &_this->AcceptTimer, 1000 );
  CoreRectView__OnSetBounds( &_this->deny, _Const016E );
  ViewsText_OnSetString( &_this->deny, EwLoadString( &_Const0171 ));
  ViewsText_OnSetColor( &_this->deny, _Const0047 );
  ViewsText_OnSetVisible( &_this->deny, 0 );
  CoreTimer_OnSetPeriod( &_this->DenyTimer, 3000 );
  EwRetainString( &_this->passkey, EwLoadString( &_Const0167 ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0172 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0173 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->deny1, _Const016E );
  ViewsText_OnSetString( &_this->deny1, EwLoadString( &_Const0171 ));
  ViewsText_OnSetColor( &_this->deny1, _Const0047 );
  ViewsText_OnSetVisible( &_this->deny1, 0 );
  CoreRectView__OnSetBounds( &_this->deny2, _Const0174 );
  ViewsText_OnSetString( &_this->deny2, EwLoadString( &_Const0175 ));
  ViewsText_OnSetColor( &_this->deny2, _Const0176 );
  ViewsText_OnSetVisible( &_this->deny2, 0 );
  CoreRectView__OnSetBounds( &_this->accept2, _Const0177 );
  ViewsText_OnSetString( &_this->accept2, EwLoadString( &_Const0178 ));
  ViewsText_OnSetColor( &_this->accept2, _Const0176 );
  ViewsText_OnSetVisible( &_this->accept2, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->accept ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->accept2 ), 0 );
  _this->KeypadKey.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey1.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey2.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey3.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey4.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey5.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey6.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey7.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey8.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey9.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  _this->KeypadKey10.UserPress = EwNewSlot( _this, AppKeypadPopup_Press );
  CoreGroup__OnSetFocus( &_this->Writable, 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->accept, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  _this->AcceptTimer.OnTrigger = EwNewSlot( _this, AppKeypadPopup_AcceptSlot );
  ViewsText_OnSetFont( &_this->deny, EwLoadResource( &FlatFontM, ResourcesFont ));
  _this->DenyTimer.OnTrigger = EwNewSlot( _this, AppKeypadPopup_DenySlot );
  _this->StarTimer.OnTrigger = EwNewSlot( _this, AppKeypadPopup_StarSlot );
  _this->PushButton.OnRelease = EwNullSlot;
  _this->PushButton.OnActivate = EwNewSlot( _this, AppKeypadPopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppKeypadPopup_Proceeed );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->deny1, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->deny2, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->accept2, EwLoadResource( &FlatFontM, ResourcesFont 
  ));

  /* Call the user defined constructor */
  AppKeypadPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::KeypadPopup' */
void AppKeypadPopup__ReInit( AppKeypadPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppKeypadKey__ReInit( &_this->KeypadKey );
  AppKeypadKey__ReInit( &_this->KeypadKey1 );
  AppKeypadKey__ReInit( &_this->KeypadKey2 );
  AppKeypadKey__ReInit( &_this->KeypadKey3 );
  AppKeypadKey__ReInit( &_this->KeypadKey4 );
  AppKeypadKey__ReInit( &_this->KeypadKey5 );
  AppKeypadKey__ReInit( &_this->KeypadKey6 );
  AppKeypadKey__ReInit( &_this->KeypadKey7 );
  AppKeypadKey__ReInit( &_this->KeypadKey8 );
  AppKeypadKey__ReInit( &_this->KeypadKey9 );
  AppKeypadKey__ReInit( &_this->KeypadKey10 );
  AppWritable__ReInit( &_this->Writable );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->accept );
  CoreTimer__ReInit( &_this->AcceptTimer );
  ViewsText__ReInit( &_this->deny );
  CoreTimer__ReInit( &_this->DenyTimer );
  CoreTimer__ReInit( &_this->StarTimer );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ViewsText__ReInit( &_this->deny1 );
  ViewsText__ReInit( &_this->deny2 );
  ViewsText__ReInit( &_this->accept2 );
}

/* Finalizer method for the class 'App::KeypadPopup' */
void AppKeypadPopup__Done( AppKeypadPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeypadPopup );

  /* Finalize all embedded objects */
  AppKeypadKey__Done( &_this->KeypadKey );
  AppKeypadKey__Done( &_this->KeypadKey1 );
  AppKeypadKey__Done( &_this->KeypadKey2 );
  AppKeypadKey__Done( &_this->KeypadKey3 );
  AppKeypadKey__Done( &_this->KeypadKey4 );
  AppKeypadKey__Done( &_this->KeypadKey5 );
  AppKeypadKey__Done( &_this->KeypadKey6 );
  AppKeypadKey__Done( &_this->KeypadKey7 );
  AppKeypadKey__Done( &_this->KeypadKey8 );
  AppKeypadKey__Done( &_this->KeypadKey9 );
  AppKeypadKey__Done( &_this->KeypadKey10 );
  AppWritable__Done( &_this->Writable );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->accept );
  CoreTimer__Done( &_this->AcceptTimer );
  ViewsText__Done( &_this->deny );
  CoreTimer__Done( &_this->DenyTimer );
  CoreTimer__Done( &_this->StarTimer );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ViewsText__Done( &_this->deny1 );
  ViewsText__Done( &_this->deny2 );
  ViewsText__Done( &_this->accept2 );

  /* Release all used strings */
  EwReleaseString( &_this->passkey );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeypadPopup' */
void AppKeypadPopup__Mark( AppKeypadPopup _this )
{
  EwMarkObject( &_this->KeypadKey );
  EwMarkObject( &_this->KeypadKey1 );
  EwMarkObject( &_this->KeypadKey2 );
  EwMarkObject( &_this->KeypadKey3 );
  EwMarkObject( &_this->KeypadKey4 );
  EwMarkObject( &_this->KeypadKey5 );
  EwMarkObject( &_this->KeypadKey6 );
  EwMarkObject( &_this->KeypadKey7 );
  EwMarkObject( &_this->KeypadKey8 );
  EwMarkObject( &_this->KeypadKey9 );
  EwMarkObject( &_this->KeypadKey10 );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->accept );
  EwMarkObject( &_this->AcceptTimer );
  EwMarkObject( &_this->deny );
  EwMarkObject( &_this->DenyTimer );
  EwMarkObject( &_this->StarTimer );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->deny1 );
  EwMarkObject( &_this->deny2 );
  EwMarkObject( &_this->accept2 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppKeypadPopup_Init( AppKeypadPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ViewsText_OnSetVisible( &_this->accept, 0 );
  ViewsText_OnSetVisible( &_this->deny, 0 );
  ViewsText_OnSetVisible( &_this->deny2, 0 );
  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  CoreTimer_OnSetEnabled( &_this->DenyTimer, 0 );
  ViewsText_OnSetString( &_this->Writable.TextEditor.Text, 0 );
  EwReleaseString( &_this->passkey );
  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* 'C' function for method : 'App::KeypadPopup.Press()' */
void AppKeypadPopup_Press( AppKeypadPopup _this, XObject sender )
{
  AppKeypadKey key = EwCastObject( sender, AppKeypadKey );

  if ( EwGetStringLength( _this->passkey ) < 4 )
  {
    if ( EwGetStringLength( key->NumProperty ) == 1 )
    {
      EwRetainString( &_this->passkey, EwConcatStringChar( _this->passkey, EwGetStringChar( 
      key->NumProperty, 0 )));
      AppKeypadPopup_Update( _this );
    }
  }

  if ( !EwCompString( key->NumProperty, EwLoadString( &_Const0169 )) && ( EwGetStringLength( 
      _this->passkey ) > 0 ))
  {
    EwRetainString( &_this->passkey, EwStringLeft( _this->passkey, EwGetStringLength( 
    _this->passkey ) - 1 ));
    AppKeypadPopup_Update( _this );
  }
}

/* 'C' function for method : 'App::KeypadPopup.Proceeed()' */
void AppKeypadPopup_Proceeed( AppKeypadPopup _this, XObject sender )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( _this->getting )
  {
    XInt32 level = -1;
    XInt32 key = EwStringParseInt32( _this->passkey, -1, 10 );
    XInt32 user = 0;
    {
      Command cmd;

      cmd.int0 = key;

      Command0( CMD_CHECK_PASSKEY, &cmd );

      level = cmd.int0;
      user  = cmd.int1;
    }

    if ( level == -1 )
    {
      ViewsText_OnSetVisible( &_this->accept, 0 );
      ViewsText_OnSetVisible( &_this->deny, 1 );
      CoreTimer_restart( &_this->DenyTimer, 0, 600 );
    }
    else
    {
      AppLevelAccess_OnSetAccessLevel( &ap->LevelAccess, (XInt8)level );
      ap->LevelAccess.UserIndex = user;
      ViewsText_OnSetVisible( &_this->deny, 0 );
      ViewsText_OnSetVisible( &_this->accept, 1 );
      CoreTimer_OnSetEnabled( &_this->AcceptTimer, 1 );
      CoreTimer_restart( &_this->AcceptTimer, 0, 600 );
      CoreGroup_OnSetEnabled((CoreGroup)&ap->Settings.PushButton3, 1 );
    }
  }
  else
  {
    XInt32 userindex = ap->LevelAccess.UserIndex;

    if ( userindex != -1 )
    {
      if ( EwGetStringLength( _this->passkey ) == 4 )
      {
        XInt32 key = EwStringParseInt32( _this->passkey, -1, 10 );
        XBool ok = 0;
        {
          if ( Command2( CMD_SET_PASSKEY, key, userindex ) == CMD_OK )
          {
              ok = 1;
          }
        }

        if ( ok )
        {
          ViewsText_OnSetVisible( &_this->accept2, 1 );
          CoreTimer_OnSetEnabled( &_this->AcceptTimer, 1 );
          CoreTimer_restart( &_this->AcceptTimer, 0, 800 );
        }
      }
      else
      {
        ViewsText_OnSetVisible( &_this->deny2, 1 );
        CoreTimer_OnSetEnabled( &_this->DenyTimer, 1 );
        CoreTimer_restart( &_this->DenyTimer, 0, 2000 );
      }
    }
  }
}

/* 'C' function for method : 'App::KeypadPopup.Cancel()' */
void AppKeypadPopup_Cancel( AppKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::KeypadPopup.AcceptSlot()' */
void AppKeypadPopup_AcceptSlot( AppKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::KeypadPopup.DenySlot()' */
void AppKeypadPopup_DenySlot( AppKeypadPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->DenyTimer, 0 );
  ViewsText_OnSetVisible( &_this->deny, 0 );
  ViewsText_OnSetVisible( &_this->deny2, 0 );
}

/* 'C' function for method : 'App::KeypadPopup.StarSlot()' */
void AppKeypadPopup_StarSlot( AppKeypadPopup _this, XObject sender )
{
  XInt32 n;
  XString s;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->getting )
    return;

  CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );
  s = 0;

  for ( n = 0; n < EwGetStringLength( _this->passkey ); n = n + 1 )
  {
    s = EwConcatString( s, EwLoadString( &_Const0179 ));
  }

  AppTextEditor_OnSetString( &_this->Writable.TextEditor, s );
}

/* 'C' function for method : 'App::KeypadPopup.Update()' */
void AppKeypadPopup_Update( AppKeypadPopup _this )
{
  XInt32 n;

  if ( _this->StarTimer.Enabled )
    CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );

  AppTextEditor_OnSetString( &_this->Writable.TextEditor, 0 );

  for ( n = 0; n < EwGetStringLength( _this->passkey ); n = n + 1 )
  {
    if (( n == ( EwGetStringLength( _this->passkey ) - 1 )) || !_this->getting )
    {
      AppTextEditor_OnSetString( &_this->Writable.TextEditor, EwConcatStringChar( 
      AppTextEditor_OnGetString( &_this->Writable.TextEditor ), EwGetStringChar( 
      _this->passkey, n )));
    }
    else
    {
      AppTextEditor_OnSetString( &_this->Writable.TextEditor, EwConcatStringChar( 
      AppTextEditor_OnGetString( &_this->Writable.TextEditor ), '*' ));
    }
  }

  CoreTimer_OnSetEnabled( &_this->StarTimer, 1 );
  CoreTimer_restart( &_this->StarTimer, 0, 1000 );
}

/* Variants derived from the class : 'App::KeypadPopup' */
EW_DEFINE_CLASS_VARIANTS( AppKeypadPopup )
EW_END_OF_CLASS_VARIANTS( AppKeypadPopup )

/* Virtual Method Table (VMT) for the class : 'App::KeypadPopup' */
EW_DEFINE_CLASS( AppKeypadPopup, AppPopup, "App::KeypadPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppKeypadPopup )

/* Initializer for the class 'App::KeypadKey' */
void AppKeypadKey__Init( AppKeypadKey _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeypadKey );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const017A );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const017B );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const017C );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const017A );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const017A );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const015D ));
  ViewsText_OnSetColor( &_this->Text, _Const017D );
  EwRetainString( &_this->NumProperty, EwLoadString( &_Const0167 ));
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const017A );
  ViewsRectangle_OnSetColor( &_this->Rectangle2, _Const017E );
  ViewsRectangle_OnSetVisible( &_this->Rectangle2, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppKeypadKey_Release );
  _this->PushButton.OnPress = EwNewSlot( _this, AppKeypadKey_Press );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::KeypadKey' */
void AppKeypadKey__ReInit( AppKeypadKey _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsText__ReInit( &_this->Text );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
}

/* Finalizer method for the class 'App::KeypadKey' */
void AppKeypadKey__Done( AppKeypadKey _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeypadKey );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsText__Done( &_this->Text );
  ViewsRectangle__Done( &_this->Rectangle2 );

  /* Release all used strings */
  EwReleaseString( &_this->NumProperty );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeypadKey' */
void AppKeypadKey__Mark( AppKeypadKey _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkSlot( _this->UserPress );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppKeypadKey_UpdateLayout( AppKeypadKey _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKeypadKey_UpdateViewState( AppKeypadKey _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, _this->NumProperty );
}

/* 'C' function for method : 'App::KeypadKey.Release()' */
void AppKeypadKey_Release( AppKeypadKey _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* 'C' function for method : 'App::KeypadKey.Press()' */
void AppKeypadKey_Press( AppKeypadKey _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwPostSignal( _this->UserPress, ((XObject)_this ));
}

/* Variants derived from the class : 'App::KeypadKey' */
EW_DEFINE_CLASS_VARIANTS( AppKeypadKey )
EW_END_OF_CLASS_VARIANTS( AppKeypadKey )

/* Virtual Method Table (VMT) for the class : 'App::KeypadKey' */
EW_DEFINE_CLASS( AppKeypadKey, CoreGroup, "App::KeypadKey" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKeypadKey_UpdateLayout,
  AppKeypadKey_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppKeypadKey )

/* Initializer for the class 'App::Writable' */
void AppWritable__Init( AppWritable _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  AppTextEditor__Init( &_this->TextEditor, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppWritable );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const017F );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const017F );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0180 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0181 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0139 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0180 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const0182 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0000 );
  CoreView_OnSetLayout((CoreView)&_this->TextEditor, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TextEditor, _Const0182 );
  AppTextEditor_OnSetWrapText( &_this->TextEditor, 0 );
  AppTextEditor_OnSetString( &_this->TextEditor, 0 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0183 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0184 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0185 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextEditor ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__OnSetFocus( _this, ((CoreView)&_this->TextEditor ));
  CoreGroup__OnSetFocus( &_this->TextEditor, 0 );
  _this->TextEditor.OnChange = EwNullSlot;
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppWritable_Press );

  /* Call the user defined constructor */
  AppWritable_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Writable' */
void AppWritable__ReInit( AppWritable _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  AppTextEditor__ReInit( &_this->TextEditor );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'App::Writable' */
void AppWritable__Done( AppWritable _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppWritable );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsRectangle__Done( &_this->Rectangle9 );
  AppTextEditor__Done( &_this->TextEditor );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Writable' */
void AppWritable__Mark( AppWritable _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->TextEditor );
  EwMarkRef( _this->Property );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkSlot( _this->onPress );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppWritable_UpdateLayout( AppWritable _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppWritable_UpdateViewState( AppWritable _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppWritable_Init( AppWritable _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  AppWritable_OnSetProperty( _this, EwNewRef( &_this->TextEditor.Text, ViewsText_OnGetString, 
  ViewsText_OnSetString ));
}

/* 'C' function for method : 'App::Writable.OnSetProperty()' */
void AppWritable_OnSetProperty( AppWritable _this, XRef value )
{
  if ( !EwCompRef( _this->Property, value ))
    return;

  _this->Property = value;
}

/* 'C' function for method : 'App::Writable.OnSetMaxLength()' */
void AppWritable_OnSetMaxLength( AppWritable _this, XInt32 value )
{
  if ( _this->MaxLength == value )
    return;

  _this->MaxLength = value;
}

/* 'C' function for method : 'App::Writable.Press()' */
void AppWritable_Press( AppWritable _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwSignal( _this->onPress, ((XObject)_this ));
}

/* Variants derived from the class : 'App::Writable' */
EW_DEFINE_CLASS_VARIANTS( AppWritable )
EW_END_OF_CLASS_VARIANTS( AppWritable )

/* Virtual Method Table (VMT) for the class : 'App::Writable' */
EW_DEFINE_CLASS( AppWritable, CoreGroup, "App::Writable" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppWritable_UpdateLayout,
  AppWritable_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppWritable )

/* Initializer for the class 'App::TextEditor' */
void AppTextEditor__Init( AppTextEditor _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesTextEditor__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  EffectsBoolEffect__Init( &_this->blinkEffect, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CursorKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->BackspaceKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->DeleteKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->NewlineKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CharacterKeyHandler, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Caret, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTextEditor );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0186 );
  _this->blinkEffect.Value2 = 0;
  _this->blinkEffect.Value1 = 1;
  EffectsBoolEffect_OnSetCycleDuration( &_this->blinkEffect, 500 );
  EffectsBoolEffect_OnSetInterCycleDelay( &_this->blinkEffect, 500 );
  _this->CursorKeyHandler.Filter = CoreKeyCodeCursorKeys;
  _this->BackspaceKeyHandler.Filter = CoreKeyCodeBackspace;
  _this->DeleteKeyHandler.Filter = CoreKeyCodeDelete;
  _this->NewlineKeyHandler.Filter = CoreKeyCodeEnter;
  _this->CharacterKeyHandler.Filter = CoreKeyCodeCharacterKeys;
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0186 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetFriction( &_this->SlideTouchHandler, 0.050000f );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0187 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0188 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0189 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0052 );
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->SimpleTouchHandler, 3 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const018A );
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const018B ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, _Const018C );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, _Const018D );
  ViewsLine_OnSetWidth2( &_this->Caret, 2 );
  ViewsLine_OnSetWidth1( &_this->Caret, 2 );
  ViewsLine_OnSetColor( &_this->Caret, _Const000E );
  ViewsLine_OnSetVisible( &_this->Caret, 0 );
  _this->WrapText = 1;
  EwRetainString( &_this->String, EwLoadString( &_Const0068 ));
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Caret ), 0 );
  _this->blinkEffect.Outlet = EwNewRef( &_this->Caret, ViewsLine_OnGetVisible, ViewsLine_OnSetVisible 
  );
  _this->CursorKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor_onCursorKey 
  );
  _this->CursorKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor_onCursorKey );
  _this->BackspaceKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor_onBackspaceKey 
  );
  _this->BackspaceKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor_onBackspaceKey 
  );
  _this->DeleteKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor_onDeleteKey 
  );
  _this->DeleteKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor_onDeleteKey );
  _this->NewlineKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor_onNewlineKey 
  );
  _this->NewlineKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor_onNewlineKey 
  );
  _this->CharacterKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor_onCharacterKey 
  );
  _this->CharacterKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor_onCharacterKey 
  );
  _this->SimpleTouchHandler.OnDrag = EwNewSlot( _this, AppTextEditor_onDragTouch 
  );
  _this->SimpleTouchHandler.OnHold = EwNewSlot( _this, AppTextEditor_onHoldTouch 
  );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppTextEditor_onReleaseTouch 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppTextEditor_onPressTouch 
  );
  ViewsText_OnSetOnUpdate( &_this->Text, EwNewSlot( _this, AppTextEditor_updateCaret 
  ));
  ViewsText_OnSetSlideHandler( &_this->Text, &_this->SlideTouchHandler );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Font = EwLoadResource( &ResourcesFontMedium, ResourcesFont );
}

/* Re-Initializer for the class 'App::TextEditor' */
void AppTextEditor__ReInit( AppTextEditor _this )
{
  /* At first re-initialize the super class ... */
  TemplatesTextEditor__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  EffectsBoolEffect__ReInit( &_this->blinkEffect );
  CoreKeyPressHandler__ReInit( &_this->CursorKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Caret );
}

/* Finalizer method for the class 'App::TextEditor' */
void AppTextEditor__Done( AppTextEditor _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTextEditor );

  /* Finalize all embedded objects */
  EffectsBoolEffect__Done( &_this->blinkEffect );
  CoreKeyPressHandler__Done( &_this->CursorKeyHandler );
  CoreKeyPressHandler__Done( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__Done( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__Done( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__Done( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Caret );

  /* Release all used strings */
  EwReleaseString( &_this->String );

  /* Don't forget to deinitialize the super class ... */
  TemplatesTextEditor__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TextEditor' */
void AppTextEditor__Mark( AppTextEditor _this )
{
  EwMarkObject( _this->magnifyingBack );
  EwMarkObject( _this->magnifyingView );
  EwMarkObject( &_this->blinkEffect );
  EwMarkObject( &_this->CursorKeyHandler );
  EwMarkObject( &_this->BackspaceKeyHandler );
  EwMarkObject( &_this->DeleteKeyHandler );
  EwMarkObject( &_this->NewlineKeyHandler );
  EwMarkObject( &_this->CharacterKeyHandler );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Caret );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( _this->Font );

  /* Give the super class a chance to mark its objects and references */
  TemplatesTextEditor__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTextEditor_UpdateViewState( AppTextEditor _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateFocused ) == CoreViewStateFocused ))
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  else
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    ViewsLine_OnSetVisible( &_this->Caret, 0 );
  }
}

/* This slot method is called after the caret has been adjusted. Its job is to adjust 
   too the position of the magnifying glass view where the augmented text content 
   around the caret is shown. */
void AppTextEditor_updateMagnifyingView( AppTextEditor _this, XObject sender )
{
  XRect srcArea;
  XRect extent;
  XRect bounds;
  XPoint caret;
  XInt32 srcX;
  XInt32 dstX;
  XPoint ofs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView == 0 )
    return;

  srcArea = _this->magnifyingView->Super1.SourceArea;
  extent = CoreView__GetExtent( _this->magnifyingView );
  bounds = _this->Super3.Bounds;
  caret = _this->Caret.Super1.Point1;
  srcX = caret.X - ( EwGetRectW( srcArea ) / 2 );

  if ( srcX < 0 )
    srcX = 0;

  if (( srcX + EwGetRectW( srcArea )) > EwGetRectW( bounds ))
    srcX = EwGetRectW( bounds ) - EwGetRectW( srcArea );

  ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwSetRectOrigin( 
  _this->magnifyingView->Super1.SourceArea, EwNewPoint( srcX, caret.Y )));
  dstX = ( bounds.Point1.X + caret.X ) - (( caret.X - srcX ) * 2 );
  ofs = EwNewPoint( dstX - extent.Point1.X, ( bounds.Point1.Y + caret.Y ) - extent.Point2.Y 
  );
  CoreView__MoveView( _this->magnifyingView, ofs, 0 );
  CoreView__MoveView( _this->magnifyingBack, ofs, 0 );
}

/* This slot method is called after a short delay when the user has moved the caret 
   or modified the text. Its job is to ensure that the caret is still visible. If 
   necessary, the editor content is scrolled. */
void AppTextEditor_updateScrollOffset( AppTextEditor _this, XObject sender )
{
  XRect bounds;
  XInt32 ofsX;
  XInt32 ofsY;
  XPoint size;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bounds = _this->Text.Super1.Bounds;
  ofsX = 0;
  ofsY = 0;

  if ( _this->Caret.Super1.Point1.X < bounds.Point1.X )
    ofsX = bounds.Point1.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.X > bounds.Point2.X )
    ofsX = bounds.Point2.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.Y < bounds.Point1.Y )
    ofsY = bounds.Point1.Y - _this->Caret.Super1.Point1.Y;

  if ( _this->Caret.Super1.Point2.Y > bounds.Point2.Y )
    ofsY = bounds.Point2.Y - _this->Caret.Super1.Point2.Y;

  if (( ofsX != 0 ) || ( ofsY != 0 ))
    ViewsText_OnSetScrollOffset( &_this->Text, EwMovePointPos( _this->Text.ScrollOffset, 
    EwNewPoint( ofsX, ofsY )));

  ofsX = _this->Text.ScrollOffset.X;
  ofsY = _this->Text.ScrollOffset.Y;
  size = EwGetRectSize( ViewsText_GetContentArea( &_this->Text ));

  if ( size.X <= EwGetRectW( _this->Text.Super1.Bounds ))
    ofsX = 0;

  if ( size.Y <= EwGetRectH( _this->Text.Super1.Bounds ))
    ofsY = 0;

  ViewsText_OnSetScrollOffset( &_this->Text, EwNewPoint( ofsX, ofsY ));
}

/* This slot method is attached to the Text view. Each time the Text view has rearranged 
   the text, this method is called. Its job is to adjust the caret to the evtl. 
   new position. */
void AppTextEditor_updateCaret( AppTextEditor _this, XObject sender )
{
  XPoint rowCol;
  XPoint pos;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rowCol = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );
  pos = ViewsText_RowCol2Position( &_this->Text, rowCol );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, EwMovePointNeg( pos, EwNewPoint( 
  0, _this->Font->Ascent )));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, EwMovePointPos( pos, EwNewPoint( 
  0, _this->Font->Descent )));

  if ( _this->blinkEffect.Enabled )
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  }

  if ( _this->autoScroll )
  {
    EwPostSignal( EwNewSlot( _this, AppTextEditor_updateScrollOffset ), ((XObject)_this 
      ));
    _this->autoScroll = 0;
  }

  if ( _this->magnifyingView != 0 )
    EwPostSignal( EwNewSlot( _this, AppTextEditor_updateMagnifyingView ), ((XObject)_this 
      ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   hide the magnifying glass view again. */
void AppTextEditor_onReleaseTouch( AppTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingView ));
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ));
    _this->magnifyingView = 0;
    _this->magnifyingBack = 0;
    CoreGroup__OnSetBuffered( _this, 0 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   move the caret accordingly to the user's finger movement. */
void AppTextEditor_onDragTouch( AppTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    XPoint rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
      );
    XInt32 newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

    if ( newCaretIndex != _this->caretIndex )
    {
      _this->caretIndex = newCaretIndex;
      EwPostSignal( EwNewSlot( _this, AppTextEditor_updateCaret ), ((XObject)_this 
        ));
      _this->autoScroll = 1;
    }
  }
  else
  {
    XPoint ofs = EwMovePointNeg( _this->SimpleTouchHandler.CurrentPos, _this->SimpleTouchHandler.HittingPos 
      );
    XInt32 limit = CoreView__GetRoot( _this )->CursorDragLimit;

    if (((( ofs.X < -limit ) || ( ofs.X > limit )) || ( ofs.Y < -limit )) || ( ofs.Y 
        > limit ))
      CoreRoot_DeflectCursor( CoreView__GetRoot( _this ), ((CoreView)&_this->SlideTouchHandler 
      ), _Const0052 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   activate the caret movement mode if the user has pressed the finger on the screen 
   for a while. The method also shows a small magnifying glass where the text around 
   the caret is shown. This should help the user to navigate the caret with the 
   finger. */
void AppTextEditor_onHoldTouch( AppTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if (( _this->SimpleTouchHandler.HoldPeriod >= 300 ) && ( _this->magnifyingView 
      == 0 ))
  {
    XInt32 height = _this->Caret.Super1.Point2.Y - _this->Caret.Super1.Point1.Y;
    XInt32 width = height * 3;

    if ( height > EwGetRectH( _this->Super3.Bounds ))
      height = EwGetRectH( _this->Super3.Bounds );

    if ( width > EwGetRectW( _this->Super3.Bounds ))
      width = EwGetRectW( _this->Super3.Bounds );

    CoreGroup__OnSetBuffered( _this, 1 );
    _this->magnifyingView = EwNewObject( ViewsWarpGroup, 0 );
    _this->magnifyingBack = EwNewObject( ViewsRectangle, 0 );
    ViewsWarpGroup_OnSetGroup( _this->magnifyingView, ((CoreGroup)_this ));
    ViewsWarpView_OnSetQuality((ViewsWarpView)_this->magnifyingView, 1 );
    ViewsWarpGroup_OnSetOpacity( _this->magnifyingView, 200 );
    ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwNewRect( 
    0, 0, width, height ));
    CoreQuadView__OnSetPoint2( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point2, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point3, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point3, 
    height * 2 ));
    CoreQuadView__OnSetPoint4( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point4, 
    height * 2 ));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectSize( _this->magnifyingBack->Super1.Bounds, 
    EwMovePointPos( EwNewPoint( width * 2, height * 2 ), _Const018E )));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectOrigin( _this->magnifyingBack->Super1.Bounds, 
    _Const018F ));
    ViewsRectangle_OnSetColor( _this->magnifyingBack, _Const0190 );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ), 0 );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingView ), 0 );
    EwPostSignal( EwNewSlot( _this, AppTextEditor_updateMagnifyingView ), ((XObject)_this 
      ));
  }

  if ( _this->magnifyingView != 0 )
    EwSignal( EwNewSlot( _this, AppTextEditor_onDragTouch ), ((XObject)_this ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   obtain the focused state for the editor so the user can interact with the editor 
   content and to place the caret at the touched position. */
void AppTextEditor_onPressTouch( AppTextEditor _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !CoreGroup_HasViewState((CoreGroup)_this, CoreViewStateFocused ))
    CoreGroup_ObtainFocus((CoreGroup)_this );

  rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
  );
  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if ( newCaretIndex != _this->caretIndex )
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, AppTextEditor_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   move the caret up/down/left or right in the editor text. */
void AppTextEditor_onCursorKey( AppTextEditor _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rc = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeLeft )
  {
    rc.X = ( rc.X - 1 );

    if ( rc.X < 0 )
    {
      rc.Y = ( rc.Y - 1 );
      rc.X = EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y ));
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeRight )
  {
    rc.X = ( rc.X + 1 );

    if ( rc.X == EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y )))
    {
      rc.Y = ( rc.Y + 1 );
      rc.X = 0;
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeUp )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointNeg( pos, EwNewPoint( 
    0, rowHeight )));
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeDown )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointPos( pos, EwNewPoint( 
    0, rowHeight )));
  }

  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if ( newCaretIndex != _this->caretIndex )
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, AppTextEditor_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign preceding the current caret position and to move the caret accordingly. */
void AppTextEditor_onBackspaceKey( AppTextEditor _this, XObject sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex == 0 )
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex - 1 );
  count = 1;

  if ((( _this->caretIndex > 1 ) && ( ch == '^' )) && ( EwGetStringChar( _this->Text.String, 
      _this->caretIndex - 2 ) == 0x00A0 ))
    count = 2;
  else
    if ((( ch == '^' ) || ( ch == '~' )) || ( ch == '%' ))
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex 
  - count, count ));
  _this->caretIndex = _this->caretIndex - count;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign at the current caret position. */
void AppTextEditor_onDeleteKey( AppTextEditor _this, XObject sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex >= ( EwGetStringLength( _this->Text.String ) - 1 ))
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex );
  count = 1;

  if ( ch == '%' )
    count = 2;
  else
    if ( ch == 0x00A0 )
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex, 
  count ));
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the <new line> sign and to move the caret 
   to the next row. */
void AppTextEditor_onNewlineKey( AppTextEditor _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, EwLoadString( 
  &_Const0191 ), _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + 1;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the sign which has been input by the user 
   and to move the caret to the next column. */
void AppTextEditor_onCharacterKey( AppTextEditor _this, XObject sender )
{
  XChar ch;
  XString str;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ch = _this->CharacterKeyHandler.CharCode;
  str = EwNewStringChar( ch, 1 );

  if (((( ch == '^' ) || ( ch == '~' )) || ( ch == 0x00AD )) || ( ch == '%' ))
    str = EwConcatStringChar( EwLoadString( &_Const0192 ), ch );
  else
    if ( ch == 0x0020 )
      str = EwLoadString( &_Const0193 );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, str, 
  _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + EwGetStringLength( str );
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* 'C' function for method : 'App::TextEditor.OnSetWrapText()' */
void AppTextEditor_OnSetWrapText( AppTextEditor _this, XBool value )
{
  if ( _this->WrapText == value )
    return;

  _this->WrapText = value;
  ViewsText_OnSetWrapText( &_this->Text, value );
  _this->SlideTouchHandler.SlideHorz = (XBool)!value;
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0052 );
}

/* 'C' function for method : 'App::TextEditor.OnGetString()' */
XString AppTextEditor_OnGetString( AppTextEditor _this )
{
  XString str = _this->Text.String;
  XInt32 inx = EwStringFindChar( str, 0x00A0, 0 );

  while ( inx >= 0 )
  {
    if ( EwGetStringChar( str, inx + 1 ) == '^' )
    {
      str = EwStringRemove( str, inx, 1 );
      str = EwSetStringChar( str, inx, 0x0020 );
    }

    inx = EwStringFindChar( str, 0x00A0, inx + 1 );
  }

  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringRemove( str, inx, 1 );
    inx = EwStringFindChar( str, '%', inx + 1 );
  }

  return EwStringLeft( str, EwGetStringLength( str ) - 1 );
}

/* 'C' function for method : 'App::TextEditor.OnSetString()' */
void AppTextEditor_OnSetString( AppTextEditor _this, XString value )
{
  XString str;
  XInt32 inx;

  if ( !EwCompString( _this->String, value ))
    return;

  EwRetainString( &_this->String, value );
  str = EwShareString( value );
  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '%', inx + 2 );
  }

  inx = EwStringFindChar( str, '^', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '^', inx + 2 );
  }

  inx = EwStringFindChar( str, '~', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '~', inx + 2 );
  }

  inx = EwStringFindChar( str, 0x00AD, 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, 0x00AD, inx + 2 );
  }

  inx = EwStringFindChar( str, 0x0020, 0 );

  while ( inx >= 0 )
  {
    str = EwSetStringChar( str, inx, 0x00A0 );
    str = EwStringInsert( str, EwLoadString( &_Const0194 ), inx + 1 );
    inx = EwStringFindChar( str, 0x0020, inx + 2 );
  }

  _this->caretIndex = EwGetStringLength( str );
  ViewsText_OnSetString( &_this->Text, EwConcatString( str, EwLoadString( &_Const0195 
  )));
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0052 );
}

/* Variants derived from the class : 'App::TextEditor' */
EW_DEFINE_CLASS_VARIANTS( AppTextEditor )
EW_END_OF_CLASS_VARIANTS( AppTextEditor )

/* Virtual Method Table (VMT) for the class : 'App::TextEditor' */
EW_DEFINE_CLASS( AppTextEditor, TemplatesTextEditor, "App::TextEditor" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTextEditor_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTextEditor )

/* Initializer for the class 'App::AccesssPopup' */
void AppAccesssPopup__Init( AppAccesssPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle3, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle5, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle6, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle7, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle8, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAccesssPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0196 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0197 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle1, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const0198 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle1, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle1, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const0199 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const00C2 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle3, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle3, _Const019A );
  ViewsRectangle_OnSetColor( &_this->Rectangle3, _Const019B );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle4, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle4, _Const019C );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle4, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle5, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle5, _Const019D );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle5, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle5, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle5, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle5, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle6, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle6, _Const019E );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle6, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle6, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle6, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle6, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle7, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle7, _Const00C9 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle7, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle7, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle7, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle7, _Const00C3 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle8, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Rectangle8, _Const019F );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle8, _Const00C3 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle8, _Const00C2 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle8, _Const00C2 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle8, _Const00C3 );
  CoreRectView__OnSetBounds( &_this->Text, _Const01A0 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01A1 ));
  CoreTimer_OnSetPeriod( &_this->Timer, 2500 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppAccesssPopup_Hide );

  /* Call the user defined constructor */
  AppAccesssPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::AccesssPopup' */
void AppAccesssPopup__ReInit( AppAccesssPopup _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  ViewsRectangle__ReInit( &_this->Rectangle3 );
  ViewsRectangle__ReInit( &_this->Rectangle4 );
  ViewsRectangle__ReInit( &_this->Rectangle5 );
  ViewsRectangle__ReInit( &_this->Rectangle6 );
  ViewsRectangle__ReInit( &_this->Rectangle7 );
  ViewsRectangle__ReInit( &_this->Rectangle8 );
  ViewsText__ReInit( &_this->Text );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'App::AccesssPopup' */
void AppAccesssPopup__Done( AppAccesssPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAccesssPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  ViewsRectangle__Done( &_this->Rectangle3 );
  ViewsRectangle__Done( &_this->Rectangle4 );
  ViewsRectangle__Done( &_this->Rectangle5 );
  ViewsRectangle__Done( &_this->Rectangle6 );
  ViewsRectangle__Done( &_this->Rectangle7 );
  ViewsRectangle__Done( &_this->Rectangle8 );
  ViewsText__Done( &_this->Text );
  CoreTimer__Done( &_this->Timer );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AccesssPopup' */
void AppAccesssPopup__Mark( AppAccesssPopup _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Rectangle3 );
  EwMarkObject( &_this->Rectangle4 );
  EwMarkObject( &_this->Rectangle5 );
  EwMarkObject( &_this->Rectangle6 );
  EwMarkObject( &_this->Rectangle7 );
  EwMarkObject( &_this->Rectangle8 );
  EwMarkObject( _this->mask );
  EwMarkObject( _this->touch );
  EwMarkObject( _this->root );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppAccesssPopup_UpdateLayout( AppAccesssPopup _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppAccesssPopup_UpdateViewState( AppAccesssPopup _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppAccesssPopup_Init( AppAccesssPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'App::AccesssPopup.Show()' */
void AppAccesssPopup_Show( AppAccesssPopup _this, CoreRoot rootObject )
{
  XPoint m;

  _this->mask = EwNewObject( ViewsRectangle, 0 );
  _this->touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->root = rootObject;
  CoreQuadView__OnSetPoint1( _this->touch, _Const0052 );
  CoreQuadView__OnSetPoint2( _this->touch, _Const008F );
  CoreQuadView__OnSetPoint3( _this->touch, _Const008E );
  CoreQuadView__OnSetPoint4( _this->touch, _Const00CD );
  CoreGroup__Add( rootObject, ((CoreView)_this->touch ), 0 );
  ViewsRectangle_OnSetColor( _this->mask, _Const00CE );
  CoreRectView__OnSetBounds( _this->mask, _Const0002 );
  CoreGroup__Add( rootObject, ((CoreView)_this->mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super2.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super2.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super2.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super2.Bounds, EwMovePointNeg( 
  _Const008E, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  CoreTimer_restart( &_this->Timer, 0, 1000 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  return;
}

/* 'C' function for method : 'App::AccesssPopup.Hide()' */
void AppAccesssPopup_Hide( AppAccesssPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__Remove( _this->root, ((CoreView)_this->mask ));
  CoreGroup__Remove( _this->root, ((CoreView)_this->touch ));
  CoreGroup__Remove( _this->root, ((CoreView)_this ));
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  return;
}

/* Variants derived from the class : 'App::AccesssPopup' */
EW_DEFINE_CLASS_VARIANTS( AppAccesssPopup )
EW_END_OF_CLASS_VARIANTS( AppAccesssPopup )

/* Virtual Method Table (VMT) for the class : 'App::AccesssPopup' */
EW_DEFINE_CLASS( AppAccesssPopup, CoreGroup, "App::AccesssPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppAccesssPopup_UpdateLayout,
  AppAccesssPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAccesssPopup )

/* Bitmap resource : 'App::Key2Bitmap' */
EW_DEFINE_BITMAP_RES( AppKey2Bitmap )
  EW_BITMAP_FRAMES( AppKey2Bitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppKey2Bitmap, Default )                /* ratio 18.38 % */
    0x1C080100, 0xA3205048, 0x2866EB5C, 0x944E75C2, 0xC8E75BA2, 0x6FD8622D, 0x167FBA22,
    0x98BAE231, 0x8D46E3B1, 0x0C7A3F1C, 0xC9A41249, 0xAA452791, 0xA5B2892C, 0x1EFD73CA,
    0xF0D85C46, 0x3882C260, 0x19DBFE0B, 0x742DD120, 0x74C22687, 0xCA6572C9, 0x2A8F48A2,
    0x28D4BA25, 0x5F4EA7D3, 0x6868DCC6, 0x3900BFE7, 0x0A04F801, 0xA6D76935, 0x1D86A35E,
    0x57ECB60B, 0x19D10B94, 0x86736822, 0xCD628AD0, 0xB73B3DC6, 0x77BA592E, 0x7984A6ED,
    0x86429CD0, 0xCDCAF0A2, 0x61B0784B, 0xFEE788C1, 0xA253250C, 0x6549C4DE, 0xCA43EBFE,
    0x83323FD9, 0xA28BFD4A, 0x223FD0A6, 0xC3FCDA58, 0x3FCB4481, 0xFCA44219, 0xCA8441A3,
    0xBC4C1D3F, 0x05922BFC, 0x6E2A3FCE, 0xA353FD14, 0x40BFD5A8, 0x7E1DACAA, 0xB8E49C4C,
    0x16CB90B7, 0x1FEDC57A, 0xFE973C17, 0x0FFD48CD, 0x570C0502, 0x37F80403, 0xEF40BB90,
    0xEF8BC000, 0xF97BFE4E, 0xFFD202F0, 0xC441C0B3, 0xCAFFD8EB, 0x888CD210, 0x85E1B896,
    0xAB2F1791, 0x7FB996C8, 0xC5C12839, 0x901C063F, 0x25E678C0, 0x0879DE18, 0x8360A82E,
    0x20C83210, 0xF0480F03, 0x006713CF, 0xC986DF82, 0x26476465, 0xA0F844BF, 0xE8962384,
    0xA22289E0, 0x048A2248, 0x2DD188B4, 0x9FB875FF, 0xC2607660, 0xAE388A4B, 0x0A022048,
    0x1C4573FC, 0x8483FC8E, 0x68E47617, 0x31E191A2, 0x1C394B72, 0x45E4E8CE, 0xE3A8DE35,
    0xB0B64794, 0x454A1243, 0x48068150, 0x929DD976, 0xDF98CA4C, 0x797A517E, 0xF82F8324,
    0x145284E0, 0x9981F068, 0x66091E2A, 0xF9D66393, 0xC654994F, 0x6978A7A9, 0x9B5289AE,
    0xE709E66F, 0x498A733F, 0x9E785967, 0x7D9EE8A9, 0xA0E6E9B2, 0xE4FA1682, 0xBA255FA1,
    0x160CA0A7, 0x286D85A1, 0x104350A9, 0xE84A2E90, 0x5A4E9492, 0xEEA18DA9, 0x3A0BC249,
    0x7F8893FC, 0xDCC2114A, 0x60480E3F, 0x4A10AA41, 0x4CA1A76A, 0x776B8A59, 0x87A1884B,
    0xC0F42F61, 0xEA0FAFC4, 0x71AEEA5A, 0x91E98AF9, 0x05110432, 0xE05EB07F, 0xA2C80941,
    0xA6AF2CA8, 0xA8ACE51A, 0x9DB76A3A, 0xF20C6A14, 0x84B3220F, 0xAE210FF3, 0x0F0FF368,
    0x6D917C4D, 0xCB72A4AE, 0x5EDF526C, 0x0383EE0A, 0x3FC0400C, 0xAF3009E9, 0x7B76DB8E,
    0x947E52AF, 0xFE3FCCF2, 0xBEACFBFE, 0xE0FC0F10, 0xF05C1303, 0x2EF6648F, 0x911BD4AB,
    0x0D4FF2D8, 0x71215845, 0x478B0FC4, 0xFC060140, 0x6A154413, 0x278783FC, 0xF19C68C7,
    0xF2C48657, 0x75DB764D, 0x2E3FEE27, 0x050FF95C, 0xEFD9BC19, 0x501AB800, 0x7C183FE0,
    0x263FC260, 0x8403D0C4, 0x81E06413, 0x5C6B06CC, 0x773BCDF3, 0x10C5F017, 0x7D889499,
    0x0FFC2993, 0x0884981D, 0xFCB92507, 0xBB254713, 0x268753FC, 0x0803FCC2, 0x6C5CD32A,
    0xBD1F984B, 0x0CDA4931, 0xCCF53D46, 0x35772755, 0x8D6DE2CE, 0xE971E071, 0x7E83F7CD,
    0xA1B07D53, 0x9DFD6783, 0x5E035DE1, 0x4B50E292, 0x82E6F8ED, 0xE15DAE45, 0x78FE1DEA,
    0xFE677BE2, 0x1FA3E237, 0xE02C887C, 0xE7F3AE10, 0xB96BAAE8, 0x22386C49, 0x5C18840B,
    0x87EA39CB, 0x0400E02E, 0xF681C610, 0xA6E125EE, 0xF34D831B, 0x5FF2FC40, 0x110370AD,
    0xC4F0F610, 0x264BCB18, 0x40350AC2, 0x73170478, 0x60BBCF30, 0x0981E45D, 0xA0162D84,
    0x6B19F0F6, 0x10248751, 0x27076CEE, 0xFA9F78C3, 0x42D48986, 0x80193FCE, 0xB5840270,
    0xC7B1CADE, 0x745F09C9, 0x0632964E, 0x530860D1, 0xBF029F90, 0xFC5D36B2, 0x80086503,
    0x563ED0D0, 0x665C2A84, 0xC3E0FF3E, 0x8FF19A28, 0x66227C3C, 0x2643D05E, 0x1A0291FE,
    0x5A474A80, 0x522012E2, 0x1A058D51, 0x80E621E5, 0x42BEFCCB, 0xE8160C06, 0x992B2540,
    0xA7703275, 0x766FC44D, 0x0CA1814C, 0xFDBDF38F, 0x20442D90, 0xE60C8148, 0xF017B3B5,
    0xF8FF0940, 0xE1A429C3, 0x671CB1C2, 0x8FDC4031, 0x0860CC64, 0x06E3FC54, 0xD202C848,
    0x04808774, 0x0C0168F4, 0x3A3FC070, 0xFC170260, 0x305207E3, 0xC0E43FC3, 0x061E2AB6,
    0x8BE8A122, 0xC592285B, 0x8FD11619, 0x4F898161, 0x820321D4, 0x861CC7F4, 0x151DA3E8,
    0x149A1829, 0x09562B22, 0xA10A5080, 0xF22E401F, 0x8981728F, 0x95992323, 0x06520CAC,
    0x45A3C08B, 0x4C143888, 0xA5711232, 0xCF15C744, 0x764F8A11, 0x01012072, 0x00000000

  EW_BITMAPS_TABLE( AppKey2Bitmap )
    EW_BITMAP( AppKey2Bitmap, Default )
EW_END_OF_BITMAP_RES( AppKey2Bitmap )

/* Table with links to derived variants of the bitmap resource : 'App::Key2Bitmap' */
EW_RES_WITHOUT_VARIANTS( AppKey2Bitmap )

/* Initializer for the class 'App::LogPopup' */
void AppLogPopup__Init( AppLogPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Events, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Faults, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->System, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Fire, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Settings, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Access, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Testing, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Misc, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->LogEventHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLogPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01A2 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0153 );
  ViewsRectangle_OnSetVisible( &_this->Super1.Background, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const01A3 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const013A );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01A4 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->Events, _Const01A5 );
  WidgetSetToggleButton_OnSetChecked( &_this->Events, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Events, EwLoadString( &_Const01A6 ));
  CoreRectView__OnSetBounds( &_this->Faults, _Const01A7 );
  WidgetSetToggleButton_OnSetChecked( &_this->Faults, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Faults, EwLoadString( &_Const01A8 ));
  CoreRectView__OnSetBounds( &_this->System, _Const01A9 );
  WidgetSetToggleButton_OnSetChecked( &_this->System, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->System, EwLoadString( &_Const00B0 ));
  CoreRectView__OnSetBounds( &_this->Fire, _Const01AA );
  WidgetSetToggleButton_OnSetChecked( &_this->Fire, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Fire, EwLoadString( &_Const01AB ));
  CoreRectView__OnSetBounds( &_this->Settings, _Const01AC );
  WidgetSetToggleButton_OnSetChecked( &_this->Settings, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Settings, EwLoadString( &_Const01AD 
  ));
  CoreRectView__OnSetBounds( &_this->Access, _Const01AE );
  WidgetSetToggleButton_OnSetChecked( &_this->Access, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Access, EwLoadString( &_Const002C ));
  CoreRectView__OnSetBounds( &_this->Testing, _Const01AF );
  WidgetSetToggleButton_OnSetChecked( &_this->Testing, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Testing, EwLoadString( &_Const0033 ));
  CoreRectView__OnSetBounds( &_this->Misc, _Const01B0 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Misc, 0 );
  CoreGroup__OnSetVisible( &_this->Misc, 0 );
  WidgetSetToggleButton_OnSetChecked( &_this->Misc, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Misc, EwLoadString( &_Const01B1 ));
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const01B2 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppLogItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 25 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 10 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Events ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Faults ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->System ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Fire ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Settings ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Access ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Testing ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Misc ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppLogPopup_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Events.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Events.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Events, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Faults.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Faults.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Faults, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->System.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->System.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->System, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Fire.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Fire.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Fire, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Settings.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Settings.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Settings, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Access.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Access.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Access, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Testing.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Testing.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Testing, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Misc.OnSwitchOn = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  _this->Misc.OnSwitchOff = EwNewSlot( _this, AppLogPopup_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Misc, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->LogEventHandler.OnEvent = EwNullSlot;
  CoreSystemEventHandler_OnSetEvent( &_this->LogEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->LogListChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppLogPopup_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppLogPopup_RefreshAll );
  _this->ListViewer.onScrollRefresh = EwNewSlot( _this, AppLogPopup_ScrollRefresh 
  );

  /* Call the user defined constructor */
  AppLogPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::LogPopup' */
void AppLogPopup__ReInit( AppLogPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetToggleButton__ReInit( &_this->Events );
  WidgetSetToggleButton__ReInit( &_this->Faults );
  WidgetSetToggleButton__ReInit( &_this->System );
  WidgetSetToggleButton__ReInit( &_this->Fire );
  WidgetSetToggleButton__ReInit( &_this->Settings );
  WidgetSetToggleButton__ReInit( &_this->Access );
  WidgetSetToggleButton__ReInit( &_this->Testing );
  WidgetSetToggleButton__ReInit( &_this->Misc );
  CoreSystemEventHandler__ReInit( &_this->LogEventHandler );
  AppListViewer__ReInit( &_this->ListViewer );
}

/* Finalizer method for the class 'App::LogPopup' */
void AppLogPopup__Done( AppLogPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLogPopup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle9 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetToggleButton__Done( &_this->Events );
  WidgetSetToggleButton__Done( &_this->Faults );
  WidgetSetToggleButton__Done( &_this->System );
  WidgetSetToggleButton__Done( &_this->Fire );
  WidgetSetToggleButton__Done( &_this->Settings );
  WidgetSetToggleButton__Done( &_this->Access );
  WidgetSetToggleButton__Done( &_this->Testing );
  WidgetSetToggleButton__Done( &_this->Misc );
  CoreSystemEventHandler__Done( &_this->LogEventHandler );
  AppListViewer__Done( &_this->ListViewer );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LogPopup' */
void AppLogPopup__Mark( AppLogPopup _this )
{
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Events );
  EwMarkObject( &_this->Faults );
  EwMarkObject( &_this->System );
  EwMarkObject( &_this->Fire );
  EwMarkObject( &_this->Settings );
  EwMarkObject( &_this->Access );
  EwMarkObject( &_this->Testing );
  EwMarkObject( &_this->Misc );
  EwMarkObject( &_this->LogEventHandler );
  EwMarkObject( &_this->ListViewer );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppLogPopup_Init( AppLogPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, AppLogPopup_ChckOnOff ), ((XObject)_this ));

  if (( _this->ListViewer.NoOfItems * _this->ListViewer.ItemHeight ) > EwGetRectH( 
      _this->ListViewer.Super2.Bounds ))
  {
    AppListViewer_OnSetScrollOffset( &_this->ListViewer, ( _this->ListViewer.NoOfItems 
    * _this->ListViewer.ItemHeight ) - EwGetRectH( _this->ListViewer.Super2.Bounds 
    ));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppLogPopup_OnLoadItem( AppLogPopup _this, XObject sender )
{
  XInt32 itemNo;
  AppLogItem i;
  XInt32 t;
  XInt32 filter;
  XString msg;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  i = EwCastObject( _this->ListViewer.VerticalList.View, AppLogItem );

  if ( i == 0 )
    return;

  if (( itemNo < 0 ) || ( itemNo >= _this->ListViewer.NoOfItems ))
  {
    CoreGroup__OnSetVisible( i, 0 );
    return;
  }

  CoreGroup__OnSetVisible( i, 1 );
  t = -1;
  filter = AppLogPopup_GetFilter( _this );
  msg = EwLoadString( &_Const01B3 );
  {
    char buff[ 128 ];
    Command cmd;

    cmd.int0 = itemNo;
    cmd.int1 = filter;
    cmd.int2 = (int) buff;

    if ( Command0( CMD_GET_LOG_LINE, &cmd ) == CMD_OK )
    {

      t = cmd.int3;

      msg = EwNewStringAnsi( buff );
    }
  }

  switch ( t )
  {
    case 4 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogAccess, ResourcesBitmap 
      ));
    break;

    case 1 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogEvents, ResourcesBitmap 
      ));
    break;

    case 5 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
      ));
    break;

    case 6 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
      ));
    break;

    case 0 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
      ));
    break;

    case 3 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, ResourcesBitmap 
      ));
    break;

    case 2 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSystem, ResourcesBitmap 
      ));
    break;

    case 7 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogTest, ResourcesBitmap 
      ));
    break;

    default : 
      ViewsImage_OnSetBitmap( &i->Image, 0 );
  }

  switch ( t )
  {
    case 4 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const002C ));
    break;

    case 1 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B4 ));
    break;

    case 5 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
    break;

    case 6 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B6 ));
    break;

    case 0 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
    break;

    case 3 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B8 ));
    break;

    case 2 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const00B0 ));
    break;

    case 7 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B9 ));
    break;

    default : 
      ViewsText_OnSetString( &i->TypeText, 0 );
  }

  ViewsText_OnSetString( &i->DescripText, msg );
}

/* 'C' function for method : 'App::LogPopup.Close()' */
void AppLogPopup_Close( AppLogPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::LogPopup.GetFilter()' */
XInt32 AppLogPopup_GetFilter( AppLogPopup _this )
{
  XInt32 filter = 0;

  if ( _this->Events.Checked )
    filter = filter | 2;

  if ( _this->Faults.Checked )
    filter = filter | 32;

  if ( _this->System.Checked )
    filter = filter | 4;

  if ( _this->Fire.Checked )
    filter = filter | 64;

  if ( _this->Misc.Checked )
    filter = filter | 1;

  if ( _this->Access.Checked )
    filter = filter | 16;

  if ( _this->Settings.Checked )
    filter = filter | 8;

  if ( _this->Testing.Checked )
    filter = filter | 128;

  return filter;
}

/* 'C' function for method : 'App::LogPopup.ScrollRefresh()' */
void AppLogPopup_ScrollRefresh( AppLogPopup _this, XObject sender )
{
  XInt32 itemNo;
  XInt32 filter;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  filter = AppLogPopup_GetFilter( _this );

  if ( _this->ListViewer.StartRow < itemNo )
  {
    AppLogItem i = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppLogItem 
      );
    AppLogItem j = i;
    XInt32 diff = itemNo - _this->ListViewer.StartRow;
    XInt32 n = 0;

    while (( j != 0 ) && ( n < diff ))
    {
      j = EwCastObject( j->Super3.next, AppLogItem );
      n = n + 1;
    }

    while (( i != 0 ) && ( j != 0 ))
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        ViewsImage_OnSetBitmap( &i->Image, j->Image.Bitmap );
        ViewsText_OnSetString( &i->DescripText, j->DescripText.String );
        ViewsText_OnSetString( &i->TypeText, j->TypeText.String );
        CoreGroup__OnSetVisible( i, 1 );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)i );
      itemNo = itemNo + 1;
      j = EwCastObject( j->Super3.next, AppLogItem );
      i = EwCastObject( i->Super3.next, AppLogItem );
    }

    while ( i != 0 )
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        XInt32 t = -1;
        XString msg = EwLoadString( &_Const01B3 );
        CoreGroup__OnSetVisible( i, 1 );
        {
          char buff[ 129 ];
          Command cmd;

          cmd.int0 = itemNo;
          cmd.int1 = filter;
          cmd.int2 = (int) buff;

          if ( Command0( CMD_GET_LOG_LINE, &cmd ) == CMD_OK )
          {

            t = cmd.int3;

            msg = EwNewStringAnsi( buff );
          }
        }

        switch ( t )
        {
          case 4 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogAccess, ResourcesBitmap 
            ));
          break;

          case 1 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogEvents, ResourcesBitmap 
            ));
          break;

          case 5 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
            ));
          break;

          case 6 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
            ));
          break;

          case 0 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
            ));
          break;

          case 3 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, 
            ResourcesBitmap ));
          break;

          case 2 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSystem, ResourcesBitmap 
            ));
          break;

          case 7 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogTest, ResourcesBitmap 
            ));
          break;

          default : 
            ViewsImage_OnSetBitmap( &i->Image, 0 );
        }

        switch ( t )
        {
          case 4 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const002C ));
          break;

          case 1 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B4 ));
          break;

          case 5 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
          break;

          case 6 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B6 ));
          break;

          case 0 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
          break;

          case 3 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B8 ));
          break;

          case 2 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const00B0 ));
          break;

          case 7 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B9 ));
          break;

          default : 
            ViewsText_OnSetString( &i->TypeText, 0 );
        }

        ViewsText_OnSetString( &i->DescripText, msg );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      itemNo = itemNo + 1;
      CoreGroup_InvalidateViewState((CoreGroup)i );
      i = EwCastObject( i->Super3.next, AppLogItem );
    }
  }
  else
  {
    AppLogItem i = EwCastObject( _this->ListViewer.VerticalList.Super1.last, AppLogItem 
      );
    AppLogItem j = i;
    XInt32 diff = _this->ListViewer.StartRow - itemNo;
    XInt32 n = 0;

    while (( j != 0 ) && ( n < diff ))
    {
      j = EwCastObject( j->Super3.prev, AppLogItem );
      n = n + 1;
    }

    itemNo = itemNo + 12;

    while (( i != 0 ) && ( j != 0 ))
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        ViewsImage_OnSetBitmap( &i->Image, j->Image.Bitmap );
        ViewsText_OnSetString( &i->DescripText, j->DescripText.String );
        ViewsText_OnSetString( &i->TypeText, j->TypeText.String );
        CoreGroup__OnSetVisible( i, 1 );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)i );
      itemNo = itemNo - 1;
      j = EwCastObject( j->Super3.prev, AppLogItem );
      i = EwCastObject( i->Super3.prev, AppLogItem );
    }

    while ( i != 0 )
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        XInt32 t = -1;
        XString msg = EwLoadString( &_Const01B3 );
        CoreGroup__OnSetVisible( i, 1 );
        {
          char buff[ 129 ];
          Command cmd;

          cmd.int0 = itemNo;
          cmd.int1 = filter;
          cmd.int2 = (int) buff;

          if ( Command0( CMD_GET_LOG_LINE, &cmd ) == CMD_OK )
          {

            t = cmd.int3;

            msg = EwNewStringAnsi( buff );
          }
        }

        switch ( t )
        {
          case 4 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogAccess, ResourcesBitmap 
            ));
          break;

          case 1 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogEvents, ResourcesBitmap 
            ));
          break;

          case 5 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
            ));
          break;

          case 6 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
            ));
          break;

          case 0 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
            ));
          break;

          case 3 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, 
            ResourcesBitmap ));
          break;

          case 2 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSystem, ResourcesBitmap 
            ));
          break;

          case 7 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogTest, ResourcesBitmap 
            ));
          break;

          default : 
            ViewsImage_OnSetBitmap( &i->Image, 0 );
        }

        switch ( t )
        {
          case 4 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const002C ));
          break;

          case 1 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B4 ));
          break;

          case 5 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
          break;

          case 6 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B6 ));
          break;

          case 0 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
          break;

          case 3 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B8 ));
          break;

          case 2 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const00B0 ));
          break;

          case 7 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B9 ));
          break;

          default : 
            ViewsText_OnSetString( &i->TypeText, 0 );
        }

        ViewsText_OnSetString( &i->DescripText, msg );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      itemNo = itemNo - 1;
      CoreGroup_InvalidateViewState((CoreGroup)i );
      i = EwCastObject( i->Super3.prev, AppLogItem );
    }
  }
}

/* 'C' function for method : 'App::LogPopup.ChckOnOff()' */
void AppLogPopup_ChckOnOff( AppLogPopup _this, XObject sender )
{
  XInt32 n;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  n = AppLogPopup_GetFilter( _this );
  {
    Command cmd;
    cmd.int0 = n;

    Command0( CMD_GET_LOG_LENGTH, &cmd );

    n = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, n );
}

/* 'C' function for method : 'App::LogPopup.RefreshAll()' */
void AppLogPopup_RefreshAll( AppLogPopup _this, XObject sender )
{
  XInt32 itemNo;
  AppLogItem i;
  XInt32 filter;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  i = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppLogItem );
  filter = AppLogPopup_GetFilter( _this );

  while ( i != 0 )
  {
    if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
    {
      XInt32 t;
      XString msg;
      CoreGroup__OnSetVisible( i, 1 );
      t = -1;
      msg = EwLoadString( &_Const01B3 );
      {
        char buff[ 129 ];
        Command cmd;

        cmd.int0 = itemNo;
        cmd.int1 = filter;
        cmd.int2 = (int) buff;

        if ( Command0( CMD_GET_LOG_LINE, &cmd ) == CMD_OK )
        {

          t = cmd.int3;

          msg = EwNewStringAnsi( buff );
        }
      }

      switch ( t )
      {
        case 4 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogAccess, ResourcesBitmap 
          ));
        break;

        case 1 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogEvents, ResourcesBitmap 
          ));
        break;

        case 5 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
          ));
        break;

        case 6 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
          ));
        break;

        case 0 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
          ));
        break;

        case 3 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, ResourcesBitmap 
          ));
        break;

        case 2 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSystem, ResourcesBitmap 
          ));
        break;

        case 7 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogTest, ResourcesBitmap 
          ));
        break;

        default : 
          ViewsImage_OnSetBitmap( &i->Image, 0 );
      }

      switch ( t )
      {
        case 4 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const002C ));
        break;

        case 1 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B4 ));
        break;

        case 5 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
        break;

        case 6 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B6 ));
        break;

        case 0 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
        break;

        case 3 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B8 ));
        break;

        case 2 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const00B0 ));
        break;

        case 7 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B9 ));
        break;

        default : 
          ViewsText_OnSetString( &i->TypeText, 0 );
      }

      ViewsText_OnSetString( &i->DescripText, msg );
    }
    else
    {
      CoreGroup__OnSetVisible( i, 0 );
    }

    itemNo = itemNo + 1;
    CoreGroup_InvalidateViewState((CoreGroup)i );
    i = EwCastObject( i->Super3.next, AppLogItem );
  }
}

/* Variants derived from the class : 'App::LogPopup' */
EW_DEFINE_CLASS_VARIANTS( AppLogPopup )
EW_END_OF_CLASS_VARIANTS( AppLogPopup )

/* Virtual Method Table (VMT) for the class : 'App::LogPopup' */
EW_DEFINE_CLASS( AppLogPopup, AppPopup, "App::LogPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppLogPopup )

/* Initializer for the class 'App::LogItem' */
void AppLogItem__Init( AppLogItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescripText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLogItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01BA );
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Image, _Const01BB );
  CoreView_OnSetLayout((CoreView)&_this->DescripText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->DescripText, _Const01BC );
  ViewsText_OnSetRowDistance( &_this->DescripText, 15 );
  ViewsText_OnSetWrapText( &_this->DescripText, 1 );
  ViewsText_OnSetAlignment( &_this->DescripText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescripText, 0 );
  ViewsText_OnSetColor( &_this->DescripText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->TypeText, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const01BD );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, 0 );
  ViewsText_OnSetColor( &_this->TypeText, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescripText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->DescripText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::LogItem' */
void AppLogItem__ReInit( AppLogItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->DescripText );
  ViewsText__ReInit( &_this->TypeText );
}

/* Finalizer method for the class 'App::LogItem' */
void AppLogItem__Done( AppLogItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLogItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->DescripText );
  ViewsText__Done( &_this->TypeText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LogItem' */
void AppLogItem__Mark( AppLogItem _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->DescripText );
  EwMarkObject( &_this->TypeText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppLogItem_UpdateLayout( AppLogItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppLogItem_UpdateViewState( AppLogItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::LogItem' */
EW_DEFINE_CLASS_VARIANTS( AppLogItem )
EW_END_OF_CLASS_VARIANTS( AppLogItem )

/* Virtual Method Table (VMT) for the class : 'App::LogItem' */
EW_DEFINE_CLASS( AppLogItem, CoreGroup, "App::LogItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppLogItem_UpdateLayout,
  AppLogItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppLogItem )

/* Initializer for the class 'App::LEDPopup' */
void AppLEDPopup__Init( AppLEDPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLEDPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01BE );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const01BF );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01C0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const01C1 
  ));
  CoreRectView__OnSetBounds( &_this->Text, _Const01C2 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01C3 ));
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  _this->Super1.onHide = EwNewSlot( _this, AppLEDPopup_Stop );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppLEDPopup_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::LEDPopup' */
void AppLEDPopup__ReInit( AppLEDPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::LEDPopup' */
void AppLEDPopup__Done( AppLEDPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLEDPopup );

  /* Finalize all embedded objects */
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LEDPopup' */
void AppLEDPopup__Mark( AppLEDPopup _this )
{
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::LEDPopup.Close()' */
void AppLEDPopup_Close( AppLEDPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::LEDPopup.Stop()' */
void AppLEDPopup_Stop( AppLEDPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    cmd.int0 = 0;
     Command0( CMD_LEDS_TEST, &cmd );
  }
}

/* Variants derived from the class : 'App::LEDPopup' */
EW_DEFINE_CLASS_VARIANTS( AppLEDPopup )
EW_END_OF_CLASS_VARIANTS( AppLEDPopup )

/* Virtual Method Table (VMT) for the class : 'App::LEDPopup' */
EW_DEFINE_CLASS( AppLEDPopup, AppPopup, "App::LEDPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppLEDPopup )

/* Initializer for the class 'App::SystemPage' */
void AppSystemPage__Init( AppSystemPage _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText1, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VertScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzSlider, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton5, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBarConfig__Init( &_this->HorizontalValueBarConfig, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->AppSuppEnable, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->SMSEnable, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton6, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSystemPage );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const01C4 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const01C5 );
  CoreRectView__OnSetBounds( _this, _Const00EB );
  CoreRectView__OnSetBounds( &_this->Outline, _Const01C6 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const01C4 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0006 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const01C7 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const01C8 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const01C9 );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const01CA );
  ViewsAttrText_OnSetAlignment( &_this->AttrText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const01CB ));
  ViewsAttrText_OnSetEmbedded( &_this->AttrText, 1 );
  CoreRectView__OnSetBounds( &_this->AttrText1, _Const01CC );
  ViewsAttrText_OnSetAlignment( &_this->AttrText1, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertTop );
  ViewsAttrText_OnSetString( &_this->AttrText1, 0 );
  ViewsAttrText_OnSetEmbedded( &_this->AttrText1, 1 );
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet, _Const000E );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  CoreRectView__OnSetBounds( &_this->VertScrollbar, _Const01CD );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VertScrollbar, 290 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VertScrollbar, 410 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const01C4 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01CE );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const01CF 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const01D0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const01D1 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton4, _Const01D2 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton4, EwLoadString( &_Const01D3 
  ));
  CoreRectView__OnSetBounds( &_this->Text1, _Const01D4 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const01D5 ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzSlider, _Const01D6 );
  WidgetSetHorizontalSlider_OnSetMinValue( &_this->HorzSlider, 10 );
  CoreRectView__OnSetBounds( &_this->PushButton5, _Const01D7 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton5, EwLoadString( &_Const01D8 
  ));
  CoreRectView__OnSetBounds( &_this->AppSuppEnable, _Const01D9 );
  WidgetSetToggleButton_OnSetChecked( &_this->AppSuppEnable, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->AppSuppEnable, EwLoadString( &_Const01DA 
  ));
  CoreRectView__OnSetBounds( &_this->SMSEnable, _Const01DB );
  WidgetSetToggleButton_OnSetChecked( &_this->SMSEnable, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->SMSEnable, EwLoadString( &_Const01DC 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton6, _Const01DD );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton6, EwLoadString( &_Const01DE 
  ));
  GraphicsAttrSet_OnSetColor1( &_this->AttrSet1, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VertScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AppSuppEnable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SMSEnable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton6 ), 0 );
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, &_this->AttrSet );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText1, &_this->AttrSet1 );
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &AppFontVerdana16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &AppFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetBitmap3( &_this->AttrSet, 0 );
  GraphicsAttrSet_OnSetBitmap2( &_this->AttrSet, 0 );
  GraphicsAttrSet_OnSetBitmap1( &_this->AttrSet, 0 );
  GraphicsAttrSet_OnSetBitmap0( &_this->AttrSet, 0 );
  _this->Timer.OnTrigger = EwNewSlot( _this, AppSystemPage_UpdateSlot );
  _this->VertScrollbar.OnScroll = EwNewSlot( _this, AppSystemPage_ScrollPressSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VertScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, AppSystemPage_ScrollDragSlot 
  );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppSystemPage_ViewLog );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNewSlot( _this, AppSystemPage_Restore );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton4.OnRelease = EwNullSlot;
  _this->PushButton4.OnActivate = EwNewSlot( _this, AppSystemPage_SetTime );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton4, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzSlider.OnChange = EwNewSlot( _this, AppSystemPage_Change );
  _this->HorzSlider.OnEnd = EwNewSlot( _this, AppSystemPage_ChangeEnd );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzSlider, EwGetAutoObject( 
  &WidgetSetHorizontalSlider_Medium, WidgetSetHorizontalSliderConfig ));
  _this->PushButton5.OnRelease = EwNewSlot( _this, AppSystemPage_FactoryReset );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton5, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->AppSuppEnable.OnSwitchOn = EwNewSlot( _this, AppSystemPage_AppSupp );
  _this->AppSuppEnable.OnSwitchOff = EwNewSlot( _this, AppSystemPage_AppSupp );
  WidgetSetToggleButton_OnSetAppearance( &_this->AppSuppEnable, EwGetAutoObject( 
  &AppNotmalToggleButton, WidgetSetToggleButtonConfig ));
  _this->SMSEnable.OnSwitchOn = EwNewSlot( _this, AppSystemPage_SMS );
  _this->SMSEnable.OnSwitchOff = EwNewSlot( _this, AppSystemPage_SMS );
  WidgetSetToggleButton_OnSetAppearance( &_this->SMSEnable, EwGetAutoObject( &AppNotmalToggleButton, 
  WidgetSetToggleButtonConfig ));
  _this->PushButton6.OnRelease = EwNullSlot;
  _this->PushButton6.OnActivate = EwNewSlot( _this, AppSystemPage_AppSupport );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton6, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  GraphicsAttrSet_OnSetFont3( &_this->AttrSet1, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont2( &_this->AttrSet1, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet1, EwLoadResource( &AppFontVerdana16, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet1, EwLoadResource( &AppFontVerdana14, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetBitmap3( &_this->AttrSet1, EwLoadResource( &AppBmp_4bar, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetBitmap2( &_this->AttrSet1, EwLoadResource( &AppBmp_3bar, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetBitmap1( &_this->AttrSet1, EwLoadResource( &AppBmp_2bar, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetBitmap0( &_this->AttrSet1, EwLoadResource( &AppBmp_1bar, 
  ResourcesBitmap ));

  /* Call the user defined constructor */
  AppSystemPage_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::SystemPage' */
void AppSystemPage__ReInit( AppSystemPage _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreOutline__ReInit( &_this->Outline );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsAttrText__ReInit( &_this->AttrText );
  ViewsAttrText__ReInit( &_this->AttrText1 );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  CoreTimer__ReInit( &_this->Timer );
  WidgetSetVerticalScrollbar__ReInit( &_this->VertScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  WidgetSetPushButton__ReInit( &_this->PushButton4 );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzSlider );
  WidgetSetPushButton__ReInit( &_this->PushButton5 );
  WidgetSetHorizontalValueBarConfig__ReInit( &_this->HorizontalValueBarConfig );
  WidgetSetToggleButton__ReInit( &_this->AppSuppEnable );
  WidgetSetToggleButton__ReInit( &_this->SMSEnable );
  WidgetSetPushButton__ReInit( &_this->PushButton6 );
  GraphicsAttrSet__ReInit( &_this->AttrSet1 );
}

/* Finalizer method for the class 'App::SystemPage' */
void AppSystemPage__Done( AppSystemPage _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSystemPage );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreOutline__Done( &_this->Outline );
  ViewsBevel__Done( &_this->Bevel );
  ViewsAttrText__Done( &_this->AttrText );
  ViewsAttrText__Done( &_this->AttrText1 );
  GraphicsAttrSet__Done( &_this->AttrSet );
  CoreTimer__Done( &_this->Timer );
  WidgetSetVerticalScrollbar__Done( &_this->VertScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  WidgetSetPushButton__Done( &_this->PushButton4 );
  ViewsText__Done( &_this->Text1 );
  WidgetSetHorizontalSlider__Done( &_this->HorzSlider );
  WidgetSetPushButton__Done( &_this->PushButton5 );
  WidgetSetHorizontalValueBarConfig__Done( &_this->HorizontalValueBarConfig );
  WidgetSetToggleButton__Done( &_this->AppSuppEnable );
  WidgetSetToggleButton__Done( &_this->SMSEnable );
  WidgetSetPushButton__Done( &_this->PushButton6 );
  GraphicsAttrSet__Done( &_this->AttrSet1 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SystemPage' */
void AppSystemPage__Mark( AppSystemPage _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->AttrText1 );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->VertScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->PushButton4 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->HorzSlider );
  EwMarkObject( &_this->PushButton5 );
  EwMarkObject( &_this->HorizontalValueBarConfig );
  EwMarkObject( &_this->AppSuppEnable );
  EwMarkObject( &_this->SMSEnable );
  EwMarkObject( &_this->PushButton6 );
  EwMarkObject( &_this->AttrSet1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSystemPage_UpdateLayout( AppSystemPage _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSystemPage_UpdateViewState( AppSystemPage _this, XSet aState )
{
  XUInt16 temp;
  XInt16 on_charge;
  XInt16 on_load;
  XInt16 off_load;
  XInt16 resistance;
  XInt16 status;
  XInt32 gsm_signal;
  XUInt32 timestamp;
  XUInt32 rightnow;
  XInt32 netstate;
  XUInt32 ncufw;
  XInt32 sysid;
  XInt32 index;
  XInt32 numpanels;
  XUInt32 rx[ 5 ];
  XUInt32 time[ 5 ];
  XString name[ 5 ] = {0};
  XString mcu_id;
  XString netname;
  XString fw;
  XString ncu;
  XString muid;
  XString v;
  XString s;
  XInt32 gsmval;
  XString gsm;
  XString bar;
  XString network;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  temp = 0;
  on_charge = 0;
  on_load = 0;
  off_load = 0;
  resistance = 0;
  status = 0;
  gsm_signal = -1;
  timestamp = 0;
  rightnow = 0;
  netstate = 0;
  ncufw = 0;
  sysid = 0;
  index = 0;
  numpanels = 0;
  mcu_id = EwLoadString( &_Const01DF );
  netname = EwLoadString( &_Const01E0 );
  time[ 0 ] = 0;
  time[ 1 ] = 0;
  time[ 2 ] = 0;
  time[ 3 ] = 0;
  time[ 4 ] = 0;
  rx[ 0 ] = 0;
  rx[ 1 ] = 0;
  rx[ 2 ] = 0;
  rx[ 3 ] = 0;
  rx[ 4 ] = 0;
  name[ 0 ] = 0;
  name[ 1 ] = 0;
  name[ 2 ] = 0;
  name[ 3 ] = 0;
  name[ 4 ] = 0;
  {
    Command c;

    rightnow = now();

    Command0( CMD_GET_PSU_STATUS, &c );

    timestamp  = c.uint3;

    temp        = c.ushort0;
    on_charge   = c.short1;
    on_load     = c.short2;
    off_load    = c.short3;
    resistance  = c.short4;          
    status      = c.short5;

    Command0( CMD_GSM_SIGNAL_QUALITY, &c );

    gsm_signal = c.int0;
    netstate = c.int1;
    netname = EwNewStringAnsi( (char*) c.int3 );

    //   Command0( CMD_GET_BACKLIGHT_VOLTAGE, &c );

    //   vbacklight = c.int0;

       Command0( CMD_GET_NCU_FW_VERSION, &c );

       ncufw = c.int0;

       Command0( CMD_GET_PANEL, &c );

       if ( c.int3 != 0 )
       {
         mcu_id = EwNewStringAnsi( (char*) c.int3 );
       }

       if ( c.int0 != 0 && c.int2 != 0 )
       {
           Panel* p = (Panel*) c.int0;
           Site* s = (Site*) c.int2;
           sysid = p->systemId;
           numpanels = s->numPanels;
           index = c.int1;

           for( int p = 0; p < numpanels && p < 5; p++ )
           {         
              c.int0 = p;
              Command0( CMD_GET_NET_STATS, &c );

              rx[ p] = c.int1;
              time[ p] = c.int2;
              name[ p] = EwNewStringAnsi( s->panels[ p ].name );                  
          } 
       }
  }
  fw = EwNewStringFloat((XFloat)_this->fwversion / 100.000000f, 0, 2 );
  ncu = EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwNewStringUInt(( 
  ncufw >> 16 ) & 255, 0, 10 ), EwLoadString( &_Const01E1 )), EwNewStringUInt(( 
  ncufw >> 8 ) & 255, 0, 10 )), EwLoadString( &_Const01E1 )), EwNewStringUInt( ncufw 
  & 255, 0, 10 ));
  muid = EwNewStringInt( sysid, 0, 10 );

  if ( sysid == 0 )
    muid = EwLoadString( &_Const01E2 );

  v = EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
  EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const01E3 ), mcu_id 
  ), EwLoadString( &_Const01E4 )), muid ), EwLoadString( &_Const01E5 )), fw ), EwLoadString( 
  &_Const01E6 )), ncu ), EwLoadString( &_Const01E7 ));
  ViewsAttrText_OnSetString( &_this->AttrText, v );
  s = 0;

  if (( rightnow - timestamp ) > 10 )
  {
    s = EwLoadString( &_Const01E8 );
  }
  else
  {
    XString st = 0;
    XString off_load_str;
    XString resistance_str;

    switch ( status )
    {
      case 0 :
        st = EwLoadString( &_Const01E9 );
      break;

      case 1 :
        st = EwLoadString( &_Const01EA );
      break;

      case 2 :
        st = EwLoadString( &_Const01EB );
      break;

      case 3 :
        st = EwLoadString( &_Const01EC );
      break;

      case 4 :
        st = EwLoadString( &_Const01ED );
      break;
    }

    if ( resistance == 0 )
    {
      off_load_str = EwLoadString( &_Const01EE );
      resistance_str = EwLoadString( &_Const01EE );
    }
    else
    {
      off_load_str = EwConcatString( EwNewStringFloat((XFloat)off_load / 1000.000000f, 
      0, 2 ), EwLoadString( &_Const01EF ));
      resistance_str = EwConcatString( EwNewStringInt( resistance, 0, 10 ), EwLoadString( 
      &_Const01F0 ));
    }

    s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
    EwConcatString( EwConcatString( EwLoadString( &_Const01F1 ), EwNewStringFloat((XFloat)temp 
    / 1000.000000f, 0, 2 )), EwLoadString( &_Const01F2 )), EwLoadString( &_Const01F3 
    )), EwNewStringFloat((XFloat)on_charge / 1000.000000f, 0, 2 )), EwLoadString( 
    &_Const01F4 )), EwLoadString( &_Const01F5 )), EwNewStringFloat((XFloat)on_load 
    / 1000.000000f, 0, 2 )), EwLoadString( &_Const01F4 )), EwLoadString( &_Const01F6 
    )), off_load_str ), EwLoadString( &_Const01F7 )), EwLoadString( &_Const01F8 
    )), resistance_str ), EwLoadString( &_Const01F7 )), EwLoadString( &_Const01F9 
    )), st ), EwLoadString( &_Const01F7 ));
  }

  if (( sysid != 0 ) && ( numpanels > 1 ))
  {
    XString netstats = EwConcatString( EwConcatString( EwLoadString( &_Const01FA 
      ), EwNewStringUInt( rx[ EwCheckIndex( index, 5 )], 0, 10 )), EwLoadString( 
      &_Const01F7 ));
    XInt32 pan = 0;

    for ( pan = 0; pan < 5; pan = pan + 1 )
    {
      if (( pan != index ) && ( pan < numpanels ))
      {
        XString t = 0;

        if ( rx[ EwCheckIndex( pan, 5 )] == 0 )
        {
          t = EwLoadString( &_Const01FB );
        }
        else
          if ( time[ EwCheckIndex( pan, 5 )] < 60 )
          {
            t = EwConcatString( EwNewStringUInt( time[ EwCheckIndex( pan, 5 )], 
            0, 10 ), EwLoadString( &_Const01FC ));
          }
          else
            if ( time[ EwCheckIndex( pan, 5 )] < 3600 )
            {
              t = EwConcatString( EwNewStringUInt( time[ EwCheckIndex( pan, 5 )] 
              / 60, 0, 10 ), EwLoadString( &_Const01FD ));
            }
            else
              if ( time[ EwCheckIndex( pan, 5 )] < 86400 )
              {
                t = EwConcatString( EwNewStringUInt( time[ EwCheckIndex( pan, 5 
                )] / 3600, 0, 10 ), EwLoadString( &_Const01FE ));
              }
              else
                if ( time[ EwCheckIndex( pan, 5 )] < 604800 )
                {
                  t = EwConcatString( EwNewStringUInt( time[ EwCheckIndex( pan, 
                  5 )] / 86400, 0, 10 ), EwLoadString( &_Const01FF ));
                }
                else
                  if ( time[ EwCheckIndex( pan, 5 )] < 5443200 )
                  {
                    t = EwConcatString( EwNewStringUInt( time[ EwCheckIndex( pan, 
                    5 )] / 604800, 0, 10 ), EwLoadString( &_Const0200 ));
                  }
                  else
                  {
                    t = EwLoadString( &_Const0201 );
                  }

        netstats = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
        EwConcatString( EwConcatString( EwConcatString( netstats, EwLoadString( 
        &_Const0202 )), name[ EwCheckIndex( pan, 5 )]), EwLoadString( &_Const0203 
        )), EwNewStringUInt( rx[ EwCheckIndex( pan, 5 )], 0, 10 )), EwLoadString( 
        &_Const0204 )), t ), EwLoadString( &_Const01F7 ));
      }
    }

    s = EwConcatString( s, netstats );
  }

  if ((( netstate > 1 ) && ( netstate < 5 )) || ( netstate > 10 ))
    gsm_signal = 99;

  gsmval = -113 + ( gsm_signal * 2 );
  gsm = EwConcatString( EwNewStringInt( gsmval, 0, 10 ), EwLoadString( &_Const0205 
  ));
  bar = EwLoadString( &_Const015B );

  if ( gsm_signal == 0 )
  {
    gsm = EwConcatString( EwLoadString( &_Const0206 ), gsm );
  }
  else
    if ( gsm_signal == 31 )
    {
      gsm = EwConcatString( EwLoadString( &_Const0207 ), gsm );
    }
    else
      if ( gsm_signal == 99 )
      {
        gsm = EwLoadString( &_Const0208 );
      }
      else
        if ( gsm_signal == -1 )
        {
          gsm = EwLoadString( &_Const0209 );
        }
        else
        {
          if ( gsmval < -110 )
            bar = EwLoadString( &_Const0167 );
          else
            if ( gsmval < -100 )
              bar = EwLoadString( &_Const0161 );
            else
              if ( gsmval < -90 )
                bar = EwLoadString( &_Const0163 );
              else
                if ( gsmval < -80 )
                  bar = EwLoadString( &_Const0165 );

          gsm = EwConcatString( EwConcatString( EwConcatString( EwNewStringInt( 
          gsmval, 0, 10 ), EwLoadString( &_Const020A )), bar ), EwLoadString( &_Const020B 
          ));
        }

  network = EwLoadString( &_Const020C );

  switch ( netstate )
  {
    case 0 :
      network = EwLoadString( &_Const020D );
    break;

    case 1 :
      network = EwLoadString( &_Const020E );
    break;

    case 2 :
      network = EwLoadString( &_Const020F );
    break;

    case 3 :
      network = EwLoadString( &_Const0210 );
    break;

    case 5 :
      network = EwLoadString( &_Const0211 );
    break;

    case 6 :
      network = EwLoadString( &_Const0212 );
    break;

    case 7 :
      network = EwLoadString( &_Const0213 );
    break;

    case 9 :
      network = EwLoadString( &_Const0214 );
    break;

    case 10 :
      network = EwLoadString( &_Const0215 );
    break;

    case 11 :
      network = EwLoadString( &_Const0216 );
    break;
  }

  s = EwConcatString( EwConcatString( EwConcatString( s, EwLoadString( &_Const0217 
  )), gsm ), EwLoadString( &_Const01F7 ));
  s = EwConcatString( EwConcatString( EwConcatString( s, EwLoadString( &_Const0218 
  )), network ), EwLoadString( &_Const01F7 ));
  s = EwConcatString( EwConcatString( EwConcatString( s, EwLoadString( &_Const0219 
  )), netname ), EwLoadString( &_Const01F7 ));
  ViewsAttrText_OnSetString( &_this->AttrText1, s );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppSystemPage_Init( AppSystemPage _this, XHandle aArg )
{
  XInt32 fw_version;
  XInt32 os_version;
  XInt32 level;
  XBool sms;
  XBool app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  fw_version = 100;
  os_version = 100;
  level = 0;
  sms = 0;
  app = 0;
  {
    Command c;

    Command0( CMD_GET_VERSION_NUMBERS, &c );

    fw_version = c.int0;
    os_version = c.int1;

    Command0( CMD_GET_BACKLIGHT_LEVEL, &c );

    level = c.int0;

    Command0( CMD_GET_APP_SUPP, &c );

    app = c.int0;

     Command0( CMD_GET_SMS, &c );

    sms = c.int0;
  }
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzSlider, level );
  WidgetSetToggleButton_OnSetChecked( &_this->SMSEnable, sms );
  WidgetSetToggleButton_OnSetChecked( &_this->AppSuppEnable, app );
  _this->osversion = (XInt16)os_version;
  _this->fwversion = (XInt16)fw_version;
}

/* 'C' function for method : 'App::SystemPage.ScrollDragSlot()' */
void AppSystemPage_ScrollDragSlot( AppSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VertScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'App::SystemPage.ScrollPressSlot()' */
void AppSystemPage_ScrollPressSlot( AppSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VertScrollbar )));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppSystemPage_ViewLog( AppSystemPage _this, XObject sender )
{
  AppPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  pop = ((AppPopup)EwNewObject( AppLogChoice, 0 ));
  AppPopup_Show( pop, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::SystemPage.UpdateSlot()' */
void AppSystemPage_UpdateSlot( AppSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppSystemPage_Restore( AppSystemPage _this, XObject sender )
{
  AppConfirmPopup popup;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( AppConfirmPopup, 0 );
  ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const021A ));
  AppConfirmPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( _this, 
  AppSystemPage_DoRestore ));
}

/* 'C' function for method : 'App::SystemPage.DoRestore()' */
void AppSystemPage_DoRestore( AppSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command c;
    Command0( CMD_RESET_EEPROM, &c );
  }
}

/* 'C' function for method : 'App::SystemPage.SetTime()' */
void AppSystemPage_SetTime( AppSystemPage _this, XObject sender )
{
  AppPopup bl;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bl = ((AppPopup)EwNewObject( AppSetTimePopup, 0 ));
  AppPopup_Show( bl, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::SystemPage.Change()' */
void AppSystemPage_Change( AppSystemPage _this, XObject sender )
{
  XInt32 val;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  val = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzSlider );
  {
    val = val*10 + 2;
    app.backlight_timer->Instance->CMP = 0x1A00 - val;
  }
}

/* 'C' function for method : 'App::SystemPage.ChangeEnd()' */
void AppSystemPage_ChangeEnd( AppSystemPage _this, XObject sender )
{
  XInt32 val;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  val = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzSlider );
  Command1( CMD_SET_BACKLIGHT_LEVEL, val );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppSystemPage_FactoryReset( AppSystemPage _this, XObject sender )
{
  AppConfirmTimerPopup popup;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  popup = EwNewObject( AppConfirmTimerPopup, 0 );
  ViewsText_OnSetString( &popup->Text1, EwLoadString( &_Const021B ));
  AppConfirmTimerPopup_ShowThen( popup, CoreView__GetRoot( _this ), EwNewSlot( _this, 
  AppSystemPage_DoFactoryReset ));
}

/* 'C' function for method : 'App::SystemPage.DoFactoryReset()' */
void AppSystemPage_DoFactoryReset( AppSystemPage _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command c;
    Command0( CMD_FACTORY_RESET, &c );
  }
}

/* 'C' function for method : 'App::SystemPage.SMS()' */
void AppSystemPage_SMS( AppSystemPage _this, XObject sender )
{
  XBool on;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  on = _this->SMSEnable.Checked;
  Command1( CMD_SET_SMS, (int) on );
}

/* 'C' function for method : 'App::SystemPage.AppSupp()' */
void AppSystemPage_AppSupp( AppSystemPage _this, XObject sender )
{
  XBool on;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  on = _this->AppSuppEnable.Checked;
  Command1( CMD_SET_APP_SUPP, (int)on );
}

/* 'C' function for method : 'App::SystemPage.AppSupport()' */
void AppSystemPage_AppSupport( AppSystemPage _this, XObject sender )
{
  AppAppSupportPopup ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwNewObject( AppAppSupportPopup, 0 );
  AppPopup_Show((AppPopup)ap, CoreView__GetRoot( _this ));
}

/* Variants derived from the class : 'App::SystemPage' */
EW_DEFINE_CLASS_VARIANTS( AppSystemPage )
EW_END_OF_CLASS_VARIANTS( AppSystemPage )

/* Virtual Method Table (VMT) for the class : 'App::SystemPage' */
EW_DEFINE_CLASS( AppSystemPage, CoreGroup, "App::SystemPage" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSystemPage_UpdateLayout,
  AppSystemPage_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSystemPage )

/* Initializer for the class 'App::Modify' */
void AppModify__Init( AppModify _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppModify );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A9 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)_this, 1 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppZoneToggle ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const021C );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0006 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const01C7 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const01C8 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const01C9 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const021D );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 1 );
  CoreGroup__OnSetVisible( &_this->PushButton2, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const021E 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppModify_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppModify_RefreshAll );
  _this->SiteChangedEventHandler.OnEvent = EwNewSlot( _this, AppModify_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppModify_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );
  _this->PushButton2.OnRelease = EwNewSlot( _this, AppModify_AddDevices );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  AppModify_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Modify' */
void AppModify__ReInit( AppModify _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppListViewer__ReInit( &_this->ListViewer );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'App::Modify' */
void AppModify__Done( AppModify _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppModify );

  /* Finalize all embedded objects */
  AppListViewer__Done( &_this->ListViewer );
  ViewsBevel__Done( &_this->Bevel );
  CoreSystemEventHandler__Done( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Modify' */
void AppModify__Mark( AppModify _this )
{
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->SiteChangedEventHandler );
  EwMarkObject( &_this->MeshListChangeEventHandler );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::Modify.OnSetVisible()' */
void AppModify_OnSetVisible( AppModify _this, XBool value )
{
  CoreGroup_OnSetVisible((CoreGroup)_this, value );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, _this->ListViewer.NoOfItems 
    );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppModify_UpdateLayout( AppModify _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppModify_UpdateViewState( AppModify _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppModify_Init( AppModify _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  AppModify_InitSite( _this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppModify_OnLoadItem( AppModify _this, XObject sender )
{
  CoreVerticalList vlist;
  XInt32 itemNo;
  AppZoneToggle item;
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  vlist = &_this->ListViewer.VerticalList;
  itemNo = _this->ListViewer.Item;
  item = EwCastObject( vlist->View, AppZoneToggle );

  if ( item == 0 )
    return;

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    return;
  }

  CoreGroup__OnSetVisible( item, 1 );
  curZone = 1;
  i = 0;
  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }

  while ( numZones > 0 )
  {
    XInt32 numdevs = 4;
    numdevs = get_num_devs_in_zone( curZone );

    if ( numdevs > 0 )
    {
      XSet zf;
      numZones = numZones - 1;

      if ( itemNo == i )
      {
        item->ZoneNum = curZone;
        item->isDevice = 0;
        item->isZone = 1;
        CoreGroup_InvalidateViewState((CoreGroup)item );
        return;
      }
      else
      {
        i = i + 1;
      }

      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), curZone 
      );

      if ((( zf & AppZoneFlagsModifyExpanded ) == AppZoneFlagsModifyExpanded ))
      {
        if ( itemNo < ( numdevs + i ))
        {
          XInt32 dev = itemNo - i;
          AppDeviceConfig dc = AppLibClass_GetConfigNumInZone( EwGetAutoObject( 
            &AppLib, AppLibClass ), curZone, (XInt16)dev );
          item->isDevice = 1;
          item->isZone = 0;
          item->UnitNum = (XUInt16)dc->unitnum;
          item->ZoneNum = (XUInt8)dc->zonenum;
          ViewsText_OnSetString( &item->DescriptionText, dc->location );
          CoreGroup_InvalidateViewState((CoreGroup)item );
          return;
        }
        else
        {
          i = i + numdevs;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  CoreGroup__OnSetVisible( item, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)item );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppModify_RefreshAll( AppModify _this, XObject sender )
{
  XInt32 itemNo;
  AppZoneToggle item;
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  item = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppZoneToggle 
  );

  if ( item == 0 )
    return;

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    item = EwCastObject( item->Super3.next, AppZoneToggle );

    if ( item == 0 )
      return;

    itemNo = itemNo + 1;
  }

  curZone = 1;
  i = 0;
  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }

  while ( numZones > 0 )
  {
    XInt32 numdevs = 4;
    numdevs = get_num_devs_in_zone( curZone );

    if ( numdevs > 0 )
    {
      XSet zf;
      numZones = numZones - 1;

      if ( itemNo == i )
      {
        CoreGroup__OnSetVisible( item, 1 );
        item->ZoneNum = curZone;
        item->isDevice = 0;
        item->isZone = 1;
        CoreGroup_InvalidateViewState((CoreGroup)item );
        item = EwCastObject( item->Super3.next, AppZoneToggle );

        if ( item == 0 )
          return;
      }
      else
      {
        i = i + 1;
      }

      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), curZone 
      );

      if ((( zf & AppZoneFlagsModifyExpanded ) == AppZoneFlagsModifyExpanded ))
      {
        if ( itemNo < ( numdevs + i ))
        {
          XInt32 dev = 0;

          while ( dev < numdevs )
          {
            if ( i == itemNo )
            {
              AppDeviceConfig dc = AppLibClass_GetConfigNumInZone( EwGetAutoObject( 
                &AppLib, AppLibClass ), curZone, (XInt16)dev );
              CoreGroup__OnSetVisible( item, 1 );
              item->isDevice = 1;
              item->isZone = 0;
              item->UnitNum = (XUInt16)dc->unitnum;
              item->ZoneNum = (XUInt8)dc->zonenum;
              ViewsText_OnSetString( &item->DescriptionText, dc->location );
              CoreGroup_InvalidateViewState((CoreGroup)item );
              item = EwCastObject( item->Super3.next, AppZoneToggle );

              if ( item == 0 )
                return;
            }
            else
            {
              i = i + 1;
            }

            dev = dev + 1;
          }
        }
        else
        {
          i = i + numdevs;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  while ( item != 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    item = EwCastObject( item->Super3.next, AppZoneToggle );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppModify_onEvent( AppModify _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppModify_InitSite( _this );
}

/* 'C' function for method : 'App::Modify.InitSite()' */
void AppModify_InitSite( AppModify _this )
{
  XInt32 num = 2;

  {
    Command cmd;
    Command0( CMD_GET_NUM_MODIFY, &cmd );
    num = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, num );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppModify_onEvent1( AppModify _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, _this->ListViewer.NoOfItems 
    );
}

/* 'C' function for method : 'App::Modify.AddDevices()' */
void AppModify_AddDevices( AppModify _this, XObject sender )
{
  AppAddDevicePopup add;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  add = EwNewObject( AppAddDevicePopup, 0 );
  AppPopup_Show((AppPopup)add, CoreView__GetRoot( _this ));
  Command1( CMD_DETECT_RBU, 0 );
}

/* Variants derived from the class : 'App::Modify' */
EW_DEFINE_CLASS_VARIANTS( AppModify )
EW_END_OF_CLASS_VARIANTS( AppModify )

/* Virtual Method Table (VMT) for the class : 'App::Modify' */
EW_DEFINE_CLASS( AppModify, CoreGroup, "App::Modify" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  AppModify_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppModify_UpdateLayout,
  AppModify_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppModify )

/* Initializer for the class 'App::ModifyPopup' */
void AppModifyPopup__Init( AppModifyPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppMattsKeyboard__Init( &_this->MattsKeyboard, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->CloseButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->InputChanButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->OutputChanButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->WriteButton, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppModifyPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const021F );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle, _Const0220 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle1, _Const0221 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle2, _Const0222 );
  CoreView_OnSetLayout((CoreView)&_this->Super1.Rectangle4, CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle4, _Const0223 );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle5, _Const0224 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle6, _Const0225 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle8, _Const0226 );
  CoreRectView__OnSetBounds( &_this->Super1.Background, _Const0227 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0228 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Background, 0 );
  CoreRectView__OnSetBounds( &_this->MattsKeyboard, _Const0229 );
  CoreRectView__OnSetBounds( &_this->Writable, _Const022A );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->Writable, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const022B );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const022C ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->CloseButton, _Const022D );
  WidgetSetPushButton_OnSetLabel( &_this->CloseButton, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->InputChanButton, _Const022E );
  WidgetSetPushButton_OnSetLabel( &_this->InputChanButton, EwLoadString( &_Const022F 
  ));
  CoreRectView__OnSetBounds( &_this->OutputChanButton, _Const0230 );
  WidgetSetPushButton_OnSetLabel( &_this->OutputChanButton, EwLoadString( &_Const0231 
  ));
  CoreRectView__OnSetBounds( &_this->WriteButton, _Const0232 );
  WidgetSetPushButton_OnSetLabel( &_this->WriteButton, EwLoadString( &_Const0233 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->MattsKeyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CloseButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputChanButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputChanButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->WriteButton ), 0 );
  CoreGroup__OnSetFocus( &_this->Writable, 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->CloseButton.OnRelease = EwNewSlot( _this, AppModifyPopup_CancelSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->CloseButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->InputChanButton.OnRelease = EwNewSlot( _this, AppModifyPopup_InputChannels 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->InputChanButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->OutputChanButton.OnRelease = EwNewSlot( _this, AppModifyPopup_OutputChannels 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->OutputChanButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->WriteButton.OnRelease = EwNewSlot( _this, AppModifyPopup_ProceedSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->WriteButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->device = EwGetAutoObject( &AppDummyConfig, AppDeviceConfig );
  _this->MeshChangeEventHandler.OnEvent = EwNewSlot( _this, AppModifyPopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );

  /* Call the user defined constructor */
  AppModifyPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::ModifyPopup' */
void AppModifyPopup__ReInit( AppModifyPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppMattsKeyboard__ReInit( &_this->MattsKeyboard );
  AppWritable__ReInit( &_this->Writable );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->CloseButton );
  WidgetSetPushButton__ReInit( &_this->InputChanButton );
  WidgetSetPushButton__ReInit( &_this->OutputChanButton );
  WidgetSetPushButton__ReInit( &_this->WriteButton );
  CoreSystemEventHandler__ReInit( &_this->MeshChangeEventHandler );
}

/* Finalizer method for the class 'App::ModifyPopup' */
void AppModifyPopup__Done( AppModifyPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppModifyPopup );

  /* Finalize all embedded objects */
  AppMattsKeyboard__Done( &_this->MattsKeyboard );
  AppWritable__Done( &_this->Writable );
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->CloseButton );
  WidgetSetPushButton__Done( &_this->InputChanButton );
  WidgetSetPushButton__Done( &_this->OutputChanButton );
  WidgetSetPushButton__Done( &_this->WriteButton );
  CoreSystemEventHandler__Done( &_this->MeshChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ModifyPopup' */
void AppModifyPopup__Mark( AppModifyPopup _this )
{
  EwMarkObject( &_this->MattsKeyboard );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->CloseButton );
  EwMarkObject( &_this->InputChanButton );
  EwMarkObject( &_this->OutputChanButton );
  EwMarkObject( &_this->WriteButton );
  EwMarkObject( _this->device );
  EwMarkObject( _this->modify );
  EwMarkObject( &_this->MeshChangeEventHandler );
  EwMarkObject( _this->write );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppModifyPopup_Init( AppModifyPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* 'C' function for method : 'App::ModifyPopup.ProceedSlot()' */
void AppModifyPopup_ProceedSlot( AppModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->device != 0 )
  {
    XString s;
    XInt32 i;
    EwRetainString( &_this->device->location, _this->Writable.TextEditor.Text.String 
    );

    if ( !EwCompString( EwStringRight( _this->device->location, 1 ), EwLoadString( 
        &_Const0195 )))
    {
      EwRetainString( &_this->device->location, EwStringLeft( _this->device->location, 
      EwGetStringLength( _this->device->location ) - 1 ));
    }

    s = _this->device->location;
    i = 0;

    do
    {
      i = EwStringFind( s, EwLoadString( &_Const0193 ), 0 );

      if ( i >= 0 )
      {
        s = EwStringRemove( s, i, 1 );
        s = EwSetStringChar( s, i, 0x0020 );
      }
    }
    while ( i >= 0 );

    EwRetainString( &_this->device->location, s );

    if ( _this->write == 0 )
    {
      _this->write = EwNewObject( AppUpdateDevicePopup, 0 );
    }

    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->write->HorizontalValueBar, 
    0 );
    WidgetSetPushButton_OnSetLabel( &_this->write->PushButton, EwLoadString( &_Const0049 
    ));
    AppPopup_Show((AppPopup)_this->write, CoreView__GetRoot( _this ));

    if ( !EwCompString( _this->WriteButton.Label, EwLoadString( &_Const0233 )))
    {
      AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), _this->device->unitnum, 
      1, _this->device );
    }
    else
    {
      AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), _this->device->unitnum, 
      0, _this->device );
    }
  }
}

/* 'C' function for method : 'App::ModifyPopup.InputChannels()' */
void AppModifyPopup_InputChannels( AppModifyPopup _this, XObject sender )
{
  AppInputChannels inputs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  inputs = EwNewObject( AppInputChannels, 0 );

  if ( _this->device != 0 )
  {
    inputs->device = _this->device;
    AppInputChannels_OnSetChanIndex( inputs, 0 );
    AppPopup_Show((AppPopup)inputs, CoreView__GetRoot( _this ));
  }
}

/* 'C' function for method : 'App::ModifyPopup.OutputChannels()' */
void AppModifyPopup_OutputChannels( AppModifyPopup _this, XObject sender )
{
  AppOutputChannels outputs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  outputs = EwNewObject( AppOutputChannels, 0 );

  if ( _this->device != 0 )
  {
    outputs->device = _this->device;
    AppOutputChannels_OnSetChanIndex( outputs, 0 );
    AppPopup_Show((AppPopup)outputs, CoreView__GetRoot( _this ));
  }
}

/* 'C' function for method : 'App::ModifyPopup.CancelSlot()' */
void AppModifyPopup_CancelSlot( AppModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::ModifyPopup.OnSetdevice()' */
void AppModifyPopup_OnSetdevice( AppModifyPopup _this, AppDeviceConfig value )
{
  _this->device = value;

  if ( _this->device != 0 )
  {
    AppTextEditor_OnSetString( &_this->Writable.TextEditor, _this->device->location 
    );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->InputChanButton, (XBool)( _this->device->numinputs 
    != 0 ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputChanButton, (XBool)( _this->device->numoutputs 
    != 0 ));
  }
}

/* 'C' function for method : 'App::ModifyPopup.SetFocus()' */
void AppModifyPopup_SetFocus( AppModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler1' 
   receives an event. */
void AppModifyPopup_onEvent( AppModifyPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->device != 0 )
  {
    AppDevice d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), 
      _this->device->unitnum );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->WriteButton, (XBool)( d != 0 ));
  }
}

/* Variants derived from the class : 'App::ModifyPopup' */
EW_DEFINE_CLASS_VARIANTS( AppModifyPopup )
EW_END_OF_CLASS_VARIANTS( AppModifyPopup )

/* Virtual Method Table (VMT) for the class : 'App::ModifyPopup' */
EW_DEFINE_CLASS( AppModifyPopup, AppPopup, "App::ModifyPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppModifyPopup )

/* Initializer for the class 'App::PhoneNumber' */
void AppPhoneNumber__Init( AppPhoneNumber _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreHorizontalList__Init( &_this->HorizontalList, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppPhoneNumber );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0234 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0235 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00A5 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0236 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0237 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorizontalList, _Const0238 );
  CoreHorizontalList_OnSetItemWidth( &_this->HorizontalList, 70 );
  CoreHorizontalList_OnSetNoOfItems( &_this->HorizontalList, 8 );
  CoreHorizontalList_OnSetItemClass( &_this->HorizontalList, EW_CLASS( AppToggleItem 
  ));
  EwRetainString( &_this->Name, EwLoadString( &_Const0167 ));
  EwRetainString( &_this->Number, EwLoadString( &_Const0167 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalList ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->HorizontalList.OnLoadItem = EwNewSlot( _this, AppPhoneNumber_OnLoadItem 
  );
}

/* Re-Initializer for the class 'App::PhoneNumber' */
void AppPhoneNumber__ReInit( AppPhoneNumber _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
  CoreHorizontalList__ReInit( &_this->HorizontalList );
}

/* Finalizer method for the class 'App::PhoneNumber' */
void AppPhoneNumber__Done( AppPhoneNumber _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppPhoneNumber );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );
  CoreHorizontalList__Done( &_this->HorizontalList );

  /* Release all used strings */
  EwReleaseString( &_this->Name );
  EwReleaseString( &_this->Number );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::PhoneNumber' */
void AppPhoneNumber__Mark( AppPhoneNumber _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorizontalList );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppPhoneNumber_UpdateLayout( AppPhoneNumber _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppPhoneNumber_UpdateViewState( AppPhoneNumber _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* This method is called by 'HorizontalList' every time the list loads or updates 
   an item. */
void AppPhoneNumber_OnLoadItem( AppPhoneNumber _this, XObject sender )
{
  XInt32 itemNo;
  AppToggleItem itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->HorizontalList.Item;
  itemView = EwCastObject( _this->HorizontalList.View, AppToggleItem );

  if ( itemView == 0 )
    return;

  WidgetSetToggleButton_OnSetChecked( &itemView->ToggleButton, (XBool)((( _this->BitField 
  >> itemNo ) & 1 ) != 0 ));
}

/* Variants derived from the class : 'App::PhoneNumber' */
EW_DEFINE_CLASS_VARIANTS( AppPhoneNumber )
EW_END_OF_CLASS_VARIANTS( AppPhoneNumber )

/* Virtual Method Table (VMT) for the class : 'App::PhoneNumber' */
EW_DEFINE_CLASS( AppPhoneNumber, CoreGroup, "App::PhoneNumber" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPhoneNumber_UpdateLayout,
  AppPhoneNumber_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppPhoneNumber )

/* Initializer for the class 'App::TextPopup' */
void AppTextPopup__Init( AppTextPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text8, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text10, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text11, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->GreyOutRect, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTextPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0239 );
  CoreRectView__OnSetBounds( &_this->Super1.Rectangle4, _Const023A );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0124 );
  CoreRectView__OnSetBounds( &_this->Text, _Const023B );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const01B6 ));
  ViewsText_OnSetColor( &_this->Text, _Const016D );
  CoreRectView__OnSetBounds( &_this->Text1, _Const023C );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const023D ));
  ViewsText_OnSetColor( &_this->Text1, _Const016D );
  CoreRectView__OnSetBounds( &_this->Text8, _Const023E );
  ViewsText_OnSetString( &_this->Text8, EwLoadString( &_Const023F ));
  ViewsText_OnSetColor( &_this->Text8, _Const016D );
  CoreRectView__OnSetBounds( &_this->Text10, _Const0240 );
  ViewsText_OnSetString( &_this->Text10, EwLoadString( &_Const01B5 ));
  ViewsText_OnSetColor( &_this->Text10, _Const016D );
  CoreRectView__OnSetBounds( &_this->Text11, _Const0241 );
  ViewsText_OnSetString( &_this->Text11, EwLoadString( &_Const0242 ));
  ViewsText_OnSetColor( &_this->Text11, _Const016D );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0243 );
  _this->SlideTouchHandler.SlideHorz = 0;
  _this->SlideTouchHandler.SlideVert = 1;
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0244 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0245 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0246 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0247 );
  _this->SimpleTouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeUp;
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0248 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( AppPhoneNumber 
  ));
  CoreRectView__OnSetBounds( &_this->Text2, _Const0249 );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const024A ));
  ViewsText_OnSetColor( &_this->Text2, _Const016D );
  CoreRectView__OnSetBounds( &_this->Text3, _Const024B );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const024C ));
  ViewsText_OnSetColor( &_this->Text3, _Const016D );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const024D );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 300 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, _this->VerticalList.NoOfItems 
  * _this->VerticalList.ItemHeight );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const024E );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0128 
  ));
  CoreTimer_OnSetPeriod( &_this->Timer, 2500 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const024F );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0250 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const0251 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const0252 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler1, _Const0253 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler1, _Const0254 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, _Const0246 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, _Const0255 );
  CoreRectView__OnSetBounds( &_this->Text4, _Const0256 );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const0257 ));
  ViewsText_OnSetColor( &_this->Text4, _Const016D );
  CoreRectView__OnSetBounds( &_this->GreyOutRect, _Const0258 );
  ViewsRectangle_OnSetColor( &_this->GreyOutRect, _Const0259 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle1 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle2 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle4 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle5 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle6 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle7 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle8 ), -1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->GreyOutRect ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text8, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text10, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text11, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, AppTextPopup_Slide );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppTextPopup_SelectSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppTextPopup_OnLoadItem );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, AppTextPopup_Scroll );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppTextPopup_OK );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppTextPopup_Tick );
  _this->PushButton2.OnRelease = EwNullSlot;
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppTextPopup_AddSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNullSlot;
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppTextPopup_RemoveSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler1.OnPress = EwNewSlot( _this, AppTextPopup_LowLevelTouch 
  );
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));

  /* Call the user defined constructor */
  AppTextPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::TextPopup' */
void AppTextPopup__ReInit( AppTextPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text8 );
  ViewsText__ReInit( &_this->Text10 );
  ViewsText__ReInit( &_this->Text11 );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  ViewsText__ReInit( &_this->Text2 );
  ViewsText__ReInit( &_this->Text3 );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreTimer__ReInit( &_this->Timer );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler1 );
  ViewsText__ReInit( &_this->Text4 );
  ViewsRectangle__ReInit( &_this->GreyOutRect );
}

/* Finalizer method for the class 'App::TextPopup' */
void AppTextPopup__Done( AppTextPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTextPopup );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text8 );
  ViewsText__Done( &_this->Text10 );
  ViewsText__Done( &_this->Text11 );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  ViewsText__Done( &_this->Text2 );
  ViewsText__Done( &_this->Text3 );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreTimer__Done( &_this->Timer );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler1 );
  ViewsText__Done( &_this->Text4 );
  ViewsRectangle__Done( &_this->GreyOutRect );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TextPopup' */
void AppTextPopup__Mark( AppTextPopup _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text8 );
  EwMarkObject( &_this->Text10 );
  EwMarkObject( &_this->Text11 );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->SimpleTouchHandler1 );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->GreyOutRect );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppTextPopup_Init( AppTextPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, AppTextPopup_Refresh ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppTextPopup_OnLoadItem( AppTextPopup _this, XObject sender )
{
  XInt32 itemNo;
  AppPhoneNumber itemView;
  XString number;
  XString name;
  XUInt8 bits;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, AppPhoneNumber );

  if ( itemView == 0 )
    return;

  number = EwLoadString( &_Const025A );
  name = EwLoadString( &_Const025B );
  bits = (XUInt8)EwMathRandInt32( 0, 127 );
  {
    Command cmd;

    cmd.int0 = itemNo;

    if ( Command0( CMD_GET_SMS_NUMBER, &cmd ) == CMD_OK )
    {
        name   = EwNewStringAnsi( (char*) cmd.int1 );
        number = EwNewStringAnsi( (char*) cmd.int2 );
        bits   = cmd.int3;         
    }
  }

  if ( itemNo == _this->VerticalList.SelectedItem )
  {
    ViewsRectangle_OnSetColor( &itemView->Rectangle, _Const025C );
    ViewsText_OnSetColor( &itemView->Text, _Const0139 );
  }
  else
  {
    ViewsRectangle_OnSetColor( &itemView->Rectangle, _Const0139 );
    ViewsText_OnSetColor( &itemView->Text, _Const000E );
  }

  ViewsText_OnSetFont( &itemView->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetString( &itemView->Text, name );
  EwRetainString( &itemView->Name, name );
  EwRetainString( &itemView->Number, number );
  itemView->BitField = bits;
  CoreHorizontalList_InvalidateItems( &itemView->HorizontalList, 0, 6 );
}

/* 'C' function for method : 'App::TextPopup.Slide()' */
void AppTextPopup_Slide( AppTextPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->SlideTouchHandler.Offset.Y 
  );
}

/* 'C' function for method : 'App::TextPopup.Scroll()' */
void AppTextPopup_Scroll( AppTextPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VerticalScrollbar ));
}

/* 'C' function for method : 'App::TextPopup.Tick()' */
void AppTextPopup_Tick( AppTextPopup _this, XObject sender )
{
  AppPhoneNumber r;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->ShowName = (XBool)!_this->ShowName;
  r = EwCastObject( _this->VerticalList.Super1.first, AppPhoneNumber );

  while ( r != 0 )
  {
    if ( _this->ShowName )
    {
      ViewsText_OnSetFont( &r->Text, EwLoadResource( &OldResourcesFontVerdana18, 
      ResourcesFont ));
      ViewsText_OnSetString( &r->Text, r->Number );
    }
    else
    {
      ViewsText_OnSetFont( &r->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
      ResourcesFont ));
      ViewsText_OnSetString( &r->Text, r->Name );
    }

    r = EwCastObject( r->Super3.next, AppPhoneNumber );
  }
}

/* 'C' function for method : 'App::TextPopup.OK()' */
void AppTextPopup_OK( AppTextPopup _this, XObject sender )
{
  XInt32 n;
  AppPhoneNumber sms;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  n = 0;
  sms = EwCastObject( _this->VerticalList.Super1.first, AppPhoneNumber );

  while ( sms != 0 )
  {
    AppToggleItem itm = EwCastObject( sms->HorizontalList.Super1.first, AppToggleItem 
      );
    XInt32 bits = 0;
    XInt32 shift = 0;

    while ( itm != 0 )
    {
      if ( itm->ToggleButton.Checked )
        bits = bits + ( 1 << shift );

      shift = shift + 1;
      itm = EwCastObject( itm->Super3.next, AppToggleItem );
    }

    {
      Command cmd;
      cmd.int0 = n;
      cmd.int1 = bits;

      Command0( CMD_SET_SMS_NUMBER, &cmd );
    }
    n = n + 1;
    sms = EwCastObject( sms->Super3.next, AppPhoneNumber );
  }

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::TextPopup.SelectSlot()' */
void AppTextPopup_SelectSlot( AppTextPopup _this, XObject sender )
{
  XInt32 tapy;
  XInt32 prev;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  tapy = ( _this->SimpleTouchHandler.CurrentPos.Y - _this->VerticalList.Super2.Bounds.Point1.Y 
  ) + WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar );
  prev = _this->VerticalList.SelectedItem;
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, tapy / _this->VerticalList.ItemHeight 
  );

  if ( _this->VerticalList.SelectedItem == prev )
  {
    CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, -1 );
  }

  if ( prev != -1 )
  {
    CoreVerticalList_InvalidateItems( &_this->VerticalList, prev, prev );
  }

  CoreVerticalList_InvalidateItems( &_this->VerticalList, _this->VerticalList.SelectedItem, 
  _this->VerticalList.SelectedItem );
}

/* 'C' function for method : 'App::TextPopup.RemoveSlot()' */
void AppTextPopup_RemoveSlot( AppTextPopup _this, XObject sender )
{
  XInt32 n;
  XInt32 items;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  n = _this->VerticalList.SelectedItem;
  items = 20;

  if ( n != -1 )
  {
    {
      Command cmd;
      cmd.int0 = n;

      Command0( CMD_REMOVE_SMS_NUMBER, &cmd );

      Command0( CMD_GET_NUM_SMS_CONTACTS, &cmd );

      items = cmd.int0;
    }
    CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, items );
    CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
    - 1 );
  }
}

/* 'C' function for method : 'App::TextPopup.AddSlot()' */
void AppTextPopup_AddSlot( AppTextPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->VerticalList.NoOfItems < 30 )
  {
    AppNewNumberPopup p = EwNewObject( AppNewNumberPopup, 0 );
    CoreRoot v;
    p->Super1.Parent = ((AppPopup)_this );
    v = CoreView__GetRoot( _this );

    if ( v != 0 )
    {
      AppPopup_Show((AppPopup)p, v );
      CoreGroup_ObtainFocus((CoreGroup)p );
    }
  }
  else
  {
    AppAccesssPopup ll = EwNewObject( AppAccesssPopup, 0 );
    ViewsText_OnSetString( &ll->Text, EwLoadString( &_Const025D ));
    AppAccesssPopup_Show( ll, CoreView__GetRoot( _this ));
  }
}

/* 'C' function for method : 'App::TextPopup.Refresh()' */
void AppTextPopup_Refresh( AppTextPopup _this, XObject sender )
{
  XInt32 items;
  AppApplication app;
  XInt32 sz;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  items = 20;
  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, (XBool)( app->LevelAccess.AccessLevel 
    >= 3 ));
    CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, (XBool)( app->LevelAccess.AccessLevel 
    < 3 ));
    ViewsRectangle_OnSetVisible( &_this->GreyOutRect, (XBool)( app->LevelAccess.AccessLevel 
    < 3 ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, (XBool)( app->LevelAccess.AccessLevel 
    >= 3 ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, (XBool)( app->LevelAccess.AccessLevel 
    >= 3 ));
  }

  {
    Command cmd;

    Command0( CMD_GET_NUM_SMS_CONTACTS, &cmd );

    items = cmd.int0;
  }
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, items );
  sz = _this->VerticalList.NoOfItems * _this->VerticalList.ItemHeight;

  if ( sz > EwGetRectH( _this->VerticalList.Super2.Bounds ))
  {
    WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, _this->VerticalList.NoOfItems 
    * _this->VerticalList.ItemHeight );
    WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
    _this->VerticalList.Super2.Bounds ));
    CoreGroup__OnSetVisible( &_this->VerticalScrollbar, 1 );
  }
  else
  {
    CoreGroup__OnSetVisible( &_this->VerticalScrollbar, 0 );
  }

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, 0 );
}

/* 'C' function for method : 'App::TextPopup.LowLevelTouch()' */
void AppTextPopup_LowLevelTouch( AppTextPopup _this, XObject sender )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( ap != 0 )
    AppApplication_LowLevel( ap, 3 );
}

/* Variants derived from the class : 'App::TextPopup' */
EW_DEFINE_CLASS_VARIANTS( AppTextPopup )
EW_END_OF_CLASS_VARIANTS( AppTextPopup )

/* Virtual Method Table (VMT) for the class : 'App::TextPopup' */
EW_DEFINE_CLASS( AppTextPopup, AppPopup, "App::TextPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTextPopup )

/* Font resource : 'App::FontVerdanaProSemiBold18' */
EW_DEFINE_FONT_RES( AppFontVerdanaProSemiBold18, 15, 3, 0, 16, 0x001F, 0x0060 )
  EW_GLYPH( 0x001F, 1, -11, 13, 11, 15, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 5, 0x00000115 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -11, 4, 11, 6, 0x00000115 ),             /* '!' */
  EW_GLYPH( 0x0022, 1, -12, 6, 5, 8, 0x0000017F ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -11, 11, 11, 13, 0x000001EA ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -12, 9, 15, 10, 0x000003A0 ),            /* '$' */
  EW_GLYPH( 0x0025, 1, -11, 16, 11, 17, 0x0000056E ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -11, 13, 11, 12, 0x000007D9 ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -12, 3, 5, 5, 0x000009D3 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -12, 6, 15, 7, 0x00000A05 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -12, 6, 15, 7, 0x00000B09 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -12, 8, 7, 10, 0x00000C02 ),             /* '*' */
  EW_GLYPH( 0x002B, 1, -10, 11, 10, 13, 0x00000CE9 ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -2, 5, 5, 6, 0x00000DEA ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -6, 6, 2, 7, 0x00000E37 ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -2, 3, 2, 6, 0x00000E69 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -12, 8, 14, 8, 0x00000E83 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -11, 10, 11, 10, 0x00000F93 ),           /* '0' */
  EW_GLYPH( 0x0031, 1, -11, 8, 11, 10, 0x000010E7 ),            /* '1' */
  EW_GLYPH( 0x0032, 0, -11, 9, 11, 10, 0x000011A0 ),            /* '2' */
  EW_GLYPH( 0x0033, 0, -11, 9, 11, 10, 0x000012F3 ),            /* '3' */
  EW_GLYPH( 0x0034, 0, -11, 10, 11, 10, 0x0000146F ),           /* '4' */
  EW_GLYPH( 0x0035, 1, -11, 8, 11, 10, 0x000015A4 ),            /* '5' */
  EW_GLYPH( 0x0036, 0, -11, 10, 11, 10, 0x000016FA ),           /* '6' */
  EW_GLYPH( 0x0037, 0, -11, 10, 11, 10, 0x00001874 ),           /* '7' */
  EW_GLYPH( 0x0038, 0, -11, 10, 11, 10, 0x000019A8 ),           /* '8' */
  EW_GLYPH( 0x0039, 0, -11, 10, 11, 10, 0x00001B43 ),           /* '9' */
  EW_GLYPH( 0x003A, 2, -8, 3, 8, 6, 0x00001CD1 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -8, 5, 11, 6, 0x00001D20 ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -9, 10, 9, 13, 0x00001DAD ),             /* '<' */
  EW_GLYPH( 0x003D, 1, -7, 10, 5, 13, 0x00001EFF ),             /* '=' */
  EW_GLYPH( 0x003E, 1, -9, 10, 9, 13, 0x00002000 ),             /* '>' */
  EW_GLYPH( 0x003F, 1, -11, 7, 11, 9, 0x0000214C ),             /* '?' */
  EW_GLYPH( 0x0040, 1, -11, 13, 13, 15, 0x0000223B ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -11, 11, 11, 11, 0x000024BE ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -11, 9, 11, 11, 0x0000262A ),            /* 'B' */
  EW_GLYPH( 0x0043, 0, -11, 11, 11, 11, 0x00002787 ),           /* 'C' */
  EW_GLYPH( 0x0044, 1, -11, 11, 11, 12, 0x000028F6 ),           /* 'D' */
  EW_GLYPH( 0x0045, 1, -11, 9, 11, 10, 0x00002A3B ),            /* 'E' */
  EW_GLYPH( 0x0046, 1, -11, 8, 11, 9, 0x00002B81 ),             /* 'F' */
  EW_GLYPH( 0x0047, 0, -11, 11, 11, 12, 0x00002C76 ),           /* 'G' */
  EW_GLYPH( 0x0048, 1, -11, 10, 11, 12, 0x00002E10 ),           /* 'H' */
  EW_GLYPH( 0x0049, 1, -11, 6, 11, 8, 0x00002EE4 ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -11, 7, 11, 8, 0x00002F91 ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -11, 11, 11, 11, 0x00003050 ),           /* 'K' */
  EW_GLYPH( 0x004C, 1, -11, 8, 11, 9, 0x00003195 ),             /* 'L' */
  EW_GLYPH( 0x004D, 1, -11, 12, 11, 14, 0x0000322D ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -11, 10, 11, 12, 0x0000336B ),           /* 'N' */
  EW_GLYPH( 0x004F, 0, -11, 12, 11, 13, 0x00003463 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -11, 9, 11, 10, 0x0000360F ),            /* 'P' */
  EW_GLYPH( 0x0051, 0, -11, 12, 14, 13, 0x00003726 ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -11, 11, 11, 11, 0x0000393E ),           /* 'R' */
  EW_GLYPH( 0x0053, 0, -11, 10, 11, 10, 0x00003A9D ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -11, 10, 11, 10, 0x00003C4A ),           /* 'T' */
  EW_GLYPH( 0x0055, 1, -11, 10, 11, 12, 0x00003D28 ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -11, 11, 11, 11, 0x00003E1B ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -11, 16, 11, 16, 0x00003F78 ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -11, 11, 11, 11, 0x0000416C ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -11, 11, 11, 10, 0x000042F8 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -11, 10, 11, 10, 0x0000441D ),           /* 'Z' */
  EW_GLYPH( 0x005B, 1, -12, 6, 15, 8, 0x00004591 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -12, 8, 14, 8, 0x00004640 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -12, 5, 15, 8, 0x00004750 ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -11, 11, 6, 13, 0x000047E8 ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 11, 2, 10, 0x000048B7 ),              /* '_' */
  EW_GLYPH( 0x0060, 3, -12, 4, 3, 10, 0x00004930 ),             /* '`' */
  EW_GLYPH( 0x0061, 0, -8, 9, 8, 10, 0x0000495E ),              /* 'a' */
  EW_GLYPH( 0x0062, 1, -12, 9, 12, 10, 0x00004A88 ),            /* 'b' */
  EW_GLYPH( 0x0063, 0, -8, 8, 8, 9, 0x00004B91 ),               /* 'c' */
  EW_GLYPH( 0x0064, 0, -12, 9, 12, 10, 0x00004C86 ),            /* 'd' */
  EW_GLYPH( 0x0065, 0, -8, 9, 8, 10, 0x00004D91 ),              /* 'e' */
  EW_GLYPH( 0x0066, 0, -12, 7, 12, 6, 0x00004ED1 ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -8, 9, 11, 10, 0x00004FB0 ),             /* 'g' */
  EW_GLYPH( 0x0068, 1, -12, 8, 12, 10, 0x00005100 ),            /* 'h' */
  EW_GLYPH( 0x0069, 1, -11, 3, 11, 5, 0x000051BE ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -11, 6, 14, 6, 0x00005215 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -12, 9, 12, 9, 0x000052EB ),             /* 'k' */
  EW_GLYPH( 0x006C, 1, -12, 3, 12, 5, 0x000053F7 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -8, 13, 8, 15, 0x0000542A ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -8, 8, 8, 10, 0x0000552F ),              /* 'n' */
  EW_GLYPH( 0x006F, 0, -8, 10, 8, 10, 0x000055C6 ),             /* 'o' */
  EW_GLYPH( 0x0070, 1, -8, 9, 11, 10, 0x000056D3 ),             /* 'p' */
  EW_GLYPH( 0x0071, 0, -8, 9, 11, 10, 0x000057E3 ),             /* 'q' */
  EW_GLYPH( 0x0072, 1, -8, 6, 8, 7, 0x000058F3 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -8, 8, 8, 8, 0x00005961 ),               /* 's' */
  EW_GLYPH( 0x0074, 0, -10, 7, 10, 6, 0x00005A92 ),             /* 't' */
  EW_GLYPH( 0x0075, 1, -8, 8, 8, 10, 0x00005B56 ),              /* 'u' */
  EW_GLYPH( 0x0076, 0, -8, 10, 8, 9, 0x00005BEA ),              /* 'v' */
  EW_GLYPH( 0x0077, 0, -8, 13, 8, 13, 0x00005CE2 ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -8, 10, 8, 9, 0x00005E4E ),              /* 'x' */
  EW_GLYPH( 0x0079, 0, -8, 9, 11, 9, 0x00005F6B ),              /* 'y' */
  EW_GLYPH( 0x007A, 0, -8, 9, 8, 9, 0x0000608F ),               /* 'z' */
  EW_GLYPH( 0x007B, 1, -12, 8, 15, 10, 0x0000619E ),            /* '{' */
  EW_GLYPH( 0x007C, 2, -12, 3, 15, 7, 0x000062D9 ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -12, 8, 15, 10, 0x00006314 ),            /* '}' */
  EW_GLYPH( 0x007E, 1, -7, 11, 5, 13, 0x0000644C ),             /* '~' */

  EW_FONT_PIXEL( AppFontVerdanaProSemiBold18, 0x00006525 )      /* ratio 74.67 % */
    0xF7BDEF71, 0x0DEF7BDE, 0xF7BDEF79, 0x00137BDE, 0x00000000, 0x00000000, 0x80000000,
    0x7BDEF7BC, 0xEE29BDEF, 0xA400011D, 0x57FE1004, 0xA643FFFC, 0xFB9E7DDF, 0xB04619A5,
    0x10832B9C, 0xA97FC243, 0x3D87220B, 0xF0A32940, 0x6B7B9FBF, 0xE5FBC7DD, 0xB7EF2DF3,
    0x18FBE554, 0x5E7AC9F3, 0x49EB53CF, 0x6FDE5BF7, 0xDDF8F7D4, 0x7B8BFBEC, 0x3F659117,
    0x01A862A0, 0xC0003EF0, 0x7FFBF3DA, 0x6A35EBE9, 0xFC678AD5, 0x229DF39E, 0xD8AC4407,
    0xF7A2BFB3, 0x16FCF1CA, 0xF3F7EBA3, 0xF621E033, 0xDFCE7BFF, 0x78D66B1B, 0xBFD1EFD6,
    0x02BF7F33, 0x9CEF8000, 0xD01DD60F, 0x134F5ACF, 0x7CA80D6F, 0x68DE2CDF, 0xCC439810,
    0x1CC08067, 0xF7FEBA3A, 0x37DF2A5F, 0xBE33D72B, 0xB3F45F68, 0xBD3FD3D6, 0x78BF5DE2,
    0x397CE77C, 0x08698657, 0xA613F1D0, 0x333C6021, 0x2FD778AD, 0x8978E81E, 0x982FB45F,
    0x015F9EFB, 0xAEBF1BCF, 0x3556C12F, 0x2AD81633, 0xCF0288C6, 0xD9FFFFCC, 0x370D2201,
    0x5FE1FDD7, 0x821EF9FD, 0xF7F3E61C, 0x3283367D, 0xE22C6676, 0x6FD77BF1, 0xAF83FC44,
    0xDF4FBE73, 0xEEFCEC67, 0x9131C61C, 0x30FFBE92, 0xCD70DC56, 0xFCBC4634, 0x31B0C13C,
    0x62609825, 0x3F1B0C4A, 0xBC46304F, 0x15A93368, 0x07FDD637, 0xBF0FC9EB, 0x8BA622A8,
    0x8508C29F, 0xC3000021, 0x3E0C4464, 0x5F872C45, 0x7E4F5954, 0x5B30B7E0, 0x633C6F88,
    0xFC62DEC7, 0x72FEAA9E, 0xF7EAAAFC, 0xB1FE33E5, 0x885B39AF, 0x03FFA0AF, 0x00001220,
    0x77BDCF00, 0x88DEF7DA, 0xAAA34AAA, 0x2BF7EFD4, 0x05FBF7F7, 0x7B000000, 0x196E7006,
    0xF6694A31, 0x7B979E28, 0x9991BDEF, 0xECAD6299, 0xE0BEE306, 0x16660FE7, 0x3FC0F8CC,
    0xC0556426, 0x059980E7, 0xC4E07C4F, 0xF80AAC84, 0xC164F01C, 0xF9E01F93, 0xA81BF3DD,
    0xFEA7A9EF, 0x6FDFEB49, 0xF1618FC6, 0x4A609257, 0x0C020601, 0x0C94C924, 0xEAF15FC5,
    0xE3F19EDF, 0xFACA9EF9, 0x906FFC27, 0x1AD613BD, 0x0007B9E0, 0x00000000, 0xFBE3EFD4,
    0x15515455, 0xF3DCEF9E, 0xF48CFD05, 0xFFFD9E6C, 0xC1E965FF, 0x0510C020, 0x1BF019AE,
    0xD55F88D5, 0xFD6BB90F, 0xFC633B10, 0x8857BF7E, 0xBF32AAAA, 0xC9BF3DFF, 0xDEB2A2AF,
    0x6FF777E9, 0x30337F4F, 0x9FBBD40C, 0x88E631A7, 0x5FE75811, 0xABC883F3, 0x7D2D81E2,
    0xD3DBF7E7, 0x953E562F, 0xEFB04DF5, 0xC00DF80F, 0xCD602CFB, 0x7BA781FE, 0x0B9BF182,
    0xBBDE62F8, 0x554E7DD5, 0xEB1510D5, 0xAEFDFBF7, 0x000057E7, 0xF7BDEEB0, 0x55591FDE,
    0xBF7EF835, 0x7801AFDF, 0x3C53DDEF, 0x7B78D573, 0xD7BFDD7E, 0xF81E2504, 0xEF7CEF8C,
    0xA9FB715E, 0xE07FCF99, 0x1FFB9DF9, 0x66A7BEF8, 0xBF793E60, 0x3A7E0F77, 0xBEFFA440,
    0x96AA49A7, 0xFEEEC1F5, 0x0F04113C, 0x223C5872, 0x9FDBF474, 0x6B3FFA97, 0xF712DF3E,
    0xBDEF7BDE, 0x06AAAAA1, 0xFDFBF7E2, 0x6013CB7E, 0xAD703454, 0x0688CF04, 0x33300CDA,
    0xD02F681A, 0xF4C40B91, 0xEF7DAC03, 0x9F3B785E, 0xFA65FB27, 0x1167EFBE, 0x17E1E136,
    0xBD6FDFEB, 0x256313D4, 0xBE77EBFC, 0x7C8D5751, 0x460E5B3C, 0xD88D4490, 0xFF4CD7DD,
    0xFBC66B15, 0x7E7BEE62, 0xF3E6FD03, 0xE5C87FD4, 0x5A2B7EFB, 0x060A7C50, 0xFFC31883,
    0x7FF0FF7D, 0x2111E7CC, 0xF1F773BE, 0x7975E300, 0x1FEFEF7E, 0x3E6788AB, 0x7DEE6BF5,
    0x4AD6BDD0, 0x0BDD95AC, 0xBA00FBDC, 0x00256B17, 0x188C3B9C, 0x28F66943, 0xEB1005EA,
    0x4EDDF505, 0xCF7FFD62, 0xBDF2FDF3, 0xC7BFFFAD, 0x57FCF19A, 0xA73C56A2, 0xF7CFA207,
    0x3C27BDAC, 0xFDF33DBF, 0xCEDEF181, 0x7BDEF7B8, 0x739BFDEF, 0x7CE739CE, 0xF7DF7DE2,
    0xE3B7DF7D, 0x7DF7DF7D, 0x39CDB7DF, 0x3E739CE7, 0xEA007BF1, 0xF880AFFB, 0x81BF7D2F,
    0x9EAFFFEC, 0xF7D427BD, 0x78C2F1CF, 0xF58B6677, 0xFEF9F3DF, 0xFF5B4E2B, 0xFEFA83DF,
    0xE77EB09D, 0x9E7BE5EE, 0x7E73EECA, 0x581CCFBF, 0xDD64DA20, 0x2FDB4D9A, 0x0FF7018C,
    0xC0006F71, 0xFCF7FEF8, 0xFFFEB01E, 0xFDFFF673, 0x8D7B7D61, 0xF27DB9C8, 0xD9CEB93D,
    0xCF95BC77, 0x0B1E9E33, 0xBB7B3CF9, 0x0F22FBEE, 0x096004A6, 0x7F6C6230, 0x19E7F7FF,
    0x731ABFB5, 0xCEEF2D66, 0x3DE379CA, 0xBBDEF7FF, 0x333B9F79, 0xDFBC02B2, 0x00F767DE,
    0x501FEFFC, 0x4BF80B29, 0xB1CB107F, 0x151A8AC0, 0xBF8EFE13, 0x2CA2B23F, 0xDCE27C95,
    0x99E3C7C3, 0x65479673, 0x7EFBEF7C, 0x882C7591, 0xDEF7BCE5, 0x640DFFFB, 0xDF07FA95,
    0x0917F7EF, 0x7BE8391E, 0xEEA83CBF, 0x5EC5FE39, 0x81A37DEB, 0xE0CF8032, 0x7A7BBEF7,
    0xFD667319, 0xDCEFD41E, 0x5FE85BF3, 0x3C3D51C9, 0x7FFF9F4B, 0x6167AF17, 0x02E186FC,
    0x26080982, 0x5E0170C0, 0xC3BE42CF, 0xFDF9F4B3, 0x2BFD13FF, 0x7BC6F9E5, 0x2DFBBDEF,
    0xFE723590, 0x3EDFA85E, 0x9AC04E6D, 0x197F007E, 0x02C00580, 0xD0046FE0, 0xEDFA8BD3,
    0xAC83F4B3, 0x78BFF391, 0xDEF7BDEF, 0xAAAAC83B, 0xFBF7EA0A, 0x80097EFD, 0x7FBDEF79,
    0xA1555564, 0xEFDFBF7E, 0xF5000005, 0xBF7EFDFB, 0x2AAAAB24, 0xBDEF7BDE, 0x55564FF7,
    0xFDFBF515, 0xF3002F7E, 0x59077BDE, 0xEFD41555, 0x0025FBF7, 0xC6000000, 0x7767BFF7,
    0x32A3F6B2, 0xBE3AABD7, 0x6F9F6FFF, 0xA781F368, 0x2C101B0D, 0x1BDEF77E, 0x189CF62C,
    0xF17DEB36, 0xE9E00F9A, 0xDFBFFEF8, 0xF51FB581, 0x7DEFDAE4, 0x001F7FE1, 0x79800000,
    0x9109BDEF, 0xFEB01999, 0x007FFFFF, 0x00000000, 0xF7BDEF70, 0x7EE6259D, 0x003EF18F,
    0xF0000000, 0x667DE31E, 0x7B8DB989, 0x9CC47DEF, 0x01DF7C81, 0x00000000, 0xFFBC5230,
    0x19D65FFF, 0x7DEF6E69, 0x200CE751, 0x100DF8BF, 0xF807DE37, 0x6FC09AE7, 0x12AC0D3C,
    0x0BD46F00, 0x9CC5F9AC, 0x01757A80, 0x012F8CD6, 0xBDE388EF, 0x0000002F, 0x00000000,
    0xBF7EA000, 0xAB25EFDF, 0x77BDEAAA, 0xA0FBDF40, 0x0D441311, 0xA37808DE, 0xE4067CC5,
    0x0BC6F1AA, 0x0D67A2FC, 0x03455720, 0x4006A2FC, 0x00001F9E, 0x09EF7800, 0x3F1177BC,
    0x1E014F00, 0x1635B80D, 0x80378DE0, 0x2B01A37C, 0x036803E7, 0x378014F0, 0xFDCEFD40,
    0x2AFF4077, 0x783DAC6B, 0x77FB7C56, 0xF31C3C9E, 0x28F917C1, 0x2C1D941B, 0xC0B06430,
    0x960D8690, 0x6F0B35ED, 0xF159E3E6, 0x8CFFBFDB, 0x9655FE83, 0xDEF78775, 0xC607767B,
    0x3C7F5CAC, 0x146377EF, 0x0E402188, 0x76FDE793, 0x9F31833C, 0xDEF30FEC, 0x000000BD,
    0xEE77EA00, 0x55FE80EE, 0xD49DAE56, 0xCEFF6F8A, 0x3E6B9793, 0x651F22F8, 0x0583B283,
    0x18160C86, 0x72C030D2, 0x9581DE7D, 0xFE27CD31, 0x3E3BBBDF, 0x7353EF7C, 0xFE60BB3C,
    0x804FF4CE, 0x16FBF7BF, 0xCA78EF50, 0xE7BDEF7B, 0x3CAB201B, 0xFDFA84FF, 0x8803C66E,
    0xE034C009, 0x3E7FDF79, 0x7CCE6305, 0xAB6F303E, 0x4E335801, 0x13CADE02, 0x87C72F80,
    0xFFF73BF9, 0x59F7DE4D, 0xA72BD673, 0xD3BFBEFB, 0x48CB0182, 0x6E035BFB, 0x4CFBD3C5,
    0x677FF7F2, 0xF9C85BC4, 0x0E8C619E, 0x7BFBAD20, 0xCF18FFDF, 0x19CE67E8, 0xBDEFFDBD,
    0x6F7BDEF7, 0xAAA31555, 0xC7EFDFDE, 0x007EFDFD, 0x00000000, 0x00000000, 0xE0BBBF00,
    0x00001F7F, 0x00000000, 0xD2070800, 0x8960D6DC, 0xFFEC4731, 0x57FCBDBF, 0xF96FA8E6,
    0xADF60BEE, 0xA88E4163, 0x167C28CA, 0x1F1E3F8F, 0x39918B3F, 0x9F1E2318, 0xF2AE7E0F,
    0xAC9EA3C0, 0xF9F8AC84, 0x0B117F03, 0xF302A158, 0x06F73C6E, 0x7F1255EE, 0x6332528A,
    0x4DB66C50, 0x8A2A3129, 0x95FDB061, 0x89E193FF, 0xB6AD94A2, 0x4620F11A, 0x5D966564,
    0xCB2F9436, 0xD82BFA88, 0xC5654DA6, 0x2D8A1280, 0x5046180A, 0x24F751FC, 0x33513DC6,
    0x6F0E8E0E, 0x99F3A58E, 0xF2B5DE38, 0x7B456307, 0x1461BC03, 0x413186F0, 0x2074FCAD,
    0xE333EF5E, 0xE9672FC3, 0xF279E9AC, 0xDF9D5E25, 0xFF73C1FD, 0x5A0F517E, 0xB2B3578B,
    0x95C8D61E, 0xDED0BC6F, 0x3D426637, 0x8FC0D951, 0x0018201F, 0xC0000000, 0xEF7BDEFF,
    0x55554BBD, 0xBF7F780D, 0x0B196FDF, 0xCF01C574, 0x7F212F8A, 0x9E2702DE, 0x3E31BE05,
    0x20389EB0, 0xBF7F78DA, 0x5591AFDF, 0xDEE23555, 0x7BA21F7B, 0x004AD631, 0x00000000,
    0xBC600000, 0x9CE620EF, 0xC9E05DCF, 0xC0B2780F, 0x0AAC80E7, 0x27826270, 0x8166603E,
    0x155901CF, 0xCC131FE0, 0x059980F8, 0xBDEFFE7E, 0x45EFFFF7, 0x000017AD, 0x00000000,
    0x9EC7F79E, 0x05BBF00F, 0x900DE598, 0xE07F2B1D, 0x33D75F8D, 0x7C79EB31, 0x7E3B29D1,
    0x7B8E2FC4, 0xDEF7BDEF, 0xFBEF9F7B, 0xBEFBEFBE, 0x977D5BEF, 0xB46F97AE, 0xBF3DCFB9,
    0xABB7CCE2, 0x5ADFD4BE, 0xEB12C55F, 0xEC453FF7, 0x2A0FFECE, 0x62C67DEB, 0x1F7CD67A,
    0x17FA3BC6, 0x003BFF0F, 0xF0000000, 0xF0BCE77C, 0xE36627CE, 0xC4D7BFDB, 0x00008964,
    0xBFBA08CA, 0x3CF1179F, 0x7E783DF9, 0xF5A6FCE7, 0xCFE6B53D, 0xFFBDF7EB, 0x05078477,
    0x78614230, 0x8EFF6F7D, 0xAE6B3EF5, 0x0FEEB01F, 0xCC000000, 0xF31BDDFF, 0x6899F31D,
    0x8C7EFBDF, 0x600C0288, 0xE74C01C8, 0x39DE35FD, 0x7E782E56, 0xF58AFCE7, 0xDF9F7EAD,
    0xAB9EC6F0, 0xDEE223BD, 0xEF720AFB, 0x223BF7BD, 0xF0C6318D, 0xBF5CF7FA, 0xBE67BEB6,
    0x7DA9FC5F, 0xF65F90CF, 0x6B589E1B, 0x9DE0E3A5, 0x30F6BEFA, 0x7E3CF6E6, 0x000003EF,
    0xFFCC0000, 0x99FDDFDD, 0xB42CD66F, 0x8CBDF7EF, 0x490000F0, 0xF5DC7882, 0xE33DF8BD,
    0xCEF88535, 0xF67BF8F9, 0xD315BEBB, 0x1D9EBAB4, 0x0000FBFF, 0x3DF20000, 0x8D7A0BE7,
    0xFE759A78, 0x0FE7F14B, 0xC0000000, 0xE755BEFF, 0x5DDFADFD, 0xFF000000, 0x789550BB,
    0xDEE78F7F, 0xC81D58FB, 0x00000035, 0xFDE78000, 0x3558D465, 0x07DFF8BE, 0x00000000,
    0xF80FBEC4, 0x7E307E8F, 0x55F82D63, 0x0B991836, 0x607E89F4, 0x00DF9F8C, 0xDF89C74F,
    0x0000007D, 0xF3EFFC00, 0xFFD6D39D, 0x1ADF92FE, 0xA8AFFEB1, 0x1FFFFE97, 0x8A7FFCF3,
    0x00A4BF87, 0x00000000, 0x5DFF8000, 0xBA1F39DF, 0x9F4D3C46, 0xFE4832FF, 0x00000026,
    0x9EEFCF00, 0x9EFAC0DF, 0x5E2ECF59, 0x6D6BF7FF, 0x01960E44, 0x964C8C80, 0xDFB75E21,
    0xD637ACD6, 0xDFF9767A, 0x42F39DF5, 0xE36627CF, 0xC4D7BFDB, 0x00008964, 0xF7DC1196,
    0x3D562F6B, 0xFF383DF9, 0x00001FBB, 0xFEEFFD60, 0xF1EAD7DD, 0xEFAF133C, 0x64463F7B,
    0x0E430001, 0x7EFFF1E0, 0x9CAA6F8D, 0x1EF39EF0, 0xDFF80000, 0xCF47E7D9, 0x3FFE7581,
    0x00000036, 0xFFEE77E4, 0x7EF5D8CB, 0xB9195ACF, 0xC8D7FE9E, 0xC23D7E71, 0x3F6B9AEE,
    0xB7FBEB11, 0xE67EFF5B, 0xF7D557B6, 0xEF7A77AE, 0xFA9DE002, 0x98C3D8DE, 0xBDF8F3D3,
    0xB800006F, 0x0BF7CC70, 0xFFD39A6B, 0x03FB9E0E, 0x08000000, 0xF7FA5245, 0x9E27DE6F,
    0xA1FBACD5, 0xC154DFEE, 0xA62789F1, 0x3F1C98A8, 0x3950562B, 0x9F07DFC6, 0x2A6031AE,
    0x4C47881F, 0xFBAC9DF4, 0x2EDDF752, 0x2BFDB15B, 0xA1CCA896, 0xE58C54A2, 0xB61E33F5,
    0xA7AA8FFA, 0xF3DF966C, 0x21EBCFF3, 0xA94788C6, 0x948CFC4C, 0x2738C3C3, 0x746BEF79,
    0xCBD6731C, 0xF9D7E39C, 0x4E2A3BC1, 0xF80F0440, 0xDE07A3B2, 0x138BEB9A, 0x5AAF1CE6,
    0x87F759F9, 0x05467BBA, 0x8A6517C7, 0x99F5E98A, 0xC7231931, 0x64E7C3E7, 0x0BA46625,
    0x3E502C96, 0xF04C64F0, 0xF7B8815A, 0x732F7BDE, 0x788619CE, 0x1FE457DF, 0x981B8CD6,
    0xB544FF1D, 0xC8BF206F, 0x11BEFBFF, 0x139CE721, 0x78BEE7BC, 0x947F58E7, 0x009485DB,
    0x67E20210, 0xF59E7FE1, 0x40CF29E2, 0xE0BCBEFF, 0x90800031, 0xC1F7DCA0, 0xC7B98E6F,
    0x000001FD, 0xBBF00000, 0xB1ACE1A7, 0x051F4F1A, 0x88800052, 0x01BC5401, 0x87E79CDF,
    0xE4E06A51, 0x6644D7EF, 0xF5824001, 0xC73D851E, 0xE7FEA17C, 0xE2BB9E0B, 0xA4FE78CB,
    0x33EF315C, 0xFE3ADB5E, 0x556F31BE, 0xD4BFC986, 0x0000000B
EW_END_OF_FONT_RES( AppFontVerdanaProSemiBold18 )

/* Table with links to derived variants of the font resource : 'App::FontVerdanaProSemiBold18' */
EW_RES_WITHOUT_VARIANTS( AppFontVerdanaProSemiBold18 )

/* Font resource : 'App::FontVerdanaProSemiBold20' */
EW_DEFINE_FONT_RES( AppFontVerdanaProSemiBold20, 17, 3, 0, 16, 0x001F, 0x007D )
  EW_GLYPH( 0x001F, 2, -13, 13, 13, 17, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 6, 0x00000139 ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -12, 3, 12, 7, 0x00000139 ),             /* '!' */
  EW_GLYPH( 0x0022, 1, -13, 7, 5, 9, 0x00000196 ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -12, 12, 12, 14, 0x00000207 ),           /* '#' */
  EW_GLYPH( 0x0024, 1, -13, 10, 16, 11, 0x000003EC ),           /* '$' */
  EW_GLYPH( 0x0025, 1, -12, 18, 12, 20, 0x000005E0 ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -12, 15, 12, 14, 0x00000897 ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -13, 3, 5, 5, 0x00000AEE ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -13, 7, 16, 8, 0x00000B27 ),             /* '(' */
  EW_GLYPH( 0x0029, 1, -13, 7, 16, 8, 0x00000C40 ),             /* ')' */
  EW_GLYPH( 0x002A, 1, -13, 9, 8, 11, 0x00000D56 ),             /* '*' */
  EW_GLYPH( 0x002B, 1, -11, 12, 12, 14, 0x00000E5D ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 6, 6, 7, 0x00000F6A ),               /* ',' */
  EW_GLYPH( 0x002D, 1, -6, 6, 3, 8, 0x00000FCF ),               /* '-' */
  EW_GLYPH( 0x002E, 2, -3, 3, 3, 7, 0x00001013 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -13, 9, 16, 9, 0x00001034 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -12, 11, 12, 11, 0x00001179 ),           /* '0' */
  EW_GLYPH( 0x0031, 1, -12, 9, 12, 11, 0x00001312 ),            /* '1' */
  EW_GLYPH( 0x0032, 1, -12, 9, 12, 11, 0x000013D2 ),            /* '2' */
  EW_GLYPH( 0x0033, 0, -12, 11, 12, 11, 0x00001544 ),           /* '3' */
  EW_GLYPH( 0x0034, 0, -12, 11, 12, 11, 0x00001702 ),           /* '4' */
  EW_GLYPH( 0x0035, 1, -12, 10, 12, 11, 0x0000183B ),           /* '5' */
  EW_GLYPH( 0x0036, 0, -12, 11, 12, 11, 0x000019BF ),           /* '6' */
  EW_GLYPH( 0x0037, 1, -12, 10, 12, 11, 0x00001B89 ),           /* '7' */
  EW_GLYPH( 0x0038, 0, -12, 11, 12, 11, 0x00001CC6 ),           /* '8' */
  EW_GLYPH( 0x0039, 0, -12, 11, 12, 11, 0x00001EAC ),           /* '9' */
  EW_GLYPH( 0x003A, 2, -9, 3, 9, 7, 0x00002080 ),               /* ':' */
  EW_GLYPH( 0x003B, 0, -9, 6, 12, 7, 0x000020E1 ),              /* ';' */
  EW_GLYPH( 0x003C, 1, -11, 12, 11, 14, 0x00002195 ),           /* '<' */
  EW_GLYPH( 0x003D, 2, -8, 11, 6, 14, 0x0000234A ),             /* '=' */
  EW_GLYPH( 0x003E, 2, -11, 11, 11, 14, 0x00002478 ),           /* '>' */
  EW_GLYPH( 0x003F, 1, -12, 9, 12, 10, 0x00002621 ),            /* '?' */
  EW_GLYPH( 0x0040, 1, -12, 15, 14, 17, 0x00002763 ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -12, 13, 12, 12, 0x00002A6A ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -12, 11, 12, 12, 0x00002C1B ),           /* 'B' */
  EW_GLYPH( 0x0043, 1, -12, 11, 12, 12, 0x00002DA7 ),           /* 'C' */
  EW_GLYPH( 0x0044, 1, -12, 12, 12, 14, 0x00002F61 ),           /* 'D' */
  EW_GLYPH( 0x0045, 1, -12, 10, 12, 12, 0x000030C8 ),           /* 'E' */
  EW_GLYPH( 0x0046, 1, -12, 9, 12, 10, 0x000031D7 ),            /* 'F' */
  EW_GLYPH( 0x0047, 1, -12, 12, 12, 14, 0x000032B2 ),           /* 'G' */
  EW_GLYPH( 0x0048, 1, -12, 11, 12, 13, 0x000034A3 ),           /* 'H' */
  EW_GLYPH( 0x0049, 1, -12, 7, 12, 9, 0x00003584 ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -12, 8, 12, 9, 0x0000364A ),             /* 'J' */
  EW_GLYPH( 0x004B, 1, -12, 12, 12, 13, 0x0000372A ),           /* 'K' */
  EW_GLYPH( 0x004C, 1, -12, 9, 12, 10, 0x000038A8 ),            /* 'L' */
  EW_GLYPH( 0x004D, 1, -12, 13, 12, 16, 0x0000393C ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -12, 11, 12, 13, 0x00003A8B ),           /* 'N' */
  EW_GLYPH( 0x004F, 1, -12, 13, 12, 14, 0x00003BB1 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -12, 10, 12, 11, 0x00003D97 ),           /* 'P' */
  EW_GLYPH( 0x0051, 1, -12, 13, 16, 14, 0x00003EB4 ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -12, 12, 12, 12, 0x0000412A ),           /* 'R' */
  EW_GLYPH( 0x0053, 0, -12, 11, 12, 12, 0x000042B5 ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -12, 12, 12, 12, 0x000044BE ),           /* 'T' */
  EW_GLYPH( 0x0055, 1, -12, 11, 12, 13, 0x000045AB ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -12, 12, 12, 12, 0x000046BE ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -12, 18, 12, 18, 0x0000484A ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -12, 12, 12, 12, 0x00004A85 ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -12, 12, 12, 12, 0x00004C48 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 1, -12, 10, 12, 12, 0x00004DA0 ),           /* 'Z' */
  EW_GLYPH( 0x005B, 2, -13, 6, 16, 9, 0x00004F08 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -13, 9, 16, 9, 0x00004FC4 ),             /* '\' */
  EW_GLYPH( 0x005D, 1, -13, 6, 16, 9, 0x00005105 ),             /* ']' */
  EW_GLYPH( 0x005E, 1, -12, 12, 7, 14, 0x000051BE ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 1, 12, 2, 12, 0x000052BB ),              /* '_' */
  EW_GLYPH( 0x0060, 3, -14, 5, 3, 11, 0x00005335 ),             /* '`' */
  EW_GLYPH( 0x0061, 0, -9, 10, 9, 11, 0x00005372 ),             /* 'a' */
  EW_GLYPH( 0x0062, 1, -13, 10, 13, 11, 0x000054D3 ),           /* 'b' */
  EW_GLYPH( 0x0063, 0, -9, 9, 9, 10, 0x00005607 ),              /* 'c' */
  EW_GLYPH( 0x0064, 0, -13, 10, 13, 11, 0x0000572F ),           /* 'd' */
  EW_GLYPH( 0x0065, 0, -9, 10, 9, 11, 0x0000586C ),             /* 'e' */
  EW_GLYPH( 0x0066, 0, -13, 8, 13, 7, 0x000059EA ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -9, 10, 13, 11, 0x00005ADB ),            /* 'g' */
  EW_GLYPH( 0x0068, 1, -13, 10, 13, 11, 0x00005C88 ),           /* 'h' */
  EW_GLYPH( 0x0069, 1, -12, 3, 12, 5, 0x00005D84 ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -12, 7, 16, 6, 0x00005DCF ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -13, 10, 13, 11, 0x00005EB9 ),           /* 'k' */
  EW_GLYPH( 0x006C, 1, -13, 3, 13, 5, 0x00005FEB ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -9, 15, 9, 17, 0x00006021 ),             /* 'm' */
  EW_GLYPH( 0x006E, 1, -9, 9, 9, 11, 0x00006173 ),              /* 'n' */
  EW_GLYPH( 0x006F, 0, -9, 11, 9, 11, 0x00006237 ),             /* 'o' */
  EW_GLYPH( 0x0070, 1, -9, 10, 12, 11, 0x00006380 ),            /* 'p' */
  EW_GLYPH( 0x0071, 0, -9, 10, 12, 11, 0x000064CA ),            /* 'q' */
  EW_GLYPH( 0x0072, 1, -9, 7, 9, 8, 0x00006618 ),               /* 'r' */
  EW_GLYPH( 0x0073, 0, -9, 9, 9, 10, 0x000066B2 ),              /* 's' */
  EW_GLYPH( 0x0074, 0, -12, 7, 12, 7, 0x0000681C ),             /* 't' */
  EW_GLYPH( 0x0075, 1, -9, 9, 9, 11, 0x000068EC ),              /* 'u' */
  EW_GLYPH( 0x0076, 0, -9, 11, 9, 11, 0x0000699C ),             /* 'v' */
  EW_GLYPH( 0x0077, 0, -9, 15, 9, 15, 0x00006ABD ),             /* 'w' */
  EW_GLYPH( 0x0078, 0, -9, 11, 9, 11, 0x00006C63 ),             /* 'x' */
  EW_GLYPH( 0x0079, 0, -9, 11, 12, 11, 0x00006DBE ),            /* 'y' */
  EW_GLYPH( 0x007A, 0, -9, 10, 9, 10, 0x00006F21 ),             /* 'z' */
  EW_GLYPH( 0x007B, 1, -13, 9, 16, 11, 0x00007052 ),            /* '{' */
  EW_GLYPH( 0x007C, 3, -13, 3, 16, 8, 0x000071D2 ),             /* '|' */
  EW_GLYPH( 0x007D, 1, -13, 9, 16, 11, 0x00007211 ),            /* '}' */
  EW_GLYPH( 0x007E, 1, -8, 12, 5, 14, 0x0000738E ),             /* '~' */
  EW_GLYPH( 0x00A0, 0, 0, 0, 0, 6, 0x0000747C ),
  EW_GLYPH( 0x00A1, 2, -12, 3, 12, 7, 0x0000747C ),
  EW_GLYPH( 0x00A2, 1, -12, 9, 15, 11, 0x000074D4 ),
  EW_GLYPH( 0x00A3, 1, -12, 10, 12, 11, 0x0000764E ),
  EW_GLYPH( 0x00A4, 1, -10, 9, 8, 11, 0x000077AD ),
  EW_GLYPH( 0x00A5, 0, -12, 11, 12, 11, 0x000078CF ),
  EW_GLYPH( 0x00A6, 3, -13, 3, 16, 8, 0x00007AA4 ),
  EW_GLYPH( 0x00A7, 1, -12, 9, 15, 11, 0x00007AFE ),
  EW_GLYPH( 0x00A8, 2, -13, 7, 2, 11, 0x00007D33 ),
  EW_GLYPH( 0x00A9, 1, -12, 15, 14, 17, 0x00007D5B ),
  EW_GLYPH( 0x00AA, 1, -12, 7, 8, 9, 0x00008074 ),
  EW_GLYPH( 0x00AB, 1, -10, 10, 9, 13, 0x00008160 ),
  EW_GLYPH( 0x00AC, 1, -7, 12, 6, 14, 0x000082CD ),
  EW_GLYPH( 0x00AD, 1, -6, 6, 3, 8, 0x00008398 ),
  EW_GLYPH( 0x00AE, 1, -12, 15, 14, 17, 0x000083DC ),
  EW_GLYPH( 0x00AF, 0, -15, 12, 2, 12, 0x000086CD ),
  EW_GLYPH( 0x00B0, 1, -12, 8, 6, 10, 0x00008752 ),
  EW_GLYPH( 0x00B1, 1, -13, 12, 12, 14, 0x00008805 ),
  EW_GLYPH( 0x00B2, 1, -12, 8, 8, 10, 0x0000897A ),
  EW_GLYPH( 0x00B3, 1, -12, 8, 8, 10, 0x00008A5C ),
  EW_GLYPH( 0x00B4, 3, -14, 5, 3, 11, 0x00008B5B ),
  EW_GLYPH( 0x00B5, 1, -9, 10, 12, 11, 0x00008B99 ),
  EW_GLYPH( 0x00B6, 1, -12, 9, 15, 11, 0x00008C84 ),
  EW_GLYPH( 0x00B7, 1, -7, 4, 3, 6, 0x00008D8E ),
  EW_GLYPH( 0x00B8, 3, 0, 5, 4, 11, 0x00008DA9 ),
  EW_GLYPH( 0x00B9, 2, -12, 6, 8, 10, 0x00008DF1 ),
  EW_GLYPH( 0x00BA, 1, -12, 8, 8, 10, 0x00008E75 ),
  EW_GLYPH( 0x00BB, 2, -10, 10, 9, 13, 0x00008F5E ),
  EW_GLYPH( 0x03A9, 0, -12, 14, 12, 14, 0x000090BA ),

  EW_FONT_PIXEL( AppFontVerdanaProSemiBold20, 0x000092B9 )      /* ratio 72.15 % */
    0xBDEF7BFF, 0xEF7BDEF7, 0xDEF7BEDF, 0x1BBDEF7B, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xDEF7BDF6, 0xFEDDEF7B, 0x02613FF7, 0x3DE08909, 0xDF46CFBD, 0x8BEDDF9F,
    0x321A5370, 0x2B962384, 0xC8FBC82C, 0xA529413B, 0x67611EC0, 0x8CFBDEF2, 0x7FBC9F7B,
    0x4F669EFF, 0x1D6A7FB3, 0x135EAEBD, 0x067611FF, 0x56B2AD63, 0x3BAA5AC5, 0x6E8C7746,
    0x5F73B6EB, 0x11EC5EE7, 0x14F008F6, 0x01B88055, 0xBAEFA800, 0xEFD61DFB, 0xBCB39949,
    0xECFFDB7E, 0xE5181181, 0x077EC7D5, 0x9CA4F7EB, 0xDFDF517B, 0xFA8178F7, 0x8F01E889,
    0xF6CFB58C, 0x7DEBC5FF, 0xBFCF90C6, 0xDC7FEFCC, 0x0000006F, 0x1BFEFFD6, 0xD3C1FCF2,
    0xBF0B5A63, 0xDEFD7068, 0x3C739363, 0xF2694C20, 0x694C206A, 0x5C05551A, 0xAED8EFBF,
    0x1FBB9EF6, 0x5AC78F4F, 0x37C678CF, 0x586FC9F3, 0x6F6FFBFF, 0x57BFB2B4, 0x8CAC7301,
    0x7E01D248, 0x749222D1, 0x2837CAC0, 0x20ABDFFF, 0xCDF858DE, 0xF20DF951, 0x1BF3DFFD,
    0x7E73DC80, 0x5813FD4F, 0x513E7DE1, 0x0F253040, 0x9E6F8F50, 0x45F801E8, 0xF71AF6BC,
    0x278DC606, 0x270167F2, 0xF98BEF9E, 0xF488221B, 0xB5EB3B57, 0xB90BE110, 0x79685C33,
    0xD33FEF7F, 0xCF7F30BB, 0x7FDEB5A8, 0xFFBACFEB, 0x232C5330, 0x1FDCF21C, 0x398FE44E,
    0x833CFC1C, 0x144A0E91, 0x02C212FE, 0x12905840, 0xBA5428B6, 0x3581A9F0, 0x3F99381C,
    0xDAA36E75, 0x42F2CC2A, 0xFC3189CB, 0x17F03CA1, 0x30004989, 0xA245FC09, 0x41C3183C,
    0x5E5587CB, 0xE205D5EA, 0x102FE40E, 0xA779CD5F, 0x7FF595DA, 0x2773EF5F, 0xAFBFFA80,
    0xE739DCF9, 0x32BB7E9D, 0x0AF8817F, 0xDE0013D4, 0x0000012F, 0xBDC60000, 0xEF7DA6F7,
    0xDC60017D, 0xF7DA6F7B, 0x000017DE, 0xFBC00000, 0x3FDDF025, 0x988C8FCA, 0x2F1D8994,
    0xBDFF82AA, 0x9F605EF7, 0xFFF9CE73, 0xCC00333B, 0x077F01FB, 0x3F02CA8C, 0xE07D300F,
    0x1C704A89, 0xF80F1590, 0x81F1E04C, 0xFC704ACA, 0xC1313C41, 0x0FCF8134, 0x88018E54,
    0x97CF7FF7, 0xE3333D88, 0xE33783D9, 0x2F193FFF, 0x53E2958F, 0x32218BA4, 0x00045818,
    0xA422C482, 0x63D22183, 0xDE29F90D, 0x67FFFD8C, 0x6667B134, 0xDE613B3C, 0x17EDFC8B,
    0xDC600D44, 0x0000013B, 0x00000000, 0xDC9DEE30, 0x778C00BB, 0x7C3BBB9F, 0xFEB18473,
    0x9FF3ED62, 0x223DD3C6, 0x0C98247F, 0xAF828D70, 0xC4F7C2E2, 0x27BF107F, 0x7AEC60F7,
    0x9E9FE276, 0x01BDEF73, 0xDCFBBC60, 0x1CF42BF3, 0x1937EA21, 0x7FDEFFEF, 0x6499E8FA,
    0x0F967801, 0x6F8DFBDC, 0x05D94C82, 0xF95BFFFE, 0x88C5FC01, 0x13F209EF, 0xBDCEF9E9,
    0x788DE1FF, 0xB7E7C92B, 0x0FF73C80, 0x2F800DC4, 0x6F56F00B, 0x80B9CD60, 0xC605EBA7,
    0x1500FC6F, 0xF2DBDEE3, 0xF75800BE, 0xDE5B7BDE, 0x78000017, 0xDEF7BDEE, 0xEE0007FB,
    0x01FEF7BD, 0xEFCF7380, 0xD4A78C41, 0x7FB39ED7, 0x006653BF, 0xC4102457, 0x46BC60F7,
    0xFFFEEFAE, 0x4FD5C47B, 0x07758E66, 0xFF73EF44, 0x18D77503, 0x3C5F1039, 0x833FFFE7,
    0xE00BF237, 0xFDFFDEB1, 0x353D222F, 0xFD07FB33, 0x1AA7FDFF, 0x08CC7C08, 0xC9996007,
    0xD88F4A27, 0x88753DBF, 0xF5951AFF, 0xF7BDEE9B, 0x03EF7BDE, 0xDEF7BDC0, 0xE30288FB,
    0x31AE01D1, 0xE05E1CC1, 0xA9D01EA7, 0x80734E41, 0xF181F88E, 0xB95C1378, 0xDFFBE300,
    0xF6789BF3, 0x1FBD5233, 0x67FF71AF, 0xF82B027A, 0x27ED4FC3, 0x35EB0EAF, 0x62F57FBE,
    0xA13D62FC, 0xFDBE4E5F, 0x233E699D, 0x1C99340D, 0xCF4C464C, 0x53DBFDF9, 0xA8D4AFDE,
    0xFFBE43EF, 0xD8C4BE7B, 0x3D9E3333, 0xFFFF91B8, 0xF0E57119, 0x1919F14B, 0xE11AC3C0,
    0x9D53058F, 0xFA11FEDF, 0xC9ACF11D, 0x7E7BEE64, 0xE88248C3, 0xFFE71347, 0x42DE2B3F,
    0x27B98E66, 0xE647FBBF, 0xE03FFF7C, 0x2732FFFD, 0x803FDDF8, 0xFFF789CC, 0xF77C0003,
    0x2323F28F, 0xC7626526, 0xC000AA8B, 0xD9E006F8, 0xFEB101FB, 0x8C9588DF, 0xF78E76F7,
    0xE9EDF874, 0x4A227BD9, 0x3100DF7C, 0x07BF7E23, 0xFA8AEF78, 0xFA202BFE, 0xDF7D99BC,
    0xABFFF300, 0xDFA80998, 0xBDEFFC7E, 0xEF7BDEF7, 0x99999998, 0xFFF7E999, 0xFFFFFFFF,
    0x001FFFFF, 0xFFFFFDF8, 0xFFFFFFFF, 0xCCCCC7FF, 0xBF4CCCCC, 0xFFBE6009, 0xB32FC015,
    0xFF309BEF, 0xFFF98ABF, 0x3FEFD406, 0x407BD9E3, 0x828CB7BE, 0xA0E4BB58, 0xBE39DBBE,
    0x7BFDCD7F, 0xFC3F7B3C, 0x0DFBAC46, 0x00E9EF98, 0xF3DFFBEA, 0x8A4FB87B, 0xBBFD96FA,
    0x2AD794F7, 0x1AE008E2, 0x8D13DF10, 0x2FF19F79, 0x00F678DC, 0x3FDBF006, 0x002FDDE0,
    0xF73BE780, 0xDC8056FC, 0xB7F6FCBF, 0x7710B77F, 0x6B51AEDD, 0x8BF06FCF, 0xFB39F45F,
    0x78D75DBE, 0xF1232F5A, 0x3328AC8E, 0x463FFFFE, 0x788C79D4, 0x00023006, 0x9E91E70C,
    0x2A311130, 0xFFDC5446, 0xA8BF59E7, 0xDA2BED51, 0x7DE5E7E8, 0xFF9DF8BE, 0x45DEF7BA,
    0x1AE9D7FE, 0xFC601F35, 0xFBFB7C7B, 0xEF73C006, 0x06A1C00F, 0x01F84A20, 0xE026D1A6,
    0x0788CDF3, 0x1D34C654, 0x953E2C70, 0xFDEF3288, 0x644661F3, 0x9F07A666, 0xFFFFFFF9,
    0x7E919657, 0xC9F1C390, 0x789E7E01, 0xFEF7BDEE, 0x233201BF, 0xFFC27F9F, 0x80515E7F,
    0x272BC005, 0x1E577BDC, 0x7233E730, 0x6FDF782F, 0x1F809D2F, 0xF0B2F00B, 0x63CFFFFF,
    0xBD533226, 0xEE7DAC2F, 0xF8C2B7FF, 0xDD5908F7, 0x7FFA3271, 0xA6F0EFFE, 0xB9C8CADF,
    0x300F92BF, 0x80000986, 0x7C940261, 0x6FD37C80, 0xBF7E7CA5, 0xBFFD1938, 0xBB18AFFF,
    0x7DE7C847, 0x3DEF7B9F, 0x31001DFB, 0xB9C0FEE6, 0x0F9E57E7, 0x6795FA88, 0x30053400,
    0x30000038, 0x03CD0038, 0x2665D9E2, 0xB0DF3DCE, 0xFAC6205E, 0xF7BDCF37, 0x02EF7BDE,
    0x7BDEE700, 0x000002EF, 0xBDEF7B9C, 0xBDCE0001, 0x0000DEF7, 0xEF7B9C00, 0xE7800BBD,
    0xBDEF7BDE, 0xBDEE0017, 0x00005EF7, 0xF7BDEF70, 0xEF7B8001, 0x00000FBD, 0xFE600000,
    0x07BB3DCE, 0xC42B7FF9, 0x8CDC3B58, 0x57B3DCF7, 0x219BE958, 0x19F89F46, 0xF83C3005,
    0x03EF7BDF, 0x7860CCCC, 0x1FFFFBF0, 0x5800C67E, 0x4C60FFE9, 0xDEEF8CDC, 0x7FF913BB,
    0xFB58C42B, 0xF80DEE79, 0x00001FDD, 0xE0000000, 0x016F7BDC, 0xCE73EC00, 0x11119029,
    0x00000000, 0xDEF7BFF0, 0x191266BB, 0x3FEB3FBF, 0x00000001, 0xFEFC0000, 0x499CFFAC,
    0xBDEF7064, 0xE0999077, 0x00006FFF, 0xC0000000, 0x13E348C0, 0x1EEFFDF9, 0xE314DC56,
    0x06F73D7D, 0x201FB9C6, 0x407CF1FF, 0x880FA8DC, 0x180FD67F, 0xE01F18DF, 0x2A006F2D,
    0x3BD012FC, 0xF33006E2, 0x5403FC8B, 0x5CC01F1B, 0xC7E8069E, 0x01BDCF9A, 0x00000000,
    0x00000000, 0xDCE00000, 0xF005EF7B, 0xB8C1BBDC, 0x341462F7, 0xE40A31A0, 0x407B4518,
    0x3F9EA36B, 0xBDAA31A8, 0x0D56F680, 0x00D48D40, 0x3C00355E, 0x000007F7, 0x7DEE7800,
    0xCC7FB9E1, 0x8805C001, 0xDA300B18, 0xF159801B, 0x79E37803, 0x00F53900, 0xE00FE674,
    0x00F50095, 0xF6B00BF0, 0xF213BBB9, 0xB58C23DF, 0x77F3370B, 0x86F8AEEF, 0x7E314E95,
    0x0C67ED19, 0x1E18A8F0, 0x80024FE0, 0x64FE01E1, 0x2A3C0319, 0xFC8A74DE, 0xF32716A5,
    0xE2BFCE77, 0x43DD8C1D, 0xE793DCE4, 0x5ECF7BDE, 0x0DE8D320, 0x58DA7FFB, 0x00074AC0,
    0xFD8DA560, 0x9079ED3F, 0xCE0FDEA9, 0x0009BF3D, 0xB5800000, 0x909DDDCF, 0xAC611EFF,
    0xBF99B85D, 0x37C5777B, 0xF18A74AC, 0x319FB445, 0xF48AA620, 0x00327F00, 0x24807860,
    0x67E018CB, 0xE26E1BC4, 0x63FC5A1D, 0xD33EF7FC, 0x72BB8C5B, 0x213DA88C, 0x3D877FFA,
    0x007E3C00, 0xFF9C62FC, 0x11BF2009, 0xDEF73D23, 0x00DFFF7B, 0x1FF3E532, 0x2BEFFF60,
    0x0259805E, 0xCF0012C0, 0xFBF7C170, 0xAA03E67F, 0x73817AD2, 0xBE00B31F, 0x7E00AF8A,
    0xFC015F15, 0x7C837C46, 0xEFECF7FF, 0x391CF6A1, 0x17C2F9F2, 0xE7FFFCF3, 0xA17088F7,
    0x6BD088BE, 0xDE88BF00, 0x6782B7E7, 0x6FAA21AF, 0xF7EFBD92, 0xAF9E0688, 0x40CFF8C4,
    0xCF7C863E, 0xC7FFFFFF, 0xC737C778, 0xC77A31C8, 0xEF7BDEFF, 0x07DEF7BD, 0xDEF7FE00,
    0x1F7BDEE6, 0x00000000, 0x00000000, 0x00000000, 0x05EF7800, 0x0003FBFF, 0x00000000,
    0x00200000, 0x1A440CB8, 0xF8C4770F, 0x3EC6D9D8, 0x7EB2CCBB, 0xD7BEA215, 0xEFC0FF7B,
    0x20B2FEFE, 0x6074A9CA, 0xE0A7C78A, 0x8788F267, 0x39647E1C, 0x51C0C67C, 0x13C1F1E1,
    0x6058C8E6, 0xC02A7DF9, 0x18072C67, 0x1F00B229, 0x26F73C0F, 0xE785BDE6, 0x6C2878DE,
    0x2846FE36, 0x14A14517, 0x8D22315B, 0x0C94D860, 0x44A52BE5, 0x6AD94231, 0xCA07B6DB,
    0x29462A3F, 0xA556C365, 0x1431C88C, 0x966D7194, 0xF4C80C57, 0x02C7B628, 0x2E14918A,
    0x60C429B0, 0x90DB9C61, 0x5AF1AEE7, 0x596A2703, 0x3F23D0E5, 0x2D6F91BC, 0xE67F206F,
    0x1E781567, 0x08801A31, 0xF9113E60, 0xF3FAD903, 0x99E2703C, 0x1E92FD35, 0x78CDE3F9,
    0x8E06F2D5, 0x013DDF5A, 0x8BF3EF75, 0x79EBC1F8, 0xCAC53DA2, 0x2BCB31F8, 0x23781D5F,
    0x21318DFB, 0x817155A7, 0x7C00E64E, 0x0018007C, 0x00000000, 0xBDEF7BBF, 0x001FDEF7,
    0xBDEF7BBF, 0x3D60B88F, 0xCDA782DE, 0x5EA7E305, 0x03E31388, 0xF0138CFF, 0xAC27F88D,
    0xBCD00F47, 0x2F7BDEF7, 0xEF7BFF00, 0xE0AA8C1D, 0x0012FDFD, 0x00000000, 0xDE000000,
    0x55192FDF, 0x95037751, 0x1F9F0063, 0x9E204D30, 0x07F1C098, 0xC7812B2A, 0x90267C07,
    0x1C700F15, 0x604A89E0, 0x03CF80FA, 0x7F016564, 0xEF7BDD67, 0xF3C9559B, 0x000015FB,
    0x00000000, 0xBF3C0000, 0x0955915F, 0x800CFFC4, 0xD405C65F, 0x88346313, 0x0358DF57,
    0xBC73597E, 0x9789EA0E, 0xF5E5F235, 0xBACC4E26, 0xEF7BDEF7, 0xE6FEF7BD, 0x39CE739C,
    0xCF3B9CE7, 0xCD1FF21D, 0xDFAA6AF8, 0x37FFDEFF, 0xF2ACCF18, 0xBF3CD3FC, 0xF19FEFDF,
    0xFF7F7A88, 0x2B7F789B, 0xD3192FBE, 0x5807ADF7, 0xFDE708C0, 0x635FE24E, 0xDDF92FC5,
    0x0000001F, 0xBBF3C000, 0x4AF9E1A7, 0xF7D8C6AC, 0x44398994, 0x8024018B, 0x41CAF004,
    0x3479DFED, 0x7EA27CC6, 0xDFFDE20F, 0x9DE47BF3, 0x1BDAA399, 0xFFFFFFF9, 0xC92F944F,
    0x88240246, 0xB9620BE1, 0xBBF7F791, 0xA8E7B19F, 0xBAC069E7, 0x0000007F, 0xF9CEFC80,
    0x3C7EE46D, 0xF791D0B3, 0xBF289FF7, 0x001E1100, 0x20E18813, 0x3FF3AAF1, 0xC32F9E0F,
    0xFFF442FB, 0xF720DF9E, 0xFFA9F39A, 0xBDFAE6F0, 0x4A3A27BF, 0x3D3BEFBE, 0x39155558,
    0xFFFFFEF0, 0xA51FFFFF, 0xB8C74A03, 0xD73BFBDF, 0x399F2BB8, 0xB9DF92EB, 0x633EE0FF,
    0xF7DD2A4E, 0xD5890617, 0xA4C8FBDC, 0xBF1F3C2A, 0x0000015F, 0x20000000, 0xDF7E73BF,
    0xC4FDCBFD, 0xE4741E78, 0xE5079FFE, 0x24220C1B, 0xFA440180, 0xFF53F123, 0x37CC29DF,
    0xF305CE73, 0x24CDFF7F, 0xFE2D8F11, 0x66EFDFFF, 0xAE554A4E, 0x03FBBF1D, 0x00000000,
    0x5F39DFA8, 0xC455F9E0, 0xFCEF83F3, 0x44F3C287, 0x000044FE, 0x00000000, 0xF78BDEF0,
    0x005EF7DE, 0xF7BC0000, 0xBDEF0006, 0x2F7BDC61, 0xFBF90951, 0x00000000, 0x5B000000,
    0x47977B5A, 0x7ED5C8E4, 0x000007F7, 0xFE400000, 0x39B8836F, 0xCF9FE21B, 0x1F51BE0B,
    0xC402B2A8, 0xCF03E31B, 0xC0BD47FC, 0x73027368, 0x1FEF7AE9, 0x00000000, 0xFCF7F77E,
    0x77E369EE, 0x2BE78BCE, 0x22BB7EB1, 0xB3BE3366, 0xFFFEF3C3, 0x8C4F98A9, 0x23E66725,
    0x00170200, 0x00000000, 0xDDF80000, 0x79CEFD5F, 0x622AFCF1, 0x7FCEF8BE, 0xE44F3C58,
    0x0000004F, 0xE2000000, 0x0DF3DFFD, 0x3D239DE4, 0x3A8DE2FF, 0x8AF153FF, 0x6072D072,
    0x44858122, 0x1CAF170C, 0xF7FFD46E, 0xEC65E27F, 0x2FF3C6A9, 0xDFABFBBF, 0xAFCF0D3D,
    0xDF8C6AC4, 0x59898F3D, 0x480315E2, 0x95E00900, 0xCEFFFA83, 0x4F58C5E3, 0xBEB0AFD4,
    0x00057F73, 0x73BE3000, 0x37FBBF7E, 0x16678FFE, 0xFEFEF23A, 0x2017E513, 0x204C0078,
    0xE2443786, 0x14FFEE35, 0x4F432F9E, 0xBFF7FE78, 0xBF000000, 0x79DFCBFB, 0xE302BB99,
    0xCF1F9FFD, 0x000048CA, 0xFBD00000, 0xDFA6FDDE, 0x35CD398A, 0xBDDF7DCA, 0x2AB38667,
    0x472F88C6, 0xEA17CEFF, 0x4F19DFBF, 0x5DF31967, 0xBBF6FC46, 0xB2E6E5BE, 0x63DF9EBA,
    0x60000BDD, 0x33FEF735, 0xE3E7AAA9, 0x00017BF7, 0xB0F12080, 0x46F8C77F, 0x3FBBF93C,
    0x00017BAC, 0x40000000, 0xD9B1867A, 0xF0FDDF62, 0xB2F5CA74, 0xF73C09EE, 0x38588CC4,
    0x647CA22A, 0x7A463979, 0xCFA5418C, 0x53CF83E7, 0xE4661319, 0xE928826B, 0x606A1C07,
    0x7DDF0FDD, 0x0A55BFF1, 0x1A8C88A5, 0x9113C311, 0xCA587943, 0xFED9FAF6, 0x2B1ADB6C,
    0xCF28A51E, 0x4F953F13, 0xDA2A248E, 0x5B056AE3, 0xDA44F48E, 0xA250FC50, 0xFC2EE718,
    0x79F8CFEE, 0x78FCAE87, 0xE2B99C56, 0xF5F2BA04, 0x0F92E01B, 0x0BE45788, 0xCC7FACBE,
    0x1BF2B789, 0xE33987AD, 0xC4E33984, 0xDCF027BC, 0xE2623313, 0x18FA6198, 0xC393E3E5,
    0x7CB249E7, 0xD6B81CB1, 0x32A0A31B, 0x88F80F96, 0xF0131409, 0xA5881789, 0x0BC37802,
    0xBDEF7BDC, 0xAAAA86F7, 0x7EFDF822, 0xF01FE23F, 0xFA037C55, 0xE96B05D1, 0x0B9B4F09,
    0xFFFD47F2, 0x2088FFFF, 0xF8C13333, 0xFE21FDCE, 0x88A81A8F, 0x12306BFD, 0x0B1C010C,
    0xBF1FD33C, 0xC89E8DFB, 0xE7BC2E30, 0xD3502D67, 0x4016FE06, 0x15008C00, 0xF88D7F71,
    0xEFFC6A3F, 0x00000003, 0x3DD60000, 0xD4B207BF, 0x677E7857, 0x812503F8, 0x9E02C00B,
    0xBF202B18, 0x8442E7D1, 0xDF2F8C48, 0x131947F3, 0x802B80B0, 0xFEFCF032, 0xA3591FC3,
    0x9DF882BE, 0xF5EE22F3, 0xA4DCC455, 0x317DF2CC, 0x4B5AF57E, 0xEA3FCF3D, 0x325378F7,
    0xF1BF25FE, 0xB3EC7FBF, 0x264034FB, 0x71027300, 0xA8000003, 0x61BF75DF, 0xF53D2AFD,
    0xBEFEFB65, 0x41E31FBD, 0x8E02C73E, 0x20F19405, 0x9F7D319E, 0x57EF6EEF, 0x9E3EA78F,
    0x01BF75DF, 0xBED60000, 0x7B78DFF7, 0xCD310F90, 0x7E03F773, 0xE0183461, 0x1F7B9C3D,
    0xBDD58BFE, 0xB5E89FA8, 0x3C058F12, 0x18E81A3D, 0xEF7BDEE7, 0x05F9E000, 0xFDCD6BBC,
    0xCCAF7BBB, 0xF8D7AB9B, 0x7EB3963D, 0x74C007F1, 0x71BF8ED7, 0x7BF1B672, 0xBBBFDCE6,
    0xEF71CAF7, 0x19F7BC83, 0xA3D5A353, 0x347CA723, 0x7369FAF1, 0x4F7E6560, 0x378F6834,
    0x82E433C0, 0xEF21DEE7, 0x57DF597D, 0xAC7DF7C6, 0xFBE32BEF, 0x95F7D63E, 0xF91F7DF1,
    0xCF3D693C, 0x0003BBF0, 0xF81DDF80, 0x800001DD, 0xFFEF7DE8, 0x9CAF6237, 0xA6733E73,
    0x53BFBEFB, 0xF2CC4141, 0xCB607BFD, 0xD9CEF6B1, 0x397E7FE3, 0x6A8FDFCE, 0xAE19DE99,
    0xF9EF15D5, 0xBF1BCF3F, 0xC95A46BD, 0x7F23BDE8, 0xC8C31811, 0x7FDF7BFB, 0xE7359BC6,
    0xF758F734, 0x800BEEB5, 0xFFEE77E7, 0x6FF7202B, 0xDF1DFB7C, 0x9E77902F, 0xF5EF51AE,
    0xCF3EBBC7, 0xF3F5E7BE, 0xBE7B4F1A, 0xE91FFFEF, 0xA93DF8CE, 0x0DF1CCE7, 0x4431AC63,
    0x00BCC05E, 0x6E443180, 0x27BFBCC0, 0xE3959EFD, 0xE358C61D, 0xFDFBF369, 0x7867748F,
    0xF7D9E7D7, 0xC979FAFF, 0xA8D74F3B, 0xEE43FAF7, 0x3BF6F8DF, 0xF6305FBE, 0x7AD7FFB9,
    0xADF39BFA, 0x653F3E77, 0xAF97FEFD, 0xAE5439F7, 0xCF58E411, 0x37BA79C7, 0xCF1A2630,
    0x61EFC43F, 0x5DC9E37D, 0xC76BB79F, 0x667ADF1E, 0x3F44E2FE, 0x38BF999E, 0xD76F0FD1,
    0xC5BE3D8E, 0xBB93C6FA, 0x10FF3C3E, 0xBDEE27BF, 0xEF7BDEF7, 0xAAAAAA5D, 0xFBF106AA,
    0xDFBF7EFD, 0x0002F7EF, 0xFF000000, 0xC0BDEF7B, 0x039CE73E, 0xFFEE77F3, 0x8F77202B,
    0xFDF9BF6F, 0xE9E77902, 0x3FD7D51A, 0xEE37D778, 0x9F8CBFBD, 0xEF634F56, 0xEE6772F5,
    0x26A39127, 0x2018D463, 0xE05E616A, 0x1883F59C, 0x309AF603, 0x6449EFCF, 0xD7233FCF,
    0xF17C1A78, 0xEB7C2BB9, 0xFFC4371B, 0x7712F3F7, 0xEF51AE9E, 0xBFDC87F5, 0x7C77EDF1,
    0x7BDEE0BF, 0xDEF7BDEF, 0xEFBEFBFB, 0xFBEFBEFB, 0xEFCAEFBE, 0xFD5DC69C, 0x99E54FCE,
    0xA0027DEB, 0x3EF5CCF2, 0xD77EAEE1, 0xE002D407, 0x000001DF, 0xF7100000, 0x7B9D3BDE,
    0x2AAAABEF, 0xF89D5555, 0xF2BF7EFD, 0x05BF7EFD, 0xF7100000, 0x7B9D3BDE, 0xAAAAABEF,
    0x78EAAAAA, 0xA8BCF7FF, 0xFE2E73A7, 0xC301DABD, 0x626B7A85, 0xD7C3F57D, 0x3C479F79,
    0xA17DF7C6, 0x06FCF7FF, 0xBADEFBE3, 0x2653D6FC, 0xC3F5DDC6, 0xC1F3EFD8, 0xAF625998,
    0xF3128EF9, 0xB1F3D77B, 0xE3BE4FEE, 0x7E7F1DE7, 0xDEE787F7, 0x00000000, 0x27800000,
    0xFFF620D9, 0x4F99904C, 0x6FEFB983, 0x00001BDD, 0xDEE77C60, 0x7FF57F7B, 0x0DC3D8C2,
    0x804CB1AC, 0x1801D009, 0xF18027FF, 0x0000029D, 0x00000000, 0xBBDC4000, 0x6E2EB000,
    0xE359CD54, 0xF6B2FAEB, 0xF037F79F, 0x000009BB, 0xB7F23072, 0xFD4FF733, 0xF8D2F9EE,
    0x3ABAAF66, 0x9CDF7ACE, 0x00B9418F, 0xEDB9418F, 0x8E737EAC, 0x5B59ECDF, 0x8FAC2563,
    0xB3E607B3, 0xF0FFEFE3, 0xF3B9EE76, 0x6F99AC5B, 0x3587A3FE, 0xF47FCDF3, 0xDCF73B78,
    0xD9F32DF9, 0x587FF7F1, 0x200F671F, 0xEEEF7DDF, 0x91CF7304, 0xA89ED639, 0xFFFFEA37,
    0xC1DE2BFF, 0x5F925F15, 0x809E9978, 0x80022C78, 0x7880F1E0, 0xC1F11D14, 0xF625F22F,
    0x67FF3678, 0x1CEE40DC, 0xB9E4ED64, 0xBDD426F7, 0x000001F7
EW_END_OF_FONT_RES( AppFontVerdanaProSemiBold20 )

/* Table with links to derived variants of the font resource : 'App::FontVerdanaProSemiBold20' */
EW_RES_WITHOUT_VARIANTS( AppFontVerdanaProSemiBold20 )

/* Bitmap resource : 'App::LogAccess' */
EW_DEFINE_BITMAP_RES( AppLogAccess )
  EW_BITMAP_FRAMES( AppLogAccess, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 3, 15, 17, 7, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogAccess, Default )                 /* ratio 27.60 % */
    0xC3519300, 0xACD3E376, 0x220C605D, 0x60F09854, 0x190E85C3, 0x11488C4A, 0x1887C5A2,
    0x88D45E27, 0x04412051, 0x03DCA63D, 0x3FCA0390, 0x9E512692, 0x2532B92C, 0x5F30954B,
    0xB34974CA, 0x3598CDA5, 0x2904DA71, 0x35160532, 0x9D0A74D6, 0xD0E89379, 0x2293469C,
    0xA813E9AD, 0x2A98451A, 0x94BA2D1D, 0x58A9D5AA, 0x7A7CDA95, 0x68B192A9, 0xAD6474D6,
    0xD6AAF63A, 0x86BF3AB2, 0x8016C7FD, 0x8478338F, 0x974B3DA1, 0x6FAB5D6C, 0xB93DB2E3,
    0x6CB40017, 0xE01460DD, 0x5CDF4521, 0x26CD88BB, 0x6FF85C1E, 0xDB90BEE0, 0xAB354A4A,
    0x98C561CD, 0x5C9CAB2F, 0xB6DF3239, 0xE204019E, 0x000FCA74, 0xC7304F1C, 0xD9C702F0,
    0xE8AE5222, 0x2D1662FC, 0xDE6D3448, 0xFDAECC5E, 0xD6EAF63A, 0x1BFF5158, 0x71B43A5D,
    0x9A4FC8D0, 0xCB4C05C2, 0xE0592183, 0xA5B23049, 0xC35DAA9D, 0x87337CAC, 0x4D1F840E,
    0x510502A5, 0x8BD7C7B3, 0x09A06F2E, 0x4FCBEF21, 0xB6825226, 0xDD854F77, 0xCFEAF4CA,
    0x15CA9FA3, 0xCFF1CB2C, 0x9FF00200, 0xC3A16D80, 0x70183B8E, 0x2339CE43, 0x2B4A4230,
    0x03D01C74, 0x265CF815, 0x420E8521, 0xE638CDC8, 0x82206090, 0x1C988603, 0xF5F60181,
    0x69E12647, 0xE189D776, 0x88E25889, 0xCC80022E, 0x20E0D834, 0xA8FD4940, 0x508DD898,
    0x348C63F4, 0xE310E4D7, 0x614A2390, 0xE8AE2187, 0x46511998, 0x8BE44922, 0x8FD00250,
    0xC008FE3F, 0xCC571040, 0x0B65E4A3, 0x3D055100, 0x24F95653, 0xB5F66489, 0x50F03BCE,
    0x535DE5B0, 0x98E6999D, 0x0F73D603, 0x50040A3E, 0x266B3F92, 0x509D92A6, 0x9D2723F8,
    0xA238C270, 0x91A05509, 0x9A4B9E4D, 0x67150264, 0x94681368, 0x09D211A1, 0x5A207C2A,
    0xA49D20D6, 0x65A3C7C2, 0x3CD27A0A, 0x80C3DCF6, 0xD1945208, 0x9144A58D, 0xA2A82A6A,
    0x35E63A72, 0x829388DF, 0x51804C06, 0xDAB4A20E, 0xAEACAB0A, 0x9469DA7A, 0xCEF3B4E8,
    0x22106205, 0x56172749, 0xC5B255A8, 0xB0EC1B1E, 0x6BEA42BD, 0x53CCF08C, 0x24BC03CF,
    0xA7110CF3, 0x160C12E8, 0xED5B6ED9, 0x0AFED1B5, 0x00004040, 0x00000000

  EW_BITMAPS_TABLE( AppLogAccess )
    EW_BITMAP( AppLogAccess, Default )
EW_END_OF_BITMAP_RES( AppLogAccess )

/* Table with links to derived variants of the bitmap resource : 'App::LogAccess' */
EW_RES_WITHOUT_VARIANTS( AppLogAccess )

/* Bitmap resource : 'App::LogMisc' */
EW_DEFINE_BITMAP_RES( AppLogMisc )
  EW_BITMAP_FRAMES( AppLogMisc, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 22, 0 )
    EW_BITMAP_FRAME( 5, 2, 12, 3, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogMisc, Default )                   /* ratio 43.18 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0x1D4E484C, 0x40860E3B, 0xE3D3D2AD, 0x0E619E0C,
    0x17916084, 0x7F93C700, 0xDC663F1D, 0xA162F158, 0x34F6AA4F, 0x25B0987C, 0x610B97C2,
    0x50999C2A, 0x0E7B3D5E, 0x24D234DC, 0x298F00E9, 0xF48242F9, 0xD0A3F438, 0x7E9144A3,
    0x0DB409F4, 0x6C934D23, 0xB31974E2, 0xD6994D2A, 0x415389BE, 0x6E19CA62, 0x0D8A8B4A,
    0x59A9364B, 0x7EBB44A3, 0xEA95BACD, 0xBED7AB55, 0x01614B8D, 0x65751749, 0x7B1DEAD1,
    0xBCDEEF96, 0x8DDEEAFF, 0x426DD73B, 0x31EEF67A, 0x4D255138, 0x1780C036, 0xEF52A900,
    0xE92E9242, 0x9016632C, 0xC83F8A03, 0xA89A857D, 0x621B4682, 0x4CEB6EC5, 0xF408B4FA,
    0x1068BEDF, 0x3094C255, 0x0E7ABD1E, 0xADDDFB5C, 0x75C2759A, 0x5055E2EF, 0x3D8AA3F0,
    0x507C09DD, 0xC91617B9, 0x12B83F9B, 0xEDE6D346, 0xCBE4E005, 0xA7BF2B91, 0x0B3C1DCE,
    0x7ACD5291, 0x1645BBA3, 0x95BCD336, 0x07E2173B, 0x84C13C9A, 0x86B2C8B2, 0xC35A425A,
    0x8A113192, 0x7C1507A0, 0x0B32A894, 0xD7E4B31B, 0x85426E84, 0x70125E37, 0x6E8B7204,
    0x0CF324BC, 0xC3ED0911, 0xF0043F0F, 0x84288971, 0x3CD93034, 0x8AC25D09, 0x208C692D,
    0x34DD1945, 0x3336CD73, 0x1B8475B8, 0x1BA2E47E, 0xC06E0E83, 0xE8E51844, 0x6F174326,
    0x2D0A0338, 0xCF9180BC, 0x9018FB3E, 0x34C72E50, 0xF93DC473, 0x2FC083E4, 0x041344CB,
    0xF3D4F33C, 0x80D94240, 0x4E09CE33, 0x46493261, 0x5A147057, 0x58E2365F, 0xEC520EC0,
    0x755F6083, 0x1F4EA171, 0x48328C98, 0x23C8F13B, 0x30C05B81, 0x4A100D23, 0x2D8801C0,
    0xCFD67403, 0x999D7B9A, 0x8E6AA1A6, 0x9C47DAF9, 0x1C44B679, 0x0BA2D481, 0xD118CE32,
    0x08FE3F8F, 0xF03B56E0, 0x218133C8, 0x41C1E928, 0x43906113, 0x768858A8, 0xE31884E0,
    0x2246A6E8, 0x8DB25896, 0x9094E538, 0xF4FD3F10, 0x9B204033, 0x3D87F298, 0x4093E0F8,
    0xF2ECB428, 0xDDD574C5, 0xA7012B8A, 0x164C02E4, 0xC6A15829, 0xCAA9BA35, 0x0C73136A,
    0x9A6E8B32, 0x198B72B8, 0x8EC3A109, 0xA108183B, 0x48BE1E86, 0xEE164440, 0x2CC9F424,
    0xDD8184BC, 0x62B4983D, 0x5E151A0B, 0x580A8048, 0x6E8D61A8, 0xC96B6AD8, 0xA6E86A88,
    0xF0AC3A59, 0x18150C32, 0x3A05E128, 0x05E0CD42, 0x3424CD1C, 0x6161A569, 0xA82287B1,
    0x29C9D20C, 0xB03A9C7D, 0x13B86A2D, 0x34123CCF, 0xF315C410, 0x13961A9C, 0x2582CAD9,
    0xE09CE438, 0x30FFA2B2, 0xF4158400, 0x42728C98, 0xCA52647D, 0xF5EF3720, 0x848F2045,
    0x223A1EA2, 0xD1429610, 0xB43D05BB, 0xA3E4F85B, 0x6C2E020F, 0x503486E1, 0x50B38D77,
    0xC6D1682D, 0x9D54F734, 0x2D036180, 0x62A8C22D, 0xDBF5FA98, 0x1806EE8B, 0x8DA8E4DB,
    0xA90955B6, 0x5ED8F61D, 0xDED80DC7, 0xF4C395E9, 0x5E156FDD, 0xF0093E76, 0x84290981,
    0xDF73CCE8, 0x8F4E3962, 0x7E1F8CE2, 0x67844CB6, 0x9E9D132E, 0x2D4AB252, 0xC721306C,
    0x8DD0B420, 0x8B74A228, 0xA0E7BA4E, 0xE6813E73, 0x10140F78, 0x00000000

  EW_BITMAPS_TABLE( AppLogMisc )
    EW_BITMAP( AppLogMisc, Default )
EW_END_OF_BITMAP_RES( AppLogMisc )

/* Table with links to derived variants of the bitmap resource : 'App::LogMisc' */
EW_RES_WITHOUT_VARIANTS( AppLogMisc )

/* Bitmap resource : 'App::LogFaults' */
EW_DEFINE_BITMAP_RES( AppLogFaults )
  EW_BITMAP_FRAMES( AppLogFaults, Default, EW_DRIVER_VARIANT_RGBA8888, 24, 24, 0 )
    EW_BITMAP_FRAME( 3, 6, 5, 11, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogFaults, Default )                 /* ratio 40.97 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x22FD8343, 0x6E97180E, 0xE66F875D,
    0xC7D885D2, 0x86815F8F, 0x1C2A1F0B, 0xC8A49209, 0x3E4F2892, 0x1DAE900C, 0x6EA30BBC,
    0xE1F2EAFD, 0x10709909, 0x17816486, 0x3FAA1388, 0x13A1CADE, 0x80DFB111, 0x9A932194,
    0xA9748A54, 0xE8F37853, 0x6BB54041, 0x77291618, 0x0062B90E, 0x00BD0AC4, 0x03FCA039,
    0x0EC0B62B, 0x886EFB29, 0x93AC93A1, 0xDA635DAC, 0xA13793C5, 0x4C955DA9, 0x201D1645,
    0x1F3559EC, 0x01E8D240, 0x160840E6, 0x86C76479, 0xB1362C55, 0xBD5CC5E3, 0xA712F8CE,
    0xBC59A799, 0xA7CBE0C4, 0xBCDDC10F, 0x65EC01A0, 0x051E4F07, 0x393A9039, 0x8AA3F052,
    0x178DC7BD, 0xFB4C66C3, 0x1A78CE81, 0x97318096, 0x288E8098, 0x01BC90FC, 0xB91BAB84,
    0x7EF62373, 0xB4801856, 0x433398E9, 0x6DF32944, 0xD8D975B6, 0xC0358B63, 0x24BE8A43,
    0xE2DD0270, 0xB90C44D0, 0x9BC962EB, 0x16EAE4C7, 0xD6E8711A, 0x8FD8E879, 0xF478C940,
    0x33B03DEA, 0x04A29409, 0x0F71503E, 0x9811B47A, 0xF9610098, 0x3D655933, 0x110104FD,
    0xE063C05A, 0xD5840362, 0xFC6F11CF, 0xDF358B91, 0x4942A388, 0x8ED3ACE6, 0x386A1806,
    0x660576A1, 0x3B4E5B47, 0x330C62D9, 0x08F1C44A, 0x08208F27, 0xD2273F85, 0xBA6EDB96,
    0x118CF324, 0x62488A20, 0x98E4B986, 0x71C06FA3, 0x642E8B12, 0x82D1A460, 0xE2A918CD,
    0xF8F4E68E, 0x96239063, 0x528AA458, 0x1421558A, 0x079150FD, 0x63F8AC22, 0x1A5600A6,
    0x530F0071, 0x8EA5D3E4, 0x23E955BA, 0x98852290, 0xCE6F9125, 0x6B1602A6, 0x374D4358,
    0x8F80B0E1, 0x501CFA3E, 0x6C942186, 0x7194E792, 0x90E589A6, 0x29297226, 0xF840118A,
    0xE4B0268E, 0x145EC662, 0x165B6459, 0x228A2CF1, 0x29D68E95, 0x226F96A4, 0x7D164FC9,
    0x470A7230, 0xCF64251E, 0x73800A66, 0x38203A4E, 0xC4708219, 0x9CEA49BD, 0x693AA28F,
    0x74D5628A, 0x7CDB3453, 0xF53C82F3, 0x3DC0E3D8, 0x5250259B, 0xF3A8E738, 0xA0550981,
    0x8DAF8DA1, 0x9DEA6B02, 0x2048A291, 0x01BC5D0C, 0x5487198D, 0xEABA09A2, 0x324C22CA,
    0x8014804E, 0x6310BC2A, 0x0EA1A7C5, 0x57AFDB3B, 0x96E90B7E, 0x22ABEAE2, 0xE3020280,
    0x244034CC, 0x69B3ACC4, 0x25C97224, 0xF028E236, 0xABF6DDA8, 0x8AFF9D94, 0x6C5A9B4A,
    0x3B4EA395, 0x8DA4241B, 0x8098E538, 0x606A1582, 0x74BF31A3, 0x4BD2D52A, 0x65F56958,
    0xBCCE6F3F, 0x549822C6, 0x073ED9C2, 0x008FE998, 0x457554A9, 0x30931AC4, 0xF4DC19C5,
    0xFA4957F5, 0x018FB3EC, 0xCCE320B9, 0x51D44F11, 0xF4082C48, 0x393E0540, 0x1744805A,
    0x8BE2B4EA, 0x04245331, 0xC4093E6D, 0x6F2D8818, 0x1126D9AE, 0x4BC1F46C, 0x72E0AF26,
    0xD0F23BC6, 0xEE72C113, 0x048F33C4, 0x46B10E69, 0xAD10BD1F, 0x985208A2, 0xBF2B8DE1,
    0x2F85231C, 0xC42348CC, 0xEDB99965, 0x3C38BEA6, 0x5509CFF1, 0xBD0D91A4, 0x0EE3AAF6,
    0x1414163C, 0x9D4D72C0, 0xAC25409D, 0xD786B2D4, 0x71ACCF60, 0x71040DC4, 0x6AEC3CC5,
    0xEE3B0E72, 0x5E3A8064, 0x4CA5354E, 0xA0D8DA35, 0x24172DB6, 0x863A45E1, 0x3FF99B8B,
    0x38261D85, 0x4338C1E1, 0x87BF0FCD, 0x03F07D96, 0xD899D66D, 0x87614364, 0xE6B0B021,
    0x8C38AA9A, 0x92320751, 0x1B8B32A4, 0xFDBDEB78, 0x1F67C0FC, 0x337FDF40, 0xB72938EE,
    0xC785C300, 0xFD4E5320, 0x809A1806, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( AppLogFaults )
    EW_BITMAP( AppLogFaults, Default )
EW_END_OF_BITMAP_RES( AppLogFaults )

/* Table with links to derived variants of the bitmap resource : 'App::LogFaults' */
EW_RES_WITHOUT_VARIANTS( AppLogFaults )

/* Bitmap resource : 'App::LogEvents' */
EW_DEFINE_BITMAP_RES( AppLogEvents )
  EW_BITMAP_FRAMES( AppLogEvents, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 20, 0 )
    EW_BITMAP_FRAME( 4, 11, 4, 8, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogEvents, Default )                 /* ratio 44.32 % */
    0x12E94F00, 0x1242E596, 0xF00EE92F, 0x214F9298, 0x170D8743, 0x11287C46, 0x188AC5A2,
    0xC89C6A29, 0x0746E2F1, 0x6BC8B042, 0x1CD60A54, 0x88C64E0F, 0xCA03900B, 0x612E963F,
    0x33396CBE, 0x38994D26, 0xC9B4EA6F, 0x9CCFA6B3, 0xC3FE813D, 0x3A0BE4A0, 0x78CC5211,
    0xE774CA13, 0x9E389BCF, 0xB4911BFC, 0x6D2C8B1B, 0xE96809A8, 0xA75069AF, 0x09303742,
    0x2D542E53, 0xEC0A5F5F, 0xEBCFB290, 0xFF51A0D3, 0x27A340FD, 0xF378BB98, 0xB7DBE824,
    0x4C1F00CF, 0x680D08A4, 0xDBADCFD9, 0x11FA50C1, 0x8F8AA4F2, 0x1CF67ABC, 0xC8138928,
    0x34B06196, 0xC288E809, 0x4E23CE0F, 0x0689FE90, 0x001FFA20, 0x3196C45A, 0xCAE41069,
    0x5D5FCBBC, 0x6682A096, 0xE671B6DB, 0x600E944A, 0x253318CB, 0x79688811, 0x3FEDFB07,
    0x30E6601A, 0x1D2E7703, 0xCD91C788, 0x09A4AA1C, 0xB1CC6171, 0x1B65A9FF, 0x3FAA1388,
    0x280FC2FD, 0x3E5F000D, 0xC092087D, 0xB8AB7409, 0xFC50ADD0, 0xC1DA3511, 0xD6719889,
    0x61453BDD, 0x78360D45, 0x0103D0F3, 0xA68E0479, 0xD8DA354C, 0x5910C0F0, 0x4B9FA3C4,
    0x4561000B, 0x62B0963D, 0x08B21A8B, 0x1C138C93, 0x39062134, 0xC0A3FE0F, 0x83D8550F,
    0x9A056A9A, 0xA2692296, 0x27C85005, 0x5F01ECAA, 0xA4F9D857, 0x986012C1, 0xE036CD23,
    0x3D0F10B8, 0xC3D03CF5, 0x130C7819, 0x3C8117A2, 0xE8798A22, 0x68E4E8AD, 0x0EF3B4E8,
    0x01743106, 0x9DC533C7, 0xD91A4550, 0x51CE5378, 0xCF83DCF5, 0xA1EC5702, 0x55C52A48,
    0xEB174470, 0x348CD2FC, 0xE2A93C41, 0xD7862B68, 0xB09500CF, 0x091ACB52, 0x3DC540F8,
    0x9CA7216E, 0x63C0EE3A, 0x1CFB79C1, 0x9E244730, 0x8CD6E234, 0x09120C60, 0x93E66228,
    0xCE2C9C80, 0x00A669A9, 0x0BE02800, 0x8D11BC5C, 0xD1AC435B, 0x26952F47, 0x02AACFE0,
    0x2C4A723C, 0x26A5B871, 0xC3A8E49B, 0xE698070E, 0xA6AEE74A, 0x13E1A2C5, 0x0540F408,
    0x58CD323E, 0x9A2B99E6, 0x5A304B92, 0x1483C018, 0xDDB4C8FA, 0x42A8933E, 0x6EBA1B4B,
    0xFBA72D9A, 0x014FC3F0, 0x09321464, 0xF572C527, 0x84902045, 0xBD2AE2B2, 0xB0455314,
    0x6434CAC3, 0x23C0EC91, 0xE6DB050F, 0xD5A72BCB, 0x0ACE2378, 0x46413C1F, 0x50993238,
    0x34DA1A05, 0x33370D83, 0x3ACE938C, 0xC771481D, 0xC4C8AE21, 0x80F48480, 0x602F4B52,
    0xB6AFA6EC, 0x57BA62FB, 0x96819E5F, 0x9E334D1F, 0x680F93DC, 0xA78C21E4, 0x332C8603,
    0x8A7334C8, 0x894797A9, 0x17715645, 0x330F415B, 0xC3436CD7, 0x5CCF36C7, 0x6E2BCD74,
    0x652E8B02, 0x8CD3ECA8, 0xCA225879, 0x4D1B1E21, 0x86FBD5F4, 0x6B10A639, 0x508BE1F0,
    0x0DD19954, 0x439CE337, 0x5B48D602, 0x01CD36AD, 0x360D331C, 0xC570A439, 0xB064D71A,
    0x64E717C4, 0x672E0AF2, 0x010FDB78, 0x400D1F68, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( AppLogEvents )
    EW_BITMAP( AppLogEvents, Default )
EW_END_OF_BITMAP_RES( AppLogEvents )

/* Table with links to derived variants of the bitmap resource : 'App::LogEvents' */
EW_RES_WITHOUT_VARIANTS( AppLogEvents )

/* Bitmap resource : 'App::LogFire' */
EW_DEFINE_BITMAP_RES( AppLogFire )
  EW_BITMAP_FRAMES( AppLogFire, Default, EW_DRIVER_VARIANT_RGBA8888, 24, 24, 0 )
    EW_BITMAP_FRAME( 12, 5, 3, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogFire, Default )                   /* ratio 49.48 % */
    0x1C09FB00, 0xC11FB020, 0x1A0F0581, 0xA110C84C, 0xF90385C3, 0x6047EBF1, 0x1602C49F,
    0x98BC61F9, 0x8EC6A371, 0x84362912, 0xBF807248, 0x86120293, 0xE5B2B024, 0x5D2F9644,
    0x4F995C52, 0xDC03BEDF, 0x51239DC6, 0x25B318AB, 0x7B2584B1, 0x51687412, 0x1A9142A2,
    0x986B3A4D, 0xB6D226B2, 0x32017381, 0x0391CBE6, 0x699CC264, 0xADD7AB95, 0x4B99C004,
    0x9C494207, 0xE406B640, 0xC02FD280, 0xA16E7FDA, 0x771B7DC0, 0x75BADCAE, 0xE3314845,
    0x10D8DBED, 0x1D6AB15A, 0xAC2C15DC, 0xF0A0C860, 0xD8878330, 0xF2531E01, 0xF94BA5E1,
    0x98BB656E, 0xB622D2EB, 0x87E0498C, 0xA6130B59, 0x3D1E6F08, 0x5D126908, 0xC0B754BA,
    0x04FB290E, 0x1B27F5AC, 0x91C7BF8A, 0x62A8FC15, 0x2B10018F, 0x5F037CF4, 0xEE1EBBF0,
    0xD6D96A7C, 0x89D42595, 0x55B493D6, 0xEEBC2E8A, 0x740ABC5D, 0x94627924, 0x7B9507C0,
    0xB9ACAE29, 0x27520726, 0xA8AC2847, 0xCD4416C1, 0x4A8C5F9E, 0xF3D3A2BD, 0xDA6AB2A7,
    0xC6C3346C, 0x64AEC66D, 0x096114D0, 0x11A8B62B, 0xBC861D85, 0x6012C1A2, 0x325CC398,
    0xD82615CE, 0x73D51474, 0xF80B3E0F, 0x822949A1, 0x16042038, 0x47513CF2, 0xD350B121,
    0xA42C384D, 0x173C0ED3, 0x318BE2B4, 0xCC92E853, 0x52344633, 0x90732C0A, 0x9C24C851,
    0x20C73134, 0x568598B3, 0x323C8017, 0xA49E20CA, 0x4F5347D2, 0x34E308B9, 0xC2D380DC,
    0x468D2567, 0xD0AA24C0, 0x567106D2, 0x1BC473D4, 0xCE02E47F, 0xD4AD6439, 0x4CF23C4E,
    0xA325C7A0, 0x1381D218, 0x80438C62, 0x33F0510E, 0xFE786599, 0x163F5C93, 0x3A85D120,
    0x88C1F45A, 0x48B22A29, 0x7DA142A5, 0xEA39CE15, 0x77DDD07C, 0x8BC9C66F, 0xB110D132,
    0xD4F43C52, 0x8117C0F3, 0x9DCA1240, 0xEA065D99, 0x509D6FA8, 0x68D91A45, 0x26394E23,
    0x452134AC, 0x8961E51D, 0x59CC8728, 0x688418A7, 0x174DD357, 0x1DC093E6, 0x08928494,
    0x1B1279A9, 0xED6FB16A, 0x7D1B0449, 0x3ACE62F0, 0x5D0068ED, 0x54BD114A, 0x743105E8,
    0x1133C701, 0x3BC5A110, 0x4DE364CF, 0x62DD2B0C, 0x1C49334C, 0xA2BAEC67, 0x03679BB6,
    0x4F315C41, 0x2475F37C, 0x38C0451D, 0x18100D33, 0x3A05F128, 0x11D82607, 0xF021353E,
    0xE6EC9865, 0x403DE8F9, 0x3007A1A4, 0x8841D04E, 0x93D65C2C, 0xBDED6630, 0xEE3B0E77,
    0x47509064, 0xCBE2D4A1, 0x23D1C217, 0xB8B32A49, 0xACAA92B1, 0x19C53092, 0x315C5CDC,
    0xC300B729, 0x61145545, 0x28390E03, 0x1A054094, 0x417C5CDB, 0x53A45E12, 0xACE2378D,
    0xEA395090, 0x14C1B3B4, 0x4AD22078, 0x0124FE6D, 0x5CB72047, 0xD7344C5B, 0x1301B0EC,
    0x31739461, 0xC2207915, 0x1EBB958A, 0xBD2D4A00, 0x0E001180, 0x998B1C4F, 0x4324FCAD,
    0xAC37364D, 0x06BEEF94, 0x3E8520F0, 0x03D02175, 0xDDACF815, 0x48CD2FF6, 0xFFBF4413,
    0x8721AC5E, 0x4C44AE56, 0xB0F0D634, 0x3CC2C5E7, 0x090F8D53, 0x378DA341, 0x4E3A4430,
    0xBBCAF05D, 0xE5F7D775, 0x35C5FA27, 0x32C73180, 0x8F63D4F2, 0x9AF55A03, 0x989A1FC0,
    0x82C5C812, 0x7F5FBE13, 0x37BDA509, 0xF24C7510, 0x4CC722C9, 0x2B0E4D83, 0x0AED1B3D,
    0xCD51B059, 0x2D4374C5, 0x90E13675, 0xEE3A8273, 0x208163C0, 0x87E2A09D, 0xEC5DB06B,
    0x8CDBCC32, 0xF7094E63, 0x4BF91582, 0x88F2045E, 0x7A831728, 0xD4F8EF5C, 0x52D516FF,
    0x2B8871DC, 0xFB534A67, 0x6595F7DE, 0x351B6358, 0xB811C0A0, 0x21FD0EC0, 0xAB7281EB,
    0xB08C04CB, 0x6C847685, 0xD6AAAE64, 0x91580857, 0x17A2AC8B, 0xC942A8C5, 0x7741181C,
    0xFB7C83FD, 0xE679CF28, 0xBC06BB21, 0x82147DCA, 0xB26C4521, 0x82A8030F, 0x42B0C417,
    0x85D08E05, 0x848D5075, 0xF15FC2A0, 0x0343478E, 0x035A64AC, 0x0907218C, 0x6C040FA6,
    0x183833A6, 0xB1901D43, 0xEDF61EC3, 0x53DAA06F, 0x82E5BEB7, 0x1A41B82D, 0x2EC5909D,
    0x17A560C6, 0x2F8CF072, 0x50D39A61, 0x60618BB1, 0x4BBA7701, 0x80CE6ACD, 0x02644A88,
    0x0510950F, 0x0B313C22, 0x6581885E, 0x0C99C026, 0x24109009, 0x2890A682, 0xA6560AC1,
    0xBD2AC865, 0x53696D24, 0x891A6824, 0x040569A8, 0x00000000

  EW_BITMAPS_TABLE( AppLogFire )
    EW_BITMAP( AppLogFire, Default )
EW_END_OF_BITMAP_RES( AppLogFire )

/* Table with links to derived variants of the bitmap resource : 'App::LogFire' */
EW_RES_WITHOUT_VARIANTS( AppLogFire )

/* Bitmap resource : 'App::LogSettings' */
EW_DEFINE_BITMAP_RES( AppLogSettings )
  EW_BITMAP_FRAMES( AppLogSettings, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 10, 4, 3, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogSettings, Default )               /* ratio 31.76 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xD1086C4A, 0xC15CA9A0,
    0xC35908B4, 0x320E57C7, 0x99D98E76, 0xBB914A04, 0x5024F378, 0xA571189C, 0x2B3096CB,
    0x090834B2, 0x02382C95, 0x17F14072, 0x9EBFE740, 0x5CFA7E50, 0x354D8591, 0x41E8F378,
    0xE9932978, 0x134EA7CC, 0x6C55F2B6, 0xFD9D00CA, 0xA2E9202C, 0x70375A8E, 0xDBEDF42C,
    0xA30D8067, 0xFE80944C, 0x558A143B, 0xA131A89E, 0x6C8A75C6, 0x081C361A, 0xA7C1507A,
    0x4C228D56, 0x23765696, 0x5A846E77, 0xB90E7729, 0xAE74DB82, 0xCADF9963, 0x61910BA1,
    0x6A7397C9, 0x5A3512D5, 0x05BE1EEF, 0xCAC53909, 0x18ED4645, 0x313A9242, 0xB5B8DB96,
    0x514AA444, 0x2D835158, 0x41DB4FB3, 0x3311383B, 0x6348074E, 0x6BF4A157, 0x3CCAE410,
    0xB9BEDB69, 0xEE3CCD58, 0x08FC7E3E, 0xA7D3590C, 0x41A16E17, 0xA0C75FAF, 0x653A0BE4,
    0x68D9B2D5, 0x803C9AEE, 0x7D228330, 0x7DBB7ED2, 0x68FFF776, 0xACC39180, 0x1B763A9C,
    0xC7F4AFCC, 0x7F7F005F, 0xC0141402, 0x8270814A, 0xBDEC1FCA, 0x0C7620A7, 0x2287B15E,
    0x8F93E0A9, 0x37E8083E, 0x50CE3050, 0x6C1103F3, 0x01CBC1F4, 0x8F914C3C, 0xC719C45A,
    0x10781983, 0x7A1A03F3, 0x0E001304, 0x2098304F, 0xC4ED3983, 0xF4FD5B96, 0x8E41A167,
    0x1C8B1298, 0xDF04F235, 0xE90E448C, 0x4CF38953, 0x128ED555, 0x300B8295, 0xA0B9145B,
    0xA7C23294, 0x64CF6F1B, 0x4C0C4DD3, 0x848F6426, 0x4470540A, 0x6950EB17, 0xC54191A6,
    0xCF1C05D0, 0x3B8EC39C, 0xD1197419, 0x92D8AD25, 0x908B8CC6, 0x991D4AE2, 0x19CB82BC,
    0xC7E1B445, 0x10E8042E, 0x06673F05, 0xAA280865, 0x6BA721E8, 0x08E1FC5C, 0xC255D729,
    0x386B2D4A, 0xF13BCEB5, 0x1D04E054, 0xA542C884, 0xA2508719, 0xAD4FA3C9, 0x749062D8,
    0x798692DE, 0x8CC318B6, 0x70F65412, 0xA0C31E06, 0xDF35D2BA, 0x8602938C, 0x5D09321A,
    0x5048043F, 0xCCEE16C4, 0x6D1642C8, 0x63EBA350, 0x109B45AC, 0x68CDEA7A, 0xA88A1E85,
    0xD0796CF2, 0x365E053A, 0x45AB1835, 0xF3FE68B2, 0x44C7300A, 0xDDB4ADB1, 0x350C940E,
    0xC100D8D8, 0x33C05810, 0x147513E3, 0xEBBACB12, 0xBCC35B7E, 0x21C8CEF5, 0x43C4BC1F,
    0xF00E3D4F, 0x06B72EDB, 0x21876141, 0xE5775CB0, 0x52AC9438, 0x05FF1B0B, 0x0CBB30B8,
    0x36D12C73, 0xC25394E2, 0x07211945, 0xA4FD0B8E, 0x1DC2803C, 0x00101427, 0x00000000

  EW_BITMAPS_TABLE( AppLogSettings )
    EW_BITMAP( AppLogSettings, Default )
EW_END_OF_BITMAP_RES( AppLogSettings )

/* Table with links to derived variants of the bitmap resource : 'App::LogSettings' */
EW_RES_WITHOUT_VARIANTS( AppLogSettings )

/* Bitmap resource : 'App::LogSystem' */
EW_DEFINE_BITMAP_RES( AppLogSystem )
  EW_BITMAP_FRAMES( AppLogSystem, Default, EW_DRIVER_VARIANT_RGBA8888, 22, 22, 0 )
    EW_BITMAP_FRAME( 4, 4, 2, 14, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogSystem, Default )                 /* ratio 32.44 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xE110C84C, 0xBAD96840, 0x8631D0C1, 0x168A318E,
    0xB86C4A21, 0x8FC761D0, 0x1472430A, 0xC82491E9, 0x34FE5E91, 0x07201512, 0x5F2D7F94,
    0x08F40982, 0x259BC8D4, 0xA92C9E71, 0x02BEDF6F, 0xAB69AACB, 0xC8C03051, 0x21F4F97B,
    0x4B043078, 0x5D3098BC, 0x14EA63FE, 0x019D52A9, 0xF9ED0E82, 0x0049A753, 0xB1480B5C,
    0xD415C853, 0x4CD85916, 0x57CB651B, 0x90C15917, 0x0681F939, 0x78A8304F, 0x6BA542A5,
    0x6530D697, 0xE2D1424C, 0x964585F5, 0x46A0D435, 0x55E833A9, 0xB509AF58, 0x92FBC8D6,
    0x7ACAD472, 0x7CDE6333, 0xCB65B3B9, 0xB361A8C9, 0x8063D901, 0x54D45815, 0x73D9ACFB,
    0x619CD66B, 0xB88C33FF, 0x82906968, 0x3A86CB09, 0x669C0BC3, 0xD30170A6, 0x395C4DB2,
    0x95C6DC12, 0x172A711B, 0x7FBD2CB0, 0xD6CA96EF, 0x70AFEDED, 0x6336CAE5, 0x7E269268,
    0xB80DFAFD, 0x00BCAFEE, 0xD765DEEE, 0xC96CA622, 0x115684F5, 0x3ADBBDF0, 0xE2F0337A,
    0x37372647, 0xAC08FF62, 0x07117C34, 0x70FD9633, 0xD8C11DC6, 0x093E4F83, 0x0C11A48C,
    0xD544D533, 0x1549AF53, 0x8C5A2FDC, 0x9C240724, 0x0E001238, 0x61B6744F, 0x748C8E27,
    0x4DB216A1, 0x0F282118, 0x74CC6462, 0x9097F99C, 0xF8861F7F, 0xC8FF8819, 0xE4379038,
    0x8C02139C, 0x22E8B99D, 0x68E95090, 0xC6158D10, 0x097F0E38, 0x9123E8F1, 0x8D08B952,
    0x4840DE36, 0xCA132813, 0x1A73DCD6, 0x8D624242, 0x08F1C59D, 0xB48C8F27, 0x0E291665,
    0x603C4591, 0x83D35208, 0x5F252547, 0x6671F45D, 0x08FE795F, 0xFD92DFA0, 0x80A009F1,
    0x1F36B604, 0xB3DCF63D, 0x65037BC0, 0xDD76C4E7, 0x4E5B6269, 0x8674C290, 0x22649421,
    0xE288A29B, 0x4017D836, 0x89E03806, 0xDC90864E, 0x1A7A2772, 0x55AD6C68, 0x0AA645D7,
    0x625B4005, 0xEA86BA49, 0x7AD6B2AC, 0x3CD35A56, 0x924813BA, 0xAFAB4941, 0x0CA6B6B6,
    0x1690D935, 0x2D614869, 0x502BC846, 0x1A8570A9, 0x85F6E4D6, 0x3901F3A2, 0x3AD2A29F,
    0x7562AD0B, 0x3F13DB2C, 0x6DFAB005, 0x5354CA01, 0x2921AEAC, 0xAD9660C8, 0xBAA6B531,
    0x401A460D, 0xCB8EC5B9, 0xAD25BDEA, 0x2A175968, 0xAEEF828D, 0x55FBFD5F, 0x545D158B,
    0x0A5594F0, 0x004055EC, 0x00000000

  EW_BITMAPS_TABLE( AppLogSystem )
    EW_BITMAP( AppLogSystem, Default )
EW_END_OF_BITMAP_RES( AppLogSystem )

/* Table with links to derived variants of the bitmap resource : 'App::LogSystem' */
EW_RES_WITHOUT_VARIANTS( AppLogSystem )

/* Bitmap resource : 'App::LogTest' */
EW_DEFINE_BITMAP_RES( AppLogTest )
  EW_BITMAP_FRAMES( AppLogTest, Default, EW_DRIVER_VARIANT_RGBA8888, 26, 24, 0 )
    EW_BITMAP_FRAME( 10, 14, 4, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppLogTest, Default )                   /* ratio 42.95 % */
    0x0409FF00, 0xC11FF020, 0xFE0F0581, 0x9E2ED00B, 0x8AB509BC, 0x89F25B31, 0x1530AF16,
    0x68C4662F, 0x8EC6A391, 0x1C82431B, 0xC7A4B1F9, 0x4594BC30, 0x1EEF5223, 0x630905BE,
    0x50699C22, 0xE26D41A6, 0x71E899CA, 0x0330CF06, 0x53E8A43C, 0x3D8AA3F0, 0x1E9146A2,
    0x2934BA2D, 0x9F50A553, 0xB54A754A, 0x3A023DA9, 0xC223F0A2, 0x71AF0FA6, 0xB075D6E9,
    0xCDACB0A9, 0x34FC5B00, 0xC8C1352A, 0x166B7696, 0xA8C4AA61, 0x753A2BD4, 0x6BC5E6EF,
    0xBEDEAF97, 0x09CD616B, 0xE1AF673C, 0xDEFF87BE, 0x12283305, 0xA83D0428, 0xA8833BE0,
    0x98B22652, 0xB0D00669, 0x1D398C04, 0x4318EC64, 0x861DEED7, 0x966935CC, 0x1FAFC7E5,
    0x05B07F01, 0x9AAB36A0, 0x4307E9B4, 0xC17BC4B2, 0x82B44DE5, 0xB59F6601, 0xBA8BA480,
    0x04F4681F, 0x9E6F1773, 0x13AAE104, 0x2CD632DE, 0xBA5826C9, 0x9E8700CA, 0x7A3C60DA,
    0xC8401EF5, 0x96458F0D, 0x47B6D436, 0xB890BF5F, 0x99CAE471, 0xF65EE73B, 0x8532787B,
    0x70A27126, 0x6CBB0B84, 0x027390E1, 0x27D9097D, 0xA1E6791E, 0xB4775EA7, 0x7B801775,
    0x5CB725C7, 0x57B1CF73, 0x08FE6C16, 0xFC44D110, 0x0E4017F9, 0x8463FC50, 0xA2E87F1B,
    0x58F03B8E, 0xE3819F40, 0x79DE5165, 0x9C1409E9, 0x1715C385, 0xD2147C61, 0x2D049F27,
    0x34C6D168, 0xE418861F, 0xF509403F, 0x449B2386, 0x056B0FB2, 0x8222C6CC, 0x60D82E30,
    0x08DA0F83, 0x59F384DF, 0x6A00A188, 0x25898228, 0xE2098643, 0xB0666342, 0x4CE717C4,
    0xE0939D57, 0x8262E81D, 0xA0442E31, 0xB95E108C, 0x40C36CE3, 0x090F4D53, 0x3DC540F8,
    0x66390A62, 0x814CFFA0, 0xDCAD2207, 0x6F93DAA9, 0x9CE32946, 0xA12959ED, 0xF3AE0CA2,
    0x28153C4E, 0xB6204711, 0x3FA20008, 0x62000E43, 0x01429E3F, 0x1E63A0EA, 0xF914C3C0,
    0x2C4A723C, 0xE8C94871, 0x4A3E0A8B, 0x4E7566A3, 0x4B40E39A, 0x260053F2, 0x8682DCAE,
    0x295E8452, 0xB8B32A49, 0x845BD6D1, 0x2C1BA6E2, 0xE21320C1, 0x29C2B340, 0xBE557725,
    0x06966BA7, 0x39CE3371, 0x85208824, 0xCA10DE19, 0x2D116799, 0xDF4244B3, 0x084E9398,
    0xD5A56257, 0x21381D90, 0x8CDB38C6, 0xD5094E63, 0xADE72A3A, 0xA38AE60E, 0x73D8F473,
    0x005D030F, 0x8428C8F2, 0x15840032, 0xC9C200F4, 0x63F48029, 0x9D6400F1, 0x193B8EC3,
    0x24884188, 0xC410349E, 0x2840F315, 0x78BE2D8A, 0xFFAD6FD1, 0xB65A8832, 0x06B108EA,
    0xB8ECBE1F, 0xD4AE2908, 0x433F2F21, 0x1E2ACAAA, 0x88828895, 0x4024F94B, 0xD0F33C1F,
    0xB0AB8103, 0x3E6C9B1E, 0xC073ECFA, 0xE8CE71CA, 0x80017B32, 0xE0190500, 0x2DCAD25C,
    0x8BF2B869, 0xDB2C5231, 0xE73B90CE, 0x87288961, 0x3E4F83D8, 0x617A400A, 0x83F7166C,
    0xB66DB531, 0x90D56B48, 0x5CD71006, 0x83CB82DE, 0x13107819, 0xD850A8EA, 0x0D2C0861,
    0xDCB7243D, 0x300B5F54, 0xA1FA3B00, 0xEC822949, 0xFD142A2C, 0x1E4680F8, 0xE02800C2,
    0x859393E3, 0x5B7AD2B4, 0x0CD5EB6B, 0x2A89396E, 0x6CE1B4B4, 0x714B3B3C, 0x60AE21C7,
    0x28390E03, 0x3B4E98EC, 0x7BF05CF0, 0x0F0BC3F0, 0x1FC4F1BC, 0xCAF2FC5F, 0x061B6F1F,
    0x0CE31CB8, 0xCC430E12, 0x3B724F93, 0x24C886ED, 0x1B0FA917, 0xC942648C, 0xC2AA2989,
    0xF056310B, 0x580A9BE6, 0xFB0D61AC, 0x7EFFC3EE, 0x4FC7F3FB, 0xDFF8FCBF, 0x570A7F4F,
    0x998D71AC, 0x648C8268, 0x6C3E87CC, 0xCA1862CD, 0x8A048268, 0x287705B0, 0x925F4BA5,
    0xE1EC3D47, 0xCCA59380, 0x8220116C, 0xC191DE16, 0x8390760D, 0x07A1041A, 0x12C1F843,
    0x1B84F092, 0x6703605C, 0x343885F0, 0x58C41683, 0xB3661306, 0x23506425, 0x01A0381B,
    0x0CC0E618, 0x0C41340E, 0x27C428E4, 0xA807B154, 0xAC748D49, 0x9512129B, 0x155E9AA8,
    0xA05E82C0, 0x9118C803, 0xF12C9592, 0x62CBA58A, 0xB924B712, 0x8BD16224, 0x1262645A,
    0x00000203, 0x00000000

  EW_BITMAPS_TABLE( AppLogTest )
    EW_BITMAP( AppLogTest, Default )
EW_END_OF_BITMAP_RES( AppLogTest )

/* Table with links to derived variants of the bitmap resource : 'App::LogTest' */
EW_RES_WITHOUT_VARIANTS( AppLogTest )

/* Initializer for the class 'App::Keyboard' */
void AppKeyboard__Init( AppKeyboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppKeyLetter__Init( &_this->Key, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key1, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key2, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key3, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key4, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key5, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key6, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key7, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key8, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key9, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key10, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key11, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key12, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key13, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key14, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key15, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key16, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key17, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key18, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key20, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key21, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key22, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key23, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key24, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key25, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key26, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key28, &_this->_XObject, 0 );
  AppKeyBmp__Init( &_this->KeybBmp1, &_this->_XObject, 0 );
  AppKeyBmp__Init( &_this->KeybBmp2, &_this->_XObject, 0 );
  AppKeySwitch__Init( &_this->KeySwitch, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->Touch, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeyboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const025E );
  CoreView_OnSetLayout((CoreView)&_this->Key, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key, _Const025F );
  _this->Key.KeyChar = 'Q';
  CoreView_OnSetLayout((CoreView)&_this->Key1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key1, _Const0260 );
  _this->Key1.KeyChar = 'W';
  CoreView_OnSetLayout((CoreView)&_this->Key2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key2, _Const0261 );
  _this->Key2.KeyChar = 'E';
  CoreView_OnSetLayout((CoreView)&_this->Key3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key3, _Const0262 );
  _this->Key3.KeyChar = 'R';
  CoreView_OnSetLayout((CoreView)&_this->Key4, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key4, _Const0263 );
  _this->Key4.KeyChar = 'T';
  CoreView_OnSetLayout((CoreView)&_this->Key5, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key5, _Const0264 );
  _this->Key5.KeyChar = 'Y';
  CoreView_OnSetLayout((CoreView)&_this->Key6, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key6, _Const0265 );
  _this->Key6.KeyChar = 'U';
  CoreView_OnSetLayout((CoreView)&_this->Key7, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key7, _Const0266 );
  _this->Key7.KeyChar = 'I';
  CoreView_OnSetLayout((CoreView)&_this->Key8, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key8, _Const0267 );
  _this->Key8.KeyChar = 'O';
  CoreView_OnSetLayout((CoreView)&_this->Key9, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key9, _Const0268 );
  _this->Key9.KeyChar = 'P';
  CoreView_OnSetLayout((CoreView)&_this->Key10, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key10, _Const0269 );
  _this->Key10.KeyChar = 'A';
  CoreView_OnSetLayout((CoreView)&_this->Key11, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key11, _Const026A );
  _this->Key11.KeyChar = 'S';
  CoreView_OnSetLayout((CoreView)&_this->Key12, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key12, _Const026B );
  _this->Key12.KeyChar = 'D';
  CoreView_OnSetLayout((CoreView)&_this->Key13, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key13, _Const026C );
  _this->Key13.KeyChar = 'F';
  CoreView_OnSetLayout((CoreView)&_this->Key14, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key14, _Const026D );
  _this->Key14.KeyChar = 'G';
  CoreView_OnSetLayout((CoreView)&_this->Key15, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key15, _Const026E );
  _this->Key15.KeyChar = 'H';
  CoreView_OnSetLayout((CoreView)&_this->Key16, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key16, _Const026F );
  _this->Key16.KeyChar = 'J';
  CoreView_OnSetLayout((CoreView)&_this->Key17, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key17, _Const0270 );
  _this->Key17.KeyChar = 'K';
  CoreView_OnSetLayout((CoreView)&_this->Key18, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key18, _Const0271 );
  _this->Key18.KeyChar = 'L';
  CoreView_OnSetLayout((CoreView)&_this->Key20, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key20, _Const0272 );
  _this->Key20.KeyChar = 'Z';
  CoreView_OnSetLayout((CoreView)&_this->Key21, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key21, _Const0273 );
  _this->Key21.KeyChar = 'X';
  CoreView_OnSetLayout((CoreView)&_this->Key22, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key22, _Const0274 );
  _this->Key22.KeyChar = 'C';
  CoreView_OnSetLayout((CoreView)&_this->Key23, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key23, _Const0275 );
  _this->Key23.KeyChar = 'V';
  CoreView_OnSetLayout((CoreView)&_this->Key24, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key24, _Const0276 );
  _this->Key24.KeyChar = 'B';
  CoreView_OnSetLayout((CoreView)&_this->Key25, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key25, _Const0277 );
  _this->Key25.KeyChar = 'N';
  CoreView_OnSetLayout((CoreView)&_this->Key26, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key26, _Const0278 );
  _this->Key26.KeyChar = 'M';
  CoreView_OnSetLayout((CoreView)&_this->Key28, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key28, _Const0279 );
  _this->Key28.KeyChar = 0x0020;
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp1, _Const027A );
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp2, _Const027B );
  CoreView_OnSetLayout((CoreView)&_this->KeySwitch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeySwitch, _Const027C );
  EwRetainString( &_this->KeySwitch.Word, EwLoadString( &_Const027D ));
  CoreView_OnSetLayout((CoreView)&_this->Touch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->Touch, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->Touch, _Const027E );
  CoreQuadView__OnSetPoint2( &_this->Touch, _Const027F );
  CoreQuadView__OnSetPoint1( &_this->Touch, _Const0280 );
  CoreTimer_OnSetPeriod( &_this->timer, 10000 );
  CoreTimer_OnSetEnabled( &_this->timer, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key17 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key18 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key20 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key21 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key22 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeySwitch ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Touch ), 0 );
  _this->KeybBmp1.Bitmap = EwLoadResource( &OldResourcesKeyCapsShift, ResourcesBitmap 
  );
  _this->KeybBmp2.Bitmap = EwLoadResource( &OldResourcesKeyBackspace, ResourcesBitmap 
  );
  _this->Touch.OnHold = EwNewSlot( _this, AppKeyboard_HoldSlot );
  _this->Touch.OnRelease = EwNewSlot( _this, AppKeyboard_ReleaseSlot );
  _this->Touch.OnPress = EwNewSlot( _this, AppKeyboard_PressSlot );
}

/* Re-Initializer for the class 'App::Keyboard' */
void AppKeyboard__ReInit( AppKeyboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppKeyLetter__ReInit( &_this->Key );
  AppKeyLetter__ReInit( &_this->Key1 );
  AppKeyLetter__ReInit( &_this->Key2 );
  AppKeyLetter__ReInit( &_this->Key3 );
  AppKeyLetter__ReInit( &_this->Key4 );
  AppKeyLetter__ReInit( &_this->Key5 );
  AppKeyLetter__ReInit( &_this->Key6 );
  AppKeyLetter__ReInit( &_this->Key7 );
  AppKeyLetter__ReInit( &_this->Key8 );
  AppKeyLetter__ReInit( &_this->Key9 );
  AppKeyLetter__ReInit( &_this->Key10 );
  AppKeyLetter__ReInit( &_this->Key11 );
  AppKeyLetter__ReInit( &_this->Key12 );
  AppKeyLetter__ReInit( &_this->Key13 );
  AppKeyLetter__ReInit( &_this->Key14 );
  AppKeyLetter__ReInit( &_this->Key15 );
  AppKeyLetter__ReInit( &_this->Key16 );
  AppKeyLetter__ReInit( &_this->Key17 );
  AppKeyLetter__ReInit( &_this->Key18 );
  AppKeyLetter__ReInit( &_this->Key20 );
  AppKeyLetter__ReInit( &_this->Key21 );
  AppKeyLetter__ReInit( &_this->Key22 );
  AppKeyLetter__ReInit( &_this->Key23 );
  AppKeyLetter__ReInit( &_this->Key24 );
  AppKeyLetter__ReInit( &_this->Key25 );
  AppKeyLetter__ReInit( &_this->Key26 );
  AppKeyLetter__ReInit( &_this->Key28 );
  AppKeyBmp__ReInit( &_this->KeybBmp1 );
  AppKeyBmp__ReInit( &_this->KeybBmp2 );
  AppKeySwitch__ReInit( &_this->KeySwitch );
  CoreSimpleTouchHandler__ReInit( &_this->Touch );
  CoreTimer__ReInit( &_this->timer );
}

/* Finalizer method for the class 'App::Keyboard' */
void AppKeyboard__Done( AppKeyboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeyboard );

  /* Finalize all embedded objects */
  AppKeyLetter__Done( &_this->Key );
  AppKeyLetter__Done( &_this->Key1 );
  AppKeyLetter__Done( &_this->Key2 );
  AppKeyLetter__Done( &_this->Key3 );
  AppKeyLetter__Done( &_this->Key4 );
  AppKeyLetter__Done( &_this->Key5 );
  AppKeyLetter__Done( &_this->Key6 );
  AppKeyLetter__Done( &_this->Key7 );
  AppKeyLetter__Done( &_this->Key8 );
  AppKeyLetter__Done( &_this->Key9 );
  AppKeyLetter__Done( &_this->Key10 );
  AppKeyLetter__Done( &_this->Key11 );
  AppKeyLetter__Done( &_this->Key12 );
  AppKeyLetter__Done( &_this->Key13 );
  AppKeyLetter__Done( &_this->Key14 );
  AppKeyLetter__Done( &_this->Key15 );
  AppKeyLetter__Done( &_this->Key16 );
  AppKeyLetter__Done( &_this->Key17 );
  AppKeyLetter__Done( &_this->Key18 );
  AppKeyLetter__Done( &_this->Key20 );
  AppKeyLetter__Done( &_this->Key21 );
  AppKeyLetter__Done( &_this->Key22 );
  AppKeyLetter__Done( &_this->Key23 );
  AppKeyLetter__Done( &_this->Key24 );
  AppKeyLetter__Done( &_this->Key25 );
  AppKeyLetter__Done( &_this->Key26 );
  AppKeyLetter__Done( &_this->Key28 );
  AppKeyBmp__Done( &_this->KeybBmp1 );
  AppKeyBmp__Done( &_this->KeybBmp2 );
  AppKeySwitch__Done( &_this->KeySwitch );
  CoreSimpleTouchHandler__Done( &_this->Touch );
  CoreTimer__Done( &_this->timer );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Keyboard' */
void AppKeyboard__Mark( AppKeyboard _this )
{
  EwMarkObject( &_this->Key );
  EwMarkObject( &_this->Key1 );
  EwMarkObject( &_this->Key2 );
  EwMarkObject( &_this->Key3 );
  EwMarkObject( &_this->Key4 );
  EwMarkObject( &_this->Key5 );
  EwMarkObject( &_this->Key6 );
  EwMarkObject( &_this->Key7 );
  EwMarkObject( &_this->Key8 );
  EwMarkObject( &_this->Key9 );
  EwMarkObject( &_this->Key10 );
  EwMarkObject( &_this->Key11 );
  EwMarkObject( &_this->Key12 );
  EwMarkObject( &_this->Key13 );
  EwMarkObject( &_this->Key14 );
  EwMarkObject( &_this->Key15 );
  EwMarkObject( &_this->Key16 );
  EwMarkObject( &_this->Key17 );
  EwMarkObject( &_this->Key18 );
  EwMarkObject( &_this->Key20 );
  EwMarkObject( &_this->Key21 );
  EwMarkObject( &_this->Key22 );
  EwMarkObject( &_this->Key23 );
  EwMarkObject( &_this->Key24 );
  EwMarkObject( &_this->Key25 );
  EwMarkObject( &_this->Key26 );
  EwMarkObject( &_this->Key28 );
  EwMarkObject( &_this->KeybBmp1 );
  EwMarkObject( &_this->KeybBmp2 );
  EwMarkObject( &_this->KeySwitch );
  EwMarkObject( &_this->Touch );
  EwMarkObject( &_this->timer );
  EwMarkObject( _this->key );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppKeyboard_UpdateLayout( AppKeyboard _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKeyboard_UpdateViewState( AppKeyboard _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::Keyboard.PressSlot()' */
void AppKeyboard_PressSlot( AppKeyboard _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->key = EwCastObject( _this->Super1.first, AppKey );

  while ( _this->key != 0 )
  {
    if ( EwIsPointInRect( _this->key->Super2.Bounds, _this->Touch.HittingPos ))
    {
      AppKey__OnSetPressed( _this->key, 1 );
      CoreGroup_InvalidateViewState((CoreGroup)_this->key );
      _this->Time = (XInt32)_this->timer.Time;
      return;
    }

    _this->key = EwCastObject( _this->key->Super3.next, AppKey );
  }
}

/* 'C' function for method : 'App::Keyboard.ReleaseSlot()' */
void AppKeyboard_ReleaseSlot( AppKeyboard _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->key != 0 )
  {
    AppKey__OnSetPressed( _this->key, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)_this->key );
  }
}

/* 'C' function for method : 'App::Keyboard.HoldSlot()' */
void AppKeyboard_HoldSlot( AppKeyboard _this, XObject sender )
{
  XInt32 t;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  t = (XInt32)_this->timer.Time;

  if (( t - _this->Time ) > 250 )
  {
    if ( _this->key != 0 )
    {
      AppKey__OnSetPressed( _this->key, 1 );
      AppKey__OnSetPressed( _this->key, 0 );
    }
  }
}

/* Variants derived from the class : 'App::Keyboard' */
EW_DEFINE_CLASS_VARIANTS( AppKeyboard )
EW_END_OF_CLASS_VARIANTS( AppKeyboard )

/* Virtual Method Table (VMT) for the class : 'App::Keyboard' */
EW_DEFINE_CLASS( AppKeyboard, CoreGroup, "App::Keyboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKeyboard_UpdateLayout,
  AppKeyboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppKeyboard )

/* Initializer for the class 'App::Key' */
void AppKey__Init( AppKey _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKey );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0281 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0282 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0283 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0284 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 4 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0000 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0285 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0285 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
}

/* Re-Initializer for the class 'App::Key' */
void AppKey__ReInit( AppKey _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
}

/* Finalizer method for the class 'App::Key' */
void AppKey__Done( AppKey _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKey );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Key' */
void AppKey__Mark( AppKey _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppKey_UpdateLayout( AppKey _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKey_UpdateViewState( AppKey _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->Pressed )
  {
    ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0286 );
  }
  else
  {
    ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0283 );
  }
}

/* 'C' function for method : 'App::Key.OnSetPressed()' */
void AppKey_OnSetPressed( AppKey _this, XBool value )
{
  if ( _this->Pressed == value )
    return;

  _this->Pressed = value;
}

/* Wrapper function for the virtual method : 'App::Key.OnSetPressed()' */
void AppKey__OnSetPressed( void* _this, XBool value )
{
  ((AppKey)_this)->_VMT->OnSetPressed((AppKey)_this, value );
}

/* Variants derived from the class : 'App::Key' */
EW_DEFINE_CLASS_VARIANTS( AppKey )
EW_END_OF_CLASS_VARIANTS( AppKey )

/* Virtual Method Table (VMT) for the class : 'App::Key' */
EW_DEFINE_CLASS( AppKey, CoreGroup, "App::Key" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKey_UpdateLayout,
  AppKey_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  AppKey_OnSetPressed,
EW_END_OF_CLASS( AppKey )

/* Bitmap resource : 'App::Fire4Bitmap' */
EW_DEFINE_BITMAP_RES( AppFire4Bitmap )
  EW_BITMAP_FRAMES( AppFire4Bitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 32, 0 )
    EW_BITMAP_FRAME( 9, 5, 3, 16, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppFire4Bitmap, Default )               /* ratio 31.25 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xDF50984C, 0xD0067DBE, 0x81877BB5, 0x0B8BC221,
    0x97C3DA07, 0x5B28814F, 0x9A78BCBE, 0xBD4C4BC5, 0x5816F87B, 0xA152C8CC, 0x312F95CB,
    0x51D8DCBA, 0x7E542750, 0x6409C494, 0x7EBF1F8B, 0x950A6004, 0x15403059, 0x5156893D,
    0x9D85C238, 0xE4B15323, 0xB43A04F8, 0x0698D565, 0x872381B1, 0x349544E2, 0x80E402D9,
    0xAA522FF2, 0xAAAE6F59, 0x1CADE995, 0xC602113A, 0x764B13FA, 0xC53B9947, 0x7783B5D2,
    0x9955AD61, 0xEBADD2E3, 0x97C96190, 0x25FF7473, 0x57EB751E, 0x2358BF17, 0x44E0EC27,
    0x89C4B8CC, 0x53616457, 0x7ABD1E2D, 0x5CC3200F, 0x2D504722, 0xA71563CC, 0x345389B6,
    0x3906D7D1, 0x0E431134, 0x63C4D935, 0xE4EA4D08, 0x6E34E0DA, 0x56D85AE0, 0x88753B7D,
    0x39BE6528, 0x9E0EC884, 0xF97A0A3C, 0x781006F6, 0x04E1F0F0, 0x27E14474, 0x0F3ADD0E,
    0x62850F90, 0xEA7AE795, 0xDD5A97E1, 0x9EAF234A, 0x186C073D, 0x9D34A265, 0x7457A951,
    0xFFDF17CC, 0x5C2BD32F, 0x05D64067, 0xA28C8F20, 0xB608711F, 0xD31B45A0, 0x3B8EC39C,
    0x8640E819, 0xC55CC61D, 0x24083E91, 0x73180354, 0x70E0732C, 0x09E24874, 0x21319023,
    0x7CB420C7, 0x648ADE78, 0x2A09C205, 0xC6E1187F, 0xC4C0BA1F, 0x40726398, 0x282389D2,
    0x00C093E5, 0x22A3F563, 0xC23C717F, 0x1D9023C9, 0x0890D495, 0x0F408626, 0x47D3E054,
    0x920CA526, 0x6CD632D0, 0x3C018353, 0x078FA148, 0x4E218C4E, 0xF3A8E738, 0xD9C39301,
    0x45641F87, 0x8B26891E, 0x4C22C608, 0x34244F32, 0xF47D1AC4, 0x630E1C32, 0x9BCC81D4,
    0x0CE305FC, 0x06403F35, 0x80BD2D4A, 0xA9936801, 0x308BA29D, 0x0F33C059, 0x0900103D,
    0x2E709085, 0x4D52D89A, 0x0153E3ED, 0x4E637D90, 0x0A68213A, 0x548819E7, 0xDF358992,
    0x9302A388, 0x4FE14171, 0xD81DDB76, 0x49B09226, 0x5D0C1036, 0xA98D01BC, 0x03E02564,
    0xC2F8F715, 0x3042348C, 0x9521C669, 0x1080E268, 0xDC33C858, 0x914C3C01, 0x4E66990F,
    0xA723D097, 0xB00712C4, 0x44C06E08, 0x0030E518, 0x1CF41584, 0xCC314B58, 0x97A5C12C,
    0xAAAAA1C3, 0xF7B532B6, 0x644303DE, 0x8BB80F11, 0x384DD352, 0xEFABE02C, 0x036CD270,
    0xFEF40B8E, 0x86195065, 0x81C9B250, 0xDFCA6296, 0x4384D9A2, 0x6C2E09CE, 0x893486E1,
    0x19852089, 0xABAC24DE, 0x79D27241, 0x88951E20, 0x62980882, 0x354CAB82, 0x0680D8DA,
    0x92609622, 0x20791518, 0x57C88AC2, 0x3B4EA395, 0xCAE81C1B, 0xD148C72F, 0xCCDC360C,
    0x8B9464F0, 0xCBD2147E, 0x4FEAC731, 0xF2448318, 0x16B9CF09, 0x893F2B45, 0x3BAC4B09,
    0x4123CCF1, 0xE28C8A42, 0xAA8B1D8A, 0x962608A1, 0x2386F424, 0xC422449B, 0x82F87C1A,
    0xBD2EC2B5, 0x6D624FAB, 0x24C9A230, 0x80454D30, 0x19319C66, 0xFC7B1A84, 0x230052B2,
    0x02934495, 0x19E4BB77, 0x80A98968, 0xCCD61AC5, 0x57035EE3, 0x310BC2A9, 0xC2993056,
    0x135C6B15, 0x40C374F9, 0x310F4D53, 0x33C70174, 0x8ED3ACE6, 0x63F59006, 0x92E200FB,
    0x9665207B, 0x4CB59E9D, 0x63DABAAC, 0x37C72202, 0x542681DF, 0xBE368681, 0x647CDDE3,
    0x4C52F4AB, 0x80FE0715, 0x3CC11E86, 0xBEEFFDAF, 0xA65C2701, 0x1F4F19A9, 0xBF9723F7,
    0xA8E44B7D, 0x07070EC3, 0x13A732CA, 0x3E4F9BE7, 0x099ED864, 0x2CE5EE67, 0xFCFC4067,
    0x350C84CB, 0x70C1C0D9, 0x5C8B0134, 0xCE7FA198, 0x0D029F9B, 0x24F59E92, 0x30760A06,
    0x828A2C04, 0xF025F940, 0x11312E82, 0x93C2748A, 0x83F055C7, 0x3BC75903, 0x468151E2,
    0x73160294, 0x063F5DB0, 0x04834200, 0x00000004, 0x00000000

  EW_BITMAPS_TABLE( AppFire4Bitmap )
    EW_BITMAP( AppFire4Bitmap, Default )
EW_END_OF_BITMAP_RES( AppFire4Bitmap )

/* Table with links to derived variants of the bitmap resource : 'App::Fire4Bitmap' */
EW_RES_WITHOUT_VARIANTS( AppFire4Bitmap )

/* Initializer for the class 'App::KeyLetter' */
void AppKeyLetter__Init( AppKeyLetter _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeyLetter );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0281 );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const0287 );
  _this->KeyChar = 'A';
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::KeyLetter' */
void AppKeyLetter__ReInit( AppKeyLetter _this )
{
  /* At first re-initialize the super class ... */
  AppKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::KeyLetter' */
void AppKeyLetter__Done( AppKeyLetter _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeyLetter );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  AppKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeyLetter' */
void AppKeyLetter__Mark( AppKeyLetter _this )
{
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  AppKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKeyLetter_UpdateViewState( AppKeyLetter _this, XSet aState )
{
  AppKey_UpdateViewState((AppKey)_this, aState );
  ViewsText_OnSetString( &_this->Text, EwNewStringChar( _this->KeyChar, 1 ));
}

/* 'C' function for method : 'App::KeyLetter.OnSetPressed()' */
void AppKeyLetter_OnSetPressed( AppKeyLetter _this, XBool value )
{
  if ( value == 1 )
  {
    {
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeNoKey, 
      _this->KeyChar, 1 );
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeNoKey, 
      _this->KeyChar, 0 );
    }
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'App::KeyLetter' */
EW_DEFINE_CLASS_VARIANTS( AppKeyLetter )
EW_END_OF_CLASS_VARIANTS( AppKeyLetter )

/* Virtual Method Table (VMT) for the class : 'App::KeyLetter' */
EW_DEFINE_CLASS( AppKeyLetter, AppKey, "App::KeyLetter" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKey_UpdateLayout,
  AppKeyLetter_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  AppKeyLetter_OnSetPressed,
EW_END_OF_CLASS( AppKeyLetter )

/* Initializer for the class 'App::KeyBmp' */
void AppKeyBmp__Init( AppKeyBmp _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeyBmp );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Image, _Const0281 );
  ViewsImage_OnSetFrameNumber( &_this->Image, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
  _this->Bitmap = EwLoadResource( &OldResourcesInformationIcon, ResourcesBitmap 
  );
}

/* Re-Initializer for the class 'App::KeyBmp' */
void AppKeyBmp__ReInit( AppKeyBmp _this )
{
  /* At first re-initialize the super class ... */
  AppKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'App::KeyBmp' */
void AppKeyBmp__Done( AppKeyBmp _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeyBmp );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  AppKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeyBmp' */
void AppKeyBmp__Mark( AppKeyBmp _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( _this->Bitmap );

  /* Give the super class a chance to mark its objects and references */
  AppKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKeyBmp_UpdateViewState( AppKeyBmp _this, XSet aState )
{
  AppKey_UpdateViewState((AppKey)_this, aState );
  ViewsImage_OnSetBitmap( &_this->Image, _this->Bitmap );
}

/* 'C' function for method : 'App::KeyBmp.OnSetPressed()' */
void AppKeyBmp_OnSetPressed( AppKeyBmp _this, XBool value )
{
  if ( value == 1 )
  {
    if ( _this->Bitmap == EwLoadResource( &OldResourcesKeyBackspace, ResourcesBitmap 
        ))
    {
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeBackspace, 
      0x0000, 1 );
      CoreRoot_DriveKeyboardHitting( CoreView__GetRoot( _this ), CoreKeyCodeBackspace, 
      0x0000, 0 );
    }
    else
      if ( _this->Bitmap == EwLoadResource( &OldResourcesKeyCapsShift, ResourcesBitmap 
          ))
      {
        AppKey k = EwCastObject( _this->Super4.Owner->first, AppKey );

        while ( k != 0 )
        {
          AppKeyLetter lk = EwCastObject( k, AppKeyLetter );

          if ( lk != 0 )
          {
            if ( lk->KeyChar < 'a' )
            {
              lk->KeyChar = EwGetCharLower( lk->KeyChar );
            }
            else
            {
              lk->KeyChar = EwGetCharUpper( lk->KeyChar );
            }

            CoreGroup_InvalidateViewState((CoreGroup)lk );
          }

          k = EwCastObject( k->Super3.next, AppKey );
        }
      }
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'App::KeyBmp' */
EW_DEFINE_CLASS_VARIANTS( AppKeyBmp )
EW_END_OF_CLASS_VARIANTS( AppKeyBmp )

/* Virtual Method Table (VMT) for the class : 'App::KeyBmp' */
EW_DEFINE_CLASS( AppKeyBmp, AppKey, "App::KeyBmp" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKey_UpdateLayout,
  AppKeyBmp_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  AppKeyBmp_OnSetPressed,
EW_END_OF_CLASS( AppKeyBmp )

/* Initializer for the class 'App::KeySwitch' */
void AppKeySwitch__Init( AppKeySwitch _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppKey__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeySwitch );

  /* ... and initialize objects, variables, properties, etc. */
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0281 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  EwRetainString( &_this->Word, EwLoadString( &_Const0288 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::KeySwitch' */
void AppKeySwitch__ReInit( AppKeySwitch _this )
{
  /* At first re-initialize the super class ... */
  AppKey__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::KeySwitch' */
void AppKeySwitch__Done( AppKeySwitch _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeySwitch );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );

  /* Release all used strings */
  EwReleaseString( &_this->Word );

  /* Don't forget to deinitialize the super class ... */
  AppKey__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeySwitch' */
void AppKeySwitch__Mark( AppKeySwitch _this )
{
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  AppKey__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppKeySwitch_UpdateViewState( AppKeySwitch _this, XSet aState )
{
  AppKey_UpdateViewState((AppKey)_this, aState );
  ViewsText_OnSetString( &_this->Text, _this->Word );
}

/* 'C' function for method : 'App::KeySwitch.OnSetPressed()' */
void AppKeySwitch_OnSetPressed( AppKeySwitch _this, XBool value )
{
  if ( value == 1 )
  {
    AppMattsKeyboard kbd = EwCastObject( _this->Super4.Owner->Super2.Owner, AppMattsKeyboard 
      );

    if ( CoreGroup_OnGetVisible((CoreGroup)&kbd->Numboard ) == 1 )
    {
      CoreGroup__OnSetVisible( &kbd->Keyboard, 1 );
      CoreGroup__OnSetVisible( &kbd->Numboard, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 0 );
    }
    else
    {
      CoreGroup__OnSetVisible( &kbd->Keyboard, 0 );
      CoreGroup__OnSetVisible( &kbd->Numboard, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 1 );
    }
  }

  _this->Super1.Pressed = value;
}

/* Variants derived from the class : 'App::KeySwitch' */
EW_DEFINE_CLASS_VARIANTS( AppKeySwitch )
EW_END_OF_CLASS_VARIANTS( AppKeySwitch )

/* Virtual Method Table (VMT) for the class : 'App::KeySwitch' */
EW_DEFINE_CLASS( AppKeySwitch, AppKey, "App::KeySwitch" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppKey_UpdateLayout,
  AppKeySwitch_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
  AppKeySwitch_OnSetPressed,
EW_END_OF_CLASS( AppKeySwitch )

/* Initializer for the class 'App::Numboard' */
void AppNumboard__Init( AppNumboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppKeyLetter__Init( &_this->Key, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key1, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key2, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key3, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key10, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key11, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key12, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key13, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key14, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key15, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key20, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key21, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key22, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key23, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key24, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key25, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key26, &_this->_XObject, 0 );
  AppKeyBmp__Init( &_this->KeybBmp1, &_this->_XObject, 0 );
  AppKeySwitch__Init( &_this->KeySwitch, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key27, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key16, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key28, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key29, &_this->_XObject, 0 );
  AppKeyBmp__Init( &_this->KeybBmp2, &_this->_XObject, 0 );
  AppKeyLetter__Init( &_this->Key30, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->Touch, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppNumboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0289 );
  CoreView_OnSetLayout((CoreView)&_this->Key, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key, _Const0260 );
  _this->Key.KeyChar = '7';
  CoreView_OnSetLayout((CoreView)&_this->Key1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key1, _Const0261 );
  _this->Key1.KeyChar = '8';
  CoreView_OnSetLayout((CoreView)&_this->Key2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key2, _Const0262 );
  _this->Key2.KeyChar = '9';
  CoreView_OnSetLayout((CoreView)&_this->Key3, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key3, _Const028A );
  _this->Key3.KeyChar = '+';
  CoreView_OnSetLayout((CoreView)&_this->Key10, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key10, _Const028B );
  _this->Key10.KeyChar = '4';
  CoreView_OnSetLayout((CoreView)&_this->Key11, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key11, _Const028C );
  _this->Key11.KeyChar = '5';
  CoreView_OnSetLayout((CoreView)&_this->Key12, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key12, _Const028D );
  _this->Key12.KeyChar = '6';
  CoreView_OnSetLayout((CoreView)&_this->Key13, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key13, _Const028E );
  _this->Key13.KeyChar = '-';
  CoreView_OnSetLayout((CoreView)&_this->Key14, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key14, _Const028F );
  _this->Key14.KeyChar = '0';
  CoreView_OnSetLayout((CoreView)&_this->Key15, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key15, _Const0290 );
  _this->Key15.KeyChar = '=';
  CoreView_OnSetLayout((CoreView)&_this->Key20, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key20, _Const0272 );
  _this->Key20.KeyChar = '1';
  CoreView_OnSetLayout((CoreView)&_this->Key21, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key21, _Const0273 );
  _this->Key21.KeyChar = '2';
  CoreView_OnSetLayout((CoreView)&_this->Key22, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key22, _Const0274 );
  _this->Key22.KeyChar = '3';
  CoreView_OnSetLayout((CoreView)&_this->Key23, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key23, _Const0291 );
  _this->Key23.KeyChar = '*';
  CoreView_OnSetLayout((CoreView)&_this->Key24, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key24, _Const0292 );
  _this->Key24.KeyChar = '/';
  CoreView_OnSetLayout((CoreView)&_this->Key25, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key25, _Const0293 );
  _this->Key25.KeyChar = '&';
  CoreView_OnSetLayout((CoreView)&_this->Key26, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key26, _Const0294 );
  _this->Key26.KeyChar = '.';
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp1, _Const0295 );
  CoreView_OnSetLayout((CoreView)&_this->KeySwitch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeySwitch, _Const027C );
  EwRetainString( &_this->KeySwitch.Word, EwLoadString( &_Const0296 ));
  CoreView_OnSetLayout((CoreView)&_this->Key27, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key27, _Const0297 );
  _this->Key27.KeyChar = 0x00A3;
  CoreView_OnSetLayout((CoreView)&_this->Key16, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key16, _Const0298 );
  _this->Key16.KeyChar = ')';
  CoreView_OnSetLayout((CoreView)&_this->Key28, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key28, _Const0299 );
  _this->Key28.KeyChar = '#';
  CoreView_OnSetLayout((CoreView)&_this->Key29, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key29, _Const029A );
  _this->Key29.KeyChar = '(';
  CoreView_OnSetLayout((CoreView)&_this->KeybBmp2, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->KeybBmp2, _Const029B );
  CoreView_OnSetLayout((CoreView)&_this->Key30, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Key30, _Const029C );
  _this->Key30.KeyChar = '@';
  CoreView_OnSetLayout((CoreView)&_this->Touch, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreQuadView__OnSetPoint4( &_this->Touch, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->Touch, _Const029D );
  CoreQuadView__OnSetPoint2( &_this->Touch, _Const029E );
  CoreQuadView__OnSetPoint1( &_this->Touch, _Const0280 );
  CoreTimer_OnSetPeriod( &_this->timer, 10000 );
  CoreTimer_OnSetEnabled( &_this->timer, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key12 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key13 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key14 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key15 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key20 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key21 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key22 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key23 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key24 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key25 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key26 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeySwitch ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key27 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key16 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key28 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key29 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeybBmp2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Key30 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Touch ), 0 );
  _this->KeybBmp1.Bitmap = EwLoadResource( &OldResourcesKeyShift, ResourcesBitmap 
  );
  _this->KeybBmp2.Bitmap = EwLoadResource( &OldResourcesKeyBackspace, ResourcesBitmap 
  );
  _this->Touch.OnRelease = EwNewSlot( _this, AppNumboard_ReleaseSlot );
  _this->Touch.OnPress = EwNewSlot( _this, AppNumboard_PressSlot );
}

/* Re-Initializer for the class 'App::Numboard' */
void AppNumboard__ReInit( AppNumboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppKeyLetter__ReInit( &_this->Key );
  AppKeyLetter__ReInit( &_this->Key1 );
  AppKeyLetter__ReInit( &_this->Key2 );
  AppKeyLetter__ReInit( &_this->Key3 );
  AppKeyLetter__ReInit( &_this->Key10 );
  AppKeyLetter__ReInit( &_this->Key11 );
  AppKeyLetter__ReInit( &_this->Key12 );
  AppKeyLetter__ReInit( &_this->Key13 );
  AppKeyLetter__ReInit( &_this->Key14 );
  AppKeyLetter__ReInit( &_this->Key15 );
  AppKeyLetter__ReInit( &_this->Key20 );
  AppKeyLetter__ReInit( &_this->Key21 );
  AppKeyLetter__ReInit( &_this->Key22 );
  AppKeyLetter__ReInit( &_this->Key23 );
  AppKeyLetter__ReInit( &_this->Key24 );
  AppKeyLetter__ReInit( &_this->Key25 );
  AppKeyLetter__ReInit( &_this->Key26 );
  AppKeyBmp__ReInit( &_this->KeybBmp1 );
  AppKeySwitch__ReInit( &_this->KeySwitch );
  AppKeyLetter__ReInit( &_this->Key27 );
  AppKeyLetter__ReInit( &_this->Key16 );
  AppKeyLetter__ReInit( &_this->Key28 );
  AppKeyLetter__ReInit( &_this->Key29 );
  AppKeyBmp__ReInit( &_this->KeybBmp2 );
  AppKeyLetter__ReInit( &_this->Key30 );
  CoreSimpleTouchHandler__ReInit( &_this->Touch );
  CoreTimer__ReInit( &_this->timer );
}

/* Finalizer method for the class 'App::Numboard' */
void AppNumboard__Done( AppNumboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppNumboard );

  /* Finalize all embedded objects */
  AppKeyLetter__Done( &_this->Key );
  AppKeyLetter__Done( &_this->Key1 );
  AppKeyLetter__Done( &_this->Key2 );
  AppKeyLetter__Done( &_this->Key3 );
  AppKeyLetter__Done( &_this->Key10 );
  AppKeyLetter__Done( &_this->Key11 );
  AppKeyLetter__Done( &_this->Key12 );
  AppKeyLetter__Done( &_this->Key13 );
  AppKeyLetter__Done( &_this->Key14 );
  AppKeyLetter__Done( &_this->Key15 );
  AppKeyLetter__Done( &_this->Key20 );
  AppKeyLetter__Done( &_this->Key21 );
  AppKeyLetter__Done( &_this->Key22 );
  AppKeyLetter__Done( &_this->Key23 );
  AppKeyLetter__Done( &_this->Key24 );
  AppKeyLetter__Done( &_this->Key25 );
  AppKeyLetter__Done( &_this->Key26 );
  AppKeyBmp__Done( &_this->KeybBmp1 );
  AppKeySwitch__Done( &_this->KeySwitch );
  AppKeyLetter__Done( &_this->Key27 );
  AppKeyLetter__Done( &_this->Key16 );
  AppKeyLetter__Done( &_this->Key28 );
  AppKeyLetter__Done( &_this->Key29 );
  AppKeyBmp__Done( &_this->KeybBmp2 );
  AppKeyLetter__Done( &_this->Key30 );
  CoreSimpleTouchHandler__Done( &_this->Touch );
  CoreTimer__Done( &_this->timer );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Numboard' */
void AppNumboard__Mark( AppNumboard _this )
{
  EwMarkObject( &_this->Key );
  EwMarkObject( &_this->Key1 );
  EwMarkObject( &_this->Key2 );
  EwMarkObject( &_this->Key3 );
  EwMarkObject( &_this->Key10 );
  EwMarkObject( &_this->Key11 );
  EwMarkObject( &_this->Key12 );
  EwMarkObject( &_this->Key13 );
  EwMarkObject( &_this->Key14 );
  EwMarkObject( &_this->Key15 );
  EwMarkObject( &_this->Key20 );
  EwMarkObject( &_this->Key21 );
  EwMarkObject( &_this->Key22 );
  EwMarkObject( &_this->Key23 );
  EwMarkObject( &_this->Key24 );
  EwMarkObject( &_this->Key25 );
  EwMarkObject( &_this->Key26 );
  EwMarkObject( &_this->KeybBmp1 );
  EwMarkObject( &_this->KeySwitch );
  EwMarkObject( &_this->Key27 );
  EwMarkObject( &_this->Key16 );
  EwMarkObject( &_this->Key28 );
  EwMarkObject( &_this->Key29 );
  EwMarkObject( &_this->KeybBmp2 );
  EwMarkObject( &_this->Key30 );
  EwMarkObject( &_this->Touch );
  EwMarkObject( &_this->timer );
  EwMarkObject( _this->key );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppNumboard_UpdateLayout( AppNumboard _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppNumboard_UpdateViewState( AppNumboard _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::Numboard.PressSlot()' */
void AppNumboard_PressSlot( AppNumboard _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->key = EwCastObject( _this->Super1.first, AppKey );

  while ( _this->key != 0 )
  {
    if ( EwIsPointInRect( _this->key->Super2.Bounds, _this->Touch.HittingPos ))
    {
      AppKey__OnSetPressed( _this->key, 1 );
      CoreGroup_InvalidateViewState((CoreGroup)_this->key );
      return;
    }

    _this->key = EwCastObject( _this->key->Super3.next, AppKey );
  }
}

/* 'C' function for method : 'App::Numboard.ReleaseSlot()' */
void AppNumboard_ReleaseSlot( AppNumboard _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->key != 0 )
  {
    AppKey__OnSetPressed( _this->key, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)_this->key );
    _this->key = 0;
  }
}

/* Variants derived from the class : 'App::Numboard' */
EW_DEFINE_CLASS_VARIANTS( AppNumboard )
EW_END_OF_CLASS_VARIANTS( AppNumboard )

/* Virtual Method Table (VMT) for the class : 'App::Numboard' */
EW_DEFINE_CLASS( AppNumboard, CoreGroup, "App::Numboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppNumboard_UpdateLayout,
  AppNumboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppNumboard )

/* Initializer for the class 'App::MattsKeyboard' */
void AppMattsKeyboard__Init( AppMattsKeyboard _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppKeyboard__Init( &_this->Keyboard, &_this->_XObject, 0 );
  AppNumboard__Init( &_this->Numboard, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMattsKeyboard );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const025E );
  CoreView_OnSetLayout((CoreView)&_this->Keyboard, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Keyboard, _Const025E );
  CoreView_OnSetLayout((CoreView)&_this->Numboard, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Numboard, _Const025E );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Numboard, 0 );
  CoreGroup__OnSetVisible( &_this->Numboard, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Keyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Numboard ), 0 );
}

/* Re-Initializer for the class 'App::MattsKeyboard' */
void AppMattsKeyboard__ReInit( AppMattsKeyboard _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppKeyboard__ReInit( &_this->Keyboard );
  AppNumboard__ReInit( &_this->Numboard );
}

/* Finalizer method for the class 'App::MattsKeyboard' */
void AppMattsKeyboard__Done( AppMattsKeyboard _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMattsKeyboard );

  /* Finalize all embedded objects */
  AppKeyboard__Done( &_this->Keyboard );
  AppNumboard__Done( &_this->Numboard );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MattsKeyboard' */
void AppMattsKeyboard__Mark( AppMattsKeyboard _this )
{
  EwMarkObject( &_this->Keyboard );
  EwMarkObject( &_this->Numboard );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppMattsKeyboard_UpdateLayout( AppMattsKeyboard _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMattsKeyboard_UpdateViewState( AppMattsKeyboard _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::MattsKeyboard' */
EW_DEFINE_CLASS_VARIANTS( AppMattsKeyboard )
EW_END_OF_CLASS_VARIANTS( AppMattsKeyboard )

/* Virtual Method Table (VMT) for the class : 'App::MattsKeyboard' */
EW_DEFINE_CLASS( AppMattsKeyboard, CoreGroup, "App::MattsKeyboard" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppMattsKeyboard_UpdateLayout,
  AppMattsKeyboard_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMattsKeyboard )

/* Initializer for the class 'App::DeviceClass' */
void AppDeviceClass__Init( AppDeviceClass _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesDeviceClass__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEvent__Init( &_this->MeshListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->SiteChangedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->MeshStatusChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FireEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FirstAidEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ResetEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EvacuateEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->SecurityEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->DisableEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->TestEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FaultEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FireListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ExportProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->StartProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EndProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->OnTestChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->FaultListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->EventListChangedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->LogListChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->AccessModeChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->WriteProtectedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->DFUEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->GotoFireDisplay, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ConfirmFireAvailable, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->AcknowledgeFireAvailable, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->TimeChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ConfirmEventAvailable, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->AcknowledgeEventAvailable, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->SafeStateEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->RBUDetectedEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->RBUProgressEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->DisablementChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->NewZoneAndCombi, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->NewBitmapLogoEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->AcumeshEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->ResoudStateEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->UpdateDeviceEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->MeshUnitChangeEvent, &_this->_XObject, 0 );
  CoreSystemEvent__Init( &_this->GotoSysPageEvent, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDeviceClass );
}

/* Re-Initializer for the class 'App::DeviceClass' */
void AppDeviceClass__ReInit( AppDeviceClass _this )
{
  /* At first re-initialize the super class ... */
  TemplatesDeviceClass__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEvent__ReInit( &_this->MeshListChangeEvent );
  CoreSystemEvent__ReInit( &_this->SiteChangedEvent );
  CoreSystemEvent__ReInit( &_this->MeshStatusChangeEvent );
  CoreSystemEvent__ReInit( &_this->FireEvent );
  CoreSystemEvent__ReInit( &_this->FirstAidEvent );
  CoreSystemEvent__ReInit( &_this->ResetEvent );
  CoreSystemEvent__ReInit( &_this->EvacuateEvent );
  CoreSystemEvent__ReInit( &_this->SecurityEvent );
  CoreSystemEvent__ReInit( &_this->DisableEvent );
  CoreSystemEvent__ReInit( &_this->TestEvent );
  CoreSystemEvent__ReInit( &_this->FaultEvent );
  CoreSystemEvent__ReInit( &_this->FireListChangeEvent );
  CoreSystemEvent__ReInit( &_this->ExportProgressEvent );
  CoreSystemEvent__ReInit( &_this->StartProgressEvent );
  CoreSystemEvent__ReInit( &_this->EndProgressEvent );
  CoreSystemEvent__ReInit( &_this->OnTestChangeEvent );
  CoreSystemEvent__ReInit( &_this->FaultListChangeEvent );
  CoreSystemEvent__ReInit( &_this->EventListChangedEvent );
  CoreSystemEvent__ReInit( &_this->LogListChangeEvent );
  CoreSystemEvent__ReInit( &_this->AccessModeChangeEvent );
  CoreSystemEvent__ReInit( &_this->WriteProtectedEvent );
  CoreSystemEvent__ReInit( &_this->DFUEvent );
  CoreSystemEvent__ReInit( &_this->GotoFireDisplay );
  CoreSystemEvent__ReInit( &_this->ConfirmFireAvailable );
  CoreSystemEvent__ReInit( &_this->AcknowledgeFireAvailable );
  CoreSystemEvent__ReInit( &_this->TimeChangeEvent );
  CoreSystemEvent__ReInit( &_this->ConfirmEventAvailable );
  CoreSystemEvent__ReInit( &_this->AcknowledgeEventAvailable );
  CoreSystemEvent__ReInit( &_this->SafeStateEvent );
  CoreSystemEvent__ReInit( &_this->RBUDetectedEvent );
  CoreSystemEvent__ReInit( &_this->RBUProgressEvent );
  CoreSystemEvent__ReInit( &_this->DisablementChangeEvent );
  CoreSystemEvent__ReInit( &_this->NewZoneAndCombi );
  CoreSystemEvent__ReInit( &_this->NewBitmapLogoEvent );
  CoreSystemEvent__ReInit( &_this->AcumeshEvent );
  CoreSystemEvent__ReInit( &_this->ResoudStateEvent );
  CoreSystemEvent__ReInit( &_this->UpdateDeviceEvent );
  CoreSystemEvent__ReInit( &_this->MeshUnitChangeEvent );
  CoreSystemEvent__ReInit( &_this->GotoSysPageEvent );
}

/* Finalizer method for the class 'App::DeviceClass' */
void AppDeviceClass__Done( AppDeviceClass _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDeviceClass );

  /* Finalize all embedded objects */
  CoreSystemEvent__Done( &_this->MeshListChangeEvent );
  CoreSystemEvent__Done( &_this->SiteChangedEvent );
  CoreSystemEvent__Done( &_this->MeshStatusChangeEvent );
  CoreSystemEvent__Done( &_this->FireEvent );
  CoreSystemEvent__Done( &_this->FirstAidEvent );
  CoreSystemEvent__Done( &_this->ResetEvent );
  CoreSystemEvent__Done( &_this->EvacuateEvent );
  CoreSystemEvent__Done( &_this->SecurityEvent );
  CoreSystemEvent__Done( &_this->DisableEvent );
  CoreSystemEvent__Done( &_this->TestEvent );
  CoreSystemEvent__Done( &_this->FaultEvent );
  CoreSystemEvent__Done( &_this->FireListChangeEvent );
  CoreSystemEvent__Done( &_this->ExportProgressEvent );
  CoreSystemEvent__Done( &_this->StartProgressEvent );
  CoreSystemEvent__Done( &_this->EndProgressEvent );
  CoreSystemEvent__Done( &_this->OnTestChangeEvent );
  CoreSystemEvent__Done( &_this->FaultListChangeEvent );
  CoreSystemEvent__Done( &_this->EventListChangedEvent );
  CoreSystemEvent__Done( &_this->LogListChangeEvent );
  CoreSystemEvent__Done( &_this->AccessModeChangeEvent );
  CoreSystemEvent__Done( &_this->WriteProtectedEvent );
  CoreSystemEvent__Done( &_this->DFUEvent );
  CoreSystemEvent__Done( &_this->GotoFireDisplay );
  CoreSystemEvent__Done( &_this->ConfirmFireAvailable );
  CoreSystemEvent__Done( &_this->AcknowledgeFireAvailable );
  CoreSystemEvent__Done( &_this->TimeChangeEvent );
  CoreSystemEvent__Done( &_this->ConfirmEventAvailable );
  CoreSystemEvent__Done( &_this->AcknowledgeEventAvailable );
  CoreSystemEvent__Done( &_this->SafeStateEvent );
  CoreSystemEvent__Done( &_this->RBUDetectedEvent );
  CoreSystemEvent__Done( &_this->RBUProgressEvent );
  CoreSystemEvent__Done( &_this->DisablementChangeEvent );
  CoreSystemEvent__Done( &_this->NewZoneAndCombi );
  CoreSystemEvent__Done( &_this->NewBitmapLogoEvent );
  CoreSystemEvent__Done( &_this->AcumeshEvent );
  CoreSystemEvent__Done( &_this->ResoudStateEvent );
  CoreSystemEvent__Done( &_this->UpdateDeviceEvent );
  CoreSystemEvent__Done( &_this->MeshUnitChangeEvent );
  CoreSystemEvent__Done( &_this->GotoSysPageEvent );

  /* Don't forget to deinitialize the super class ... */
  TemplatesDeviceClass__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DeviceClass' */
void AppDeviceClass__Mark( AppDeviceClass _this )
{
  EwMarkObject( &_this->MeshListChangeEvent );
  EwMarkObject( &_this->SiteChangedEvent );
  EwMarkObject( &_this->MeshStatusChangeEvent );
  EwMarkObject( &_this->FireEvent );
  EwMarkObject( &_this->FirstAidEvent );
  EwMarkObject( &_this->ResetEvent );
  EwMarkObject( &_this->EvacuateEvent );
  EwMarkObject( &_this->SecurityEvent );
  EwMarkObject( &_this->DisableEvent );
  EwMarkObject( &_this->TestEvent );
  EwMarkObject( &_this->FaultEvent );
  EwMarkObject( &_this->FireListChangeEvent );
  EwMarkObject( &_this->ExportProgressEvent );
  EwMarkObject( &_this->StartProgressEvent );
  EwMarkObject( &_this->EndProgressEvent );
  EwMarkObject( &_this->OnTestChangeEvent );
  EwMarkObject( &_this->FaultListChangeEvent );
  EwMarkObject( &_this->EventListChangedEvent );
  EwMarkObject( &_this->LogListChangeEvent );
  EwMarkObject( &_this->AccessModeChangeEvent );
  EwMarkObject( &_this->WriteProtectedEvent );
  EwMarkObject( &_this->DFUEvent );
  EwMarkObject( &_this->GotoFireDisplay );
  EwMarkObject( &_this->ConfirmFireAvailable );
  EwMarkObject( &_this->AcknowledgeFireAvailable );
  EwMarkObject( &_this->TimeChangeEvent );
  EwMarkObject( &_this->ConfirmEventAvailable );
  EwMarkObject( &_this->AcknowledgeEventAvailable );
  EwMarkObject( &_this->SafeStateEvent );
  EwMarkObject( &_this->RBUDetectedEvent );
  EwMarkObject( &_this->RBUProgressEvent );
  EwMarkObject( &_this->DisablementChangeEvent );
  EwMarkObject( &_this->NewZoneAndCombi );
  EwMarkObject( &_this->NewBitmapLogoEvent );
  EwMarkObject( &_this->AcumeshEvent );
  EwMarkObject( &_this->ResoudStateEvent );
  EwMarkObject( &_this->UpdateDeviceEvent );
  EwMarkObject( &_this->MeshUnitChangeEvent );
  EwMarkObject( &_this->GotoSysPageEvent );

  /* Give the super class a chance to mark its objects and references */
  TemplatesDeviceClass__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::DeviceClass.OnSetProperty()' */
void AppDeviceClass_OnSetProperty( AppDeviceClass _this, XInt32 value )
{
  if ( _this->Property == value )
    return;

  _this->Property = value;
  {
    /*
       TO DO:

       You can call a function of your own device API or you simply
       modify a variable existing in your middleware to reflect the
       new value:

       YourDevice_SetSomeValue( value );

       or

       YourDevice_SomeVariable = value;
    */
  }
  EwNotifyRefObservers( EwNewRef( _this, AppDeviceClass_OnGetProperty, AppDeviceClass_OnSetProperty 
    ), 0 );
}

/* This method is intended to be called by the device to notify the GUI application 
   about an alternation of its setting or state value. */
void AppDeviceClass_UpdateProperty( AppDeviceClass _this, XInt32 aNewValue )
{
  if ( aNewValue != _this->Property )
  {
    _this->Property = aNewValue;
    EwNotifyRefObservers( EwNewRef( _this, AppDeviceClass_OnGetProperty, AppDeviceClass_OnSetProperty 
      ), 0 );
  }
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.UpdateProperty()' */
void AppDeviceClass__UpdateProperty( void* _this, XInt32 aNewValue )
{
  AppDeviceClass_UpdateProperty((AppDeviceClass)_this, aNewValue );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerMeshListChangeEvent( AppDeviceClass _this, XInt16 total, 
  XInt16 active, XInt16 meshed, XInt16 extra )
{
  AppMeshStatus status = EwNewObject( AppMeshStatus, 0 );

  status->total = total;
  status->active = active;
  status->meshed = meshed;
  status->extra = extra;
  CoreSystemEvent_Trigger( &_this->MeshListChangeEvent, ((XObject)status ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerMeshListChangeEvent()' */
void AppDeviceClass__TriggerMeshListChangeEvent( void* _this, XInt16 total, XInt16 
  active, XInt16 meshed, XInt16 extra )
{
  AppDeviceClass_TriggerMeshListChangeEvent((AppDeviceClass)_this, total, active
  , meshed, extra );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerSiteChangedEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->SiteChangedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerSiteChangedEvent()' */
void AppDeviceClass__TriggerSiteChangedEvent( void* _this )
{
  AppDeviceClass_TriggerSiteChangedEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerMeshStatusChangeEvent( AppDeviceClass _this, XInt16 wantedstage, 
  XInt16 currentstage )
{
  AppMeshStage stage = EwNewObject( AppMeshStage, 0 );

  stage->currentstage = currentstage;
  stage->wantedstage = wantedstage;
  CoreSystemEvent_Trigger( &_this->MeshStatusChangeEvent, ((XObject)stage ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerMeshStatusChangeEvent()' */
void AppDeviceClass__TriggerMeshStatusChangeEvent( void* _this, XInt16 wantedstage, 
  XInt16 currentstage )
{
  AppDeviceClass_TriggerMeshStatusChangeEvent((AppDeviceClass)_this, wantedstage
  , currentstage );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerFireEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerFireEvent()' */
void AppDeviceClass__TriggerFireEvent( void* _this )
{
  AppDeviceClass_TriggerFireEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerFirstAidEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerFirstAidEvent()' */
void AppDeviceClass__TriggerFirstAidEvent( void* _this )
{
  AppDeviceClass_TriggerFirstAidEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerResetEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerResetEvent()' */
void AppDeviceClass__TriggerResetEvent( void* _this )
{
  AppDeviceClass_TriggerResetEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerEvacuateEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerEvacuateEvent()' */
void AppDeviceClass__TriggerEvacuateEvent( void* _this )
{
  AppDeviceClass_TriggerEvacuateEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerSecurityEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->SecurityEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerSecurityEvent()' */
void AppDeviceClass__TriggerSecurityEvent( void* _this )
{
  AppDeviceClass_TriggerSecurityEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerDisableEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->DisableEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerDisableEvent()' */
void AppDeviceClass__TriggerDisableEvent( void* _this )
{
  AppDeviceClass_TriggerDisableEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerTestEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->TestEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerTestEvent()' */
void AppDeviceClass__TriggerTestEvent( void* _this )
{
  AppDeviceClass_TriggerTestEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerFaultEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FaultEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerFaultEvent()' */
void AppDeviceClass__TriggerFaultEvent( void* _this )
{
  AppDeviceClass_TriggerFaultEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerFireListChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FireListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerFireListChangeEvent()' */
void AppDeviceClass__TriggerFireListChangeEvent( void* _this )
{
  AppDeviceClass_TriggerFireListChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerExportProgressEvent( AppDeviceClass _this, XInt32 amount )
{
  AppProgress p = EwNewObject( AppProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->ExportProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerExportProgressEvent()' */
void AppDeviceClass__TriggerExportProgressEvent( void* _this, XInt32 amount )
{
  AppDeviceClass_TriggerExportProgressEvent((AppDeviceClass)_this, amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerStartProgressEvent( AppDeviceClass _this, XInt32 amount )
{
  AppProgress p = EwNewObject( AppProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->StartProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerStartProgressEvent()' */
void AppDeviceClass__TriggerStartProgressEvent( void* _this, XInt32 amount )
{
  AppDeviceClass_TriggerStartProgressEvent((AppDeviceClass)_this, amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerEndProgressEvent( AppDeviceClass _this, XInt32 amount )
{
  AppProgress p = EwNewObject( AppProgress, 0 );

  p->amount = amount;
  CoreSystemEvent_Trigger( &_this->EndProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerEndProgressEvent()' */
void AppDeviceClass__TriggerEndProgressEvent( void* _this, XInt32 amount )
{
  AppDeviceClass_TriggerEndProgressEvent((AppDeviceClass)_this, amount );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerOnTestChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->OnTestChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerOnTestChangeEvent()' */
void AppDeviceClass__TriggerOnTestChangeEvent( void* _this )
{
  AppDeviceClass_TriggerOnTestChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerFaultListChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->FaultListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerFaultListChangeEvent()' */
void AppDeviceClass__TriggerFaultListChangeEvent( void* _this )
{
  AppDeviceClass_TriggerFaultListChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerEventListChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->EventListChangedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerEventListChangeEvent()' */
void AppDeviceClass__TriggerEventListChangeEvent( void* _this )
{
  AppDeviceClass_TriggerEventListChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerLogListChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->LogListChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerLogListChangeEvent()' */
void AppDeviceClass__TriggerLogListChangeEvent( void* _this )
{
  AppDeviceClass_TriggerLogListChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerAccessModeChangeEvent( AppDeviceClass _this, XInt32 level )
{
  AppAccess access = EwNewObject( AppAccess, 0 );

  access->Level = level;
  CoreSystemEvent_Trigger( &_this->AccessModeChangeEvent, ((XObject)access ), 0 
  );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerAccessModeChangeEvent()' */
void AppDeviceClass__TriggerAccessModeChangeEvent( void* _this, XInt32 level )
{
  AppDeviceClass_TriggerAccessModeChangeEvent((AppDeviceClass)_this, level );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerWriteProtectedEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->WriteProtectedEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerWriteProtectedEvent()' */
void AppDeviceClass__TriggerWriteProtectedEvent( void* _this )
{
  AppDeviceClass_TriggerWriteProtectedEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerDFUEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->DFUEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerDFUEvent()' */
void AppDeviceClass__TriggerDFUEvent( void* _this )
{
  AppDeviceClass_TriggerDFUEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerGotoFireDisplay( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->GotoFireDisplay, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerGotoFireDisplay()' */
void AppDeviceClass__TriggerGotoFireDisplay( void* _this )
{
  AppDeviceClass_TriggerGotoFireDisplay((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerConfirmFireAvailable( AppDeviceClass _this, XBool on )
{
  AppButtonState conf = EwNewObject( AppButtonState, 0 );

  conf->on = on;
  CoreSystemEvent_Trigger( &_this->ConfirmFireAvailable, ((XObject)conf ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerConfirmFireAvailable()' */
void AppDeviceClass__TriggerConfirmFireAvailable( void* _this, XBool on )
{
  AppDeviceClass_TriggerConfirmFireAvailable((AppDeviceClass)_this, on );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerAcknowledgeFireAvailable( AppDeviceClass _this, XBool 
  on )
{
  AppButtonState conf = EwNewObject( AppButtonState, 0 );

  conf->on = on;
  CoreSystemEvent_Trigger( &_this->AcknowledgeFireAvailable, ((XObject)conf ), 0 
  );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerAcknowledgeFireAvailable()' */
void AppDeviceClass__TriggerAcknowledgeFireAvailable( void* _this, XBool on )
{
  AppDeviceClass_TriggerAcknowledgeFireAvailable((AppDeviceClass)_this, on );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerTimeChangeEvent( AppDeviceClass _this, XBool daytime )
{
  AppBoolean conf = EwNewObject( AppBoolean, 0 );

  conf->State = daytime;
  CoreSystemEvent_Trigger( &_this->TimeChangeEvent, ((XObject)conf ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerTimeChangeEvent()' */
void AppDeviceClass__TriggerTimeChangeEvent( void* _this, XBool daytime )
{
  AppDeviceClass_TriggerTimeChangeEvent((AppDeviceClass)_this, daytime );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerConfirmEventAvailable( AppDeviceClass _this, XBool on )
{
  AppButtonState conf = EwNewObject( AppButtonState, 0 );

  conf->on = on;
  CoreSystemEvent_Trigger( &_this->ConfirmEventAvailable, ((XObject)conf ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerConfirmEventAvailable()' */
void AppDeviceClass__TriggerConfirmEventAvailable( void* _this, XBool on )
{
  AppDeviceClass_TriggerConfirmEventAvailable((AppDeviceClass)_this, on );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerAcknowledgeEventAvailable( AppDeviceClass _this, XBool 
  on )
{
  AppButtonState conf = EwNewObject( AppButtonState, 0 );

  conf->on = on;
  CoreSystemEvent_Trigger( &_this->AcknowledgeEventAvailable, ((XObject)conf ), 
  0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerAcknowledgeEventAvailable()' */
void AppDeviceClass__TriggerAcknowledgeEventAvailable( void* _this, XBool on )
{
  AppDeviceClass_TriggerAcknowledgeEventAvailable((AppDeviceClass)_this, on );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerSafeStateEvent( AppDeviceClass _this, XBool on )
{
  AppBoolean b = EwNewObject( AppBoolean, 0 );

  b->State = on;
  CoreSystemEvent_Trigger( &_this->SafeStateEvent, ((XObject)b ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerSafeStateEvent()' */
void AppDeviceClass__TriggerSafeStateEvent( void* _this, XBool on )
{
  AppDeviceClass_TriggerSafeStateEvent((AppDeviceClass)_this, on );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerRBUDetectedEvent( AppDeviceClass _this, XInt32 device_ptr )
{
  AppPtrClass p = EwNewObject( AppPtrClass, 0 );

  p->ptr = device_ptr;
  CoreSystemEvent_Trigger( &_this->RBUDetectedEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerRBUDetectedEvent()' */
void AppDeviceClass__TriggerRBUDetectedEvent( void* _this, XInt32 device_ptr )
{
  AppDeviceClass_TriggerRBUDetectedEvent((AppDeviceClass)_this, device_ptr );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerRBUProgressEvent( AppDeviceClass _this, XInt32 progress, 
  XInt32 char_ptr )
{
  AppRBUProgress p = EwNewObject( AppRBUProgress, 0 );
  XString errmsg = 0;

  if ( char_ptr != 0 )
    errmsg = EwNewStringAnsi( (const char*) char_ptr );

  p->progress = progress;
  EwRetainString( &p->errmsg, errmsg );
  CoreSystemEvent_Trigger( &_this->RBUProgressEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerRBUProgressEvent()' */
void AppDeviceClass__TriggerRBUProgressEvent( void* _this, XInt32 progress, XInt32 
  char_ptr )
{
  AppDeviceClass_TriggerRBUProgressEvent((AppDeviceClass)_this, progress, char_ptr );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerDisablementChangeEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->DisablementChangeEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerDisablementChangeEvent()' */
void AppDeviceClass__TriggerDisablementChangeEvent( void* _this )
{
  AppDeviceClass_TriggerDisablementChangeEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerNewZoneAndCombi( AppDeviceClass _this, XChar zone, XChar 
  combination )
{
  AppZoneAndCombi zc = EwNewObject( AppZoneAndCombi, 0 );

  zc->Zone = (XUInt8)zone;
  zc->Combination = (XUInt8)combination;
  CoreSystemEvent_Trigger( &_this->NewZoneAndCombi, ((XObject)zc ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerNewZoneAndCombi()' */
void AppDeviceClass__TriggerNewZoneAndCombi( void* _this, XChar zone, XChar combination )
{
  AppDeviceClass_TriggerNewZoneAndCombi((AppDeviceClass)_this, zone, combination );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerNewBitmapLogoEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->NewBitmapLogoEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerNewBitmapLogoEvent()' */
void AppDeviceClass__TriggerNewBitmapLogoEvent( void* _this )
{
  AppDeviceClass_TriggerNewBitmapLogoEvent((AppDeviceClass)_this );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerAcumeshEvent( AppDeviceClass _this, XInt32 stage )
{
  AppProgress obj = EwNewObject( AppProgress, 0 );

  obj->amount = stage;
  CoreSystemEvent_Trigger( &_this->AcumeshEvent, ((XObject)obj ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerAcumeshEvent()' */
void AppDeviceClass__TriggerAcumeshEvent( void* _this, XInt32 stage )
{
  AppDeviceClass_TriggerAcumeshEvent((AppDeviceClass)_this, stage );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerResoundStateEvent( AppDeviceClass _this, XBool enabled )
{
  if ( enabled )
  {
    CoreSystemEvent_Trigger( &_this->ResoudStateEvent, ((XObject)_this ), 0 );
  }
  else
  {
    CoreSystemEvent_Trigger( &_this->ResoudStateEvent, 0, 0 );
  }
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerResoundStateEvent()' */
void AppDeviceClass__TriggerResoundStateEvent( void* _this, XBool enabled )
{
  AppDeviceClass_TriggerResoundStateEvent((AppDeviceClass)_this, enabled );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerUpdateDeviceEvent( AppDeviceClass _this, XInt32 val )
{
  AppProgress p = EwNewObject( AppProgress, 0 );

  p->amount = val;
  CoreSystemEvent_Trigger( &_this->UpdateDeviceEvent, ((XObject)p ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerUpdateDeviceEvent()' */
void AppDeviceClass__TriggerUpdateDeviceEvent( void* _this, XInt32 val )
{
  AppDeviceClass_TriggerUpdateDeviceEvent((AppDeviceClass)_this, val );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerMeshUnitChangeEvent( AppDeviceClass _this, XInt16 unit_num )
{
  AppUnitNumber u = EwNewObject( AppUnitNumber, 0 );

  u->num = unit_num;
  CoreSystemEvent_Trigger( &_this->MeshUnitChangeEvent, ((XObject)u ), 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerMeshUnitChangeEvent()' */
void AppDeviceClass__TriggerMeshUnitChangeEvent( void* _this, XInt16 unit_num )
{
  AppDeviceClass_TriggerMeshUnitChangeEvent((AppDeviceClass)_this, unit_num );
}

/* This method is intended to be called by the device to notify the GUI application 
   about a particular system event. */
void AppDeviceClass_TriggerGotoSysPageEvent( AppDeviceClass _this )
{
  CoreSystemEvent_Trigger( &_this->GotoSysPageEvent, 0, 0 );
}

/* Wrapper function for the non virtual method : 'App::DeviceClass.TriggerGotoSysPageEvent()' */
void AppDeviceClass__TriggerGotoSysPageEvent( void* _this )
{
  AppDeviceClass_TriggerGotoSysPageEvent((AppDeviceClass)_this );
}

/* Default onget method for the property 'Property' */
XInt32 AppDeviceClass_OnGetProperty( AppDeviceClass _this )
{
  return _this->Property;
}

/* Variants derived from the class : 'App::DeviceClass' */
EW_DEFINE_CLASS_VARIANTS( AppDeviceClass )
EW_END_OF_CLASS_VARIANTS( AppDeviceClass )

/* Virtual Method Table (VMT) for the class : 'App::DeviceClass' */
EW_DEFINE_CLASS( AppDeviceClass, TemplatesDeviceClass, "App::DeviceClass" )
EW_END_OF_CLASS( AppDeviceClass )

/* User defined auto object: 'App::Devices' */
EW_DEFINE_AUTOOBJECT( AppDevices, AppDeviceClass )

/* Initializer for the auto object 'App::Devices' */
void AppDevices__Init( AppDeviceClass _this )
{
  EW_UNUSED_ARG( _this );
}

/* Table with links to derived variants of the auto object : 'App::Devices' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDevices )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDevices )

/* Initializer for the class 'App::Progress' */
void AppProgress__Init( AppProgress _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppProgress );
}

/* Re-Initializer for the class 'App::Progress' */
void AppProgress__ReInit( AppProgress _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Progress' */
void AppProgress__Done( AppProgress _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppProgress );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Progress' */
void AppProgress__Mark( AppProgress _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::Progress' */
EW_DEFINE_CLASS_VARIANTS( AppProgress )
EW_END_OF_CLASS_VARIANTS( AppProgress )

/* Virtual Method Table (VMT) for the class : 'App::Progress' */
EW_DEFINE_CLASS( AppProgress, XObject, "App::Progress" )
EW_END_OF_CLASS( AppProgress )

/* This autoobject provides the default customization for the 'radio button' widget 
   (WidgetSet::RadioButton) in its medium size variant. */
EW_DEFINE_AUTOOBJECT( AppNormalRadioButton, WidgetSetRadioButtonConfig )

/* Initializer for the auto object 'App::NormalRadioButton' */
void AppNormalRadioButton__Init( WidgetSetRadioButtonConfig _this )
{
  WidgetSetRadioButtonConfig_OnSetLabelOnColorActive( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorFocused( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorDisabled( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOnColorDefault( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorActive( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorFocused( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorDisabled( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelOffColorDefault( _this, _Const000E );
  WidgetSetRadioButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetRadioButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetRadioButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetRadioButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetRadioButtonConfig_OnSetIconMarginLeft( _this, 45 );
  WidgetSetRadioButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetRadioButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetRadioButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetRadioButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetRadioButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetRadioButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetRadioButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetRadioButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetRadioButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetRadioButtonMedium, 
  ResourcesBitmap ));
  WidgetSetRadioButtonConfig_OnSetWidgetMinSize( _this, _Const02A1 );
}

/* Table with links to derived variants of the auto object : 'App::NormalRadioButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppNormalRadioButton )
EW_END_OF_AUTOOBJECT_VARIANTS( AppNormalRadioButton )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppNormalCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::NormalCheckBox' */
void AppNormalCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetCheckBoxMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02A1 );
}

/* Table with links to derived variants of the auto object : 'App::NormalCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppNormalCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( AppNormalCheckBox )

/* This autoobject provides the default customization for the 'horizontal slider' 
   widget (WidgetSet::HorizontalSlider) in its medium size variant. */
EW_DEFINE_AUTOOBJECT( AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig )

/* Initializer for the auto object 'App::NormalHorizontalSlider' */
void AppNormalHorizontalSlider__Init( WidgetSetHorizontalSliderConfig _this )
{
  WidgetSetHorizontalSliderConfig_OnSetKeyRepeatPeriod( _this, 100 );
  WidgetSetHorizontalSliderConfig_OnSetKeyRepeatDelay( _this, 500 );
  WidgetSetHorizontalSliderConfig_OnSetCoverTintDisabled( _this, _Const02A2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbMarginRight( _this, -2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbMarginLeft( _this, -2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameActive( _this, 3 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameFocused( _this, 2 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameDisabled( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetThumbFrameDefault( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetThumbActive( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbFocused( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbDisabled( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetThumbDefault( _this, EwLoadResource( &WidgetSetThumbKnobMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightTintDisabled( _this, _Const02A2 
  );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameActive( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameFocused( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameDisabled( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFrameDefault( _this, 0 );
  WidgetSetHorizontalSliderConfig_OnSetTrackRightActive( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightFocused( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightDisabled( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackRightDefault( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftTintActive( _this, _Const02A3 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftTintDisabled( _this, _Const02A4 
  );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameActive( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameFocused( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameDisabled( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFrameDefault( _this, 1 );
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftActive( _this, EwLoadResource( &WidgetSetHorizontalSliderTrackMedium, 
  ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftFocused( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftDisabled( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetTrackLeftDefault( _this, EwLoadResource( 
  &WidgetSetHorizontalSliderTrackMedium, ResourcesBitmap ));
  WidgetSetHorizontalSliderConfig_OnSetFaceTintDisabled( _this, _Const02A5 );
  WidgetSetHorizontalSliderConfig_OnSetWidgetMinSize( _this, _Const02A6 );
}

/* Table with links to derived variants of the auto object : 'App::NormalHorizontalSlider' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppNormalHorizontalSlider )
EW_END_OF_AUTOOBJECT_VARIANTS( AppNormalHorizontalSlider )

/* Initializer for the class 'App::InputChannels' */
void AppInputChannels__Init( AppInputChannels _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->Cancel, &_this->_XObject, 0 );
  AppInputAction__Init( &_this->InputAction, &_this->_XObject, 0 );
  AppDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  AppInputSignal__Init( &_this->InputSignal, &_this->_XObject, 0 );
  AppInputDelay__Init( &_this->InputDelay, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppInputChannels );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0002 );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Background, _Const02A7 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const02A8 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Background, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const02A9 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const02AA ));
  ViewsText_OnSetEmbedded( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->Cancel, _Const02AB );
  WidgetSetPushButton_OnSetLabel( &_this->Cancel, EwLoadString( &_Const00E8 ));
  CoreRectView__OnSetBounds( &_this->InputAction, _Const02AC );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputAction, 0 );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const02AD );
  CoreRectView__OnSetBounds( &_this->InputSignal, _Const02AE );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputSignal, 0 );
  CoreRectView__OnSetBounds( &_this->InputDelay, _Const02AF );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->InputDelay, 0 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle1 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle2 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle4 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle5 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle6 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle7 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle8 ), -1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Cancel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputAction ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputSignal ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputDelay ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Cancel.OnRelease = EwNullSlot;
  _this->Cancel.OnActivate = EwNewSlot( _this, AppInputChannels_CancelSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->Cancel, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->DropDownMenu.onSelection = EwNewSlot( _this, AppInputChannels_Select );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, AppInputChannels_LoadMenu 
  );
}

/* Re-Initializer for the class 'App::InputChannels' */
void AppInputChannels__ReInit( AppInputChannels _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->Cancel );
  AppInputAction__ReInit( &_this->InputAction );
  AppDropDownMenu__ReInit( &_this->DropDownMenu );
  AppInputSignal__ReInit( &_this->InputSignal );
  AppInputDelay__ReInit( &_this->InputDelay );
}

/* Finalizer method for the class 'App::InputChannels' */
void AppInputChannels__Done( AppInputChannels _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppInputChannels );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->Cancel );
  AppInputAction__Done( &_this->InputAction );
  AppDropDownMenu__Done( &_this->DropDownMenu );
  AppInputSignal__Done( &_this->InputSignal );
  AppInputDelay__Done( &_this->InputDelay );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::InputChannels' */
void AppInputChannels__Mark( AppInputChannels _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Cancel );
  EwMarkObject( &_this->InputAction );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->InputSignal );
  EwMarkObject( &_this->InputDelay );
  EwMarkObject( _this->device );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::InputChannels.Select()' */
void AppInputChannels_Select( AppInputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppInputChannels_SaveData( _this );
  AppInputChannels_OnSetChanIndex( _this, _this->DropDownMenu.VerticalList.SelectedItem 
  );
}

/* 'C' function for method : 'App::InputChannels.LoadMenu()' */
void AppInputChannels_LoadMenu( AppInputChannels _this, XObject sender )
{
  AppDropDownMenu m = EwCastObject( sender, AppDropDownMenu );
  XInt32 i = m->itemIndex;

  if ( _this->device != 0 )
  {
    EwRetainString( &m->itemName, AppLibClass_TypeName( EwGetAutoObject( &AppLib, 
    AppLibClass ), _this->device->inputs[ EwCheckIndex( i, 32 )]->type ));
  }
  else
  {
    EwRetainString( &m->itemName, EwLoadString( &_Const02B0 ));
  }
}

/* 'C' function for method : 'App::InputChannels.OnSetChanIndex()' */
void AppInputChannels_OnSetChanIndex( AppInputChannels _this, XInt32 value )
{
  if (( _this->device != 0 ) && ( value < _this->device->numinputs ))
  {
    AppInputChannel i;
    _this->ChanIndex = value;
    i = _this->device->inputs[ EwCheckIndex( _this->ChanIndex, 32 )];

    if ( i != 0 )
    {
      AppInputAction_OnSetinputAction( &_this->InputAction, i->action );
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.BypassDelay, (( i->flags 
      & AppOptionsIgnoreDelay ) == AppOptionsIgnoreDelay ));
      EwSignal( EwNewSlot( &_this->InputSignal, AppInputSignal_OnBypass ), ((XObject)_this 
        ));
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Inverted, (( i->flags 
      & AppOptionsInverted ) == AppOptionsInverted ));
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Latching, (( i->flags 
      & AppOptionsLatching ) == AppOptionsLatching ));
      WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Coincidence, (( i->flags 
      & AppOptionsCoincidence ) == AppOptionsCoincidence ));
      CoreGroup_OnSetEnabled((CoreGroup)&_this->InputSignal.Inverted, 0 );

      if ((( i->type == AppChannelTypeFireCallpoint ) || ( i->type == AppChannelTypePanelCallpoint 
          )) || ( i->type == AppChannelTypePanelEvacuate ))
      {
        WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Coincidence, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&_this->InputSignal.Coincidence, 0 );
      }

      if (((( i->type == AppChannelTypeHeatA1R ) || ( i->type == AppChannelTypeHeatB 
          )) || ( i->type == AppChannelTypeSmoke )) || ( i->type == AppChannelTypeCO 
          ))
      {
        WidgetSetToggleButton_OnSetChecked( &_this->InputSignal.Latching, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&_this->InputSignal.Latching, 0 );
      }

      EwSignal( EwNewSlot( &_this->InputSignal, AppInputSignal_OnLatching ), ((XObject)_this 
        ));

      switch ( i->type )
      {
        case AppChannelTypePanelAlarmInput :
        case AppChannelTypePanelCallpoint :
        case AppChannelTypePanelFaultInput :
        case AppChannelTypePanelSilenceInput :
        case AppChannelTypePanelRoutingAck :
          CoreGroup_OnSetEnabled((CoreGroup)&_this->InputSignal.Inverted, 1 );
        break;
      }

      AppInputDelay_OnSetDelaySecs( &_this->InputDelay, i->delay );
      CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, _this->ChanIndex 
      );
      ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, AppLibClass_TypeName( 
      EwGetAutoObject( &AppLib, AppLibClass ), i->type ));
      AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu, _this->device->numinputs 
      );
    }
  }
}

/* 'C' function for method : 'App::InputChannels.CancelSlot()' */
void AppInputChannels_CancelSlot( AppInputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppInputChannels_SaveData( _this );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::InputChannels.SaveData()' */
void AppInputChannels_SaveData( AppInputChannels _this )
{
  AppInputChannel i = _this->device->inputs[ EwCheckIndex( _this->ChanIndex, 32 
    )];

  if ( i != 0 )
  {
    i->action = (XEnum)_this->InputAction.inputAction;
    i->flags = i->flags & ~AppOptionsIgnoreDelay;
    i->flags = i->flags & ~AppOptionsInverted;
    i->flags = i->flags & ~AppOptionsCoincidence;
    i->flags = i->flags & ~AppOptionsLatching;

    if ( _this->InputSignal.BypassDelay.Checked )
      i->flags = i->flags | AppOptionsIgnoreDelay;

    if ( _this->InputSignal.Inverted.Checked )
      i->flags = i->flags | AppOptionsInverted;

    if ( _this->InputSignal.Coincidence.Checked )
      i->flags = i->flags | AppOptionsCoincidence;

    if ( _this->InputSignal.Latching.Checked )
      i->flags = i->flags | AppOptionsLatching;

    i->delay = (XUInt16)_this->InputDelay.DelaySecs;
  }
}

/* Variants derived from the class : 'App::InputChannels' */
EW_DEFINE_CLASS_VARIANTS( AppInputChannels )
EW_END_OF_CLASS_VARIANTS( AppInputChannels )

/* Virtual Method Table (VMT) for the class : 'App::InputChannels' */
EW_DEFINE_CLASS( AppInputChannels, AppPopup, "App::InputChannels" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppInputChannels )

/* Initializer for the class 'App::DropDownMenu' */
void AppDropDownMenu__Init( AppDropDownMenu _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->MenuSelectionText, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDropDownMenu );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02B1 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const02B2 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const02B3 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const02B4 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const02B5 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const02B5 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const02B4 );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const02B6 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const02B7 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const02B8 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0185 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
  CoreSimpleTouchHandler_OnSetEmbedded( &_this->SimpleTouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->MenuSelectionText, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->MenuSelectionText, _Const02B9 );
  ViewsText_OnSetAlignment( &_this->MenuSelectionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->MenuSelectionText, 0 );
  ViewsText_OnSetColor( &_this->MenuSelectionText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const02BA );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 0 );
  CoreView_OnSetLayout((CoreView)&_this->VerticalList, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const02BB );
  CoreGroup__OnSetVisible( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 40 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( AppDropMenuItem 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler1, _Const02BC );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler1, _Const02BD );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, _Const02BE );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, _Const008F );
  _this->SimpleTouchHandler1.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
  | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, 0 );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const02BF );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  EwRetainString( &_this->itemName, EwLoadString( &_Const0167 ));
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const02C0 );
  ViewsRectangle_OnSetColor( &_this->Rectangle1, _Const02C1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->MenuSelectionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppDropDownMenu_Release 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppDropDownMenu_Press );
  ViewsText_OnSetFont( &_this->MenuSelectionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppDropDownMenu_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
  _this->SimpleTouchHandler1.OnRelease = EwNewSlot( _this, AppDropDownMenu_ItemRelease 
  );
  _this->SimpleTouchHandler1.OnPress = EwNewSlot( _this, AppDropDownMenu_ItemSelect 
  );
  _this->PushButton.OnPress = EwNewSlot( _this, AppDropDownMenu_Press );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &AppDropDownSimpleBitmap, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::DropDownMenu' */
void AppDropDownMenu__ReInit( AppDropDownMenu _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->MenuSelectionText );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
}

/* Finalizer method for the class 'App::DropDownMenu' */
void AppDropDownMenu__Done( AppDropDownMenu _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDropDownMenu );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->MenuSelectionText );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsRectangle__Done( &_this->Rectangle1 );

  /* Release all used strings */
  EwReleaseString( &_this->itemName );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DropDownMenu' */
void AppDropDownMenu__Mark( AppDropDownMenu _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->MenuSelectionText );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->SimpleTouchHandler1 );
  EwMarkSlot( _this->onSelection );
  EwMarkObject( &_this->PushButton );
  EwMarkSlot( _this->GetItemCallback );
  EwMarkObject( &_this->Rectangle1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppDropDownMenu_UpdateLayout( AppDropDownMenu _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDropDownMenu_UpdateViewState( AppDropDownMenu _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsRectangle_OnSetVisible( &_this->Rectangle1, 0 );
  }
  else
  {
    ViewsRectangle_OnSetVisible( &_this->Rectangle1, 1 );
  }
}

/* 'C' function for method : 'App::DropDownMenu.Press()' */
void AppDropDownMenu_Press( AppDropDownMenu _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( &_this->VerticalList, (XBool)!CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
  CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, CoreGroup_OnGetVisible((CoreGroup)&_this->VerticalList 
  ));
}

/* 'C' function for method : 'App::DropDownMenu.Release()' */
void AppDropDownMenu_Release( AppDropDownMenu _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDropDownMenu_OnLoadItem( AppDropDownMenu _this, XObject sender )
{
  XInt32 itemNo;
  AppDropMenuItem itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, AppDropMenuItem );

  if ( itemView == 0 )
    return;

  if ( itemNo == _this->VerticalList.SelectedItem )
  {
    itemView->pressed = 1;
  }
  else
  {
    itemView->pressed = 0;
  }

  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));

  if ( _this->GetItemCallback.Object != 0 )
  {
    _this->itemIndex = itemNo;
    EwSignal( _this->GetItemCallback, ((XObject)_this ));

    if ( EwCompString( _this->itemName, 0 ) != 0 )
    {
      ViewsText_OnSetString( &itemView->CaptionText, _this->itemName );
      return;
    }
  }

  ViewsText_OnSetString( &itemView->CaptionText, EwConcatString( EwLoadString( &_Const02C2 
  ), EwNewStringInt( itemNo, 0, 10 )));
}

/* 'C' function for method : 'App::DropDownMenu.OnSetnumItems()' */
void AppDropDownMenu_OnSetnumItems( AppDropDownMenu _this, XUInt8 value )
{
  XInt32 size;

  if ( _this->numItems == value )
    return;

  _this->numItems = value;
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, _this->numItems );
  size = _this->VerticalList.ItemHeight * _this->numItems;
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectY2( _this->VerticalList.Super2.Bounds, 
  ( _this->VerticalList.Super2.Bounds.Point1.Y + size ) + 20 ));

  if ( _this->VerticalList.Super2.Bounds.Point2.Y > 480 )
    CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectY2( _this->VerticalList.Super2.Bounds, 
    480 ));

  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, EwSetPointY( _this->SimpleTouchHandler1.Super1.Point1, 
  _this->VerticalList.Super2.Bounds.Point2.Y ));
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, EwSetPointY( _this->SimpleTouchHandler1.Super1.Point2, 
  _this->VerticalList.Super2.Bounds.Point2.Y ));
  CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, _this->VerticalList.Super2.Bounds.Point2.Y 
  ));
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectW( _this->VerticalList.Super2.Bounds, 
  EwGetRectW( _this->Super2.Bounds ) - 20 ));
}

/* 'C' function for method : 'App::DropDownMenu.ItemSelect()' */
void AppDropDownMenu_ItemSelect( AppDropDownMenu _this, XObject sender )
{
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler1.CurrentPos 
  );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
}

/* 'C' function for method : 'App::DropDownMenu.ItemRelease()' */
void AppDropDownMenu_ItemRelease( AppDropDownMenu _this, XObject sender )
{
  XInt32 itemNo;
  AppDropMenuItem v;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->SimpleTouchHandler1.Inside )
    return;

  if ( _this->SimpleTouchHandler1.AutoDeflected )
    return;

  itemNo = CoreVerticalList_GetItemAtPosition( &_this->VerticalList, _this->SimpleTouchHandler1.CurrentPos 
  );
  v = EwCastObject( CoreVerticalList_GetViewForItem( &_this->VerticalList, itemNo 
  ), AppDropMenuItem );

  if ( itemNo >= 0 )
  {
    CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, itemNo );
    CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
    - 1 );
    ViewsText_OnSetString( &_this->MenuSelectionText, v->CaptionText.String );
    CoreGroup__OnSetVisible( &_this->VerticalList, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, 0 );
    CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler1, 0 );
    CoreSlideTouchHandler_OnSetEnabled( &_this->SlideTouchHandler, 0 );
    EwPostSignal( _this->onSelection, ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::DropDownMenu.SetIndex()' */
void AppDropDownMenu_SetIndex( AppDropDownMenu _this, XInt32 index )
{
  _this->itemIndex = index;
  EwSignal( _this->GetItemCallback, ((XObject)_this ));
  ViewsText_OnSetString( &_this->MenuSelectionText, _this->itemName );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList, index );
  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->VerticalList.NoOfItems 
  - 1 );
  EwPostSignal( _this->onSelection, ((XObject)_this ));
}

/* Variants derived from the class : 'App::DropDownMenu' */
EW_DEFINE_CLASS_VARIANTS( AppDropDownMenu )
EW_END_OF_CLASS_VARIANTS( AppDropDownMenu )

/* Virtual Method Table (VMT) for the class : 'App::DropDownMenu' */
EW_DEFINE_CLASS( AppDropDownMenu, CoreGroup, "App::DropDownMenu" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppDropDownMenu_UpdateLayout,
  AppDropDownMenu_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDropDownMenu )

/* Bitmap resource : 'App::DropDownSimpleBitmap' */
EW_DEFINE_BITMAP_RES( AppDropDownSimpleBitmap )
  EW_BITMAP_FRAMES( AppDropDownSimpleBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 33, 18, 0 )
    EW_BITMAP_FRAME( 15, 15, 3, 1, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppDropDownSimpleBitmap, Default )      /* ratio 25.59 % */
    0x04086D00, 0xC106D020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xA4284C4A, 0x18240322,
    0xE8D9287D, 0x868060A1, 0x8C4E4310, 0xC8A47208, 0xAA492892, 0xA4D2B93C, 0x30428AC4,
    0xAA1998F8, 0x381CBFE0, 0x69D8F581, 0x9FCB2522, 0x6D067D2E, 0xD128B429, 0x96924181,
    0x95B4C1D8, 0xFF02A7CD, 0x0B6A98E9, 0x4615D588, 0xAA1D6681, 0xAFD768F5, 0x4D888800,
    0xADC73381, 0xEE0AFE82, 0x86EE3B2B, 0xDD3679DB, 0x156650DE, 0x78AD9108, 0x9BDD72BD,
    0xBF90E0D7, 0xA8EAA620, 0x615FB055, 0x2A36BCC1, 0xF1A3C129, 0xD0F882A1, 0x3496F5CA,
    0x7CBE9308, 0x5ADE62F5, 0x1E634339, 0xD8DAA0AF, 0x2EC774C7, 0x241FA82A, 0x417AC28C,
    0xE36A5369, 0x9756B5BA, 0x9ACDC787, 0x58A58373, 0x5967C471, 0x8609F3A2, 0x0478A595,
    0x379258A1, 0x60AA4D28, 0x8B659B3D, 0x02FE98FD, 0x7BDD6EF7, 0xEC10C72B, 0x56E0B82B,
    0xC080877F, 0xE941F8AC, 0x41DF7242, 0xFA6C89C7, 0xAF99EB74, 0xF65ED48B, 0xA5B55A18,
    0xBFD91959, 0x84F636E1, 0x99F02DE1, 0x23C1721B, 0xCCE10DDB, 0xF01643E4, 0x4C103835,
    0x8C369424, 0x067CFC68, 0x28546A0B, 0x4E5020E0, 0x67C06874, 0x8F741481, 0xD4ECE768,
    0x09051543, 0x305EE1B0, 0x2E58D6F9, 0x6263E1A2, 0x98D4572B, 0x6D5B8AC0, 0x260223A1,
    0x3D90526E, 0xA2635E07, 0x88E2290F, 0x94345254, 0xF6688C46, 0x140A2694, 0xDFF71E50,
    0x78D54094, 0x2D9F0245, 0x363B9722, 0x3365E0E1, 0x62B0F5EE, 0x89783E65, 0xDDA23383,
    0x452819F3, 0x9181C9B4, 0xA185EDF2, 0x21B19F02, 0x66073A57, 0x7D15E0A3, 0x0D195005,
    0x5029A165, 0x63ED025A, 0xC25193E2, 0x09A2DF19, 0x01E8E12D, 0x9E919A26, 0x7898EA68,
    0x05217F86, 0x29111620, 0x704C8608, 0xC7828E0A, 0xC95237A8, 0xE942A9A8, 0x260105B8,
    0x81DCE20A, 0x45867CE6, 0xF4C00341, 0x1CC66082, 0x9A828F58, 0x01ABE1A0, 0x9D8B068A,
    0x6016C41C, 0x196E96A2, 0xDA5C9518, 0x89841828, 0x4F381CCC, 0x84609369, 0xC6C20404,
    0xBE44AD99, 0x898061A2, 0x8E65C870, 0x5345A54D, 0xC9822757, 0x472260A3, 0xB6A52BB4,
    0x2F0BC6A8, 0x182A1E87, 0x28DD6085, 0x00404AD8, 0x00000000

  EW_BITMAPS_TABLE( AppDropDownSimpleBitmap )
    EW_BITMAP( AppDropDownSimpleBitmap, Default )
EW_END_OF_BITMAP_RES( AppDropDownSimpleBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::DropDownSimpleBitmap' */
EW_RES_WITHOUT_VARIANTS( AppDropDownSimpleBitmap )

/* Initializer for the class 'App::InputAction' */
void AppInputAction__Init( AppInputAction _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetRadioButton__Init( &_this->RadioButton, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton1, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton2, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton3, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton4, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton5, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton6, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton7, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton8, &_this->_XObject, 0 );
  WidgetSetRadioButton__Init( &_this->RadioButton9, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppInputAction );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02C3 );
  CoreRectView__OnSetBounds( &_this->RadioButton, _Const02C4 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton, AppActionFire );
  WidgetSetRadioButton_OnSetSelected( &_this->RadioButton, 1 );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton, EwLoadString( &_Const01B6 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton1, _Const02C5 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton1, AppActionEvacuation 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton1, EwLoadString( &_Const023D 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton2, _Const02C6 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton2, AppActionUndefined 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton2, EwLoadString( &_Const02C7 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton3, _Const02C8 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton3, AppActionGeneral 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton3, EwLoadString( &_Const024A 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton4, _Const02C9 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton4, AppActionFault 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton4, EwLoadString( &_Const01B5 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton5, _Const02CA );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton5, AppActionSecurity 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton5, EwLoadString( &_Const02CB 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton6, _Const02CC );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton6, AppActionRoutingAck 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton6, EwLoadString( &_Const02CD 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton7, _Const02CE );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton7, AppActionReset 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton7, EwLoadString( &_Const02CF 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton8, _Const02D0 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton8, AppActionFirstAid 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton8, EwLoadString( &_Const02D1 
  ));
  CoreRectView__OnSetBounds( &_this->RadioButton9, _Const02D2 );
  WidgetSetRadioButton_OnSetOutletSelector( &_this->RadioButton9, AppActionSilence 
  );
  WidgetSetRadioButton_OnSetLabel( &_this->RadioButton9, EwLoadString( &_Const02D3 
  ));
  CoreRectView__OnSetBounds( &_this->Text, _Const02D4 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const02D5 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const02D6 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const02D7 );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->RadioButton9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton1, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton1, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton2, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton2, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton3, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton3, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton4, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton4, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton5, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton5, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton6, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton6, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton7, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton7, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton8, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton8, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  WidgetSetRadioButton_OnSetOutlet( &_this->RadioButton9, EwNewRef( _this, AppInputAction_OnGetinputAction, 
  AppInputAction_OnSetinputAction ));
  WidgetSetRadioButton_OnSetAppearance( &_this->RadioButton9, EwGetAutoObject( &AppNormalRadioButton, 
  WidgetSetRadioButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontS, ResourcesFont ));
}

/* Re-Initializer for the class 'App::InputAction' */
void AppInputAction__ReInit( AppInputAction _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetRadioButton__ReInit( &_this->RadioButton );
  WidgetSetRadioButton__ReInit( &_this->RadioButton1 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton2 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton3 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton4 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton5 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton6 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton7 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton8 );
  WidgetSetRadioButton__ReInit( &_this->RadioButton9 );
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
}

/* Finalizer method for the class 'App::InputAction' */
void AppInputAction__Done( AppInputAction _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppInputAction );

  /* Finalize all embedded objects */
  WidgetSetRadioButton__Done( &_this->RadioButton );
  WidgetSetRadioButton__Done( &_this->RadioButton1 );
  WidgetSetRadioButton__Done( &_this->RadioButton2 );
  WidgetSetRadioButton__Done( &_this->RadioButton3 );
  WidgetSetRadioButton__Done( &_this->RadioButton4 );
  WidgetSetRadioButton__Done( &_this->RadioButton5 );
  WidgetSetRadioButton__Done( &_this->RadioButton6 );
  WidgetSetRadioButton__Done( &_this->RadioButton7 );
  WidgetSetRadioButton__Done( &_this->RadioButton8 );
  WidgetSetRadioButton__Done( &_this->RadioButton9 );
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::InputAction' */
void AppInputAction__Mark( AppInputAction _this )
{
  EwMarkObject( &_this->RadioButton );
  EwMarkObject( &_this->RadioButton1 );
  EwMarkObject( &_this->RadioButton2 );
  EwMarkObject( &_this->RadioButton3 );
  EwMarkObject( &_this->RadioButton4 );
  EwMarkObject( &_this->RadioButton5 );
  EwMarkObject( &_this->RadioButton6 );
  EwMarkObject( &_this->RadioButton7 );
  EwMarkObject( &_this->RadioButton8 );
  EwMarkObject( &_this->RadioButton9 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::InputAction.OnSetinputAction()' */
void AppInputAction_OnSetinputAction( AppInputAction _this, XInt32 value )
{
  WidgetSetRadioButton v;

  _this->inputAction = value;
  v = EwCastObject( _this->Super1.first, WidgetSetRadioButton );
  ViewsText_OnSetVisible( &EwCastObject( _this->Super3.Owner, AppInputChannels )->InputDelay.TextWarn1, 
  (XBool)((XEnum)_this->inputAction == AppActionSilence ));
  ViewsText_OnSetVisible( &EwCastObject( _this->Super3.Owner, AppInputChannels )->InputDelay.TextWarn4, 
  (XBool)((XEnum)_this->inputAction == AppActionReset ));

  while ( v != 0 )
  {
    if ( v->OutletSelector == value )
    {
      WidgetSetRadioButton_OnSetSelected( v, 1 );
    }
    else
    {
      WidgetSetRadioButton_OnSetSelected( v, 0 );
    }

    v = EwCastObject( v->Super3.next, WidgetSetRadioButton );
  }
}

/* Default onget method for the property 'inputAction' */
XInt32 AppInputAction_OnGetinputAction( AppInputAction _this )
{
  return _this->inputAction;
}

/* Variants derived from the class : 'App::InputAction' */
EW_DEFINE_CLASS_VARIANTS( AppInputAction )
EW_END_OF_CLASS_VARIANTS( AppInputAction )

/* Virtual Method Table (VMT) for the class : 'App::InputAction' */
EW_DEFINE_CLASS( AppInputAction, CoreGroup, "App::InputAction" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppInputAction )

/* Initializer for the class 'App::InputSignal' */
void AppInputSignal__Init( AppInputSignal _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Inverted, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Latching, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->BypassDelay, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Coincidence, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppInputSignal );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02D8 );
  CoreRectView__OnSetBounds( &_this->Text, _Const02D9 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const02DA ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const02DB );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const02DC );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->Inverted, _Const02DD );
  WidgetSetToggleButton_OnSetLabel( &_this->Inverted, EwLoadString( &_Const02DE 
  ));
  CoreRectView__OnSetBounds( &_this->Latching, _Const02DF );
  WidgetSetToggleButton_OnSetLabel( &_this->Latching, EwLoadString( &_Const02E0 
  ));
  CoreRectView__OnSetBounds( &_this->BypassDelay, _Const02E1 );
  WidgetSetToggleButton_OnSetLabel( &_this->BypassDelay, EwLoadString( &_Const02E2 
  ));
  CoreRectView__OnSetBounds( &_this->Coincidence, _Const02E3 );
  WidgetSetToggleButton_OnSetLabel( &_this->Coincidence, EwLoadString( &_Const02E4 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Inverted ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Latching ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BypassDelay ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Coincidence ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontS, ResourcesFont ));
  WidgetSetToggleButton_OnSetAppearance( &_this->Inverted, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->Latching.OnSwitchOn = EwNewSlot( _this, AppInputSignal_OnLatching );
  _this->Latching.OnSwitchOff = EwNewSlot( _this, AppInputSignal_OnLatching );
  WidgetSetToggleButton_OnSetAppearance( &_this->Latching, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->BypassDelay.OnSwitchOn = EwNewSlot( _this, AppInputSignal_OnBypass );
  _this->BypassDelay.OnSwitchOff = EwNewSlot( _this, AppInputSignal_OnBypass );
  WidgetSetToggleButton_OnSetAppearance( &_this->BypassDelay, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->Coincidence, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::InputSignal' */
void AppInputSignal__ReInit( AppInputSignal _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->Inverted );
  WidgetSetToggleButton__ReInit( &_this->Latching );
  WidgetSetToggleButton__ReInit( &_this->BypassDelay );
  WidgetSetToggleButton__ReInit( &_this->Coincidence );
}

/* Finalizer method for the class 'App::InputSignal' */
void AppInputSignal__Done( AppInputSignal _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppInputSignal );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->Inverted );
  WidgetSetToggleButton__Done( &_this->Latching );
  WidgetSetToggleButton__Done( &_this->BypassDelay );
  WidgetSetToggleButton__Done( &_this->Coincidence );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::InputSignal' */
void AppInputSignal__Mark( AppInputSignal _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Inverted );
  EwMarkObject( &_this->Latching );
  EwMarkObject( &_this->BypassDelay );
  EwMarkObject( &_this->Coincidence );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::InputSignal.OnBypass()' */
void AppInputSignal_OnBypass( AppInputSignal _this, XObject sender )
{
  AppInputChannels i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = EwCastObject( _this->Super3.Owner, AppInputChannels );
  ViewsText_OnSetVisible( &i->InputDelay.TextWarn2, (XBool)( !_this->BypassDelay.Checked 
  && ((( i->device->inputs[ EwCheckIndex( i->ChanIndex, 32 )]->type == AppChannelTypeFireCallpoint 
  ) || ( i->device->inputs[ EwCheckIndex( i->ChanIndex, 32 )]->type == AppChannelTypePanelCallpoint 
  )) || ( i->device->inputs[ EwCheckIndex( i->ChanIndex, 32 )]->type == AppChannelTypePanelEvacuate 
  ))));
}

/* 'C' function for method : 'App::InputSignal.OnLatching()' */
void AppInputSignal_OnLatching( AppInputSignal _this, XObject sender )
{
  AppInputChannels i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = EwCastObject( _this->Super3.Owner, AppInputChannels );

  if ( i != 0 )
  {
    XEnum a = (XEnum)i->InputAction.inputAction;
    ViewsText_OnSetVisible( &i->InputDelay.TextWarn3, (XBool)( !_this->Latching.Checked 
    && ( a == AppActionFire )));
  }
}

/* Variants derived from the class : 'App::InputSignal' */
EW_DEFINE_CLASS_VARIANTS( AppInputSignal )
EW_END_OF_CLASS_VARIANTS( AppInputSignal )

/* Virtual Method Table (VMT) for the class : 'App::InputSignal' */
EW_DEFINE_CLASS( AppInputSignal, CoreGroup, "App::InputSignal" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppInputSignal )

/* Initializer for the class 'App::InputDelay' */
void AppInputDelay__Init( AppInputDelay _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->TitleText, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TextWarn, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TextWarn1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TextWarn2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TextWarn3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TextWarn4, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppInputDelay );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02E5 );
  CoreRectView__OnSetBounds( &_this->TitleText, _Const02E6 );
  ViewsText_OnSetAlignment( &_this->TitleText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TitleText, EwLoadString( &_Const02E7 ));
  ViewsText_OnSetColor( &_this->TitleText, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const02E8 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const02E9 );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text, _Const02EA );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const02EB ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const02EC );
  WidgetSetHorizontalSlider_OnSetStepSize( &_this->HorzBarSlider, 1 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 12 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreRectView__OnSetBounds( &_this->TextWarn, _Const02ED );
  ViewsText_OnSetString( &_this->TextWarn, EwLoadString( &_Const02EE ));
  ViewsText_OnSetColor( &_this->TextWarn, _Const0047 );
  CoreRectView__OnSetBounds( &_this->TextWarn1, _Const02EF );
  ViewsText_OnSetString( &_this->TextWarn1, EwLoadString( &_Const02F0 ));
  ViewsText_OnSetColor( &_this->TextWarn1, _Const0047 );
  CoreRectView__OnSetBounds( &_this->TextWarn2, _Const02F1 );
  ViewsText_OnSetString( &_this->TextWarn2, EwLoadString( &_Const02F2 ));
  ViewsText_OnSetColor( &_this->TextWarn2, _Const0047 );
  CoreRectView__OnSetBounds( &_this->TextWarn3, _Const02F3 );
  ViewsText_OnSetAlignment( &_this->TextWarn3, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TextWarn3, EwLoadString( &_Const02F4 ));
  ViewsText_OnSetColor( &_this->TextWarn3, _Const0047 );
  CoreRectView__OnSetBounds( &_this->TextWarn4, _Const02F5 );
  ViewsText_OnSetAlignment( &_this->TextWarn4, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TextWarn4, EwLoadString( &_Const02F6 ));
  ViewsText_OnSetColor( &_this->TextWarn4, _Const0047 );
  CoreGroup__Add( _this, ((CoreView)&_this->TitleText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextWarn ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextWarn1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextWarn2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextWarn3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextWarn4 ), 0 );
  ViewsText_OnSetFont( &_this->TitleText, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  _this->HorzBarSlider.OnChange = EwNewSlot( _this, AppInputDelay_DelaySlot );
  _this->HorzBarSlider.OnEnd = EwNewSlot( _this, AppInputDelay_OnSetEnd );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->TextWarn, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TextWarn1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TextWarn2, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TextWarn3, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TextWarn4, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::InputDelay' */
void AppInputDelay__ReInit( AppInputDelay _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->TitleText );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
  ViewsText__ReInit( &_this->TextWarn );
  ViewsText__ReInit( &_this->TextWarn1 );
  ViewsText__ReInit( &_this->TextWarn2 );
  ViewsText__ReInit( &_this->TextWarn3 );
  ViewsText__ReInit( &_this->TextWarn4 );
}

/* Finalizer method for the class 'App::InputDelay' */
void AppInputDelay__Done( AppInputDelay _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppInputDelay );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->TitleText );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );
  ViewsText__Done( &_this->TextWarn );
  ViewsText__Done( &_this->TextWarn1 );
  ViewsText__Done( &_this->TextWarn2 );
  ViewsText__Done( &_this->TextWarn3 );
  ViewsText__Done( &_this->TextWarn4 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::InputDelay' */
void AppInputDelay__Mark( AppInputDelay _this )
{
  EwMarkObject( &_this->TitleText );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( &_this->TextWarn );
  EwMarkObject( &_this->TextWarn1 );
  EwMarkObject( &_this->TextWarn2 );
  EwMarkObject( &_this->TextWarn3 );
  EwMarkObject( &_this->TextWarn4 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppInputDelay_UpdateLayout( AppInputDelay _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppInputDelay_UpdateViewState( AppInputDelay _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::InputDelay.DelaySlot()' */
void AppInputDelay_DelaySlot( AppInputDelay _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i < 6 )
  {
    _this->DelaySecs = i * 10;
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const02F7 ), EwNewStringInt( _this->DelaySecs, 0, 10 )), EwLoadString( &_Const02F8 
    )));
  }
  else
  {
    _this->DelaySecs = ( i - 4 ) * 30;
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const02F7 ), EwNewStringFloat((XFloat)_this->DelaySecs / 60.000000f, 2, 1 
    )), EwLoadString( &_Const011B )));
  }
}

/* 'C' function for method : 'App::InputDelay.OnSetDelaySecs()' */
void AppInputDelay_OnSetDelaySecs( AppInputDelay _this, XInt32 value )
{
  _this->DelaySecs = value;

  if ( value < 60 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, value / 
    10 );
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const02F7 ), EwNewStringInt( value, 0, 10 )), EwLoadString( &_Const02F8 )));
  }
  else
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, ( value 
    / 30 ) + 4 );
    ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
    &_Const02F9 ), EwNewStringInt( value / 60, 2, 1 )), EwLoadString( &_Const011B 
    )));
  }

  EwSignal( EwNewSlot( _this, AppInputDelay_OnSetEnd ), ((XObject)_this ));
}

/* 'C' function for method : 'App::InputDelay.OnSetEnd()' */
void AppInputDelay_OnSetEnd( AppInputDelay _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetVisible( &_this->TextWarn, (XBool)( _this->DelaySecs != 0 ));
}

/* Variants derived from the class : 'App::InputDelay' */
EW_DEFINE_CLASS_VARIANTS( AppInputDelay )
EW_END_OF_CLASS_VARIANTS( AppInputDelay )

/* Virtual Method Table (VMT) for the class : 'App::InputDelay' */
EW_DEFINE_CLASS( AppInputDelay, CoreGroup, "App::InputDelay" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppInputDelay_UpdateLayout,
  AppInputDelay_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppInputDelay )

/* User defined auto object: 'App::NotmalToggleButton' */
EW_DEFINE_AUTOOBJECT( AppNotmalToggleButton, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::NotmalToggleButton' */
void AppNotmalToggleButton__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const02FA );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const02FA );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetIconMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToRight );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02FB );
}

/* Table with links to derived variants of the auto object : 'App::NotmalToggleButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppNotmalToggleButton )
EW_END_OF_AUTOOBJECT_VARIANTS( AppNotmalToggleButton )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'switch'. */
EW_DEFINE_AUTOOBJECT( AppSwitch_Medium, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::Switch_Medium' */
void AppSwitch_Medium__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const02FC );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const02FC );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginRight( _this, 75 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToRight );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 7 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 5 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 3 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 4 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &WidgetSetSwitchMedium, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02FB );
}

/* Table with links to derived variants of the auto object : 'App::Switch_Medium' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppSwitch_Medium )
EW_END_OF_AUTOOBJECT_VARIANTS( AppSwitch_Medium )

/* Initializer for the class 'App::ZoneToggle' */
void AppZoneToggle__Init( AppZoneToggle _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->UnitNumberText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ActionButton, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppZoneToggle );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02FD );
  CoreView_OnSetLayout((CoreView)&_this->UnitNumberText, CoreLayoutAlignToLeft | 
  CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->UnitNumberText, _Const02FE );
  ViewsText_OnSetAlignment( &_this->UnitNumberText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->UnitNumberText, 0 );
  ViewsText_OnSetColor( &_this->UnitNumberText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->DescriptionText, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const02FF );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0300 ));
  ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->Image1, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0301 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0302 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0303 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0304 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0305 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const00A8 );
  CoreRectView__OnSetBounds( &_this->ActionButton, _Const0306 );
  WidgetSetPushButton_OnSetLabel( &_this->ActionButton, EwLoadString( &_Const0307 
  ));
  CoreTimer_OnSetPeriod( &_this->Timer, 1200 );
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  CoreRectView__OnSetBounds( &_this->Image, _Const0308 );
  AppChannelImage_OnSetBitmap( &_this->Image, AppChannelTypeNone );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitNumberText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ActionButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsText_OnSetFont( &_this->UnitNumberText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppExpandBitmap, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppZoneToggle_ToggleHandler 
  );
  _this->ActionButton.OnRelease = EwNewSlot( _this, AppZoneToggle_EditSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->ActionButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppZoneToggle_TimerSlot );
}

/* Re-Initializer for the class 'App::ZoneToggle' */
void AppZoneToggle__ReInit( AppZoneToggle _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->UnitNumberText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image1 );
  ViewsText__ReInit( &_this->Text );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetPushButton__ReInit( &_this->ActionButton );
  CoreTimer__ReInit( &_this->Timer );
  AppChannelImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'App::ZoneToggle' */
void AppZoneToggle__Done( AppZoneToggle _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppZoneToggle );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->UnitNumberText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image1 );
  ViewsText__Done( &_this->Text );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetPushButton__Done( &_this->ActionButton );
  CoreTimer__Done( &_this->Timer );
  AppChannelImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ZoneToggle' */
void AppZoneToggle__Mark( AppZoneToggle _this )
{
  EwMarkObject( &_this->UnitNumberText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->ActionButton );
  EwMarkObject( &_this->Timer );
  EwMarkObject( _this->Dev );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppZoneToggle_UpdateLayout( AppZoneToggle _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppZoneToggle_UpdateViewState( AppZoneToggle _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->isDevice )
  {
    AppDevice device;
    CoreGroup__OnSetVisible( &_this->Image, 1 );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
    ViewsText_OnSetVisible( &_this->DescriptionText, 1 );
    ViewsText_OnSetVisible( &_this->UnitNumberText, 1 );
    ViewsText_OnSetVisible( &_this->Text, 0 );
    device = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
    );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, (XBool)( device != 0 
    ));
    CoreGroup__OnSetVisible( &_this->ActionButton, 1 );
    CoreTimer_OnSetEnabled( &_this->Timer, 1 );
    ViewsText_OnSetString( &_this->UnitNumberText, EwConcatString( EwConcatString( 
    EwConcatString( EwLoadString( &_Const009B ), EwNewStringInt( _this->ZoneNum, 
    0, 10 )), EwLoadString( &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, 
    AppLibClass ), _this->UnitNum )));
  }
  else
    if ( _this->isZone )
    {
      XSet zf;
      CoreGroup__OnSetVisible( &_this->Image, 0 );
      ViewsImage_OnSetVisible( &_this->Image1, 1 );
      ViewsText_OnSetVisible( &_this->DescriptionText, 0 );
      ViewsText_OnSetVisible( &_this->UnitNumberText, 0 );
      ViewsText_OnSetVisible( &_this->Text, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, 0 );
      CoreGroup__OnSetVisible( &_this->ActionButton, 0 );
      CoreTimer_OnSetEnabled( &_this->Timer, 0 );
      ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const009B 
      ), EwNewStringInt( _this->ZoneNum, 0, 10 )));
      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->ZoneNum 
      );

      if ((( zf & AppZoneFlagsModifyExpanded ) == AppZoneFlagsModifyExpanded ))
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppCollapseBitmap, 
        ResourcesBitmap ));
      }
      else
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppExpandBitmap, 
        ResourcesBitmap ));
      }
    }
    else
    {
      CoreGroup__OnSetVisible( &_this->Image, 0 );
      ViewsImage_OnSetVisible( &_this->Image1, 0 );
      ViewsText_OnSetVisible( &_this->DescriptionText, 0 );
      ViewsText_OnSetVisible( &_this->UnitNumberText, 0 );
      ViewsText_OnSetVisible( &_this->Text, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->ActionButton, 0 );
      CoreGroup__OnSetVisible( &_this->ActionButton, 0 );
      ViewsText_OnSetString( &_this->UnitNumberText, 0 );
    }
}

/* 'C' function for method : 'App::ZoneToggle.ToggleHandler()' */
void AppZoneToggle_ToggleHandler( AppZoneToggle _this, XObject sender )
{
  AppModify modify;
  XSet zf;
  XInt32 devs;
  XInt32 zone;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  modify = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, AppModify 
  );
  zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->ZoneNum 
  );

  if ((( zf & AppZoneFlagsModifyExpanded ) == AppZoneFlagsModifyExpanded ))
  {
    zf = zf & ~AppZoneFlagsModifyExpanded;
  }
  else
  {
    zf = zf | AppZoneFlagsModifyExpanded;
  }

  AppLibClass_SetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->ZoneNum, 
  zf );
  devs = 4;
  zone = _this->ZoneNum;
  devs = get_num_devs_in_zone( zone );

  if ((( zf & AppZoneFlagsModifyExpanded ) == AppZoneFlagsModifyExpanded ))
  {
    AppListViewer_OnSetNoOfItems( &modify->ListViewer, modify->ListViewer.NoOfItems 
    + devs );
  }
  else
  {
    AppListViewer_OnSetNoOfItems( &modify->ListViewer, modify->ListViewer.NoOfItems 
    - devs );
  }
}

/* 'C' function for method : 'App::ZoneToggle.EditSlot()' */
void AppZoneToggle_EditSlot( AppZoneToggle _this, XObject sender )
{
  AppModifyPopup p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwNewObject( AppModifyPopup, 0 );
  AppModifyPopup_OnSetdevice( p, AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
  AppLibClass ), (XInt16)_this->UnitNum ));
  p->modify = EwCastObject( _this->Super3.Owner->Super2.Owner, AppModify );

  if ( p->device != 0 )
  {
    EwPostSignal( EwNewSlot( p, AppModifyPopup_SetFocus ), ((XObject)_this ));
    AppPopup_Show((AppPopup)p, CoreView__GetRoot( _this ));
  }
}

/* 'C' function for method : 'App::ZoneToggle.TimerSlot()' */
void AppZoneToggle_TimerSlot( AppZoneToggle _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Dev != 0 )
  {
    XInt32 chans = _this->Dev->numinputs + _this->Dev->numoutputs;

    if ( chans != 0 )
    {
      _this->imagenum = (XUInt8)( _this->imagenum + 1 );
      _this->imagenum = (XUInt8)( _this->imagenum % ( _this->Dev->numinputs + _this->Dev->numoutputs 
      ));

      if ( _this->imagenum < _this->Dev->numinputs )
      {
        AppChannelImage_OnSetBitmap( &_this->Image, _this->Dev->inputs[ EwCheckIndex( 
        _this->imagenum, 32 )]->type );
      }
      else
      {
        XUInt8 i = (XUInt8)( _this->imagenum - _this->Dev->numinputs );
        AppChannelImage_OnSetBitmap( &_this->Image, _this->Dev->outputs[ EwCheckIndex( 
        i, 32 )]->type );
      }
    }
  }
}

/* Variants derived from the class : 'App::ZoneToggle' */
EW_DEFINE_CLASS_VARIANTS( AppZoneToggle )
EW_END_OF_CLASS_VARIANTS( AppZoneToggle )

/* Virtual Method Table (VMT) for the class : 'App::ZoneToggle' */
EW_DEFINE_CLASS( AppZoneToggle, CoreGroup, "App::ZoneToggle" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppZoneToggle_UpdateLayout,
  AppZoneToggle_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppZoneToggle )

/* Initializer for the class 'App::DropMenuItem' */
void AppDropMenuItem__Init( AppDropMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDropMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const030A );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const030A );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const030A );
  ViewsBorder_OnSetWidth( &_this->Border, 1 );
  ViewsBorder_OnSetColor( &_this->Border, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->CaptionText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const030B );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const030C ));
  ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
  _this->enabled = 1;
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::DropMenuItem' */
void AppDropMenuItem__ReInit( AppDropMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'App::DropMenuItem' */
void AppDropMenuItem__Done( AppDropMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDropMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->CaptionText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DropMenuItem' */
void AppDropMenuItem__Mark( AppDropMenuItem _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->CaptionText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppDropMenuItem_UpdateLayout( AppDropMenuItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDropMenuItem_UpdateViewState( AppDropMenuItem _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );

  if ( !isEnabled )
  {
    ViewsRectangle_OnSetColor( &_this->Background, _Const030D );
    ViewsBorder_OnSetVisible( &_this->Border, 0 );
    ViewsText_OnSetColor( &_this->CaptionText, _Const011D );
  }
  else
    if ( _this->pressed )
    {
      ViewsRectangle_OnSetColor( &_this->Background, _Const000B );
      ViewsBorder_OnSetColor( &_this->Border, _Const000E );
      ViewsBorder_OnSetVisible( &_this->Border, 1 );
      ViewsText_OnSetColor( &_this->CaptionText, _Const0000 );
    }
    else
      if ( isSelected )
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const0000 );
        ViewsBorder_OnSetColor( &_this->Border, _Const030E );
        ViewsBorder_OnSetVisible( &_this->Border, 1 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
      }
      else
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const0000 );
        ViewsBorder_OnSetVisible( &_this->Border, 0 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
      }

  _this->enabled = isEnabled;
  _this->selected = isSelected;
}

/* Variants derived from the class : 'App::DropMenuItem' */
EW_DEFINE_CLASS_VARIANTS( AppDropMenuItem )
EW_END_OF_CLASS_VARIANTS( AppDropMenuItem )

/* Virtual Method Table (VMT) for the class : 'App::DropMenuItem' */
EW_DEFINE_CLASS( AppDropMenuItem, CoreGroup, "App::DropMenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppDropMenuItem_UpdateLayout,
  AppDropMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDropMenuItem )

/* Initializer for the class 'App::ProgressPopup' */
void AppProgressPopup__Init( AppProgressPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->UnusedTimer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->EndEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppProgressPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const030F );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const0310 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0311 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0312 ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0313 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0049 
  ));
  CoreTimer_OnSetPeriod( &_this->UnusedTimer, 1200 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppProgressPopup_CancelSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->UnusedTimer.OnTrigger = EwNewSlot( _this, AppPopup_CatchBackgroundTap );
  _this->EndEventHandler.OnEvent = EwNewSlot( _this, AppProgressPopup_EndProgressEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->EndEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->EndProgressEvent );
}

/* Re-Initializer for the class 'App::ProgressPopup' */
void AppProgressPopup__ReInit( AppProgressPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreTimer__ReInit( &_this->UnusedTimer );
  CoreSystemEventHandler__ReInit( &_this->EndEventHandler );
}

/* Finalizer method for the class 'App::ProgressPopup' */
void AppProgressPopup__Done( AppProgressPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppProgressPopup );

  /* Finalize all embedded objects */
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreTimer__Done( &_this->UnusedTimer );
  CoreSystemEventHandler__Done( &_this->EndEventHandler );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ProgressPopup' */
void AppProgressPopup__Mark( AppProgressPopup _this )
{
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->UnusedTimer );
  EwMarkObject( &_this->EndEventHandler );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::ProgressPopup.CancelSlot()' */
void AppProgressPopup_CancelSlot( AppProgressPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetVisible( _this, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)_this, 0 );
  CoreTimer_OnSetEnabled( &_this->UnusedTimer, 0 );

  if ( !EwCompString( _this->PushButton.Label, EwLoadString( &_Const0049 )))
  {
    {
      Command cmd;

      Command0( CMD_CANCEL_PROGRESS, &cmd );
    }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppProgressPopup_EndProgressEvent( AppProgressPopup _this, XObject sender )
{
  AppProgress p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->UnusedTimer, 0 );
  p = EwCastObject( _this->EndEventHandler.Context, AppProgress );

  if ( p->amount == -1 )
  {
    WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0314 
    ));
    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 
    );
  }
  else
  {
    WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0315 
    ));
    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 100 
    );
  }
}

/* Variants derived from the class : 'App::ProgressPopup' */
EW_DEFINE_CLASS_VARIANTS( AppProgressPopup )
EW_END_OF_CLASS_VARIANTS( AppProgressPopup )

/* Virtual Method Table (VMT) for the class : 'App::ProgressPopup' */
EW_DEFINE_CLASS( AppProgressPopup, AppPopup, "App::ProgressPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppProgressPopup )

/* Initializer for the class 'App::OutputChannels' */
void AppOutputChannels__Init( AppOutputChannels _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreOutline__Init( &_this->Outline, &_this->_XObject, 0 );
  AppDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  AppOutputAction__Init( &_this->OutputAction, &_this->_XObject, 0 );
  AppOutputSignal__Init( &_this->OutputSignal, &_this->_XObject, 0 );
  AppOutputDelays__Init( &_this->OutputDelays, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOutputChannels );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0002 );
  ViewsRectangle_OnSetColorBL( &_this->Super1.Rectangle4, _Const00C2 );
  ViewsRectangle_OnSetColorBR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTR( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetColorTL( &_this->Super1.Rectangle4, _Const00C3 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle4, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle6, 1 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Rectangle7, 1 );
  CoreRectView__OnSetBounds( &_this->Super1.Background, _Const02A7 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const02A8 );
  ViewsRectangle_OnSetAlphaBlended( &_this->Super1.Background, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const02A9 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const02AA ));
  ViewsText_OnSetEmbedded( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const0316 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0050 );
  ViewsRectangle_OnSetVisible( &_this->Rectangle9, 0 );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const0317 );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 1000 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 1000 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0316 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreRectView__OnSetBounds( &_this->Border, _Const0316 );
  ViewsBorder_OnSetVisible( &_this->Border, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0318 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->Outline, _Const0316 );
  CoreOutline_OnSetSpace( &_this->Outline, 0 );
  CoreOutline_OnSetFormation( &_this->Outline, CoreFormationTopToBottom );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const0319 );
  CoreRectView__OnSetBounds( &_this->OutputAction, _Const031A );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputAction, 1 );
  CoreRectView__OnSetBounds( &_this->OutputSignal, _Const031B );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputSignal, 1 );
  CoreRectView__OnSetBounds( &_this->OutputDelays, _Const031C );
  CoreGroup_OnSetEmbedded((CoreGroup)&_this->OutputDelays, 1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle1 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle2 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle4 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle5 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle6 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle7 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle8 ), -1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Outline ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputAction ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputSignal ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputDelays ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, AppOutputChannels_Scroll 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, AppOutputChannels_TouchScroll 
  );
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppOutputChannels_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  CoreOutline_OnSetSlideHandler( &_this->Outline, &_this->SlideTouchHandler );
  _this->DropDownMenu.onSelection = EwNewSlot( _this, AppOutputChannels_Select );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, AppOutputChannels_LoadMenu 
  );

  /* Call the user defined constructor */
  AppOutputChannels_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::OutputChannels' */
void AppOutputChannels__ReInit( AppOutputChannels _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  ViewsBorder__ReInit( &_this->Border );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreOutline__ReInit( &_this->Outline );
  AppDropDownMenu__ReInit( &_this->DropDownMenu );
  AppOutputAction__ReInit( &_this->OutputAction );
  AppOutputSignal__ReInit( &_this->OutputSignal );
  AppOutputDelays__ReInit( &_this->OutputDelays );
}

/* Finalizer method for the class 'App::OutputChannels' */
void AppOutputChannels__Done( AppOutputChannels _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOutputChannels );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  ViewsRectangle__Done( &_this->Rectangle9 );
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  ViewsBorder__Done( &_this->Border );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreOutline__Done( &_this->Outline );
  AppDropDownMenu__Done( &_this->DropDownMenu );
  AppOutputAction__Done( &_this->OutputAction );
  AppOutputSignal__Done( &_this->OutputSignal );
  AppOutputDelays__Done( &_this->OutputDelays );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OutputChannels' */
void AppOutputChannels__Mark( AppOutputChannels _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Outline );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->OutputAction );
  EwMarkObject( &_this->OutputSignal );
  EwMarkObject( &_this->OutputDelays );
  EwMarkObject( _this->device );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppOutputChannels_UpdateLayout( AppOutputChannels _this, XPoint aSize )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aSize );

  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, EwGetRectH( 
  CoreOutline_GetContentArea( &_this->Outline, CoreViewStateEnabled )) + (( CoreOutline_CountViews( 
  &_this->Outline ) - 1 ) * _this->Outline.Space ));
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
  _this->Outline.Super1.Bounds ));
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppOutputChannels_Init( AppOutputChannels _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* 'C' function for method : 'App::OutputChannels.Scroll()' */
void AppOutputChannels_Scroll( AppOutputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreOutline_OnSetScrollOffset( &_this->Outline, EwSetPointY( _this->Outline.ScrollOffset, 
  -WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar )));
}

/* 'C' function for method : 'App::OutputChannels.TouchScroll()' */
void AppOutputChannels_TouchScroll( AppOutputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->Outline.ScrollOffset.Y 
  );
}

/* 'C' function for method : 'App::OutputChannels.Select()' */
void AppOutputChannels_Select( AppOutputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppOutputChannels_SaveData( _this );
  AppOutputChannels_OnSetChanIndex( _this, _this->DropDownMenu.VerticalList.SelectedItem 
  );
}

/* 'C' function for method : 'App::OutputChannels.LoadMenu()' */
void AppOutputChannels_LoadMenu( AppOutputChannels _this, XObject sender )
{
  AppDropDownMenu m = EwCastObject( sender, AppDropDownMenu );

  if ( _this->device != 0 )
  {
    EwRetainString( &m->itemName, AppLibClass_TypeName( EwGetAutoObject( &AppLib, 
    AppLibClass ), _this->device->outputs[ EwCheckIndex( m->itemIndex, 32 )]->type 
    ));
  }
  else
    EwReleaseString( &m->itemName );
}

/* 'C' function for method : 'App::OutputChannels.OnSetChanIndex()' */
void AppOutputChannels_OnSetChanIndex( AppOutputChannels _this, XInt32 value )
{
  if (( _this->device != 0 ) && ( value < _this->device->numoutputs ))
  {
    AppOutputChannel ch;
    _this->ChanIndex = value;
    ch = _this->device->outputs[ EwCheckIndex( _this->ChanIndex, 32 )];

    if ( ch != 0 )
    {
      CoreView v;
      XInt32 n;
      XBool extra;
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.fire, (( ch->actions 
      & AppActionBitsFire ) == AppActionBitsFire ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.evac, (( ch->actions 
      & AppActionBitsEvacuation ) == AppActionBitsEvacuation ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.fault, (( ch->actions 
      & AppActionBitsFault ) == AppActionBitsFault ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.aid, (( ch->actions 
      & AppActionBitsFirstAid ) == AppActionBitsFirstAid ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.pre, (( ch->actions 
      & AppActionBitsGeneral ) == AppActionBitsGeneral ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputAction.secure, (( ch->actions 
      & AppActionBitsSecurity ) == AppActionBitsSecurity ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.ignore, (( ch->flags 
      & AppOptionsNoNightDelays ) == AppOptionsNoNightDelays ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.inverted, (( ch->flags 
      & AppOptionsInverted ) == AppOptionsInverted ));
      WidgetSetToggleButton_OnSetChecked( &_this->OutputSignal.silenceable, (( ch->flags 
      & AppOptionsSilenceable ) == AppOptionsSilenceable ));
      CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputSignal.inverted, 0 );

      switch ( ch->type )
      {
        case AppChannelTypePanelAlarmRelay :
        case AppChannelTypePanelFaultRelay :
        case AppChannelTypePanelFireRelay :
        case AppChannelTypePanelRoutingOutput :
        {
          CoreGroup_OnSetEnabled((CoreGroup)&_this->OutputSignal.inverted, 1 );
        }
        break;
      }

      WidgetSetToggleButton_OnSetChecked( &_this->OutputDelays.globaldelay, (( ch->flags 
      & AppOptionsUseGlobalDelays ) == AppOptionsUseGlobalDelays ));
      WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->OutputDelays.HorzBarSlider, 
      ch->delay1 / 30 );
      WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->OutputDelays.HorzBarSlider1, 
      ch->delay2 / 30 );
      EwPostSignal( _this->OutputDelays.HorzBarSlider.OnChange, ((XObject)_this 
        ));
      EwPostSignal( _this->OutputDelays.HorzBarSlider1.OnChange, ((XObject)_this 
        ));
      EwPostSignal( EwNewSlot( &_this->OutputDelays, AppOutputDelays_GlobalDelay 
        ), ((XObject)_this ));
      CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, _this->ChanIndex 
      );
      ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, AppLibClass_TypeName( 
      EwGetAutoObject( &AppLib, AppLibClass ), ch->type ));
      AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu, _this->device->numoutputs 
      );
      v = ((CoreView)&_this->OutputDelays );

      while ( v->next != 0 )
      {
        v = v->next;
      }

      while ( v != ((CoreView)&_this->OutputDelays ))
      {
        CoreView del = v;
        v = v->prev;
        CoreGroup__Remove( _this, del );
      }

      extra = 0;

      for ( n = 0; n < _this->device->numparams; n = n + 1 )
      {
        if ( _this->device->params[ EwCheckIndex( n, 4 )] != 0 )
        {
          AppParameter p = _this->device->params[ EwCheckIndex( n, 4 )];

          if ((( p->code != AppParamCodeUnused ) && ( p->channel == _this->ChanIndex 
              )) && ( p->max != p->min ))
          {
            if ( extra == 0 )
            {
              AppParamSpecific title;
              extra = 1;
              title = EwNewObject( AppParamSpecific, 0 );
              CoreGroup_OnSetEmbedded((CoreGroup)title, 1 );
              CoreGroup__Add( _this, ((CoreView)title ), 123 );
            }

            if (( p->max - p->min ) == 1 )
            {
              AppParamToggle tog = EwNewObject( AppParamToggle, 0 );
              CoreGroup_OnSetEmbedded((CoreGroup)tog, 1 );
              tog->param = p;
              ViewsText_OnSetString( &tog->Text2, p->name );

              if ( p->value == p->min )
              {
                WidgetSetToggleButton_OnSetChecked( &tog->ToggleButton, 0 );
              }
              else
              {
                WidgetSetToggleButton_OnSetChecked( &tog->ToggleButton, 1 );
              }

              CoreGroup__Add( _this, ((CoreView)tog ), 123 );
            }
            else
            {
              AppParamSlider slide = EwNewObject( AppParamSlider, 0 );
              CoreGroup_OnSetEmbedded((CoreGroup)slide, 1 );
              slide->param = p;
              ViewsText_OnSetString( &slide->Text2, p->name );
              WidgetSetHorizontalSlider_OnSetMinValue( &slide->HorzBarSlider, p->min 
              );
              WidgetSetHorizontalSlider_OnSetMaxValue( &slide->HorzBarSlider, p->max 
              );
              WidgetSetHorizontalSlider_OnSetCurrentValue( &slide->HorzBarSlider, 
              p->value );
              CoreGroup__Add( _this, ((CoreView)slide ), 123 );
            }
          }
        }
      }

      CoreGroup__UpdateLayout( _this, EwGetRectSize( _this->Super3.Bounds ));
      CoreOutline_EnsureVisible( &_this->Outline, ((CoreView)&_this->OutputAction 
      ), 1, 0, EwNullSlot );
    }
  }
}

/* 'C' function for method : 'App::OutputChannels.CancelSlot()' */
void AppOutputChannels_CancelSlot( AppOutputChannels _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppOutputChannels_SaveData( _this );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::OutputChannels.SaveData()' */
void AppOutputChannels_SaveData( AppOutputChannels _this )
{
  if ( _this->device != 0 )
  {
    AppOutputChannel ch = _this->device->outputs[ EwCheckIndex( _this->ChanIndex, 
      32 )];

    if ( ch != 0 )
    {
      XInt32 n;
      CoreView view;
      ch->actions = 0;

      if ( _this->OutputAction.fire.Checked )
        ch->actions = ch->actions | AppActionBitsFire;

      if ( _this->OutputAction.evac.Checked )
        ch->actions = ch->actions | AppActionBitsEvacuation;

      if ( _this->OutputAction.fault.Checked )
        ch->actions = ch->actions | AppActionBitsFault;

      if ( _this->OutputAction.aid.Checked )
        ch->actions = ch->actions | AppActionBitsFirstAid;

      if ( _this->OutputAction.pre.Checked )
        ch->actions = ch->actions | AppActionBitsGeneral;

      if ( _this->OutputAction.secure.Checked )
        ch->actions = ch->actions | AppActionBitsSecurity;

      ch->flags = ch->flags & ~AppOptionsNoNightDelays;
      ch->flags = ch->flags & ~AppOptionsInverted;
      ch->flags = ch->flags & ~AppOptionsSilenceable;
      ch->flags = ch->flags & ~AppOptionsUseGlobalDelays;

      if ( _this->OutputSignal.ignore.Checked )
        ch->flags = ch->flags | AppOptionsNoNightDelays;

      if ( _this->OutputSignal.inverted.Checked )
        ch->flags = ch->flags | AppOptionsInverted;

      if ( _this->OutputSignal.silenceable.Checked )
        ch->flags = ch->flags | AppOptionsSilenceable;

      if ( _this->OutputDelays.globaldelay.Checked )
        ch->flags = ch->flags | AppOptionsUseGlobalDelays;

      ch->delay1 = (XUInt16)( WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->OutputDelays.HorzBarSlider 
      ) * 30 );
      ch->delay2 = (XUInt16)( WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->OutputDelays.HorzBarSlider1 
      ) * 30 );
      view = _this->Super2.last;

      for ( n = _this->device->numparams - 1; n >= 0; n = n - 1 )
      {
        if ( _this->device->params[ EwCheckIndex( n, 4 )] != 0 )
        {
          AppParameter p = _this->device->params[ EwCheckIndex( n, 4 )];

          if (( p->code != AppParamCodeUnused ) && ( p->channel == _this->ChanIndex 
              ))
          {
            if (( p->max - p->min ) == 1 )
            {
              AppParamToggle tog = EwCastObject( view, AppParamToggle );

              if ( tog->ToggleButton.Checked )
              {
                p->value = p->max;
              }
              else
              {
                p->value = p->min;
              }
            }
            else
            {
              AppParamSlider slide = EwCastObject( view, AppParamSlider );
              p->value = (XInt16)WidgetSetHorizontalSlider_OnGetCurrentValue( &slide->HorzBarSlider 
              );
            }

            view = view->prev;
          }
        }
      }
    }
  }
}

/* Variants derived from the class : 'App::OutputChannels' */
EW_DEFINE_CLASS_VARIANTS( AppOutputChannels )
EW_END_OF_CLASS_VARIANTS( AppOutputChannels )

/* Virtual Method Table (VMT) for the class : 'App::OutputChannels' */
EW_DEFINE_CLASS( AppOutputChannels, AppPopup, "App::OutputChannels" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppOutputChannels_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOutputChannels )

/* Initializer for the class 'App::OutputAction' */
void AppOutputAction__Init( AppOutputAction _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->fire, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->evac, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->secure, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->pre, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->fault, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->aid, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOutputAction );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const031D );
  CoreRectView__OnSetBounds( &_this->Text, _Const031E );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const031F ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0320 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0321 );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->fire, _Const0322 );
  WidgetSetToggleButton_OnSetLabel( &_this->fire, EwLoadString( &_Const01B6 ));
  CoreRectView__OnSetBounds( &_this->evac, _Const0323 );
  WidgetSetToggleButton_OnSetLabel( &_this->evac, EwLoadString( &_Const023D ));
  CoreRectView__OnSetBounds( &_this->secure, _Const0324 );
  WidgetSetToggleButton_OnSetLabel( &_this->secure, EwLoadString( &_Const02CB ));
  CoreRectView__OnSetBounds( &_this->pre, _Const0325 );
  WidgetSetToggleButton_OnSetLabel( &_this->pre, EwLoadString( &_Const024A ));
  CoreRectView__OnSetBounds( &_this->fault, _Const0326 );
  WidgetSetToggleButton_OnSetLabel( &_this->fault, EwLoadString( &_Const01B5 ));
  CoreRectView__OnSetBounds( &_this->aid, _Const0327 );
  WidgetSetToggleButton_OnSetLabel( &_this->aid, EwLoadString( &_Const02D1 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->fire ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->evac ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->secure ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->pre ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->fault ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->aid ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontS, ResourcesFont ));
  WidgetSetToggleButton_OnSetAppearance( &_this->fire, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->evac, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->secure, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->pre, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->fault, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->aid, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::OutputAction' */
void AppOutputAction__ReInit( AppOutputAction _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->fire );
  WidgetSetToggleButton__ReInit( &_this->evac );
  WidgetSetToggleButton__ReInit( &_this->secure );
  WidgetSetToggleButton__ReInit( &_this->pre );
  WidgetSetToggleButton__ReInit( &_this->fault );
  WidgetSetToggleButton__ReInit( &_this->aid );
}

/* Finalizer method for the class 'App::OutputAction' */
void AppOutputAction__Done( AppOutputAction _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOutputAction );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->fire );
  WidgetSetToggleButton__Done( &_this->evac );
  WidgetSetToggleButton__Done( &_this->secure );
  WidgetSetToggleButton__Done( &_this->pre );
  WidgetSetToggleButton__Done( &_this->fault );
  WidgetSetToggleButton__Done( &_this->aid );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OutputAction' */
void AppOutputAction__Mark( AppOutputAction _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->fire );
  EwMarkObject( &_this->evac );
  EwMarkObject( &_this->secure );
  EwMarkObject( &_this->pre );
  EwMarkObject( &_this->fault );
  EwMarkObject( &_this->aid );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::OutputAction' */
EW_DEFINE_CLASS_VARIANTS( AppOutputAction )
EW_END_OF_CLASS_VARIANTS( AppOutputAction )

/* Virtual Method Table (VMT) for the class : 'App::OutputAction' */
EW_DEFINE_CLASS( AppOutputAction, CoreGroup, "App::OutputAction" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOutputAction )

/* Initializer for the class 'App::OutputSignal' */
void AppOutputSignal__Init( AppOutputSignal _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->silenceable, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->inverted, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ignore, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOutputSignal );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0328 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0329 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const032A ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0320 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const032B );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->silenceable, _Const032C );
  WidgetSetToggleButton_OnSetLabel( &_this->silenceable, EwLoadString( &_Const032D 
  ));
  CoreRectView__OnSetBounds( &_this->inverted, _Const032E );
  WidgetSetToggleButton_OnSetLabel( &_this->inverted, EwLoadString( &_Const032F 
  ));
  CoreRectView__OnSetBounds( &_this->ignore, _Const0330 );
  WidgetSetToggleButton_OnSetLabel( &_this->ignore, EwLoadString( &_Const0331 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->silenceable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->inverted ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ignore ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontS, ResourcesFont ));
  _this->silenceable.OnSwitchOn = EwNullSlot;
  _this->silenceable.OnSwitchOff = EwNullSlot;
  WidgetSetToggleButton_OnSetAppearance( &_this->silenceable, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  WidgetSetToggleButton_OnSetAppearance( &_this->inverted, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->ignore.OnSwitchOn = EwNullSlot;
  _this->ignore.OnSwitchOff = EwNullSlot;
  WidgetSetToggleButton_OnSetAppearance( &_this->ignore, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::OutputSignal' */
void AppOutputSignal__ReInit( AppOutputSignal _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  WidgetSetToggleButton__ReInit( &_this->silenceable );
  WidgetSetToggleButton__ReInit( &_this->inverted );
  WidgetSetToggleButton__ReInit( &_this->ignore );
}

/* Finalizer method for the class 'App::OutputSignal' */
void AppOutputSignal__Done( AppOutputSignal _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOutputSignal );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  WidgetSetToggleButton__Done( &_this->silenceable );
  WidgetSetToggleButton__Done( &_this->inverted );
  WidgetSetToggleButton__Done( &_this->ignore );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OutputSignal' */
void AppOutputSignal__Mark( AppOutputSignal _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->silenceable );
  EwMarkObject( &_this->inverted );
  EwMarkObject( &_this->ignore );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppOutputSignal_UpdateLayout( AppOutputSignal _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppOutputSignal_UpdateViewState( AppOutputSignal _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::OutputSignal' */
EW_DEFINE_CLASS_VARIANTS( AppOutputSignal )
EW_END_OF_CLASS_VARIANTS( AppOutputSignal )

/* Virtual Method Table (VMT) for the class : 'App::OutputSignal' */
EW_DEFINE_CLASS( AppOutputSignal, CoreGroup, "App::OutputSignal" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppOutputSignal_UpdateLayout,
  AppOutputSignal_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOutputSignal )

/* Initializer for the class 'App::OutputDelays' */
void AppOutputDelays__Init( AppOutputDelays _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->TitleText, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider1, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->globaldelay, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOutputDelays );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0332 );
  CoreRectView__OnSetBounds( &_this->TitleText, _Const0333 );
  ViewsText_OnSetAlignment( &_this->TitleText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TitleText, EwLoadString( &_Const00F7 ));
  ViewsText_OnSetColor( &_this->TitleText, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0334 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0335 );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text, _Const0336 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const0337 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 20 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0338 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, 0 );
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider1, _Const0339 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider1, 19 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
  CoreRectView__OnSetBounds( &_this->globaldelay, _Const033A );
  WidgetSetToggleButton_OnSetLabel( &_this->globaldelay, EwLoadString( &_Const033B 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->TitleText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->globaldelay ), 0 );
  ViewsText_OnSetFont( &_this->TitleText, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNewSlot( _this, AppOutputDelays_DelaySlot );
  _this->HorzBarSlider.OnEnd = EwNewSlot( _this, AppOutputDelays_End );
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider1.OnChange = EwNewSlot( _this, AppOutputDelays_Delay2 );
  _this->HorzBarSlider1.OnEnd = EwNullSlot;
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider1, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
  _this->globaldelay.OnSwitchOn = EwNewSlot( _this, AppOutputDelays_GlobalDelay 
  );
  _this->globaldelay.OnSwitchOff = EwNewSlot( _this, AppOutputDelays_GlobalDelay 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->globaldelay, EwGetAutoObject( &AppNormalCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::OutputDelays' */
void AppOutputDelays__ReInit( AppOutputDelays _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->TitleText );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider1 );
  WidgetSetToggleButton__ReInit( &_this->globaldelay );
}

/* Finalizer method for the class 'App::OutputDelays' */
void AppOutputDelays__Done( AppOutputDelays _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOutputDelays );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->TitleText );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );
  ViewsText__Done( &_this->Text1 );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider1 );
  WidgetSetToggleButton__Done( &_this->globaldelay );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OutputDelays' */
void AppOutputDelays__Mark( AppOutputDelays _this )
{
  EwMarkObject( &_this->TitleText );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->HorzBarSlider1 );
  EwMarkObject( &_this->globaldelay );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::OutputDelays.DelaySlot()' */
void AppOutputDelays_DelaySlot( AppOutputDelays _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i2 = 20 - i;

  if ( i == 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
  }

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, i2 );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011A ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const011B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011C ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const011B )));
}

/* 'C' function for method : 'App::OutputDelays.End()' */
void AppOutputDelays_End( AppOutputDelays _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i == 0 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
    ViewsText_OnSetColor( &_this->Text1, _Const011D );
  }
  else
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 1 );
    ViewsText_OnSetColor( &_this->Text1, _Const000E );
  }
}

/* 'C' function for method : 'App::OutputDelays.Delay2()' */
void AppOutputDelays_Delay2( AppOutputDelays _this, XObject sender )
{
  XInt32 i;
  XInt32 i2;
  XFloat f;
  XFloat f2;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );
  i2 = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider1 );

  if (( i + i2 ) >= 20 )
    i = 20 - i2;

  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, i );
  f = (XFloat)i * 0.500000f;
  f2 = (XFloat)i2 * 0.500000f;
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011A ), EwNewStringFloat( f, 2, 1 )), EwLoadString( &_Const011B )));
  ViewsText_OnSetString( &_this->Text1, EwConcatString( EwConcatString( EwLoadString( 
  &_Const011C ), EwNewStringFloat( f2, 2, 1 )), EwLoadString( &_Const011B )));
}

/* 'C' function for method : 'App::OutputDelays.GlobalDelay()' */
void AppOutputDelays_GlobalDelay( AppOutputDelays _this, XObject sender )
{
  XInt32 i;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider, (XBool)!_this->globaldelay.Checked 
  );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, (XBool)!_this->globaldelay.Checked 
  );

  if ( _this->globaldelay.Checked )
  {
    ViewsText_OnSetColor( &_this->Text1, _Const011D );
    ViewsText_OnSetColor( &_this->Text, _Const011D );
  }
  else
  {
    ViewsText_OnSetColor( &_this->Text1, _Const000E );
    ViewsText_OnSetColor( &_this->Text, _Const000E );
  }

  i = WidgetSetHorizontalSlider_OnGetCurrentValue( &_this->HorzBarSlider );

  if ( i == 0 )
  {
    WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->HorzBarSlider1, 0 );
    ViewsText_OnSetColor( &_this->Text1, _Const011D );
  }
}

/* Variants derived from the class : 'App::OutputDelays' */
EW_DEFINE_CLASS_VARIANTS( AppOutputDelays )
EW_END_OF_CLASS_VARIANTS( AppOutputDelays )

/* Virtual Method Table (VMT) for the class : 'App::OutputDelays' */
EW_DEFINE_CLASS( AppOutputDelays, CoreGroup, "App::OutputDelays" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOutputDelays )

/* Initializer for the class 'App::TestZoneItem' */
void AppTestZoneItem__Init( AppTestZoneItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->ExpandImage, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->InTestText, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTestZoneItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const033C );
  CoreRectView__OnSetBounds( &_this->ExpandImage, _Const033D );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const033E );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const033F 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0304 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const018D );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0185 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0340 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->InTestText, _Const0341 );
  ViewsText_OnSetAlignment( &_this->InTestText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->InTestText, 0 );
  ViewsText_OnSetColor( &_this->InTestText, _Const000E );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0342 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ExpandImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InTestText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &AppExpandBitmap, 
  ResourcesBitmap ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppTestZoneItem_ClearAll );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppTestZoneItem_ToggleExpand 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->InTestText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppTestZoneItem_ToggleSlot 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppTestZoneItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &AppLargeCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::TestZoneItem' */
void AppTestZoneItem__ReInit( AppTestZoneItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->ExpandImage );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->InTestText );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
}

/* Finalizer method for the class 'App::TestZoneItem' */
void AppTestZoneItem__Done( AppTestZoneItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTestZoneItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->ExpandImage );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->InTestText );
  WidgetSetToggleButton__Done( &_this->ToggleButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TestZoneItem' */
void AppTestZoneItem__Mark( AppTestZoneItem _this )
{
  EwMarkObject( &_this->ExpandImage );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->InTestText );
  EwMarkObject( &_this->ToggleButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTestZoneItem_UpdateViewState( AppTestZoneItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const009B 
  ), EwNewStringInt( _this->ZoneNum, 0, 10 )));
}

/* 'C' function for method : 'App::TestZoneItem.ClearAll()' */
void AppTestZoneItem_ClearAll( AppTestZoneItem _this, XObject sender )
{
  XSet zf;
  XInt16 dev;
  XInt16 devs;
  AppTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->ZoneNum 
  );
  zf = zf & ~AppZoneFlagsOnTest;
  devs = (XInt16)AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
  ), _this->ZoneNum );

  for ( dev = 0; dev < devs; dev = (XInt16)( dev + 1 ))
  {
    XInt16 unitnum = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, AppLibClass 
      ), _this->ZoneNum, dev );
    AppDevice d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), 
      unitnum );

    if ( d != 0 )
    {
      XUInt8 channel;
      d->settings = d->settings & ~AppDeviceSettingOnTest;

      for ( channel = 0; channel < 32; channel = (XUInt8)( channel + 1 ))
      {
        d->flags[ EwCheckIndex( channel, 32 )] = d->flags[ EwCheckIndex( channel, 
        32 )] & ~AppChannelFlagsInputOnTest;
      }

      AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), unitnum, d 
      );
    }
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppTreeView );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::TestZoneItem.ToggleSlot()' */
void AppTestZoneItem_ToggleSlot( AppTestZoneItem _this, XObject sender )
{
  AppTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
    AppTreeView );
  XSet zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->ZoneNum 
    );

  if ( EwCastObject( sender, WidgetSetToggleButton )->Checked )
  {
    zf = zf | AppZoneFlagsOnTest;
  }
  else
  {
    zf = zf & ~AppZoneFlagsOnTest;
  }

  AppLibClass_SetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->ZoneNum, 
  zf );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::TestZoneItem.ToggleExpand()' */
void AppTestZoneItem_ToggleExpand( AppTestZoneItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
      AppTreeView );
    XSet zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), 
      (XInt16)_this->ZoneNum );

    if ( !(( zf & AppZoneFlagsTestExpanded ) == AppZoneFlagsTestExpanded ))
    {
      zf = zf | AppZoneFlagsTestExpanded;
    }
    else
    {
      zf = zf & ~AppZoneFlagsTestExpanded;
    }

    AppLibClass_SetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->ZoneNum, 
    zf );
    EwPostSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this ));
  }
}

/* Variants derived from the class : 'App::TestZoneItem' */
EW_DEFINE_CLASS_VARIANTS( AppTestZoneItem )
EW_END_OF_CLASS_VARIANTS( AppTestZoneItem )

/* Virtual Method Table (VMT) for the class : 'App::TestZoneItem' */
EW_DEFINE_CLASS( AppTestZoneItem, CoreGroup, "App::TestZoneItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTestZoneItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTestZoneItem )

/* Initializer for the class 'App::TestUnitItem' */
void AppTestUnitItem__Init( AppTestUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->UnitCheckBox, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTestUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0344 );
  ViewsText_OnSetColorBL( &_this->Text, _Const000E );
  ViewsText_OnSetColorBR( &_this->Text, _Const000E );
  ViewsText_OnSetColorTR( &_this->Text, _Const000E );
  ViewsText_OnSetColorTL( &_this->Text, _Const000E );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const0345 );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0346 );
  ViewsText_OnSetColorBL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorBR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, 0 );
  ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0347 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0348 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0349 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const034A );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const034B );
  CoreRectView__OnSetBounds( &_this->UnitCheckBox, _Const034C );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->UnitCheckBox, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->UnitCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const034D );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const034E 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppVerdanaProSemiBold16, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppExpandBitmap, ResourcesBitmap 
  ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppTestUnitItem_ToggleExpand 
  );
  _this->UnitCheckBox.OnSwitchOn = EwNewSlot( _this, AppTestUnitItem_ToggleSlot 
  );
  _this->UnitCheckBox.OnSwitchOff = EwNewSlot( _this, AppTestUnitItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->UnitCheckBox, EwGetAutoObject( 
  &AppSmallCheckBox, WidgetSetToggleButtonConfig ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppTestUnitItem_PPUon );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::TestUnitItem' */
void AppTestUnitItem__ReInit( AppTestUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__ReInit( &_this->UnitCheckBox );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'App::TestUnitItem' */
void AppTestUnitItem__Done( AppTestUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTestUnitItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__Done( &_this->UnitCheckBox );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TestUnitItem' */
void AppTestUnitItem__Mark( AppTestUnitItem _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->UnitCheckBox );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTestUnitItem_UpdateViewState( AppTestUnitItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
    ViewsText_OnSetColor( &_this->Text, _Const000E );
    ViewsImage_OnSetVisible( &_this->Image1, 1 );
    CoreGroup__OnSetVisible( &_this->UnitCheckBox, 1 );
  }
  else
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const030D );
    ViewsText_OnSetColor( &_this->Text, _Const030D );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->UnitCheckBox, 0 );
    CoreGroup__OnSetVisible( &_this->UnitCheckBox, 0 );
  }

  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const009B ), EwNewStringInt( _this->ZoneNum, 0, 10 )), EwLoadString( 
  &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), _this->UnitNum 
  )));
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton, (XBool)( _this->UnitNum 
  < 512 ));
}

/* 'C' function for method : 'App::TestUnitItem.ToggleSlot()' */
void AppTestUnitItem_ToggleSlot( AppTestUnitItem _this, XObject sender )
{
  AppDevice d;
  AppTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( d != 0 )
  {
    if ( _this->UnitCheckBox.Checked )
    {
      d->settings = d->settings | AppDeviceSettingOnTest;
    }
    else
    {
      d->settings = d->settings & ~AppDeviceSettingOnTest;
    }

    AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
    d );
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppTreeView );

  if ( testpage != 0 )
  {
    EwPostSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::TestUnitItem.ToggleExpand()' */
void AppTestUnitItem_ToggleExpand( AppTestUnitItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppTreeView testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
      AppTreeView );

    if ( testpage != 0 )
    {
      AppDevice d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass 
        ), (XInt16)_this->UnitNum );

      if ( d == 0 )
        return;

      if ( !(( d->settings & AppDeviceSettingTestExpanded ) == AppDeviceSettingTestExpanded 
          ))
      {
        d->settings = d->settings | AppDeviceSettingTestExpanded;
      }
      else
      {
        d->settings = d->settings & ~AppDeviceSettingTestExpanded;
      }

      AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
      d );
      EwPostSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this 
        ));
    }
  }
}

/* 'C' function for method : 'App::TestUnitItem.PPUon()' */
void AppTestUnitItem_PPUon( AppTestUnitItem _this, XObject sender )
{
  XInt32 z;
  XInt32 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  z = _this->ZoneNum;
  u = _this->UnitNum;
  Command2( CMD_PPU_MODE, z, u );
}

/* Variants derived from the class : 'App::TestUnitItem' */
EW_DEFINE_CLASS_VARIANTS( AppTestUnitItem )
EW_END_OF_CLASS_VARIANTS( AppTestUnitItem )

/* Virtual Method Table (VMT) for the class : 'App::TestUnitItem' */
EW_DEFINE_CLASS( AppTestUnitItem, CoreGroup, "App::TestUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTestUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTestUnitItem )

/* Initializer for the class 'App::TestItem' */
void AppTestItem__Init( AppTestItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppTestUnitItem__Init( &_this->TestUnitItem, &_this->_XObject, 0 );
  AppTestZoneItem__Init( &_this->TestZoneItem, &_this->_XObject, 0 );
  AppTestChannelItem__Init( &_this->TestChannelItem, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTestItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->TestUnitItem, _Const0343 );
  CoreRectView__OnSetBounds( &_this->TestZoneItem, _Const0343 );
  CoreRectView__OnSetBounds( &_this->TestChannelItem, _Const0343 );
  CoreGroup__Add( _this, ((CoreView)&_this->TestUnitItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TestZoneItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TestChannelItem ), 0 );
}

/* Re-Initializer for the class 'App::TestItem' */
void AppTestItem__ReInit( AppTestItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppTestUnitItem__ReInit( &_this->TestUnitItem );
  AppTestZoneItem__ReInit( &_this->TestZoneItem );
  AppTestChannelItem__ReInit( &_this->TestChannelItem );
}

/* Finalizer method for the class 'App::TestItem' */
void AppTestItem__Done( AppTestItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTestItem );

  /* Finalize all embedded objects */
  AppTestUnitItem__Done( &_this->TestUnitItem );
  AppTestZoneItem__Done( &_this->TestZoneItem );
  AppTestChannelItem__Done( &_this->TestChannelItem );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TestItem' */
void AppTestItem__Mark( AppTestItem _this )
{
  EwMarkObject( &_this->TestUnitItem );
  EwMarkObject( &_this->TestZoneItem );
  EwMarkObject( &_this->TestChannelItem );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppTestItem_UpdateLayout( AppTestItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTestItem_UpdateViewState( AppTestItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( CoreGroup_OnGetVisible((CoreGroup)&_this->TestChannelItem ))
  {
    CoreGroup_InvalidateViewState((CoreGroup)&_this->TestChannelItem );
    CoreGroup_InvalidateViewState((CoreGroup)&_this->TestChannelItem.HorizontalLedValueBar 
    );
  }
}

/* Variants derived from the class : 'App::TestItem' */
EW_DEFINE_CLASS_VARIANTS( AppTestItem )
EW_END_OF_CLASS_VARIANTS( AppTestItem )

/* Virtual Method Table (VMT) for the class : 'App::TestItem' */
EW_DEFINE_CLASS( AppTestItem, CoreGroup, "App::TestItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppTestItem_UpdateLayout,
  AppTestItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTestItem )

/* Initializer for the class 'App::TreeView' */
void AppTreeView__Init( AppTreeView _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEventHandler__Init( &_this->SiteLoadedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->OnTestChangeEventHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTreeView );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const034F );
  CoreView_OnSetLayout((CoreView)&_this->ListViewer, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const034F );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppTestItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0350 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0006 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const01C7 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const01C8 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const01C9 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  _this->SiteLoadedEventHandler.OnEvent = EwNewSlot( _this, AppTreeView_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteLoadedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->OnTestChangeEventHandler.OnEvent = EwNewSlot( _this, AppTreeView_TestChange 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->OnTestChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->OnTestChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppTreeView_OnLoadItem );
  _this->ListViewer.onScroll = EwNewSlot( _this, AppTreeView_RemoveMenu );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppTreeView_RefreshAll );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppTreeView_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );

  /* Call the user defined constructor */
  AppTreeView_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::TreeView' */
void AppTreeView__ReInit( AppTreeView _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEventHandler__ReInit( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->OnTestChangeEventHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  ViewsBevel__ReInit( &_this->Bevel1 );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
}

/* Finalizer method for the class 'App::TreeView' */
void AppTreeView__Done( AppTreeView _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTreeView );

  /* Finalize all embedded objects */
  CoreSystemEventHandler__Done( &_this->SiteLoadedEventHandler );
  CoreSystemEventHandler__Done( &_this->OnTestChangeEventHandler );
  AppListViewer__Done( &_this->ListViewer );
  ViewsBevel__Done( &_this->Bevel1 );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TreeView' */
void AppTreeView__Mark( AppTreeView _this )
{
  EwMarkObject( &_this->SiteLoadedEventHandler );
  EwMarkObject( &_this->OnTestChangeEventHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( _this->MenuHandle );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->MeshListChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::TreeView.OnSetVisible()' */
void AppTreeView_OnSetVisible( AppTreeView _this, XBool value )
{
  CoreGroup_OnSetVisible((CoreGroup)_this, value );
  EwPostSignal( EwNewSlot( _this, AppTreeView_Refresh ), ((XObject)_this ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTreeView_UpdateViewState( AppTreeView _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->ListViewer );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppTreeView_Init( AppTreeView _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, AppTreeView_onEvent1 ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppTreeView_OnLoadItem( AppTreeView _this, XObject sender )
{
  CoreVerticalList vlist;
  XInt32 itemNo;
  AppTestItem item;
  AppTest test;
  XBool everything;
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  vlist = &_this->ListViewer.VerticalList;
  itemNo = _this->ListViewer.Item;
  item = EwCastObject( vlist->View, AppTestItem );

  if ( item == 0 )
    return;

  test = EwCastObject( _this->Super3.Owner, AppTest );
  everything = 0;

  if ( test != 0 )
  {
    everything = test->ToggleEverything.Checked;
  }

  if ( Command1( CMD_CHECK_TREE, 0 ) ) return;

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    return;
  }

  curZone = 1;
  i = 0;
  numZones = AppLibClass_NumZonesWithDevices( EwGetAutoObject( &AppLib, AppLibClass 
  ));

  while ( numZones > 0 )
  {
    XInt32 numdevs = AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
      ), curZone );

    if ( numdevs > 0 )
    {
      XSet zf;
      numZones = numZones - 1;
      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), curZone 
      );

      if ( itemNo == i )
      {
        item->TestZoneItem.ZoneNum = curZone;
        CoreGroup__OnSetVisible( &item->TestZoneItem, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 1 );
        CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
        CoreGroup__OnSetVisible( &item->TestChannelItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
        WidgetSetToggleButton_OnSetChecked( &item->TestZoneItem.ToggleButton, (XBool)((( 
        zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ) || everything ));
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem.PushButton, (XBool)!item->TestZoneItem.ToggleButton.Checked 
        );

        if ((( zf & AppZoneFlagsTestExpanded ) == AppZoneFlagsTestExpanded ))
        {
          ViewsImage_OnSetBitmap( &item->TestZoneItem.ExpandImage, EwLoadResource( 
          &AppCollapseBitmap, ResourcesBitmap ));
        }
        else
        {
          ViewsImage_OnSetBitmap( &item->TestZoneItem.ExpandImage, EwLoadResource( 
          &AppExpandBitmap, ResourcesBitmap ));
        }

        CoreGroup_InvalidateViewState((CoreGroup)&item->TestZoneItem );
        return;
      }
      else
      {
        i = i + 1;
      }

      if ((( zf & AppZoneFlagsTestExpanded ) == AppZoneFlagsTestExpanded ))
      {
        XInt32 dev = 0;

        while ( dev < numdevs )
        {
          XInt16 unitno = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, AppLibClass 
            ), curZone, dev );
          AppDevice device = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass 
            ), unitno );
          AppDeviceConfig config = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
            AppLibClass ), unitno );

          if ( config == 0 )
            return;

          if ( i == itemNo )
          {
            CoreGroup__OnSetVisible( &item->TestUnitItem, 1 );

            if ((( device->settings & AppDeviceSettingTestExpanded ) == AppDeviceSettingTestExpanded 
                ))
            {
              ViewsImage_OnSetBitmap( &item->TestUnitItem.Image1, EwLoadResource( 
              &AppCollapseBitmap, ResourcesBitmap ));
            }
            else
            {
              ViewsImage_OnSetBitmap( &item->TestUnitItem.Image1, EwLoadResource( 
              &AppExpandBitmap, ResourcesBitmap ));
            }

            if ( device == 0 )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
            }
            else
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 1 );

              if ( config->numinputs == 0 )
              {
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                0 );
                WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                0 );
              }
              else
                if ((( zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ))
                {
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                  0 );
                  WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                  1 );
                }
                else
                {
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                  1 );
                  WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                  (( device->settings & AppDeviceSettingOnTest ) == AppDeviceSettingOnTest 
                  ));
                }
            }

            CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
            CoreGroup__OnSetVisible( &item->TestChannelItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
            item->TestUnitItem.UnitNum = (XUInt16)unitno;
            item->TestUnitItem.ZoneNum = curZone;
            ViewsText_OnSetString( &item->TestUnitItem.DescriptionText, config->location 
            );
            CoreGroup_InvalidateViewState((CoreGroup)&item->TestUnitItem );
            return;
          }
          else
          {
            i = i + 1;
          }

          if ( device != 0 )
            if ((( device->settings & AppDeviceSettingTestExpanded ) == AppDeviceSettingTestExpanded 
                ))
            {
              XInt32 chan = 0;

              for ( chan = 0; chan < config->numinputs; chan = chan + 1 )
              {
                if ( i == itemNo )
                {
                  CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                  CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem, 1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 );
                  item->TestChannelItem.ChanNum = (XUInt8)chan;
                  item->TestChannelItem.UnitNum = (XUInt16)unitno;
                  item->TestChannelItem.ZoneNum = curZone;
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalLedValueBar, 
                  1 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.HorizontalLedValueBar, 
                  1 );

                  if ((( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsInputActiveOnTest 
                      ) == AppChannelFlagsInputActiveOnTest ))
                  {
                    WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalLedValueBar, 
                    100 );
                  }
                  else
                  {
                    WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalLedValueBar, 
                    0 );
                  }

                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                  0 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.ToggleButton, 
                  0 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.CheckBox, 1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                  1 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.SmallDropDownMenu, 
                  0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                  0 );
                  ViewsText_OnSetString( &item->TestChannelItem.ChannelName, AppLibClass_TypeName( 
                  EwGetAutoObject( &AppLib, AppLibClass ), config->inputs[ EwCheckIndex( 
                  chan, 32 )]->type ));

                  if ((( zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ) || (( 
                      device->settings & AppDeviceSettingOnTest ) == AppDeviceSettingOnTest 
                      ))
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                    0 );
                    WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.CheckBox, 
                    1 );
                  }
                  else
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                    1 );
                    WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.CheckBox, 
                    (( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsInputOnTest 
                    ) == AppChannelFlagsInputOnTest ));
                  }

                  if ( config->inputs[ EwCheckIndex( chan, 32 )] != 0 )
                  {
                    AppChannelImage_OnSetBitmap( &item->TestChannelItem.ChannelImage, 
                    config->inputs[ EwCheckIndex( chan, 32 )]->type );
                  }

                  if ((((( config->inputs[ EwCheckIndex( chan, 32 )]->type == AppChannelTypeSmoke 
                      ) || ( config->inputs[ EwCheckIndex( chan, 32 )]->type == 
                      AppChannelTypeHeatB )) || ( config->inputs[ EwCheckIndex( 
                      chan, 32 )]->type == AppChannelTypeHeatA1R )) || ( config->inputs[ 
                      EwCheckIndex( chan, 32 )]->type == AppChannelTypeCO )) && 
                      ( chan < 4 ))
                  {
                    XUInt8 v;
                    CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 
                    1 );
                    ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 1 );
                    ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                    1 );
                    ViewsText_OnSetVisible( &item->TestChannelItem.Text, 1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                    1 );
                    v = device->val[ EwCheckIndex( chan, 4 )];

                    if ( v == 0 )
                    {
                      ViewsText_OnSetString( &item->TestChannelItem.Text, EwLoadString( 
                      &_Const01B3 ));
                    }
                    else
                    {
                      if ( config->inputs[ EwCheckIndex( chan, 32 )]->type == AppChannelTypeSmoke )
                        switch ( v )
                        {
                          case 1 :
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwLoadString( &_Const0351 ));
                          break;

                          case 2 :
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwLoadString( &_Const0352 ));
                          break;

                          case 3 :
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwLoadString( &_Const0353 ));
                          break;

                          case 4 :
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwLoadString( &_Const0354 ));
                          break;

                          case 8 :
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwLoadString( &_Const0354 ));
                          break;

                          default : 
                            ViewsText_OnSetString( &item->TestChannelItem.Text, 
                            EwNewStringInt( v, 0, 10 ));
                        }
                      else
                        if (( config->inputs[ EwCheckIndex( chan, 32 )]->type == 
                            AppChannelTypeHeatB ) || ( config->inputs[ EwCheckIndex( 
                            chan, 32 )]->type == AppChannelTypeHeatA1R ))
                          switch ( v )
                          {
                            case 1 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0355 ));
                            break;

                            default : 
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwNewStringInt( v, 0, 10 ));
                          }
                        else
                          if ( config->inputs[ EwCheckIndex( chan, 32 )]->type == 
                              AppChannelTypeCO )
                            switch ( v )
                            {
                              default : 
                                ViewsText_OnSetString( &item->TestChannelItem.Text, 
                                EwNewStringInt( v, 0, 10 ));
                            }
                    }
                  }
                  else
                  {
                    CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                    0 );
                    ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 0 );
                    ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                    0 );
                    ViewsText_OnSetVisible( &item->TestChannelItem.Text, 0 );
                  }

                  CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                  );
                  return;
                }
                else
                {
                  i = i + 1;
                }
              }

              for ( chan = 0; chan < config->numoutputs; chan = chan + 1 )
              {
                if ( i == itemNo )
                {
                  XInt32 menu;
                  CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                  CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem, 1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 );
                  item->TestChannelItem.ChanNum = (XUInt8)chan;
                  item->TestChannelItem.UnitNum = (XUInt16)unitno;
                  item->TestChannelItem.ZoneNum = curZone;
                  CoreGroup__OnSetVisible( &item->TestChannelItem.HorizontalLedValueBar, 
                  0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalLedValueBar, 
                  0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                  1 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.ToggleButton, 
                  1 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.CheckBox, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                  0 );
                  CoreGroup__OnSetVisible( &item->TestChannelItem.SmallDropDownMenu, 
                  1 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                  1 );
                  menu = device->menuSelection[ EwCheckIndex( chan, 32 )];
                  item->TestChannelItem.SmallDropDownMenu.selIndex = menu;
                  item->TestChannelItem.DefaultAction = (XEnum)menu;
                  ViewsText_OnSetString( &item->TestChannelItem.SmallDropDownMenu.Text, 
                  AppLibClass_ProfileName( EwGetAutoObject( &AppLib, AppLibClass 
                  ), (XEnum)menu ));
                  ViewsText_OnSetString( &item->TestChannelItem.ChannelName, AppLibClass_TypeName( 
                  EwGetAutoObject( &AppLib, AppLibClass ), config->outputs[ EwCheckIndex( 
                  chan, 32 )]->type ));

                  if ((( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsOutputOnTest 
                      ) == AppChannelFlagsOutputOnTest ))
                  {
                    WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.ToggleButton, 
                    1 );
                  }
                  else
                  {
                    WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.ToggleButton, 
                    0 );
                  }

                  if ( config->outputs[ EwCheckIndex( chan, 32 )] != 0 )
                  {
                    AppChannelImage_OnSetBitmap( &item->TestChannelItem.ChannelImage, 
                    config->outputs[ EwCheckIndex( chan, 32 )]->type );
                  }

                  CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 0 
                  );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                  0 );
                  ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 0 );
                  ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                  0 );
                  ViewsText_OnSetVisible( &item->TestChannelItem.Text, 0 );
                  CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                  );
                  return;
                }
                else
                {
                  i = i + 1;
                }
              }
            }

          dev = dev + 1;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
  CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
  CoreGroup__OnSetVisible( &item->TestChannelItem, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppTreeView_onEvent1( AppTreeView _this, XObject sender )
{
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numZones = AppLibClass_NumZonesWithDevices( EwGetAutoObject( &AppLib, AppLibClass 
  ));
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numZones );
}

/* 'C' function for method : 'App::TreeView.CountOnTest()' */
void AppTreeView_CountOnTest( AppTreeView _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( _this->Super3.Owner->Super2.Owner, AppApplication );

  if ( app != 0 )
  {
    EwPostSignal( EwNewSlot( &app->OnTest, AppOnTest_Refresh ), ((XObject)_this 
      ));
  }
}

/* 'C' function for method : 'App::TreeView.j()' */
void AppTreeView_j( AppTreeView _this )
{
  CoreView view = CoreView__GetRoot( _this )->Super1.last;

  while ( view != 0 )
  {
    AppSmallDropDownMenuList list = EwCastObject( view, AppSmallDropDownMenuList 
      );

    if ( list != 0 )
    {
      CoreGroup__Remove( CoreView__GetRoot( _this ), view );
      return;
    }

    view = view->prev;
  }
}

/* 'C' function for method : 'App::TreeView.RemoveMenu()' */
void AppTreeView_RemoveMenu( AppTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if (( _this->MenuHandle != 0 ) && ((CoreRoot)_this->MenuHandle->Super3.Owner == 
      CoreView__GetRoot( _this )))
  {
    CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)_this->MenuHandle 
    ));
    _this->MenuHandle->Super3.Owner = 0;
    _this->MenuHandle = 0;
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppTreeView_RefreshAll( AppTreeView _this, XObject sender )
{
  CoreVerticalList vlist;
  XInt32 itemNo;
  AppTestItem item;
  AppTest test;
  XBool everything;
  XUInt8 curZone;
  XInt32 i;
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  vlist = &_this->ListViewer.VerticalList;
  itemNo = _this->ListViewer.Item;
  item = EwCastObject( vlist->Super1.first, AppTestItem );

  if ( item == 0 )
    return;

  test = EwCastObject( _this->Super3.Owner, AppTest );
  everything = 0;

  if ( test != 0 )
  {
    everything = test->ToggleEverything.Checked;
  }

  if ( Command1( CMD_CHECK_TREE, 0 ) ) return;

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    item = EwCastObject( item->Super3.next, AppTestItem );

    if ( item == 0 )
      return;

    itemNo = itemNo + 1;
  }

  curZone = 1;
  i = 0;
  numZones = AppLibClass_NumZonesWithDevices( EwGetAutoObject( &AppLib, AppLibClass 
  ));

  while ( numZones > 0 )
  {
    XInt32 numdevs = AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
      ), curZone );

    if ( numdevs > 0 )
    {
      XSet zf;
      numZones = numZones - 1;
      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), curZone 
      );

      if ( itemNo == i )
      {
        CoreGroup__OnSetVisible( item, 1 );
        item->TestZoneItem.ZoneNum = curZone;
        CoreGroup__OnSetVisible( &item->TestZoneItem, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 1 );
        CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
        CoreGroup__OnSetVisible( &item->TestChannelItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
        WidgetSetToggleButton_OnSetChecked( &item->TestZoneItem.ToggleButton, (XBool)((( 
        zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ) || everything ));
        CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem.PushButton, (XBool)!item->TestZoneItem.ToggleButton.Checked 
        );

        if ((( zf & AppZoneFlagsTestExpanded ) == AppZoneFlagsTestExpanded ))
        {
          ViewsImage_OnSetBitmap( &item->TestZoneItem.ExpandImage, EwLoadResource( 
          &AppCollapseBitmap, ResourcesBitmap ));
        }
        else
        {
          ViewsImage_OnSetBitmap( &item->TestZoneItem.ExpandImage, EwLoadResource( 
          &AppExpandBitmap, ResourcesBitmap ));
        }

        CoreGroup_InvalidateViewState((CoreGroup)&item->TestZoneItem );
        item = EwCastObject( item->Super3.next, AppTestItem );

        if ( item == 0 )
          return;
      }
      else
      {
        i = i + 1;
      }

      if ((( zf & AppZoneFlagsTestExpanded ) == AppZoneFlagsTestExpanded ))
      {
        XInt32 dev = 0;

        while ( dev < numdevs )
        {
          XInt16 unitno = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, AppLibClass 
            ), curZone, dev );
          AppDevice device = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass 
            ), unitno );
          AppDeviceConfig config = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
            AppLibClass ), unitno );

          if ( config != 0 )
          {
            if ( i == itemNo )
            {
              CoreGroup__OnSetVisible( item, 1 );
              CoreGroup__OnSetVisible( &item->TestUnitItem, 1 );

              if ((( device->settings & AppDeviceSettingTestExpanded ) == AppDeviceSettingTestExpanded 
                  ))
              {
                ViewsImage_OnSetBitmap( &item->TestUnitItem.Image1, EwLoadResource( 
                &AppCollapseBitmap, ResourcesBitmap ));
              }
              else
              {
                ViewsImage_OnSetBitmap( &item->TestUnitItem.Image1, EwLoadResource( 
                &AppExpandBitmap, ResourcesBitmap ));
              }

              if ( device == 0 )
              {
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
              }
              else
              {
                CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 1 );

                if ( config->numinputs == 0 )
                {
                  CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                  0 );
                  WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                  0 );
                }
                else
                  if ((( zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ))
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                    0 );
                    WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                    1 );
                  }
                  else
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem.UnitCheckBox, 
                    1 );
                    WidgetSetToggleButton_OnSetChecked( &item->TestUnitItem.UnitCheckBox, 
                    (( device->settings & AppDeviceSettingOnTest ) == AppDeviceSettingOnTest 
                    ));
                  }
              }

              CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
              CoreGroup__OnSetVisible( &item->TestChannelItem, 0 );
              CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 0 );
              item->TestUnitItem.UnitNum = (XUInt16)unitno;
              item->TestUnitItem.ZoneNum = curZone;
              ViewsText_OnSetString( &item->TestUnitItem.DescriptionText, config->location 
              );
              CoreGroup_InvalidateViewState((CoreGroup)&item->TestUnitItem );
              item = EwCastObject( item->Super3.next, AppTestItem );

              if ( item == 0 )
                return;
            }
            else
            {
              i = i + 1;
            }

            if ( device != 0 )
              if ((( device->settings & AppDeviceSettingTestExpanded ) == AppDeviceSettingTestExpanded 
                  ))
              {
                XInt32 chan = 0;

                for ( chan = 0; chan < config->numinputs; chan = chan + 1 )
                {
                  if ( i == itemNo )
                  {
                    CoreGroup__OnSetVisible( item, 1 );
                    CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                    CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem, 1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 
                    );
                    item->TestChannelItem.ChanNum = (XUInt8)chan;
                    item->TestChannelItem.ChanType = config->inputs[ EwCheckIndex( 
                    chan, 32 )]->type;
                    item->TestChannelItem.UnitNum = (XUInt16)unitno;
                    item->TestChannelItem.ZoneNum = curZone;
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalLedValueBar, 
                    1 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.HorizontalLedValueBar, 
                    1 );

                    if ((( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsInputActiveOnTest 
                        ) == AppChannelFlagsInputActiveOnTest ))
                    {
                      WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalLedValueBar, 
                      100 );
                    }
                    else
                    {
                      WidgetSetHorizontalValueBar_OnSetCurrentValue( &item->TestChannelItem.HorizontalLedValueBar, 
                      0 );
                    }

                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                    0 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.ToggleButton, 
                    0 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.CheckBox, 1 
                    );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                    1 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.SmallDropDownMenu, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                    0 );
                    ViewsText_OnSetString( &item->TestChannelItem.ChannelName, AppLibClass_TypeName( 
                    EwGetAutoObject( &AppLib, AppLibClass ), item->TestChannelItem.ChanType 
                    ));

                    if ((((( item->TestChannelItem.ChanType == AppChannelTypeSmoke 
                        ) || ( item->TestChannelItem.ChanType == AppChannelTypeHeatB 
                        )) || ( item->TestChannelItem.ChanType == AppChannelTypeHeatA1R 
                        )) || ( item->TestChannelItem.ChanType == AppChannelTypeCO 
                        )) && ( chan < 4 ))
                    {
                      XUInt8 v;
                      CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 
                      1 );
                      ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 1 );
                      ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                      1 );
                      ViewsText_OnSetVisible( &item->TestChannelItem.Text, 1 );
                      CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                      1 );
                      v = device->val[ EwCheckIndex( chan, 4 )];

                      if ( v == 0 )
                      {
                        ViewsText_OnSetString( &item->TestChannelItem.Text, EwLoadString( 
                        &_Const01B3 ));
                      }
                      else
                      {
                        if ( config->inputs[ EwCheckIndex( chan, 32 )]->type == 
                            AppChannelTypeSmoke )
                          switch ( v )
                          {
                            case 1 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0351 ));
                            break;

                            case 2 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0352 ));
                            break;

                            case 3 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0353 ));
                            break;

                            case 4 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0354 ));
                            break;

                            case 8 :
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwLoadString( &_Const0354 ));
                            break;

                            default : 
                              ViewsText_OnSetString( &item->TestChannelItem.Text, 
                              EwNewStringInt( v, 0, 10 ));
                          }
                        else
                          if (( config->inputs[ EwCheckIndex( chan, 32 )]->type 
                              == AppChannelTypeHeatB ) || ( item->TestChannelItem.ChanType 
                              == AppChannelTypeHeatA1R ))
                            switch ( v )
                            {
                              case 1 :
                                ViewsText_OnSetString( &item->TestChannelItem.Text, 
                                EwLoadString( &_Const0355 ));
                              break;

                              default : 
                                ViewsText_OnSetString( &item->TestChannelItem.Text, 
                                EwNewStringInt( v, 0, 10 ));
                            }
                          else
                            if ( config->inputs[ EwCheckIndex( chan, 32 )]->type 
                                == AppChannelTypeCO )
                              switch ( v )
                              {
                                default : 
                                  ViewsText_OnSetString( &item->TestChannelItem.Text, 
                                  EwNewStringInt( v, 0, 10 ));
                              }
                      }
                    }
                    else
                    {
                      CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 
                      0 );
                      CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                      0 );
                      ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 0 );
                      ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                      0 );
                      ViewsText_OnSetVisible( &item->TestChannelItem.Text, 0 );
                    }

                    if ((( zf & AppZoneFlagsOnTest ) == AppZoneFlagsOnTest ) || 
                        (( device->settings & AppDeviceSettingOnTest ) == AppDeviceSettingOnTest 
                        ))
                    {
                      CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                      0 );
                      WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.CheckBox, 
                      1 );
                    }
                    else
                    {
                      CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                      1 );
                      WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.CheckBox, 
                      (( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsInputOnTest 
                      ) == AppChannelFlagsInputOnTest ));
                    }

                    if ( config->inputs[ EwCheckIndex( chan, 32 )] != 0 )
                    {
                      AppChannelImage_OnSetBitmap( &item->TestChannelItem.ChannelImage, 
                      config->inputs[ EwCheckIndex( chan, 32 )]->type );
                    }

                    CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                    );
                    item = EwCastObject( item->Super3.next, AppTestItem );

                    if ( item == 0 )
                      return;
                  }
                  else
                  {
                    i = i + 1;
                  }
                }

                for ( chan = 0; chan < config->numoutputs; chan = chan + 1 )
                {
                  if ( i == itemNo )
                  {
                    CoreGroup__OnSetVisible( item, 1 );
                    CoreGroup__OnSetVisible( &item->TestUnitItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestUnitItem, 0 );
                    CoreGroup__OnSetVisible( &item->TestZoneItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestZoneItem, 0 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem, 1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem, 1 
                    );
                    item->TestChannelItem.ChanNum = (XUInt8)chan;
                    item->TestChannelItem.UnitNum = (XUInt16)unitno;
                    item->TestChannelItem.ZoneNum = curZone;
                    CoreGroup__OnSetVisible( &item->TestChannelItem.HorizontalLedValueBar, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.HorizontalLedValueBar, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.ToggleButton, 
                    1 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.ToggleButton, 
                    1 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.CheckBox, 0 
                    );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.CheckBox, 
                    0 );
                    CoreGroup__OnSetVisible( &item->TestChannelItem.SmallDropDownMenu, 
                    1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.SmallDropDownMenu, 
                    1 );
                    item->TestChannelItem.SmallDropDownMenu.selIndex = device->menuSelection[ 
                    EwCheckIndex( chan, 32 )];
                    ViewsText_OnSetString( &item->TestChannelItem.SmallDropDownMenu.Text, 
                    AppLibClass_ProfileName( EwGetAutoObject( &AppLib, AppLibClass 
                    ), (XEnum)item->TestChannelItem.SmallDropDownMenu.selIndex ));
                    item->TestChannelItem.DefaultAction = (XEnum)item->TestChannelItem.SmallDropDownMenu.selIndex;
                    ViewsText_OnSetString( &item->TestChannelItem.ChannelName, AppLibClass_TypeName( 
                    EwGetAutoObject( &AppLib, AppLibClass ), config->outputs[ EwCheckIndex( 
                    chan, 32 )]->type ));

                    if ((( device->flags[ EwCheckIndex( chan, 32 )] & AppChannelFlagsOutputOnTest 
                        ) == AppChannelFlagsOutputOnTest ))
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.ToggleButton, 
                      1 );
                    }
                    else
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->TestChannelItem.ToggleButton, 
                      0 );
                    }

                    if ( config->outputs[ EwCheckIndex( chan, 32 )] != 0 )
                    {
                      AppChannelImage_OnSetBitmap( &item->TestChannelItem.ChannelImage, 
                      config->outputs[ EwCheckIndex( chan, 32 )]->type );
                    }

                    CoreGroup__OnSetVisible( &item->TestChannelItem.PushButton, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->TestChannelItem.PushButton, 
                    0 );
                    ViewsBevel_OnSetVisible( &item->TestChannelItem.Bevel, 0 );
                    ViewsRectangle_OnSetVisible( &item->TestChannelItem.Rectangle, 
                    0 );
                    ViewsText_OnSetVisible( &item->TestChannelItem.Text, 0 );
                    CoreGroup_InvalidateViewState((CoreGroup)&item->TestChannelItem 
                    );
                    item = EwCastObject( item->Super3.next, AppTestItem );

                    if ( item == 0 )
                      return;
                  }
                  else
                  {
                    i = i + 1;
                  }
                }
              }
          }

          dev = dev + 1;
        }
      }
    }

    curZone = (XUInt8)( curZone + 1 );
  }

  while ( item != 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    item = EwCastObject( item->Super3.next, AppTestItem );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppTreeView_TestChange( AppTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
    EwSignal( _this->ListViewer.onRefreshAll, ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppTreeView_Refresh( AppTreeView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    XInt32 num;
    {
      Command cmd;

      Command0( CMD_GET_NUM_TEST, &cmd );

      num = cmd.int0;
    }
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, num );
    EwSignal( EwNewSlot( _this, AppTreeView_CountOnTest ), ((XObject)_this ));
  }
}

/* Variants derived from the class : 'App::TreeView' */
EW_DEFINE_CLASS_VARIANTS( AppTreeView )
EW_END_OF_CLASS_VARIANTS( AppTreeView )

/* Virtual Method Table (VMT) for the class : 'App::TreeView' */
EW_DEFINE_CLASS( AppTreeView, CoreGroup, "App::TreeView" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  AppTreeView_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTreeView_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTreeView )

/* Initializer for the class 'App::TestChannelItem' */
void AppTestChannelItem__Init( AppTestChannelItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->ChannelName, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalLedValueBar, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  AppSmallDropDownMenu__Init( &_this->SmallDropDownMenu, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->CheckBox, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTestChannelItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->ChannelName, _Const0356 );
  ViewsText_OnSetAlignment( &_this->ChannelName, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChannelName, 0 );
  ViewsText_OnSetColor( &_this->ChannelName, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorizontalLedValueBar, _Const0357 );
  WidgetSetHorizontalValueBar_OnSetMaxValue( &_this->HorizontalLedValueBar, 1 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalLedValueBar, 
  0 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0358 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreRectView__OnSetBounds( &_this->SmallDropDownMenu, _Const0359 );
  _this->SmallDropDownMenu.numItems = 8;
  _this->DefaultAction = AppProfileFire;
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const035A );
  WidgetSetToggleButton_OnSetLabel( &_this->CheckBox, 0 );
  CoreView_OnSetLayout((CoreView)&_this->ChannelImage, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const035B );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const035C );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const035D 
  ));
  CoreRectView__OnSetBounds( &_this->Bevel, _Const035E );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0090 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0000 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0000 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const035F );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0360 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0361 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0362 );
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  _this->ChanType = AppChannelTypeNone;
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelName ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalLedValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SmallDropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->ChannelName, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalLedValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppTestChannelItem_OnSlot );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppTestChannelItem_OffSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &WidgetSetSwitch_Small, WidgetSetToggleButtonConfig ));
  _this->SmallDropDownMenu.onSelection = EwNewSlot( _this, AppTestChannelItem_MenuSelection 
  );
  _this->SmallDropDownMenu.GetItemCallback = EwNewSlot( _this, AppTestChannelItem_LoadNames 
  );
  _this->CheckBox.OnSwitchOn = EwNewSlot( _this, AppTestChannelItem_ToggleChannel 
  );
  _this->CheckBox.OnSwitchOff = EwNewSlot( _this, AppTestChannelItem_ToggleChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->CheckBox, EwGetAutoObject( &AppSmallCheckBox, 
  WidgetSetToggleButtonConfig ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppTestChannelItem_ReadSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontS, ResourcesFont ));
}

/* Re-Initializer for the class 'App::TestChannelItem' */
void AppTestChannelItem__ReInit( AppTestChannelItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->ChannelName );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalLedValueBar );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  AppSmallDropDownMenu__ReInit( &_this->SmallDropDownMenu );
  WidgetSetToggleButton__ReInit( &_this->CheckBox );
  AppChannelImage__ReInit( &_this->ChannelImage );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::TestChannelItem' */
void AppTestChannelItem__Done( AppTestChannelItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTestChannelItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->ChannelName );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalLedValueBar );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  AppSmallDropDownMenu__Done( &_this->SmallDropDownMenu );
  WidgetSetToggleButton__Done( &_this->CheckBox );
  AppChannelImage__Done( &_this->ChannelImage );
  WidgetSetPushButton__Done( &_this->PushButton );
  ViewsBevel__Done( &_this->Bevel );
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TestChannelItem' */
void AppTestChannelItem__Mark( AppTestChannelItem _this )
{
  EwMarkObject( &_this->ChannelName );
  EwMarkObject( &_this->HorizontalLedValueBar );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->SmallDropDownMenu );
  EwMarkObject( &_this->CheckBox );
  EwMarkObject( &_this->ChannelImage );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTestChannelItem_UpdateViewState( AppTestChannelItem _this, XSet aState )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aState );
}

/* 'C' function for method : 'App::TestChannelItem.OnSlot()' */
void AppTestChannelItem_OnSlot( AppTestChannelItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppLibClass_SwitchOutput( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
  (XInt8)_this->ChanNum, _this->DefaultAction, 1 );
}

/* 'C' function for method : 'App::TestChannelItem.OffSlot()' */
void AppTestChannelItem_OffSlot( AppTestChannelItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppLibClass_SwitchOutput( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
  (XInt8)_this->ChanNum, _this->DefaultAction, 0 );
}

/* 'C' function for method : 'App::TestChannelItem.LoadNames()' */
void AppTestChannelItem_LoadNames( AppTestChannelItem _this, XObject sender )
{
  AppSmallDropDownMenuList menu;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  menu = EwCastObject( sender, AppSmallDropDownMenuList );

  if ( menu != 0 )
  {
    EwRetainString( &menu->itemName, AppLibClass_ProfileName( EwGetAutoObject( &AppLib, 
    AppLibClass ), menu->itemIndex ));
  }
}

/* 'C' function for method : 'App::TestChannelItem.ToggleChannel()' */
void AppTestChannelItem_ToggleChannel( AppTestChannelItem _this, XObject sender )
{
  AppDevice d;
  AppTreeView testpage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( d != 0 )
  {
    if ( _this->CheckBox.Checked )
    {
      d->flags[ EwCheckIndex( _this->ChanNum, 32 )] = d->flags[ EwCheckIndex( _this->ChanNum, 
      32 )] | AppChannelFlagsInputOnTest;
    }
    else
    {
      d->flags[ EwCheckIndex( _this->ChanNum, 32 )] = d->flags[ EwCheckIndex( _this->ChanNum, 
      32 )] & ~AppChannelFlagsInputOnTest;
    }

    AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
    d );
  }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppTreeView );

  if ( testpage != 0 )
  {
    EwSignal( EwNewSlot( testpage, AppTreeView_Refresh ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::TestChannelItem.MenuSelection()' */
void AppTestChannelItem_MenuSelection( AppTestChannelItem _this, XObject sender )
{
  AppDevice d;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( d != 0 )
  {
    d->menuSelection[ EwCheckIndex( _this->ChanNum, 32 )] = (XUInt8)_this->SmallDropDownMenu.list->VerticalList.SelectedItem;
    AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
    d );
    _this->DefaultAction = (XEnum)_this->SmallDropDownMenu.list->VerticalList.SelectedItem;
  }
}

/* 'C' function for method : 'App::TestChannelItem.ReadSlot()' */
void AppTestChannelItem_ReadSlot( AppTestChannelItem _this, XObject sender )
{
  XUInt8 c;
  XUInt16 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  c = (XUInt8)(XUInt32)_this->ChanType;
  u = _this->UnitNum;
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0363 ));
  {
    Command cmd;

    cmd.int0 = u;
    cmd.int1 = c;

    Command0( CMD_GET_ANALOGUE_VALUE, &cmd );
  }
}

/* Variants derived from the class : 'App::TestChannelItem' */
EW_DEFINE_CLASS_VARIANTS( AppTestChannelItem )
EW_END_OF_CLASS_VARIANTS( AppTestChannelItem )

/* Virtual Method Table (VMT) for the class : 'App::TestChannelItem' */
EW_DEFINE_CLASS( AppTestChannelItem, CoreGroup, "App::TestChannelItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTestChannelItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTestChannelItem )

/* Initializer for the class 'App::SmallDropDownMenu' */
void AppSmallDropDownMenu__Init( AppSmallDropDownMenu _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSmallDropDownMenu );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0364 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0365 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0366 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const02B4 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const02B5 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const02B5 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const02B4 );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0367 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0368 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const00A8 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
  CoreSimpleTouchHandler_OnSetEmbedded( &_this->SimpleTouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Text, _Const0369 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const036A );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  _this->SimpleTouchHandler.OnRelease = EwNullSlot;
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppSmallDropDownMenu_Press 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->PushButton.OnPress = EwNewSlot( _this, AppSmallDropDownMenu_Press );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &AppDropDownSimpleBitmap, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  AppSmallDropDownMenu_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::SmallDropDownMenu' */
void AppSmallDropDownMenu__ReInit( AppSmallDropDownMenu _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBevel__ReInit( &_this->Bevel );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'App::SmallDropDownMenu' */
void AppSmallDropDownMenu__Done( AppSmallDropDownMenu _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSmallDropDownMenu );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBevel__Done( &_this->Bevel );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SmallDropDownMenu' */
void AppSmallDropDownMenu__Mark( AppSmallDropDownMenu _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkSlot( _this->onSelection );
  EwMarkObject( &_this->PushButton );
  EwMarkSlot( _this->GetItemCallback );
  EwMarkObject( _this->list );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSmallDropDownMenu_UpdateLayout( AppSmallDropDownMenu _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSmallDropDownMenu_UpdateViewState( AppSmallDropDownMenu _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppSmallDropDownMenu_Init( AppSmallDropDownMenu _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  _this->list = EwNewObject( AppSmallDropDownMenuList, 0 );
}

/* 'C' function for method : 'App::SmallDropDownMenu.Press()' */
void AppSmallDropDownMenu_Press( AppSmallDropDownMenu _this, XObject sender )
{
  AppTreeView test;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  test = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppTreeView );

  if ( test->MenuHandle != 0 )
  {
    if ( test->MenuHandle->Super3.Owner != 0 )
    {
      CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)test->MenuHandle 
      ));
      test->MenuHandle->Super3.Owner = 0;
    }
  }

  if ((CoreRoot)_this->list->Super3.Owner != CoreView__GetRoot( _this ))
  {
    XPoint p = CoreGroup_GlobalPosition((CoreGroup)_this, _this->Super2.Bounds.Point1 
      );
    CoreRectView__OnSetBounds( _this->list, EwSetRectOrigin( _this->list->Super2.Bounds, 
    EwSetPointX( _this->list->Super2.Bounds.Point1, _this->Super2.Bounds.Point1.X 
    + 12 )));

    if ( p.Y > 250 )
    {
      CoreRectView__OnSetBounds( _this->list, EwSetRectOrigin( _this->list->Super2.Bounds, 
      EwSetPointY( _this->list->Super2.Bounds.Point1, p.Y - ( _this->numItems * 
      35 ))));
    }
    else
    {
      CoreRectView__OnSetBounds( _this->list, EwSetRectOrigin( _this->list->Super2.Bounds, 
      EwSetPointY( _this->list->Super2.Bounds.Point1, p.Y + 32 )));
    }

    AppSmallDropDownMenuList_OnSetnumItems( _this->list, _this->numItems );
    _this->list->GetItemCallback = _this->GetItemCallback;
    _this->list->onSelection = _this->onSelection;
    CoreVerticalList_OnSetSelectedItem( &_this->list->VerticalList, _this->selIndex 
    );
    _this->list->parent = _this;
    CoreGroup_InvalidateViewState((CoreGroup)_this->list );
    test->MenuHandle = _this->list;
    CoreGroup__Add( CoreView__GetRoot( _this ), ((CoreView)_this->list ), 0 );
  }
  else
  {
    AppSmallDropDownMenu_HideList( _this );
  }
}

/* 'C' function for method : 'App::SmallDropDownMenu.HideList()' */
void AppSmallDropDownMenu_HideList( AppSmallDropDownMenu _this )
{
  if ( _this->list->Super3.Owner != 0 )
  {
    CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)_this->list ));
    _this->list->Super3.Owner = 0;
  }
}

/* Variants derived from the class : 'App::SmallDropDownMenu' */
EW_DEFINE_CLASS_VARIANTS( AppSmallDropDownMenu )
EW_END_OF_CLASS_VARIANTS( AppSmallDropDownMenu )

/* Virtual Method Table (VMT) for the class : 'App::SmallDropDownMenu' */
EW_DEFINE_CLASS( AppSmallDropDownMenu, CoreGroup, "App::SmallDropDownMenu" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSmallDropDownMenu_UpdateLayout,
  AppSmallDropDownMenu_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSmallDropDownMenu )

/* Initializer for the class 'App::SmallDropMenuItem' */
void AppSmallDropMenuItem__Init( AppSmallDropMenuItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSmallDropMenuItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const036B );
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Background, _Const036B );
  ViewsRectangle_OnSetColor( &_this->Background, _Const00A5 );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const036B );
  ViewsBorder_OnSetWidth( &_this->Border, 1 );
  ViewsBorder_OnSetColor( &_this->Border, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const036C );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const036D );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const036E );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0052 );
  _this->TouchHandler.RetargetCondition = CoreRetargetReasonWipeDown | CoreRetargetReasonWipeLeft 
  | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->TouchHandler, 100 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->TouchHandler, 1 );
  CoreView_OnSetLayout((CoreView)&_this->CaptionText, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const036F );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const030C ));
  ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
  _this->enabled = 1;
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  _this->TouchHandler.OnLeave = EwNewSlot( _this, AppSmallDropMenuItem_onEnterLeaveTouch 
  );
  _this->TouchHandler.OnEnter = EwNewSlot( _this, AppSmallDropMenuItem_onEnterLeaveTouch 
  );
  _this->TouchHandler.OnRelease = EwNewSlot( _this, AppSmallDropMenuItem_onReleaseTouch 
  );
  _this->TouchHandler.OnPress = EwNewSlot( _this, AppSmallDropMenuItem_onPressTouch 
  );
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::SmallDropMenuItem' */
void AppSmallDropMenuItem__ReInit( AppSmallDropMenuItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Background );
  ViewsBorder__ReInit( &_this->Border );
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'App::SmallDropMenuItem' */
void AppSmallDropMenuItem__Done( AppSmallDropMenuItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSmallDropMenuItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Background );
  ViewsBorder__Done( &_this->Border );
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsText__Done( &_this->CaptionText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SmallDropMenuItem' */
void AppSmallDropMenuItem__Mark( AppSmallDropMenuItem _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->CaptionText );
  EwMarkSlot( _this->OnActivate );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSmallDropMenuItem_UpdateLayout( AppSmallDropMenuItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSmallDropMenuItem_UpdateViewState( AppSmallDropMenuItem _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isPressed;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isPressed = (XBool)( _this->TouchHandler.Down && _this->TouchHandler.Inside );

  if ( !isEnabled )
  {
    ViewsRectangle_OnSetColor( &_this->Background, _Const030D );
    ViewsBorder_OnSetVisible( &_this->Border, 0 );
    ViewsText_OnSetColor( &_this->CaptionText, _Const011D );
  }
  else
    if ( isPressed )
    {
      ViewsRectangle_OnSetColor( &_this->Background, _Const000B );
      ViewsBorder_OnSetColor( &_this->Border, _Const000E );
      ViewsBorder_OnSetVisible( &_this->Border, 1 );
      ViewsText_OnSetColor( &_this->CaptionText, _Const0000 );
    }
    else
      if ( isSelected )
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const0283 );
        ViewsBorder_OnSetColor( &_this->Border, _Const030E );
        ViewsBorder_OnSetVisible( &_this->Border, 1 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
      }
      else
      {
        ViewsRectangle_OnSetColor( &_this->Background, _Const0283 );
        ViewsBorder_OnSetVisible( &_this->Border, 0 );
        ViewsText_OnSetColor( &_this->CaptionText, _Const000E );
      }

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->pressed = isPressed;
}

/* This internal slot method is called when the user drags the finger while pressing 
   the item. This only updates the item to appear pressed or released. */
void AppSmallDropMenuItem_onEnterLeaveTouch( AppSmallDropMenuItem _this, XObject 
  sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is called when the user releases the touch screen after 
   touching the item's area. This activates the item. */
void AppSmallDropMenuItem_onReleaseTouch( AppSmallDropMenuItem _this, XObject sender )
{
  CoreView v;
  XInt32 sel;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Inside )
    return;

  if ( _this->TouchHandler.AutoDeflected )
    return;

  _this->pressed = 0;
  v = _this->Super3.Owner->first;
  sel = 0;

  while ( v != 0 )
  {
    AppSmallDropMenuItem i = EwCastObject( v, AppSmallDropMenuItem );

    if ( i != 0 )
    {
      if ( i == _this )
      {
        CoreVerticalList_OnSetSelectedItem( EwCastObject( _this->Super3.Owner, CoreVerticalList 
        ), sel );
      }
      else
      {
        sel = sel + 1;
      }
    }

    v = v->next;
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
  EwPostSignal( _this->OnActivate, ((XObject)_this ));
}

/* This internal slot method is called when the user touches the item's area. */
void AppSmallDropMenuItem_onPressTouch( AppSmallDropMenuItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetFocus( _this->Super3.Owner, ((CoreView)_this ));
  _this->pressed = 1;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'App::SmallDropMenuItem' */
EW_DEFINE_CLASS_VARIANTS( AppSmallDropMenuItem )
EW_END_OF_CLASS_VARIANTS( AppSmallDropMenuItem )

/* Virtual Method Table (VMT) for the class : 'App::SmallDropMenuItem' */
EW_DEFINE_CLASS( AppSmallDropMenuItem, CoreGroup, "App::SmallDropMenuItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSmallDropMenuItem_UpdateLayout,
  AppSmallDropMenuItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSmallDropMenuItem )

/* Initializer for the class 'App::SmallDropDownMenuList' */
void AppSmallDropDownMenuList__Init( AppSmallDropDownMenuList _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSmallDropDownMenuList );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0370 );
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0370 );
  _this->SlideTouchHandler.SlideHorz = 0;
  EwRetainString( &_this->itemName, EwLoadString( &_Const0167 ));
  _this->itemIndex = AppProfileFire;
  CoreView_OnSetLayout((CoreView)&_this->VerticalList, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const0371 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 35 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 10 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( AppSmallDropMenuItem 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppSmallDropDownMenuList_OnLoadItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, &_this->SlideTouchHandler 
  );
}

/* Re-Initializer for the class 'App::SmallDropDownMenuList' */
void AppSmallDropDownMenuList__ReInit( AppSmallDropDownMenuList _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
}

/* Finalizer method for the class 'App::SmallDropDownMenuList' */
void AppSmallDropDownMenuList__Done( AppSmallDropDownMenuList _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSmallDropDownMenuList );

  /* Finalize all embedded objects */
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );

  /* Release all used strings */
  EwReleaseString( &_this->itemName );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SmallDropDownMenuList' */
void AppSmallDropDownMenuList__Mark( AppSmallDropDownMenuList _this )
{
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkSlot( _this->onSelection );
  EwMarkSlot( _this->GetItemCallback );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( _this->parent );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSmallDropDownMenuList_UpdateLayout( AppSmallDropDownMenuList _this, XPoint 
  aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSmallDropDownMenuList_UpdateViewState( AppSmallDropDownMenuList _this, XSet 
  aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::SmallDropDownMenuList.Select()' */
void AppSmallDropDownMenuList_Select( AppSmallDropDownMenuList _this, XObject sender )
{
  AppSmallDropMenuItem itm = EwCastObject( sender, AppSmallDropMenuItem );

  if ( _this->parent != 0 )
  {
    ViewsText_OnSetString( &_this->parent->Text, itm->CaptionText.String );
  }

  CoreGroup__Remove( CoreView__GetRoot( _this ), ((CoreView)_this ));
  EwPostSignal( _this->onSelection, ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppSmallDropDownMenuList_OnLoadItem( AppSmallDropDownMenuList _this, XObject 
  sender )
{
  XInt32 itemNo;
  AppSmallDropMenuItem itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList.Item;
  itemView = EwCastObject( _this->VerticalList.View, AppSmallDropMenuItem );

  if ( itemView == 0 )
    return;

  itemView->OnActivate = EwNewSlot( _this, AppSmallDropDownMenuList_Select );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super2.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));

  if ( _this->GetItemCallback.Object != 0 )
  {
    _this->itemIndex = (XEnum)itemNo;
    EwSignal( _this->GetItemCallback, ((XObject)_this ));

    if ( EwCompString( _this->itemName, 0 ) != 0 )
    {
      ViewsText_OnSetString( &itemView->CaptionText, _this->itemName );
      return;
    }
  }

  ViewsText_OnSetString( &itemView->CaptionText, EwConcatString( EwLoadString( &_Const02C2 
  ), EwNewStringInt( itemNo, 0, 10 )));
}

/* 'C' function for method : 'App::SmallDropDownMenuList.OnSetnumItems()' */
void AppSmallDropDownMenuList_OnSetnumItems( AppSmallDropDownMenuList _this, XUInt8 
  value )
{
  XInt32 size;

  if ( _this->numItems == value )
    return;

  _this->numItems = value;
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, _this->numItems );
  size = _this->VerticalList.ItemHeight * _this->numItems;
  CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, ( _this->Super2.Bounds.Point1.Y 
  + size ) + 20 ));

  if ( _this->Super2.Bounds.Point2.Y > 480 )
    CoreRectView__OnSetBounds( _this, EwSetRectY2( _this->Super2.Bounds, 480 ));

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, _this->numItems - 1 
  );
}

/* Variants derived from the class : 'App::SmallDropDownMenuList' */
EW_DEFINE_CLASS_VARIANTS( AppSmallDropDownMenuList )
EW_END_OF_CLASS_VARIANTS( AppSmallDropDownMenuList )

/* Virtual Method Table (VMT) for the class : 'App::SmallDropDownMenuList' */
EW_DEFINE_CLASS( AppSmallDropDownMenuList, CoreGroup, "App::SmallDropDownMenuList" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSmallDropDownMenuList_UpdateLayout,
  AppSmallDropDownMenuList_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSmallDropDownMenuList )

/* Initializer for the class 'App::Faults' */
void AppFaults__Init( AppFaults _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEventHandler__Init( &_this->FaultListChangeHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessModeChangeEvent, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFaults );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0091 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppFaultItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 5 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  _this->FaultListChangeHandler.OnEvent = EwNewSlot( _this, AppFaults_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->FaultListChangeHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->FaultListChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppFaults_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppFaults_OnRefreshAll );
  _this->SiteChangedHandler.OnEvent = EwNewSlot( _this, AppFaults_onEvent1 );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->AccessModeChangeEvent.OnEvent = EwNewSlot( _this, AppFaults_onEvent1 );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessModeChangeEvent, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );

  /* Call the user defined constructor */
  AppFaults_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Faults' */
void AppFaults__ReInit( AppFaults _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEventHandler__ReInit( &_this->FaultListChangeHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedHandler );
  CoreSystemEventHandler__ReInit( &_this->AccessModeChangeEvent );
}

/* Finalizer method for the class 'App::Faults' */
void AppFaults__Done( AppFaults _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFaults );

  /* Finalize all embedded objects */
  CoreSystemEventHandler__Done( &_this->FaultListChangeHandler );
  AppListViewer__Done( &_this->ListViewer );
  CoreSystemEventHandler__Done( &_this->SiteChangedHandler );
  CoreSystemEventHandler__Done( &_this->AccessModeChangeEvent );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Faults' */
void AppFaults__Mark( AppFaults _this )
{
  EwMarkObject( &_this->FaultListChangeHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->SiteChangedHandler );
  EwMarkObject( &_this->AccessModeChangeEvent );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFaults_UpdateViewState( AppFaults _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppFaults_Init( AppFaults _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, AppFaults_onEvent ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppFaults_OnLoadItem( AppFaults _this, XObject sender )
{
  XInt32 itemNo;
  AppFaultItem item;
  XString time;
  XString desc;
  XString type;
  XInt32 unt;
  XInt32 zone;
  XEnum chan;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  item = EwCastObject( _this->ListViewer.VerticalList.View, AppFaultItem );

  if ( item == 0 )
    return;

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    return;
  }

  CoreGroup__OnSetVisible( item, 1 );
  time = EwLoadString( &_Const0372 );
  desc = EwLoadString( &_Const0373 );
  type = EwLoadString( &_Const0374 );
  unt = 1;
  zone = 1;
  chan = AppChannelTypeNone;
  {
    Command cmd;

    cmd.int0 = itemNo;
    if ( Command0( CMD_GET_FAULT_ITEM, &cmd ) == CMD_OK )
    {
      if ( cmd.int1 != 0 )
      {
         desc = EwNewStringAnsi( (char*)cmd.int1 );
      }
      else
      {
          CoreGroup_OnSetVisible((CoreGroup)item, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)item );
          return;
      }

      if ( cmd.int3 != 0 ) time = EwNewStringAnsi( (char*)cmd.int3 );

      if ( cmd.short4 & 2 ) 
      {
         type =  EwNewStringAnsi("SYSTEM FAULT");
      }
      else if ( cmd.int2 & 16 ) 
      {
         type = EwNewStringAnsi("PANEL PSU FAULT");
      }
      else if ( cmd.int2 & 64 ) 
      {
         type = EwNewStringAnsi("OPEN CIRCUIT FAULT");
      }       
      else if ( cmd.int2 & 128 )
      {
         type = EwNewStringAnsi("SHORT CIRCUIT FAULT");
      }
      else if ( cmd.int2 & 32 ) 
      {
         type = EwNewStringAnsi("SOUNDER FAULT");
      }
      else if ( cmd.int2 & 256 )
      {
         type =  EwNewStringAnsi("NETWORK FAULT");
      }
      else if ( cmd.int2 & 16384 )
      {
         type =  EwNewStringAnsi("WARNING");
      }
      else
      {
         type =  EwNewStringAnsi("GENERAL FAULT");
      }
      chan = cmd.ushort5;
      unt = cmd.ushort1;
      zone = cmd.ushort0;
    }
    else
    {
        CoreGroup_OnSetVisible((CoreGroup)item, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)item );
        return;
    }
  }
  ViewsText_OnSetString( &item->DescriptionText, desc );
  ViewsText_OnSetString( &item->TimeText, time );
  ViewsText_OnSetString( &item->TypeText, type );
  AppChannelImage_OnSetBitmap( &item->ChannelImage, chan );
  ViewsText_OnSetString( &item->ChanText, AppLibClass_TypeName( EwGetAutoObject( 
  &AppLib, AppLibClass ), chan ));

  if ( zone < 255 )
  {
    ViewsText_OnSetString( &item->AddressText, EwConcatString( EwConcatString( EwConcatString( 
    EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const0309 
    )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), unt )));
  }
  else
  {
    ViewsText_OnSetString( &item->AddressText, 0 );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppFaults_onEvent( AppFaults _this, XObject sender )
{
  XInt32 numItems;
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 3;
  {
    Command cmd;

    Command0( CMD_GET_NUM_FAULTS, &cmd );

    numItems = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numItems );
  ap = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( ap != 0 )
  {
    ap->FaultsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->FaultsTabButton );

    if (((((( ap->AlarmsTabButton.NumberOf == 0 ) || ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const0010 )) != 0 )) && ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const0035 )) != 0 )) && ( EwCompString( ap->SelectedTab, 
        EwLoadString( &_Const0017 )) != 0 )) && ( numItems != 0 )) && ( ap->LevelAccess.AccessLevel 
        < 4 ))
    {
      EwPostSignal( EwNewSlot( &ap->FaultsTabButton, AppTabButton_OnPress ), ((XObject)_this 
        ));
    }
    else
      if (( numItems > 0 ) && ( EwCompString( ap->SelectedTab, EwLoadString( &_Const0017 
          )) != 0 ))
      {
        CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 1 );
      }
      else
      {
        CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 0 );
        ViewsImage_OnSetVisible( &ap->FaultsTabButton.Image, 1 );
      }
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppFaults_OnRefreshAll( AppFaults _this, XObject sender )
{
  XInt32 itemNo;
  AppFaultItem item;
  XString time;
  XString desc;
  XString type;
  XInt32 unt;
  XInt32 zone;
  XEnum chan;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  item = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppFaultItem 
  );

  if ( item == 0 )
    return;

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    item = EwCastObject( item->Super3.next, AppFaultItem );

    if ( item == 0 )
      return;

    itemNo = itemNo + 1;
  }

  time = EwLoadString( &_Const0372 );
  desc = EwLoadString( &_Const0373 );
  type = EwLoadString( &_Const0374 );
  unt = 1;
  zone = 1;
  chan = AppChannelTypeNone;

  while ( item != 0 )
  {
    {
      Command cmd;

      cmd.int0 = itemNo;
      if ( Command0( CMD_GET_FAULT_ITEM, &cmd ) == CMD_OK )
      {
        if ( cmd.int1 != 0 )
        {
           desc = EwNewStringAnsi( (char*)cmd.int1 );
        }         

        CoreGroup_OnSetVisible((CoreGroup)item, 1 );

        if ( cmd.int3 != 0 ) time = EwNewStringAnsi( (char*)cmd.int3 );

        if ( cmd.short4 & 2 ) 
        {
           type =  EwNewStringAnsi("SYSTEM FAULT");
        }
        else if ( cmd.int2 & 16 ) 
        {
           type = EwNewStringAnsi("PANEL PSU FAULT");
        }

        else if ( cmd.int2 & 64 ) 
        {
           type = EwNewStringAnsi("OPEN CIRCUIT FAULT");
        }       
        else if ( cmd.int2 & 128 )
        {
           type = EwNewStringAnsi("SHORT CIRCUIT FAULT");
        }
        else if ( cmd.int2 & 32 ) 
        {
           type = EwNewStringAnsi("SOUNDER FAULT");
        }
        else if ( cmd.int2 & 256 )
        {
           type =  EwNewStringAnsi("NETWORK FAULT");
        }
        else if ( cmd.int2 & 16384 )
        {
           type =  EwNewStringAnsi("WARNING");
        }
        else
        {
           type =  EwNewStringAnsi("GENERAL FAULT");
        }
        chan = cmd.ushort5;
        unt = cmd.ushort1;
        zone = cmd.ushort0;
      }
      else
      {
          CoreGroup_OnSetVisible((CoreGroup)item, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)item );          
      }
    }
    ViewsText_OnSetString( &item->DescriptionText, desc );
    ViewsText_OnSetString( &item->TimeText, time );
    ViewsText_OnSetString( &item->TypeText, type );
    AppChannelImage_OnSetBitmap( &item->ChannelImage, chan );
    ViewsText_OnSetString( &item->ChanText, AppLibClass_TypeName( EwGetAutoObject( 
    &AppLib, AppLibClass ), chan ));

    if ( zone < 255 )
    {
      ViewsText_OnSetString( &item->AddressText, EwConcatString( EwConcatString( 
      EwConcatString( EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), 
      EwLoadString( &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, 
      AppLibClass ), unt )));
    }
    else
    {
      ViewsText_OnSetString( &item->AddressText, 0 );
    }

    itemNo = itemNo + 1;
    item = EwCastObject( item->Super3.next, AppFaultItem );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppFaults_onEvent1( AppFaults _this, XObject sender )
{
  XInt32 numItems;
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numItems = 3;
  {
    Command cmd;

    Command0( CMD_GET_NUM_FAULTS, &cmd );

    numItems = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numItems );
  ap = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( ap != 0 )
  {
    ap->FaultsTabButton.NumberOf = (XUInt16)numItems;
    CoreGroup_InvalidateViewState((CoreGroup)&ap->FaultsTabButton );

    if (( numItems > 0 ) && ( EwCompString( ap->SelectedTab, EwLoadString( &_Const0017 
        )) != 0 ))
    {
      CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 1 );
    }
    else
    {
      CoreTimer_OnSetEnabled( &ap->FaultsTabButton.Timer, 0 );
      ViewsImage_OnSetVisible( &ap->FaultsTabButton.Image, 1 );
    }
  }
}

/* Variants derived from the class : 'App::Faults' */
EW_DEFINE_CLASS_VARIANTS( AppFaults )
EW_END_OF_CLASS_VARIANTS( AppFaults )

/* Virtual Method Table (VMT) for the class : 'App::Faults' */
EW_DEFINE_CLASS( AppFaults, CoreGroup, "App::Faults" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppFaults_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFaults )

/* Initializer for the class 'App::FaultItem' */
void AppFaultItem__Init( AppFaultItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->AddressText, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ChanText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFaultItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0063 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0063 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const004D );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0063 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0375 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const0376 );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->TimeText, _Const000E );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const0377 );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const0378 ));
  ViewsText_OnSetColor( &_this->TypeText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->DescriptionText, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0379 );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, EwLoadString( &_Const0300 ));
  ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
  CoreRectView__OnSetBounds( &_this->AddressText, _Const037A );
  ViewsText_OnSetAlignment( &_this->AddressText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->AddressText, EwLoadString( &_Const037B ));
  ViewsText_OnSetColor( &_this->AddressText, _Const000E );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const037C );
  CoreView_OnSetLayout((CoreView)&_this->ChanText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->ChanText, _Const037D );
  ViewsText_OnSetAlignment( &_this->ChanText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChanText, EwLoadString( &_Const006C ));
  ViewsText_OnSetColor( &_this->ChanText, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AddressText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChanText ), 0 );
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->AddressText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ChanText, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::FaultItem' */
void AppFaultItem__ReInit( AppFaultItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->TimeText );
  ViewsText__ReInit( &_this->TypeText );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsText__ReInit( &_this->AddressText );
  AppChannelImage__ReInit( &_this->ChannelImage );
  ViewsText__ReInit( &_this->ChanText );
}

/* Finalizer method for the class 'App::FaultItem' */
void AppFaultItem__Done( AppFaultItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFaultItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->TimeText );
  ViewsText__Done( &_this->TypeText );
  ViewsText__Done( &_this->DescriptionText );
  ViewsText__Done( &_this->AddressText );
  AppChannelImage__Done( &_this->ChannelImage );
  ViewsText__Done( &_this->ChanText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::FaultItem' */
void AppFaultItem__Mark( AppFaultItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->TypeText );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->AddressText );
  EwMarkObject( &_this->ChannelImage );
  EwMarkObject( &_this->ChanText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppFaultItem_UpdateLayout( AppFaultItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFaultItem_UpdateViewState( AppFaultItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::FaultItem' */
EW_DEFINE_CLASS_VARIANTS( AppFaultItem )
EW_END_OF_CLASS_VARIANTS( AppFaultItem )

/* Virtual Method Table (VMT) for the class : 'App::FaultItem' */
EW_DEFINE_CLASS( AppFaultItem, CoreGroup, "App::FaultItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppFaultItem_UpdateLayout,
  AppFaultItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFaultItem )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppLargeCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::LargeCheckBox' */
void AppLargeCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const037E );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const037F );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &AppCheckBoxLarge, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02A1 );
}

/* Table with links to derived variants of the auto object : 'App::LargeCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppLargeCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( AppLargeCheckBox )

/* Bitmap resource : 'App::CheckBoxLarge' */
EW_DEFINE_BITMAP_RES( AppCheckBoxLarge )
  EW_BITMAP_FRAMES( AppCheckBoxLarge, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 1, 0, 20, 17, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 34, 2, 0x000001F0, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 20, 17, 0x000003BC, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppCheckBoxLarge, Default )             /* ratio 9.47 % */
    0xD2AD2900, 0xBDDE2006, 0x2148FF7D, 0xD28FF733, 0x070D6EAC, 0xB136D446, 0x178A40A2,
    0xC8CC4A2D, 0x8C47A371, 0x1C82351F, 0x4764B229, 0x3E1B2792, 0x9FF0B84C, 0x01178441,
    0xAF978BA8, 0x266E2C21, 0xA9DCA643, 0x9F4A27B3, 0x0D0A7F39, 0xCDE7744A, 0x8E6B337F,
    0xE790C632, 0x8145A750, 0xB52A9D42, 0x15AB53EA, 0xB5753697, 0xAFD5EA2D, 0x0552C35E,
    0xC6EC563B, 0xAACB5D57, 0x2C96BAC5, 0xE36EB7DB, 0x76DB959A, 0x78BADDAE, 0x9BD5DEE1,
    0xBFDF2E97, 0x15EF037E, 0xE1B077DC, 0x1F0188C2, 0x30989C56, 0x9B14C7E3, 0x2FF7937D,
    0x8B723154, 0xCCCE6B1D, 0x78B819D9, 0x54C40113, 0xE73214D8, 0x7A81A7C6, 0xF5B31D06,
    0x51AFD140, 0x7A974329, 0x12DBEA33, 0x4D768757, 0x826C3790, 0xAB9D98AB, 0x58371C4D,
    0xC77D94C9, 0xDD8D55DC, 0x95CEE63F, 0x2CE576BF, 0xC6D3715D, 0xFDDF224B, 0x92F3797A,
    0x7EF7B9D0, 0xBA99EB1D, 0x4BB1B6EB, 0x609D2EDC, 0xBBEFB2F8, 0x4B6827CB, 0xF8ECF9DA,
    0xFF9FB2F5, 0xC17C401B, 0x5317F5FF, 0x97A9F77D, 0x8DFB5C9E, 0xDF7FA0A7, 0x6FA01765,
    0x0EB350B8, 0x2825C47A, 0x51FF6BE0, 0x0D8620F8, 0x32DC481A, 0x5E23C0E0, 0x37E6197F,
    0x7A257854, 0x22881A88, 0x7460C7B6, 0xA078C62A, 0xE88E2C61, 0x9A338C1D, 0xC9596148,
    0x8D8EF374, 0xA3B8E21C, 0xD492438C, 0xA62E8FE3, 0x3A912398, 0x360C0542, 0x5EE900ED,
    0x59564B87, 0xF8955864, 0x4A88CE12, 0x9324D95E, 0x0CB2B140, 0x697E5D6D, 0x825E99A5,
    0x699AA679, 0x9B66E9AE, 0x2729A270, 0x59BE739B, 0x32749C67, 0x769E15C6, 0x5A14F9E6,
    0xE7C568FF, 0x869268A0, 0xE1364D14, 0x74A2E774, 0x3C8EB51E, 0xD2F684FA, 0x5324A63F,
    0x40B4434E, 0xB69F68C4, 0xA5A94A65, 0x5A141D2E, 0x00000040, 0xD8740100, 0xB71B0001,
    0x94A4FF70, 0x01AFF3D1, 0x04FF220A, 0x903888EE, 0x168944E2, 0x58DC6233, 0x8EC5E391,
    0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884, 0x01128441, 0xEE06DB5C, 0x4715841F,
    0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419, 0xCE73378C, 0xA332D9AC, 0xFE732F12,
    0xCE97338D, 0x58988022, 0x9AD55E07, 0xADD76095, 0x0D8AB95E, 0xD9AC164B, 0x9EC768AF,
    0x5CF5FB55, 0x9EFF763A, 0x94D8C546, 0x188809C1, 0x5B4DC2DD, 0xBEDAEF96, 0x1E03036C,
    0xDFB0B7FC, 0xA1CD5AC3, 0x41D1975B, 0x0D46228A, 0x184C960B, 0x96C9E571, 0x6BE66B29,
    0xCFE66AD4, 0x1E5F4398, 0xE97459BD, 0xAB4F21A3, 0xF59A4D06, 0x7D9CD36A, 0xBB4D867A,
    0xB6D7ED75, 0xECEDFF73, 0xDF6DF7BA, 0x96EF81BA, 0xEFF8BC2D, 0xF391C1E3, 0xB9BB8E46,
    0x97D0E4F1, 0xFCCE7743, 0xD2D1F539, 0xCEB76BAF, 0xEAF1395D, 0x1777A7E0, 0xF8FB363F,
    0xE7D1E1ED, 0xBCFE9F36, 0xBFE5F6FB, 0xBEAF9F93, 0xF4F6703E, 0x3F87E7DF, 0xFE7DBF18,
    0x9647EDFF, 0x6805FA7F, 0x1DF27DE0, 0xCF816008, 0x83E0B811, 0x60E7AA02, 0x88420C84,
    0x520A84DB, 0x186B2168, 0x87E1A856, 0xE1B875A7, 0x56C62088, 0xA6198794, 0x288261C8,
    0x70E248B6, 0x62E8BE27, 0x4889A289, 0xC62A8DE3, 0x338E2317, 0x8B1FD8E6, 0xA3C90632,
    0x85D9138E, 0x318A4557, 0x0092E3D6, 0x63D8D926, 0x11942D09, 0xF1C85C12, 0x0E4C938F,
    0x54939F49, 0x9497495A, 0x9384D92F, 0x57CA6474, 0xA2678EE6, 0x494666A6, 0x4C6613FD,
    0x4E2378DA, 0x06390C94, 0xA2789999, 0x7B9AE799, 0x9D276676, 0xE739C4FF, 0x1002843F,
    0x00000010, 0xD8740100, 0x39DC8001, 0x9CA8FF75, 0x830FF3D9, 0x04FF268C, 0x903888EE,
    0x168944E2, 0x58DC6233, 0x8EC5E391, 0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884,
    0x01128441, 0xEDE6CB54, 0x4816049F, 0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419,
    0xCE73378C, 0x4C8519AC, 0x7D50A31E, 0xB52A2D46, 0x47ABD52A, 0xFA6BFEB1, 0x2209C194,
    0x0D8AB353, 0x58EAD64B, 0x3E2B65B3, 0xED246150, 0xE368AD59, 0xB6FB9DC2, 0x72BBDBAE,
    0x4BC5E6ED, 0xBEDEAF97, 0x1E03037B, 0xDFB0B7FC, 0x270D82C3, 0xB1984C46, 0x238BC6E2,
    0xE03C6E43, 0x9F7F8F43, 0xE7FAD552, 0xC71D8C44, 0x363F25A0, 0x28B2F95C, 0x022CB756,
    0xF432D988, 0x87AED1E4, 0x3A77FE96, 0x03DBCC75, 0xC2D6E757, 0xDFEC5006, 0xAECEEFA2,
    0x41371AAD, 0x8209BAE3, 0xF8084391, 0x2DB2E76B, 0x3C5CD663, 0x8C3F4C77, 0xAEC3FD36,
    0x334C791D, 0x1F411277, 0xE67678BF, 0x7373DECD, 0x3D3EB94F, 0x1C7C3641, 0x5E5E7F91,
    0xC7EAF9FA, 0xDB2767D5, 0x827FBADE, 0xC9421075, 0x75EDB07C, 0xF4007B9F, 0xC9829867,
    0x80E01835, 0xD7D845C1, 0xA835FF81, 0x220C6820, 0x992287B7, 0x851A0810, 0xE09885F9,
    0x950E127E, 0xD1DD7EA1, 0x9C48E2A7, 0x7E0B229C, 0x22B89216, 0x585DFB7F, 0xBE2D6822,
    0x338DA088, 0x5F63E8DE, 0x9D78C239, 0x68F6058C, 0x90996C24, 0x28908B02, 0x9163F87A,
    0xE4B92576, 0x793A448E, 0x508787A4, 0x04930A22, 0x95A508F1, 0xC395A25F, 0xE8C06613,
    0x3E689825, 0x7418CFF9, 0x955DB21C, 0xA579C66A, 0x69CE619C, 0xA6789D67, 0x799EA779,
    0x9FE7C9D2, 0xA7BA067E, 0xE5167DA0, 0x02845815, 0x6C5AA83A, 0xA294E56D, 0x550A4685,
    0x84D94B6B, 0x2E98A413, 0xD83FD496, 0x6A8E1370, 0x8573FD2F, 0xB3FC7D1A, 0x644F0D01,
    0xA75DA8BA, 0xA96A3AA6, 0x1014C6A1, 0x00000000

  EW_BITMAPS_TABLE( AppCheckBoxLarge )
    EW_BITMAP( AppCheckBoxLarge, Default )
EW_END_OF_BITMAP_RES( AppCheckBoxLarge )

/* Table with links to derived variants of the bitmap resource : 'App::CheckBoxLarge' */
EW_RES_WITHOUT_VARIANTS( AppCheckBoxLarge )

/* Bitmap resource : 'App::CheckBoxSmall' */
EW_DEFINE_BITMAP_RES( AppCheckBoxSmall )
  EW_BITMAP_FRAMES( AppCheckBoxSmall, Default, EW_DRIVER_VARIANT_RGBA8888, 20, 20, 0 )
    EW_BITMAP_FRAME( 1, 0, 10, 9, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 18, 1, 0x0000017C, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 10, 9, 0x000002A8, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppCheckBoxSmall, Default )             /* ratio 23.08 % */
    0x9B95B700, 0x2FD44957, 0xB128FF71, 0x157096D2, 0x1B0E4A43, 0x71088C3E, 0x188945A2,
    0xC8A4662B, 0x5D2722F1, 0x1B61FEE0, 0xA8548F27, 0xAA35085E, 0xE2F1B8EC, 0x5F2C974A,
    0x49F99CB6, 0x3299B857, 0x09DCC673, 0x9E4E27B3, 0x14EA7D3F, 0xD068740A, 0x169346A3,
    0x29B44A5D, 0x5747A652, 0x2ED71B01, 0xAC73B255, 0xF6DAB92C, 0xAF52A9D4, 0x4552A52C,
    0x0A9E4DA6, 0x90076855, 0x926E4622, 0xBB5FAE56, 0x4AD995CA, 0xCE793918, 0x912BC5B8,
    0x1BBB1A0B, 0xBBA99EB6, 0xB898CA95, 0x998CA804, 0x15A964D3, 0xE371A85C, 0x0E460AB2,
    0xF16EB25F, 0xB69AEC4C, 0x5BA7C80E, 0x6255ECDE, 0x3215F5C5, 0xAAD0C373, 0xEAEAC01A,
    0xFD5B4BA3, 0xB2CC8645, 0x99CBDDEE, 0xF75B5577, 0xA3B7F3E4, 0x03958EAD, 0x8038A006,
    0x05CECB57, 0xDB8B04C2, 0xA6A9A85C, 0xB7A63BB6, 0xBECEE6C4, 0x7574339F, 0x66AD18BA,
    0x8A68F8E8, 0xCCFB4DD5, 0xB1B563E8, 0xEFF7D153, 0x2FB3D0E7, 0xE97AE636, 0x33F8F395,
    0x49230557, 0xBF5F1D5D, 0x0B828437, 0x67E0F238, 0x990C6D20, 0xFB388BE2, 0x668EA65C,
    0x9A06799C, 0x6582073D, 0x70B14E21, 0xD02CCFC3, 0x7648E3A4, 0xE2179A15, 0x588A0888,
    0xA2178922, 0x278A6268, 0x80C9B502, 0xE218C62B, 0xA6FCB726, 0x989C2488, 0x0A4DCBC4,
    0x79A3E8B1, 0xDBF2E09C, 0x029C9C24, 0x0000404B, 0xFAD55900, 0x1346C955, 0x7C04FF32,
    0x400FF1E0, 0x1F0D1D87, 0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1, 0x44303C01,
    0x3FCB4401, 0x9174AF53, 0x6104C1B2, 0xEA893B99, 0x69F48215, 0x3F0D8008, 0xB9CCDC38,
    0x9F4E2753, 0x1CF67F3C, 0xD068B42A, 0x443940A3, 0x05879311, 0xDC99451F, 0x25F230BD,
    0x857FC8A1, 0x09B28D28, 0xAFD7ABA0, 0x1D8AC360, 0x58ECB64B, 0xA9A8CE64, 0xA3757010,
    0xE370B350, 0x42AB95CA, 0x148E0185, 0xCBDDCEDF, 0xBBDD6E77, 0xEDEA1B1E, 0xD830B84B,
    0xF30578BF, 0x30D8CC34, 0x1B43C0E2, 0xF8FBE64B, 0x939D62A3, 0xACADC733, 0xCFE6B071,
    0x5DBB3961, 0x57F4BA0C, 0x9B3D17D1, 0x2F3A8D06, 0x5BA5D5E9, 0x5ABD865F, 0xACDA6476,
    0x8DBE26ED, 0xD56DB35B, 0x0E731BBD, 0xD36970C9, 0xC94B9AE0, 0x242145FA, 0xF5269244,
    0x568A8A24, 0xD8C4002D, 0xBBBF6775, 0xEFF6BAFD, 0x0F7BC1DC, 0x7339406F, 0x8D529C48,
    0xCAC3B11B, 0xF07235BF, 0x955A9A90, 0x90DDC32D, 0xBFC65BF3, 0x7FF3B03F, 0x9EE0F023,
    0x01F4761B, 0x0000404B, 0x1AE16100, 0x94072956, 0x8006FF33, 0x400FF1F0, 0x1F0D1D87,
    0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1, 0xF8F03C01, 0x970862B7, 0xF568AB7F,
    0x09835522, 0x611E8D19, 0x9349947E, 0x359B4CE3, 0xF230BE25, 0x91009FE5, 0xC4C66F39,
    0x51A87449, 0x7C0533A1, 0x69145918, 0xA14DA7D0, 0x34EA951E, 0x57A9D5AA, 0xAADD62AB,
    0x2B90A215, 0x6161DA6D, 0x029587F3, 0xAAA84313, 0x6BF6AACD, 0x60A34BD8, 0x7742A8A9,
    0x742F9280, 0x11282526, 0xBF572D64, 0xE11E2520, 0x279E4712, 0xCC4AB356, 0xC6E94409,
    0x6E8F3F1B, 0x28D469C5, 0x78319441, 0x01101934, 0x9C67B004, 0xC1C8B647, 0x2D54EA17,
    0x5D0E7B13, 0x47E27202, 0x16047B16, 0xA692B3FE, 0xAABA30CF, 0x03516406, 0x7F10ECF9,
    0x34C7836C, 0xE970A5B2, 0x69147DD3, 0x87A2427A, 0x47219A15, 0x07B33956, 0x00EB8018,
    0x1431C8C0, 0x238A81E8, 0xA0FEA79F, 0xA79DA6B2, 0xAF538952, 0x385CFE6E, 0xFA6A2C44,
    0x67B35314, 0x2D091F11, 0xE99F8492, 0x769A8A83, 0x8A927491, 0xD6358B0A, 0x65EE6BDA,
    0x3F084054, 0x09C0B3FC, 0x1197EC44, 0x21B85911, 0xB0A525CF, 0x376318A2, 0x164410A4,
    0xE22824F2, 0x10E9185F, 0x68FB19C5, 0xA82B8A12, 0x6B9AC6A9, 0x95D88CF6, 0xC0491884,
    0xC4FC1202, 0x8E244811, 0x892347B0, 0xE328CE40, 0x4906428F, 0x451891E4, 0x4391A487,
    0x92E0792A, 0x13494645, 0xD73C3C09, 0x90791CC6, 0x62128332, 0x0F420424, 0xA4E84A50,
    0x81C4FF6B, 0x04B02007, 0x00000004, 0x00000000

  EW_BITMAPS_TABLE( AppCheckBoxSmall )
    EW_BITMAP( AppCheckBoxSmall, Default )
EW_END_OF_BITMAP_RES( AppCheckBoxSmall )

/* Table with links to derived variants of the bitmap resource : 'App::CheckBoxSmall' */
EW_RES_WITHOUT_VARIANTS( AppCheckBoxSmall )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppSmallCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::SmallCheckBox' */
void AppSmallCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzCenter 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const037F );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const0381 );
}

/* Table with links to derived variants of the auto object : 'App::SmallCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppSmallCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( AppSmallCheckBox )

/* Initializer for the class 'App::Disablements' */
void AppDisablements__Init( AppDisablements _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSystemEventHandler__Init( &_this->TimeChangedEventHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->DisablementsChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisablements );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0091 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppDisablementItem 
  ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  _this->TimeChangedEventHandler.OnEvent = EwNewSlot( _this, AppDisablements_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->TimeChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->TimeChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppDisablements_OnLoadItem1 );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppDisablements_RefreshAll 
  );
  _this->SiteChangedEventHandler.OnEvent = EwNewSlot( _this, AppDisablements_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->DisablementsChangeEventHandler.OnEvent = EwNewSlot( _this, AppDisablements_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->DisablementsChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->DisablementChangeEvent );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppDisablements_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );

  /* Call the user defined constructor */
  AppDisablements_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Disablements' */
void AppDisablements__ReInit( AppDisablements _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSystemEventHandler__ReInit( &_this->TimeChangedEventHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->DisablementsChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
}

/* Finalizer method for the class 'App::Disablements' */
void AppDisablements__Done( AppDisablements _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisablements );

  /* Finalize all embedded objects */
  CoreSystemEventHandler__Done( &_this->TimeChangedEventHandler );
  AppListViewer__Done( &_this->ListViewer );
  CoreSystemEventHandler__Done( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__Done( &_this->DisablementsChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Disablements' */
void AppDisablements__Mark( AppDisablements _this )
{
  EwMarkObject( &_this->TimeChangedEventHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->SiteChangedEventHandler );
  EwMarkObject( &_this->DisablementsChangeEventHandler );
  EwMarkObject( &_this->MeshListChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::Disablements.OnSetVisible()' */
void AppDisablements_OnSetVisible( AppDisablements _this, XBool value )
{
  CoreGroup_OnSetVisible((CoreGroup)_this, value );

  if ( value )
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, ( _this->numDisablements + 
    _this->numZoneDisablements ) + _this->buzzerDisabled );
  }
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppDisablements_Init( AppDisablements _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, AppDisablements_Refresh ), ((XObject)_this ));
}

/* 'C' function for method : 'App::Disablements.Refresh()' */
void AppDisablements_Refresh( AppDisablements _this, XObject sender )
{
  XInt32 numz;
  XInt32 numd;
  XInt32 buzzd;
  XBool fire;
  XBool routing;
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numz = 0;
  numd = 0;
  buzzd = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_DISABLED, &cmd );  

    numz = cmd.int0;
    numd = cmd.int1;
    buzzd = cmd.int2;
  }
  _this->numZoneDisablements = numz;
  _this->numDisablements = numd;
  AppDisablements_OnSetbuzzerDisabled( _this, buzzd );
  fire = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, AppLibClass 
  ), -1 );
  routing = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, AppLibClass 
  ), 0 );
  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    app->DisablementsTabButton.Super1.NumberOf = (XUInt16)(( numz + numd ) + buzzd 
    );
    ViewsImage_OnSetVisible( &app->DisablementsTabButton.fire, fire );
    ViewsImage_OnSetVisible( &app->DisablementsTabButton.routing, routing );
    CoreGroup_InvalidateViewState((CoreGroup)&app->DisablementsTabButton );
  }

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, ( numz + numd ) + buzzd );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDisablements_OnLoadItem1( AppDisablements _this, XObject sender )
{
  XInt16 itemNo;
  AppDisablementItem row;
  XEnum type;
  XString location;
  XInt16 zone;
  XInt16 yunit;
  XInt16 inout;
  XInt16 chan;
  XInt32 numzones;
  XInt32 numunits;
  XString io;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.View, AppDisablementItem );

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( row, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)row );
    return;
  }

  if ( itemNo == 0 )
  {
    if ( _this->buzzerDisabled == 1 )
    {
      CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
      ViewsImage_OnSetBitmap( &row->ChannelImage.Image, EwLoadResource( &AppMuteBitmap, 
      ResourcesBitmap ));
      ViewsText_OnSetVisible( &row->ChanText, 0 );
      ViewsText_OnSetVisible( &row->CAE, 0 );
      ViewsText_OnSetColor( &row->ZoneText, _Const000E );
      ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0382 ));
      ViewsText_OnSetString( &row->ChannelImage.Text, 0 );
      ViewsText_OnSetVisible( &row->Text, 1 );
      ViewsText_OnSetColor( &row->Text, _Const000E );
      ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0383 ));
      EwReleaseString( &row->DescriptionText );
      CoreGroup__OnSetVisible( row, 1 );
      CoreGroup_InvalidateViewState((CoreGroup)row );
      row = EwCastObject( row->Super3.next, AppDisablementItem );
      return;
    }
  }

  if ( _this->buzzerDisabled == 1 )
  {
    itemNo = (XInt16)( itemNo - 1 );
  }

  type = AppChannelTypeNone;
  location = EwLoadString( &_Const020C );
  zone = 0;
  yunit = 0;
  inout = 1;
  chan = 0;
  numzones = _this->numZoneDisablements;
  numunits = _this->numDisablements;
  {
    Command cmd;
    int ok;

    if ( itemNo < numzones )
    {
      cmd.int0 = itemNo;

      ok = Command0( CMD_DISABLED_ZONE_DETAILS, &cmd );
    }
    else if ( itemNo - numzones < numunits )
    {
       cmd.int0 = itemNo - numzones;

       ok = Command0( CMD_GET_DISABLED_DETAILS, &cmd );

       if ( ok == CMD_OK )
       {
          location = EwNewStringAnsi( (char*) cmd.int0 );
       }
    }
    else
    {
        CoreGroup_OnSetVisible((CoreGroup)row, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)row );
        return;
    }

    if ( ok )
    {
      zone  = cmd.short2;
      yunit = cmd.short3;
      type = cmd.short4;
      chan = cmd.short5;
      inout = cmd.short6;  
    }
    else
    {
       CoreGroup_OnSetVisible((CoreGroup)row, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)row );
        return;
    }
  }

  if ( yunit == -1 )
  {
    CoreGroup__OnSetVisible( &row->ChannelImage, 0 );
    ViewsText_OnSetVisible( &row->ChanText, 0 );

    if ( zone == -1 )
    {
      ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0384 ));
      ViewsText_OnSetString( &row->Text, 0 );
    }
    else
      if ( zone == 0 )
      {
        ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0385 ));
        ViewsText_OnSetString( &row->Text, 0 );
      }
      else
      {
        ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwLoadString( &_Const009B 
        ), EwNewStringInt( zone, 0, 10 )));
        ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0386 ));
      }

    return;
  }

  io = 0;
  ViewsText_OnSetColor( &row->ZoneText, _Const000E );
  ViewsText_OnSetColor( &row->Text, _Const000E );
  ViewsText_OnSetColor( &row->ChanText, _Const000E );

  if (( inout & 1 ) > 0 )
  {
    if (( inout & 2 ) > 0 )
    {
      if (( inout & 4 ) == 0 )
      {
        io = EwLoadString( &_Const0387 );

        if (( inout & 8 ) == 0 )
        {
          ViewsText_OnSetColor( &row->ZoneText, _Const0285 );
          ViewsText_OnSetColor( &row->Text, _Const0285 );
          ViewsText_OnSetColor( &row->ChanText, _Const0285 );
        }
      }
    }
    else
    {
      if (( inout & 4 ) > 0 )
      {
        io = EwLoadString( &_Const0388 );

        if (( inout & 8 ) > 0 )
        {
          ViewsText_OnSetColor( &row->ZoneText, _Const0285 );
          ViewsText_OnSetColor( &row->Text, _Const0285 );
          ViewsText_OnSetColor( &row->ChanText, _Const0285 );
        }
      }
    }
  }

  {
    CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
    ViewsText_OnSetVisible( &row->ChanText, 1 );
    AppChannelImage_OnSetBitmap( &row->ChannelImage, type );
    ViewsText_OnSetString( &row->ChanText, EwConcatString( EwConcatString( AppLibClass_TypeName( 
    EwGetAutoObject( &AppLib, AppLibClass ), type ), EwLoadString( &_Const004B )), 
    io ));
    ViewsText_OnSetString( &row->Text, location );
    ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
    EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const0309 
    )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), yunit )));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDisablements_RefreshAll( AppDisablements _this, XObject sender )
{
  XInt16 itemNo;
  AppDisablementItem row;
  XEnum type;
  XString location;
  XInt16 zone;
  XInt16 yunit;
  XInt16 inout;
  XInt16 chan;
  XInt32 numzones;
  XInt32 numunits;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppDisablementItem 
  );

  if ( row == 0 )
    return;

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( row, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)row );
    row = EwCastObject( row->Super3.next, AppDisablementItem );

    if ( row == 0 )
      return;

    itemNo = (XInt16)( itemNo + 1 );
  }

  if ( _this->buzzerDisabled == 1 )
  {
    CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
    ViewsImage_OnSetBitmap( &row->ChannelImage.Image, EwLoadResource( &AppMuteBitmap, 
    ResourcesBitmap ));
    ViewsText_OnSetVisible( &row->ChanText, 0 );
    ViewsText_OnSetVisible( &row->CAE, 0 );
    ViewsText_OnSetColor( &row->ZoneText, _Const000E );
    ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0382 ));
    ViewsText_OnSetString( &row->ChannelImage.Text, 0 );
    ViewsText_OnSetVisible( &row->Text, 1 );
    ViewsText_OnSetColor( &row->Text, _Const000E );
    ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0383 ));
    EwReleaseString( &row->DescriptionText );
    CoreGroup__OnSetVisible( row, 1 );
    CoreGroup_InvalidateViewState((CoreGroup)row );
    row = EwCastObject( row->Super3.next, AppDisablementItem );
  }

  type = AppChannelTypeNone;
  location = EwLoadString( &_Const020C );
  zone = 0;
  yunit = 0;
  inout = 1;
  chan = 0;
  numzones = _this->numZoneDisablements;
  numunits = _this->numDisablements;

  while ( row != 0 )
  {
    {
      Command cmd;
      int ok;

      if ( itemNo < numzones )
      {
        cmd.int0 = itemNo;

        ok = Command0( CMD_DISABLED_ZONE_DETAILS, &cmd );
      }
      else if ( itemNo - numzones < numunits )
      {
         cmd.int0 = itemNo - numzones;

         if ( ( ok = Command0( CMD_GET_DISABLED_DETAILS, &cmd ) ) == CMD_OK )
         {
            location = EwNewStringAnsi( (char*) cmd.int0 );
         }
         else
         {
            *location = 0;
         }
      }
      else
      {
          CoreGroup_OnSetVisible((CoreGroup)row, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)row );

          row = EwCastObject( row->Super3.next, AppDisablementItem );

          itemNo++;
          continue;
      }

      if ( ok == CMD_OK )
      {
        zone  = cmd.short2;
        yunit = cmd.short3;
        type = cmd.short4;
        chan = cmd.short5;
        inout = cmd.short6;  
        CoreGroup_OnSetVisible((CoreGroup)row, 1 );
      }
      else
      {
          CoreGroup_OnSetVisible((CoreGroup)row, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)row );
          row = EwCastObject( row->Super3.next, AppDisablementItem );
          itemNo++;
          continue;
       }
    }

    if ( yunit == -1 )
    {
      CoreGroup__OnSetVisible( &row->ChannelImage, 0 );
      ViewsText_OnSetVisible( &row->ChanText, 0 );
      ViewsText_OnSetVisible( &row->CAE, (XBool)(( inout & 16 ) > 0 ));

      if ( zone == -1 )
      {
        ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0384 ));
        ViewsText_OnSetString( &row->Text, 0 );
      }
      else
        if ( zone == 0 )
        {
          ViewsText_OnSetString( &row->ZoneText, EwLoadString( &_Const0385 ));
          ViewsText_OnSetString( &row->Text, 0 );
        }
        else
        {
          ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwLoadString( &_Const009B 
          ), EwNewStringInt( zone, 0, 10 )));
          ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0386 ));
        }
    }
    else
    {
      XString io = 0;
      ViewsText_OnSetColor( &row->ZoneText, _Const000E );
      ViewsText_OnSetColor( &row->Text, _Const000E );
      ViewsText_OnSetColor( &row->ChanText, _Const000E );

      if (( inout & 1 ) > 0 )
      {
        if (( inout & 2 ) > 0 )
        {
          if (( inout & 4 ) == 0 )
          {
            io = EwLoadString( &_Const0387 );

            if (( inout & 8 ) == 0 )
            {
              ViewsText_OnSetColor( &row->ZoneText, _Const0285 );
              ViewsText_OnSetColor( &row->Text, _Const0285 );
              ViewsText_OnSetColor( &row->ChanText, _Const0285 );
            }
          }
        }
        else
        {
          if (( inout & 4 ) > 0 )
          {
            io = EwLoadString( &_Const0388 );

            if (( inout & 8 ) > 0 )
            {
              ViewsText_OnSetColor( &row->ZoneText, _Const0285 );
              ViewsText_OnSetColor( &row->Text, _Const0285 );
              ViewsText_OnSetColor( &row->ChanText, _Const0285 );
            }
          }
        }
      }

      ViewsText_OnSetVisible( &row->CAE, (XBool)(( inout & 16 ) > 0 ));
      CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
      ViewsText_OnSetVisible( &row->ChanText, 1 );
      AppChannelImage_OnSetBitmap( &row->ChannelImage, type );
      ViewsText_OnSetString( &row->ChanText, EwConcatString( EwConcatString( AppLibClass_TypeName( 
      EwGetAutoObject( &AppLib, AppLibClass ), type ), EwLoadString( &_Const004B 
      )), io ));
      ViewsText_OnSetString( &row->Text, location );
      ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
      EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), EwLoadString( 
      &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), 
      yunit )));
    }

    CoreGroup_InvalidateViewState((CoreGroup)row );
    row = EwCastObject( row->Super3.next, AppDisablementItem );
    itemNo = (XInt16)( itemNo + 1 );
  }
}

/* 'C' function for method : 'App::Disablements.OnSetbuzzerDisabled()' */
void AppDisablements_OnSetbuzzerDisabled( AppDisablements _this, XInt32 value )
{
  if ( _this->buzzerDisabled == value )
    return;

  _this->buzzerDisabled = value;
}

/* Variants derived from the class : 'App::Disablements' */
EW_DEFINE_CLASS_VARIANTS( AppDisablements )
EW_END_OF_CLASS_VARIANTS( AppDisablements )

/* Virtual Method Table (VMT) for the class : 'App::Disablements' */
EW_DEFINE_CLASS( AppDisablements, CoreGroup, "App::Disablements" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  AppDisablements_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisablements )

/* Initializer for the class 'App::DisablementItem' */
void AppDisablementItem__Init( AppDisablementItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ChanText, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CAE, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisablementItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0063 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0063 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const004D );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0389 );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0065 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const038A );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const000E );
  EwRetainString( &_this->DescriptionText, EwLoadString( &_Const0065 ));
  CoreRectView__OnSetBounds( &_this->ChanText, _Const038B );
  ViewsText_OnSetAlignment( &_this->ChanText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChanText, 0 );
  ViewsText_OnSetColor( &_this->ChanText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->ChannelImage, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToRight | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const038C );
  CoreView_OnSetLayout((CoreView)&_this->CAE, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->CAE, _Const038D );
  ViewsText_OnSetWrapWidth( &_this->CAE, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->CAE, 1 );
  ViewsText_OnSetAlignment( &_this->CAE, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->CAE, EwLoadString( &_Const038E ));
  ViewsText_OnSetColor( &_this->CAE, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChanText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CAE ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ChanText, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->CAE, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::DisablementItem' */
void AppDisablementItem__ReInit( AppDisablementItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->ChanText );
  AppChannelImage__ReInit( &_this->ChannelImage );
  ViewsText__ReInit( &_this->CAE );
}

/* Finalizer method for the class 'App::DisablementItem' */
void AppDisablementItem__Done( AppDisablementItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisablementItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->ChanText );
  AppChannelImage__Done( &_this->ChannelImage );
  ViewsText__Done( &_this->CAE );

  /* Release all used strings */
  EwReleaseString( &_this->DescriptionText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisablementItem' */
void AppDisablementItem__Mark( AppDisablementItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->ChanText );
  EwMarkObject( &_this->ChannelImage );
  EwMarkObject( &_this->CAE );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppDisablementItem_UpdateLayout( AppDisablementItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisablementItem_UpdateViewState( AppDisablementItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::DisablementItem' */
EW_DEFINE_CLASS_VARIANTS( AppDisablementItem )
EW_END_OF_CLASS_VARIANTS( AppDisablementItem )

/* Virtual Method Table (VMT) for the class : 'App::DisablementItem' */
EW_DEFINE_CLASS( AppDisablementItem, CoreGroup, "App::DisablementItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppDisablementItem_UpdateLayout,
  AppDisablementItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisablementItem )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppSmallCheckBoxCaption, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::SmallCheckBoxCaption' */
void AppSmallCheckBoxCaption__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const000E );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 34 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 6 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const037E );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const037F );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &AppCheckBoxSmall, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02A1 );
}

/* Table with links to derived variants of the auto object : 'App::SmallCheckBoxCaption' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppSmallCheckBoxCaption )
EW_END_OF_AUTOOBJECT_VARIANTS( AppSmallCheckBoxCaption )

/* Initializer for the class 'App::OnTest' */
void AppOnTest__Init( AppOnTest _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOnTest );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0091 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppOnTestItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppOnTest_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppOnTest_RefreshAll );
  _this->SiteChangedEventHandler.OnEvent = EwNewSlot( _this, AppOnTest_Refresh );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppOnTest_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );
}

/* Re-Initializer for the class 'App::OnTest' */
void AppOnTest__ReInit( AppOnTest _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppListViewer__ReInit( &_this->ListViewer );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
}

/* Finalizer method for the class 'App::OnTest' */
void AppOnTest__Done( AppOnTest _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOnTest );

  /* Finalize all embedded objects */
  AppListViewer__Done( &_this->ListViewer );
  CoreSystemEventHandler__Done( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OnTest' */
void AppOnTest__Mark( AppOnTest _this )
{
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->SiteChangedEventHandler );
  EwMarkObject( &_this->MeshListChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppOnTest_OnLoadItem( AppOnTest _this, XObject sender )
{
  XInt16 itemNo;
  AppOnTestItem row;
  XInt32 numzones;
  XInt32 numunits;
  XEnum type;
  XString location;
  XInt16 zone;
  XInt16 yunit;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.View, AppOnTestItem );

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( row, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)row );
    return;
  }
  else
  {
    CoreGroup__OnSetVisible( row, 1 );
  }

  numzones = 0;
  numunits = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_ON_TEST, &cmd );  

    numzones = cmd.int0;
    numunits = cmd.int1;
  }
  type = AppChannelTypeNone;
  location = EwLoadString( &_Const020C );
  zone = 0;
  yunit = 0;
  {
    Command cmd;

    cmd.int0 = itemNo;

    if ( itemNo < numzones )
    {
      cmd.int0 = itemNo;

      Command0( CMD_GET_ON_TEST_ZONE_DETAILS, &cmd );
    }
    else if ( itemNo - numzones < numunits )
    {
       cmd.int0 = itemNo - numzones;

       Command0( CMD_GET_ON_TEST_DETAILS, &cmd );

       location = EwNewStringAnsi( (char*) cmd.int0 );
    }
    else
    {
        CoreGroup_OnSetVisible((CoreGroup)row, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)row );
        return;
    }

    location = EwNewStringAnsi( (char*) cmd.int0 );
    zone  = cmd.short2;
    yunit = cmd.short3;
    type = cmd.short4;
  }

  if ( yunit == -1 )
  {
    CoreGroup__OnSetVisible( &row->ChannelImage, 0 );
    ViewsText_OnSetVisible( &row->ZoneText1, 0 );
    ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwLoadString( &_Const009B 
    ), EwNewStringInt( zone, 0, 10 )));
    ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0386 ));
    return;
  }

  CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
  ViewsText_OnSetVisible( &row->ZoneText1, 1 );
  AppChannelImage_OnSetBitmap( &row->ChannelImage, type );
  ViewsText_OnSetString( &row->ZoneText1, AppLibClass_TypeName( EwGetAutoObject( 
  &AppLib, AppLibClass ), type ));
  ViewsText_OnSetString( &row->Text, location );
  ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), EwLoadString( &_Const0309 
  )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), yunit )));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppOnTest_RefreshAll( AppOnTest _this, XObject sender )
{
  XInt16 itemNo;
  AppOnTestItem row;
  XInt32 numzones;
  XInt32 numunits;
  AppApplication app;
  XEnum type;
  XString location;
  XInt16 zone;
  XInt16 yunit;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = (XInt16)_this->ListViewer.Item;
  row = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppOnTestItem 
  );

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( row, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)row );
    row = EwCastObject( row->Super3.next, AppOnTestItem );

    if ( row == 0 )
      return;

    itemNo = (XInt16)( itemNo + 1 );
  }

  numzones = 0;
  numunits = 0;
  {
    Command cmd;

    Command0(  CMD_GET_NUM_ON_TEST, &cmd );  

    numzones = cmd.int0;
    numunits = cmd.int1;
  }
  app = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( app != 0 )
  {
    app->OnTestTabButton.NumberOf = (XUInt16)( numzones + numunits );
    CoreGroup_InvalidateViewState((CoreGroup)&app->OnTestTabButton );
  }

  type = AppChannelTypeNone;
  location = EwLoadString( &_Const020C );
  zone = 0;
  yunit = 0;

  while ( row != 0 )
  {
    {
      Command cmd;

      cmd.int0 = itemNo;

      if ( itemNo < numzones )
      {
         cmd.int0 = itemNo;

         Command0( CMD_GET_ON_TEST_ZONE_DETAILS, &cmd );
      }
      else if ( itemNo - numzones < numunits )
      {
         cmd.int0 = itemNo - numzones;

         Command0( CMD_GET_ON_TEST_DETAILS, &cmd );

         location = EwNewStringAnsi( (char*) cmd.int0 );
      }
      else
      {
          CoreGroup_OnSetVisible((CoreGroup)row, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)row );

          row = EwCastObject( row->Super3.next, AppOnTestItem );
          continue;
      }

      CoreGroup_OnSetVisible((CoreGroup)row, 1 );

      location = EwNewStringAnsi( (char*) cmd.int0 );
      zone  = cmd.short2;
      yunit = cmd.short3;
      type = cmd.short4;
    }

    if ( yunit == -1 )
    {
      CoreGroup__OnSetVisible( &row->ChannelImage, 0 );
      ViewsText_OnSetVisible( &row->ZoneText1, 0 );
      ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwLoadString( &_Const009B 
      ), EwNewStringInt( zone, 0, 10 )));
      ViewsText_OnSetString( &row->Text, EwLoadString( &_Const0386 ));
    }
    else
    {
      CoreGroup__OnSetVisible( &row->ChannelImage, 1 );
      ViewsText_OnSetVisible( &row->ZoneText1, 1 );
      AppChannelImage_OnSetBitmap( &row->ChannelImage, type );
      ViewsText_OnSetString( &row->ZoneText1, AppLibClass_TypeName( EwGetAutoObject( 
      &AppLib, AppLibClass ), type ));
      ViewsText_OnSetString( &row->Text, location );
      ViewsText_OnSetString( &row->ZoneText, EwConcatString( EwConcatString( EwConcatString( 
      EwLoadString( &_Const009B ), EwNewStringInt( zone, 0, 10 )), EwLoadString( 
      &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), 
      yunit )));
    }

    CoreGroup_InvalidateViewState((CoreGroup)row );
    row = EwCastObject( row->Super3.next, AppOnTestItem );
    itemNo = (XInt16)( itemNo + 1 );
  }
}

/* 'C' function for method : 'App::OnTest.Refresh()' */
void AppOnTest_Refresh( AppOnTest _this, XObject sender )
{
  XInt32 numzones;
  XInt32 numunits;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0(  CMD_GET_NUM_ON_TEST, &cmd );  

    numzones = cmd.int0;
    numunits = cmd.int1;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numzones + numunits );
}

/* Variants derived from the class : 'App::OnTest' */
EW_DEFINE_CLASS_VARIANTS( AppOnTest )
EW_END_OF_CLASS_VARIANTS( AppOnTest )

/* Virtual Method Table (VMT) for the class : 'App::OnTest' */
EW_DEFINE_CLASS( AppOnTest, CoreGroup, "App::OnTest" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOnTest )

/* Initializer for the class 'App::OnTestItem' */
void AppOnTestItem__Init( AppOnTestItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->Border, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText1, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOnTestItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0063 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0063 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const004D );
  CoreView_OnSetLayout((CoreView)&_this->Border, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Border, _Const0063 );
  ViewsBorder_OnSetColor( &_this->Border, _Const0375 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const038F );
  ViewsText_OnSetWrapWidth( &_this->Text, EwGetRectW( _this->Super2.Bounds ));
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0065 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const0390 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const000E );
  CoreRectView__OnSetBounds( &_this->ZoneText1, _Const0391 );
  ViewsText_OnSetAlignment( &_this->ZoneText1, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText1, EwLoadString( &_Const006A ));
  ViewsText_OnSetColor( &_this->ZoneText1, _Const000E );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const0392 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Border ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->ZoneText1, EwLoadResource( &AppFontVerdanaProSemiBold20, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::OnTestItem' */
void AppOnTestItem__ReInit( AppOnTestItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsBorder__ReInit( &_this->Border );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->ZoneText1 );
  AppChannelImage__ReInit( &_this->ChannelImage );
}

/* Finalizer method for the class 'App::OnTestItem' */
void AppOnTestItem__Done( AppOnTestItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOnTestItem );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsBorder__Done( &_this->Border );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->ZoneText1 );
  AppChannelImage__Done( &_this->ChannelImage );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OnTestItem' */
void AppOnTestItem__Mark( AppOnTestItem _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Border );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->ZoneText1 );
  EwMarkObject( &_this->ChannelImage );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppOnTestItem_UpdateLayout( AppOnTestItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppOnTestItem_UpdateViewState( AppOnTestItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::OnTestItem' */
EW_DEFINE_CLASS_VARIANTS( AppOnTestItem )
EW_END_OF_CLASS_VARIANTS( AppOnTestItem )

/* Virtual Method Table (VMT) for the class : 'App::OnTestItem' */
EW_DEFINE_CLASS( AppOnTestItem, CoreGroup, "App::OnTestItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppOnTestItem_UpdateLayout,
  AppOnTestItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppOnTestItem )

/* Initializer for the class 'App::DisableZoneItem' */
void AppDisableZoneItem__Init( AppDisableZoneItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->ExpandImage, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisableZoneItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const033C );
  CoreRectView__OnSetBounds( &_this->ExpandImage, _Const033D );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const033E );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const033F 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0304 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const018D );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0185 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0393 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0068 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0394 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ExpandImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &AppExpandBitmap, 
  ResourcesBitmap ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppDisableZoneItem_ClearAll );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &WidgetSetPushButton_Small, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppDisableZoneItem_ToggleExpand 
  );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppDisableZoneItem_ToggleSlot 
  );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppDisableZoneItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &AppLargeDisableCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::DisableZoneItem' */
void AppDisableZoneItem__ReInit( AppDisableZoneItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->ExpandImage );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
}

/* Finalizer method for the class 'App::DisableZoneItem' */
void AppDisableZoneItem__Done( AppDisableZoneItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisableZoneItem );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->ExpandImage );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  WidgetSetToggleButton__Done( &_this->ToggleButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisableZoneItem' */
void AppDisableZoneItem__Mark( AppDisableZoneItem _this )
{
  EwMarkObject( &_this->ExpandImage );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->ToggleButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisableZoneItem_UpdateViewState( AppDisableZoneItem _this, XSet aState )
{
  AppDisable testpage;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->ZoneNum == -1 )
  {
    ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0395 ));
  }
  else
    if ( _this->ZoneNum == 0 )
    {
      ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0385 ));
    }
    else
    {
      ViewsText_OnSetString( &_this->Text, EwConcatString( EwLoadString( &_Const009B 
      ), EwNewStringInt( _this->ZoneNum, 0, 10 )));
    }

  testpage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner, AppDisable 
  );

  if ( testpage != 0 )
  {
    XSet zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), 
      _this->ZoneNum );

    if ((( zf & AppZoneFlagsDisableExpanded ) == AppZoneFlagsDisableExpanded ))
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &AppCollapseBitmap, 
      ResourcesBitmap ));
    }
    else
    {
      ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &AppExpandBitmap, 
      ResourcesBitmap ));
    }
  }
}

/* 'C' function for method : 'App::DisableZoneItem.ClearAll()' */
void AppDisableZoneItem_ClearAll( AppDisableZoneItem _this, XObject sender )
{
  XInt16 dev;
  XInt16 devs;
  AppDisable disable;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  devs = (XInt16)AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
  ), _this->ZoneNum );

  for ( dev = 0; dev < devs; dev = (XInt16)( dev + 1 ))
  {
    XInt16 unitnum = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, AppLibClass 
      ), _this->ZoneNum, dev );
    AppDeviceConfig d = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
      ), unitnum );

    if ( d != 0 )
    {
      XInt32 channel;
      d->flags = d->flags & ~AppDeviceConfigFlagsDisabled;

      for ( channel = 0; channel < d->numinputs; channel = channel + 1 )
      {
        d->inputs[ EwCheckIndex( channel, 32 )]->flags = d->inputs[ EwCheckIndex( 
        channel, 32 )]->flags & ~( AppOptionsDisabledDay | AppOptionsDisabledNight 
        );
      }

      for ( channel = 0; channel < d->numoutputs; channel = channel + 1 )
      {
        d->outputs[ EwCheckIndex( channel, 32 )]->flags = d->outputs[ EwCheckIndex( 
        channel, 32 )]->flags & ~AppOptionsDisabled;
      }

      AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), unitnum, 1, 
      d );
    }
  }

  disable = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disable != 0 )
  {
    EwPostSignal( EwNewSlot( &EwCastObject( disable->Super3.Owner, AppApplication 
      )->Disablements, AppDisablements_Refresh ), ((XObject)_this ));
    EwSignal( disable->ListViewer.onRefreshAll, ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::DisableZoneItem.ToggleSlot()' */
void AppDisableZoneItem_ToggleSlot( AppDisableZoneItem _this, XObject sender )
{
  AppDisable disablepage;
  AppLibClass_SetZoneDisabledState( EwGetAutoObject( &AppLib, AppLibClass ), _this->ZoneNum, 
  EwCastObject( sender, WidgetSetToggleButton )->Checked );
  disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disablepage != 0 )
  {
    EwPostSignal( EwNewSlot( disablepage, AppDisable_Recount ), ((XObject)_this 
      ));
    CoreVerticalList_InvalidateItems( &disablepage->ListViewer.VerticalList, 0, 
    disablepage->ListViewer.VerticalList.NoOfItems - 1 );
  }
}

/* 'C' function for method : 'App::DisableZoneItem.ToggleExpand()' */
void AppDisableZoneItem_ToggleExpand( AppDisableZoneItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppDisable dispage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
      AppDisable );
    XSet zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), 
      _this->ZoneNum );

    if ( !(( zf & AppZoneFlagsDisableExpanded ) == AppZoneFlagsDisableExpanded ))
    {
      zf = zf | AppZoneFlagsDisableExpanded;
    }
    else
    {
      zf = zf & ~AppZoneFlagsDisableExpanded;
    }

    AppLibClass_SetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->ZoneNum, 
    zf );
    EwSignal( EwNewSlot( dispage, AppDisable_Refresh ), ((XObject)_this ));
  }
}

/* Variants derived from the class : 'App::DisableZoneItem' */
EW_DEFINE_CLASS_VARIANTS( AppDisableZoneItem )
EW_END_OF_CLASS_VARIANTS( AppDisableZoneItem )

/* Virtual Method Table (VMT) for the class : 'App::DisableZoneItem' */
EW_DEFINE_CLASS( AppDisableZoneItem, CoreGroup, "App::DisableZoneItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppDisableZoneItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisableZoneItem )

/* Initializer for the class 'App::DisableUnitItem' */
void AppDisableUnitItem__Init( AppDisableUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->CheckBox, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisableUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0344 );
  ViewsText_OnSetColorBL( &_this->Text, _Const000E );
  ViewsText_OnSetColorBR( &_this->Text, _Const000E );
  ViewsText_OnSetColorTR( &_this->Text, _Const000E );
  ViewsText_OnSetColorTL( &_this->Text, _Const000E );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, 0 );
  ViewsText_OnSetColor( &_this->Text, _Const0345 );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const0396 );
  ViewsText_OnSetColorBL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorBR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, 0 );
  ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
  CoreRectView__OnSetBounds( &_this->Image1, _Const0347 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0348 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0349 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const034A );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const034B );
  CoreRectView__OnSetBounds( &_this->CheckBox, _Const034C );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->CheckBox, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->CheckBox, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CheckBox ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppVerdanaProSemiBold16, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppExpandBitmap, ResourcesBitmap 
  ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppDisableUnitItem_ToggleExpand 
  );
  _this->CheckBox.OnSwitchOn = EwNewSlot( _this, AppDisableUnitItem_ToggleSlot );
  _this->CheckBox.OnSwitchOff = EwNewSlot( _this, AppDisableUnitItem_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->CheckBox, EwGetAutoObject( &AppDisableSmallCheckBox, 
  WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::DisableUnitItem' */
void AppDisableUnitItem__ReInit( AppDisableUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->DescriptionText );
  ViewsImage__ReInit( &_this->Image1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__ReInit( &_this->CheckBox );
}

/* Finalizer method for the class 'App::DisableUnitItem' */
void AppDisableUnitItem__Done( AppDisableUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisableUnitItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->DescriptionText );
  ViewsImage__Done( &_this->Image1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetToggleButton__Done( &_this->CheckBox );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisableUnitItem' */
void AppDisableUnitItem__Mark( AppDisableUnitItem _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->CheckBox );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisableUnitItem_UpdateViewState( AppDisableUnitItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    AppDevice d;
    ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
    ViewsText_OnSetColor( &_this->Text, _Const000E );
    d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
    );

    if ( d != 0 )
    {
      if (((( _this->ZoneGroup > 0 ) && (( d->settings & AppDeviceSettingDisableExpanded 
          ) == AppDeviceSettingDisableExpanded )) || (( _this->ZoneGroup == -1 ) 
          && (( d->settings & AppDeviceSettingDisableFireExpanded ) == AppDeviceSettingDisableFireExpanded 
          ))) || (( _this->ZoneGroup == 0 ) && (( d->settings & AppDeviceSettingDisableRoutingExpanded 
          ) == AppDeviceSettingDisableRoutingExpanded )))
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppCollapseBitmap, 
        ResourcesBitmap ));
      }
      else
      {
        ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &AppExpandBitmap, 
        ResourcesBitmap ));
      }

      ViewsImage_OnSetVisible( &_this->Image1, 1 );
    }
  }
  else
  {
    ViewsText_OnSetColor( &_this->DescriptionText, _Const030D );
    ViewsText_OnSetColor( &_this->Text, _Const030D );
    ViewsImage_OnSetVisible( &_this->Image1, 0 );
  }

  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwConcatString( 
  EwLoadString( &_Const009B ), EwNewStringInt( _this->ZoneNum, 0, 10 )), EwLoadString( 
  &_Const0309 )), AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass ), _this->UnitNum 
  )));
}

/* 'C' function for method : 'App::DisableUnitItem.ToggleSlot()' */
void AppDisableUnitItem_ToggleSlot( AppDisableUnitItem _this, XObject sender )
{
  AppDeviceConfig d;
  AppDisable disablepage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( d != 0 )
  {
    if ( _this->CheckBox.Checked )
    {
      d->flags = d->flags | AppDeviceConfigFlagsDisabled;
    }
    else
    {
      d->flags = d->flags & ~AppDeviceConfigFlagsDisabled;
    }

    AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
    1, d );
  }

  disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disablepage != 0 )
  {
    EwSignal( disablepage->ListViewer.onRefreshAll, ((XObject)_this ));
    EwPostSignal( EwNewSlot( disablepage, AppDisable_Recount ), ((XObject)_this 
      ));
  }
}

/* 'C' function for method : 'App::DisableUnitItem.ToggleExpand()' */
void AppDisableUnitItem_ToggleExpand( AppDisableUnitItem _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppDisable disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
      AppDisable );

    if ( disablepage != 0 )
    {
      AppDevice d = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass 
        ), (XInt16)_this->UnitNum );

      if ( d != 0 )
      {
        if ( AppDevice_IsDisableExpanded( d, _this->ZoneGroup ))
        {
          if ( _this->ZoneGroup == -1 )
          {
            d->settings = d->settings & ~AppDeviceSettingDisableFireExpanded;
          }
          else
            if ( _this->ZoneGroup == 0 )
            {
              d->settings = d->settings & ~AppDeviceSettingDisableRoutingExpanded;
            }
            else
            {
              d->settings = d->settings & ~AppDeviceSettingDisableExpanded;
            }
        }
        else
        {
          if ( _this->ZoneGroup == -1 )
          {
            d->settings = d->settings | AppDeviceSettingDisableFireExpanded;
          }
          else
            if ( _this->ZoneGroup == 0 )
            {
              d->settings = d->settings | AppDeviceSettingDisableRoutingExpanded;
            }
            else
            {
              d->settings = d->settings | AppDeviceSettingDisableExpanded;
            }
        }

        AppLibClass_SetDevice( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
        d );
      }
    }

    EwSignal( EwNewSlot( disablepage, AppDisable_Refresh ), ((XObject)_this ));
  }
}

/* Variants derived from the class : 'App::DisableUnitItem' */
EW_DEFINE_CLASS_VARIANTS( AppDisableUnitItem )
EW_END_OF_CLASS_VARIANTS( AppDisableUnitItem )

/* Virtual Method Table (VMT) for the class : 'App::DisableUnitItem' */
EW_DEFINE_CLASS( AppDisableUnitItem, CoreGroup, "App::DisableUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppDisableUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisableUnitItem )

/* Initializer for the class 'App::DisableItem' */
void AppDisableItem__Init( AppDisableItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppDisableUnitItem__Init( &_this->DisableUnitItem, &_this->_XObject, 0 );
  AppDisableZoneItem__Init( &_this->DisableZoneItem, &_this->_XObject, 0 );
  AppDisableChannelItem__Init( &_this->DisableChannelItem, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisableItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->DisableUnitItem, _Const0397 );
  CoreRectView__OnSetBounds( &_this->DisableZoneItem, _Const0343 );
  CoreRectView__OnSetBounds( &_this->DisableChannelItem, _Const0343 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableUnitItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableZoneItem ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DisableChannelItem ), 0 );
}

/* Re-Initializer for the class 'App::DisableItem' */
void AppDisableItem__ReInit( AppDisableItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppDisableUnitItem__ReInit( &_this->DisableUnitItem );
  AppDisableZoneItem__ReInit( &_this->DisableZoneItem );
  AppDisableChannelItem__ReInit( &_this->DisableChannelItem );
}

/* Finalizer method for the class 'App::DisableItem' */
void AppDisableItem__Done( AppDisableItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisableItem );

  /* Finalize all embedded objects */
  AppDisableUnitItem__Done( &_this->DisableUnitItem );
  AppDisableZoneItem__Done( &_this->DisableZoneItem );
  AppDisableChannelItem__Done( &_this->DisableChannelItem );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisableItem' */
void AppDisableItem__Mark( AppDisableItem _this )
{
  EwMarkObject( &_this->DisableUnitItem );
  EwMarkObject( &_this->DisableZoneItem );
  EwMarkObject( &_this->DisableChannelItem );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppDisableItem_UpdateLayout( AppDisableItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisableItem_UpdateViewState( AppDisableItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::DisableItem' */
EW_DEFINE_CLASS_VARIANTS( AppDisableItem )
EW_END_OF_CLASS_VARIANTS( AppDisableItem )

/* Virtual Method Table (VMT) for the class : 'App::DisableItem' */
EW_DEFINE_CLASS( AppDisableItem, CoreGroup, "App::DisableItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppDisableItem_UpdateLayout,
  AppDisableItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisableItem )

/* Initializer for the class 'App::Disable' */
void AppDisable__Init( AppDisable _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangedEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessLevelChange, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisable );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const00A9 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0092 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppDisableItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 50 );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const021C );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0006 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const01C7 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const01C8 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const01C9 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0398 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ToggleButton, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const0399 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppDisable_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppDisable_OnRefreshAll );
  _this->SiteChangedEventHandler.OnEvent = EwNewSlot( _this, AppDisable_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangedEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppDisable_Refresh 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppDisable_ToggelBuzzer );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppDisable_ToggelBuzzer );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &AppSwitch_Medium, WidgetSetToggleButtonConfig ));
  _this->AccessLevelChange.OnEvent = EwNewSlot( _this, AppDisable_AccessSlot );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessLevelChange, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );

  /* Call the user defined constructor */
  AppDisable_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Disable' */
void AppDisable__ReInit( AppDisable _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppListViewer__ReInit( &_this->ListViewer );
  ViewsBevel__ReInit( &_this->Bevel1 );
  CoreSystemEventHandler__ReInit( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  CoreSystemEventHandler__ReInit( &_this->AccessLevelChange );
}

/* Finalizer method for the class 'App::Disable' */
void AppDisable__Done( AppDisable _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisable );

  /* Finalize all embedded objects */
  AppListViewer__Done( &_this->ListViewer );
  ViewsBevel__Done( &_this->Bevel1 );
  CoreSystemEventHandler__Done( &_this->SiteChangedEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  CoreSystemEventHandler__Done( &_this->AccessLevelChange );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Disable' */
void AppDisable__Mark( AppDisable _this )
{
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->SiteChangedEventHandler );
  EwMarkObject( &_this->MeshListChangeEventHandler );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->AccessLevelChange );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::Disable.OnSetVisible()' */
void AppDisable_OnSetVisible( AppDisable _this, XBool value )
{
  CoreGroup_OnSetVisible((CoreGroup)_this, value );
  EwPostSignal( EwNewSlot( _this, AppDisable_Refresh ), ((XObject)_this ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisable_UpdateViewState( AppDisable _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  CoreGroup_InvalidateViewState((CoreGroup)&_this->ListViewer );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppDisable_Init( AppDisable _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, AppDisable_onEvent1 ), ((XObject)_this ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDisable_OnLoadItem( AppDisable _this, XObject sender )
{
  XInt32 itemNo;
  AppDisableItem item;
  XInt16 curZone;
  XInt32 i;
  XInt32 numZones;
  XBool firedisabled;
  XBool routingdisabled;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  item = EwCastObject( _this->ListViewer.VerticalList.View, AppDisableItem );

  if ( item == 0 )
    return;

  if ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( item, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)item );
    return;
  }

  CoreGroup__OnSetVisible( item, 1 );
  curZone = -1;
  i = 0;
  numZones = AppLibClass_NumZonesWithDevices( EwGetAutoObject( &AppLib, AppLibClass 
  )) + 2;
  firedisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, AppLibClass 
  ), -1 );
  routingdisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, 
  AppLibClass ), 0 );

  while ( numZones > 0 )
  {
    XInt32 numdevs = AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
      ), curZone );

    if (( numdevs > 0 ) || ( curZone < 1 ))
    {
      XSet zf;
      XBool zonedisabled;
      numZones = numZones - 1;
      zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), curZone 
      );
      zonedisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, 
      AppLibClass ), curZone );

      if ( itemNo == i )
      {
        WidgetSetToggleButton_OnSetChecked( &item->DisableZoneItem.ToggleButton, 
        zonedisabled );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem.ToggleButton, (XBool)( 
        numdevs != 0 ));
        ViewsImage_OnSetVisible( &item->DisableZoneItem.ExpandImage, (XBool)( numdevs 
        != 0 ));
        CoreSimpleTouchHandler_OnSetEnabled( &item->DisableZoneItem.SimpleTouchHandler, 
        (XBool)( numdevs != 0 ));
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem.PushButton, (XBool)( 
        !zonedisabled && ( numdevs != 0 )));
        item->DisableZoneItem.ZoneNum = curZone;
        CoreGroup__OnSetVisible( &item->DisableZoneItem, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, (XBool)( numdevs 
        != 0 ));
        CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
        CoreGroup__OnSetVisible( &item->DisableChannelItem, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)&item->DisableZoneItem );
        return;
      }
      else
      {
        i = i + 1;
      }

      if ((( zf & AppZoneFlagsDisableExpanded ) == AppZoneFlagsDisableExpanded ))
      {
        XInt32 dev = 0;

        while ( dev < numdevs )
        {
          XInt16 unitno = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, AppLibClass 
            ), curZone, dev );
          AppDevice device = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, AppLibClass 
            ), unitno );
          AppDeviceConfig config = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
            AppLibClass ), unitno );

          if ( config == 0 )
            return;

          if ( i == itemNo )
          {
            if ( curZone < 1 )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
              0 );
            }
            else
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
              1 );
            }

            CoreGroup__OnSetVisible( &item->DisableUnitItem, 1 );
            CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 );
            CoreGroup__OnSetVisible( &item->DisableChannelItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 );
            item->DisableUnitItem.UnitNum = (XUInt16)unitno;
            item->DisableUnitItem.ZoneNum = (XInt8)config->zonenum;
            item->DisableUnitItem.ZoneGroup = (XInt8)curZone;
            ViewsText_OnSetString( &item->DisableUnitItem.DescriptionText, config->location 
            );

            if ( device == 0 )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
              0 );
            }
            else
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 1 );
            }

            if ( zonedisabled )
            {
              CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
              0 );
              WidgetSetToggleButton_OnSetChecked( &item->DisableUnitItem.CheckBox, 
              1 );
            }
            else
            {
              if ( curZone > 0 )
                CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                1 );

              WidgetSetToggleButton_OnSetChecked( &item->DisableUnitItem.CheckBox, 
              (( config->flags & AppDeviceConfigFlagsDisabled ) == AppDeviceConfigFlagsDisabled 
              ));
            }

            CoreGroup_InvalidateViewState((CoreGroup)&item->DisableUnitItem );
            return;
          }
          else
          {
            i = i + 1;
          }

          if ( device != 0 )
            if ( AppDevice_IsDisableExpanded( device, curZone ))
            {
              XInt32 chan = 0;

              for ( chan = 0; chan < config->numinputs; chan = chan + 1 )
              {
                if ( curZone > 0 )
                {
                  if ( i == itemNo )
                  {
                    CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 
                    );
                    CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 
                    );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem, 1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 
                    1 );
                    item->DisableChannelItem.ChanNum = (XUInt8)chan;
                    item->DisableChannelItem.UnitNum = (XUInt16)unitno;
                    item->DisableChannelItem.ZoneNum = (XUInt8)curZone;
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.InputNightCheckBox, 
                    1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                    1 );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.InputDayCheckBox, 
                    1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                    1 );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.OutputCheckBox, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                    0 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text, 1 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text1, 1 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text2, 0 );
                    ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                    AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
                    ), config->inputs[ EwCheckIndex( chan, 32 )]->type ));
                    AppChannelImage_OnSetBitmap( &item->DisableChannelItem.ChannelImage, 
                    config->inputs[ EwCheckIndex( chan, 32 )]->type );

                    if ( zonedisabled || (( config->flags & AppDeviceConfigFlagsDisabled 
                        ) == AppDeviceConfigFlagsDisabled ))
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputNightCheckBox, 
                      1 );
                      CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                      0 );
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputDayCheckBox, 
                      1 );
                      CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                      0 );
                    }
                    else
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputDayCheckBox, 
                      (( config->inputs[ EwCheckIndex( chan, 32 )]->flags & AppOptionsDisabledDay 
                      ) == AppOptionsDisabledDay ));
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputNightCheckBox, 
                      (( config->inputs[ EwCheckIndex( chan, 32 )]->flags & AppOptionsDisabledNight 
                      ) == AppOptionsDisabledNight ));
                    }

                    CoreGroup_InvalidateViewState((CoreGroup)&item->DisableChannelItem 
                    );
                    return;
                  }
                  else
                  {
                    i = i + 1;
                  }
                }
              }

              for ( chan = 0; chan < config->numoutputs; chan = chan + 1 )
              {
                if ((( curZone > 0 ) || (( curZone == -1 ) && AppDeviceConfig_IsAlarmDevice( 
                    config, chan ))) || (( curZone == 0 ) && (( config->outputs[ 
                    EwCheckIndex( chan, 32 )]->type == AppChannelTypeOutputRouting 
                    ) || ( config->outputs[ EwCheckIndex( chan, 32 )]->type == AppChannelTypePanelRoutingOutput 
                    ))))
                {
                  if ( i == itemNo )
                  {
                    CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 
                    );
                    CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 
                    );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem, 1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 
                    1 );
                    item->DisableChannelItem.ChanNum = (XUInt8)chan;
                    item->DisableChannelItem.UnitNum = (XUInt16)unitno;
                    item->DisableChannelItem.ZoneNum = (XUInt8)curZone;
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.OutputCheckBox, 
                    1 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                    1 );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.InputDayCheckBox, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                    0 );
                    CoreGroup__OnSetVisible( &item->DisableChannelItem.InputNightCheckBox, 
                    0 );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                    0 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text, 0 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text1, 0 );
                    ViewsText_OnSetVisible( &item->DisableChannelItem.Text2, 1 );
                    ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                    AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
                    ), config->outputs[ EwCheckIndex( chan, 32 )]->type ));
                    AppChannelImage_OnSetBitmap( &item->DisableChannelItem.ChannelImage, 
                    config->outputs[ EwCheckIndex( chan, 32 )]->type );

                    if (((( zonedisabled || (( config->flags & AppDeviceConfigFlagsDisabled 
                        ) == AppDeviceConfigFlagsDisabled )) || ( firedisabled && 
                        ( config->inputs[ EwCheckIndex( chan, 32 )]->action == AppActionFire 
                        ))) || ( routingdisabled && ( config->outputs[ EwCheckIndex( 
                        chan, 32 )]->type == AppChannelTypePanelRoutingOutput ))) 
                        || ( routingdisabled && ( config->outputs[ EwCheckIndex( 
                        chan, 32 )]->type == AppChannelTypeOutputRouting )))
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.OutputCheckBox, 
                      1 );
                      CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                      0 );
                    }
                    else
                    {
                      WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.OutputCheckBox, 
                      (( config->outputs[ EwCheckIndex( chan, 32 )]->flags & AppOptionsDisabled 
                      ) == AppOptionsDisabled ));
                      CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                      1 );
                    }

                    CoreGroup_InvalidateViewState((CoreGroup)&item->DisableChannelItem 
                    );
                    return;
                  }
                  else
                  {
                    i = i + 1;
                  }
                }
              }
            }

          dev = dev + 1;
        }
      }
    }

    curZone = (XInt16)( curZone + 1 );
  }

  CoreGroup__OnSetVisible( item, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)item );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppDisable_onEvent1( AppDisable _this, XObject sender )
{
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  numZones = 2;
  {
    Command cmd;
    Command0( CMD_GET_NUM_ZONES, &cmd );
    numZones = cmd.int0;
  }

  if ( numZones > 0 )
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, numZones + 2 );
  }
  else
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, 0 );
  }

  _this->ListViewer.StartRow = 0;
  EwSignal( _this->ListViewer.onRefreshAll, ((XObject)_this ));
}

/* 'C' function for method : 'App::Disable.Recount()' */
void AppDisable_Recount( AppDisable _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( app != 0 )
  {
    EwPostSignal( EwNewSlot( &app->Disablements, AppDisablements_Refresh ), ((XObject)_this 
      ));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDisable_OnRefreshAll( AppDisable _this, XObject sender )
{
  XInt32 itemNo;
  AppDisableItem item;
  XBool firedisabled;
  XBool routingdisabled;
  XInt32 i;
  XInt32 numZones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  item = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppDisableItem 
  );
  firedisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, AppLibClass 
  ), -1 );
  routingdisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, 
  AppLibClass ), 0 );
  i = 0;
  numZones = AppLibClass_NumZonesWithDevices( EwGetAutoObject( &AppLib, AppLibClass 
  )) + 2;

  if ( numZones == 2 )
  {
    while ( item != 0 )
    {
      CoreGroup__OnSetVisible( item, 0 );
      item = EwCastObject( item->Super3.next, AppDisableItem );
    }

    return;
  }

  while ( item != 0 )
  {
    if ( itemNo < 0 )
    {
      CoreGroup__OnSetVisible( item, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)item );
    }
    else
    {
      XInt16 curZone = -1;

      while ( numZones > 0 )
      {
        XInt32 numdevs = AppLibClass_NumDevsInZone( EwGetAutoObject( &AppLib, AppLibClass 
          ), curZone );

        if (( numdevs > 0 ) || ( curZone < 1 ))
        {
          XSet zf;
          XBool zonedisabled;
          numZones = numZones - 1;
          zf = AppLibClass_GetZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), 
          curZone );
          zonedisabled = AppLibClass_GetZoneDisabledState( EwGetAutoObject( &AppLib, 
          AppLibClass ), curZone );

          if ( itemNo == i )
          {
            CoreGroup__OnSetVisible( item, 1 );
            WidgetSetToggleButton_OnSetChecked( &item->DisableZoneItem.ToggleButton, 
            zonedisabled );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem.ToggleButton, 
            (XBool)( numdevs != 0 ));
            ViewsImage_OnSetVisible( &item->DisableZoneItem.ExpandImage, (XBool)( 
            numdevs != 0 ));
            CoreSimpleTouchHandler_OnSetEnabled( &item->DisableZoneItem.SimpleTouchHandler, 
            (XBool)( numdevs != 0 ));
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem.PushButton, 
            (XBool)( !zonedisabled && ( numdevs != 0 )));
            item->DisableZoneItem.ZoneNum = curZone;

            if ((( zf & AppZoneFlagsDisableExpanded ) == AppZoneFlagsDisableExpanded 
                ))
            {
              ViewsImage_OnSetBitmap( &item->DisableZoneItem.ExpandImage, EwLoadResource( 
              &AppCollapseBitmap, ResourcesBitmap ));
            }
            else
            {
              ViewsImage_OnSetBitmap( &item->DisableZoneItem.ExpandImage, EwLoadResource( 
              &AppExpandBitmap, ResourcesBitmap ));
            }

            CoreGroup__OnSetVisible( &item->DisableZoneItem, 1 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, (XBool)( numdevs 
            != 0 ));
            CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 );
            CoreGroup__OnSetVisible( &item->DisableChannelItem, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 );
            CoreGroup_InvalidateViewState((CoreGroup)&item->DisableZoneItem );
            item = EwCastObject( item->Super3.next, AppDisableItem );

            if ( item == 0 )
              return;
          }
          else
          {
            i = i + 1;
          }

          if ((( zf & AppZoneFlagsDisableExpanded ) == AppZoneFlagsDisableExpanded 
              ))
          {
            XInt32 dev = 0;

            while ( dev < numdevs )
            {
              XInt16 unitno = AppLibClass_GetDevInZone( EwGetAutoObject( &AppLib, 
                AppLibClass ), curZone, dev );
              AppDevice device = AppLibClass_GetDevice( EwGetAutoObject( &AppLib, 
                AppLibClass ), unitno );
              AppDeviceConfig config = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
                AppLibClass ), unitno );

              if ( config != 0 )
              {
                if ( i == itemNo )
                {
                  CoreGroup__OnSetVisible( item, 1 );

                  if ( curZone < 1 )
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                    0 );
                  }
                  else
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                    1 );
                  }

                  CoreGroup__OnSetVisible( &item->DisableUnitItem, 1 );
                  CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 0 );
                  CoreGroup__OnSetVisible( &item->DisableChannelItem, 0 );
                  CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 0 
                  );
                  item->DisableUnitItem.UnitNum = (XUInt16)unitno;
                  item->DisableUnitItem.ZoneNum = (XInt8)config->zonenum;
                  item->DisableUnitItem.ZoneGroup = (XInt8)curZone;
                  ViewsText_OnSetString( &item->DisableUnitItem.DescriptionText, 
                  config->location );

                  if ( device == 0 )
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 0 
                    );
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                    0 );
                  }
                  else
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 1 
                    );
                  }

                  if ( zonedisabled )
                  {
                    CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                    0 );
                    WidgetSetToggleButton_OnSetChecked( &item->DisableUnitItem.CheckBox, 
                    1 );
                  }
                  else
                  {
                    if ( curZone > 0 )
                      CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem.CheckBox, 
                      1 );

                    WidgetSetToggleButton_OnSetChecked( &item->DisableUnitItem.CheckBox, 
                    (( config->flags & AppDeviceConfigFlagsDisabled ) == AppDeviceConfigFlagsDisabled 
                    ));
                  }

                  CoreGroup_InvalidateViewState((CoreGroup)&item->DisableUnitItem 
                  );
                  item = EwCastObject( item->Super3.next, AppDisableItem );

                  if ( item == 0 )
                    return;
                }
                else
                {
                  i = i + 1;
                }

                if ( device != 0 )
                  if ( AppDevice_IsDisableExpanded( device, curZone ))
                  {
                    XInt32 chan = 0;

                    if ( curZone > 0 )
                    {
                      for ( chan = 0; chan < config->numinputs; chan = chan + 1 )
                      {
                        if ( i == itemNo )
                        {
                          CoreGroup__OnSetVisible( item, 1 );
                          CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 
                          0 );
                          CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 
                          0 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem, 1 
                          );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 
                          1 );
                          item->DisableChannelItem.ChanNum = (XUInt8)chan;
                          item->DisableChannelItem.UnitNum = (XUInt16)unitno;
                          item->DisableChannelItem.ZoneNum = (XUInt8)curZone;
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.InputNightCheckBox, 
                          1 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                          1 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.InputDayCheckBox, 
                          1 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                          1 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.OutputCheckBox, 
                          0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                          0 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text, 
                          1 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text1, 
                          1 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text2, 
                          0 );
                          ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                          AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
                          ), config->inputs[ EwCheckIndex( chan, 32 )]->type ));
                          AppChannelImage_OnSetBitmap( &item->DisableChannelItem.ChannelImage, 
                          config->inputs[ EwCheckIndex( chan, 32 )]->type );

                          if ( zonedisabled || (( config->flags & AppDeviceConfigFlagsDisabled 
                              ) == AppDeviceConfigFlagsDisabled ))
                          {
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputNightCheckBox, 
                            1 );
                            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                            0 );
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputDayCheckBox, 
                            1 );
                            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                            0 );
                          }
                          else
                          {
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputDayCheckBox, 
                            (( config->inputs[ EwCheckIndex( chan, 32 )]->flags 
                            & AppOptionsDisabledDay ) == AppOptionsDisabledDay ));
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.InputNightCheckBox, 
                            (( config->inputs[ EwCheckIndex( chan, 32 )]->flags 
                            & AppOptionsDisabledNight ) == AppOptionsDisabledNight 
                            ));
                          }

                          CoreGroup_InvalidateViewState((CoreGroup)&item->DisableChannelItem 
                          );
                          item = EwCastObject( item->Super3.next, AppDisableItem 
                          );

                          if ( item == 0 )
                            return;
                        }
                        else
                        {
                          i = i + 1;
                        }
                      }
                    }

                    for ( chan = 0; chan < config->numoutputs; chan = chan + 1 )
                    {
                      if ((( curZone > 0 ) || (( curZone == -1 ) && AppDeviceConfig_IsAlarmDevice( 
                          config, chan ))) || (( curZone == 0 ) && (( config->outputs[ 
                          EwCheckIndex( chan, 32 )]->type == AppChannelTypeOutputRouting 
                          ) || ( config->outputs[ EwCheckIndex( chan, 32 )]->type 
                          == AppChannelTypePanelRoutingOutput ))))
                      {
                        if ( i == itemNo )
                        {
                          CoreGroup__OnSetVisible( item, 1 );
                          CoreGroup__OnSetVisible( &item->DisableUnitItem, 0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableUnitItem, 
                          0 );
                          CoreGroup__OnSetVisible( &item->DisableZoneItem, 0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableZoneItem, 
                          0 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem, 1 
                          );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem, 
                          1 );
                          item->DisableChannelItem.ChanNum = (XUInt8)chan;
                          item->DisableChannelItem.UnitNum = (XUInt16)unitno;
                          item->DisableChannelItem.ZoneNum = (XUInt8)curZone;
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.OutputCheckBox, 
                          1 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                          1 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.InputDayCheckBox, 
                          0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputDayCheckBox, 
                          0 );
                          CoreGroup__OnSetVisible( &item->DisableChannelItem.InputNightCheckBox, 
                          0 );
                          CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.InputNightCheckBox, 
                          0 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text, 
                          0 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text1, 
                          0 );
                          ViewsText_OnSetVisible( &item->DisableChannelItem.Text2, 
                          1 );
                          ViewsText_OnSetString( &item->DisableChannelItem.ChannelName, 
                          AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
                          ), config->outputs[ EwCheckIndex( chan, 32 )]->type ));
                          AppChannelImage_OnSetBitmap( &item->DisableChannelItem.ChannelImage, 
                          config->outputs[ EwCheckIndex( chan, 32 )]->type );

                          if (((( zonedisabled || (( config->flags & AppDeviceConfigFlagsDisabled 
                              ) == AppDeviceConfigFlagsDisabled )) || ( firedisabled 
                              && ( config->inputs[ EwCheckIndex( chan, 32 )]->action 
                              == AppActionFire ))) || ( routingdisabled && ( config->outputs[ 
                              EwCheckIndex( chan, 32 )]->type == AppChannelTypePanelRoutingOutput 
                              ))) || ( routingdisabled && ( config->outputs[ EwCheckIndex( 
                              chan, 32 )]->type == AppChannelTypeOutputRouting )))
                          {
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.OutputCheckBox, 
                            1 );
                            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                            0 );
                          }
                          else
                          {
                            WidgetSetToggleButton_OnSetChecked( &item->DisableChannelItem.OutputCheckBox, 
                            (( config->outputs[ EwCheckIndex( chan, 32 )]->flags 
                            & AppOptionsDisabled ) == AppOptionsDisabled ));
                            CoreGroup_OnSetEnabled((CoreGroup)&item->DisableChannelItem.OutputCheckBox, 
                            1 );
                          }

                          CoreGroup_InvalidateViewState((CoreGroup)&item->DisableChannelItem 
                          );
                          item = EwCastObject( item->Super3.next, AppDisableItem 
                          );

                          if ( item == 0 )
                            return;
                        }
                        else
                        {
                          i = i + 1;
                        }
                      }
                    }
                  }
              }

              dev = dev + 1;
            }
          }
        }

        curZone = (XInt16)( curZone + 1 );
      }

      while ( item != 0 )
      {
        CoreGroup__OnSetVisible( item, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)item );
        item = EwCastObject( item->Super3.next, AppDisableItem );
      }

      return;
    }

    item = EwCastObject( item->Super3.next, AppDisableItem );
    itemNo = itemNo + 1;
  }
}

/* 'C' function for method : 'App::Disable.ToggelBuzzer()' */
void AppDisable_ToggelBuzzer( AppDisable _this, XObject sender )
{
  XBool dis;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  dis = _this->ToggleButton.Checked;
  {
    Command cmd;
    cmd.int0 = dis;
    Command0( CMD_SET_BUZZER_STATE, &cmd );
  }
}

/* 'C' function for method : 'App::Disable.AccessSlot()' */
void AppDisable_AccessSlot( AppDisable _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->ToggleButton, (XBool)( app->LevelAccess.AccessLevel 
    >= 4 ));
  }
}

/* 'C' function for method : 'App::Disable.Refresh()' */
void AppDisable_Refresh( AppDisable _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    XInt32 n = 0;
    {
      Command cmd;

      Command0( CMD_GET_NUM_ENABLE_DISABLE, &cmd );

      n = cmd.int0;
    }
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, n );
  }
}

/* Variants derived from the class : 'App::Disable' */
EW_DEFINE_CLASS_VARIANTS( AppDisable )
EW_END_OF_CLASS_VARIANTS( AppDisable )

/* Virtual Method Table (VMT) for the class : 'App::Disable' */
EW_DEFINE_CLASS( AppDisable, CoreGroup, "App::Disable" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  AppDisable_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppDisable_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisable )

/* Initializer for the class 'App::DisableChannelItem' */
void AppDisableChannelItem__Init( AppDisableChannelItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->ChannelName, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->InputNightCheckBox, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->OutputCheckBox, &_this->_XObject, 0 );
  AppChannelImage__Init( &_this->ChannelImage, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->InputDayCheckBox, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisableChannelItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0343 );
  CoreRectView__OnSetBounds( &_this->ChannelName, _Const039A );
  ViewsText_OnSetAlignment( &_this->ChannelName, ViewsTextAlignmentAlignHorzRight 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ChannelName, 0 );
  ViewsText_OnSetColor( &_this->ChannelName, _Const000E );
  CoreRectView__OnSetBounds( &_this->InputNightCheckBox, _Const039B );
  WidgetSetToggleButton_OnSetLabel( &_this->InputNightCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->OutputCheckBox, _Const039B );
  WidgetSetToggleButton_OnSetLabel( &_this->OutputCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->ChannelImage, _Const039C );
  CoreRectView__OnSetBounds( &_this->InputDayCheckBox, _Const039D );
  WidgetSetToggleButton_OnSetLabel( &_this->InputDayCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const039E );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const010C ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text1, _Const039F );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const010E ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text2, _Const03A0 );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const03A1 ));
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelName ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputNightCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->OutputCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->InputDayCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  ViewsText_OnSetFont( &_this->ChannelName, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->InputNightCheckBox.OnSwitchOn = EwNewSlot( _this, AppDisableChannelItem_ToggleInputNightChannel 
  );
  _this->InputNightCheckBox.OnSwitchOff = EwNewSlot( _this, AppDisableChannelItem_ToggleInputNightChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->InputNightCheckBox, EwGetAutoObject( 
  &AppDisableSmallCheckBox, WidgetSetToggleButtonConfig ));
  _this->OutputCheckBox.OnSwitchOn = EwNewSlot( _this, AppDisableChannelItem_ToggleOutputChannel 
  );
  _this->OutputCheckBox.OnSwitchOff = EwNewSlot( _this, AppDisableChannelItem_ToggleOutputChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->OutputCheckBox, EwGetAutoObject( 
  &AppDisableSmallCheckBox, WidgetSetToggleButtonConfig ));
  _this->InputDayCheckBox.OnSwitchOn = EwNewSlot( _this, AppDisableChannelItem_ToggleInputDayChannel 
  );
  _this->InputDayCheckBox.OnSwitchOff = EwNewSlot( _this, AppDisableChannelItem_ToggleInputDayChannel 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->InputDayCheckBox, EwGetAutoObject( 
  &AppDisableSmallCheckBox, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppVerdanaProSemiBold16, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &AppVerdanaProSemiBold16, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::DisableChannelItem' */
void AppDisableChannelItem__ReInit( AppDisableChannelItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->ChannelName );
  WidgetSetToggleButton__ReInit( &_this->InputNightCheckBox );
  WidgetSetToggleButton__ReInit( &_this->OutputCheckBox );
  AppChannelImage__ReInit( &_this->ChannelImage );
  WidgetSetToggleButton__ReInit( &_this->InputDayCheckBox );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'App::DisableChannelItem' */
void AppDisableChannelItem__Done( AppDisableChannelItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisableChannelItem );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->ChannelName );
  WidgetSetToggleButton__Done( &_this->InputNightCheckBox );
  WidgetSetToggleButton__Done( &_this->OutputCheckBox );
  AppChannelImage__Done( &_this->ChannelImage );
  WidgetSetToggleButton__Done( &_this->InputDayCheckBox );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisableChannelItem' */
void AppDisableChannelItem__Mark( AppDisableChannelItem _this )
{
  EwMarkObject( &_this->ChannelName );
  EwMarkObject( &_this->InputNightCheckBox );
  EwMarkObject( &_this->OutputCheckBox );
  EwMarkObject( &_this->ChannelImage );
  EwMarkObject( &_this->InputDayCheckBox );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDisableChannelItem_UpdateViewState( AppDisableChannelItem _this, XSet aState )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aState );
}

/* 'C' function for method : 'App::DisableChannelItem.ToggleInputNightChannel()' */
void AppDisableChannelItem_ToggleInputNightChannel( AppDisableChannelItem _this, 
  XObject sender )
{
  AppDeviceConfig d;
  AppDisable disablepage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( _this->InputNightCheckBox.Checked )
  {
    d->inputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->inputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags | AppOptionsDisabledNight;
  }
  else
  {
    d->inputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->inputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags & ~AppOptionsDisabledNight;
  }

  AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
  1, d );
  disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disablepage != 0 )
  {
    EwSignal( EwNewSlot( disablepage, AppDisable_Recount ), ((XObject)_this ));
    EwSignal( disablepage->ListViewer.onRefreshAll, ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::DisableChannelItem.ToggleOutputChannel()' */
void AppDisableChannelItem_ToggleOutputChannel( AppDisableChannelItem _this, XObject 
  sender )
{
  AppDeviceConfig d;
  AppDisable disablepage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( _this->OutputCheckBox.Checked )
  {
    d->outputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->outputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags | AppOptionsDisabled;
  }
  else
  {
    d->outputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->outputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags & ~AppOptionsDisabled;
  }

  AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
  1, d );
  disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disablepage != 0 )
  {
    EwSignal( disablepage->ListViewer.onRefreshAll, ((XObject)_this ));
    EwSignal( EwNewSlot( disablepage, AppDisable_Recount ), ((XObject)_this ));
  }
}

/* 'C' function for method : 'App::DisableChannelItem.ToggleInputDayChannel()' */
void AppDisableChannelItem_ToggleInputDayChannel( AppDisableChannelItem _this, XObject 
  sender )
{
  AppDeviceConfig d;
  AppDisable disablepage;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  d = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum 
  );

  if ( _this->InputDayCheckBox.Checked )
  {
    d->inputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->inputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags | AppOptionsDisabledDay;
  }
  else
  {
    d->inputs[ EwCheckIndex( _this->ChanNum, 32 )]->flags = d->inputs[ EwCheckIndex( 
    _this->ChanNum, 32 )]->flags & ~AppOptionsDisabledDay;
  }

  AppLibClass_SetConfig( EwGetAutoObject( &AppLib, AppLibClass ), (XInt16)_this->UnitNum, 
  1, d );
  disablepage = EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppDisable );

  if ( disablepage != 0 )
  {
    EwSignal( disablepage->ListViewer.onRefreshAll, ((XObject)_this ));
    EwSignal( EwNewSlot( disablepage, AppDisable_Recount ), ((XObject)_this ));
  }
}

/* Variants derived from the class : 'App::DisableChannelItem' */
EW_DEFINE_CLASS_VARIANTS( AppDisableChannelItem )
EW_END_OF_CLASS_VARIANTS( AppDisableChannelItem )

/* Virtual Method Table (VMT) for the class : 'App::DisableChannelItem' */
EW_DEFINE_CLASS( AppDisableChannelItem, CoreGroup, "App::DisableChannelItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppDisableChannelItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisableChannelItem )

/* Bitmap resource : 'App::SiteNetBitmap' */
EW_DEFINE_BITMAP_RES( AppSiteNetBitmap )
  EW_BITMAP_FRAMES( AppSiteNetBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 180, 60, 0 )
    EW_BITMAP_FRAME( 31, 37, 7, 22, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSiteNetBitmap, Default )             /* ratio 12.08 % */
    0x1C080100, 0xC1A0B048, 0x6E110883, 0x4481C11B, 0x461C12B8, 0x71388C3D, 0x190CB954,
    0xC8DC2414, 0x813FE371, 0x848A2A02, 0x48E49128, 0xA253268A, 0xE592595C, 0x5F3096C9,
    0xADF924CA, 0x1D4106C4, 0x34B4D9C1, 0x40CDA5D3, 0xE804011F, 0xD1A8B448, 0x99C106A3,
    0x25E840D8, 0x981A1238, 0x6246FC10, 0x319E8E03, 0xC9F56655, 0xAC57AB75, 0x348AB560,
    0xD20AC1A1, 0x2DBF09B3, 0xEBB6138D, 0xE3684444, 0xD1071416, 0x34AFDB47, 0x70C07C55,
    0x0D8A5C74, 0xD06E1E25, 0x0704CE13, 0x4D891356, 0x4393A704, 0xFE1CC2B8, 0x986C9641,
    0x98C9E472, 0xACBE672B, 0x7406F3B9, 0x4072958B, 0x6095F826, 0x7448DD40, 0xA8741228,
    0xA908D7DC, 0xF96CDD5A, 0x22113B9F, 0xAA46C01E, 0xDA00E04A, 0x1E733BC0, 0x71383B5E,
    0x2785C5E3, 0xC373AE27, 0xD7138EB2, 0x74ADA721, 0xBBD6A783, 0xEC86C3B3, 0x3C06F82C,
    0x99622153, 0xF1FC9CAE, 0xABCFE8F2, 0xBA9ECE5F, 0xCFDA4361, 0xBE658F36, 0xF16B52FD,
    0xC1238A91, 0xE47D4C21, 0x81A0A0E4, 0xA6B50809, 0x888B06D6, 0xE97FCFC6, 0x831EB7D9,
    0x1D58360F, 0x8554E337, 0xC9717E43, 0xB7835576, 0x472186E5, 0x5BF001BD, 0x683A1083,
    0x35C88962, 0xD1471CF7, 0x389958A1, 0x94127D4B, 0x78D61F00, 0x81DE7710, 0x1C4D5037,
    0x8FE2478C, 0x22790611, 0xF7324390, 0xD9398D9E, 0xDE911F44, 0x46E487E1, 0x22E7F5FB,
    0x880E0171, 0x4C746350, 0x5A96E459, 0x3CD108A2, 0xC2906135, 0x88691B93, 0x91BA875C,
    0xAA385089, 0x0766C08D, 0x66F9B66E, 0x69CE709C, 0xD6789CA7, 0x7C9D2799, 0x9FE7A9DE,
    0x41C5D27C, 0xB4D9D423, 0x2A2D46E2, 0xCD219A27, 0x61A29329, 0x66A8CCA1, 0xF7A2387E,
    0x763D785D, 0x42A6E4C9, 0xA2D91A6A, 0x9F341E93, 0x19381BA6, 0xFA51412A, 0x557B29C7,
    0x8CD03812, 0x29E39982, 0x8ACEAB97, 0x581B5D1C, 0x66416A72, 0x9A5B8872, 0x693B06BB,
    0x51EC1A4D, 0x41D073A8, 0x27A29D24, 0x3745B070, 0x41B616BF, 0x2441D332, 0x22C2A48A,
    0x9779E955, 0xAD9E28EE, 0x29DB86B5, 0x3B66A091, 0x9594B8AA, 0xA9002D9A, 0x412ADACE,
    0x81E0A0E0, 0x6B8EE00C, 0x1EF7AD2F, 0xBDBACD2B, 0xBAE687AE, 0xAC48D700, 0x9A1A8AB1,
    0x32CB072C, 0x0416ECD7, 0x641B9B41, 0x124891A4, 0x69AF01B6, 0xEA967758, 0x1B53D028,
    0x3C2D214C, 0x14BC871F, 0xBC8B23C8, 0x9B27C901, 0x2ACAF28C, 0xCBF25CB7, 0x65A3E01B,
    0x9B9EC2B9, 0x06A667AF, 0x93BA2EDB, 0x60903BBD, 0x586CCC5E, 0xD29DD53F, 0xB9CD1F18,
    0x36D2F491, 0xD334DD29, 0x751D381B, 0x21E582D2, 0xBED2265A, 0xEE4DB333, 0x99E16BF0,
    0x762C56BF, 0x7B1F0376, 0x2A894268, 0x0E422CEC, 0x31D9003F, 0x4A506E8F, 0xFD8C0350,
    0xDA39C5F3, 0x1C8C21FD, 0xCD2E8534, 0x6F8CDAC1, 0xBAEF39BA, 0x0A54CDF3, 0x7C40AAE8,
    0x75B5B1AF, 0x8DE0037A, 0xEACC2F4D, 0x7ABE6CF5, 0x45E6F918, 0xB2305D95, 0xDD4B2A2C,
    0x73AD1DC2, 0x400D04C2, 0x1B790C66, 0xD8B74298, 0x2DD726DB, 0xEDF1BBE7, 0x00FFE237,
    0x2EE0ABBE, 0xE1ED9BAA, 0x38ACF783, 0xCE3986AA, 0x44804DB3, 0x000FCFFE, 0xB6796010,
    0x2FF7B2FD, 0x56C7D4ED, 0x1F66B142, 0xE06D709C, 0xE9946E90, 0x0C544FA8, 0x9EBCA7EB,
    0xCD99EC6D, 0xB65C7D5E, 0x7C01CD0B, 0x6A492AE6, 0xAF02A7E1, 0x178CCFA5, 0xD10735BF,
    0x07427384, 0x369C881A, 0x0A818048, 0x16042374, 0x1301C0B8, 0x220540B8, 0x7C0C81D0,
    0xE436E5E0, 0xEFADB0AF, 0x1CF10282, 0x3A160C73, 0x6D6E8D84, 0xE9C6B968, 0xC5110752,
    0xA8570834, 0x08F305F8, 0x79F42BB0, 0x81056346, 0x203C0656, 0xF0D43B1A, 0x61B18686,
    0x01C8710E, 0x8790F61D, 0x10220C3E, 0x89C39887, 0xF07DC2F4, 0x78FC99AB, 0xD9759F76,
    0x03F85D0F, 0xC4A45500, 0x43C56E44, 0x89B4575A, 0x0D230437, 0x1827562E, 0x2D00E16A,
    0xE68B3320, 0x8B8CC254, 0xD8A0A202, 0x540DBFE0, 0xE8231C21, 0xB6280AC0, 0x66D1E8B9,
    0x87FAC27A, 0x8060540A, 0x04407887, 0x0964047E, 0x42C818FE, 0x8490520E, 0x1321A43C,
    0x3A4448C9, 0x3C8F9172, 0xF5087364, 0x49ADB3B9, 0xE102CC74, 0x82A1D26B, 0x39A0300A,
    0x0716A8C3, 0xE6C2A154, 0x9C85C9A9, 0x4E54DF51, 0xD42001B0, 0xDC55782B, 0xC54EEE92,
    0x4EF970BB, 0x5DC44F58, 0x81D21F14, 0x97F2BC1E, 0x3A4CDCB1, 0x3A07F344, 0x9A6C104E,
    0x2838D613, 0xCDDC4C07, 0xFBDA454A, 0x43E2C320, 0x727E4E8D, 0xCF30C229, 0xCA67962A,
    0x5D32A11A, 0x2B655C30, 0x674B099B, 0xF148EB92, 0xCC92C0DB, 0xF19D4B79, 0x8CE65547,
    0x6561144C, 0xF3907118, 0x0D14B19E, 0x4766C428, 0x5831E0E5, 0xE540DCCB, 0x78D04982,
    0x88838EE6, 0xA6DAA4C2, 0xB873A1F9, 0xF80B02E0, 0xC15879A2, 0xE7C6164D, 0xE70AD29B,
    0xCAE9588E, 0xA3F39682, 0xA86599F5, 0x76B3796A, 0xEE9DEE1A, 0x4C8DDE1A, 0x882B81D0,
    0x34F81FA6, 0x47FF3DE8, 0x0E666383, 0x08633A58, 0x01B46009, 0xA7D4F061, 0x50A9FCD8,
    0x9ED44A83, 0x45A8D50E, 0x97522A05, 0xFEA6D4AA, 0xC8E031B4, 0x37B7075E, 0x1269EE99,
    0xE878D049, 0x8BF32002, 0x1982B9B8, 0x01419833, 0xA5D18376, 0x1C833468, 0x3D48298D,
    0x9149D22A, 0xAD265694, 0x19634A1F, 0xA3788445, 0x8C684759, 0x57CAD436, 0x2704D926,
    0x4DDAFBD0, 0x0D418831, 0x68A10F72, 0xBCF72853, 0xCC72AA17, 0xE98D2320, 0xF26C84AA,
    0x358AB00A, 0xE555652E, 0xD0272640, 0xB3C2E8EA, 0x67CA5DA0, 0x0DDA1B45, 0xA5B4D68C,
    0x536AAD3D, 0x0AD15ACB, 0x437F8B66, 0x39D512A7, 0xD5CE273F, 0x8A3575A0, 0x81F04A39,
    0xA5A61414, 0x24C0DB9E, 0xC809B304, 0xA8B5A2B0, 0x1A364885, 0xBEE55CB3, 0x852FA5F6,
    0xB9803F8C, 0xB4D85701, 0x2C24C982, 0x555B0CF5, 0x83D25EC4, 0xB0686499, 0x8991922E,
    0x364522F8, 0xC23FC581, 0x64A3563A, 0xE5DAACF6, 0xFB62FB48, 0x95BD75BE, 0x550D7141,
    0xDB97072E, 0x03C8B2F8, 0x5DC0881E, 0x89827035, 0x1B6842AC, 0xA575C608, 0x72FF4167,
    0x8195BB8E, 0x29A554E6, 0x80707136, 0x08980903, 0xCEABD02F, 0x3A11F26A, 0x8398CB78,
    0xDC5F328D, 0xF74D55B5, 0x277E54DD, 0xF512DFB5, 0xA1368A57, 0x31E27544, 0x852F1AE3,
    0x719E37C6, 0x3620AB1B, 0xC114D06E, 0xE62C0E0A, 0x11D38BB0, 0x9FC20DDB, 0x148DEEF2,
    0x8EC6555B, 0x1618C2CD, 0x33CC2ECD, 0x787E3D0B, 0x18C01CA5, 0x8DF860B7, 0x01007C0F,
    0x22B30C90, 0x3148DCC7, 0x91CC9997, 0x3722733C, 0xC2240940, 0x107E30CB, 0x2CE19C4D,
    0xF9D33AE7, 0x73981CCE, 0x913CE59E, 0x1D4A786B, 0x9E33DE76, 0x40E84CF5, 0xE5CE1A17,
    0x28064130, 0xBD55E2D0, 0xD8A931B8, 0x5760241F, 0xA1800E82, 0xC5E9104B, 0x60D8EF82,
    0x7AF91F23, 0xE820DB04, 0x85DE0A12, 0x08CBD76E, 0xC2722CF0, 0x1B0F0B48, 0x9DEF2080,
    0x903408CA, 0x94CABE83, 0x800DB2AD, 0x6B7AD7AD, 0xB7A4D521, 0x8BD7BE8D, 0x6789240F,
    0xD21A852E, 0x4C52DA32, 0x2F661D51, 0x7ED0D9BB, 0x075BB4B6, 0x4340C869, 0xC4EB8F41,
    0x69D9FDA6, 0xD413F34F, 0x55352552, 0xEA64EC23, 0x3C013941, 0x38A3C5CD, 0x92018B50,
    0xDEB100E0, 0xED6BACD1, 0x59BB5DD1, 0xB7AEBA20, 0xA5BD7BBE, 0xD820A75F, 0x6FF17A5B,
    0x7DEF60E5, 0x700375AF, 0xAC115378, 0x3B8605BA, 0x770F617C, 0x0E1BC456, 0xE61B8871,
    0xC32E1C0F, 0x715E37C4, 0xE29C7789, 0x4056771E, 0x90F1C06F, 0x25E4FC83, 0x53C7F947,
    0x4D85F2CE, 0x4EE11544, 0x7B17A96C, 0xBAA2C2D5, 0xE510B839, 0x2B226D86, 0xD69BCB11,
    0xBDF7E705, 0x5E741285, 0xFE369D1B, 0x5E7D7806, 0xB8A58E3C, 0x35D33440, 0xDDD7D178,
    0x00A4730F, 0xA8901F03, 0xD06EB7D4, 0x13806C9A, 0x41FAE753, 0x71F32D47, 0xF1DCAA7F,
    0x9A01F775, 0x71520B73, 0x1761DE79, 0x9668AAFA, 0xFDDBB96F, 0xFA4A44E8, 0x62FA3F6D,
    0xEC44494C, 0x06EC3F71, 0x04E6F12A, 0x5EE8BE07, 0x17E03B07, 0x2E4B6A2F, 0xAE4DE679,
    0xDED591B9, 0xEEF45B18, 0x3C6740ED, 0xF74A0DDE, 0x3EBE6BC3, 0x6E22A77A, 0x5711BA55,
    0xF331A5BF, 0x97E73CF0, 0xB8B78F62, 0x8910551A, 0x5F66E342, 0x6073DA3C, 0x7DC7B60D,
    0xFB7F77ED, 0xF79EFBDC, 0xF03DEFBA, 0xE2FC2F7F, 0xE30D7F07, 0x88106560, 0x3BE67C7F,
    0x37D0F87F, 0x5FA5F3FE, 0xC5906F3C, 0xCD111C2C, 0xF7DF7218, 0xDDE093C9, 0xF4C33982,
    0x79AF10D7, 0x182F454D, 0xA3FABF18, 0xAFF67CDF, 0x3FF0FA9F, 0x42AC857E, 0xBFBFF8BC,
    0xBF77F6FD, 0x7FCFF3FE, 0x1C3F1FFC, 0x6160102D, 0xE7FB6FF2, 0x65D38D7F, 0x7101001F,
    0x700D3E01, 0x75E04920, 0x961CD07A, 0xE18D6900, 0x0C81A20B, 0x86819817, 0xA81B8181,
    0x81E1A381, 0x1A1A381C, 0xB1366D56, 0x26C34709, 0x0804D01A, 0xD6DE80A8, 0x82F82E82,
    0x32831830, 0x58348338, 0x83783683, 0x3A839838, 0xD83C83B8, 0x83F83E83, 0x42841840,
    0x58448438, 0x84784684, 0x4A849848, 0xD84C84B8, 0x84F84E84, 0x52851850, 0x58548538,
    0x85785685, 0x5A859858, 0xD85C85B8, 0x85F85E85, 0x62861860, 0xD2A78638, 0x0197E51A,
    0xD8013255, 0xD86C8641, 0x86F86E86, 0x285153D4, 0xB18D0688, 0x33214B3A, 0x380F7296,
    0x40881102, 0x01D6B30E, 0x1B3DD1F9, 0x52130540, 0x40D6C788, 0x56889870, 0x70214078,
    0x3FD18D01, 0x8A066136, 0x03FE8578, 0x2D41D540, 0xFE1864F9, 0xB01914A0, 0x5961BB03,
    0xDB1D5005, 0xE13F1C00, 0x0230E086, 0x6C032019, 0xF01A10F7, 0x84E89305, 0x55066182,
    0x18AF7175, 0x1A251585, 0x1C305370, 0xD1A70EC0, 0x0DE04B1C, 0x7304710C, 0x32075C68,
    0x11088109, 0x4B28A46C, 0x88080DC1, 0x47086E00, 0x10198472, 0xC8B50B61, 0x0AD19084,
    0x303D733D, 0x87561040, 0x08C2D275, 0xD58DB2C4, 0x41A283E8, 0x0E91C606, 0x9C362273,
    0x02B149E4, 0x0461AA1C, 0x220E785B, 0x80160170, 0x05431C25, 0xA11AD104, 0x36E77AC1,
    0x8FA8428E, 0xCD0EC110, 0x64A50ED1, 0x7E110251, 0xFE43D8B3, 0x01A283D8, 0x37C1B40D,
    0x2739106A, 0x11101E58, 0x17E85D22, 0x6C750180, 0xD01B4977, 0x39319309, 0x0B03E01C,
    0x56038409, 0x24A61160, 0xA8136257, 0xC5341980, 0x0154048D, 0x188CD70A, 0x100E6EE4,
    0x4C405250, 0x102092D2, 0xB21A06D1, 0x65E26586, 0x48461010, 0xB26C9100, 0x93908301,
    0xBF07D1A2, 0x050E04F5, 0x94D14751, 0x5280E00B, 0x504914B9, 0x11D49E4D, 0x5368B689,
    0xC04901B9, 0x1B104837, 0xC25D1940, 0xC01D7511, 0x0537F303, 0x5A2CD0E2, 0x905123C0,
    0x23601495, 0x97322869, 0x50F21101, 0x14640189, 0xDD12007F, 0xD0361100, 0x01B8C918,
    0xEF67C08A, 0x603F3CB8, 0x2333D590, 0x2D01C969, 0x32F20E10, 0x6F88F903, 0xA20E21A2,
    0x75EB0F51, 0x69533F59, 0x3922F697, 0xF83F9234, 0x9090565B, 0x8C78F979, 0xF0F714B1,
    0x8AD9977A, 0xEB5F03E9, 0x85668FA2, 0x0C825345, 0x19617988, 0xC73B1106, 0x6980FB01,
    0xC980E8BB, 0x704401A2, 0x9320F92C, 0x1A02722C, 0xB8A40680, 0x1080DE01, 0xEB04A501,
    0xB2117516, 0x56687A01, 0x9001C8C7, 0xE3271EE0, 0x8A010993, 0x7345D1CD, 0x40DA1107,
    0x03101A15, 0x289593D4, 0x01CD5D20, 0x01B9290B, 0xA861192B, 0xD1040328, 0x02E01B74,
    0xA401B8D2, 0x68E499C0, 0x99A94A18, 0x0405001C, 0x05D180C1, 0x1080C611, 0x9309837C,
    0xF7CA0DF1, 0x0FF22298, 0xB437563C, 0x3A021864, 0x65A6A559, 0x9519A457, 0x99ED07B6,
    0x0EA24056, 0x8D18955C, 0xB8CA20B1, 0x9560EF01, 0x1C92900C, 0x91EE07C0, 0x5C414765,
    0x570A79D4, 0xC8A49F62, 0x1CD0F201, 0x8718D0A8, 0x34631900, 0x2CD74834, 0x27219062,
    0x50200170, 0x8CA7AD1D, 0x2B0FE01C, 0x87751468, 0x4C34558E, 0xBB0192F2, 0xD9951AD2,
    0x8661025E, 0xEB18D901, 0x518D4740, 0x01B8B307, 0x6010405D, 0x68A10005, 0x6D60FA13,
    0x9090C9F4, 0x59EB5552, 0x9F10357F, 0xD82A26DA, 0xEA437504, 0x05201B2D, 0xE50F4113,
    0xC5BF2368, 0x28575003, 0xA608701C, 0xC42BA4F9, 0x76A05037, 0x4D16B6B0, 0xA1034C62,
    0x04301A14, 0x0089D28F, 0x42C75E9A, 0x14B5EE78, 0x1090F0D5, 0xB9E70741, 0x6703DC4E,
    0x7901B2C9, 0x10DAA780, 0x0A11A217, 0x620257A0, 0x8A13A272, 0x2AD04D82, 0xA26F30DF,
    0x25E80B21, 0x0266289D, 0xB102101E, 0xCA2BA9F2, 0x7500BB01, 0xB0405403, 0x904D1506,
    0x10544990, 0x130DF182, 0x1A840F31, 0x1D5832A6, 0x69195653, 0x101C7B08, 0x136A0305,
    0x1C31607A, 0xC2CA4C30, 0x6E4A9B91, 0x12236883, 0x10D51DE8, 0x1DB2349A, 0x9F9D46CB,
    0xA58F9580, 0x1CA6D800, 0x392020DF, 0x401BA2B0, 0x6968A40E, 0x13A2011D, 0x3AE89B71,
    0xA064AD02, 0xE71366BA, 0xF1867480, 0x0DC11C95, 0x290168F3, 0x4139A492, 0x02A01E02,
    0x9FA1C190, 0x01D48CB2, 0x23515215, 0xD31368B7, 0x0A53A780, 0x6E723612, 0xCC1366D8,
    0xD0979E70, 0x03A01A64, 0x2B4716B0, 0x201C8D20, 0x0C491C0A, 0xC6940A6C, 0x0310837A,
    0xA8151575, 0x9806901A, 0xA0681501, 0x1CD5ECA5, 0x228970FA, 0xC195B1DA, 0xADA03759,
    0x9F739136, 0xA2940B73, 0x9C38EE45, 0x2598D1D0, 0xA0E20FDA, 0x01201C02, 0xAB01BACC,
    0xD02868A6, 0x03F25111, 0x6D0FBA2D, 0x81C8B513, 0x96F68A0D, 0x180CC11C, 0xD1C800A1,
    0x3687A40D, 0x49A35186, 0x6A5F01B6, 0x1C4AD713, 0x64B359DE, 0x320D67C2, 0xAAF01C7F,
    0xD6359AED, 0xDACFA9A3, 0x8F2104AC, 0x449F18F4, 0x11102A2B, 0x3FF19A69, 0x34B2B977,
    0xB4588A28, 0x25901CA8, 0x5701A19D, 0xF4239FB0, 0x0BC23C52, 0xE5193A95, 0xA4330220,
    0x358186AD, 0xCD0FCA40, 0xD9D60651, 0x2020D611, 0x30190013, 0x698D1E55, 0x06A186B5,
    0xC80DC9D4, 0xA31E1559, 0x42BAC48B, 0x1A16A11D, 0x52967040, 0xA70B7B0D, 0x479C6914,
    0x3433B9B1, 0x497B881D, 0x11A774BD, 0x7AA6B9F6, 0x26A08D2C, 0x0305B989, 0x02647E6B,
    0xAF30CF19, 0xFA31B9C0, 0x923C1953, 0x3B9AD205, 0xB50C914B, 0x3ACF0A0A, 0xB8BB8AAA,
    0x4B8A314B, 0x0B8E0EF1, 0xB9219CB9, 0xE917B7E7, 0x36585D63, 0x8881930B, 0xB114A235,
    0x0AFB1CDA, 0x8E10C724, 0x451AA1D0, 0xE0F81DE0, 0x0077DF0F, 0x2D231139, 0x51B10A3A,
    0xA2D08A15, 0x1CA8F69A, 0x1A406070, 0xA33A220A, 0x270A5A1D, 0xD04E3FFA, 0x2050ECA2,
    0x261826F8, 0x70FC1C34, 0x01F0270E, 0x1BA04020, 0xA1DE0410, 0xBD1264C1, 0x788DA6AB,
    0xB52F0C1B, 0x997A218E, 0x278B201B, 0xF06D01C9, 0x107B3ABD, 0x01193A01, 0x8BE702F5,
    0xBEA01BBE, 0x99BEDA1E, 0xE103BF01, 0xA7768BB5, 0xF6AD28D3, 0xFBF8195B, 0x89642224,
    0xF4110C0A, 0x401C41BA, 0x01E98C0F, 0x79A6A98E, 0x70C81C66, 0x1DEA90A2, 0xE75DF070,
    0x001C9145, 0xB465EE17, 0xD69101CA, 0x644701C3, 0x624C6929, 0x46494136, 0xB9E75D52,
    0x12474804, 0xC7C60B21, 0xD6280CA2, 0x400BC634, 0xC71864A7, 0xF4D6C350, 0xA577B766,
    0xE1C3E05C, 0x209AAD2B, 0xC45394C4, 0x6C87B833, 0xB9073E6B, 0xA1270914, 0x7B8F98AD,
    0xF20A0064, 0xBE4AEC53, 0xE0150BDC, 0x28DA3D09, 0x39FAEE2D, 0x96B9909E, 0x611C8C62,
    0xA5F182C3, 0xEB2551CA, 0x7C212AFA, 0xB7EC7F63, 0x14C4E11C, 0xD1C49620, 0x0351860D,
    0xEE1CDAF8, 0x20E41B40, 0x11CB209C, 0xC14F5866, 0x0A4FC4C1, 0x6C81D512, 0xFC01CBCB,
    0x00220E30, 0x7578DC18, 0xECA7801F, 0x71F1BA50, 0x0F2A7835, 0xDDB78905, 0x60F81D50,
    0xBBC01D31, 0x5823C191, 0xD2681040, 0x0BF01C5D, 0x91B86A22, 0x2C98B761, 0xC342D283,
    0xCC80C89A, 0xF64923EA, 0x6F9107B8, 0xE01CD327, 0x7186A000, 0x75E0FF3B, 0x3836204A,
    0x5B85C719, 0x6140E3AB, 0x2B7C911C, 0xA5E4B59C, 0xB06A8511, 0x7E20DB08, 0x988001A8,
    0xA78954D1, 0x4E5590FB, 0x3B661039, 0xC25A2520, 0xDFB5655A, 0xB0DF39F2, 0x01A630A7,
    0x1C246999, 0x02374FB0, 0xBCA01160, 0xFD01CB0B, 0x74DED020, 0x0B9A1DC6, 0x1CCD126A,
    0xE2D20F50, 0x01AB84BB, 0x878B308E, 0xB48A6B0A, 0xAEC0A9C3, 0xC27500B9, 0x6831CFDC,
    0xB0019360, 0xBD997CDE, 0xF2821934, 0x6D7C62BC, 0x52BD9C5A, 0x225877B4, 0xA2DB85D1,
    0x88907C6E, 0x51B5D40B, 0x1DF62092, 0x2B0CD9C5, 0x5D1CA87A, 0x01CC09AE, 0x8E495718,
    0xE1C6059B, 0xB881D00C, 0xF3CBFCAE, 0xF76A103C, 0x0FD9095A, 0x1C0280DC, 0xB10802C0,
    0xA368A1A5, 0x635BCAE8, 0x4CCD1F12, 0xA03D7460, 0x0B26AC9E, 0x9D6410D1, 0x5D53165E,
    0x0D47F8D2, 0xB4BE6953, 0xB84693C3, 0x106C801B, 0xCD360FA1, 0x2D26DED5, 0x44CA0C0F,
    0xB927B5C0, 0x9E70B801, 0x430FFCFA, 0xE6B3B5CC, 0x015AB904, 0xA221A1F9, 0x3C5F0851,
    0x9EFCC603, 0x1D9D318D, 0xA0E20F6A, 0x18615353, 0xF01DE050, 0x622CB2F0, 0xA408D818,
    0xBD3D6099, 0xE1102B75, 0x422B7608, 0xE163F3E1, 0xA01CA92B, 0x75E1072B, 0xAE29666D,
    0xA1AD6F83, 0x9DC4AED1, 0x06DEE2C7, 0xC16C2071, 0x144916C6, 0xBC9149AE, 0xC14B8819,
    0x867C0408, 0x828CD26A, 0xE89C03E2, 0x01BA6A89, 0xF91820DC, 0x62F08A00, 0xCF606513,
    0x44CBCC3D, 0x62139747, 0x59C833DB, 0x773E9067, 0xA142CD5C, 0x0E7182CC, 0x7323C9D6,
    0xB0679F10, 0x45C42BA4, 0xB718D225, 0xB63C4AC9, 0xA2D94652, 0x90CD0B98, 0x1D171869,
    0xD77A38C7, 0xDA4E40AE, 0xE3E35DF7, 0x25F975A0, 0x40182D2F, 0xFD8CB161, 0x90300E7D,
    0x2B8D0D8F, 0xD01BAA40, 0xB311E773, 0x8DB761BB, 0x1296C5E1, 0x96E3B4CB, 0xC401C9FD,
    0x513C9E70, 0x041D1A19, 0xBD8DECDF, 0x0E1EB83D, 0x03628283, 0xEC231D64, 0x2191AC9A,
    0x9ED01E43, 0xE95C474E, 0xE2BB6B4A, 0x01CA04AD, 0xC92D2062, 0x6CB7A3E0, 0xC00915E2,
    0x4D14B7D9, 0x161A9B41, 0x4D6AF17E, 0xB4E8DAC8, 0x738BD2D9, 0x46D5EC9D, 0xCD2D206F,
    0xE7AD2D20, 0xCBEE85A5, 0xC32D2C8A, 0xF656ABC5, 0xAEADEF6A, 0x10A021A2, 0x79A467E1,
    0x3322D2CB, 0xD20D8110, 0x9D760922, 0xE92BB47D, 0x1B73B01C, 0xA2190890, 0x73B9B512,
    0x4D168CA1, 0x2C6CE8DA, 0x3D4E760F, 0x8B1D5DC7, 0xB9E7C39E, 0xB5BB090C, 0xBEA7E103,
    0xD831E6DA, 0x57AEAF8C, 0x739F7AB5, 0x5623EC19, 0xAC56AE51, 0xA3EDE83C, 0xAADE6AEC,
    0x6AE8A026, 0xDC832E14, 0x2B4E250D, 0x2D546401, 0xE1830EDC, 0x3E32D3E0, 0xAB50D111,
    0x1D199086, 0xBED404F0, 0x0C3136B8, 0x1B282750, 0xC5821530, 0x18699201, 0xFDEFD063,
    0x00A52D2E, 0x1158C54A, 0xB2212E50, 0x2D20B8B5, 0x87C28E18, 0x42821AD2, 0xEF0A7E8A,
    0xE713C8CF, 0x1AF0901C, 0xDEE0001E, 0x9EEB8AF1, 0x2AD9F042, 0x2E430F06, 0xA0A22184,
    0xF396E102, 0x4F2688FA, 0x909C4383, 0x3AF35098, 0x0C06103F, 0x113B347E, 0x8EC70796,
    0x3D591CD1, 0x8F4B00A9, 0xFB7D684F, 0x3155BD8E, 0x3EBF3B08, 0x53BDDB3E, 0xEEE50614,
    0xCE42622D, 0x89F59F4F, 0xC016F478, 0x3B4F5AF5, 0x35812AA6, 0x807B01D1, 0xF67F5FE8,
    0x74F69F68, 0x705752CA, 0x800EA21A, 0x72F6A601, 0x7F74F73F, 0x26D8FA16, 0x7AF75A6D,
    0x1834F7BF, 0x00000010, 0x00000000

  EW_BITMAPS_TABLE( AppSiteNetBitmap )
    EW_BITMAP( AppSiteNetBitmap, Default )
EW_END_OF_BITMAP_RES( AppSiteNetBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SiteNetBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSiteNetBitmap )

/* Initializer for the class 'App::MeshTree' */
void AppMeshTree__Init( AppMeshTree _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  GraphicsPath__Init( &_this->Path, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->BranchPath, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshListChangeEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshStatusChangeEventHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangeEventHandler1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  AppCountView__Init( &_this->DetectedCountView, &_this->_XObject, 0 );
  AppCountView__Init( &_this->ActiveCountView, &_this->_XObject, 0 );
  AppDeviceInfo__Init( &_this->DeviceInfo, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessModeChangeEventHandler1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton4, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->MeshUnitChangeEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshTree );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03A2 );
  _this->Origin = _Const03A3;
  _this->Spacing = _Const03A4;
  CoreRectView__OnSetBounds( &_this->BranchPath, _Const03A5 );
  ViewsStrokePath_OnSetColor( &_this->BranchPath, _Const000E );
  ViewsStrokePath_OnSetWidth( &_this->BranchPath, 3.000000f );
  CoreSystemEventHandler_OnSetEnabled( &_this->MeshStatusChangeEventHandler, 0 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const03A6 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppMeshUnitItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 30 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 514 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const03A7 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const03A8 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const03A9 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const03AA );
  CoreSimpleTouchHandler_OnSetRetargetDelay( &_this->SimpleTouchHandler, 800 );
  CoreSimpleTouchHandler_OnSetRetargetOffset( &_this->SimpleTouchHandler, 5 );
  _this->SimpleTouchHandler.RetargetCondition = CoreRetargetReasonLongPress | CoreRetargetReasonWipeDown 
  | CoreRetargetReasonWipeLeft | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const03AB );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
  CoreGroup__OnSetVisible( &_this->PushButton3, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const03AC 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const03AD );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const03AE 
  ));
  CoreRectView__OnSetBounds( &_this->DetectedCountView, _Const03AF );
  AppCountView_OnSetprefix( &_this->DetectedCountView, EwLoadString( &_Const03B0 
  ));
  CoreRectView__OnSetBounds( &_this->ActiveCountView, _Const03B1 );
  AppCountView_OnSetprefix( &_this->ActiveCountView, EwLoadString( &_Const03B2 ));
  CoreRectView__OnSetBounds( &_this->DeviceInfo, _Const03B3 );
  CoreGroup__OnSetVisible( &_this->DeviceInfo, 0 );
  _this->DeviceInfo.Super1.Radius1 = 6;
  AppDeviceInfo_OnSetdevice( &_this->DeviceInfo, -1 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const03B4 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const03B5 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton4, _Const03B6 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 1 );
  CoreGroup__OnSetVisible( &_this->PushButton4, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton4, EwLoadString( &_Const03B7 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->BranchPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DetectedCountView ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ActiveCountView ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DeviceInfo ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton4 ), 0 );
  ViewsStrokePath_OnSetPath( &_this->BranchPath, &_this->Path );
  _this->MeshListChangeEventHandler.OnEvent = EwNewSlot( _this, AppMeshTree_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshListChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );
  _this->MeshStatusChangeEventHandler.OnEvent = EwNewSlot( _this, AppMeshTree_onEvent2 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshStatusChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshStatusChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppMeshTree_OnLoadItem );
  _this->ListViewer.onScroll = EwNewSlot( _this, AppMeshTree_ScrollSlot );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppMeshTree_RefreshAll );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppMeshTree_InfoTap );
  _this->SimpleTouchHandler.OnPress = EwNullSlot;
  _this->SiteChangeEventHandler1.OnEvent = EwNewSlot( _this, AppMeshTree_onEvent3 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangeEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->PushButton3.OnRelease = EwNullSlot;
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppMeshTree_AdditionalSetSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppMeshTree_StartSync );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppMeshTree_OptimizeMesh );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->AccessModeChangeEventHandler1.OnEvent = EwNewSlot( _this, AppMeshTree_onEvent2 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessModeChangeEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );
  _this->PushButton4.OnRelease = EwNullSlot;
  _this->PushButton4.OnActivate = EwNewSlot( _this, AppMeshTree_CheckFW );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton4, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->MeshUnitChangeEventHandler.OnEvent = EwNewSlot( _this, AppMeshTree_onMeshUnitChangeEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->MeshUnitChangeEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshUnitChangeEvent );

  /* Call the user defined constructor */
  AppMeshTree_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::MeshTree' */
void AppMeshTree__ReInit( AppMeshTree _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  GraphicsPath__ReInit( &_this->Path );
  ViewsStrokePath__ReInit( &_this->BranchPath );
  CoreSystemEventHandler__ReInit( &_this->MeshListChangeEventHandler );
  CoreSystemEventHandler__ReInit( &_this->MeshStatusChangeEventHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  CoreSystemEventHandler__ReInit( &_this->SiteChangeEventHandler1 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  AppCountView__ReInit( &_this->DetectedCountView );
  AppCountView__ReInit( &_this->ActiveCountView );
  AppDeviceInfo__ReInit( &_this->DeviceInfo );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreSystemEventHandler__ReInit( &_this->AccessModeChangeEventHandler1 );
  WidgetSetPushButton__ReInit( &_this->PushButton4 );
  CoreSystemEventHandler__ReInit( &_this->MeshUnitChangeEventHandler );
}

/* Finalizer method for the class 'App::MeshTree' */
void AppMeshTree__Done( AppMeshTree _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshTree );

  /* Finalize all embedded objects */
  GraphicsPath__Done( &_this->Path );
  ViewsStrokePath__Done( &_this->BranchPath );
  CoreSystemEventHandler__Done( &_this->MeshListChangeEventHandler );
  CoreSystemEventHandler__Done( &_this->MeshStatusChangeEventHandler );
  AppListViewer__Done( &_this->ListViewer );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  CoreSystemEventHandler__Done( &_this->SiteChangeEventHandler1 );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  WidgetSetPushButton__Done( &_this->PushButton );
  AppCountView__Done( &_this->DetectedCountView );
  AppCountView__Done( &_this->ActiveCountView );
  AppDeviceInfo__Done( &_this->DeviceInfo );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreSystemEventHandler__Done( &_this->AccessModeChangeEventHandler1 );
  WidgetSetPushButton__Done( &_this->PushButton4 );
  CoreSystemEventHandler__Done( &_this->MeshUnitChangeEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshTree' */
void AppMeshTree__Mark( AppMeshTree _this )
{
  EwMarkObject( &_this->Path );
  EwMarkObject( &_this->BranchPath );
  EwMarkObject( &_this->MeshListChangeEventHandler );
  EwMarkObject( &_this->MeshStatusChangeEventHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( _this->device );
  EwMarkObject( &_this->SiteChangeEventHandler1 );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->DetectedCountView );
  EwMarkObject( &_this->ActiveCountView );
  EwMarkObject( &_this->DeviceInfo );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->AccessModeChangeEventHandler1 );
  EwMarkObject( &_this->PushButton4 );
  EwMarkObject( &_this->MeshUnitChangeEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::MeshTree.OnSetVisible()' */
void AppMeshTree_OnSetVisible( AppMeshTree _this, XBool value )
{
  CoreGroup_OnSetVisible((CoreGroup)_this, value );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, ( _this->ActiveCountView.total 
    + _this->extra ) + 2 );
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppMeshTree_UpdateLayout( AppMeshTree _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMeshTree_UpdateViewState( AppMeshTree _this, XSet aState )
{
  XInt32 s;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  GraphicsPath_SetMaxNoOfSubPaths( &_this->Path, 512 );
  _this->SubIndex = 0;
  _this->Row = 0;
  AppMeshTree_DrawBranch( _this, 0, 0 );

  for ( s = _this->SubIndex; s < 512; s = s + 1 )
  {
    GraphicsPath_InitSubPath( &_this->Path, s, 0 );
  }
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppMeshTree_Init( AppMeshTree _this, XHandle aArg )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( ap != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, (XBool)( ap->LevelAccess.AccessLevel 
    >= 3 ));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppMeshTree_OnLoadItem( AppMeshTree _this, XObject sender )
{
  XInt32 itemNo;
  AppMeshUnitItem device;
  XString s;
  XBool no_site;
  XInt32 row;
  XInt32 numConfig;
  XInt32 numFound;
  XInt32 d;
  XInt32 r;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  device = EwCastObject( _this->ListViewer.VerticalList.View, AppMeshUnitItem );

  if ( device == 0 )
    return;

  s = EwLoadString( &_Const00F9 );
  no_site = 0;
  {
    if ( Command1( CMD_CHECK_TREE, 0 ) ) return;

    Command cmd;
    Command0( CMD_GET_PANEL, &cmd );

    if ( cmd.int0 != 0 )
    {
        Panel* p = (Panel*) cmd.int0;
        s = EwNewStringAnsi( p->name );
    }
    else
    {
      no_site =  1;
    }
  }

  if ( no_site )
  {
    CoreGroup__OnSetVisible( device, 0 );
    return;
  }

  CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX1( device->MeshUnit.Super2.Bounds, 
  0 ));
  CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX2( device->MeshUnit.Super2.Bounds, 
  310 ));

  if ( itemNo == 0 )
  {
    CoreGroup__OnSetVisible( device, 1 );
    ViewsText_OnSetString( &device->MeshUnit.NCUText, s );
    AppMeshUnit_OnSetStatus( &device->MeshUnit, AppRadioStatusNCU );
    CoreGroup_InvalidateViewState((CoreGroup)device );
    return;
  }

  ViewsImage_OnSetVisible( &device->MeshUnit.BatteryImage, 1 );
  CoreGroup__OnSetVisible( &device->MeshUnit, 1 );
  CoreGroup__OnSetVisible( device, 1 );
  _this->Row = 1;

  if ( AppMeshTree_GetChildren( _this, device, 0, itemNo, 0 ))
    return;

  row = _this->Row;

  if ( row == itemNo )
  {
    CoreGroup__OnSetVisible( device, 0 );
    return;
  }
  else
  {
    CoreGroup__OnSetVisible( device, 1 );
    row = row + 1;
  }

  numConfig = AppLibClass_GetNumSiteDevices( EwGetAutoObject( &AppLib, AppLibClass 
  ));
  numFound = AppLibClass_GetNumRadiosFound( EwGetAutoObject( &AppLib, AppLibClass 
  ));

  for ( r = 0; r < numFound; r = r + 1 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)r );

    if ( ru != 0 )
    {
      AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
        ), ru->unitnum );

      if ( dev == 0 )
      {
        if ( !AppLibClass_OnTree( EwGetAutoObject( &AppLib, AppLibClass ), ru->unitnum 
            ))
        {
          if ( row == itemNo )
          {
            AppMeshTree_SetupUnit( _this, device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            return;
          }
          else
            row = row + 1;
        }
      }
    }
  }

  for ( r = 0; r < numFound; r = r + 1 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)r );

    if ( ru != 0 )
    {
      AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
        ), ru->unitnum );

      if ( dev != 0 )
      {
        if ( !AppLibClass_OnTree( EwGetAutoObject( &AppLib, AppLibClass ), ru->unitnum 
            ))
        {
          if ( row == itemNo )
          {
            AppMeshTree_SetupUnit( _this, device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            return;
          }
          else
            row = row + 1;
        }
      }
    }
  }

  for ( d = 0; d < numConfig; d = d + 1 )
  {
    AppDeviceConfig dev = AppLibClass_GetConfigNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)d );

    if ( dev != 0 )
    {
      if ( dev->combination < 64 )
      {
        AppRadioUnit ru = AppLibClass_GetRadio( EwGetAutoObject( &AppLib, AppLibClass 
          ), dev->unitnum );

        if ( ru == 0 )
        {
          if ( row == itemNo )
          {
            AppMeshTree_SetupUnit( _this, device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            return;
          }
          else
            row = row + 1;
        }
      }
    }
  }

  CoreGroup_OnSetEnabled((CoreGroup)device, 0 );
  CoreGroup__OnSetVisible( device, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)device );
}

/* 'C' function for method : 'App::MeshTree.DrawBranch()' */
void AppMeshTree_DrawBranch( AppMeshTree _this, XInt32 indent, XInt32 parent )
{
  XInt32 child;
  XInt32 startrow;
  XInt32 endrow;

  {
    if ( capp->site == NULL || capp->panel == NULL )
    {
       return;
    }
  }
  child = AppMeshTree_FindNextChild( _this, 0, parent );
  startrow = _this->Row;
  endrow = _this->Row;
  indent = indent + 1;

  while ( child != 0 )
  {
    XInt32 unitnum;
    _this->Row = _this->Row + 1;
    endrow = _this->Row;
    unitnum = child;
    {
      RadioUnit* ru = (RadioUnit*) child;

      unitnum = ru->unit;
    }
    AppMeshTree_DrawBranch( _this, indent, unitnum );
    child = AppMeshTree_FindNextChild( _this, child, parent );
  }

  if ( endrow != startrow )
  {
    AppMeshTree_DrawLine( _this, indent * _this->Spacing.X, startrow * _this->Spacing.Y, 
    endrow * _this->Spacing.Y );
  }
}

/* 'C' function for method : 'App::MeshTree.FindNextChild()' */
XInt32 AppMeshTree_FindNextChild( AppMeshTree _this, XInt32 start, XInt32 parent )
{
  XInt32 child;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  child = 0;
  child = (int) get_child_unit( (RadioUnit*) start, parent );
  return child;
}

/* 'C' function for method : 'App::MeshTree.GetChildren()' */
XBool AppMeshTree_GetChildren( AppMeshTree _this, AppMeshUnitItem device, XInt32 
  parent, XInt32 itemNo, XInt32 indent )
{
  XInt32 child = AppMeshTree_FindNextChild( _this, 0, parent );

  indent = indent + 1;

  while ( child != 0 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioFromPtr( EwGetAutoObject( &AppLib, AppLibClass 
      ), child );

    if ( ru != 0 )
    {
      if ( _this->Row == itemNo )
      {
        AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
          ), ru->unitnum );
        CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX1( device->MeshUnit.Super2.Bounds, 
        ( indent * _this->Spacing.X ) - 4 ));
        CoreRectView__OnSetBounds( &device->MeshUnit, EwSetRectX2( device->MeshUnit.Super2.Bounds, 
        device->MeshUnit.Super2.Bounds.Point1.X + 310 ));
        AppMeshTree_SetupUnit( _this, device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
        );
        return 1;
      }

      _this->Row = _this->Row + 1;

      if ( AppMeshTree_GetChildren( _this, device, ru->unitnum, itemNo, indent ))
        return 1;

      child = AppMeshTree_FindNextChild( _this, child, parent );
    }
    else
    {
      CoreGroup__OnSetVisible( &device->MeshUnit, 0 );
    }
  }

  return 0;
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppMeshTree_onEvent1( AppMeshTree _this, XObject sender )
{
  AppMeshStatus mesh;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  mesh = EwCastObject( _this->MeshListChangeEventHandler.Context, AppMeshStatus 
  );
  _this->totalItems = mesh->total;
  _this->extra = mesh->extra;
  AppCountView_OnSetcount( &_this->ActiveCountView, mesh->active );
  AppCountView_OnSetcount( &_this->DetectedCountView, mesh->meshed );
  AppCountView_OnSettotal( &_this->ActiveCountView, mesh->total );
  AppCountView_OnSettotal( &_this->DetectedCountView, mesh->total );

  if ( mesh->active == mesh->total )
  {
    CoreTimer_OnSetEnabled( &_this->DetectedCountView.Timer, 0 );
    CoreTimer_OnSetEnabled( &_this->ActiveCountView.Timer, 0 );
    CoreGroup__OnSetOpacity( &_this->ActiveCountView.HorizontalValueBar1, 255 );
    CoreGroup__OnSetOpacity( &_this->DetectedCountView.HorizontalValueBar1, 255 
    );
  }
  else
  {
    if ( mesh->active > 0 )
    {
      CoreTimer_OnSetEnabled( &_this->ActiveCountView.Timer, 1 );
      CoreTimer_OnSetEnabled( &_this->DetectedCountView.Timer, 0 );
      CoreGroup__OnSetOpacity( &_this->DetectedCountView.HorizontalValueBar1, 255 
      );
    }
    else
    {
      CoreTimer_OnSetEnabled( &_this->ActiveCountView.Timer, 0 );
      CoreGroup__OnSetOpacity( &_this->ActiveCountView.HorizontalValueBar1, 255 
      );
      CoreTimer_OnSetEnabled( &_this->DetectedCountView.Timer, 1 );
    }
  }

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, ( _this->ActiveCountView.total 
    + _this->extra ) + 2 );
    CoreGroup_InvalidateViewState((CoreGroup)_this );
  }
}

/* 'C' function for method : 'App::MeshTree.StartSync()' */
void AppMeshTree_StartSync( AppMeshTree _this, XObject sender )
{
  AppConfirmPopup cp;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  cp = EwNewObject( AppConfirmPopup, 0 );
  ViewsText_OnSetString( &cp->Text1, EwLoadString( &_Const03B8 ));
  AppConfirmPopup_ShowThen( cp, CoreView__GetRoot( _this ), EwNewSlot( _this, AppMeshTree_StartSyncGo 
  ));
}

/* 'C' function for method : 'App::MeshTree.ScrollSlot()' */
void AppMeshTree_ScrollSlot( AppMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->Origin.Y = ( 25 + _this->ListViewer.SlideTouchHandler.Offset.Y );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::MeshTree.InfoTap()' */
void AppMeshTree_InfoTap( AppMeshTree _this, XObject sender )
{
  XInt32 list_item;
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->SimpleTouchHandler.AutoDeflected )
    return;

  list_item = CoreVerticalList_GetItemAtPosition( &_this->ListViewer.VerticalList, 
  _this->SimpleTouchHandler.CurrentPos );
  itemNo = list_item + _this->ListViewer.StartRow;

  if ( itemNo > 0 )
  {
    XInt32 count = 0;
    AppMeshUnitItem m = EwCastObject( _this->ListViewer.VerticalList.Super1.first, 
      AppMeshUnitItem );

    if ( m != 0 )
    {
      XInt32 u;

      while ( count < list_item )
      {
        count = count + 1;
        m = EwCastObject( m->Super3.next, AppMeshUnitItem );

        if ( m == 0 )
          return;
      }

      u = EwStringParseInt32( m->MeshUnit.UnitNum.String, -1, 10 );

      if (( u > 0 ) && ( _this->DeviceInfo.device != u ))
      {
        AppApplication ap;
        CoreVerticalList_OnSetSelectedItem( &_this->ListViewer.VerticalList, u );
        AppListViewer_OnSetNoOfItems( &_this->ListViewer, _this->ListViewer.NoOfItems 
        );
        _this->current_item = list_item;
        ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

        if ( ap != 0 )
        {
          XInt32 l = ap->LevelAccess.AccessLevel;
          CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceInfo.PushButton1, (XBool)( 
          l > 2 ));
        }

        CoreGroup__OnSetVisible( &_this->DeviceInfo, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&_this->DeviceInfo, 1 );
        CoreSimpleTouchHandler_OnSetEnabled( &_this->DeviceInfo.SimpleTouchHandler, 
        1 );
        AppDeviceInfo_OnSetdevice( &_this->DeviceInfo, u );
      }
      else
        if ( u > 0 )
        {
          EwPostSignal( EwNewSlot( &_this->DeviceInfo, AppDeviceInfo_Close ), ((XObject)_this 
            ));
          CoreVerticalList_OnSetSelectedItem( &_this->ListViewer.VerticalList, -1 
          );
          AppListViewer_OnSetNoOfItems( &_this->ListViewer, _this->ListViewer.NoOfItems 
          );
        }
    }
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppMeshTree_RefreshAll( AppMeshTree _this, XObject sender )
{
  XInt32 itemNo;
  XString s;
  XBool no_site;
  XInt32 numConfig;
  XInt32 numFound;
  XInt32 d;
  XInt32 r;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  _this->device = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppMeshUnitItem 
  );

  if ( _this->device == 0 )
    return;

  while ( itemNo < 0 )
  {
    CoreGroup__OnSetVisible( _this->device, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)_this->device );
    _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem );

    if ( _this->device == 0 )
      return;

    itemNo = itemNo + 1;
  }

  s = EwLoadString( &_Const00F9 );
  no_site = 0;
  {
    Command cmd;
    Command0( CMD_GET_PANEL, &cmd );

    if ( Command1( CMD_CHECK_TREE, 0 ) ) return;

    if ( cmd.int0 != 0 )
    {
        Panel* p = (Panel*) cmd.int0;
        s = EwNewStringAnsi( p->name );
    }
    else
    {
      no_site =  1;
    }
  }

  if ( no_site )
  {
    while ( _this->device != 0 )
    {
      CoreGroup__OnSetVisible( _this->device, 0 );
      _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
      );
    }

    return;
  }

  _this->Row = 0;
  CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX1( _this->device->MeshUnit.Super2.Bounds, 
  0 ));
  CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX2( _this->device->MeshUnit.Super2.Bounds, 
  310 ));

  if ( itemNo == 0 )
  {
    CoreGroup__OnSetVisible( _this->device, 1 );
    ViewsText_OnSetString( &_this->device->MeshUnit.NCUText, s );
    AppMeshUnit_OnSetStatus( &_this->device->MeshUnit, AppRadioStatusNCU );
    ViewsImage_OnSetColor( &_this->device->MeshUnit.MeshVector.Frame1, EwSetColorAlpha( 
    ViewsImage_OnGetColor( &_this->device->MeshUnit.MeshVector.Frame1 ), 120 ));
    ViewsImage_OnSetBitmap( &_this->device->MeshUnit.MeshVector.Frame, EwLoadResource( 
    &Appmeshunit_outline_thin, ResourcesBitmap ));
    CoreGroup_InvalidateViewState((CoreGroup)&_this->device->MeshUnit.MeshVector 
    );
    CoreGroup_InvalidateViewState((CoreGroup)&_this->device->MeshUnit );
    CoreGroup_InvalidateViewState((CoreGroup)_this->device );
    _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem );

    if ( _this->device == 0 )
      return;
  }
  else
  {
    _this->Row = _this->Row + 1;
  }

  if ( AppMeshTree_GetAllChildren( _this, 0, itemNo, 0 ))
    return;

  if ( _this->Row == itemNo )
  {
    CoreGroup__OnSetVisible( _this->device, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)_this->device );
    _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem );

    if ( _this->device == 0 )
      return;
  }
  else
  {
    _this->Row = _this->Row + 1;
  }

  numConfig = AppLibClass_GetNumSiteDevices( EwGetAutoObject( &AppLib, AppLibClass 
  ));
  numFound = AppLibClass_GetNumRadiosFound( EwGetAutoObject( &AppLib, AppLibClass 
  ));

  for ( r = 0; r < numFound; r = r + 1 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)r );

    if ( ru != 0 )
    {
      AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
        ), ru->unitnum );

      if ( dev == 0 )
      {
        if ( !AppLibClass_OnTree( EwGetAutoObject( &AppLib, AppLibClass ), ru->unitnum 
            ))
        {
          if ( _this->Row == itemNo )
          {
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX1( _this->device->MeshUnit.Super2.Bounds, 
            0 ));
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX2( _this->device->MeshUnit.Super2.Bounds, 
            310 ));
            AppMeshTree_SetupUnit( _this, _this->device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
            );

            if ( _this->device == 0 )
              return;
          }
          else
            _this->Row = _this->Row + 1;
        }
      }
    }
  }

  for ( r = 0; r < numFound; r = r + 1 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)r );

    if ( ru != 0 )
    {
      AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
        ), ru->unitnum );

      if ( dev != 0 )
      {
        if ( !AppLibClass_OnTree( EwGetAutoObject( &AppLib, AppLibClass ), ru->unitnum 
            ))
        {
          if ( _this->Row == itemNo )
          {
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX1( _this->device->MeshUnit.Super2.Bounds, 
            0 ));
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX2( _this->device->MeshUnit.Super2.Bounds, 
            310 ));
            _this->device->MeshUnit.Stage = AppNCUStageDropped;
            AppMeshTree_SetupUnit( _this, _this->device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
            );

            if ( _this->device == 0 )
              return;
          }
          else
            _this->Row = _this->Row + 1;
        }
      }
    }
  }

  for ( d = 0; d < numConfig; d = d + 1 )
  {
    AppDeviceConfig dev = AppLibClass_GetConfigNum( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)d );

    if ( dev != 0 )
      if ( dev->combination < 64 )
      {
        AppRadioUnit ru = AppLibClass_GetRadio( EwGetAutoObject( &AppLib, AppLibClass 
          ), dev->unitnum );

        if ( ru == 0 )
        {
          if ( _this->Row == itemNo )
          {
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX1( _this->device->MeshUnit.Super2.Bounds, 
            0 ));
            CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX2( _this->device->MeshUnit.Super2.Bounds, 
            310 ));
            _this->device->MeshUnit.Stage = AppNCUStageUnknnown;
            AppMeshTree_SetupUnit( _this, _this->device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
            );
            _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
            );

            if ( _this->device == 0 )
              return;
          }
          else
            _this->Row = _this->Row + 1;
        }
      }
  }

  while ( _this->device != 0 )
  {
    CoreGroup__OnSetVisible( _this->device, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)_this->device, 0 );
    CoreGroup_InvalidateViewState((CoreGroup)_this->device );
    _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem );
  }
}

/* 'C' function for method : 'App::MeshTree.GetAllChildren()' */
XBool AppMeshTree_GetAllChildren( AppMeshTree _this, XInt32 parent, XInt32 itemNo, 
  XInt32 indent )
{
  XInt32 child = AppMeshTree_FindNextChild( _this, 0, parent );

  indent = indent + 1;

  while ( child != 0 )
  {
    AppRadioUnit ru = AppLibClass_GetRadioFromPtr( EwGetAutoObject( &AppLib, AppLibClass 
      ), child );

    if ( ru != 0 )
    {
      if ( _this->Row == itemNo )
      {
        AppDeviceConfig dev = AppLibClass_GetConfig( EwGetAutoObject( &AppLib, AppLibClass 
          ), ru->unitnum );
        CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX1( _this->device->MeshUnit.Super2.Bounds, 
        ( indent * _this->Spacing.X ) - 4 ));
        CoreRectView__OnSetBounds( &_this->device->MeshUnit, EwSetRectX2( _this->device->MeshUnit.Super2.Bounds, 
        _this->device->MeshUnit.Super2.Bounds.Point1.X + 310 ));
        AppMeshTree_SetupUnit( _this, _this->device, ru, dev, (XInt16)_this->ListViewer.VerticalList.SelectedItem 
        );
        _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
        );

        if ( _this->device == 0 )
          return 1;
      }
      else
      {
        _this->Row = _this->Row + 1;
      }

      if ( AppMeshTree_GetAllChildren( _this, ru->unitnum, itemNo, indent ))
        return 1;

      child = AppMeshTree_FindNextChild( _this, child, parent );
    }
    else
    {
      CoreGroup__OnSetVisible( _this->device, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)_this->device );
      _this->device = EwCastObject( _this->device->Super3.next, AppMeshUnitItem 
      );

      if ( _this->device == 0 )
        return 1;
    }
  }

  return 0;
}

/* 'C' function for method : 'App::MeshTree.DrawLine()' */
void AppMeshTree_DrawLine( AppMeshTree _this, XInt32 x, XInt32 y, XInt32 y2 )
{
  GraphicsPath_InitSubPath( &_this->Path, _this->SubIndex, 1 );
  GraphicsPath_Begin( &_this->Path, _this->SubIndex, (XFloat)( _this->Origin.X + 
  x ), (XFloat)( _this->Origin.Y + y ));
  GraphicsPath_AddLine( &_this->Path, _this->SubIndex, (XFloat)( _this->Origin.X 
  + x ), (XFloat)(( _this->Origin.Y + y2 ) - 25 ));
  GraphicsPath_Close( &_this->Path, _this->SubIndex );
  _this->SubIndex = _this->SubIndex + 1;
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppMeshTree_onEvent3( AppMeshTree _this, XObject sender )
{
  XBool no_site;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  no_site = 0;
  {
    if ( capp->site == NULL || capp->panel == NULL )
    {
       no_site = 1;
    }
  }

  if ( no_site )
  {
    AppListViewer_OnSetNoOfItems( &_this->ListViewer, 0 );
    AppCountView_OnSetcount( &_this->DetectedCountView, 0 );
    AppCountView_OnSettotal( &_this->DetectedCountView, 0 );
    AppCountView_OnSetcount( &_this->ActiveCountView, 0 );
    AppCountView_OnSettotal( &_this->ActiveCountView, 0 );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::MeshTree.StartSyncGo()' */
void AppMeshTree_StartSyncGo( AppMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    cmd.int0 = 1;
    Command0( CMD_SET_MESH_STAGE, &cmd );
  }
}

/* 'C' function for method : 'App::MeshTree.AdditionalSetSlot()' */
void AppMeshTree_AdditionalSetSlot( AppMeshTree _this, XObject sender )
{
  AppAdditionalPopup ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwNewObject( AppAdditionalPopup, 0 );
  AppPopup_Show((AppPopup)ap, CoreView__GetRoot( _this ));
}

/* 'C' function for method : 'App::MeshTree.OptimizeMesh()' */
void AppMeshTree_OptimizeMesh( AppMeshTree _this, XObject sender )
{
     
  Command1( CMD_OPTIMIZE_MESH, 0 );     

}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppMeshTree_onEvent2( AppMeshTree _this, XObject sender )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppListViewer_OnSetNoOfItems( &_this->ListViewer, _this->ListViewer.NoOfItems 
  );
  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( ap != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, (XBool)( ap->LevelAccess.AccessLevel 
    >= 3 ));
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppMeshTree_CheckFW( AppMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;
    Command0( CMD_CHECK_FW, &cmd );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppMeshTree_onMeshUnitChangeEvent( AppMeshTree _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppUnitNumber u = EwCastObject( _this->MeshUnitChangeEventHandler.Context, AppUnitNumber 
      );
    AppMeshUnitItem item = EwCastObject( _this->ListViewer.VerticalList.Super1.first, 
      AppMeshUnitItem );
    XInt32 n = 0;

    while ( item != 0 )
    {
      if ( !EwCompString( item->MeshUnit.UnitNum.String, EwNewStringInt( u->num, 
          0, 10 )))
      {
        _this->ListViewer.VerticalList.View = ((CoreView)item );
        _this->ListViewer.Item = _this->ListViewer.StartRow + n;
        EwSignal( EwNewSlot( _this, AppMeshTree_OnLoadItem ), ((XObject)_this ));
        return;
      }

      n = n + 1;
      item = EwCastObject( item->Super3.next, AppMeshUnitItem );
    }
  }
}

/* 'C' function for method : 'App::MeshTree.SetupUnit()' */
void AppMeshTree_SetupUnit( AppMeshTree _this, AppMeshUnitItem device, AppRadioUnit 
  ru, AppDeviceConfig dev, XInt16 selected )
{
  XInt16 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  u = 0;

  if ( ru != 0 )
  {
    device->MeshUnit.RSSI = ru->rssi;
    device->MeshUnit.Stage = ru->stage;

    if ( dev == 0 )
    {
      ViewsText_OnSetString( &device->MeshUnit.TypeText, EwNewStringInt( ru->combination, 
      0, 10 ));
      u = ru->unitnum;
      AppMeshUnit_OnSetStatus( &device->MeshUnit, AppRadioStatusAdditional );
      ViewsText_OnSetString( &device->MeshUnit.Extention, EwLoadString( &_Const03B9 
      ));
      ViewsText_OnSetColor( &device->MeshUnit.Extention, _Const03BA );

      if ( ru->zonenum == -1 )
      {
        ViewsText_OnSetString( &device->MeshUnit.ZoneNum, EwLoadString( &_Const03BB 
        ));
      }
      else
      {
        ViewsText_OnSetString( &device->MeshUnit.ZoneNum, EwNewStringInt( ru->zonenum, 
        0, 10 ));
      }
    }
    else
    {
      if (( ru->combination == dev->combination ) || ( ru->combination == 0 ))
      {
        AppMeshUnit_OnSetStatus( &device->MeshUnit, AppRadioStatusFound );
        ViewsText_OnSetString( &device->MeshUnit.Extention, 0 );
        ViewsText_OnSetString( &device->MeshUnit.TypeText, dev->combiname );
      }
      else
      {
        AppMeshUnit_OnSetStatus( &device->MeshUnit, AppRadioStatusDifferent );
        ViewsText_OnSetString( &device->MeshUnit.TypeText, EwNewStringInt( ru->combination, 
        0, 10 ));
        ViewsText_OnSetColor( &device->MeshUnit.Extention, _Const03BC );
        ViewsText_OnSetString( &device->MeshUnit.Extention, EwLoadString( &_Const0288 
        ));
      }
    }

    switch ( ru->battery )
    {
      case 0 :
        ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, EwLoadResource( 
        &Appbattery0, ResourcesBitmap ));
      break;

      case 1 :
        ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, EwLoadResource( 
        &Appbattery1, ResourcesBitmap ));
      break;

      case 2 :
        ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, EwLoadResource( 
        &Appbattery2, ResourcesBitmap ));
      break;

      case 3 :
        ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, EwLoadResource( 
        &Appbattery3, ResourcesBitmap ));
      break;

      default : 
        ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, 0 );
    }

    ;
    device->MeshUnit.flags = ru->valid;
  }
  else
  {
    ViewsImage_OnSetBitmap( &device->MeshUnit.BatteryImage, 0 );
    device->MeshUnit.RSSI = -256;
    device->MeshUnit.flags = 0;
  }

  if ( dev != 0 )
  {
    ViewsText_OnSetString( &device->MeshUnit.ZoneNum, EwNewStringInt( dev->zonenum, 
    0, 10 ));
    u = dev->unitnum;

    if ( ru == 0 )
    {
      ViewsText_OnSetString( &device->MeshUnit.TypeText, dev->combiname );
      device->MeshUnit.Stage = AppNCUStageUnknnown;
      AppMeshUnit_OnSetStatus( &device->MeshUnit, AppRadioStatusNotFound );
      ViewsText_OnSetColor( &device->MeshUnit.Extention, _Const03BD );
      ViewsText_OnSetString( &device->MeshUnit.Extention, EwLoadString( &_Const03BE 
      ));
      ViewsText_OnSetString( &device->MeshUnit.Extention, EwLoadString( &_Const03BF 
      ));
    }
  }

  ViewsText_OnSetString( &device->MeshUnit.UnitNum, EwNewStringInt( u, 0, 10 ));

  if ( u == selected )
  {
    ViewsImage_OnSetBitmap( &device->MeshUnit.MeshVector.Frame, EwLoadResource( 
    &Appmeshunit_outline, ResourcesBitmap ));
    ViewsImage_OnSetColor( &device->MeshUnit.MeshVector.Frame1, EwSetColorAlpha( 
    ViewsImage_OnGetColor( &device->MeshUnit.MeshVector.Frame1 ), 255 ));
  }
  else
  {
    ViewsImage_OnSetBitmap( &device->MeshUnit.MeshVector.Frame, EwLoadResource( 
    &Appmeshunit_outline_thin, ResourcesBitmap ));
    ViewsImage_OnSetColor( &device->MeshUnit.MeshVector.Frame1, EwSetColorAlpha( 
    ViewsImage_OnGetColor( &device->MeshUnit.MeshVector.Frame1 ), 111 ));
  }

  CoreGroup__OnSetVisible( &device->MeshUnit, 1 );
  CoreGroup__OnSetVisible( device, 1 );
  CoreGroup_InvalidateViewState((CoreGroup)device );
}

/* Variants derived from the class : 'App::MeshTree' */
EW_DEFINE_CLASS_VARIANTS( AppMeshTree )
EW_END_OF_CLASS_VARIANTS( AppMeshTree )

/* Virtual Method Table (VMT) for the class : 'App::MeshTree' */
EW_DEFINE_CLASS( AppMeshTree, CoreGroup, "App::MeshTree" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  AppMeshTree_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppMeshTree_UpdateLayout,
  AppMeshTree_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMeshTree )

/* Initializer for the class 'App::MeshUnit' */
void AppMeshUnit__Init( AppMeshUnit _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppMeshVector__Init( &_this->MeshVector, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->ZoneNum, &_this->_XObject, 0 );
  ViewsText__Init( &_this->UnitNum, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TypeText, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Extention, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->BatteryImage, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NCUText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshUnit );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03C0 );
  CoreRectView__OnSetBounds( &_this->MeshVector, _Const03C1 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->MeshVector, 1 );
  CoreRectView__OnSetBounds( &_this->ZoneText, _Const03C2 );
  ViewsText_OnSetAlignment( &_this->ZoneText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->ZoneText, EwLoadString( &_Const03C3 ));
  ViewsText_OnSetColor( &_this->ZoneText, _Const000E );
  CoreRectView__OnSetBounds( &_this->ZoneNum, _Const03C4 );
  ViewsText_OnSetAlignment( &_this->ZoneNum, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->ZoneNum, EwLoadString( &_Const0161 ));
  ViewsText_OnSetColor( &_this->ZoneNum, _Const016D );
  CoreRectView__OnSetBounds( &_this->UnitNum, _Const03C5 );
  ViewsText_OnSetAlignment( &_this->UnitNum, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->UnitNum, EwLoadString( &_Const0155 ));
  ViewsText_OnSetColor( &_this->UnitNum, _Const016D );
  CoreRectView__OnSetBounds( &_this->TypeText, _Const03C6 );
  ViewsText_OnSetAlignment( &_this->TypeText, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TypeText, EwLoadString( &_Const03C7 ));
  ViewsText_OnSetColor( &_this->TypeText, _Const016D );
  CoreView_OnSetLayout((CoreView)&_this->Extention, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Extention, _Const03C8 );
  ViewsText_OnSetString( &_this->Extention, EwLoadString( &_Const03C9 ));
  _this->Status = AppRadioStatusAdditional;
  _this->RSSI = 22;
  CoreRectView__OnSetBounds( &_this->BatteryImage, _Const03CA );
  ViewsImage_OnSetAnimated( &_this->BatteryImage, 1 );
  ViewsImage_OnSetFrameNumber( &_this->BatteryImage, 0 );
  CoreRectView__OnSetBounds( &_this->NCUText, _Const03CB );
  ViewsText_OnSetAutoSize( &_this->NCUText, 0 );
  ViewsText_OnSetAlignment( &_this->NCUText, ViewsTextAlignmentAlignHorzCenter | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NCUText, EwLoadString( &_Const00F9 ));
  ViewsText_OnSetColor( &_this->NCUText, _Const016D );
  _this->Stage = AppNCUStageUnknnown;
  CoreGroup__Add( _this, ((CoreView)&_this->MeshVector ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneNum ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitNum ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Extention ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BatteryImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NCUText ), 0 );
  ViewsText_OnSetFont( &_this->ZoneText, EwLoadResource( &AppFontVerdana14, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->ZoneNum, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->UnitNum, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->TypeText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Extention, EwLoadResource( &ResourcesFontLarge, ResourcesFont 
  ));
  ViewsImage_OnSetBitmap( &_this->BatteryImage, EwLoadResource( &Appbattery0, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->NCUText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::MeshUnit' */
void AppMeshUnit__ReInit( AppMeshUnit _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppMeshVector__ReInit( &_this->MeshVector );
  ViewsText__ReInit( &_this->ZoneText );
  ViewsText__ReInit( &_this->ZoneNum );
  ViewsText__ReInit( &_this->UnitNum );
  ViewsText__ReInit( &_this->TypeText );
  ViewsText__ReInit( &_this->Extention );
  ViewsImage__ReInit( &_this->BatteryImage );
  ViewsText__ReInit( &_this->NCUText );
}

/* Finalizer method for the class 'App::MeshUnit' */
void AppMeshUnit__Done( AppMeshUnit _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshUnit );

  /* Finalize all embedded objects */
  AppMeshVector__Done( &_this->MeshVector );
  ViewsText__Done( &_this->ZoneText );
  ViewsText__Done( &_this->ZoneNum );
  ViewsText__Done( &_this->UnitNum );
  ViewsText__Done( &_this->TypeText );
  ViewsText__Done( &_this->Extention );
  ViewsImage__Done( &_this->BatteryImage );
  ViewsText__Done( &_this->NCUText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshUnit' */
void AppMeshUnit__Mark( AppMeshUnit _this )
{
  EwMarkObject( &_this->MeshVector );
  EwMarkObject( &_this->ZoneText );
  EwMarkObject( &_this->ZoneNum );
  EwMarkObject( &_this->UnitNum );
  EwMarkObject( &_this->TypeText );
  EwMarkObject( &_this->Extention );
  EwMarkObject( &_this->BatteryImage );
  EwMarkObject( &_this->NCUText );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppMeshUnit_UpdateLayout( AppMeshUnit _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMeshUnit_UpdateViewState( AppMeshUnit _this, XSet aState )
{
  XUInt8 alpha;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  alpha = ViewsImage_OnGetColor( &_this->MeshVector.Frame1 ).Alpha;

  if ( _this->Status == AppRadioStatusNCU )
  {
    ViewsImage_OnSetColorBL( &_this->MeshVector.Frame1, _Const03CC );
    ViewsImage_OnSetColorTL( &_this->MeshVector.Frame1, _Const03CD );
    ViewsImage_OnSetColorBR( &_this->MeshVector.Frame1, _Const03CC );
    ViewsImage_OnSetColorTR( &_this->MeshVector.Frame1, _Const03CD );
    ViewsImage_OnSetVisible( &_this->BatteryImage, 0 );
    ViewsText_OnSetVisible( &_this->Extention, 0 );
    CoreRectView__OnSetBounds( &_this->MeshVector, _Const03C1 );
    ViewsText_OnSetVisible( &_this->NCUText, 1 );
    ViewsImage_OnSetVisible( &_this->BatteryImage, 0 );
    ViewsText_OnSetVisible( &_this->TypeText, 0 );
    ViewsText_OnSetVisible( &_this->UnitNum, 0 );
    ViewsText_OnSetVisible( &_this->ZoneNum, 0 );
    ViewsText_OnSetVisible( &_this->ZoneText, 0 );
    return;
  }

  if (( _this->Stage == AppNCUStageUnknnown ) || ( _this->Stage == AppNCUStageDropped 
      ))
  {
    CoreRectView__OnSetBounds( &_this->MeshVector, _Const03C1 );
  }
  else
  {
    CoreRectView__OnSetBounds( &_this->MeshVector, _Const03CE );
  }

  CoreRectView__OnSetBounds( &_this->Extention, EwSetRectOrigin( _this->Extention.Super1.Bounds, 
  EwSetPointX( _this->Extention.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 290 )));
  CoreRectView__OnSetBounds( &_this->TypeText, EwSetRectOrigin( _this->TypeText.Super1.Bounds, 
  EwSetPointX( _this->TypeText.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 166 )));
  CoreRectView__OnSetBounds( &_this->UnitNum, EwSetRectOrigin( _this->UnitNum.Super1.Bounds, 
  EwSetPointX( _this->UnitNum.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 105 )));
  CoreRectView__OnSetBounds( &_this->ZoneNum, EwSetRectOrigin( _this->ZoneNum.Super1.Bounds, 
  EwSetPointX( _this->ZoneNum.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 51 )));
  CoreRectView__OnSetBounds( &_this->ZoneText, EwSetRectOrigin( _this->ZoneText.Super1.Bounds, 
  EwSetPointX( _this->ZoneText.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 14 )));
  CoreRectView__OnSetBounds( &_this->BatteryImage, EwSetRectOrigin( _this->BatteryImage.Super1.Bounds, 
  EwSetPointX( _this->BatteryImage.Super1.Bounds.Point1, _this->MeshVector.Super2.Bounds.Point1.X 
  + 262 )));
  ViewsText_OnSetVisible( &_this->NCUText, 0 );
  ViewsImage_OnSetVisible( &_this->BatteryImage, 1 );
  ViewsText_OnSetVisible( &_this->TypeText, 1 );
  ViewsText_OnSetVisible( &_this->UnitNum, 1 );
  ViewsText_OnSetVisible( &_this->ZoneNum, 1 );
  ViewsText_OnSetVisible( &_this->ZoneText, 1 );

  switch ( _this->Stage )
  {
    case AppNCUStageActivating :
      ViewsImage_OnSetColor( &_this->MeshVector.Frame1, AppMeshUnit_Hue( _this, 
      _this->RSSI ));
    break;

    case AppNCUStageUnknnown :
      ViewsImage_OnSetColor( &_this->MeshVector.Frame1, _Const030D );
    break;

    case AppNCUStageMeshing :
      ViewsImage_OnSetColor( &_this->MeshVector.Frame1, _Const03CF );
    break;

    case AppNCUStageDropped :
      ViewsImage_OnSetColor( &_this->MeshVector.Frame1, _Const03D0 );
    break;
  }

  if (( _this->flags & 16 ) != 0 )
  {
    AppApplication app = EwCastObject( CoreView__GetRoot( _this ), AppApplication 
      );

    if ( app != 0 )
    {
      if ( app->LevelAccess.AccessLevel > 2 )
      {
        ViewsImage_OnSetColor( &_this->MeshVector.Frame1, _Const03D1 );
      }
    }
  }

  if (( _this->flags & 2 ) != 0 )
  {
    ViewsImage_OnSetColor( &_this->MeshVector.Frame1, _Const03D2 );
  }

  ViewsImage_OnSetColor( &_this->MeshVector.Frame1, EwSetColorAlpha( ViewsImage_OnGetColor( 
  &_this->MeshVector.Frame1 ), alpha ));
  CoreGroup_InvalidateViewState((CoreGroup)&_this->MeshVector );
}

/* 'C' function for method : 'App::MeshUnit.OnSetStatus()' */
void AppMeshUnit_OnSetStatus( AppMeshUnit _this, XEnum value )
{
  if ( _this->Status == value )
    return;

  _this->Status = value;

  if ( _this->Status == AppRadioStatusDifferent )
    ;
  else
    ;
}

/* 'C' function for method : 'App::MeshUnit.Hue()' */
XColor AppMeshUnit_Hue( AppMeshUnit _this, XInt32 h )
{
  XInt32 HueRange;
  XInt32 val;
  XInt32 band;
  XColor res;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( h == -256 )
    return _Const03D3;

  h = h + 122;

  if ( h < 0 )
    h = 0;

  if ( h > 29 )
    h = 29;

  HueRange = 15;
  val = (( h % HueRange ) * 255 ) / HueRange;
  band = h / HueRange;
  res = _Const000E;

  if ( band == 0 )
  {
    res.Red = 255;
    res.Green = (XUInt8)val;
  }
  else
  {
    res.Red = (XUInt8)( 255 - val );
    res.Green = 255;
  }

  return res;
}

/* Variants derived from the class : 'App::MeshUnit' */
EW_DEFINE_CLASS_VARIANTS( AppMeshUnit )
EW_END_OF_CLASS_VARIANTS( AppMeshUnit )

/* Virtual Method Table (VMT) for the class : 'App::MeshUnit' */
EW_DEFINE_CLASS( AppMeshUnit, CoreGroup, "App::MeshUnit" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppMeshUnit_UpdateLayout,
  AppMeshUnit_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMeshUnit )

/* Initializer for the class 'App::MeshUnitItem' */
void AppMeshUnitItem__Init( AppMeshUnitItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppMeshUnit__Init( &_this->MeshUnit, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshUnitItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03D4 );
  CoreRectView__OnSetBounds( &_this->MeshUnit, _Const03D5 );
  CoreGroup_OnSetAlphaBlended((CoreGroup)&_this->MeshUnit, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->MeshUnit ), 0 );
}

/* Re-Initializer for the class 'App::MeshUnitItem' */
void AppMeshUnitItem__ReInit( AppMeshUnitItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppMeshUnit__ReInit( &_this->MeshUnit );
}

/* Finalizer method for the class 'App::MeshUnitItem' */
void AppMeshUnitItem__Done( AppMeshUnitItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshUnitItem );

  /* Finalize all embedded objects */
  AppMeshUnit__Done( &_this->MeshUnit );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshUnitItem' */
void AppMeshUnitItem__Mark( AppMeshUnitItem _this )
{
  EwMarkObject( &_this->MeshUnit );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMeshUnitItem_UpdateViewState( AppMeshUnitItem _this, XSet aState )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  CoreGroup_InvalidateViewState((CoreGroup)&_this->MeshUnit );
}

/* Variants derived from the class : 'App::MeshUnitItem' */
EW_DEFINE_CLASS_VARIANTS( AppMeshUnitItem )
EW_END_OF_CLASS_VARIANTS( AppMeshUnitItem )

/* Virtual Method Table (VMT) for the class : 'App::MeshUnitItem' */
EW_DEFINE_CLASS( AppMeshUnitItem, CoreGroup, "App::MeshUnitItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppMeshUnitItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMeshUnitItem )

/* Initializer for the class 'App::Access' */
void AppAccess__Init( AppAccess _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAccess );
}

/* Re-Initializer for the class 'App::Access' */
void AppAccess__ReInit( AppAccess _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Access' */
void AppAccess__Done( AppAccess _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAccess );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Access' */
void AppAccess__Mark( AppAccess _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::Access' */
EW_DEFINE_CLASS_VARIANTS( AppAccess )
EW_END_OF_CLASS_VARIANTS( AppAccess )

/* Virtual Method Table (VMT) for the class : 'App::Access' */
EW_DEFINE_CLASS( AppAccess, XObject, "App::Access" )
EW_END_OF_CLASS( AppAccess )

/* Initializer for the class 'App::LevelAccess' */
void AppLevelAccess__Init( AppLevelAccess _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessEventHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLevelAccess );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03D6 );
  _this->AccessLevel = 1;
  CoreTimer_OnSetPeriod( &_this->Timer, 60000 );
  _this->UserIndex = -1;
  _this->Timer.OnTrigger = EwNewSlot( _this, AppLevelAccess_Slot );
  _this->AccessEventHandler.OnEvent = EwNewSlot( _this, AppLevelAccess_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );
}

/* Re-Initializer for the class 'App::LevelAccess' */
void AppLevelAccess__ReInit( AppLevelAccess _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreTimer__ReInit( &_this->Timer );
  CoreSystemEventHandler__ReInit( &_this->AccessEventHandler );
}

/* Finalizer method for the class 'App::LevelAccess' */
void AppLevelAccess__Done( AppLevelAccess _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLevelAccess );

  /* Finalize all embedded objects */
  CoreTimer__Done( &_this->Timer );
  CoreSystemEventHandler__Done( &_this->AccessEventHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LevelAccess' */
void AppLevelAccess__Mark( AppLevelAccess _this )
{
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->AccessEventHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppLevelAccess_UpdateLayout( AppLevelAccess _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppLevelAccess_UpdateViewState( AppLevelAccess _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::LevelAccess.OnSetAccessLevel()' */
void AppLevelAccess_OnSetAccessLevel( AppLevelAccess _this, XInt8 value )
{
  XInt32 al;
  AppApplication app;

  if ( _this->AccessLevel == value )
    return;

  _this->AccessLevel = value;
  al = _this->AccessLevel;
  Command1( CMD_SET_ACCESS_LEVEL, al );
  app = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( app != 0 )
  {
    if ( _this->AccessLevel > 1 )
    {
      CoreTimer_OnSetEnabled( &_this->Timer, 1 );

      if ( _this->buzzing )
      {
        Command2( CMD_BUZZER, 2, 0 );
        _this->buzzing = 0;
      }

      EwRetainString( &app->LogOnButton.ButtonText, EwLoadString( &_Const03D7 ));
      app->LogOnButton.Icon = EwLoadResource( &AppKey2Bitmap, ResourcesBitmap );
    }
    else
    {
      CoreTimer_OnSetEnabled( &_this->Timer, 0 );

      if ( app != 0 )
      {
        EwRetainString( &app->LogOnButton.ButtonText, EwLoadString( &_Const0021 
        ));
        app->LogOnButton.Icon = EwLoadResource( &AppKeyBitmap, ResourcesBitmap );
        EwPostSignal( EwNewSlot( &app->AlarmsTabButton, AppTabButton_OnPress ), 
          ((XObject)_this ));
      }
    }

    CoreGroup_InvalidateViewState((CoreGroup)&app->LogOnButton );
    CoreGroup_InvalidateViewState((CoreGroup)&app->EvacuateButton );
    CoreGroup_InvalidateViewState((CoreGroup)&app->ResetButton );
    CoreGroup_InvalidateViewState((CoreGroup)&app->SilenceButton );
    CoreGroup_InvalidateViewState((CoreGroup)&app->TabButtonPull );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppLevelAccess_onEvent1( AppLevelAccess _this, XObject sender )
{
  AppAccess a;
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  a = EwCastObject( _this->AccessEventHandler.Context, AppAccess );
  app = EwCastObject( _this->Super3.Owner, AppApplication );

  if ( a->Level == 0 )
  {
    if ( !_this->KeySwitchOn )
    {
      AppLevelAccess_OnSetAccessLevel( _this, 1 );
      _this->UserIndex = -1;
    }
    else
    {
      AppLevelAccess_OnSetAccessLevel( _this, 2 );
      _this->UserIndex = -1;
    }
  }
  else
    if (( a->Level == 2 ) && ( _this->AccessLevel == 1 ))
    {
      _this->KeySwitchOn = 1;
      CoreGroup_OnSetEnabled((CoreGroup)&app->Settings.PushButton3, 0 );
      _this->UserIndex = -1;
      AppLevelAccess_OnSetAccessLevel( _this, 2 );
    }
    else
      if ( a->Level == 1 )
      {
        AppLevelAccess_OnSetAccessLevel( _this, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&app->Settings.PushButton3, 1 );
        _this->UserIndex = -1;
        _this->KeySwitchOn = 0;
      }
}

/* 'C' function for method : 'App::LevelAccess.Slot()' */
void AppLevelAccess_Slot( AppLevelAccess _this, XObject sender )
{
  XBool logout;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  logout = 0;
  {
    Command cmd;

    //  Command0( CMD_GET_LAST_TOUCH_TIME, &cmd );

    //  if ( now() - cmd.int0 > 100 * 60 * 10 )
      {
    //     logout = true;
      }
  }

  if ( logout )
  {
    AppLevelAccess_OnSetAccessLevel( _this, 1 );
  }
}

/* Variants derived from the class : 'App::LevelAccess' */
EW_DEFINE_CLASS_VARIANTS( AppLevelAccess )
EW_END_OF_CLASS_VARIANTS( AppLevelAccess )

/* Virtual Method Table (VMT) for the class : 'App::LevelAccess' */
EW_DEFINE_CLASS( AppLevelAccess, CoreGroup, "App::LevelAccess" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppLevelAccess_UpdateLayout,
  AppLevelAccess_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppLevelAccess )

/* This autoobject provides the default customization for the 'push button' widget 
   (WidgetSet::PushButton) in its small size variant. */
EW_DEFINE_AUTOOBJECT( AppSmallPushButton, WidgetSetPushButtonConfig )

/* Initializer for the auto object 'App::SmallPushButton' */
void AppSmallPushButton__Init( WidgetSetPushButtonConfig _this )
{
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
  WidgetSetPushButtonConfig_OnSetLabelColorFocused( _this, _Const0000 );
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const02FC );
  WidgetSetPushButtonConfig_OnSetLabelColorDefault( _this, _Const000E );
  WidgetSetPushButtonConfig_OnSetLabelMarginBottom( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginTop( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginRight( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelMarginLeft( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconTintDisabled( _this, _Const02A0 );
  WidgetSetPushButtonConfig_OnSetIconTintDefault( _this, _Const029F );
  WidgetSetPushButtonConfig_OnSetIconMarginBottom( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginTop( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginRight( _this, 4 );
  WidgetSetPushButtonConfig_OnSetIconMarginLeft( _this, 4 );
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &ResourcesFontSmall, 
  ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( _this, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameFocused( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( _this, 0 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( _this, 1 );
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonSmall, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetWidgetMinSize( _this, _Const03D8 );
}

/* Table with links to derived variants of the auto object : 'App::SmallPushButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppSmallPushButton )
EW_END_OF_AUTOOBJECT_VARIANTS( AppSmallPushButton )

/* Initializer for the class 'App::RoundBox' */
void AppRoundBox__Init( AppRoundBox _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->StrokePath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path2, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppRoundBox );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03D9 );
  CoreView_OnSetLayout((CoreView)&_this->FillPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const03D9 );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const03DA );
  CoreView_OnSetLayout((CoreView)&_this->StrokePath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->StrokePath, _Const03D9 );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _Const000E );
  ViewsStrokePath_OnSetWidth( &_this->StrokePath, 2.000000f );
  _this->Radius1 = 5;
  _this->LineColour = _Const000E;
  _this->FillColour = _Const03DB;
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const03D9 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const03DC ));
  ViewsText_OnSetColor( &_this->Text, _Const03DD );
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StrokePath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path2 );
  ViewsStrokePath_OnSetPath( &_this->StrokePath, &_this->Path1 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontSmall, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::RoundBox' */
void AppRoundBox__ReInit( AppRoundBox _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  ViewsStrokePath__ReInit( &_this->StrokePath );
  GraphicsPath__ReInit( &_this->Path2 );
  GraphicsPath__ReInit( &_this->Path1 );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::RoundBox' */
void AppRoundBox__Done( AppRoundBox _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppRoundBox );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  ViewsStrokePath__Done( &_this->StrokePath );
  GraphicsPath__Done( &_this->Path2 );
  GraphicsPath__Done( &_this->Path1 );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::RoundBox' */
void AppRoundBox__Mark( AppRoundBox _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->StrokePath );
  EwMarkObject( &_this->Path2 );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppRoundBox_UpdateLayout( AppRoundBox _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _this->LineColour );
  ViewsFillPath_OnSetColor( &_this->FillPath, _this->FillColour );
  AppRoundBox_DrawBox( _this, (XInt16)_this->StrokePath.Width / 2, (XInt16)_this->StrokePath.Width 
  / 2, EwGetRectW( _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width, EwGetRectH( 
  _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width );
  AppRoundBox_DrawFillBox( _this, (XInt16)_this->StrokePath.Width / 2, (XInt16)_this->StrokePath.Width 
  / 2, EwGetRectW( _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width, EwGetRectH( 
  _this->Super2.Bounds ) - (XInt16)_this->StrokePath.Width );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppRoundBox_UpdateViewState( AppRoundBox _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _this->LineColour );
  ViewsFillPath_OnSetColor( &_this->FillPath, _this->FillColour );
}

/* 'C' function for method : 'App::RoundBox.DrawFillBox()' */
void AppRoundBox_DrawFillBox( AppRoundBox _this, XInt32 x, XInt32 y, XInt32 width, 
  XInt32 height )
{
  GraphicsPath_InitSubPath( &_this->Path2, 0, 24 );
  GraphicsPath_Begin( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path2, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path2, 0 );
}

/* 'C' function for method : 'App::RoundBox.DrawBox()' */
void AppRoundBox_DrawBox( AppRoundBox _this, XInt32 x, XInt32 y, XInt32 width, XInt32 
  height )
{
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + 0 ));
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)( y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( x + width ) - _this->Radius1 
  ), (XFloat)(( y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  0.000000f, 90.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)(( 
  y + height ) - _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)( x + _this->Radius1 ), (XFloat)( 
  y + _this->Radius1 ), (XFloat)_this->Radius1, (XFloat)_this->Radius1, 180.000000f, 
  270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
}

/* Variants derived from the class : 'App::RoundBox' */
EW_DEFINE_CLASS_VARIANTS( AppRoundBox )
EW_END_OF_CLASS_VARIANTS( AppRoundBox )

/* Virtual Method Table (VMT) for the class : 'App::RoundBox' */
EW_DEFINE_CLASS( AppRoundBox, CoreGroup, "App::RoundBox" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppRoundBox_UpdateLayout,
  AppRoundBox_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppRoundBox )

/* Initializer for the class 'App::DeviceInfo' */
void AppDeviceInfo__Init( AppDeviceInfo _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppRoundBox__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  ViewsText__Init( &_this->rssi, &_this->_XObject, 0 );
  ViewsText__Init( &_this->secondary, &_this->_XObject, 0 );
  ViewsText__Init( &_this->status, &_this->_XObject, 0 );
  ViewsText__Init( &_this->battery, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text11, &_this->_XObject, 0 );
  ViewsText__Init( &_this->live, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_sent, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_lost, &_this->_XObject, 0 );
  ViewsText__Init( &_this->stats_success, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text6, &_this->_XObject, 0 );
  ViewsText__Init( &_this->battery1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDeviceInfo );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03DE );
  _this->Super1.FillColour = _Const03DF;
  ViewsText_OnSetVisible( &_this->Super1.Text, 0 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const03E0 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const03E1 ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text3, _Const03E2 );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const03E3 ));
  ViewsText_OnSetColor( &_this->Text3, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text4, _Const03E4 );
  ViewsText_OnSetAlignment( &_this->Text4, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const03E5 ));
  ViewsText_OnSetColor( &_this->Text4, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text5, _Const03E6 );
  ViewsText_OnSetAlignment( &_this->Text5, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const03E7 ));
  ViewsText_OnSetColor( &_this->Text5, _Const000E );
  CoreRectView__OnSetBounds( &_this->rssi, _Const03E8 );
  ViewsText_OnSetAlignment( &_this->rssi, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->rssi, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->rssi, _Const000E );
  CoreRectView__OnSetBounds( &_this->secondary, _Const03E9 );
  ViewsText_OnSetAlignment( &_this->secondary, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->secondary, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->secondary, _Const000E );
  CoreRectView__OnSetBounds( &_this->status, _Const03EA );
  ViewsText_OnSetAlignment( &_this->status, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->status, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->status, _Const000E );
  CoreRectView__OnSetBounds( &_this->battery, _Const03EB );
  ViewsText_OnSetAlignment( &_this->battery, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->battery, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->battery, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text11, _Const03EC );
  ViewsText_OnSetAlignment( &_this->Text11, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text11, EwLoadString( &_Const03ED ));
  ViewsText_OnSetColor( &_this->Text11, _Const000E );
  CoreRectView__OnSetBounds( &_this->live, _Const03EE );
  ViewsText_OnSetAlignment( &_this->live, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->live, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->live, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_4, _Const03EF );
  ViewsText_OnSetAlignment( &_this->stats_4, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_4, EwLoadString( &_Const03F0 ));
  ViewsText_OnSetColor( &_this->stats_4, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_sent, _Const03F1 );
  ViewsText_OnSetAlignment( &_this->stats_sent, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_sent, EwLoadString( &_Const03F2 ));
  ViewsText_OnSetColor( &_this->stats_sent, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_1, _Const03F3 );
  ViewsText_OnSetAlignment( &_this->stats_1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_1, EwLoadString( &_Const03F4 ));
  ViewsText_OnSetColor( &_this->stats_1, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_3, _Const03F5 );
  ViewsText_OnSetAlignment( &_this->stats_3, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->stats_3, EwLoadString( &_Const03F6 ));
  ViewsText_OnSetColor( &_this->stats_3, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_lost, _Const03F7 );
  ViewsText_OnSetAlignment( &_this->stats_lost, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_lost, EwLoadString( &_Const03F2 ));
  ViewsText_OnSetColor( &_this->stats_lost, _Const000E );
  CoreRectView__OnSetBounds( &_this->stats_success, _Const03F8 );
  ViewsText_OnSetAlignment( &_this->stats_success, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->stats_success, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->stats_success, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text6, _Const03F9 );
  ViewsText_OnSetAlignment( &_this->Text6, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text6, EwLoadString( &_Const03FA ));
  ViewsText_OnSetColor( &_this->Text6, _Const000E );
  CoreRectView__OnSetBounds( &_this->battery1, _Const03FB );
  ViewsText_OnSetAlignment( &_this->battery1, ViewsTextAlignmentAlignHorzLeft | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->battery1, EwLoadString( &_Const01B3 ));
  ViewsText_OnSetColor( &_this->battery1, _Const000E );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const03FC );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const03FD );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const03FE );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const03FF );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const02CF 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0400 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0401 
  ));
  CoreRectView__OnSetBounds( &_this->Text2, _Const0402 );
  ViewsText_OnSetEllipsis( &_this->Text2, 1 );
  ViewsText_OnSetAutoSize( &_this->Text2, 0 );
  ViewsText_OnSetWrapText( &_this->Text2, 1 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const0403 ));
  ViewsText_OnSetColor( &_this->Text2, _Const0404 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->rssi ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->secondary ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->status ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->battery ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->live ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_sent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_lost ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->stats_success ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->battery1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->rssi, EwLoadResource( &FlatFontS, ResourcesFont ));
  ViewsText_OnSetFont( &_this->secondary, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->status, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->battery, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text11, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->live, EwLoadResource( &FlatFontS, ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_4, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_sent, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppDeviceInfo_Slot );
  ViewsText_OnSetFont( &_this->stats_1, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_3, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->stats_lost, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->stats_success, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text6, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->battery1, EwLoadResource( &FlatFontS, ResourcesFont 
  ));
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppDeviceInfo_Close );
  _this->PushButton.OnActivate = EwNewSlot( _this, AppDeviceInfo_Reset );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppDeviceInfo_RemoveDevice );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::DeviceInfo' */
void AppDeviceInfo__ReInit( AppDeviceInfo _this )
{
  /* At first re-initialize the super class ... */
  AppRoundBox__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text3 );
  ViewsText__ReInit( &_this->Text4 );
  ViewsText__ReInit( &_this->Text5 );
  ViewsText__ReInit( &_this->rssi );
  ViewsText__ReInit( &_this->secondary );
  ViewsText__ReInit( &_this->status );
  ViewsText__ReInit( &_this->battery );
  ViewsText__ReInit( &_this->Text11 );
  ViewsText__ReInit( &_this->live );
  ViewsText__ReInit( &_this->stats_4 );
  ViewsText__ReInit( &_this->stats_sent );
  CoreTimer__ReInit( &_this->Timer );
  ViewsText__ReInit( &_this->stats_1 );
  ViewsText__ReInit( &_this->stats_3 );
  ViewsText__ReInit( &_this->stats_lost );
  ViewsText__ReInit( &_this->stats_success );
  ViewsText__ReInit( &_this->Text6 );
  ViewsText__ReInit( &_this->battery1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'App::DeviceInfo' */
void AppDeviceInfo__Done( AppDeviceInfo _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDeviceInfo );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text3 );
  ViewsText__Done( &_this->Text4 );
  ViewsText__Done( &_this->Text5 );
  ViewsText__Done( &_this->rssi );
  ViewsText__Done( &_this->secondary );
  ViewsText__Done( &_this->status );
  ViewsText__Done( &_this->battery );
  ViewsText__Done( &_this->Text11 );
  ViewsText__Done( &_this->live );
  ViewsText__Done( &_this->stats_4 );
  ViewsText__Done( &_this->stats_sent );
  CoreTimer__Done( &_this->Timer );
  ViewsText__Done( &_this->stats_1 );
  ViewsText__Done( &_this->stats_3 );
  ViewsText__Done( &_this->stats_lost );
  ViewsText__Done( &_this->stats_success );
  ViewsText__Done( &_this->Text6 );
  ViewsText__Done( &_this->battery1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  AppRoundBox__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DeviceInfo' */
void AppDeviceInfo__Mark( AppDeviceInfo _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->rssi );
  EwMarkObject( &_this->secondary );
  EwMarkObject( &_this->status );
  EwMarkObject( &_this->battery );
  EwMarkObject( &_this->Text11 );
  EwMarkObject( &_this->live );
  EwMarkObject( &_this->stats_4 );
  EwMarkObject( &_this->stats_sent );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->stats_1 );
  EwMarkObject( &_this->stats_3 );
  EwMarkObject( &_this->stats_lost );
  EwMarkObject( &_this->stats_success );
  EwMarkObject( &_this->Text6 );
  EwMarkObject( &_this->battery1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Text2 );

  /* Give the super class a chance to mark its objects and references */
  AppRoundBox__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDeviceInfo_UpdateViewState( AppDeviceInfo _this, XSet aState )
{
  XInt32 Status;
  XInt32 minutes;
  XInt16 second;
  XInt32 RSSI;
  XUInt32 tx;
  XUInt32 received;
  XInt32 uny;
  XInt32 primary;
  XInt32 backup;
  XString location;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  Status = -1;
  minutes = -1;
  second = -1;
  RSSI = -256;
  tx = 0;
  received = 0;
  uny = _this->device;
  primary = 0;
  backup = 0;
  location = EwLoadString( &_Const0405 );

  if ( _this->device != -1 )
    {
      Command cmd;
      cmd.int0 = uny;
      Command0( CMD_GET_RADIO_UNIT, &cmd );  

      RadioUnit* ru = (RadioUnit*) cmd.int0;

      if ( ru == NULL ) return;

       RSSI          = ru->rssiprimary;

       if (  ru->starttime == 0 )
       {
          minutes = -1;
       }
       else
       {
           minutes = ( now( ) - ru->starttime ) / 60;
       }
       second        = ru->secondary;
       tx            = ru->sent;
       received      = ru->received;  

       primary = ru->battprimary;
       backup = ru->battbackup;

       DeviceConfig* dc = get_dev_config( ru->unit );

       if ( dc != NULL )
       {
          if ( dc->location[ 0] == 0 )
          {
            location = EwNewStringAnsi( "(Location unspecified)" );
          }
          else
          {
            location = EwNewStringAnsi( dc->location ); 
          }

          if ( location[ 0] == 0 ) location = EwNewStringAnsi( "(Location unspecified)" );

          if ( dc->type == ru->combination )
          {
             Status = 1;   // ok

          }
          else
          {
             Status = 3;    // different ?
          }
       }
       else
       { 
          Status = 2;    // additional  +
       }
    }

  if ( second != -1 )
  {
    ViewsText_OnSetString( &_this->secondary, EwConcatString( EwLoadString( &_Const0406 
    ), EwNewStringInt( second, 0, 10 )));
  }
  else
  {
    ViewsText_OnSetString( &_this->secondary, EwLoadString( &_Const01B3 ));
  }

  switch ( Status )
  {
    case 0 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0407 ));
    break;

    case 1 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0408 ));
    break;

    case 2 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const0409 ));
    break;

    case 3 :
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const040A ));
    break;

    default : 
      ViewsText_OnSetString( &_this->status, EwLoadString( &_Const01B3 ));
  }

  if ( RSSI != -256 )
    ViewsText_OnSetString( &_this->rssi, EwNewStringInt( RSSI, 0, 10 ));
  else
    ViewsText_OnSetString( &_this->rssi, EwLoadString( &_Const01B3 ));

  if ( tx > 10 )
    tx = 10;

  if ( received > 10 )
    received = 10;

  ViewsText_OnSetString( &_this->stats_sent, EwConcatString( EwNewStringUInt( tx, 
  0, 10 ), EwLoadString( &_Const040B )));
  ViewsText_OnSetString( &_this->stats_lost, EwConcatString( EwNewStringUInt( received, 
  0, 10 ), EwLoadString( &_Const040B )));
  ViewsText_OnSetString( &_this->battery, EwConcatString( EwNewStringFloat((XFloat)primary 
  / 1000.000000f, 0, 2 ), EwLoadString( &_Const01EF )));
  ViewsText_OnSetString( &_this->battery1, EwConcatString( EwNewStringFloat((XFloat)backup 
  / 1000.000000f, 0, 2 ), EwLoadString( &_Const01EF )));

  if ( tx == 0 )
  {
    ViewsText_OnSetString( &_this->stats_success, EwLoadString( &_Const03BB ));
  }
  else
  {
    ViewsText_OnSetString( &_this->stats_success, EwConcatString( EwNewStringFloat(((XFloat)received 
    * 100.000000f ) / (XFloat)tx, 0, 2 ), EwLoadString( &_Const040C )));
  }

  ViewsText_OnSetString( &_this->Text2, location );

  if ( minutes != -1 )
  {
    if ( minutes < 60 )
    {
      ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt( minutes, 
      0, 10 ), EwLoadString( &_Const040D )));
    }
    else
      if ( minutes < 1440 )
      {
        ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt( minutes 
        / 60, 0, 10 ), EwLoadString( &_Const040E )));
      }
      else
        if ( minutes < 10080 )
        {
          ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt(( 
          minutes / 60 ) / 24, 0, 10 ), EwLoadString( &_Const040F )));
        }
        else
          if ( minutes < 525600 )
          {
            ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt((( 
            minutes / 60 ) / 24 ) / 7, 0, 10 ), EwLoadString( &_Const0410 )));
          }
          else
          {
            ViewsText_OnSetString( &_this->live, EwConcatString( EwNewStringInt((( 
            minutes / 60 ) / 24 ) / 30, 0, 10 ), EwLoadString( &_Const0411 )));
          }
  }
  else
  {
    ViewsText_OnSetString( &_this->live, EwLoadString( &_Const0412 ));
  }
}

/* 'C' function for method : 'App::DeviceInfo.OnSetdevice()' */
void AppDeviceInfo_OnSetdevice( AppDeviceInfo _this, XInt32 value )
{
  if ( _this->device == value )
    return;

  _this->device = value;
  Command1( CMD_SET_CURRENT_DEVICE, value );

  if ( _this->device == -1 )
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  }
  else
  {
    CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  }

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::DeviceInfo.Slot()' */
void AppDeviceInfo_Slot( AppDeviceInfo _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    if ( _this->device != -1 )
    {
      CoreGroup_InvalidateViewState((CoreGroup)_this );
    }
  }
}

/* 'C' function for method : 'App::DeviceInfo.Reset()' */
void AppDeviceInfo_Reset( AppDeviceInfo _this, XObject sender )
{
  XInt32 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  u = _this->device;

  if ( u != -1 )
  {
    Command1( CMD_SET_CURRENT_DEVICE,(int) u );
    ViewsText_OnSetString( &_this->stats_lost, EwLoadString( &_Const0413 ));
    ViewsText_OnSetString( &_this->stats_sent, EwLoadString( &_Const0413 ));
    ViewsText_OnSetString( &_this->stats_success, EwLoadString( &_Const03BB ));
  }
}

/* 'C' function for method : 'App::DeviceInfo.Close()' */
void AppDeviceInfo_Close( AppDeviceInfo _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( CoreGroup_OnGetVisible((CoreGroup)_this ))
  {
    AppMeshTree mt;
    CoreGroup__OnSetVisible( _this, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)_this, 0 );
    CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
    AppDeviceInfo_OnSetdevice( _this, -1 );
    mt = EwCastObject( _this->Super4.Owner, AppMeshTree );
    CoreVerticalList_OnSetSelectedItem( &mt->ListViewer.VerticalList, -1 );
    CoreVerticalList_InvalidateItems( &mt->ListViewer.VerticalList, mt->current_item, 
    mt->current_item );
    mt->current_item = -1;
  }
}

/* 'C' function for method : 'App::DeviceInfo.RemoveDevice()' */
void AppDeviceInfo_RemoveDevice( AppDeviceInfo _this, XObject sender )
{
  XInt32 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  u = _this->device;

  if ( u != -1 )
  {
    AppConfirmPopup cp = EwNewObject( AppConfirmPopup, 0 );
    ViewsText_OnSetString( &cp->Text1, EwLoadString( &_Const0414 ));
    AppConfirmPopup_ShowThen( cp, CoreView__GetRoot( _this ), EwNewSlot( _this, 
    AppDeviceInfo_RemoveDeviceGo ));
  }
}

/* 'C' function for method : 'App::DeviceInfo.RemoveDeviceGo()' */
void AppDeviceInfo_RemoveDeviceGo( AppDeviceInfo _this, XObject sender )
{
  XInt32 u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  u = _this->device;

  if ( u != -1 )
  {
    Command1( CMD_REMOVE_DEVICE,(int) u );
  }
}

/* Variants derived from the class : 'App::DeviceInfo' */
EW_DEFINE_CLASS_VARIANTS( AppDeviceInfo )
EW_END_OF_CLASS_VARIANTS( AppDeviceInfo )

/* Virtual Method Table (VMT) for the class : 'App::DeviceInfo' */
EW_DEFINE_CLASS( AppDeviceInfo, AppRoundBox, "App::DeviceInfo" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppRoundBox_UpdateLayout,
  AppDeviceInfo_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDeviceInfo )

/* Initializer for the class 'App::DFUPopup' */
void AppDFUPopup__Init( AppDFUPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDFUPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0415 );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const0416 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0417 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0418 ));
  CoreRectView__OnSetBounds( &_this->Text1, _Const0419 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const041A ));
  CoreTimer_OnSetPeriod( &_this->Timer, 150 );
  CoreTimer_OnSetPeriod( &_this->Timer1, 150 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontSmall, ResourcesFont 
  ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppDFUPopup_Activate );
  _this->Timer1.OnTrigger = EwNewSlot( _this, AppDFUPopup_Activate1 );
}

/* Re-Initializer for the class 'App::DFUPopup' */
void AppDFUPopup__ReInit( AppDFUPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  CoreTimer__ReInit( &_this->Timer );
  CoreTimer__ReInit( &_this->Timer1 );
}

/* Finalizer method for the class 'App::DFUPopup' */
void AppDFUPopup__Done( AppDFUPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDFUPopup );

  /* Finalize all embedded objects */
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  CoreTimer__Done( &_this->Timer );
  CoreTimer__Done( &_this->Timer1 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DFUPopup' */
void AppDFUPopup__Mark( AppDFUPopup _this )
{
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Timer );
  EwMarkObject( &_this->Timer1 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::DFUPopup.Activate()' */
void AppDFUPopup_Activate( AppDFUPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
  CoreTimer_OnSetEnabled( &_this->Timer1, 1 );
}

/* 'C' function for method : 'App::DFUPopup.Activate1()' */
void AppDFUPopup_Activate1( AppDFUPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  {
    Command cmd;

    Command0( CMD_DFU_MODE, &cmd );
  }
}

/* Variants derived from the class : 'App::DFUPopup' */
EW_DEFINE_CLASS_VARIANTS( AppDFUPopup )
EW_END_OF_CLASS_VARIANTS( AppDFUPopup )

/* Virtual Method Table (VMT) for the class : 'App::DFUPopup' */
EW_DEFINE_CLASS( AppDFUPopup, AppPopup, "App::DFUPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDFUPopup )

/* Initializer for the class 'App::LibClass' */
void AppLibClass__Init( AppLibClass _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLibClass );
}

/* Re-Initializer for the class 'App::LibClass' */
void AppLibClass__ReInit( AppLibClass _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::LibClass' */
void AppLibClass__Done( AppLibClass _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLibClass );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LibClass' */
void AppLibClass__Mark( AppLibClass _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::LibClass.GetConfig()' */
AppDeviceConfig AppLibClass_GetConfig( AppLibClass _this, XInt16 unit_num )
{
  XInt32 ptr = 0;

  ptr = (int) get_dev_config( unit_num );
  return AppLibClass_GetConfigFromPtr( _this, ptr );
}

/* 'C' function for method : 'App::LibClass.NumZones()' */
XInt32 AppLibClass_NumZones( AppLibClass _this )
{
  XInt32 numzones;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  numzones = 32;
  {
    Command cmd;

    Command0( CMD_GET_NUM_ZONE_LEDS, &cmd );
    numzones = cmd.int0;
  }
  return numzones;
}

/* 'C' function for method : 'App::LibClass.TypeName()' */
XString AppLibClass_TypeName( AppLibClass _this, XEnum type )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( type )
  {
    case AppChannelTypeNone :
      return 0;

    case AppChannelTypeSmoke :
      return EwLoadString( &_Const041B );

    case AppChannelTypeHeatB :
      return EwLoadString( &_Const041C );

    case AppChannelTypeCO :
      return EwLoadString( &_Const041D );

    case AppChannelTypePIR :
      return EwLoadString( &_Const041E );

    case AppChannelTypeSounder :
      return EwLoadString( &_Const041F );

    case AppChannelTypeBeacon :
      return EwLoadString( &_Const0420 );

    case AppChannelTypeFireCallpoint :
      return EwLoadString( &_Const0421 );

    case AppChannelTypeStatus_indicator_led :
      return EwLoadString( &_Const0422 );

    case AppChannelTypeVisualIndicator :
      return EwLoadString( &_Const0423 );

    case AppChannelTypeSounderVisualIndicatorCombined :
      return EwLoadString( &_Const0424 );

    case AppChannelTypeMedicalCallpoint :
      return EwLoadString( &_Const0425 );

    case AppChannelTypeEvacCallpoint :
      return EwLoadString( &_Const0426 );

    case AppChannelTypeOutputRouting :
      return EwLoadString( &_Const0427 );

    case AppChannelTypeHeatA1R :
      return EwLoadString( &_Const0428 );

    case AppChannelTypePanelAlarmInput :
      return EwLoadString( &_Const0429 );

    case AppChannelTypePanelAlarmRelay :
      return EwLoadString( &_Const042A );

    case AppChannelTypePanelCallpoint :
      return EwLoadString( &_Const042B );

    case AppChannelTypePanelFaultInput :
      return EwLoadString( &_Const042C );

    case AppChannelTypePanelFaultRelay :
      return EwLoadString( &_Const042D );

    case AppChannelTypePanelFireRelay :
      return EwLoadString( &_Const042E );

    case AppChannelTypePanelRoutingAck :
      return EwLoadString( &_Const042F );

    case AppChannelTypePanelRoutingOutput :
      return EwLoadString( &_Const0430 );

    case AppChannelTypePanelSilenceInput :
      return EwLoadString( &_Const0431 );

    case AppChannelTypePanelSoundersRelay :
      return EwLoadString( &_Const0432 );

    case AppChannelTypePanelFunction1 :
      return EwLoadString( &_Const0433 );

    case AppChannelTypePanelFunction2 :
      return EwLoadString( &_Const0434 );

    case AppChannelTypePanelEvacuate :
      return EwLoadString( &_Const023D );

    default : 
    {
      if (( type <= AppChannelTypeInput32 ) && ( type >= AppChannelTypeInput1 ))
        return EwConcatString( EwLoadString( &_Const0435 ), EwNewStringInt(( type 
          + 1 ) - AppChannelTypeInput1, 0, 10 ));

      if (( type <= AppChannelTypeOutput32 ) && ( type >= AppChannelTypeOutput1 
          ))
        return EwConcatString( EwLoadString( &_Const0435 ), EwNewStringInt(( type 
          + 1 ) - AppChannelTypeOutput1, 0, 10 ));
    }
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.SetConfig()' */
XBool AppLibClass_SetConfig( AppLibClass _this, XInt16 unit_num, XBool transmit, 
  AppDeviceConfig dev )
{
  XInt32 result;
  XInt32 wp;
  XInt32 ok;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  result = 0;
  wp = 10;
  ok = 0;
  {
    wp = CMD_ERR_WRITE_PROTECTED;
    ok = CMD_OK;

    int i = 0;

    DeviceConfig d;
    Command cmd;

    d.type      = dev->combination;
    EwStringToAnsi( dev->location, d.location, SITE_MAX_STRING_LEN, '^' ); 
    EwStringToAnsi( dev->combiname, d.typestring, SITE_MAX_STRING_LEN, '^' ); 
    d.numParams = dev->numparams;
    d.unit      = dev->unitnum;
    d.zone      = dev->zonenum;
    d.numInputs = dev->numinputs;
    d.numOutputs = dev->numoutputs;
    d.flags      = dev->flags;

    while ( dev->inputs[ i] != NULL && i < d.numInputs )
    {
       d.input[ i].flags  = (uint16_t) dev->inputs[ i]->flags;
       d.input[ i].delay  = dev->inputs[ i]->delay;
       d.input[ i].action = dev->inputs[ i]->action;
       d.input[ i].type   = (ChannelType) dev->inputs[ i]->type;
       i++;
    }
    i = 0;
    while ( dev->outputs[ i] != NULL && i < d.numOutputs )
    {
       d.output[ i].flags  = (uint16_t) dev->outputs[ i]->flags;
       d.output[ i].delay1 = dev->outputs[ i]->delay1;
       d.output[ i].delay2 = dev->outputs[ i]->delay2;

       d.output[ i].actions = dev->outputs[ i]->actions;
       d.output[ i].type   = (ChannelType) dev->outputs[ i]->type;
       i++;
    }
    for( i = 0; i < d.numParams; i++ )
    {
       if ( dev->params[ i] != NULL )
       {
         d.param[ i].code = (ParamType) dev->params[ i]->code;
         d.param[ i].channel =          dev->params[ i]->channel;
         d.param[ i].value =            dev->params[ i]->value;
         d.param[ i].min =              dev->params[ i]->min;
         d.param[ i].max =              dev->params[ i]->max;
         EwStringToAnsi( dev->params[ i]->name, d.param[ i].name, SITE_MAX_STRING_LEN, '^' ); 
       }
    }

    cmd.int0 = unit_num;  // dest address
    cmd.int1 = (int) &d;        // new device data
    cmd.int2 = (int) transmit;

    result = Command0( CMD_SET_DEVICE_ALL, &cmd );
  }

  if (( result == wp ) && transmit )
  {
    CoreSystemEvent_Trigger( &EwGetAutoObject( &AppDevices, AppDeviceClass )->WriteProtectedEvent, 
    0, 0 );
  }

  return (XBool)( result == ok );
}

/* 'C' function for method : 'App::LibClass.GetParameter()' */
AppParameter AppLibClass_GetParameter( AppLibClass _this, XInt16 unitnum, XUInt8 
  index )
{
  AppParameter param;
  XString name;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  param = EwNewObject( AppParameter, 0 );
  name = 0;

  if ( param != 0 )
  {
    {
      if ( index < SITE_MAX_CHANNEL_PARAMS )
      {
        DeviceConfig* d = get_dev_config( unitnum );
        Parameter* p = d->param + index;

        if ( d != NULL ) 
        {         
          param->code = (ParamType) p->code;
          param->channel =  p->channel;
          param->value   =  p->value;
          param->min     =  p->min;
          param->max     =  p->max;
          name = EwNewStringAnsi( p->name );     
        }
        else
        {
          return NULL;
        }
      }
    }
    EwRetainString( &param->name, name );
    return param;
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.NumDevsInZone()' */
XInt32 AppLibClass_NumDevsInZone( AppLibClass _this, XInt32 zone )
{
  XInt32 numdevs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  numdevs = 4;
  numdevs = get_num_devs_in_zone( zone );
  return numdevs;
}

/* 'C' function for method : 'App::LibClass.GetDevInZone()' */
XInt16 AppLibClass_GetDevInZone( AppLibClass _this, XInt32 zone, XInt32 devno )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = zone;
    cmd.int1 = devno;
    Command0( CMD_GET_DEV_IN_ZONE, &cmd );
    DeviceConfig* device = (DeviceConfig*) cmd.int0;

    return device->unit;
  }
  return (XInt16)( devno + 1 );
}

/* Wrapper function for the non virtual method : 'App::LibClass.GetDevInZone()' */
XInt16 AppLibClass__GetDevInZone( void* _this, XInt32 zone, XInt32 devno )
{
  return AppLibClass_GetDevInZone((AppLibClass)_this, zone, devno );
}

/* 'C' function for method : 'App::LibClass.GetDevice()' */
AppDevice AppLibClass_GetDevice( AppLibClass _this, XInt16 unit_num )
{
  AppDevice dev;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  dev = EwNewObject( AppDevice, 0 );
  {
    Command cmd;

    cmd.int0 = (int)unit_num & 0xFFFF;
    Command0( CMD_FIND_DEVICE_FROM_UNIT, &cmd );

    Device* d = (Device*) cmd.int0;

    if ( d != NULL ) 
    {
      for( int n = 0; n < sizeof(dev->flags)/sizeof(*dev->flags); n++ )
      {
         dev->flags[n] = d->flags[n];    
      }
      dev->settings = d->settings;

      for( int n = 0; n < SITE_MAX_OUTPUT_CHANNELS; n++ )
      {
         dev->menuSelection[ n] = ( d->menuSelection[ n/2] >> (( n&1) * 4 )) & 15;    
      } 

      for( int n = 0; n < sizeof(d->analogue) ; n++ )
      {
         dev->val[ n] = d->analogue[ n];
      }
      return dev; 
    }
  }
  return 0;
}

/* 'C' function for method : 'App::LibClass.GetRadio()' */
AppRadioUnit AppLibClass_GetRadio( AppLibClass _this, XInt32 unit_num )
{
  XInt32 ptr;

  {
    Command cmd;

    cmd.int0 = unit_num;
    Command0( CMD_GET_RADIO_UNIT, &cmd );  

    ptr = cmd.int0;
  }
  return AppLibClass_GetRadioFromPtr( _this, ptr );
}

/* 'C' function for method : 'App::LibClass.NumZonesWithDevices()' */
XInt32 AppLibClass_NumZonesWithDevices( AppLibClass _this )
{
  XInt32 z;
  XInt32 usedzones = 0;

  for ( z = 1; z <= 96; z = z + 1 )
  {
    if ( AppLibClass_NumDevsInZone( _this, z ) > 0 )
      usedzones = usedzones + 1;
  }

  return usedzones;
}

/* 'C' function for method : 'App::LibClass.GetZoneFlags()' */
XSet AppLibClass_GetZoneFlags( AppLibClass _this, XInt16 zone )
{
  XSet zf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  zf = 0;
  {
    Command cmd;
    cmd.int0 = zone;
    Command0( CMD_GET_ZONE_FLAGS, &cmd );

    zf = (AppZoneFlags) cmd.int0;
  }
  return zf;
}

/* 'C' function for method : 'App::LibClass.SetZoneFlags()' */
void AppLibClass_SetZoneFlags( AppLibClass _this, XInt16 zone, XSet flags )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  Command2( CMD_SET_ZONE_FLAGS, zone, flags );
}

/* 'C' function for method : 'App::LibClass.SetDevice()' */
void AppLibClass_SetDevice( AppLibClass _this, XInt16 unit_num, AppDevice dev )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = (int)unit_num & 0xFFFF;
    Command0( CMD_FIND_DEVICE_FROM_UNIT, &cmd );

    Device* d = (Device*) cmd.int0;

    if ( d != NULL ) 
    {
      for( int n = 0; n < sizeof(dev->flags)/sizeof(*dev->flags); n++ )
      {
         d->flags[ n] = dev->flags[ n];    
      }

      d->settings = dev->settings;

      for( int n = 0; n < (SITE_MAX_OUTPUT_CHANNELS + 1)/2; n++ )
      {
         d->menuSelection[ n] = dev->menuSelection[ n*2] | (dev->menuSelection[ n*2+1] << 4) ;    
      } 
    }
  }
}

/* 'C' function for method : 'App::LibClass.SwitchOutput()' */
void AppLibClass_SwitchOutput( AppLibClass _this, XInt16 UnitNum, XInt8 ChanNum, 
  XEnum profile, XBool state )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  {
    Command cmd;

    cmd.int0 = (int) UnitNum;
    cmd.int1 = (int) ChanNum;
    cmd.int2 = (int) state;
    cmd.int3 = (int) profile;

    Command0( CMD_SET_OUTPUT_CHANNEL, &cmd ) == CMD_OK;
  }
}

/* 'C' function for method : 'App::LibClass.ProfileName()' */
XString AppLibClass_ProfileName( AppLibClass _this, XEnum profile )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( profile )
  {
    case AppProfileFire :
      return EwLoadString( &_Const01B6 );

    case AppProfileFirstAid :
      return EwLoadString( &_Const02D1 );

    case AppProfileSecurity :
      return EwLoadString( &_Const0242 );

    case AppProfileSilent :
      return EwLoadString( &_Const00B4 );

    case AppProfileRoutingAck :
      return EwLoadString( &_Const0436 );

    case AppProfileTestTone :
      return EwLoadString( &_Const0437 );

    case AppProfileEvacuation :
      return EwLoadString( &_Const023D );

    case AppProfileGeneral :
      return EwLoadString( &_Const024A );

    case AppProfileFault :
      return EwLoadString( &_Const01B5 );

    default : 
      return EwLoadString( &_Const03BB );
  }
}

/* 'C' function for method : 'App::LibClass.GetConfigNum()' */
AppDeviceConfig AppLibClass_GetConfigNum( AppLibClass _this, XInt16 dev_num )
{
  XInt32 ptr = 0;

  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );  

    DeviceConfig* d   = (DeviceConfig*)   cmd.int0;  

    if ( d != NULL ) 
    { 
      d += dev_num;

      ptr = (int) d;
    }
  }
  return AppLibClass_GetConfigFromPtr( _this, ptr );
}

/* 'C' function for method : 'App::LibClass.GetNumSiteDevices()' */
XInt32 AppLibClass_GetNumSiteDevices( AppLibClass _this )
{
  XInt32 num;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  num = 0;
  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );  

    num = cmd.short6;
  }
  return num;
}

/* 'C' function for method : 'App::LibClass.GetNumRadiosFound()' */
XInt32 AppLibClass_GetNumRadiosFound( AppLibClass _this )
{
  XInt32 num;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  num = 0;
  {
    Command cmd;
    Command0( CMD_GET_DEVICE_LISTS, &cmd );  

    num = cmd.short5;
  }
  return num;
}

/* 'C' function for method : 'App::LibClass.GetRadioNum()' */
AppRadioUnit AppLibClass_GetRadioNum( AppLibClass _this, XInt16 num )
{
  AppRadioUnit ru = EwNewObject( AppRadioUnit, 0 );
  XInt32 ptr = 0;

  if ( ru != 0 )
    {
      Command cmd;
      Command0( CMD_GET_DEVICE_LISTS, &cmd );  

      RadioUnit* rad  = (RadioUnit*)   cmd.int1;  

       ptr = (int)( rad + num );
    }

  return AppLibClass_GetRadioFromPtr( _this, ptr );
}

/* 'C' function for method : 'App::LibClass.GetAlertNum()' */
AppAlert AppLibClass_GetAlertNum( AppLibClass _this, XSet event, XInt32 num )
{
  AppAlert al;
  XString desc;
  XString time;
  XInt16 unitnum;
  XInt16 zonenum;
  XSet flags;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( event );

  al = EwNewObject( AppAlert, 0 );
  desc = 0;
  time = 0;

  if ( al != 0 )
  {
    {
      Command cmd;

      cmd.int0 = num;
      cmd.int1 = event;
      cmd.int2 = -1;
      cmd.int3 = -1;

      Command0( CMD_GET_ALERT_DETAILS, &cmd ); 

      if ( cmd.int0 != NULL ) desc = EwNewStringAnsi( (char*) cmd.int0 );
      if ( cmd.int3 != NULL ) time = EwNewStringAnsi( (char*) cmd.int3 );

      al->zonenum = cmd.short2;
      al->unitnum = cmd.short3;
      al->flags   = cmd.short4;
      al->chanimg = cmd.charA;
      al->action = cmd.charB;
    }
    EwRetainString( &al->description, desc );
    EwRetainString( &al->time, time );
  }

  return al;
}

/* 'C' function for method : 'App::LibClass.GetRadioFromPtr()' */
AppRadioUnit AppLibClass_GetRadioFromPtr( AppLibClass _this, XInt32 unit_ptr )
{
  AppRadioUnit ru;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  ru = EwNewObject( AppRadioUnit, 0 );

  if ( ru != 0 )
    {
      RadioUnit* rad = (RadioUnit*) unit_ptr;

      if ( rad != NULL )
      {
         ru->zonenum    = rad->zone;
         ru->unitnum    = rad->unit;
         ru->combination = rad->combination;
         ru->starttime  = rad->starttime;
         ru->rssi       = rad->rssiprimary;
         ru->primary    = rad->primary;
         ru->sent       = rad->sent;
         ru->received   = rad->received;
         ru->stage      = rad->state;
         ru->battery    = rad->battery;
         ru->valid      = rad->valid;
       }
       else
       {
         ru = NULL;
       }
    }

  return ru;
}

/* 'C' function for method : 'App::LibClass.GetConfigFromPtr()' */
AppDeviceConfig AppLibClass_GetConfigFromPtr( AppLibClass _this, XInt32 ptr )
{
  if ( ptr != 0 )
  {
    AppDeviceConfig dev = EwNewObject( AppDeviceConfig, 0 );
    XString location = 0;
    XString combi = EwLoadString( &_Const02B0 );
    XUInt8 i;
    XUInt8 o;
    XUInt8 p;

    if ( dev != 0 )
      {
        DeviceConfig* d = (DeviceConfig*) ptr;

        if ( d != NULL ) 
        { 
          dev->combination = d->type;

          location = EwNewStringAnsi( d->location );
          combi    = EwNewStringAnsi( d->typestring );

          dev->numparams   = d->numParams;
          dev->numinputs   = d->numInputs;
          dev->numoutputs  = d->numOutputs;

          dev->unitnum     = d->unit;
          dev->zonenum     = d->zone;

          dev->flags       = d->flags;
        }
        else dev = NULL;
      }

    if ( dev != 0 )
    {
      EwRetainString( &dev->location, location );
      EwRetainString( &dev->combiname, combi );

      for ( i = 0; i < dev->numinputs; i = (XUInt8)( i + 1 ))
      {
        dev->inputs[ EwCheckIndex( i, 32 )] = AppLibClass_GetInputFromPtr( _this, 
        ptr, i );
      }

      for ( o = 0; o < dev->numoutputs; o = (XUInt8)( o + 1 ))
      {
        dev->outputs[ EwCheckIndex( o, 32 )] = AppLibClass_GetOutputFromPtr( _this, 
        ptr, o );
      }

      for ( p = 0; p < dev->numparams; p = (XUInt8)( p + 1 ))
      {
        dev->params[ EwCheckIndex( p, 4 )] = AppLibClass_GetParameter( _this, dev->unitnum, 
        p );
      }

      return dev;
    }
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.GetConfigNumInZone()' */
AppDeviceConfig AppLibClass_GetConfigNumInZone( AppLibClass _this, XInt16 zone, 
  XInt16 unitnum )
{
  XInt32 ptr = 0;

  {
    Command cmd;

    cmd.int0 = zone;
    cmd.int1 = unitnum;
    Command0( CMD_GET_DEV_IN_ZONE, &cmd );
    ptr = cmd.int0;
  }
  return AppLibClass_GetConfigFromPtr( _this, ptr );
}

/* 'C' function for method : 'App::LibClass.GetInputFromPtr()' */
AppInputChannel AppLibClass_GetInputFromPtr( AppLibClass _this, XInt32 devptr, XUInt8 
  channel )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( devptr != 0 )
  {
    AppInputChannel input = EwNewObject( AppInputChannel, 0 );

    if ( input != 0 )
      {
        DeviceConfig* d = (DeviceConfig*) devptr;
        InputChannel* i = d->input + channel;

        input->delay  = i->delay;
        input->flags  = i->flags;
        input->action = i->action;
        input->type   = i->type;

        return input;
      }
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.GetOutputFromPtr()' */
AppOutputChannel AppLibClass_GetOutputFromPtr( AppLibClass _this, XInt32 devptr, 
  XUInt8 channel )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( devptr != 0 )
  {
    AppOutputChannel output = EwNewObject( AppOutputChannel, 0 );

    if ( output != 0 )
      {
        DeviceConfig* d = (DeviceConfig*) devptr;
        OutputChannel* o = d->output + channel;

        output->delay1  = o->delay1;
        output->delay2  = o->delay2;
        output->flags   = o->flags;
        output->actions = o->actions;
        output->type    = o->type;

        return output;
      }
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.GetAlertNumInZone()' */
AppAlert AppLibClass_GetAlertNumInZone( AppLibClass _this, XSet event, XInt32 num, 
  XInt32 zone, XInt32 panel )
{
  AppAlert al;
  XString desc;
  XString time;
  XInt16 unitnum;
  XInt16 zonenum;
  XSet flags;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( panel );
  EW_UNUSED_ARG( zone );
  EW_UNUSED_ARG( event );

  al = EwNewObject( AppAlert, 0 );
  desc = 0;
  time = 0;

  if ( al != 0 )
  {
    {
      Command cmd;

      cmd.int0 = num;
      cmd.int1 = event;
      cmd.int2 = zone;
      cmd.int3 = panel;

      Command0( CMD_GET_ALERT_DETAILS, &cmd ); 

      if ( cmd.int0 != NULL ) desc = EwNewStringAnsi( (char*) cmd.int0 );
      if ( cmd.int3 != NULL ) time = EwNewStringAnsi( (char*) cmd.int3 );

      al->zonenum = cmd.short2;
      al->unitnum = cmd.short3;
      al->flags   = cmd.short4;
      al->chanimg = cmd.short5;
    }
    EwRetainString( &al->description, desc );
    EwRetainString( &al->time, time );
  }

  return al;
}

/* 'C' function for method : 'App::LibClass.GetZoneAlert()' */
AppZoneAlert AppLibClass_GetZoneAlert( AppLibClass _this, XInt32 num )
{
  AppZoneAlert al;
  XInt32 panel;
  XInt32 zone;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( num );

  al = EwNewObject( AppZoneAlert, 0 );
  panel = 0;
  zone = 0;

  if ( al != 0 )
  {
    {
      Command cmd;

      cmd.int0 = num;

      if ( Command0( CMD_GET_NTH_ZONE, &cmd ) == CMD_OK )
      {
        panel = cmd.int1;
        zone  = cmd.int0;
      }
    }
    al->panel = panel;
    al->zone = zone;
  }

  return al;
}

/* 'C' function for method : 'App::LibClass.GetNumZoneAlerts()' */
XInt32 AppLibClass_GetNumZoneAlerts( AppLibClass _this )
{
  XInt32 n;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  n = 0;
  {
    Command cmd;

    Command0( CMD_GET_NUM_ZONES_IN_FIRE, &cmd );

    n = cmd.int0;
  }
  return n;
}

/* 'C' function for method : 'App::LibClass.GetNumAlertsInZone()' */
XInt32 AppLibClass_GetNumAlertsInZone( AppLibClass _this, XInt32 zone, XInt32 panel )
{
  XInt32 n;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( panel );
  EW_UNUSED_ARG( zone );

  n = 0;
  {
    Command cmd;
    cmd.int0 = zone;
    cmd.int1 = panel;
    Command0( CMD_GET_NUM_ALERTS_IN_ZONE, &cmd );

    n = cmd.int0;
  }
  return n;
}

/* 'C' function for method : 'App::LibClass.GetPanelName()' */
XString AppLibClass_GetPanelName( AppLibClass _this, XInt32 index )
{
  XString name;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  name = 0;

  if (( index >= 0 ) && ( index < 5 ))
  {
    {
      Command cmd;
      cmd.int0 = index;
      Command0( CMD_GET_PANEL_NAME, &cmd );

      if ( cmd.int0 != NULL )
      {
        name = EwNewStringAnsi( (char*) cmd.int0 );
      }
    }
  }

  return name;
}

/* 'C' function for method : 'App::LibClass.GetPanelZoneFlags()' */
XSet AppLibClass_GetPanelZoneFlags( AppLibClass _this, XInt16 zone, XInt16 panel )
{
  XSet zf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( panel );
  EW_UNUSED_ARG( zone );

  zf = 0;
  {
    Command cmd;
    cmd.int0 = zone;
    cmd.int1 = panel;
    Command0( CMD_GET_PANEL_ZONE_FLAGS, &cmd );

    zf = (AppZoneFlags) cmd.int0;
  }
  return zf;
}

/* 'C' function for method : 'App::LibClass.SetPanelZoneFlags()' */
void AppLibClass_SetPanelZoneFlags( AppLibClass _this, XInt16 zone, XInt16 panel, 
  XSet flags )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( flags );
  EW_UNUSED_ARG( panel );
  EW_UNUSED_ARG( zone );

  Command3( CMD_SET_PANEL_ZONE_FLAGS, zone, panel, flags );
}

/* 'C' function for method : 'App::LibClass.GetZoneDisabledState()' */
XBool AppLibClass_GetZoneDisabledState( AppLibClass _this, XInt32 zone )
{
  XBool state;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  state = 0;
  {
    Command cmd;

    cmd.int0 = zone;

    Command0( CMD_GET_ZONE_DISABLED, &cmd );

    state = cmd.int1;
  }
  return state;
}

/* 'C' function for method : 'App::LibClass.SetZoneDisabledState()' */
void AppLibClass_SetZoneDisabledState( AppLibClass _this, XInt32 zone, XBool state )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  Command2( CMD_SET_ZONE_DISABLED, zone, state );
}

/* 'C' function for method : 'App::LibClass.OnTree()' */
XBool AppLibClass_OnTree( AppLibClass _this, XInt32 unitnum )
{
  XBool res;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  res = 0;
  {
    Command cmd;

    cmd.int0 = unitnum;

    Command0( CMD_CHECK_ON_TREE, &cmd );

    res = cmd.int0;
  }
  return res;
}

/* 'C' function for method : 'App::LibClass.Order()' */
XString AppLibClass_Order( AppLibClass _this, XInt32 order )
{
  XString s;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  s = EwNewStringInt( order, 0, 10 );
  order = order % 100;

  if (( order > 3 ) && ( order < 21 ))
  {
    s = EwConcatString( s, EwLoadString( &_Const003B ));
  }
  else
    switch ( order % 10 )
    {
      case 1 :
        s = EwConcatString( s, EwLoadString( &_Const003C ));
      break;

      case 2 :
        s = EwConcatString( s, EwLoadString( &_Const003D ));
      break;

      case 3 :
        s = EwConcatString( s, EwLoadString( &_Const003E ));
      break;

      default : 
        s = EwConcatString( s, EwLoadString( &_Const003B ));
    }

  return s;
}

/* 'C' function for method : 'App::LibClass.GetCombiName()' */
XString AppLibClass_GetCombiName( AppLibClass _this, XInt32 type )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( type )
  {
    case 0 :
      return EwLoadString( &_Const0412 );

    case 1 :
      return EwLoadString( &_Const0438 );

    case 2 :
      return EwLoadString( &_Const0439 );

    case 3 :
      return EwLoadString( &_Const043A );

    case 4 :
      return EwLoadString( &_Const043B );

    case 5 :
      return EwLoadString( &_Const043C );

    case 6 :
      return EwLoadString( &_Const043D );

    case 7 :
      return EwLoadString( &_Const043E );

    case 8 :
      return EwLoadString( &_Const043F );

    case 9 :
      return EwLoadString( &_Const0440 );

    case 10 :
      return EwLoadString( &_Const0441 );

    case 11 :
      return EwLoadString( &_Const0442 );

    case 12 :
      return EwLoadString( &_Const0443 );

    case 13 :
      return EwLoadString( &_Const0444 );

    case 14 :
      return EwLoadString( &_Const0445 );

    case 15 :
      return EwLoadString( &_Const0446 );

    case 16 :
      return EwLoadString( &_Const0447 );

    case 17 :
      return EwLoadString( &_Const0448 );

    case 18 :
      return EwLoadString( &_Const0449 );

    case 19 :
      return EwLoadString( &_Const044A );

    case 20 :
      return EwLoadString( &_Const0440 );

    case 21 :
      return EwLoadString( &_Const044B );

    case 22 :
      return EwLoadString( &_Const044C );

    case 23 :
      return EwLoadString( &_Const044D );

    case 24 :
      return EwLoadString( &_Const044E );

    case 25 :
      return EwLoadString( &_Const044F );

    case 26 :
      return EwLoadString( &_Const0450 );

    case 27 :
      return EwLoadString( &_Const0451 );

    case 28 :
      return EwLoadString( &_Const0452 );

    case 29 :
      return EwLoadString( &_Const0453 );

    case 30 :
      return EwLoadString( &_Const0454 );

    case 31 :
      return EwLoadString( &_Const0455 );

    case 32 :
      return EwLoadString( &_Const0456 );

    case 33 :
      return EwLoadString( &_Const0457 );

    case 34 :
      return EwLoadString( &_Const0458 );

    case 35 :
      return EwLoadString( &_Const0459 );

    case 36 :
      return EwLoadString( &_Const045A );

    case 37 :
      return EwLoadString( &_Const045B );

    case 38 :
      return EwLoadString( &_Const045C );

    case 39 :
      return EwLoadString( &_Const045D );

    case 40 :
      return EwLoadString( &_Const045E );

    case 41 :
      return EwLoadString( &_Const045F );

    case 64 :
      return EwLoadString( &_Const0460 );

    case 65 :
      return EwLoadString( &_Const0461 );

    case 66 :
      return EwLoadString( &_Const023D );

    default : 
      return EwLoadString( &_Const020C );
  }
}

/* 'C' function for method : 'App::LibClass.NumDevTypes()' */
XInt32 AppLibClass_NumDevTypes( AppLibClass _this )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  return 41;
}

/* 'C' function for method : 'App::LibClass.TypeBitmap()' */
ResourcesBitmap AppLibClass_TypeBitmap( AppLibClass _this, XEnum Bitmap )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( Bitmap )
  {
    case AppChannelTypeNone :
      return 0;

    case AppChannelTypeSmoke :
      return EwLoadResource( &AppSmokeBitmap, ResourcesBitmap );

    case AppChannelTypeHeatB :
      return EwLoadResource( &AppHeatBSensorBitmap, ResourcesBitmap );

    case AppChannelTypeHeatA1R :
      return EwLoadResource( &AppHeatA1RBitmap, ResourcesBitmap );

    case AppChannelTypeCO :
      return EwLoadResource( &AppCOBitmap, ResourcesBitmap );

    case AppChannelTypePIR :
      return EwLoadResource( &AppPIRBitmap, ResourcesBitmap );

    case AppChannelTypeSounder :
      return EwLoadResource( &AppSounderBitmap, ResourcesBitmap );

    case AppChannelTypeBeacon :
      return EwLoadResource( &AppBeaconBitmap, ResourcesBitmap );

    case AppChannelTypeFireCallpoint :
      return EwLoadResource( &AppFireAlarmBitmap, ResourcesBitmap );

    case AppChannelTypeStatus_indicator_led :
      return 0;

    case AppChannelTypeVisualIndicator :
      return EwLoadResource( &AppVIBitmap, ResourcesBitmap );

    case AppChannelTypeSounderVisualIndicatorCombined :
      return EwLoadResource( &AppSounderVIBitmap, ResourcesBitmap );

    case AppChannelTypeMedicalCallpoint :
      return EwLoadResource( &AppGreenCallpointBitmap, ResourcesBitmap );

    case AppChannelTypeEvacCallpoint :
      return EwLoadResource( &Appevacuate, ResourcesBitmap );

    case AppChannelTypeOutputRouting :
      return EwLoadResource( &AppFireRouting, ResourcesBitmap );

    case AppChannelTypePanelAlarmInput :
      return EwLoadResource( &Appinput_alarm, ResourcesBitmap );

    case AppChannelTypePanelAlarmRelay :
      return EwLoadResource( &Appoutput_alarm, ResourcesBitmap );

    case AppChannelTypePanelCallpoint :
      return EwLoadResource( &Appinput_callpoint, ResourcesBitmap );

    case AppChannelTypePanelFaultInput :
      return EwLoadResource( &Appinput_fault, ResourcesBitmap );

    case AppChannelTypePanelFaultRelay :
      return EwLoadResource( &Appoutput_fault, ResourcesBitmap );

    case AppChannelTypePanelFireRelay :
      return EwLoadResource( &Appoutput_fire, ResourcesBitmap );

    case AppChannelTypePanelRoutingAck :
      return EwLoadResource( &Appinput_routing_ack, ResourcesBitmap );

    case AppChannelTypePanelRoutingOutput :
      return EwLoadResource( &Appoutput_routing, ResourcesBitmap );

    case AppChannelTypePanelSilenceInput :
      return EwLoadResource( &Appinput_silence, ResourcesBitmap );

    case AppChannelTypePanelSoundersRelay :
      return EwLoadResource( &Appoutput_sounders, ResourcesBitmap );

    case AppChannelTypePanelFunction1 :
      return EwLoadResource( &Appfunction, ResourcesBitmap );

    case AppChannelTypePanelFunction2 :
      return EwLoadResource( &Appfunction, ResourcesBitmap );

    case AppChannelTypePanelEvacuate :
      return EwLoadResource( &AppEvacuateBitmap, ResourcesBitmap );

    default : 
    {
      if (( Bitmap <= AppChannelTypeInput32 ) && ( Bitmap >= AppChannelTypeInput1 
          ))
        return EwLoadResource( &AppGeneralInputBitmap, ResourcesBitmap );

      if (( Bitmap <= AppChannelTypeOutput32 ) && ( Bitmap >= AppChannelTypeOutput1 
          ))
        return EwLoadResource( &AppGeneralOutputBitmap, ResourcesBitmap );
    }
  }

  return 0;
}

/* 'C' function for method : 'App::LibClass.Unit()' */
XString AppLibClass_Unit( AppLibClass _this, XInt32 u )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  if ( u < 512 )
    return EwConcatString( EwLoadString( &_Const0406 ), EwNewStringInt( u, 0, 10 
      ));
  else
    if ( u == 512 )
      return EwLoadString( &_Const0462 );
    else
      if ( u == 514 )
        return EwLoadString( &_Const023D );
      else
        if ( u == 513 )
          return EwLoadString( &_Const0463 );

  return EwLoadString( &_Const0464 );
}

/* 'C' function for method : 'App::LibClass.TypeSmallBitmap()' */
ResourcesBitmap AppLibClass_TypeSmallBitmap( AppLibClass _this, XEnum Bitmap )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  switch ( Bitmap )
  {
    case AppChannelTypeNone :
      return 0;

    case AppChannelTypeSmoke :
      return EwLoadResource( &Appsmoke2small, ResourcesBitmap );

    case AppChannelTypeHeatB :
      return EwLoadResource( &Appheatsmall, ResourcesBitmap );

    case AppChannelTypeHeatA1R :
      return EwLoadResource( &AppheatA1Rsmall, ResourcesBitmap );

    case AppChannelTypeCO :
      return EwLoadResource( &Appcosmall, ResourcesBitmap );

    case AppChannelTypePIR :
      return EwLoadResource( &Apppirsmall, ResourcesBitmap );

    case AppChannelTypeFireCallpoint :
      return EwLoadResource( &Appfire_alarmsmall, ResourcesBitmap );

    case AppChannelTypeMedicalCallpoint :
      return EwLoadResource( &Appgreencall2small, ResourcesBitmap );

    case AppChannelTypeEvacCallpoint :
      return EwLoadResource( &Appevacuatesmall, ResourcesBitmap );

    case AppChannelTypeOutputRouting :
      return EwLoadResource( &Appfire_routingsmall, ResourcesBitmap );

    case AppChannelTypePanelAlarmInput :
      return EwLoadResource( &Appinput_alarmsmall, ResourcesBitmap );

    case AppChannelTypePanelCallpoint :
      return EwLoadResource( &Appinput_callpointsmall, ResourcesBitmap );

    case AppChannelTypePanelFaultInput :
      return EwLoadResource( &Appinput_faultsmall, ResourcesBitmap );

    case AppChannelTypePanelRoutingAck :
      return EwLoadResource( &Appinput_routing_acksmall, ResourcesBitmap );

    case AppChannelTypePanelSilenceInput :
      return EwLoadResource( &Appinput_silencesmall, ResourcesBitmap );

    case AppChannelTypePanelFunction1 :
      return EwLoadResource( &Appfunctionsmall, ResourcesBitmap );

    case AppChannelTypePanelFunction2 :
      return EwLoadResource( &Appfunctionsmall, ResourcesBitmap );

    case AppChannelTypePanelEvacuate :
      return EwLoadResource( &Appevacuate40csmall, ResourcesBitmap );

    default : 
    {
      if (( Bitmap <= AppChannelTypeInput32 ) && ( Bitmap >= AppChannelTypeInput1 
          ))
        return EwLoadResource( &Appgeneral_inputsmall, ResourcesBitmap );
    }
  }

  return 0;
}

/* Variants derived from the class : 'App::LibClass' */
EW_DEFINE_CLASS_VARIANTS( AppLibClass )
EW_END_OF_CLASS_VARIANTS( AppLibClass )

/* Virtual Method Table (VMT) for the class : 'App::LibClass' */
EW_DEFINE_CLASS( AppLibClass, XObject, "App::LibClass" )
EW_END_OF_CLASS( AppLibClass )

/* User defined auto object: 'App::Lib' */
EW_DEFINE_AUTOOBJECT( AppLib, AppLibClass )

/* Initializer for the auto object 'App::Lib' */
void AppLib__Init( AppLibClass _this )
{
  EW_UNUSED_ARG( _this );
}

/* Table with links to derived variants of the auto object : 'App::Lib' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppLib )
EW_END_OF_AUTOOBJECT_VARIANTS( AppLib )

/* Initializer for the class 'App::RadioUnit' */
void AppRadioUnit__Init( AppRadioUnit _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppRadioUnit );

  /* ... and initialize objects, variables, properties, etc. */
  _this->stage = AppNCUStageDropped;
}

/* Re-Initializer for the class 'App::RadioUnit' */
void AppRadioUnit__ReInit( AppRadioUnit _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::RadioUnit' */
void AppRadioUnit__Done( AppRadioUnit _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppRadioUnit );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::RadioUnit' */
void AppRadioUnit__Mark( AppRadioUnit _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Default onget method for the property 'zonenum' */
XInt16 AppRadioUnit_OnGetzonenum( AppRadioUnit _this )
{
  return _this->zonenum;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetzonenum()' */
XInt16 AppRadioUnit__OnGetzonenum( void* _this )
{
  return AppRadioUnit_OnGetzonenum((AppRadioUnit)_this );
}

/* Default onset method for the property 'zonenum' */
void AppRadioUnit_OnSetzonenum( AppRadioUnit _this, XInt16 value )
{
  _this->zonenum = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetzonenum()' */
void AppRadioUnit__OnSetzonenum( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetzonenum((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'unitnum' */
XInt16 AppRadioUnit_OnGetunitnum( AppRadioUnit _this )
{
  return _this->unitnum;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetunitnum()' */
XInt16 AppRadioUnit__OnGetunitnum( void* _this )
{
  return AppRadioUnit_OnGetunitnum((AppRadioUnit)_this );
}

/* Default onset method for the property 'unitnum' */
void AppRadioUnit_OnSetunitnum( AppRadioUnit _this, XInt16 value )
{
  _this->unitnum = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetunitnum()' */
void AppRadioUnit__OnSetunitnum( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetunitnum((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'combination' */
XUInt8 AppRadioUnit_OnGetcombination( AppRadioUnit _this )
{
  return _this->combination;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetcombination()' */
XUInt8 AppRadioUnit__OnGetcombination( void* _this )
{
  return AppRadioUnit_OnGetcombination((AppRadioUnit)_this );
}

/* Default onset method for the property 'combination' */
void AppRadioUnit_OnSetcombination( AppRadioUnit _this, XUInt8 value )
{
  _this->combination = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetcombination()' */
void AppRadioUnit__OnSetcombination( void* _this, XUInt8 value )
{
  AppRadioUnit_OnSetcombination((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'starttime' */
XUInt32 AppRadioUnit_OnGetstarttime( AppRadioUnit _this )
{
  return _this->starttime;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetstarttime()' */
XUInt32 AppRadioUnit__OnGetstarttime( void* _this )
{
  return AppRadioUnit_OnGetstarttime((AppRadioUnit)_this );
}

/* Default onset method for the property 'starttime' */
void AppRadioUnit_OnSetstarttime( AppRadioUnit _this, XUInt32 value )
{
  _this->starttime = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetstarttime()' */
void AppRadioUnit__OnSetstarttime( void* _this, XUInt32 value )
{
  AppRadioUnit_OnSetstarttime((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'rssi' */
XInt16 AppRadioUnit_OnGetrssi( AppRadioUnit _this )
{
  return _this->rssi;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetrssi()' */
XInt16 AppRadioUnit__OnGetrssi( void* _this )
{
  return AppRadioUnit_OnGetrssi((AppRadioUnit)_this );
}

/* Default onset method for the property 'rssi' */
void AppRadioUnit_OnSetrssi( AppRadioUnit _this, XInt16 value )
{
  _this->rssi = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetrssi()' */
void AppRadioUnit__OnSetrssi( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetrssi((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'primary' */
XInt16 AppRadioUnit_OnGetprimary( AppRadioUnit _this )
{
  return _this->primary;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetprimary()' */
XInt16 AppRadioUnit__OnGetprimary( void* _this )
{
  return AppRadioUnit_OnGetprimary((AppRadioUnit)_this );
}

/* Default onset method for the property 'primary' */
void AppRadioUnit_OnSetprimary( AppRadioUnit _this, XInt16 value )
{
  _this->primary = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetprimary()' */
void AppRadioUnit__OnSetprimary( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetprimary((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'received' */
XInt16 AppRadioUnit_OnGetreceived( AppRadioUnit _this )
{
  return _this->received;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetreceived()' */
XInt16 AppRadioUnit__OnGetreceived( void* _this )
{
  return AppRadioUnit_OnGetreceived((AppRadioUnit)_this );
}

/* Default onset method for the property 'received' */
void AppRadioUnit_OnSetreceived( AppRadioUnit _this, XInt16 value )
{
  _this->received = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetreceived()' */
void AppRadioUnit__OnSetreceived( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetreceived((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'sent' */
XInt16 AppRadioUnit_OnGetsent( AppRadioUnit _this )
{
  return _this->sent;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetsent()' */
XInt16 AppRadioUnit__OnGetsent( void* _this )
{
  return AppRadioUnit_OnGetsent((AppRadioUnit)_this );
}

/* Default onset method for the property 'sent' */
void AppRadioUnit_OnSetsent( AppRadioUnit _this, XInt16 value )
{
  _this->sent = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetsent()' */
void AppRadioUnit__OnSetsent( void* _this, XInt16 value )
{
  AppRadioUnit_OnSetsent((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'stage' */
XEnum AppRadioUnit_OnGetstage( AppRadioUnit _this )
{
  return _this->stage;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetstage()' */
XEnum AppRadioUnit__OnGetstage( void* _this )
{
  return AppRadioUnit_OnGetstage((AppRadioUnit)_this );
}

/* Default onset method for the property 'stage' */
void AppRadioUnit_OnSetstage( AppRadioUnit _this, XEnum value )
{
  _this->stage = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetstage()' */
void AppRadioUnit__OnSetstage( void* _this, XEnum value )
{
  AppRadioUnit_OnSetstage((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'battery' */
XInt8 AppRadioUnit_OnGetbattery( AppRadioUnit _this )
{
  return _this->battery;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetbattery()' */
XInt8 AppRadioUnit__OnGetbattery( void* _this )
{
  return AppRadioUnit_OnGetbattery((AppRadioUnit)_this );
}

/* Default onset method for the property 'battery' */
void AppRadioUnit_OnSetbattery( AppRadioUnit _this, XInt8 value )
{
  _this->battery = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetbattery()' */
void AppRadioUnit__OnSetbattery( void* _this, XInt8 value )
{
  AppRadioUnit_OnSetbattery((AppRadioUnit)_this, value );
}

/* Default onget method for the property 'valid' */
XUInt8 AppRadioUnit_OnGetvalid( AppRadioUnit _this )
{
  return _this->valid;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnGetvalid()' */
XUInt8 AppRadioUnit__OnGetvalid( void* _this )
{
  return AppRadioUnit_OnGetvalid((AppRadioUnit)_this );
}

/* Default onset method for the property 'valid' */
void AppRadioUnit_OnSetvalid( AppRadioUnit _this, XUInt8 value )
{
  _this->valid = value;
}

/* Wrapper function for the non virtual method : 'App::RadioUnit.OnSetvalid()' */
void AppRadioUnit__OnSetvalid( void* _this, XUInt8 value )
{
  AppRadioUnit_OnSetvalid((AppRadioUnit)_this, value );
}

/* Variants derived from the class : 'App::RadioUnit' */
EW_DEFINE_CLASS_VARIANTS( AppRadioUnit )
EW_END_OF_CLASS_VARIANTS( AppRadioUnit )

/* Virtual Method Table (VMT) for the class : 'App::RadioUnit' */
EW_DEFINE_CLASS( AppRadioUnit, XObject, "App::RadioUnit" )
EW_END_OF_CLASS( AppRadioUnit )

/* Initializer for the class 'App::DeviceConfig' */
void AppDeviceConfig__Init( AppDeviceConfig _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDeviceConfig );

  /* ... and initialize objects, variables, properties, etc. */
  _this->zonenum = 1;
  _this->unitnum = 1;
  _this->combination = 12;
  EwRetainString( &_this->location, EwLoadString( &_Const0465 ));
  EwRetainString( &_this->combiname, EwLoadString( &_Const0466 ));
  _this->flags = 0;
  _this->inputs[ 0 ] = EwGetAutoObject( &AppDummyInputChan, AppInputChannel );
  _this->outputs[ 0 ] = EwGetAutoObject( &AppDummyOutputChan, AppOutputChannel );
  _this->outputs[ 1 ] = EwGetAutoObject( &AppDummyOutputChan1, AppOutputChannel 
  );
  _this->params[ 0 ] = EwGetAutoObject( &AppDummyParam, AppParameter );
  _this->params[ 1 ] = EwGetAutoObject( &AppDummyParam1, AppParameter );
}

/* Re-Initializer for the class 'App::DeviceConfig' */
void AppDeviceConfig__ReInit( AppDeviceConfig _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::DeviceConfig' */
void AppDeviceConfig__Done( AppDeviceConfig _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDeviceConfig );

  /* Release all used strings */
  EwReleaseString( &_this->location );
  EwReleaseString( &_this->combiname );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DeviceConfig' */
void AppDeviceConfig__Mark( AppDeviceConfig _this )
{
  EwMarkObjects( _this->inputs );
  EwMarkObjects( _this->outputs );
  EwMarkObjects( _this->params );

  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::DeviceConfig.IsAlarmDevice()' */
XBool AppDeviceConfig_IsAlarmDevice( AppDeviceConfig _this, XInt32 channum )
{
  AppOutputChannel ch = _this->outputs[ EwCheckIndex( channum, 32 )];

  if ((((((( ch->type == AppChannelTypeBeacon ) || ( ch->type == AppChannelTypeSounder 
      )) || ( ch->type == AppChannelTypePanelSoundersRelay )) || ( ch->type == AppChannelTypePanelFireRelay 
      )) || ( ch->type == AppChannelTypePanelAlarmRelay )) || ( ch->type == AppChannelTypeSounderVisualIndicatorCombined 
      )) || ( ch->type == AppChannelTypeVisualIndicator ))
    return 1;

  return 0;
}

/* Default onget method for the property 'combination' */
XUInt8 AppDeviceConfig_OnGetcombination( AppDeviceConfig _this )
{
  return _this->combination;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetcombination()' */
XUInt8 AppDeviceConfig__OnGetcombination( void* _this )
{
  return AppDeviceConfig_OnGetcombination((AppDeviceConfig)_this );
}

/* Default onset method for the property 'combination' */
void AppDeviceConfig_OnSetcombination( AppDeviceConfig _this, XUInt8 value )
{
  _this->combination = value;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetcombination()' */
void AppDeviceConfig__OnSetcombination( void* _this, XUInt8 value )
{
  AppDeviceConfig_OnSetcombination((AppDeviceConfig)_this, value );
}

/* Default onget method for the property 'numparams' */
XUInt8 AppDeviceConfig_OnGetnumparams( AppDeviceConfig _this )
{
  return _this->numparams;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetnumparams()' */
XUInt8 AppDeviceConfig__OnGetnumparams( void* _this )
{
  return AppDeviceConfig_OnGetnumparams((AppDeviceConfig)_this );
}

/* Default onset method for the property 'numparams' */
void AppDeviceConfig_OnSetnumparams( AppDeviceConfig _this, XUInt8 value )
{
  _this->numparams = value;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetnumparams()' */
void AppDeviceConfig__OnSetnumparams( void* _this, XUInt8 value )
{
  AppDeviceConfig_OnSetnumparams((AppDeviceConfig)_this, value );
}

/* Default onget method for the property 'combiname' */
XString AppDeviceConfig_OnGetcombiname( AppDeviceConfig _this )
{
  return _this->combiname;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetcombiname()' */
XString AppDeviceConfig__OnGetcombiname( void* _this )
{
  return AppDeviceConfig_OnGetcombiname((AppDeviceConfig)_this );
}

/* Default onset method for the property 'combiname' */
void AppDeviceConfig_OnSetcombiname( AppDeviceConfig _this, XString value )
{
  EwRetainString( &_this->combiname, value );
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetcombiname()' */
void AppDeviceConfig__OnSetcombiname( void* _this, XString value )
{
  AppDeviceConfig_OnSetcombiname((AppDeviceConfig)_this, value );
}

/* Default onget method for the property 'numinputs' */
XUInt8 AppDeviceConfig_OnGetnuminputs( AppDeviceConfig _this )
{
  return _this->numinputs;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetnuminputs()' */
XUInt8 AppDeviceConfig__OnGetnuminputs( void* _this )
{
  return AppDeviceConfig_OnGetnuminputs((AppDeviceConfig)_this );
}

/* Default onset method for the property 'numinputs' */
void AppDeviceConfig_OnSetnuminputs( AppDeviceConfig _this, XUInt8 value )
{
  _this->numinputs = value;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetnuminputs()' */
void AppDeviceConfig__OnSetnuminputs( void* _this, XUInt8 value )
{
  AppDeviceConfig_OnSetnuminputs((AppDeviceConfig)_this, value );
}

/* Default onget method for the property 'numoutputs' */
XUInt8 AppDeviceConfig_OnGetnumoutputs( AppDeviceConfig _this )
{
  return _this->numoutputs;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetnumoutputs()' */
XUInt8 AppDeviceConfig__OnGetnumoutputs( void* _this )
{
  return AppDeviceConfig_OnGetnumoutputs((AppDeviceConfig)_this );
}

/* Default onset method for the property 'numoutputs' */
void AppDeviceConfig_OnSetnumoutputs( AppDeviceConfig _this, XUInt8 value )
{
  _this->numoutputs = value;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetnumoutputs()' */
void AppDeviceConfig__OnSetnumoutputs( void* _this, XUInt8 value )
{
  AppDeviceConfig_OnSetnumoutputs((AppDeviceConfig)_this, value );
}

/* Default onget method for the property 'flags' */
XSet AppDeviceConfig_OnGetflags( AppDeviceConfig _this )
{
  return _this->flags;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnGetflags()' */
XSet AppDeviceConfig__OnGetflags( void* _this )
{
  return AppDeviceConfig_OnGetflags((AppDeviceConfig)_this );
}

/* Default onset method for the property 'flags' */
void AppDeviceConfig_OnSetflags( AppDeviceConfig _this, XSet value )
{
  _this->flags = value;
}

/* Wrapper function for the non virtual method : 'App::DeviceConfig.OnSetflags()' */
void AppDeviceConfig__OnSetflags( void* _this, XSet value )
{
  AppDeviceConfig_OnSetflags((AppDeviceConfig)_this, value );
}

/* Variants derived from the class : 'App::DeviceConfig' */
EW_DEFINE_CLASS_VARIANTS( AppDeviceConfig )
EW_END_OF_CLASS_VARIANTS( AppDeviceConfig )

/* Virtual Method Table (VMT) for the class : 'App::DeviceConfig' */
EW_DEFINE_CLASS( AppDeviceConfig, XObject, "App::DeviceConfig" )
EW_END_OF_CLASS( AppDeviceConfig )

/* Initializer for the class 'App::InputChannel' */
void AppInputChannel__Init( AppInputChannel _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppInputChannel );

  /* ... and initialize objects, variables, properties, etc. */
  _this->flags = 0;
  _this->action = AppActionFire;
  _this->type = AppChannelTypeNone;
}

/* Re-Initializer for the class 'App::InputChannel' */
void AppInputChannel__ReInit( AppInputChannel _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::InputChannel' */
void AppInputChannel__Done( AppInputChannel _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppInputChannel );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::InputChannel' */
void AppInputChannel__Mark( AppInputChannel _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::InputChannel' */
EW_DEFINE_CLASS_VARIANTS( AppInputChannel )
EW_END_OF_CLASS_VARIANTS( AppInputChannel )

/* Virtual Method Table (VMT) for the class : 'App::InputChannel' */
EW_DEFINE_CLASS( AppInputChannel, XObject, "App::InputChannel" )
EW_END_OF_CLASS( AppInputChannel )

/* Initializer for the class 'App::OutputChannel' */
void AppOutputChannel__Init( AppOutputChannel _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppOutputChannel );

  /* ... and initialize objects, variables, properties, etc. */
  _this->flags = 0;
  _this->actions = 0;
  _this->type = AppChannelTypeNone;
}

/* Re-Initializer for the class 'App::OutputChannel' */
void AppOutputChannel__ReInit( AppOutputChannel _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::OutputChannel' */
void AppOutputChannel__Done( AppOutputChannel _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppOutputChannel );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::OutputChannel' */
void AppOutputChannel__Mark( AppOutputChannel _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::OutputChannel' */
EW_DEFINE_CLASS_VARIANTS( AppOutputChannel )
EW_END_OF_CLASS_VARIANTS( AppOutputChannel )

/* Virtual Method Table (VMT) for the class : 'App::OutputChannel' */
EW_DEFINE_CLASS( AppOutputChannel, XObject, "App::OutputChannel" )
EW_END_OF_CLASS( AppOutputChannel )

/* Initializer for the class 'App::Parameter' */
void AppParameter__Init( AppParameter _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppParameter );

  /* ... and initialize objects, variables, properties, etc. */
  _this->code = AppParamCodeUnused;
}

/* Re-Initializer for the class 'App::Parameter' */
void AppParameter__ReInit( AppParameter _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Parameter' */
void AppParameter__Done( AppParameter _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppParameter );

  /* Release all used strings */
  EwReleaseString( &_this->name );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Parameter' */
void AppParameter__Mark( AppParameter _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Default onget method for the property 'channel' */
XUInt8 AppParameter_OnGetchannel( AppParameter _this )
{
  return _this->channel;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetchannel()' */
XUInt8 AppParameter__OnGetchannel( void* _this )
{
  return AppParameter_OnGetchannel((AppParameter)_this );
}

/* Default onset method for the property 'channel' */
void AppParameter_OnSetchannel( AppParameter _this, XUInt8 value )
{
  _this->channel = value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetchannel()' */
void AppParameter__OnSetchannel( void* _this, XUInt8 value )
{
  AppParameter_OnSetchannel((AppParameter)_this, value );
}

/* Default onget method for the property 'name' */
XString AppParameter_OnGetname( AppParameter _this )
{
  return _this->name;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetname()' */
XString AppParameter__OnGetname( void* _this )
{
  return AppParameter_OnGetname((AppParameter)_this );
}

/* Default onset method for the property 'name' */
void AppParameter_OnSetname( AppParameter _this, XString value )
{
  EwRetainString( &_this->name, value );
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetname()' */
void AppParameter__OnSetname( void* _this, XString value )
{
  AppParameter_OnSetname((AppParameter)_this, value );
}

/* Default onget method for the property 'value' */
XInt16 AppParameter_OnGetvalue( AppParameter _this )
{
  return _this->value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetvalue()' */
XInt16 AppParameter__OnGetvalue( void* _this )
{
  return AppParameter_OnGetvalue((AppParameter)_this );
}

/* Default onset method for the property 'value' */
void AppParameter_OnSetvalue( AppParameter _this, XInt16 value )
{
  _this->value = value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetvalue()' */
void AppParameter__OnSetvalue( void* _this, XInt16 value )
{
  AppParameter_OnSetvalue((AppParameter)_this, value );
}

/* Default onget method for the property 'code' */
XEnum AppParameter_OnGetcode( AppParameter _this )
{
  return _this->code;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetcode()' */
XEnum AppParameter__OnGetcode( void* _this )
{
  return AppParameter_OnGetcode((AppParameter)_this );
}

/* Default onset method for the property 'code' */
void AppParameter_OnSetcode( AppParameter _this, XEnum value )
{
  _this->code = value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetcode()' */
void AppParameter__OnSetcode( void* _this, XEnum value )
{
  AppParameter_OnSetcode((AppParameter)_this, value );
}

/* Default onget method for the property 'max' */
XInt16 AppParameter_OnGetmax( AppParameter _this )
{
  return _this->max;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetmax()' */
XInt16 AppParameter__OnGetmax( void* _this )
{
  return AppParameter_OnGetmax((AppParameter)_this );
}

/* Default onset method for the property 'max' */
void AppParameter_OnSetmax( AppParameter _this, XInt16 value )
{
  _this->max = value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetmax()' */
void AppParameter__OnSetmax( void* _this, XInt16 value )
{
  AppParameter_OnSetmax((AppParameter)_this, value );
}

/* Default onget method for the property 'min' */
XInt16 AppParameter_OnGetmin( AppParameter _this )
{
  return _this->min;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnGetmin()' */
XInt16 AppParameter__OnGetmin( void* _this )
{
  return AppParameter_OnGetmin((AppParameter)_this );
}

/* Default onset method for the property 'min' */
void AppParameter_OnSetmin( AppParameter _this, XInt16 value )
{
  _this->min = value;
}

/* Wrapper function for the non virtual method : 'App::Parameter.OnSetmin()' */
void AppParameter__OnSetmin( void* _this, XInt16 value )
{
  AppParameter_OnSetmin((AppParameter)_this, value );
}

/* Variants derived from the class : 'App::Parameter' */
EW_DEFINE_CLASS_VARIANTS( AppParameter )
EW_END_OF_CLASS_VARIANTS( AppParameter )

/* Virtual Method Table (VMT) for the class : 'App::Parameter' */
EW_DEFINE_CLASS( AppParameter, XObject, "App::Parameter" )
EW_END_OF_CLASS( AppParameter )

/* Initializer for the class 'App::ParamSlider' */
void AppParamSlider__Init( AppParamSlider _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  WidgetSetHorizontalSlider__Init( &_this->HorzBarSlider, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppParamSlider );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0467 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0468 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorzBarSlider, _Const0469 );
  WidgetSetHorizontalSlider_OnSetStepSize( &_this->HorzBarSlider, 1 );
  WidgetSetHorizontalSlider_OnSetMaxValue( &_this->HorzBarSlider, 14 );
  WidgetSetHorizontalSlider_OnSetCurrentValue( &_this->HorzBarSlider, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorzBarSlider ), 0 );
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->HorzBarSlider.OnChange = EwNullSlot;
  _this->HorzBarSlider.OnEnd = EwNullSlot;
  WidgetSetHorizontalSlider_OnSetAppearance( &_this->HorzBarSlider, EwGetAutoObject( 
  &AppNormalHorizontalSlider, WidgetSetHorizontalSliderConfig ));
}

/* Re-Initializer for the class 'App::ParamSlider' */
void AppParamSlider__ReInit( AppParamSlider _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text2 );
  WidgetSetHorizontalSlider__ReInit( &_this->HorzBarSlider );
}

/* Finalizer method for the class 'App::ParamSlider' */
void AppParamSlider__Done( AppParamSlider _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppParamSlider );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text2 );
  WidgetSetHorizontalSlider__Done( &_this->HorzBarSlider );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ParamSlider' */
void AppParamSlider__Mark( AppParamSlider _this )
{
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->HorzBarSlider );
  EwMarkObject( _this->param );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::ParamSlider' */
EW_DEFINE_CLASS_VARIANTS( AppParamSlider )
EW_END_OF_CLASS_VARIANTS( AppParamSlider )

/* Virtual Method Table (VMT) for the class : 'App::ParamSlider' */
EW_DEFINE_CLASS( AppParamSlider, CoreGroup, "App::ParamSlider" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppParamSlider )

/* Initializer for the class 'App::ParamToggle' */
void AppParamToggle__Init( AppParamToggle _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppParamToggle );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const046A );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const046B );
  WidgetSetToggleButton_OnSetLabelOn( &_this->ToggleButton, 0 );
  WidgetSetToggleButton_OnSetLabelOff( &_this->ToggleButton, 0 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const046C 
  ));
  CoreRectView__OnSetBounds( &_this->Text2, _Const0468 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppParamToggle_Slot );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppParamToggle_Slot );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &WidgetSetSwitch_Medium, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::ParamToggle' */
void AppParamToggle__ReInit( AppParamToggle _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'App::ParamToggle' */
void AppParamToggle__Done( AppParamToggle _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppParamToggle );

  /* Finalize all embedded objects */
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ParamToggle' */
void AppParamToggle__Mark( AppParamToggle _this )
{
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( _this->param );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::ParamToggle.Slot()' */
void AppParamToggle_Slot( AppParamToggle _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->ToggleButton.Checked )
    WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const046D 
    ));
  else
    WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, EwLoadString( &_Const046C 
    ));
}

/* Variants derived from the class : 'App::ParamToggle' */
EW_DEFINE_CLASS_VARIANTS( AppParamToggle )
EW_END_OF_CLASS_VARIANTS( AppParamToggle )

/* Virtual Method Table (VMT) for the class : 'App::ParamToggle' */
EW_DEFINE_CLASS( AppParamToggle, CoreGroup, "App::ParamToggle" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppParamToggle )

/* Initializer for the class 'App::ParamSpecific' */
void AppParamSpecific__Init( AppParamSpecific _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Line, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppParamSpecific );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const02FD );
  CoreRectView__OnSetBounds( &_this->Text, _Const046E );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const046F ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Line, _Const0470 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Line, _Const0471 );
  ViewsLine_OnSetColor( &_this->Line, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0472 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, 0 );
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Line ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &FlatFontM, ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::ParamSpecific' */
void AppParamSpecific__ReInit( AppParamSpecific _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Line );
  ViewsText__ReInit( &_this->Text2 );
}

/* Finalizer method for the class 'App::ParamSpecific' */
void AppParamSpecific__Done( AppParamSpecific _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppParamSpecific );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Line );
  ViewsText__Done( &_this->Text2 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ParamSpecific' */
void AppParamSpecific__Mark( AppParamSpecific _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Line );
  EwMarkObject( &_this->Text2 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::ParamSpecific' */
EW_DEFINE_CLASS_VARIANTS( AppParamSpecific )
EW_END_OF_CLASS_VARIANTS( AppParamSpecific )

/* Virtual Method Table (VMT) for the class : 'App::ParamSpecific' */
EW_DEFINE_CLASS( AppParamSpecific, CoreGroup, "App::ParamSpecific" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  CoreGroup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppParamSpecific )

/* Initializer for the class 'App::Device' */
void AppDevice__Init( AppDevice _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDevice );

  /* ... and initialize objects, variables, properties, etc. */
  _this->settings = 0;
}

/* Re-Initializer for the class 'App::Device' */
void AppDevice__ReInit( AppDevice _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Device' */
void AppDevice__Done( AppDevice _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDevice );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Device' */
void AppDevice__Mark( AppDevice _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::Device.IsDisableExpanded()' */
XBool AppDevice_IsDisableExpanded( AppDevice _this, XInt32 zonegroup )
{
  if ( zonegroup == -1 )
    return (( _this->settings & AppDeviceSettingDisableFireExpanded ) == AppDeviceSettingDisableFireExpanded 
      );
  else
    if ( zonegroup == 0 )
      return (( _this->settings & AppDeviceSettingDisableRoutingExpanded ) == AppDeviceSettingDisableRoutingExpanded 
        );
    else
      if ( zonegroup >= 0 )
        return (( _this->settings & AppDeviceSettingDisableExpanded ) == AppDeviceSettingDisableExpanded 
          );

  return 0;
}

/* Variants derived from the class : 'App::Device' */
EW_DEFINE_CLASS_VARIANTS( AppDevice )
EW_END_OF_CLASS_VARIANTS( AppDevice )

/* Virtual Method Table (VMT) for the class : 'App::Device' */
EW_DEFINE_CLASS( AppDevice, XObject, "App::Device" )
EW_END_OF_CLASS( AppDevice )

/* User defined auto object: 'App::DummyConfig' */
EW_DEFINE_AUTOOBJECT( AppDummyConfig, AppDeviceConfig )

/* Initializer for the auto object 'App::DummyConfig' */
void AppDummyConfig__Init( AppDeviceConfig _this )
{
  _this->zonenum = 1;
  _this->unitnum = 1;
  _this->combination = 10;
  _this->numparams = 2;
  EwRetainString( &_this->location, EwLoadString( &_Const0473 ));
  _this->numinputs = 1;
  _this->numoutputs = 2;
}

/* Table with links to derived variants of the auto object : 'App::DummyConfig' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyConfig )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyConfig )

/* Bitmap resource : 'App::FireRouting' */
EW_DEFINE_BITMAP_RES( AppFireRouting )
  EW_BITMAP_FRAMES( AppFireRouting, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppFireRouting, Default )               /* ratio 39.51 % */
    0xFC09FF00, 0xBBDDCF17, 0x157CE07F, 0x0E4BB7FB, 0xB2AF7FA0, 0x0AE7F9A4, 0x168A1A0B,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFE6A2D2B,
    0xE7D37AE5, 0xB757B61F, 0x39DBE5FE, 0x7CCEE050, 0xB2318CFF, 0x1ACB7104, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0x9264C4E2, 0x37ABFD38, 0xA1D05E6F, 0xA53AC353,
    0xD96C550A, 0xAAC966B1, 0x5FF12885, 0x20AB5134, 0x174B4CC2, 0x1EB3DDAD, 0xBB5DDEDB,
    0x3B2F6E97, 0xE5E2EA84, 0xE130583B, 0x6960FFC3, 0x2957DA39, 0xE86C2E2C, 0xE672BAB6,
    0x132E295F, 0xF5D2E9C1, 0x783D9F8F, 0xFAB95D36, 0xCC4BAA97, 0x171B95C9, 0x15117D56,
    0x30C9CA96, 0x6FB7FA6D, 0xD076C1DE, 0x8563FD9A, 0x56BFCE66, 0x049F83AB, 0x9AD6317E,
    0x31DAFF3A, 0x5ED0363B, 0xFEF781F3, 0xEC1633A9, 0x6F322ADF, 0x7A576B0C, 0x6E45CB4A,
    0xE3FB46B0, 0xC0B9EF47, 0x65BEF4E8, 0xCF8BA7FB, 0xC5C2DFA0, 0xEA998966, 0xC875E44B,
    0xF7C40A16, 0x723B5F0F, 0x4D63C0FF, 0x83C13A34, 0x99FC40CE, 0xFF2F8C13, 0x19858298,
    0x4A87C5DB, 0x33FC6415, 0x20A4290D, 0xED3D99D8, 0x34CD9410, 0x8E63D8FF, 0x13D61A37,
    0xD4FF368E, 0x111E8702, 0x4D53345E, 0x9D918CB0, 0xF2509132, 0x1CF73F4F, 0x003B0F84,
    0x22C86302, 0x44A248FF, 0x9304FF16, 0xE8FF2388, 0xFF3A8F23, 0x3C8FB3F8, 0xC822F4FF,
    0x42C4FF21, 0x92551C86, 0x5B964701, 0x96A5D95A, 0xA5E9865C, 0xF2C66098, 0x1E051E06,
    0xA03E4FD8, 0x2849F345, 0xC4923CFF, 0x42D0FF15, 0xC8FF1F07, 0xCF35CDD3, 0x2A4AA369,
    0x8FF76110, 0xA982652C, 0x291316CA, 0x2436CEE5, 0x30CCA3BA, 0x0E73DCFF, 0xA749FB89,
    0x409E42CC, 0x135B0601, 0x17C51281, 0x0DB37D04, 0x338E2174, 0x10CA3B2A, 0x0B32DC93,
    0xAAEAC3B5, 0x6AEABEAD, 0x6AC2B4AC, 0x50DB3CEB, 0xF13E6A43, 0x244FF3A4, 0xD2017450,
    0x0840562A, 0x68B22CCE, 0xE73C0FA8, 0x33CEF3FC, 0xEAAAB9CC, 0x3374FFAC, 0xF5482C0B,
    0xE7739024, 0x390F5A91, 0x8C03FCDD, 0xC6588920, 0x08BF4C45, 0xEF7F4882, 0xA92DBB34,
    0x291BC6DD, 0x1BCAF3BC, 0xDEF4BD9D, 0xF867621B, 0x258CC680, 0x8A83FC99, 0x32D54717,
    0x54EF9E07, 0xDCBD0D03, 0x7F30EBD6, 0x9483ED02, 0x33D4F43E, 0x66EFC590, 0xE53DAFBC,
    0x310E9890, 0x0EA7F4BF, 0xDC371A80, 0x5D5BC630, 0x2840B2AC, 0xCA72BCB7, 0xEFB79B2C,
    0xB9324FBB, 0xCDD531CE, 0x32358DD3, 0x6D33DC9B, 0xCF081CF2, 0x6520D235, 0xCAC92A8D,
    0xF8CFB28B, 0xD3B3FC96, 0x352CCF50, 0x5D3F53D3, 0x5354BCB5, 0xD27F328D, 0xC089F278,
    0x94A76462, 0x42308030, 0x6756D2EF, 0xFACCB69D, 0xBE76CDB6, 0x751DBB56, 0x8D4B72C3,
    0xBA553EB2, 0xC5584761, 0xD9C92218, 0xB6BDCF6B, 0x73CA5093, 0x4D0433CD, 0xCC924CC3,
    0x8023BA92, 0x4C9344F0, 0x3D14DA9E, 0x964D579E, 0x28388F57, 0x320D03BE, 0x0E03A291,
    0x43B99EA9, 0x10CE3590, 0xFBEA4D54, 0x73CEC3D0, 0x0E23A8F8, 0x89606945, 0x2B7FDF56,
    0x0ED3770D, 0x3DB6ABEB, 0x0B0800EB, 0xD2CE581A, 0xF0E53FDB, 0xDDA90B82, 0x9D4AC2B4,
    0xBB52B7C7, 0xED02BD4E, 0x14812F6B, 0x672CCFF2, 0x268CE6F8, 0xCEECC5B3, 0x72C62035,
    0x60672C7C, 0xCB33CEB9, 0x25CD073C, 0x1AF75898, 0x6E937EDF, 0x2EA8E98F, 0xB42E4E24,
    0x2F0E43FC, 0x005FF939, 0x7F8B6177, 0xBB180398, 0xC63A5488, 0x987A33F1, 0x99961C23,
    0x53AC1882, 0x22B16AAC, 0x46A2EF2E, 0x92013C27, 0x0B81384D, 0x39877291, 0x52C23718,
    0x1F262184, 0xB42085F1, 0xA47FB997, 0x9BED19C3, 0x414E8550, 0xE3FC3185, 0x8610C51C,
    0x07F182CA, 0x3286FC41, 0xEE443B7C, 0x678ED5E6, 0x5C142E4C, 0x102AC8B8, 0x35739D65,
    0xC0AB2631, 0x01FF13CC, 0xA935AF0D, 0x57DB981F, 0x8FF8163D, 0x0B61344C, 0x148510FF,
    0x591080C2, 0xD55482BC, 0x689C0508, 0x2C48A158, 0x71FD0B41, 0x11F4B347, 0x22A5038F,
    0x20A0710D, 0x08818484, 0x62C935B3, 0x6E8688EB, 0x5005013E, 0x2E0BCA65, 0x8673CFCC,
    0x112A0861, 0x13B7420B, 0x21D0A922, 0x83FC5E8C, 0x16104E13, 0x8C41FE6B, 0x8AE23C46,
    0x78CE7459, 0x6E0F23CA, 0xDB1E2CF0, 0x989299E0, 0xF9362DD4, 0xA27C94AA, 0xF5463807,
    0x03D99547, 0x878C101D, 0xC711AA36, 0x1F8B7611, 0x3CC7FAFD, 0x6F2793D4, 0x3933A360,
    0x132ACE7A, 0x10B09C73, 0x209110A3, 0xF5523AD5, 0x517C4C0F, 0x4478C63B, 0xC581FD34,
    0x72ECF997, 0x08C769FD, 0xD18E71ED, 0x101D23DD, 0xD4ECE73C, 0x865C2219, 0xFCEF9CA8,
    0xB5C056C6, 0x8B847295, 0xC6E0E21E, 0xA219F256, 0x9D30298E, 0x041D0CE8, 0x120E31EB,
    0x6878E2BD, 0xF61B45C1, 0x34770FF0, 0x793A1943, 0x116281C7, 0xB26D3407, 0x04808D18,
    0x9CF9BD28, 0x68A36078, 0x51C3009F, 0x4D8FF90E, 0x2691013C, 0x50142945, 0x3E4BC99A,
    0x989A5841, 0xD144A6C2, 0xB1208B85, 0x42F8A432, 0x86214C4C, 0x13C3FC36, 0x2650805A,
    0x93D25A56, 0x441343FE, 0x50A814F5, 0xE6A61613, 0xA07E0EE2, 0xE1D63CCD, 0x642C64C2,
    0x03285814, 0xD5A0AA69, 0xAB757054, 0x316AFD5D, 0x6E37F11E, 0xEF6D1166, 0x5234C772,
    0x542C09E7, 0x00A92FA8, 0xC0E62DA2, 0x02A86C50, 0x0760FF15, 0x57A87432, 0x18C72A1D,
    0x2DC6F8FF, 0x3DA7516A, 0xA41FE204, 0x908B61A8, 0x402B8A82, 0xC0A91B28, 0xF4943FAB,
    0xA2D8708F, 0xE8C8C87F, 0x8901943F, 0xB3A325BF, 0x24C48D9B, 0xD00CD392, 0x435BAE09,
    0xB6281023, 0xC8949A90, 0xA06A5070, 0x41AA3FC3, 0x6C88518A, 0x65FA9576, 0x8D31DB32,
    0x1062FD85, 0x18C502E5, 0x5897DB17, 0x0B74F6C4, 0x187951BB, 0x987BA4D7, 0x6DCE1FCE,
    0xA20E3E52, 0xC682E95C, 0x6EB5D31F, 0x1C98E893, 0x142E8067, 0xD8490A0F, 0x78A36B42,
    0x4D40835C, 0x792EA6EB, 0x44470C66, 0xDC2083D3, 0xA2537CA4, 0x75682B0A, 0xC3C87016,
    0x8A21AC3F, 0x14E3650C, 0x2906C578, 0x5293614C, 0x0326C29C, 0xFF7F6D9E, 0xD8500D41,
    0x4DB6C1B6, 0x614383E3, 0x21F45F5B, 0x6A309D30, 0xAEB10030, 0xBA50E474, 0xA45DEDD4,
    0x6F4F21CC, 0x9F5B02C0, 0x5B0FEA08, 0xB6F9988B, 0x4C9B3E38, 0x50DC1885, 0x2B6057AD,
    0xA060EB1F, 0x0FD3F8BC, 0xC3F0DD0E, 0x0F83D0BA, 0x17415153, 0x48C61713, 0x41520A96,
    0x684C0CF5, 0x6CBC9505, 0x51FD6E61, 0x4350781E, 0xC490CC37, 0xC12A7E25, 0xCBF8BF23,
    0x16057974, 0x52165512, 0x7816F974, 0x9A7483F8, 0x74CF3931, 0xBAF3B728, 0x71FE88C7,
    0x4864528D, 0xAA65C716, 0xE49CF791, 0x8802B2C5, 0x606910A4, 0xFE8B1165, 0x3C664F04,
    0x6C38264E, 0xDCF60B31, 0x50A3CD41, 0x3CC19F2C, 0xF52AC5E9, 0x180AFF1F, 0xA4DA0A3D,
    0x1DEDBD27, 0x306880D1, 0x552E5108, 0xA8D2B138, 0x7FA573EE, 0x4DB30861, 0x8B5297D7,
    0x71DC3E4E, 0x62546520, 0x8308ACCB, 0xD5ABEB4F, 0xD55A5354, 0x644C7919, 0xA80B3D2A,
    0x541E4926, 0xBA7966E5, 0xB56C0B21, 0x8C790CE2, 0xFD81242B, 0xC5236AEB, 0x05F8FF2A,
    0x12F5CA1F, 0xCBDB5214, 0x6275F6E0, 0x5C16128C, 0xDE4581B0, 0xB63005C8, 0xF5DB0637,
    0x36E2DB19, 0xACFBBC32, 0x02C89898, 0x4B2B620C, 0x2C915235, 0x2B0578AE, 0xB905815A,
    0x826DFDE3, 0xBF23FB5B, 0xE49503D0, 0xF4D00EF1, 0x3104E1E3, 0x41B43FC8, 0x09145E0B,
    0x4C488D10, 0xF06A7C17, 0x30BC1770, 0x720328B4, 0x338A71A6, 0x501E23CE, 0x004049EA,
    0x00000000

  EW_BITMAPS_TABLE( AppFireRouting )
    EW_BITMAP( AppFireRouting, Default )
EW_END_OF_BITMAP_RES( AppFireRouting )

/* Table with links to derived variants of the bitmap resource : 'App::FireRouting' */
EW_RES_WITHOUT_VARIANTS( AppFireRouting )

/* Bitmap resource : 'App::GeneralOutputBitmap' */
EW_DEFINE_BITMAP_RES( AppGeneralOutputBitmap )
  EW_BITMAP_FRAMES( AppGeneralOutputBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppGeneralOutputBitmap, Default )       /* ratio 24.07 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0x1F5BC3DE, 0x46A3132F, 0x761F9693, 0xD3AC0544, 0x98C75A3F, 0x0835924A, 0xCE5D547B,
    0x5633FD62, 0xFEFED7ED, 0x9FC7F9FF, 0x180E0080, 0x260681E0, 0x0482E058, 0x83208836,
    0x1273F57F, 0x13FD3857, 0xFC942ECA, 0xE53A4E73, 0x3A8E83FC, 0x49E3FCE7, 0x77D8922E,
    0x54E23695, 0x2C3C8FF3, 0x8B22D8AE, 0x2318B8F2, 0x48D6328C, 0xE62F8DE3, 0x368EA338,
    0x652348F2, 0x8995812A, 0xD3FC8C2D, 0xD4DA388D, 0xD4378D78, 0x2CC933FC, 0x14E89884,
    0xB8E22A8A, 0x623D95E3, 0x5C966569, 0x8B65E96E, 0xD4E4C240, 0x23FC8593, 0xFCCE36CD,
    0xFF9ACF03, 0x38CE7390, 0x4B9280FF, 0xF2054386, 0xCA779D4F, 0x7C9E2762, 0x951519EA,
    0xA828FA5D, 0x4A068396, 0x0561A1E8, 0xCE305579, 0x3BCFF2EC, 0xCE38D690, 0x33FCE239,
    0x58CF36CD, 0x69A6A68A, 0xA6E9DA5E, 0x67FA729E, 0xFA96868A, 0x9AA7A225, 0x8A5EE60A,
    0x374D753A, 0x26B96E4D, 0xEA468F3C, 0xDCFFADCE, 0xB8AE4EEA, 0xAEEBCAEA, 0x6A489EBE,
    0x5A16C4AA, 0x8685AA2C, 0xAA5392E9, 0x8789F300, 0x235398EA, 0xF3ACED3B, 0xF0D030CF,
    0xCD2E8FF2, 0xB76DB2C8, 0xADCB7ADF, 0x3B8EE0B8, 0xA6C6956A, 0xAABAEC8B, 0x55A40962,
    0xD43541E8, 0xB7B8BE7A, 0xA8EA3B0E, 0xD83426C9, 0x268FF330, 0x15094A44, 0x6BB6C7A0,
    0x2A5BC170, 0xB061213B, 0x3FCA8310, 0xCE93ACEA, 0xC2F4FFAF, 0x54FF2D8C, 0xEAC11D28,
    0xC231DC1E, 0x2CBBBE3C, 0xD3FD8F61, 0xFCA4304A, 0xC5350C93, 0x2F4A73FC, 0x88E3FC9C,
    0xCC70FF78, 0x7F37C82E, 0xF0AB321C, 0xCCD96482, 0x4BA27950, 0xF294FF24, 0xDA79264B,
    0xC3C0DE09, 0xD3F39CEA, 0x70A8C71E, 0x827160BC, 0x90E05E4B, 0xE53FCDF3, 0x888E43A0,
    0x74BD10B9, 0x8D434DCD, 0x4EA5D473, 0x9657F3ED, 0x3FC882D4, 0x4D2370D5, 0xB38CDD8D,
    0xD0953FCD, 0x64C08872, 0xD3B66BA3, 0xF22AA768, 0x3248FFC2, 0x2CFF208B, 0x90CB4D63,
    0x8721A3BE, 0x0BC290FF, 0xA53B3226, 0x67974758, 0x7EE6523C, 0xE0381CD9, 0xF3CC2767,
    0x82E4FFC8, 0xBCEEB78C, 0xAC3C6BB3, 0x38CDF3FF, 0x8C73FCDD, 0x17ECC234, 0xE3B6304D,
    0xB9EDCC6E, 0xCB78AEF7, 0xF9FDFAC2, 0x38D7C4DF, 0x7CDAD538, 0xB3A94D63, 0xF36B4BEA,
    0xFCD9B3D0, 0x6F0EE7EF, 0xF6ABE87D, 0xB1E91BC5, 0x3FCA730C, 0x634B5AD4, 0x8334FFF8,
    0x2F89324D, 0xD4CB7E9E, 0xF53EAFB7, 0xFA0F5FC1, 0x4E8EEEFC, 0x10B1C978, 0xEE3B7DF3,
    0x31F143B0, 0xDE5DC0D3, 0xCF3636DE, 0x0778AF61, 0x0898944C, 0xC0640B83, 0xF3FC1FE2,
    0xB576EA5F, 0x22D0658B, 0x20333463, 0x3507E4FD, 0x70C615B5, 0x31C5B388, 0x688FF15C,
    0xFF19A364, 0x42300558, 0xC4F23951, 0xDC30812F, 0xE110B2A0, 0xC7743B8A, 0xCBF33485,
    0x8C41B032, 0x1C63707F, 0x1021F0D8, 0x1FC41885, 0x46887116, 0x9312A224, 0x3A2444C8,
    0x5C5088F1, 0x32C113E2, 0x83B03C91, 0x43D8B011, 0xC5C6C632, 0x87117A1C, 0x16CB49E4,
    0x5B07D221, 0x7C156330, 0xD31822EB, 0x98A8C5F8, 0xF1558D11, 0x834C6903, 0x43D03DC5,
    0x235C6C8D, 0xC756C71E, 0x1822747A, 0x4240C890, 0x38880314, 0x7911E5DC, 0x2D1EE44C,
    0x013C9A13, 0xE89F3662, 0x470A2405, 0xA1D0408B, 0xCE590331, 0xC8A90E26, 0x8F522E36,
    0x24E4894E, 0x4D87D237, 0xC91C62FC, 0x0D260010, 0x06568FF2, 0xA8719080, 0xD16C3DA3,
    0xF27A380C, 0x4D94A096, 0x0FF96A2D, 0x0FE62A59, 0x3FE56871, 0xB84AB002, 0x9D213318,
    0x3023C5D0, 0x683E4A40, 0x58F32D27, 0x3973274E, 0xC5A03E1D, 0x6310F326, 0x89E0FA55,
    0x0342485E, 0x40484CC5, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( AppGeneralOutputBitmap )
    EW_BITMAP( AppGeneralOutputBitmap, Default )
EW_END_OF_BITMAP_RES( AppGeneralOutputBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::GeneralOutputBitmap' */
EW_RES_WITHOUT_VARIANTS( AppGeneralOutputBitmap )

/* Bitmap resource : 'App::GeneralInputBitmap' */
EW_DEFINE_BITMAP_RES( AppGeneralInputBitmap )
  EW_BITMAP_FRAMES( AppGeneralInputBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppGeneralInputBitmap, Default )        /* ratio 24.07 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0xC7BB921E, 0xA97B1D41, 0x56AFF63A, 0xFDC86027, 0xCB162EC8, 0xBF673FD9,
    0xBFCFDDAA, 0xFF7E3F5F, 0xDFD7FDFC, 0x18160280, 0x260081E0, 0x84822048, 0x779E53F5,
    0x4922B556, 0x73A4FF2E, 0x9CFF3A8E, 0xFF3A4E53, 0x620942B8, 0x4DD5E938, 0x23FCE235,
    0xA22689CF, 0x293CA278, 0x8B62B8B2, 0xA328BE30, 0x58BA348A, 0xBE378C63, 0xE64C57C8,
    0x2CC84291, 0x8D436CFF, 0xA37E3037, 0x30A9894D, 0x24888B62, 0x93E368E2, 0x2339464E,
    0x994A5394, 0xAA3B8A23, 0x205CD574, 0x97E5D205, 0x6619791E, 0x4250AD47, 0x9CE339A1,
    0x6C3C0FF3, 0x338D73FE, 0x4A53FCDB, 0xF55A4021, 0x58E3360D, 0x7B95E549, 0x9FE7A9F6,
    0xE3C57A3A, 0xF9C0D653, 0x2271A14F, 0x8AA1A87A, 0x33CD7A2A, 0x8E239A71, 0x63BE2F9A,
    0xECC83FE9, 0xEA559F62, 0xA00EC3A8, 0x67EA827C, 0x98DEA495, 0xB9564B25, 0xAA3FEAA3,
    0xAAEAC3BA, 0x6AEABEAD, 0xB3BE96AC, 0x6A559B66, 0x57374D43, 0xA8ABE3C5, 0x6A3A96C0,
    0xDA9E55A8, 0xC8C55592, 0xC93FCCD2, 0xB32CDB2E, 0x6CEB42CA, 0x02F0C9B4, 0xACEC3FCD,
    0xE88C0ED3, 0x2D618398, 0xD567C09F, 0x13A0E339, 0x0EE8B12C, 0x7C8C2EAB, 0xB1DCA289,
    0x8A853E10, 0xC350FF92, 0xC2B7360C, 0x9E3ACFF3, 0x274B33FE, 0x91D7C4BE, 0x28962355,
    0x1EEBB9EC, 0x829630AC, 0x885D096A, 0x54C2D8C5, 0xB3A4EAAC, 0xA0BC3FCE, 0x05658C42,
    0xC2F1EC23, 0x963C3309, 0x977AA8BB, 0x70B254DC, 0xD03FCBD2, 0x3FCD4314, 0xCC1290B8,
    0xDC714467, 0xA71FC824, 0xEFBB71EB, 0x559E183E, 0xC99BFA5C, 0x12B4FF2F, 0x01C82E89,
    0x4CCE31D7, 0x9434DCEB, 0x1E2CFAC6, 0x7850912B, 0x8EE6390E, 0xFF390DF3, 0x2E08E2A8,
    0xF4EC1B36, 0xCD9721D8, 0xFF25C36E, 0x872994FC, 0x384FF2D0, 0x62F9E4DB, 0xF370D236,
    0xD48829CF, 0x66D8A4C2, 0x9FB39D3F, 0xD4DDA73C, 0x6E10A148, 0x9D23C0F8, 0x982C0FFC,
    0x8721A5E4, 0x8C5CB2B5, 0x52091E35, 0x5CDF53E7, 0x7FD93723, 0xC8E81E77, 0x14FE133D,
    0xF344C133, 0xA3A6E90F, 0xABE97A7E, 0x337ACEA7, 0x76F348C2, 0x1AFA7937, 0xB8EF3FCF,
    0xB2306B63, 0x3A157320, 0xB9CE7A17, 0x457AC5DF, 0xB153BC32, 0xF9F2AFA9, 0xF3FCCF36,
    0x8DBA86B8, 0x455CDF35, 0xAFD8F0FC, 0x92F2381B, 0xF7B2DE53, 0xFE2F7793, 0x8326F5F7,
    0xBEDBB66F, 0xB93FFE88, 0x55CC329C, 0x7D786216, 0xB947D9DF, 0xE1D0D4BD, 0xC13376ED,
    0x3FEB234C, 0xAB8760ED, 0x8D8A7174, 0x4B2AE639, 0x3AFCDFAB, 0x85D13517, 0xA0C44427,
    0xA77032C5, 0xF00A003B, 0x8580C01F, 0x409330EF, 0x785079FA, 0xC0E06A2C, 0x5B14F64C,
    0xD53E0284, 0xFE364668, 0xB0570BF1, 0x0B961467, 0x8867081B, 0xE2756333, 0x8F31190E,
    0x0D129F0E, 0x4EEBE062, 0x3FE20279, 0x3C444884, 0x4588D10D, 0x9712220C, 0x1E26C4A8,
    0x7C4989D1, 0x913C5EA2, 0xE3B05787, 0x45807B13, 0xB6A87632, 0x8B878A2E, 0x16C9A9E2,
    0x6087D221, 0xF137A2AC, 0xD71822F2, 0x98ABC698, 0xF0B18D11, 0x834A68C3, 0x83D05845,
    0x236C6A8D, 0xC598C31E, 0x1202D07A, 0x4240C8C1, 0x38944146, 0x9211E2B8, 0xF322A3D1,
    0xD0B5C5E8, 0x71B2846C, 0x36562405, 0x81D05A17, 0x8E490331, 0xC871362C, 0x8BF23244,
    0x2465048B, 0xE519F927, 0xBF1C626C, 0x300086C8, 0xB87F9069, 0x94840032, 0x68EA1C45,
    0x62AC610F, 0x65CC7B59, 0x8C32AD28, 0x9683FE5B, 0x2C83F8A2, 0x008FF95D, 0xC82DF2B0,
    0x1E2B084C, 0x900C0BA1, 0xA9D80F8C, 0x29343CC9, 0x079A6ACA, 0x8A987C14, 0x1528C534,
    0x17A24888, 0x4266381A, 0x00000202, 0x00000000

  EW_BITMAPS_TABLE( AppGeneralInputBitmap )
    EW_BITMAP( AppGeneralInputBitmap, Default )
EW_END_OF_BITMAP_RES( AppGeneralInputBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::GeneralInputBitmap' */
EW_RES_WITHOUT_VARIANTS( AppGeneralInputBitmap )

/* Bitmap resource : 'App::SounderBitmap' */
EW_DEFINE_BITMAP_RES( AppSounderBitmap )
  EW_BITMAP_FRAMES( AppSounderBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSounderBitmap, Default )             /* ratio 12.04 % */
    0xFC09FF00, 0xBB9DEF07, 0xF5B8E07F, 0x566BB7FA, 0x4EAF7F9C, 0xCAE7F961, 0x168A15D4,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFE59542B,
    0xE6E58AE5, 0xAE69B61F, 0x39DBE1FE, 0x7C4EE050, 0x5B098AFF, 0x1694F104, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0xC56444E2, 0x47A3FD22, 0xA1D05E6F, 0xA53AC353,
    0xD96C550A, 0xAAC966B1, 0x5A113A2D, 0x611050B3, 0xB68B9DA6, 0x6BBBD9EE, 0xDB2DE6ED,
    0xBA1D56CB, 0x1DEF0178, 0xDEB0B82C, 0x6D50B07F, 0xD4CADA41, 0x0390C3E2, 0x393C2647,
    0x63532B2C, 0x4CDE4B0C, 0x96E6B399, 0xF68B2B13, 0x2955968C, 0x7F539F2B, 0x8AAA3554,
    0x50A6D26A, 0xB17CEE8F, 0xB4D7E9D5, 0xAAB5CF71, 0x62B1F0FB, 0x0AA1FEA9, 0xEE761B25,
    0xF625BBD9, 0x1BD3DCF6, 0x42FF6537, 0x5CB2926D, 0xD5E32BEA, 0xD9EC7FB3, 0x71BB1DB3,
    0x725938FF, 0x763CBC8D, 0x7253C7F3, 0xDEEFFF5F, 0x3CFF7B3D, 0xFDA30A65, 0xE9D367BC,
    0xFFDFB373, 0x7FFF9FCF, 0x47B29CAB, 0xD481F97D, 0x15C349D8, 0xFC61E057, 0x309DC835,
    0x8FF288C0, 0x31A89D28, 0x5A178561, 0x1886A148, 0x78DE186E, 0x0A22A5D9, 0xE815F679,
    0xA62889E0, 0xAE2C9028, 0x8BE04218, 0xE328AA0C, 0xE8B1038C, 0x62307A22, 0x2A8EE347,
    0x729AA8DA, 0x11990638, 0xE83A448F, 0x960B90A3, 0x4C915208, 0x92A477B2, 0xE4D6EA48,
    0x98B63594, 0x51FA9263, 0x5893E539, 0x9357395E, 0xCA630CC5, 0x8294A93F, 0xA2669907,
    0x6B996679, 0x3FE6C9A6, 0x1A12589B, 0x29767494, 0xAA783F63, 0x7C9465E9, 0x3DA27606,
    0x4FF3D4F6, 0xD7D09827, 0xA6879767, 0xE0779FB6, 0xA2224789, 0xE3A9EE75, 0x2741CE40,
    0xF251751D, 0xD8A6E896, 0x2A8C6321, 0x292711C2, 0x6A8EA4A4, 0xA2A5A72A, 0xAAA46A7A,
    0x762ACAB6, 0x6AF63D89, 0xC766B3AA, 0x0CB82FDB, 0xAE4C52F8, 0x622BEAD2, 0x16851CA9,
    0xF1ACB02E, 0xE0DB378F, 0xAB2CCFF2, 0xAFEAB188, 0x972AC29A, 0x117CAB2C, 0xA0D03516,
    0xFF5755B2, 0x2C15A560, 0x2E2B3EC1, 0xF1E6B88E, 0xFD053C4F, 0x04BACFC3, 0x368FF419,
    0x0FF2CCD5, 0x81FCBA30, 0x8C5C2A18, 0xB4722B5B, 0x3FC642B0, 0xA63340D2, 0xC3C4F23C,
    0x0000405D, 0x00000000

  EW_BITMAPS_TABLE( AppSounderBitmap )
    EW_BITMAP( AppSounderBitmap, Default )
EW_END_OF_BITMAP_RES( AppSounderBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SounderBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSounderBitmap )

/* Bitmap resource : 'App::SounderVIBitmap' */
EW_DEFINE_BITMAP_RES( AppSounderVIBitmap )
  EW_BITMAP_FRAMES( AppSounderVIBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSounderVIBitmap, Default )           /* ratio 21.84 % */
    0xFC09FF00, 0xBBDE2EE7, 0x0DC0BE7F, 0x576727FB, 0x5E597F9F, 0xC587F999, 0x168A1955,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xA532B91C, 0xFE675796,
    0xE7A5C9BD, 0xB56C2BDF, 0x39DBE5FE, 0x7CCEE050, 0xB31918FF, 0x4C0B6FF4, 0x26594895,
    0x8F71F94D, 0xE8FF3728, 0xF4B3527C, 0x4EAA54A2, 0xAADD54DF, 0x88CA6BB4, 0xDB252513,
    0xBD5E6FF4, 0x72874179, 0xA5B6CA65, 0x3665905B, 0x6E87F989, 0x547FB1DC, 0x99017942,
    0xBBDD6F77, 0x7D7AE771, 0x49ED783B, 0x4544FFB0, 0x65EFF54B, 0xDB90C2CC, 0xC557FE1A,
    0xF07F9753, 0x982345D4, 0x51DE19EE, 0xCE7B385F, 0xE5F2B9BC, 0xA32584C8, 0x17A76906,
    0x57ABC9A0, 0x8645695F, 0x7830AA32, 0x88168AF5, 0x7D3FDCEF, 0xF6F1C0F4, 0xEE73AEED,
    0xFF6E55BD, 0x763B5D9B, 0x26B02D46, 0x05C93F3A, 0x4EA41A16, 0xBADD5EA1, 0x73D6EB3D,
    0x7BFD8CE3, 0x797C79A7, 0x0DB6F17B, 0xF7AFFF5F, 0xC9EAF43F, 0x0FFF966F, 0xD66BF8BC,
    0x1A7F6168, 0xFF772A75, 0x4FF74DDE, 0x75D97460, 0xFDBA5F1C, 0x5B5CA035, 0x1809A181,
    0x0DF388FF, 0x93C1EF30, 0xB5EE7B0D, 0xEB869BE7, 0x846163D9, 0x20E3FE13, 0xA8118584,
    0xFA085F60, 0x02812065, 0x6619615A, 0x19E715E5, 0x46EDA015, 0x0A2F651A, 0x7028C7F8,
    0x8661B860, 0x0806FA40, 0x96C07129, 0x6E306991, 0xA167E326, 0x9223792D, 0x1B673185,
    0xC92E286E, 0x71C27021, 0x28718EF8, 0x949B8726, 0xD191651F, 0x13FE0F17, 0xACD33B0F,
    0xE23D8FC7, 0x7AE6C9A8, 0x2649A667, 0xE9492989, 0xBA5681E5, 0x4B7AE587, 0x981CA976,
    0xDE67D919, 0xE7A5E77C, 0xD2868763, 0xF8A09F47, 0x3FE237E9, 0xCC9394EA, 0x22ECAE6E,
    0x80E43FC9, 0x997ACC23, 0xA5E95A6E, 0xE93A464B, 0xAA091FA3, 0x71EAA168, 0xF07BAAA8,
    0xA32AEA0D, 0xA65889F9, 0x787A1484, 0xE63FAAE1, 0xB487E1DA, 0x45E74ACA, 0x87068634,
    0x7A01D727, 0xD4A72191, 0xE39ACFF1, 0xB2AC83FC, 0xEC39491F, 0xF482C175, 0x1EB6AF68,
    0x17AEEB8A, 0x64AA4AF6, 0xEDB8F63B, 0x590DEEB8, 0x214A80A4, 0xB9368DC9, 0x6A9A78E0,
    0xAE145EF0, 0x37AE41B6, 0xCD931CA4, 0x6E9A2669, 0x9AE1C9B6, 0xE717BAFE, 0x1BA2FA3F,
    0xE92791AF, 0x6FBFF03B, 0x6FB01C32, 0xD29C1703, 0x6A52A2A3, 0x729AA629, 0xBBA7F19A,
    0x6A6DFC55, 0x6D6C2320, 0xC92F1599, 0x7B1AA771, 0x9E96F17A, 0x47E65C79, 0x1CBB4ED5,
    0xBB3D206D, 0xDACD3DAC, 0x32CD2D1C, 0xC8706B57, 0xEC4CC5AB, 0x6465CDCC, 0x26CEB333,
    0x3D44D28B, 0xBAA028D7, 0xB22BBAEC, 0xBCFF22B1, 0x42EDD415, 0x8F445199, 0x80B56C1D,
    0xC97300B5, 0x22A4563F, 0x0368D798, 0x5C48369D, 0x80B6BD57, 0x8D53561C, 0xB288547E,
    0xBF5ED7D7, 0x625BF6A2, 0xDFF6F74A, 0x8EBA1F7B, 0xB450CA39, 0xE381BBC9, 0x6EE0389D,
    0x6FAE4E07, 0xCDC3C8F8, 0x326C673F, 0x2B98E346, 0x8FE3399E, 0x3E0FE7AF, 0x8853FCE6,
    0xBE6C7429, 0x63A6E9F8, 0x1CE779DE, 0x1A49E1C7, 0xBB0EB8FF, 0x5EBFB1EC, 0x63B6ECFB,
    0x9AEA7871, 0xEAD19EF7, 0x6BAF02F5, 0xC2AC90E7, 0xFB8CEF07, 0xF4F0927E, 0xF3FC1F0E,
    0xBC7F15BE, 0xFEA3C8F2, 0x43D8F311, 0xD5F4A87F, 0xF6756F77, 0xFCDF87CE, 0x6F53DC7A,
    0x83DAE73E, 0xE5B6FE3F, 0xE27EEF27, 0xFEA64F7A, 0x6FB7DAFC, 0xFFDEFBFD, 0xE2FEFE9E,
    0xFE7F6F33, 0xFAE00BF7, 0x5F8B27B4, 0x811FE250, 0x12BE0520, 0x220540B8, 0x7C0C81D0,
    0xA0B6BE20, 0xEFE1BB89, 0xDE64027C, 0x4121CAE7, 0x3AB07A00, 0x5220C1D7, 0x788F773A,
    0x17458E4C, 0x10C8614C, 0x185F87C3, 0x114731A2, 0x35EAF5E1, 0x0EE9C2B8, 0xD0141E71,
    0x15B3AC16, 0x0EE2E036, 0x3785C8FF, 0x318FF17E, 0x562B42CC, 0xE2614C43, 0xD8BC3736,
    0x644A7BAD, 0x0262741C, 0x61B45906, 0x06A8A92B, 0x9672CA2C, 0x2C85887F, 0x0AA10C3B,
    0x608B7241, 0x666C8260, 0x0B18E1CB, 0x105F87A3, 0x80F23C62, 0x41FA3FC7, 0xE4188247,
    0x1A88B41F, 0x88A18220, 0x1601747F, 0x1AE193B0, 0x32927907, 0xA747A2D0, 0xCC2B8698,
    0xF4790F34, 0x01011FE4, 0x00000000

  EW_BITMAPS_TABLE( AppSounderVIBitmap )
    EW_BITMAP( AppSounderVIBitmap, Default )
EW_END_OF_BITMAP_RES( AppSounderVIBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SounderVIBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSounderVIBitmap )

/* Bitmap resource : 'App::VIBitmap' */
EW_DEFINE_BITMAP_RES( AppVIBitmap )
  EW_BITMAP_FRAMES( AppVIBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppVIBitmap, Default )                  /* ratio 19.14 % */
    0xFC09FF00, 0xBC5E2EE7, 0x81AABE7F, 0xD48727FB, 0x28597FAE, 0x6587FABD, 0x168A2B92,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xA532B91C, 0xDEFF8916,
    0xEFF5CA88, 0xFF6C32D5, 0x281CE9F2, 0x7FBE6750, 0xFB19668C, 0x44D2A5B7, 0x22932A96,
    0x69929A5D, 0x9B4AA7CB, 0x348A854A, 0xB84944E2, 0x479BFD92, 0xA1501EAF, 0x0D4EA951,
    0xD969D64B, 0xA2D366B1, 0x9FF568CD, 0xFED161A8, 0x56BA3CBD, 0x77B3DDAC, 0x8BA9663F,
    0x8BDAAFB7, 0xF2F54E76, 0xE12FF7CB, 0x6AF985BC, 0x30EB04B1, 0x1D8C2E48, 0x189C9E1B,
    0x95C965B1, 0xBCA65F31, 0xCD673339, 0x1E762364, 0x69B3FA0D, 0x8AEFA8CF, 0x34FABBEE,
    0x53A5D769, 0xB174A443, 0x933EEC2D, 0x03B3FD36, 0x3AD91329, 0xE6E1FFBD, 0x6CB5FB14,
    0xCB5BABB3, 0xD2E89336, 0xA8E3743F, 0x2892A3FD, 0xD6EA4814, 0xEE674BA1, 0xE3F7B61C,
    0xAE93957C, 0x3FD3A872, 0x11BAEB78, 0xBA6DA74C, 0xDBEB51A2, 0xDE4F57A3, 0x7BCBF7FC,
    0x9FDF1AE9, 0x56A48AF4, 0x08E154FF, 0x4755D32A, 0xFDED3A90, 0xFF3B0FC3, 0x39CF73E8,
    0x60782D02, 0x3805D87B, 0x01FE3FE0, 0xF9525F78, 0x6E9B8639, 0x1666F9BC, 0x470DBE70,
    0x48E23A16, 0xDB3ACEF7, 0x8B62B3FC, 0x4E33CCF6, 0x582A0C84, 0xCE3184A3, 0x2C8BA2F8,
    0x3FE2973E, 0x4C7350D9, 0x16EE1F52, 0xF9C188DC, 0x9F710931, 0x745CF771, 0x51F75A05,
    0xE3FDDA85, 0x1C6159A4, 0xDE391CE2, 0x38A315C4, 0xA3698634, 0x03CE3898, 0x65719726,
    0x4E58DDD9, 0x94E15956, 0x46795606, 0x56389822, 0xC5E979DF, 0xEE7C1EE7, 0x7D2787B0,
    0x481639E5, 0xB3FDC425, 0xDE643ACF, 0xFFA1E358, 0x93096208, 0x9F39DD99, 0xA7BC549E,
    0x1C56A4E7, 0x195909E2, 0x8560485A, 0xA61820EE, 0x198E1083, 0x0A06852A, 0x48A76048,
    0x73886181, 0x4DE3B4F1, 0x83E0FC98, 0x86B6AD0E, 0xAEACEB19, 0xA75279AE, 0xE13946AA,
    0x79860FA8, 0x8889806A, 0xFF8629E2, 0x8AA28481, 0x6398EE3D, 0xBB4E61A2, 0x02CF8EE3,
    0x6A3FE429, 0x398EA3FE, 0x0B1B0CD7, 0x53FCB12D, 0x84D237CE, 0xE3BA6E79, 0xB7EC7B96,
    0x51FB76E1, 0xC3722BB6, 0x52328C23, 0xD1B5A63B, 0x906D98F6, 0xE68B7643, 0x2BEA5F3F,
    0x9AFB98E1, 0xF2C0CFF9, 0x7C295466, 0x1BE23872, 0xA22119AB, 0xE20A27C9, 0x163FCE93,
    0xA751FC63, 0xE7523871, 0xDC0920C3, 0x230AC125, 0x8ACAF07C, 0xC9E67CA2, 0x6835430D,
    0xDCAA8CA1, 0x3A88A1B2, 0xE47F290A, 0x360DEA6D, 0x69A804CB, 0x2CCCFF71, 0x8B2CCD50,
    0x7DCEA8C9, 0xAECFFAF5, 0x663ADEB8, 0x084B52AD, 0x661BD3B5, 0x50D3919D, 0xD7AB9D4F,
    0xF5783355, 0x0B7549AB, 0x9AE4B8AF, 0x6BBAAE8B, 0xD9EC3BB7, 0x99FD1331, 0x5DA2E0D9,
    0xB36CBAEE, 0x75BBF69B, 0xC4724DC7, 0x51FB3713, 0x4C6F19C7, 0x86CDC7F8, 0x5AA5B23C,
    0xC4B7F693, 0xF1586ACC, 0x4C7385C5, 0x2A00E239, 0x439DA7BE, 0xCF741CFF, 0xDFC78372,
    0x2E7BA047, 0x878DA6F4, 0xB66CBA3E, 0xEBFAAE89, 0x45A61BA9, 0xEEC58D25, 0xE7ABEDBA,
    0x4DEDFB0E, 0xEEFB84C1, 0xFBFEFFBA, 0x5EF3C15E, 0x27C0F1FC, 0xCAF1BC2F, 0x643BFF33,
    0x3D2F3BB5, 0xC4C3C3F2, 0xC8BF2A87, 0xCDF4FBE5, 0x51529F53, 0x06C543D1, 0x93FCB828,
    0x8EB3348B, 0xA02CC9A1, 0x7E3DEEB5, 0x7B3693DB, 0x22606063, 0x1CA9590B, 0x5D56CD53,
    0x569583FD, 0x009EEBE0, 0x3D127797, 0xEF7B22A4, 0xFE3C8790, 0x12068FD1, 0xA0FF20C4,
    0x03DA3385, 0xE3045688, 0x0C885D1F, 0xBAE80701, 0x16827032, 0x314538FF, 0x79B4F1A6,
    0xFF2783CC, 0x00000808, 0x00000000

  EW_BITMAPS_TABLE( AppVIBitmap )
    EW_BITMAP( AppVIBitmap, Default )
EW_END_OF_BITMAP_RES( AppVIBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::VIBitmap' */
EW_RES_WITHOUT_VARIANTS( AppVIBitmap )

/* Bitmap resource : 'App::BeaconBitmap' */
EW_DEFINE_BITMAP_RES( AppBeaconBitmap )
  EW_BITMAP_FRAMES( AppBeaconBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppBeaconBitmap, Default )              /* ratio 16.20 % */
    0xFC09FF00, 0xBBDDCEF7, 0x5590D17F, 0x1109C7FB, 0xE68B7FA9, 0x48A7FA50, 0x168A24CE,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0x2532B91C, 0x35133A23,
    0xCFF51215, 0xFF65AED8, 0x281CE9F0, 0x7FBE2750, 0xFAD13AAE, 0xCA92B2F7, 0x66912CA3,
    0x9247144C, 0x9F5096D2, 0x354A4D4A, 0x1388C7E5, 0xF5C28965, 0x7A3CDE6F, 0xB54E8540,
    0xC7EA364A, 0xFD7CB25D, 0xD1E6F433, 0xDF65B358, 0x117AADCA, 0xB05EBFEB, 0x39851184,
    0x905D2E37, 0xC341AD3C, 0x9AD02FF6, 0xC2E17D44, 0x71B7F89D, 0x4E8B4FDC, 0x949C9E25,
    0xE674CF27, 0xB3FBFDD4, 0xBF6510C6, 0x61CAEBA0, 0xA368FA1C, 0x2B3E963A, 0xF5B96A96,
    0xEEF67BBF, 0x67442BFD, 0x49DBEA91, 0xF8B9D117, 0xC7518FA8, 0x75CB81AB, 0xBF9FFC4D,
    0x292EFFE3, 0xB4BB84E2, 0xA3CEE7F0, 0xDD4E2EAF, 0xB9562D72, 0xA489EE20, 0xEDA2FB9D,
    0xE77FC3DD, 0xF433D9CE, 0xA0E356E0, 0xBABACF5F, 0xFFF0F7FB, 0xF0F4A281, 0xF6BB64FC,
    0xCF8C67F3, 0xF9CF3FBF, 0x1CD749F5, 0xE45DFA7B, 0x01F181DF, 0x0582E038, 0x83E0851E,
    0xE0D829D5, 0x07DA0284, 0x49AE85E1, 0x0486E158, 0x86180872, 0x61A40A20, 0x58322487,
    0x8E21885A, 0x14896268, 0x2E61849E, 0x4FF2F0B0, 0x32688725, 0xDA378D63, 0x388EA348,
    0x200FF8EE, 0x61E7986D, 0x087E2B8B, 0xE6483F5F, 0x4C912458, 0x7B92990E, 0xCF63D4F6,
    0xA1D0843F, 0xD64E92C8, 0x598B0735, 0x661AD7B6, 0x2587959A, 0xE98E6497, 0x118240E0,
    0x4D621866, 0x995A496A, 0xCBC99A6D, 0xD5ACBF2C, 0xE6719996, 0x709EA5D9, 0x9F67E9EE,
    0x482245EC, 0xE1F48C6A, 0xF08C5FD4, 0x832494E1, 0x9FE7825C, 0xC845468F, 0x239A571C,
    0x1D8539CE, 0xFF9AD206, 0xA4E98A58, 0xE919F257, 0xF21D9CA8, 0x1CEC3B8F, 0xED3A8EC4,
    0x1B0823FC, 0x2ADAAE57, 0x3A9507AA, 0x3271A8AA, 0x6E2154E5, 0x62299234, 0x596AB0ED,
    0x165AC43E, 0xF29CAB6C, 0xB7AEABEA, 0x39644A42, 0xEB4A60E1, 0x53FEA9A9, 0xBCF53D0F,
    0xD3B66D77, 0xA62D0B4E, 0x184344D6, 0xF492CEAE, 0xBC815CA6, 0xDD386A61, 0x3D0FF388,
    0x2F083D5F, 0x9BBAEC58, 0x02E4A9AE, 0x8524EA3A, 0x2520F260, 0xACD26486, 0x596EB8BE,
    0x10881C18, 0x963C0EE4, 0x3F0FB3ED, 0x596C3F0D, 0x82070C41, 0xFF18C0F0, 0x361E8915,
    0x95C7020E, 0xCE9398E8, 0x73FEC73F, 0x78E2765D, 0x29658E33, 0xC9327CAF, 0xB23C86C2,
    0xBB96A1C7, 0xE5A969DA, 0x6D20D47B, 0x1EC8A6D8, 0xECC3FC90, 0xD22C9947, 0x430E3FC9,
    0x1FD1F45C, 0x5B87AD0D, 0xF36CFB3C, 0x028D7651, 0x9D7B2A89, 0xB670B3AB, 0x370D536E,
    0xEF81AD9B, 0xF69D49D4, 0x0C985C5B, 0xCE3FCA02, 0x3FCD2310, 0x6361EC91, 0x6D91F883,
    0xFD455477, 0xFE1E4903, 0x2D8C25FE, 0xAF1574C7, 0x6D995C56, 0xC742CE26, 0x77D6DDC1,
    0x23CA23FF, 0xCF03FCA9, 0x63F30C3B, 0x2907C2B9, 0xFF338BF3, 0x2B493294, 0x476234FF,
    0x5E338DCE, 0x6C7D24E6, 0xB4304FF2, 0x3C4FF314, 0x5963C8F1, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( AppBeaconBitmap )
    EW_BITMAP( AppBeaconBitmap, Default )
EW_END_OF_BITMAP_RES( AppBeaconBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::BeaconBitmap' */
EW_RES_WITHOUT_VARIANTS( AppBeaconBitmap )

/* Bitmap resource : 'App::COBitmap' */
EW_DEFINE_BITMAP_RES( AppCOBitmap )
  EW_BITMAP_FRAMES( AppCOBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 0, 0, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppCOBitmap, Default )                  /* ratio 28.09 % */
    0xFC09FF00, 0xBCDE6EE7, 0x81C0BF7F, 0x976737FB, 0x5E5A7FAE, 0xC597FAB9, 0x168A2B55,
    0xB8AC5E31, 0x8D472331, 0xF48A3F20, 0xC9A3B248, 0x9E512590, 0xE532B91C, 0xFEAF5796,
    0xEB95C9C1, 0xD86C2C1F, 0xA7D3E5FE, 0x9DC0A06F, 0x3B1D1B3D, 0x4C0B8FF6, 0x26594895,
    0x29B4A94D, 0xA32DA7D3, 0x34AA952E, 0xCA49C4E2, 0x679BFD94, 0xA13FDECF, 0x85529D44,
    0x58ACB53A, 0xAACF64B3, 0xEAD19B4D, 0xA4D251BF, 0x73197BFD, 0x68BBD8ED, 0xCBCDDAF1,
    0x3BC7EF77, 0x65F578BD, 0xE0F097AB, 0x230F88C2, 0x960B02ED, 0x2186BF62, 0x38FC9627,
    0x97C9E5B2, 0xACDE632B, 0x5716A919, 0xCE8B2913, 0xAB15A588, 0x72C85D7F, 0x996A18C9,
    0xFF385FD6, 0xAC562A4D, 0xA62D47F3, 0x3D3E95FF, 0xD06DF39A, 0x544F3F7C, 0x3FD80C14,
    0xFDBEDF64, 0xDCAE56A3, 0xAED85D3F, 0x0B93C3FD, 0xD15C3FD7, 0x2793BDFF, 0x83BD2B6F,
    0x7BC1E2ED, 0xBFD9ACDB, 0xFD82C242, 0xD86C3453, 0x1CB1323F, 0xCB738C7F, 0xC2617AD6,
    0x170B39FE, 0x6DB09FEE, 0xC7B3FCDB, 0x66D8BB2E, 0x49107098, 0xD51D5204, 0x324993FD,
    0x49E3FCC8, 0xE298FF56, 0x195B338C, 0xF63C8FF4, 0x3DE1B3D4, 0xE203CA1E, 0xF77CF03F,
    0x9E1D3D0F, 0x21572298, 0x8B8F18A6, 0xCFF3D0F5, 0xB376328B, 0xCCFF3A8E, 0xFF350D52,
    0x8D2263B4, 0xE2C87A1F, 0xE378CB3F, 0x2178818D, 0xAA44DAB8, 0x768D0344, 0x8F53D21A,
    0x19525287, 0x065389E3, 0x1C8A61B9, 0x8A229952, 0x25C90A5E, 0x53C62397, 0x9A1E99E6,
    0x2288E219, 0x578F790A, 0xCEB3B0E1, 0x87B4903F, 0x26135F24, 0xF495D5B3, 0x9862A9BC,
    0xA60A067F, 0x0A165FA0, 0xAE88A0E8, 0x339A22E8, 0x3D64388E, 0x8E73667E, 0x31A0FF39,
    0xEE772C8B, 0xB12C8645, 0x3B4E43FC, 0x280A10EC, 0xE8A15EA4, 0x1A7C3CD5, 0xA43FEA2A,
    0x8CAA8A06, 0xA7EA0AAF, 0xE9A68D9A, 0x74C38A68, 0xF43FCDC3, 0x675BD7D9, 0xDD62E075,
    0x98C8F43C, 0x750587A8, 0x8C749D87, 0x2F87F9D8, 0xC953FCBD, 0x2334FF50, 0xC6837F4E,
    0xD3350B0A, 0x201EA7DC, 0x48F3FD81, 0x53FCC431, 0xFCD5358B, 0xEF3C0E93, 0xBBEB696C,
    0x0818CA7B, 0xF66699B4, 0xD4B61BD1, 0x073D6242, 0x3A8FF9B5, 0x07F78CF0, 0x9556052F,
    0xB9B96DDB, 0x0CBC5712, 0xB057C7D5, 0x8DF3FCB7, 0xEAC8E93A, 0x84EC3915, 0xBFA6296A,
    0x4645BAFE, 0x17234CB0, 0xE8BE573C, 0x84C82621, 0xB41AD195, 0x330FF2D0, 0x71342CE1,
    0xB330A2C5, 0x5DAB480C, 0x94398D74, 0x738E6356, 0xCFFCFCD6, 0xF39CE836, 0x56E82D8F,
    0x8348297A, 0x95CF2BD0, 0xCF73E0F6, 0x58409B3F, 0xD8A1672F, 0xF3966ACC, 0xBB0E89F8,
    0x208A634A, 0x5A0F0B2C, 0x74F3970F, 0x20B08747, 0xA227AD55, 0xE29D9A7E, 0xF47DD92E,
    0x50DC45F1, 0xD59FAACC, 0x3FCE4390, 0x357A7063, 0xD3B4E35F, 0x0EB5BB8E, 0x0A6A237D,
    0x388D047E, 0x6FEA04E2, 0x0715EB95, 0x1F962212, 0x7E8AD5BB, 0x178FFCCE, 0xCC64678D,
    0x4BFA4737, 0x1AD341EC, 0xEF5EF833, 0xAD389DA4, 0x45DE2CDB, 0x033D17E8, 0x9A7E89F9,
    0xBF22626E, 0x225202FC, 0xA43AAB99, 0x3DE8DEBF, 0x3919687B, 0x93E44E33, 0x5CB648A7,
    0x519BDB1D, 0x088EFDEB, 0xB6EB88CF, 0xB32CC69B, 0x794A6480, 0x6FE95E1B, 0x91BB603B,
    0x38A9482F, 0x69D76AB9, 0xFA8AC8A6, 0x4B01851F, 0xA9C8E24C, 0xAFCFA0E5, 0x38C4D86E,
    0xAC34FA0E, 0x33451A29, 0x31120198, 0xD939E7C4, 0x9CCF89C8, 0xB8620903, 0x106623E7,
    0x0542A7DC, 0xE3686D8C, 0x46F0C41F, 0xB3148837, 0x6B42807F, 0x28C903C7, 0x201E619C,
    0x261E4AD1, 0xF4B9048A, 0xA44D1787, 0x62C544EC, 0x955A8A55, 0xCF007FAC, 0x03497B38,
    0x0C87BA2D, 0x75C89123, 0x59DC1069, 0x940FF6EE, 0xFC1DC511, 0xBC3E119A, 0x2C68AB42,
    0x68601FEF, 0xF2CB0B0C, 0x62808B99, 0xC7533719, 0xBEB1DC3B, 0x5743152B, 0x241AB445,
    0x690AD856, 0xE31FE344, 0x4AA0DFB0, 0x685E9074, 0xB8FF1B23, 0x55C70BC4, 0x033C52AE,
    0xC728D143, 0x3AF64CDF, 0x82C2FD46, 0xF44A3973, 0x3E12937C, 0xF026A2E8, 0x34E69D70,
    0xF521AB17, 0xA28A54E9, 0x64869F92, 0x6A2D32C2, 0x92D4984D, 0xA4B72313, 0x41065229,
    0x8046E8C2, 0x48C8B55A, 0xB45E11F6, 0x54A3254A, 0x7A52AF09, 0x840917A8, 0x32AA7008,
    0xF211E94B, 0xE1D86A22, 0x8E41A63F, 0x58C77871, 0x29E4BBC2, 0x7C427987, 0xC3896884,
    0x0F0A1CD4, 0xF8600862, 0x1948906E, 0x19A0D2C3, 0xE26498C5, 0x8700C985, 0xAD719C72,
    0x8B639C7F, 0x8897F25A, 0x11A6C898, 0xF11E43B1, 0xDC3807F8, 0x2671AA11, 0xBA4279AE,
    0x949EFBD2, 0xB2D98385, 0x9EE0642C, 0xB6B25327, 0x216CC188, 0x8CE740ED, 0xEE0F0862,
    0xCE6763FC, 0xC6718E21, 0x11ACC070, 0xF90A1950, 0x189E3407, 0xE3FD000C, 0xCDDB9610,
    0xD1B96F3E, 0xA3F3428E, 0x472904F7, 0x90D1EA45, 0x27A4749A, 0xE4630B2D, 0xBA925293,
    0x5207A5B4, 0x177A1F50, 0x14C0BAC8, 0x13BD38A5, 0x06D2CE82, 0x174C445C, 0x3E5238DD,
    0x414437BB, 0x5E3805B6, 0x394BE290, 0x225952B3, 0x2974338F, 0x91AA2A8B, 0x0578AE2E,
    0xC2E15A2B, 0xD39A4AFC, 0x0F65F2A5, 0x7685F0BF, 0xB28FE862, 0xB5434412, 0x0505C6D0,
    0x1E281F81, 0xBD70ABD0, 0xD0CC4829, 0x82A07FB2, 0x478A3C1A, 0x10127C96, 0x00000000

  EW_BITMAPS_TABLE( AppCOBitmap )
    EW_BITMAP( AppCOBitmap, Default )
EW_END_OF_BITMAP_RES( AppCOBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::COBitmap' */
EW_RES_WITHOUT_VARIANTS( AppCOBitmap )

/* Bitmap resource : 'App::evacuate' */
EW_DEFINE_BITMAP_RES( Appevacuate )
  EW_BITMAP_FRAMES( Appevacuate, Default, EW_DRIVER_VARIANT_RGBA8888, 32, 32, 0 )
    EW_BITMAP_FRAME( 5, 5, 22, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appevacuate, Default )                  /* ratio 56.84 % */
    0x1408FF00, 0xC1A0A000, 0x2A130883, 0x5550785C, 0x3E1E50A8, 0xA5B3D9B5, 0x7E2C8F93,
    0xD250AD3A, 0x230953A8, 0x40A9389B, 0x8A93AA12, 0xE93A8B24, 0xD40712A8, 0x524E3E1B,
    0x80954A35, 0x059BCDA1, 0x90B4E945, 0x850567AA, 0x2D093201, 0x81533420, 0x7C03487F,
    0x93808A5A, 0xA2AA06D3, 0x3545187A, 0x1554CF43, 0x32D0F136, 0x1F875383, 0x88EC2F4E,
    0x8CC189D7, 0x9C1A9E7F, 0xC680D4FD, 0xE16EB63F, 0xD68B6DBE, 0x67B2BFEC, 0x91D05539,
    0x1F87138E, 0xA0E93891, 0xE1922272, 0x05FF4803, 0x4158C590, 0xA211C7A9, 0xB3801AAA,
    0x9B8465B2, 0xA0B8DC16, 0x4F0CC169, 0xD8C8189C, 0x83943727, 0x3D44FF1A, 0x146FF1B0,
    0x48FF1B84, 0x5B3D8EBD, 0xADDB6C36, 0xCD56C01F, 0xB96A34DA, 0xC0C8169D, 0xA4B449B7,
    0x405E0F4F, 0xF9BCCCB8, 0x62094E41, 0x7C24E138, 0xA7515C9D, 0x1536C369, 0x53BFC701,
    0x43FC7212, 0xAA5FFE15, 0xA9FE3A09, 0xFD9EAF42, 0xC5E4F4F9, 0xAA5F1783, 0xBED9EB7B,
    0x2EA5BAE7, 0x06265C83, 0xDCE0FC30, 0xA2690A80, 0x94750C80, 0xA03F4325, 0x76DAE764,
    0x5ED7C5F6, 0xB050AC7A, 0x54AD3FC3, 0xAE3FC3C0, 0x3FC3D054, 0xA20878AF, 0xD87E1D88,
    0x561B050A, 0xF07AE178, 0x779DC795, 0x4FF6ACA3, 0xA8296E83, 0xC40A270F, 0xCC810620,
    0x27A08819, 0x9B87E576, 0x88622C84, 0x7C168822, 0x3F05CB18, 0x060B23FC, 0x0182CE4D,
    0x32D0FF10, 0x4A579565, 0x4C2CA549, 0x0FA4B3FE, 0x64789A23, 0xF769F391, 0xF9787E4F,
    0x600CA383, 0x026058F0, 0x60A13C30, 0x07D5F93F, 0x862A849B, 0x569764E9, 0x068B6952,
    0x8B73FC41, 0x83FC4206, 0xFC4306CB, 0x8AA20B93, 0xA2687A32, 0x4B6A1683, 0xE9F68106,
    0xFE259765, 0xE3858AB3, 0x9A1B8795, 0x09D3E9C2, 0x40F03302, 0xF19B6660, 0xA8834EC7,
    0x9E1B3295, 0x0162C29C, 0xF3FE5A98, 0xFE8FA067, 0x44070BB3, 0x074BC3FC, 0x8BD3FC45,
    0xE3FC4607, 0x22C6B10B, 0xBFB16C3B, 0xAF0BAB06, 0x693A3286, 0x92BEB5A0, 0x4A793FE4,
    0xFF8D1B88, 0x38032664, 0x4270009C, 0xE7F1CC03, 0x760F5C89, 0xB29E5E2A, 0x2DE57AD2,
    0xCBCA141B, 0xEB084A08, 0x7CBFB041, 0xC13FC470, 0x3FC48080, 0x049084C3, 0x1C0C22C0,
    0x08C2C0F0, 0xFFBFAFCC, 0xB0EFBBE4, 0xE91B42CE, 0xBB5ED53F, 0x961704CA, 0x696B2319,
    0x0C59D5B9, 0xC9D4E087, 0x60883401, 0xBDA86AA3, 0xB59EA138, 0x264E0C4E, 0xCFD3FCAB,
    0x83FCF93D, 0xFC8C1CCD, 0xF5088C43, 0x12C2331E, 0x024320FF, 0x5324FF13, 0x1346D102,
    0x921E8DDD, 0x0D0CB3FC, 0xF05CE859, 0x5B1EFFC2, 0xFEBDB3EC, 0x4D93E859, 0xCAA45A66,
    0xCF50CAA0, 0xB050337F, 0x2C316650, 0xE590D722, 0x9721B89D, 0x0FFADE4D, 0x81D45733,
    0x24FE3F94, 0xB73B5486, 0xD1F45310, 0xC4E09B73, 0xF09CCD3F, 0xA0CE3FC4, 0x87E27870,
    0x324BD3C3, 0x8DC3D8FF, 0xD33CFF38, 0x14FF1803, 0x21BF2F43, 0xD62C8D54, 0xE942D4FF,
    0x789E4DA5, 0xC23184A1, 0x9959D696, 0x41C7481C, 0x801414FF, 0xA7E4E0B7, 0x59E9C5F2,
    0xB9A5A1FB, 0x360F3B40, 0xCFFDE8DF, 0x4398E03D, 0xFC580CB8, 0x620FCD33, 0x124D73FC,
    0x8D23FC6A, 0xBF28510A, 0x63D61482, 0xCA2F8F1F, 0x394F9F08, 0x4D13FCEA, 0xBE646711,
    0x42FFBF79, 0xD5A26D1C, 0x9DA4588A, 0x76876633, 0x726D0733, 0xE0240C40, 0x658C9A95,
    0xDC64B9E6, 0x181CAA80, 0xBD3C20F8, 0x040BE361, 0x86F5C674, 0xC8708DB7, 0xF8F51E6C,
    0xE09A3747, 0xA0B99B06, 0xE0C4160A, 0x8CB17E3C, 0x1F462602, 0xF28778EC, 0xA90700A0,
    0xFF61CC0D, 0x02E89D00, 0x61598B15, 0xF1E0538B, 0x22EE6F0E, 0x8D907E9A, 0x81819902,
    0x9F775616, 0x43A7953B, 0x9352921B, 0x73A8550E, 0xC217C2C0, 0xB634C7A3, 0x0C13B731,
    0x987A1C4E, 0xF6F10144, 0x6174720F, 0x418C120F, 0x8301BAF2, 0x1803D1E4, 0x14E0F0CC,
    0x7F8FC1F9, 0xD91A03CC, 0x903C07F8, 0x36090D21, 0x22821422, 0x774A9ED4, 0x08C9D424,
    0x8CE96748, 0x23E0840C, 0x366DAC3D, 0x8890E1EF, 0x7C28C778, 0x7A7C2398, 0x4C24872B,
    0xFDC33881, 0xA0CB1E83, 0x01EAF086, 0x43807FC6, 0x87F85A06, 0x05B06638, 0x7232724D,
    0x188668C0, 0x79C62947, 0xEB1BA354, 0x8095D8A3, 0xCD4F1E68, 0x30FF63A6, 0x80C60C10,
    0xC5C84536, 0x5229B055, 0x01977688, 0x0442ED2A, 0x3E87EAFF, 0x6F3C21F6, 0x9511C1D4,
    0x64140143, 0x087B0F46, 0x188C1DAF, 0x41C63FC5, 0xC39E4E83, 0x87F85E06, 0x85D06C39,
    0x944305E1, 0x62670CA4, 0x45CA894C, 0x22956FB1, 0xE46E240A, 0xD43AA3E2, 0x48141492,
    0xB6572E0F, 0x52F52ACB, 0x07F39B57, 0x0E078519, 0x72A2503E, 0x3FA65829, 0x773C2986,
    0xD315024C, 0xAE3FE6AC, 0x7A864D99, 0x0CE29C13, 0x751B3927, 0x4A652A4E, 0xC0A9B59D,
    0x09B9DA85, 0x0FA0C005, 0xA140E0A9, 0x4CC81370, 0xFF580EF1, 0x223C87D8, 0x8C74B7A8,
    0x3C8D1682, 0x31BA3E1C, 0x03DDE10E, 0x64C4968D, 0x0E293B42, 0x9423DA85, 0x44E71511,
    0x562B5573, 0x433C479E, 0x3AA040E2, 0xE033032A, 0x685D0628, 0x95FE08C5, 0x50FC54AE,
    0x12A4AA43, 0x8EF1FF11, 0x78434C64, 0x3B4748FA, 0x7340B708, 0x629A423C, 0x0819C734,
    0x686F0FF1, 0xFD6FADB1, 0x4A831862, 0x2304764A, 0x9B83138C, 0x47643691, 0xAA62B0D6,
    0x119358FF, 0x1582F33A, 0x870562C4, 0x38FF619B, 0x055B3FF5, 0xD0841B50, 0xE1BF28C4,
    0x00BDCACF, 0x86D0F783, 0xC541FF03, 0x10E1AC71, 0x05C6C8FF, 0x0DDA3B43, 0x54947076,
    0x44234714, 0x5C19B411, 0x50C21FE1, 0xF17732C1, 0xCB4D6281, 0x53CC2E4B, 0x9AC7F70C,
    0x09C0A857, 0x0284F8FE, 0x3F81806A, 0xAE004414, 0xCC12C130, 0xFE910AA1, 0xD1EC76E3,
    0xE4A93D9D, 0x8F54168B, 0xDE14CD1F, 0x0F21DE3E, 0x0C20F5F1, 0x3741CBD2, 0x3B0571B5,
    0xD8054F28, 0xD502C6A3, 0x70793D8B, 0x2CFA784F, 0xD0E83763, 0xE3187F88, 0x5F530C7C,
    0xCF552CAE, 0x15E7D9F7, 0x2997A825, 0xB38D5A94, 0x9506202D, 0xB20EC5E8, 0x1DB6D249,
    0xDB72AF49, 0x313C2286, 0xE278734A, 0x0650FF15, 0xB82198E0, 0x70F32698, 0x1A9C50CF,
    0x7C33271F, 0x661B2CD4, 0x377D8410, 0x5981B097, 0xBAD0852D, 0xA6DD636D, 0xEB1A1EAE,
    0x1D68FF72, 0x10B0FC0C, 0x0580B8EA, 0x1801F0BD, 0x0B0A61FA, 0xB9BA086C, 0x72AD5113,
    0x46AE5B51, 0x5C861FF2, 0x3082D387, 0xECF5A906, 0x5A1B4567, 0x61A70186, 0x14E3A5A2,
    0x3507F8B7, 0x2B0770B2, 0x57592D53, 0xDB1C9893, 0xD9AFA1F7, 0xCA85B9A7, 0x90B60E05,
    0xA0244D0F, 0x09C01C05, 0x8AC3BA28, 0x0DA13063, 0x85D58266, 0x2A2585DA, 0xC673A2E5,
    0xEC13413A, 0xE8602C55, 0x3E88B60B, 0x2D270998, 0xEC35F469, 0xDD03EAD1, 0xA1F62AC4,
    0x3CAC654D, 0x13DA2B1B, 0xB509B84A, 0x97398254, 0x400BC038, 0x641B0B70, 0xA8B91E81,
    0x79E6F241, 0xDA0E17D4, 0x9B92B585, 0x81D57539, 0xC5EFA95E, 0xB07268BE, 0x5E62F58B,
    0xD0574BDC, 0x38DCB5DA, 0xE31AEB6D, 0x003E17E6, 0x205A2CAF, 0xA24C7485, 0x00983501,
    0x06047C81, 0x0E614865, 0xD1013A5E, 0x409DE3EA, 0x7ABA49E6, 0xE53DC5A5, 0xF75DD5B6,
    0xA6EF512E, 0x1524B468, 0xB5E94B40, 0xCF2AD99E, 0x83016D3C, 0x7A0C0029, 0x1311F0FE,
    0xE29094DC, 0xD21160CC, 0xAA1F82F8, 0xCDEA82C4, 0xBB174253, 0x05AD8D10, 0xCAD6C6A6,
    0x52A6EA52, 0x559D0BC6, 0x4C4921D2, 0xB6922A1B, 0xE4EB1366, 0x650B0335, 0xEC0C68EE,
    0x049C7040, 0x68342CA0, 0xA0B433C4, 0x612AFB07, 0x5952660D, 0x6CDE23AD, 0xE7F3D656,
    0x2B27AA22, 0x177224F3, 0xF61487D9, 0xC014C661, 0xC4288C8D, 0xD207E021, 0x754FCB43,
    0x82EC3320, 0x87B05E07, 0xCC80E037, 0x0A80C05B, 0x79508F39, 0xB2A45D6A, 0xE53DC7BB,
    0x70CA9329, 0x641B8BB3, 0x78721BF2, 0x0D64AD84, 0x615A3D0F, 0x800778EA, 0x02E01A26,
    0x2F628813, 0x14C650B6, 0x708FF0E8, 0xCA69A1D4, 0xFE1C4280, 0xC7008B01, 0x99B3E8E6,
    0x43713CE7, 0x60A1276E, 0x02A0CDD1, 0x0761C3E1, 0x09A31A29, 0x0490606D, 0x4A8AA06E,
    0x1D068020, 0x19EABBC8, 0xE0196762, 0x11A713A0, 0x3D642D85, 0xA174688F, 0xC6F8FF0F,
    0x49A1221C, 0x1C73FC3B, 0x34C4A878, 0x297BDF83, 0x95121EEA, 0x629579A3, 0x70778540,
    0xB8992D42, 0xB05F4784, 0xE8F3EAFA, 0x01F80013, 0x2A413202, 0x0627501E, 0x236A606D,
    0xF209B63E, 0x99116DA3, 0xD40C8048, 0xDFF509D0, 0x98001320, 0x5FAC0141, 0x00008099,
    0x00000000

  EW_BITMAPS_TABLE( Appevacuate )
    EW_BITMAP( Appevacuate, Default )
EW_END_OF_BITMAP_RES( Appevacuate )

/* Table with links to derived variants of the bitmap resource : 'App::evacuate' */
EW_RES_WITHOUT_VARIANTS( Appevacuate )

/* Bitmap resource : 'App::SilencedBitmap' */
EW_DEFINE_BITMAP_RES( AppSilencedBitmap )
  EW_BITMAP_FRAMES( AppSilencedBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 29, 22, 0 )
    EW_BITMAP_FRAME( 2, 6, 13, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppSilencedBitmap, Default )            /* ratio 21.79 % */
    0x1C080100, 0xC1A0B048, 0x1E130883, 0x8850C07C, 0x10CC8781, 0xA334B448, 0x188502A2,
    0xC8DC6A33, 0x03C263B1, 0xFC0D6720, 0x49809237, 0x8E521D68, 0xA5B2C8F0, 0x4C0097CB,
    0xB235A812, 0x027FC0A6, 0xC08BB672, 0x9FCC0933, 0x14E67F40, 0x4DA6F340, 0x066F2400,
    0x818FDA58, 0x03033D53, 0xD54A9D04, 0x48A2D0E0, 0x6ACD268F, 0x03C826F4, 0x6D884EAC,
    0xD0ACB550, 0xAAB7589C, 0x8075AAD5, 0x0D0F69DB, 0x84481930, 0x132257EE, 0xC1410AF2,
    0x06C10277, 0x8CC91180, 0x9501F0C7, 0xF712108E, 0x9D203B70, 0x32A6C782, 0x95DB655E,
    0x95B5E5AB, 0xC91E5F31, 0xCF849E98, 0x06880A45, 0x80697236, 0x54194E7D, 0x01112841,
    0x46F3A18F, 0x19271DC6, 0x99CDE52D, 0xCDDE6B6F, 0xDF856DF9, 0x2B928624, 0x825F54BD,
    0x4EF252E3, 0xDE5A6200, 0x28F6A1C8, 0x9B51F748, 0xB9EBEEA8, 0x2EDEE3B3, 0x13602FEE,
    0xCF3DCD43, 0x78FA0FC9, 0xA81CF701, 0xB271D22F, 0xB1EFDE76, 0xFDDADF6F, 0x4314EA60,
    0x8D3569D3, 0x2402B1EF, 0x9F37B92E, 0xA80DF07C, 0xF9067D5D, 0xEE698317, 0x7F54B7EC,
    0x92D8018F, 0x48560580, 0x02087CA0, 0x2F015A20, 0x710EC698, 0x5A63E801, 0xB3DE203B,
    0x71EC89C0, 0xF185E144, 0x002068B5, 0x23205CE2, 0x03A9430B, 0x494E6A22, 0x430C1FE1,
    0x52D4A891, 0x441728F6, 0xF8B16975, 0xCA0785A2, 0xFB79CD04, 0x6AC1267C, 0xC334310B,
    0x36F4EF50, 0x64553BC0, 0x2B420069, 0x91E488BA, 0xE275BD6D, 0x6630A002, 0x744F6A4F,
    0x8C0DA4E4, 0x3115F3A5, 0x53242151, 0x591A5E91, 0xA8F550E1, 0x028480E7, 0x0127E1FD,
    0xC5596540, 0x34627100, 0xC95A9DA7, 0x4D630D94, 0x5DC44630, 0x24E11185, 0xBA541C11,
    0x1D535981, 0x5F66675A, 0xA7C222CD, 0xAA2A600F, 0x691E9A47, 0x25C73F9A, 0x7F9F8800,
    0xABEA3008, 0xD979751E, 0x0624F150, 0xE6B01381, 0xB44C92FA, 0x35526A24, 0xEBA09DCA,
    0x14F12FB0, 0x59321281, 0x3227AA93, 0xB100B05E, 0x00040509, 0x00000000

  EW_BITMAPS_TABLE( AppSilencedBitmap )
    EW_BITMAP( AppSilencedBitmap, Default )
EW_END_OF_BITMAP_RES( AppSilencedBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::SilencedBitmap' */
EW_RES_WITHOUT_VARIANTS( AppSilencedBitmap )

/* Initializer for the class 'App::Alert' */
void AppAlert__Init( AppAlert _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAlert );

  /* ... and initialize objects, variables, properties, etc. */
  EwRetainString( &_this->description, EwLoadString( &_Const0167 ));
  _this->flags = 0;
  EwRetainString( &_this->time, EwLoadString( &_Const0167 ));
  _this->chanimg = AppChannelTypeNone;
}

/* Re-Initializer for the class 'App::Alert' */
void AppAlert__ReInit( AppAlert _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Alert' */
void AppAlert__Done( AppAlert _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAlert );

  /* Release all used strings */
  EwReleaseString( &_this->description );
  EwReleaseString( &_this->time );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Alert' */
void AppAlert__Mark( AppAlert _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::Alert' */
EW_DEFINE_CLASS_VARIANTS( AppAlert )
EW_END_OF_CLASS_VARIANTS( AppAlert )

/* Virtual Method Table (VMT) for the class : 'App::Alert' */
EW_DEFINE_CLASS( AppAlert, XObject, "App::Alert" )
EW_END_OF_CLASS( AppAlert )

/* Initializer for the class 'App::MeshStatus' */
void AppMeshStatus__Init( AppMeshStatus _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshStatus );
}

/* Re-Initializer for the class 'App::MeshStatus' */
void AppMeshStatus__ReInit( AppMeshStatus _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::MeshStatus' */
void AppMeshStatus__Done( AppMeshStatus _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshStatus );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshStatus' */
void AppMeshStatus__Mark( AppMeshStatus _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::MeshStatus' */
EW_DEFINE_CLASS_VARIANTS( AppMeshStatus )
EW_END_OF_CLASS_VARIANTS( AppMeshStatus )

/* Virtual Method Table (VMT) for the class : 'App::MeshStatus' */
EW_DEFINE_CLASS( AppMeshStatus, XObject, "App::MeshStatus" )
EW_END_OF_CLASS( AppMeshStatus )

/* Initializer for the class 'App::MeshStage' */
void AppMeshStage__Init( AppMeshStage _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshStage );
}

/* Re-Initializer for the class 'App::MeshStage' */
void AppMeshStage__ReInit( AppMeshStage _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::MeshStage' */
void AppMeshStage__Done( AppMeshStage _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshStage );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshStage' */
void AppMeshStage__Mark( AppMeshStage _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::MeshStage' */
EW_DEFINE_CLASS_VARIANTS( AppMeshStage )
EW_END_OF_CLASS_VARIANTS( AppMeshStage )

/* Virtual Method Table (VMT) for the class : 'App::MeshStage' */
EW_DEFINE_CLASS( AppMeshStage, XObject, "App::MeshStage" )
EW_END_OF_CLASS( AppMeshStage )

/* User defined auto object: 'App::DummyParam' */
EW_DEFINE_AUTOOBJECT( AppDummyParam, AppParameter )

/* Initializer for the auto object 'App::DummyParam' */
void AppDummyParam__Init( AppParameter _this )
{
  EwRetainString( &_this->name, EwLoadString( &_Const0474 ));
  _this->value = 20;
  _this->code = AppParamCodeVolume;
  _this->min = 100;
}

/* Table with links to derived variants of the auto object : 'App::DummyParam' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyParam )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyParam )

/* User defined auto object: 'App::DummyInputChan' */
EW_DEFINE_AUTOOBJECT( AppDummyInputChan, AppInputChannel )

/* Initializer for the auto object 'App::DummyInputChan' */
void AppDummyInputChan__Init( AppInputChannel _this )
{
  _this->flags = AppOptionsCoincidence;
  _this->type = AppChannelTypeSmoke;
}

/* Table with links to derived variants of the auto object : 'App::DummyInputChan' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyInputChan )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyInputChan )

/* User defined auto object: 'App::DummyOutputChan' */
EW_DEFINE_AUTOOBJECT( AppDummyOutputChan, AppOutputChannel )

/* Initializer for the auto object 'App::DummyOutputChan' */
void AppDummyOutputChan__Init( AppOutputChannel _this )
{
  _this->flags = AppOptionsCoincidence;
  _this->actions = AppActionBitsEvacuation | AppActionBitsFire | AppActionBitsFirstAid;
  _this->type = AppChannelTypeSounderVisualIndicatorCombined;
}

/* Table with links to derived variants of the auto object : 'App::DummyOutputChan' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyOutputChan )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyOutputChan )

/* User defined auto object: 'App::DummyParam1' */
EW_DEFINE_AUTOOBJECT( AppDummyParam1, AppParameter )

/* Initializer for the auto object 'App::DummyParam1' */
void AppDummyParam1__Init( AppParameter _this )
{
  EwRetainString( &_this->name, EwLoadString( &_Const0475 ));
  _this->value = 1;
  _this->code = AppParamCodeToggle;
  _this->max = 1;
  _this->min = 0;
}

/* Table with links to derived variants of the auto object : 'App::DummyParam1' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyParam1 )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyParam1 )

/* Bitmap resource : 'App::HeatA1RBitmap' */
EW_DEFINE_BITMAP_RES( AppHeatA1RBitmap )
  EW_BITMAP_FRAMES( AppHeatA1RBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppHeatA1RBitmap, Default )             /* ratio 32.79 % */
    0x04086D00, 0x8006D020, 0xF0F07C51, 0x8F27D518, 0xF279862E, 0x6FB3C421, 0xF83B9ED4,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC3637249, 0x9E51107F, 0xE5B2091C, 0x612C97C7,
    0xB1584C86, 0xBA86C4A1, 0x51EC2548, 0x9EC0E090, 0x5C88B513, 0x4A8F3449, 0x169329A3,
    0x2954CA3D, 0x9B4EA5D2, 0xB4FA9D42, 0x51AB54AA, 0xB86C8693, 0x8BA927A5, 0xA562863E,
    0x1FD4CFFA, 0x656EFF3E, 0xD8EFF4B2, 0x92FF56AB, 0x4FF592D1, 0xFF532A18, 0x747A4964,
    0xB2566FB5, 0xF60AC77F, 0x1EA4380B, 0xCA203F3B, 0x1534CC0A, 0xACFF40A1, 0xCFF61B15,
    0xFF793C9E, 0xF7D3E9F8, 0x79BCDEEF, 0xFBC5E595, 0xBDDEEF97, 0xBDFF9BCC, 0xEDAE874B,
    0x00A47FDB, 0xB8CC1ECB, 0x8BABECF6, 0xB5763269, 0xD66A9108, 0x83C5EAFF, 0x2DD98FF7,
    0x4162FF5B, 0x8FBB046A, 0xFCA57F9E, 0x2A77F9EC, 0xB87F9F50, 0xA7FA5D34, 0x7FB2194D,
    0xFBE5F2FA, 0x345A6E07, 0xD309D2E8, 0xCFEA493E, 0x76BD6874, 0x6EC78BFD, 0xFFFAFCDD,
    0x3F6FCBE0, 0xDD6D36DD, 0xD09541BA, 0xB370E73F, 0x9CEE3FCD, 0xAC3FCE73, 0x53085224,
    0x8F35D172, 0x6690ED3B, 0x90FF3D8F, 0xFF360D93, 0x2248C2B8, 0xC9E2ED4C, 0xF8621626,
    0xA8B92E8C, 0xC93662A7, 0x390EC77C, 0xCC03FCE4, 0x48C8A429, 0x94EC3FE3, 0xDF8B2313,
    0x8017E7F9, 0x8B554514, 0xC6A09325, 0x649B2E59, 0xAC3154C2, 0x93E462A8, 0xE516719A,
    0x93A8F03F, 0x31D6750E, 0xBD2F8D15, 0x3BCF0704, 0x4AB5462A, 0xB3FC8622, 0xB4FF99CF,
    0x516F88C2, 0x99DBE9A9, 0x48A830FB, 0x05263E99, 0x11564D64, 0xF83FE4D3, 0x7A0F53D4,
    0x0EF80DFD, 0x694E0B3A, 0x72876A68, 0xA72A8C36, 0x93E23884, 0xCB849E75, 0x46749826,
    0x9E613D0F, 0xFFA5CF74, 0x9289C2E4, 0x67752291, 0xD9ECC354, 0xA1669FE7, 0x90214A95,
    0x3E0F83E9, 0xAB2A2250, 0x989DA994, 0x7CBC4A62, 0xB7A409D2, 0x92A9E4A5, 0xA983CCF6,
    0x3A62C18F, 0xA2A1A569, 0xB652EA34, 0x93C95260, 0x890250B4, 0xB3FC78B2, 0xC4E338CE,
    0x4FB6EB4A, 0x2B8B1322, 0x4BB3414C, 0xE3BCF38A, 0xFD56A64E, 0xE8B0995A, 0xA52C6BAE,
    0x6419DAED, 0xF6C55680, 0x4E1584DC, 0x4C2F8C03, 0x974BF349, 0x64FB6A89, 0x3746CFB3,
    0x6257955D, 0xF1314C73, 0xB16EA49E, 0x6C7C42ED, 0x1BCEA2C3, 0xA6E25924, 0xAA661968,
    0x72483218, 0x9E023090, 0x994F0278, 0x214C39A0, 0xE1B80B03, 0x731CA78D, 0x2ECC3EC9,
    0x9C4EECB1, 0xD11544EC, 0x8F2A17DB, 0x8F260979, 0xCDC3FED4, 0x9C94CD33, 0x84A32FDA,
    0x8722A692, 0x64998684, 0xF0ECDD94, 0x5C46EEA7, 0x2F37BC33, 0xC4519EBB, 0x998A82A8,
    0x0A32F724, 0x32A0FF28, 0x0DC12008, 0xC23524F7, 0x59D65304, 0xCDF3A4FF, 0x5A11AA37,
    0x507F20B6, 0xC3CC94CC, 0xD63126DE, 0x75A4AEBD, 0xE340DDBB, 0x9DA3684C, 0x56953782,
    0x2B4C593E, 0x0C13524E, 0xF67D9D30, 0x4AD3B44F, 0x10D52E9D, 0xB22EFCD3, 0xF39C5781,
    0xA5335BC5, 0x8E53C89C, 0x8EC220F9, 0x394FFE43, 0xB42364DA, 0xCDE8CC33, 0x7F56DF18,
    0x59E0FB6E, 0x3FD1380D, 0x7A823CB0, 0x421CAA6A, 0x4E57E308, 0xB093B8F9, 0x334DBECB,
    0x17DE6BB5, 0x07639EEE, 0x8EF2E978, 0xA953278E, 0xB64E48E2, 0x7758E8ED, 0x8F1BC4A1,
    0xC7CCEB7C, 0xD1F3CFFE, 0xF522AE87, 0x3A0D5F7E, 0xBC5B82F6, 0x93064A7D, 0xFF34CD47,
    0x350D4384, 0x93D0DA19, 0xD5888156, 0xAE794E35, 0xA0FADE6B, 0xC0B23B67, 0x9B7F74AF,
    0x7778BC5F, 0x8F0DE09B, 0x1F3BAA33, 0x3CE7D302, 0x16E8FA06, 0xA2C7F9DA, 0x114236BE,
    0xD11FED7A, 0xAAD557F8, 0x952EC297, 0x042785F0, 0x87B276E1, 0xE80D3AB3, 0x90740374,
    0xBCB35306, 0x7D8FA9D7, 0x2CC64A2A, 0x0BA7C162, 0xE61DA3FD, 0x95121940, 0x3623C498,
    0xF0DF1D11, 0x28A0BB46, 0x913A25C5, 0x222C5889, 0x0B088486, 0x2A2F696A, 0x1187CBDD,
    0x571A734B, 0x3A752AC1, 0x7D06DD64, 0x0DF6C1D8, 0xFAFB1A46, 0x71B038C7, 0xEFD2068D,
    0xE3A4728E, 0xAFC8E03F, 0x252CEA1A, 0x34C7FAF6, 0x410BF182, 0x401FEE4E, 0x982B129B,
    0xF4CE43B6, 0x64408150, 0x637A2B4C, 0x43214C29, 0x9E945D16, 0xC5D92EF4, 0x158A614D,
    0x1F9A688B, 0x0B2ED749, 0x4D91693E, 0x130F2353, 0xDE0F43F8, 0x50A417C6, 0x51FF199A,
    0xA2504B8B, 0x1BD1FC5D, 0x9E04882D, 0x9603FD57, 0x1FE1A34A, 0x468AF297, 0xC51FE228,
    0x3A2EA63C, 0x32452241, 0x648E9552, 0x46F51B65, 0x0DB8618D, 0x4750EB1E, 0x368108D9,
    0x67852E4D, 0x36A6C368, 0x610C41AB, 0x607EC8FC, 0x483EDB84, 0x52453016, 0x78FF9A12,
    0x88DD2B64, 0x0DC4F74B, 0xC7F8E01C, 0x1E71A437, 0x9F655A6F, 0x384749E7, 0xDECB99F2,
    0xB12973A1, 0x8B0F4A31, 0x14558AE1, 0x7CA738E7, 0xC95701E7, 0xB3D205C1, 0x4E787E36,
    0xA2043C4A, 0x938E587A, 0x4807FC76, 0x8E1A0583, 0xA5828986, 0xD493E64B, 0xCA782204,
    0xD2919A73, 0xFA324AE8, 0x0691A4CB, 0x65A9E31F, 0x53429291, 0x48A25D21, 0xD88F1AAE,
    0x83C366C8, 0xBD24EBD6, 0xFE27C510, 0xC0D75431, 0x6D2C4A65, 0x69A53C64, 0xD4F5DB51,
    0xE6A94C39, 0x1F61D735, 0xA644AA70, 0x38AAF146, 0x734D51FF, 0x4DAC05FE, 0x6A3F0849,
    0xADEE94B8, 0x7A533C73, 0x615C93EB, 0xB4BEA94C, 0x0944FEAA, 0x0E89734D, 0x1BEDD070,
    0x534690D3, 0xC1580A68, 0xB09F03A6, 0xF0D667B1, 0x0EB60FD0, 0x816C2D46, 0x314A8CAC,
    0xD5D6B98A, 0xA4827BA5, 0x23E8F12B, 0x1E470537, 0x3246C1A0, 0xD10FF18E, 0x69A49692,
    0xD526A4A2, 0xF176962A, 0xCA5337C6, 0x5194A54E, 0x6398BA0B, 0x1060DA1B, 0xA0640899,
    0x196331F5, 0x5E91F521, 0xE03CF2F8, 0x7B393716, 0xB64AEE09, 0x24568792, 0xC8F17F2B,
    0x96E93DE6, 0x6766A5D4, 0xD91AB63B, 0xD0EA1878, 0x7DD77ABC, 0x426E7181, 0x79110060,
    0x93166B24, 0x063A9698, 0x80CF302A, 0xD0BC1A06, 0x0B387345, 0xB7D2FADE, 0x0898F362,
    0x1092800C, 0xBF244C2C, 0x0107FDF6, 0xFCC3841F, 0xC38BF62D, 0x13706FBC, 0x6484DF92,
    0x1E1027A1, 0x122E2888, 0x42B08983, 0x30CAA324, 0xE08C353A, 0xC3B87B0D, 0x88651E20,
    0x57162C39, 0x310EF84C, 0x0241B088, 0x00000002, 0x00000000

  EW_BITMAPS_TABLE( AppHeatA1RBitmap )
    EW_BITMAP( AppHeatA1RBitmap, Default )
EW_END_OF_BITMAP_RES( AppHeatA1RBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::HeatA1RBitmap' */
EW_RES_WITHOUT_VARIANTS( AppHeatA1RBitmap )

/* Bitmap resource : 'App::CauseEffect2' */
EW_DEFINE_BITMAP_RES( AppCauseEffect2 )
  EW_BITMAP_FRAMES( AppCauseEffect2, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppCauseEffect2, Default )              /* ratio 19.83 % */
    0x1C080100, 0x4186D028, 0xA46D0610, 0xE12DA849, 0x0D10873F, 0xD118943E, 0x158B44C6,
    0xC8CC6A2F, 0x8C47A291, 0xEC86371F, 0xC1A1A368, 0xAA090785, 0xA110981C, 0x452441C1,
    0xB3299C82, 0x239BCC66, 0xB9C4D273, 0x94CC2753, 0xFC260F2C, 0x4DA8B3D9, 0xF28D479D,
    0x2974CA4C, 0x152EA24F, 0x553A453A, 0x56ABD529, 0x7AC536B3, 0x6D8DA511, 0x0D6AB755,
    0xD96B964B, 0x8ACEDFAC, 0xADB6AB5D, 0xE163B7D9, 0x36EB95B2, 0x77B9DDAE, 0xABDDE2EB,
    0x2DD22FB7, 0x5BFCC05E, 0xE0CE06E3, 0x130D87C2, 0x71788C56, 0xAA517FE2, 0x974BE15C,
    0x43208F6B, 0xD2D15DFE, 0x30975FE5, 0x792DFE63, 0xD1B28522, 0xFC9E4C24, 0x9FFAC7E3,
    0x63B0D7EB, 0x4FFD9ECB, 0x467FED9F, 0x2BDE9B50, 0x643FF724, 0xCBFD94C9, 0x6C369B77,
    0xFDD6EA75, 0xD54A853B, 0x9448223F, 0x6582ADEC, 0xD87F3FCB, 0x8ED76B8D, 0x283FDFDD,
    0x0EECAC53, 0x9CCE06DB, 0x8B65E8ED, 0x5FEE3713, 0x7B4BD2EA, 0xAEB7F923, 0xF77BBFFE,
    0xA7C7DDF0, 0x7CFEBF9F, 0x4FD3FE00, 0xD6D1DE3F, 0x8DE177DD, 0x59785727, 0x7A5D975C,
    0xCCA3FE10, 0xC5ECCC32, 0x01991003, 0xFF118441, 0x87447868, 0x44187C44, 0xD8521F11,
    0x8207718C, 0x775F9E27, 0x24890239, 0xC8921CFF, 0x0170FF22, 0x88FF1886, 0xFF1A0651,
    0x2D4B42C8, 0x86381DE9, 0x68286919, 0x19C27014, 0x7B8A9D98, 0x7CC47119, 0x0BF5322C,
    0x67A4C130, 0x18A92A0A, 0x28921359, 0x52E0992E, 0xCFF9846D, 0xA2FCBE2E, 0xB46A52E5,
    0xD57A46F1, 0x99CD7358, 0xA4A97121, 0xE4C64C77, 0xFC7F1F87, 0xF63D8F53, 0x334CD3FC,
    0xA4E6E0CE, 0x311A1FA0, 0x121FA1A8, 0xBB114451, 0x6B19985D, 0xCF5718FC, 0x57996BA4,
    0x00CC3FC7, 0xCF338FFA, 0xA769B340, 0xCF2A7A9F, 0xF9D25DA8, 0x388E4865, 0xFB3FC8F2,
    0x838FA3EC, 0x4FA81DDE, 0xDAD2ACAB, 0xBEB53EEA, 0xE5394E3A, 0x729C8968, 0x61C861E8,
    0x72D8B54C, 0xA610844B, 0x8D45AA78, 0x6B5ABAA8, 0x0E67A2C8, 0x0968E83A, 0xA4E1384E,
    0x4D128467, 0x2C8B1530, 0x9E8B44B3, 0xE44A2BB2, 0x69AA1384, 0xAF370DB3, 0xBB6E2815,
    0xAD5B4CFF, 0x97ACE15E, 0x2C49115E, 0x591594C1, 0x264FF170, 0x8FF2749B, 0xF2789C26,
    0x7706C04F, 0xFF2809F2, 0xA96BC390, 0xD34B9608, 0x03428CA2, 0xA1B1344D, 0xAFB54E93,
    0x3FCB12BC, 0x4FFC78AE, 0xFC931FC7, 0x88A1280F, 0xED3B25A2, 0xA3B103B4, 0xE7245A70,
    0x1532E46C, 0x04FFCDC4, 0xFF308C13, 0x320C831C, 0xA1E53331, 0x76C60480, 0x45CA7D60,
    0xB2CCD0E9, 0x0ED4BCD5, 0x0813FF50, 0x1D048521, 0xE8781D53, 0xB7767461, 0x310C33FE,
    0x112D58C5, 0x2A9B5BD3, 0x8579D8B1, 0x410F83A4, 0x344D13FC, 0x6CFAC0D2, 0xF3DDF8A4,
    0xC6CE230F, 0x400F4394, 0x2AE583FC, 0x4BD2F263, 0x6E10BEE0, 0xCF2ECB38, 0x4CDA3119,
    0x22086211, 0x6402CE3D, 0xF2288821, 0xB88CE54F, 0xB134CD2D, 0x3FCFD80D, 0xCE93FDFE,
    0xAB70FFE8, 0x4D914C5A, 0x10BBE076, 0xDA5959D7, 0x6D439D34, 0x06DEB2B4, 0xA8FFEDCF,
    0x515AC91A, 0x83FAA150, 0x5D9CD3AC, 0x9E33BD13, 0x437DDED1, 0xF3D76D1A, 0x288FFF34,
    0x0FF290A3, 0xB0F43B0E, 0xFC3C0E16, 0x0CC14FF0, 0x2C0AF2B7, 0xBE0F78FF, 0x5F7FE1F8,
    0x93E6F8FE, 0x9825894F, 0xFAD5CF18, 0xAD9B5FED, 0xDD76AF6D, 0xE8B9CBB2, 0x683FCBB2,
    0xFB86D1AC, 0x6EE003B0, 0x9836D6D6, 0x0275ED29, 0x1500603C, 0x32044098, 0x8C0E81F0,
    0xD82502E0, 0x7040AFC0, 0xA0AC1882, 0x1091BA4C, 0x82F068AF, 0x5788FC1F, 0x109442A2,
    0x3C841066, 0x0A500B01, 0x84831422, 0x84148503, 0xB85E5661, 0xC50495C2, 0x8AF15106,
    0xC3184F0A, 0x838EC21E, 0x0D896927, 0x00101001, 0x00000000

  EW_BITMAPS_TABLE( AppCauseEffect2 )
    EW_BITMAP( AppCauseEffect2, Default )
EW_END_OF_BITMAP_RES( AppCauseEffect2 )

/* Table with links to derived variants of the bitmap resource : 'App::CauseEffect2' */
EW_RES_WITHOUT_VARIANTS( AppCauseEffect2 )

/* Bitmap resource : 'App::zone3' */
EW_DEFINE_BITMAP_RES( Appzone3 )
  EW_BITMAP_FRAMES( Appzone3, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 2, 2, 32, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appzone3, Default )                     /* ratio 22.92 % */
    0x04085100, 0x00051020, 0x2041082F, 0xA16692F4, 0x20FF85B6, 0x9118444A, 0x152F44E2,
    0xC8CC5E31, 0x8B47A371, 0xEC863520, 0x97A3F238, 0x261B0887, 0x2070482C, 0x110A85CB,
    0x5249320E, 0x389ACDA4, 0xC92CEA69, 0x9F4EE6F3, 0x1CAE673D, 0x50A17308, 0xF67348A0,
    0x27F49A54, 0x7F4EA7D3, 0x30C98D1E, 0x4DAB52EA, 0xCACD6AAF, 0x8CD6EA15, 0xC36CBD2A,
    0xD98BEFFA, 0xFED26D7F, 0x1FF6C47B, 0xD2FFB7A4, 0xF669C5C8, 0x7831BFCB, 0xFBD9E1FF,
    0x7FDF92AF, 0x43FF02A7, 0xA6DFF845, 0x2908FFC3, 0x71A687FE, 0xCB1BB3D9, 0xA8C7FE48,
    0x984BBFF2, 0xFCD9F1FF, 0xAF678C2F, 0xC591BF48, 0x6230C63B, 0xA9FFA878, 0x9E7ABD5E,
    0xF799CBEB, 0xAB37F9E2, 0xB8713FF6, 0xFDDBD1FF, 0x7FEF9D4F, 0xEBFF82DE, 0xB9DFFC46,
    0xCF5CFFE3, 0xF9AED7FB, 0xFFD0633F, 0x6FFE9A21, 0xF17FF592, 0x9EDEB3B2, 0x603FFBAF,
    0x19BDFFE0, 0xC6FCBA0F, 0xE9FFE848, 0x7DBDBF5B, 0x75F07EFB, 0xFF467EF3, 0xFFFBA71F,
    0x07FFE8E8, 0xB953FFA6, 0x19665069, 0xC3FE042F, 0xF0FF81CE, 0x0C7BA0A3, 0x3F20A6AA,
    0xE122C4FF, 0x4591795D, 0xFE181893, 0x0D86CE13, 0x6F9ED876, 0xC663FCEA, 0x857DE688,
    0x0CFF18A1, 0xF03FE2A3, 0x8761E3F5, 0xC703FE20, 0x9576258C, 0xC62C1B56, 0xF58BE2F7,
    0x5F17A8F4, 0xC6B52E16, 0x6340FF90, 0xFA2F8EE4, 0x9C66A4A3, 0x80149905, 0x2523ECFF,
    0x58F61E92, 0x64733FCF, 0x737FE359, 0x9525E339, 0x4FF83E1D, 0x496E641E, 0xFC607F53,
    0x609ACCC3, 0x3FA4A76E, 0xE72348FF, 0x49397663, 0xE4AF59D7, 0x6D7B1EA9, 0x9FCDC6AE,
    0x86B90CFF, 0x47E95F99, 0x24F23FC7, 0x0D9BCFFA, 0xA3CEEA32, 0xA767EDF9, 0xC86A3753,
    0xE22FA321, 0x9A3FE9A3, 0xA1274A74, 0xEA21E95D, 0x1A94EF3F, 0xC5D99CE7, 0xCB6BDC93,
    0x1C8FFAB4, 0xEB2A82B0, 0x173C6F78, 0x2EABAA5D, 0xFFAECE37, 0x3FCDC9FC, 0x9FCB04A0,
    0x548E937F, 0x24B53FD7, 0xCC2E8FFB, 0x19A23A7E, 0x6C589222, 0x61927657, 0xA244A06D,
    0x045B56B9, 0x6398C2F2, 0x9A4472D3, 0x23FCE1A5, 0x86B2B9C8, 0x7148EEAB, 0x31AB6BB4,
    0x2EBAC6AF, 0xF1E66446, 0xFEF8398F, 0x5FBA6273, 0xB69E5BCD, 0x8FFC04BD, 0x7BF30421,
    0xFF082593, 0x06C2CC93, 0x46EFEC37, 0x1F6C44A9, 0x629AFE7E, 0x64B93FF1, 0x1CBF70EC,
    0x3FF1DB53, 0x4FFC849D, 0x8C6CA9C4, 0xFCA76051, 0x26CACB83, 0x7DEFECB7, 0xCAA3FC9C,
    0xB61F2DCC, 0x3E2B8A49, 0x49CEB1FC, 0xB033E291, 0xC85BFAC2, 0x7A02BDD0, 0xEF2ECF2C,
    0x4C2D914C, 0xCB48FB6F, 0xF523AE50, 0x91C6ED3F, 0x6F58C7B4, 0xFF1A18D9, 0x8FF5E31C,
    0xAC7BF9B3, 0x53FCC7D7, 0xE6E2D9CA, 0xE1D22E35, 0x3FC6167A, 0xE9F19592, 0x13FF7420,
    0x0ED8DDCC, 0x7C22B48A, 0x2B8FFB93, 0x35FD7780, 0x2C8F8432, 0x3F57A0B1, 0xFFE2C6A5,
    0xBBCA6C58, 0xF92328FF, 0xFE54BB3F, 0x0F98314F, 0x48BED856, 0xA2A88A1B, 0xE8B3E9EB,
    0x9775AC92, 0xCAB0DF8F, 0x88443891, 0x3FFAE357, 0x60D3E29A, 0x6958FF8B, 0x2B47CDDA,
    0xD0B1D49D, 0x6AA7DBC1, 0xCCE97A8C, 0x62AD14EA, 0xFFA63FFC, 0xCC361AAE, 0x1AB8B3FF,
    0xBC8DC72D, 0xB6B3CA77, 0xB8FF3D1B, 0xCFCB7DA1, 0xF566C9AA, 0xCFB949AB, 0xDF94753F,
    0xBBE0D572, 0x4CFACF67, 0xF6B2D1F2, 0x4D2A9C6E, 0x6205EDFA, 0x2624F73F, 0xD8FD0F2A,
    0xFE3F0769, 0x32585AD0, 0xE5270746, 0xE41ECFAD, 0xCED89F33, 0x26068B22, 0xA2604168,
    0x71DCA3DD, 0xE1FC7FBB, 0x4B997182, 0x2D6292EE, 0x0EC3FC32, 0x7A07FC20, 0x6B0FF122,
    0x2E473098, 0x047C608A, 0x21AE2DF8, 0xC32B52AD, 0xC7B07C85, 0xE3FE03A0, 0xC7FC3816,
    0xB3887627, 0x48E91461, 0x784EFBC2, 0x7F8B7870, 0xFF16CD30, 0x18C296E8, 0x11F9A726,
    0x2B86190E, 0x51666D59, 0x48311F3B, 0x87FBF27C, 0x29F102FD, 0x63E58CAC, 0x1EC7FC1D,
    0x984158C6, 0x611FED81, 0xA8D6D63C, 0xB843AEE6, 0xF8A06811, 0xF4F2E05B, 0x8CF87F8A,
    0xCF4C2214, 0x3CE8F61D, 0x5C6BEDC6, 0x2084C39E, 0x428A21FF, 0x8A6F83FE, 0x3B175BC8,
    0x84858DD6, 0x63597885, 0x146AEE9B, 0x051CAA16, 0x24949892, 0x05E8BE52, 0x2124BC10,
    0x2687090B, 0xAC493933, 0x06287288, 0x3B27C961, 0x7085C8E9, 0x2C919492, 0x895B2325,
    0x241896CA, 0x00000020, 0x00000000

  EW_BITMAPS_TABLE( Appzone3 )
    EW_BITMAP( Appzone3, Default )
EW_END_OF_BITMAP_RES( Appzone3 )

/* Table with links to derived variants of the bitmap resource : 'App::zone3' */
EW_RES_WITHOUT_VARIANTS( Appzone3 )

/* Initializer for the class 'App::Fire' */
void AppFire__Init( AppFire _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetPushButton__Init( &_this->ResoundAlarmsButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ConfirmFireButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->AcknowledgeFireButton, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->LogoImage, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->NotOperationalBitmap, &_this->_XObject, 0 );
  ViewsText__Init( &_this->NotOperationalText, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->NewBitmapLogoEventHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->ResoundStateEventHandler, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->ResoundAlarmsButton1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFire );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0091 );
  CoreRectView__OnSetBounds( &_this->ResoundAlarmsButton, _Const0476 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ResoundAlarmsButton, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->ResoundAlarmsButton, EwLoadString( &_Const0094 
  ));
  CoreRectView__OnSetBounds( &_this->ConfirmFireButton, _Const0477 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ConfirmFireButton, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->ConfirmFireButton, EwLoadString( &_Const0478 
  ));
  CoreRectView__OnSetBounds( &_this->AcknowledgeFireButton, _Const0479 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->AcknowledgeFireButton, 0 );
  WidgetSetPushButton_OnSetIconFrame( &_this->AcknowledgeFireButton, -1 );
  WidgetSetPushButton_OnSetLabel( &_this->AcknowledgeFireButton, EwLoadString( &_Const047A 
  ));
  CoreRectView__OnSetBounds( &_this->LogoImage, _Const047B );
  ViewsImage_OnSetAutoSize( &_this->LogoImage, 1 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const047C );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppFireContainer ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 25 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 20 );
  CoreRectView__OnSetBounds( &_this->NotOperationalBitmap, _Const047D );
  ViewsImage_OnSetVisible( &_this->NotOperationalBitmap, 0 );
  CoreRectView__OnSetBounds( &_this->NotOperationalText, _Const047E );
  ViewsText_OnSetAlignment( &_this->NotOperationalText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->NotOperationalText, EwLoadString( &_Const047F ));
  ViewsText_OnSetColor( &_this->NotOperationalText, _Const000E );
  ViewsText_OnSetVisible( &_this->NotOperationalText, 0 );
  CoreRectView__OnSetBounds( &_this->ResoundAlarmsButton1, _Const0480 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->ResoundAlarmsButton1, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->ResoundAlarmsButton1, EwLoadString( &_Const0481 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->ResoundAlarmsButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ConfirmFireButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AcknowledgeFireButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->LogoImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NotOperationalBitmap ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->NotOperationalText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ResoundAlarmsButton1 ), 0 );
  _this->ResoundAlarmsButton.OnRelease = EwNullSlot;
  _this->ResoundAlarmsButton.OnActivate = EwNewSlot( _this, AppFire_ResoundSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->ResoundAlarmsButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->ConfirmFireButton.OnRelease = EwNullSlot;
  _this->ConfirmFireButton.OnActivate = EwNewSlot( _this, AppFire_ConfirmSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->ConfirmFireButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->AcknowledgeFireButton.OnRelease = EwNullSlot;
  _this->AcknowledgeFireButton.OnActivate = EwNewSlot( _this, AppFire_AckSlot );
  WidgetSetPushButton_OnSetIcon( &_this->AcknowledgeFireButton, 0 );
  WidgetSetPushButton_OnSetAppearance( &_this->AcknowledgeFireButton, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  ViewsImage_OnSetBitmap( &_this->LogoImage, EwLoadResource( &Appgoodbyeelise, ResourcesBitmap 
  ));
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppFire_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppFire_OnRefreshAll );
  ViewsImage_OnSetBitmap( &_this->NotOperationalBitmap, EwLoadResource( &Apphazard, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->NotOperationalText, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  _this->NewBitmapLogoEventHandler.OnEvent = EwNewSlot( _this, AppFire_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->NewBitmapLogoEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->NewBitmapLogoEvent );
  _this->ResoundStateEventHandler.OnEvent = EwNewSlot( _this, AppFire_onResoundStateEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->ResoundStateEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->ResoudStateEvent );
  _this->ResoundAlarmsButton1.OnRelease = EwNullSlot;
  _this->ResoundAlarmsButton1.OnActivate = EwNewSlot( _this, AppFire_ResetFire );
  WidgetSetPushButton_OnSetAppearance( &_this->ResoundAlarmsButton1, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));

  /* Call the user defined constructor */
  AppFire_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Fire' */
void AppFire__ReInit( AppFire _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetPushButton__ReInit( &_this->ResoundAlarmsButton );
  WidgetSetPushButton__ReInit( &_this->ConfirmFireButton );
  WidgetSetPushButton__ReInit( &_this->AcknowledgeFireButton );
  ViewsImage__ReInit( &_this->LogoImage );
  AppListViewer__ReInit( &_this->ListViewer );
  ViewsImage__ReInit( &_this->NotOperationalBitmap );
  ViewsText__ReInit( &_this->NotOperationalText );
  CoreSystemEventHandler__ReInit( &_this->NewBitmapLogoEventHandler );
  CoreSystemEventHandler__ReInit( &_this->ResoundStateEventHandler );
  WidgetSetPushButton__ReInit( &_this->ResoundAlarmsButton1 );
}

/* Finalizer method for the class 'App::Fire' */
void AppFire__Done( AppFire _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFire );

  /* Finalize all embedded objects */
  WidgetSetPushButton__Done( &_this->ResoundAlarmsButton );
  WidgetSetPushButton__Done( &_this->ConfirmFireButton );
  WidgetSetPushButton__Done( &_this->AcknowledgeFireButton );
  ViewsImage__Done( &_this->LogoImage );
  AppListViewer__Done( &_this->ListViewer );
  ViewsImage__Done( &_this->NotOperationalBitmap );
  ViewsText__Done( &_this->NotOperationalText );
  CoreSystemEventHandler__Done( &_this->NewBitmapLogoEventHandler );
  CoreSystemEventHandler__Done( &_this->ResoundStateEventHandler );
  WidgetSetPushButton__Done( &_this->ResoundAlarmsButton1 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Fire' */
void AppFire__Mark( AppFire _this )
{
  EwMarkObject( &_this->ResoundAlarmsButton );
  EwMarkObject( &_this->ConfirmFireButton );
  EwMarkObject( &_this->AcknowledgeFireButton );
  EwMarkObject( &_this->LogoImage );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->NotOperationalBitmap );
  EwMarkObject( &_this->NotOperationalText );
  EwMarkObject( &_this->NewBitmapLogoEventHandler );
  EwMarkObject( &_this->ResoundStateEventHandler );
  EwMarkObject( &_this->ResoundAlarmsButton1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppFire_UpdateLayout( AppFire _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFire_UpdateViewState( AppFire _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppFire_Init( AppFire _this, XHandle aArg )
{
  XBool found;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  found = 0;
  {
    if ( !strncmp( (char*)0x90D00004, "BMP=", 4 ) )
    {
      found = 1;
    }
  }

  if ( found )
  {
    ViewsImage_OnSetBitmap( &_this->LogoImage, ((ResourcesBitmap)EwGetAutoObject( 
    &AppLogoBitmap, ResourcesExternBitmap )));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppFire_OnLoadItem( AppFire _this, XObject sender )
{
  XInt32 itemNo;
  AppFireContainer view;
  AppZoneAlert za;
  XInt32 zonenum;
  XInt32 row;
  XInt32 numzonealerts;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  view = EwCastObject( _this->ListViewer.VerticalList.View, AppFireContainer );

  if ( view == 0 )
    return;

  za = 0;
  zonenum = 0;
  row = 0;
  numzonealerts = AppLibClass_GetNumZoneAlerts( EwGetAutoObject( &AppLib, AppLibClass 
  ));

  while (( numzonealerts > 0 ) && ( itemNo >= 0 ))
  {
    XSet zf;
    za = AppLibClass_GetZoneAlert( EwGetAutoObject( &AppLib, AppLibClass ), zonenum 
    );

    if ( za->zone != 0 )
    {
      zf = AppLibClass_GetPanelZoneFlags( EwGetAutoObject( &AppLib, AppLibClass 
      ), (XInt16)za->zone, (XInt16)za->panel );
    }
    else
    {
      zf = 0;
    }

    if ( row == itemNo )
    {
      if ( za->zone != 0 )
      {
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 1 );
        CoreGroup__OnSetVisible( &view->FireZone, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
        CoreGroup__OnSetVisible( &view->FireChannel, 0 );
        CoreRectView__OnSetBounds( &view->FireZone, EwSetRectOrigin( view->FireZone.Super2.Bounds, 
        EwSetPointY( view->FireZone.Super2.Bounds.Point1, 5 )));
        view->FireZone.panel = (XInt8)za->panel;
        view->FireZone.zone = (XInt8)za->zone;
        ViewsAttrText_OnSetString( &view->FireZone.AttrText, EwConcatString( EwConcatString( 
        EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const0482 
        ), AppLibClass_Order( EwGetAutoObject( &AppLib, AppLibClass ), zonenum + 
        1 )), EwLoadString( &_Const0483 )), EwNewStringInt( za->zone, 0, 10 )), 
        EwLoadString( &_Const0484 )), AppLibClass_GetPanelName( EwGetAutoObject( 
        &AppLib, AppLibClass ), za->panel )));
        ViewsImage_OnSetVisible( &view->FireZone.Silenced, (( zf & AppZoneFlagsSilenced 
        ) == AppZoneFlagsSilenced ));

        if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
        {
          ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( &AppCollapseBitmap, 
          ResourcesBitmap ));
        }
        else
        {
          ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( &AppExpandBitmap, 
          ResourcesBitmap ));
        }
      }
      else
      {
        CoreGroup__OnSetVisible( &view->FireChannel, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
        CoreGroup__OnSetVisible( &view->FireZone, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)&view->FireZone );
      CoreGroup_InvalidateViewState((CoreGroup)view );
      return;
    }
    else
    {
      row = row + 1;
    }

    if ( row == itemNo )
    {
      if ( za->zone != 0 )
      {
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 1 );
        CoreGroup__OnSetVisible( &view->FireZone, 1 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
        CoreGroup__OnSetVisible( &view->FireChannel, 0 );
        view->FireZone.panel = (XInt8)za->panel;
        view->FireZone.zone = (XInt8)za->zone;
        CoreRectView__OnSetBounds( &view->FireZone, EwSetRectOrigin( view->FireZone.Super2.Bounds, 
        EwSetPointY( view->FireZone.Super2.Bounds.Point1, -20 )));
        ViewsAttrText_OnSetString( &view->FireZone.AttrText, EwConcatString( EwConcatString( 
        EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const0482 
        ), AppLibClass_Order( EwGetAutoObject( &AppLib, AppLibClass ), zonenum + 
        1 )), EwLoadString( &_Const0483 )), EwNewStringInt( za->zone, 0, 10 )), 
        EwLoadString( &_Const0484 )), AppLibClass_GetPanelName( EwGetAutoObject( 
        &AppLib, AppLibClass ), za->panel )));
        ViewsImage_OnSetVisible( &view->FireZone.Silenced, (( zf & AppZoneFlagsSilenced 
        ) == AppZoneFlagsSilenced ));

        if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
        {
          ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( &AppCollapseBitmap, 
          ResourcesBitmap ));
        }
        else
        {
          ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( &AppExpandBitmap, 
          ResourcesBitmap ));
        }
      }
      else
      {
        CoreGroup__OnSetVisible( &view->FireChannel, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
        CoreGroup__OnSetVisible( &view->FireZone, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
        CoreGroup__OnSetVisible( view, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)&view->FireZone );
      CoreGroup_InvalidateViewState((CoreGroup)view );
      return;
    }
    else
    {
      row = row + 1;
    }

    if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
    {
      AppAlert alert = 0;
      XInt32 n = 0;

      do
      {
        alert = AppLibClass_GetAlertNumInZone( EwGetAutoObject( &AppLib, AppLibClass 
        ), AppActionBitsFire, n, za->zone, za->panel );

        if ( alert == 0 )
        {
          CoreGroup__OnSetVisible( &view->FireZone, 0 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
          CoreGroup__OnSetVisible( &view->FireChannel, 0 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)view );
          return;
        }

        n = n + 1;

        if ( !!alert->flags )
        {
          if ( row == itemNo )
          {
            XString s;
            CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
            CoreGroup__OnSetVisible( &view->FireZone, 0 );
            CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 1 );
            CoreGroup__OnSetVisible( &view->FireChannel, 1 );
            s = EwLoadString( &_Const0485 );
            ViewsText_OnSetString( &view->FireChannel.TimeText, alert->time );

            if ((( alert->flags & AppAlertFlagsCAE ) == AppAlertFlagsCAE ))
            {
              ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, EwLoadResource( 
              &AppCauseEffect2, ResourcesBitmap ));
              AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
              AppChannelTypeNone );
              s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
              EwConcatString( s, EwLoadString( &_Const0099 )), EwNewStringInt( alert->unitnum, 
              0, 10 )), EwLoadString( &_Const0484 )), alert->description ), EwLoadString( 
              &_Const0486 ));
            }
            else
              if ((( alert->flags & AppAlertFlagsDevice ) == AppAlertFlagsDevice 
                  ))
              {
                ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, 0 );
                AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                alert->chanimg );
                s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                EwConcatString( s, AppLibClass_Unit( EwGetAutoObject( &AppLib, AppLibClass 
                ), alert->unitnum )), EwLoadString( &_Const0484 )), alert->description 
                ), EwLoadString( &_Const0487 )), AppLibClass_TypeName( EwGetAutoObject( 
                &AppLib, AppLibClass ), alert->chanimg ));
              }
              else
                if ((( alert->flags & AppAlertFlagsNetwork ) == AppAlertFlagsNetwork 
                    ))
                {
                  ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, EwLoadResource( 
                  &Appzone3, ResourcesBitmap ));
                  AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                  AppChannelTypeNone );
                  s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                  EwConcatString( s, EwLoadString( &_Const009D )), EwNewStringInt( 
                  alert->unitnum, 0, 10 )), EwLoadString( &_Const0484 )), alert->description 
                  ), EwLoadString( &_Const0488 ));
                }
                else
                  if ((( alert->flags & AppAlertFlagsNetDevice ) == AppAlertFlagsNetDevice 
                      ))
                  {
                    ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, 0 );
                    AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                    alert->chanimg );
                    s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                    EwConcatString( s, AppLibClass_Unit( EwGetAutoObject( &AppLib, 
                    AppLibClass ), alert->unitnum )), EwLoadString( &_Const0484 
                    )), alert->description ), EwLoadString( &_Const0487 )), AppLibClass_TypeName( 
                    EwGetAutoObject( &AppLib, AppLibClass ), alert->chanimg ));
                  }
                  else
                    if ((( alert->flags & AppAlertFlagsNetCAE ) == AppAlertFlagsNetCAE 
                        ))
                    {
                      ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, EwLoadResource( 
                      &AppCauseEffect2, ResourcesBitmap ));
                      AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                      AppChannelTypeNone );
                      s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                      EwConcatString( s, EwLoadString( &_Const0099 )), EwNewStringInt( 
                      alert->unitnum, 0, 10 )), EwLoadString( &_Const0484 )), alert->description 
                      ), EwLoadString( &_Const0486 ));
                    }
                    else
                    {
                      CoreGroup__OnSetVisible( &view->FireChannel, 0 );
                      CoreGroup_InvalidateViewState((CoreGroup)view );
                      return;
                    }

            ViewsAttrText_OnSetString( &view->FireChannel.AttrText, s );
            ViewsImage_OnSetVisible( &view->FireChannel.SilenceImage, (( alert->flags 
            & AppAlertFlagsSilenced ) == AppAlertFlagsSilenced ));
            CoreGroup_InvalidateViewState((CoreGroup)&view->FireChannel );
            CoreGroup_InvalidateViewState((CoreGroup)view );
            return;
          }
          else
          {
            row = row + 1;
          }
        }
      }
      while ( !!alert->flags );
    }

    if ( zonenum == 0 )
    {
      zonenum = numzonealerts - 1;

      if ( zonenum == 0 )
      {
        CoreGroup__OnSetVisible( &view->FireZone, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
        CoreGroup__OnSetVisible( &view->FireChannel, 0 );
        CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
        CoreGroup_InvalidateViewState((CoreGroup)view );
        return;
      }
    }
    else
      if ( zonenum == ( numzonealerts - 1 ))
      {
        zonenum = 1;
      }
      else
      {
        zonenum = zonenum + 1;

        if ( zonenum == ( numzonealerts - 1 ))
        {
          CoreGroup__OnSetVisible( &view->FireZone, 0 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
          CoreGroup__OnSetVisible( &view->FireChannel, 0 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
          CoreGroup_InvalidateViewState((CoreGroup)view );
          return;
        }
      }

    numzonealerts = numzonealerts - 1;
  }

  ;
  CoreGroup__OnSetVisible( &view->FireZone, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
  CoreGroup__OnSetVisible( &view->FireChannel, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
  CoreGroup_InvalidateViewState((CoreGroup)view );
}

/* 'C' function for method : 'App::Fire.ResoundSlot()' */
void AppFire_ResoundSlot( AppFire _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= 2 )
  {
    event( EVENT_RESOUND_BUTTON );
    EwSignal( _this->ListViewer.onRefreshAll, ((XObject)_this ));
  }
  else
  {
    AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    ), 2 );
  }
}

/* 'C' function for method : 'App::Fire.SetListSize()' */
XInt32 AppFire_SetListSize( AppFire _this )
{
  XInt32 z;
  XInt32 p;
  XInt32 items = 0;
  XInt32 fires = 0;

  for ( p = 0; p < 5; p = p + 1 )
  {
    for ( z = 1; z <= 96; z = z + 1 )
    {
      XInt32 alerts = AppLibClass_GetNumAlertsInZone( EwGetAutoObject( &AppLib, 
        AppLibClass ), z, p );

      if ( alerts > 0 )
      {
        XSet zf = AppLibClass_GetPanelZoneFlags( EwGetAutoObject( &AppLib, AppLibClass 
          ), (XInt16)z, (XInt16)p );
        fires = fires + 1;
        items = items + 2;

        if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
        {
          items = items + alerts;
        }
      }
    }
  }

  AppListViewer_OnSetNoOfItems( &_this->ListViewer, items );
  return fires;
}

/* 'C' function for method : 'App::Fire.ConfirmSlot()' */
void AppFire_ConfirmSlot( AppFire _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_CONFIRM_FIRE_BUTTON );
}

/* 'C' function for method : 'App::Fire.AckSlot()' */
void AppFire_AckSlot( AppFire _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  event( EVENT_ACKNOWLEDGE_FIRE_BUTTON );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppFire_OnRefreshAll( AppFire _this, XObject sender )
{
  XInt32 itemNo;
  AppFireContainer view;
  AppZoneAlert za;
  XInt32 zonenum;
  XInt32 row;
  XInt32 numzonealerts;
  XInt32 alertcount;
  XSet zf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  view = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppFireContainer 
  );
  za = 0;
  zonenum = 0;
  row = 0;
  numzonealerts = AppLibClass_GetNumZoneAlerts( EwGetAutoObject( &AppLib, AppLibClass 
  ));
  alertcount = numzonealerts;
  zf = 0;

  while ( view != 0 )
  {
    if (( alertcount > 0 ) && ( itemNo >= 0 ))
    {
      za = AppLibClass_GetZoneAlert( EwGetAutoObject( &AppLib, AppLibClass ), zonenum 
      );

      if ( za->zone != 0 )
      {
        zf = AppLibClass_GetPanelZoneFlags( EwGetAutoObject( &AppLib, AppLibClass 
        ), (XInt16)za->zone, (XInt16)za->panel );
      }
      else
      {
        zf = 0;
      }

      if ( row == itemNo )
      {
        if ( za->zone != 0 )
        {
          CoreGroup__OnSetVisible( view, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 1 );
          CoreGroup__OnSetVisible( &view->FireZone, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
          CoreGroup__OnSetVisible( &view->FireChannel, 0 );
          CoreRectView__OnSetBounds( &view->FireZone, EwSetRectOrigin( view->FireZone.Super2.Bounds, 
          EwSetPointY( view->FireZone.Super2.Bounds.Point1, 5 )));
          view->FireZone.panel = (XInt8)za->panel;
          view->FireZone.zone = (XInt8)za->zone;
          ViewsAttrText_OnSetString( &view->FireZone.AttrText, EwConcatString( EwConcatString( 
          EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const0482 
          ), AppLibClass_Order( EwGetAutoObject( &AppLib, AppLibClass ), zonenum 
          + 1 )), EwLoadString( &_Const0483 )), EwNewStringInt( za->zone, 0, 10 
          )), EwLoadString( &_Const0484 )), AppLibClass_GetPanelName( EwGetAutoObject( 
          &AppLib, AppLibClass ), za->panel )));
          ViewsImage_OnSetVisible( &view->FireZone.Silenced, (( zf & AppZoneFlagsSilenced 
          ) == AppZoneFlagsSilenced ));

          if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
          {
            ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( 
            &AppCollapseBitmap, ResourcesBitmap ));
          }
          else
          {
            ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( 
            &AppExpandBitmap, ResourcesBitmap ));
          }
        }
        else
        {
          CoreGroup__OnSetVisible( view, 0 );
        }

        CoreGroup_InvalidateViewState((CoreGroup)&view->FireZone );
        CoreGroup_InvalidateViewState((CoreGroup)view );
        view = EwCastObject( view->Super3.next, AppFireContainer );

        if ( view == 0 )
          return;
      }
      else
      {
        row = row + 1;
      }

      if ( row == itemNo )
      {
        if ( za->zone != 0 )
        {
          CoreGroup__OnSetVisible( view, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 1 );
          CoreGroup__OnSetVisible( &view->FireZone, 1 );
          CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 0 );
          CoreGroup__OnSetVisible( &view->FireChannel, 0 );
          view->FireZone.panel = (XInt8)za->panel;
          view->FireZone.zone = (XInt8)za->zone;
          CoreRectView__OnSetBounds( &view->FireZone, EwSetRectOrigin( view->FireZone.Super2.Bounds, 
          EwSetPointY( view->FireZone.Super2.Bounds.Point1, -20 )));
          ViewsAttrText_OnSetString( &view->FireZone.AttrText, EwConcatString( EwConcatString( 
          EwConcatString( EwConcatString( EwConcatString( EwLoadString( &_Const0482 
          ), AppLibClass_Order( EwGetAutoObject( &AppLib, AppLibClass ), zonenum 
          + 1 )), EwLoadString( &_Const0483 )), EwNewStringInt( za->zone, 0, 10 
          )), EwLoadString( &_Const0484 )), AppLibClass_GetPanelName( EwGetAutoObject( 
          &AppLib, AppLibClass ), za->panel )));
          ViewsImage_OnSetVisible( &view->FireZone.Silenced, (( zf & AppZoneFlagsSilenced 
          ) == AppZoneFlagsSilenced ));

          if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
          {
            ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( 
            &AppCollapseBitmap, ResourcesBitmap ));
          }
          else
          {
            ViewsImage_OnSetBitmap( &view->FireZone.ExpandImage, EwLoadResource( 
            &AppExpandBitmap, ResourcesBitmap ));
          }
        }
        else
        {
          CoreGroup__OnSetVisible( view, 0 );
        }

        CoreGroup_InvalidateViewState((CoreGroup)&view->FireZone );
        CoreGroup_InvalidateViewState((CoreGroup)view );
        view = EwCastObject( view->Super3.next, AppFireContainer );

        if ( view == 0 )
          return;
      }
      else
      {
        row = row + 1;
      }

      if ((( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
      {
        AppAlert alert = 0;
        XInt32 n = 0;

        do
        {
          alert = AppLibClass_GetAlertNumInZone( EwGetAutoObject( &AppLib, AppLibClass 
          ), AppActionBitsFire, n, za->zone, za->panel );
          n = n + 1;

          if ( alert == 0 )
          {
            if ( row == itemNo )
            {
              CoreGroup__OnSetVisible( view, 0 );
              CoreGroup_InvalidateViewState((CoreGroup)view );
            }
            else
            {
              row = row + 1;
            }
          }
          else
            if ( !!alert->flags )
            {
              if ( row == itemNo )
              {
                XString s;
                CoreGroup__OnSetVisible( view, 1 );
                CoreGroup_OnSetEnabled((CoreGroup)&view->FireZone, 0 );
                CoreGroup__OnSetVisible( &view->FireZone, 0 );
                CoreGroup_OnSetEnabled((CoreGroup)&view->FireChannel, 1 );
                CoreGroup__OnSetVisible( &view->FireChannel, 1 );
                s = EwLoadString( &_Const0485 );
                ViewsText_OnSetString( &view->FireChannel.TimeText, alert->time 
                );

                if ((( alert->flags & AppAlertFlagsCAE ) == AppAlertFlagsCAE ))
                {
                  ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, EwLoadResource( 
                  &AppCauseEffect2, ResourcesBitmap ));
                  AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                  AppChannelTypeNone );
                  s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                  EwConcatString( s, EwLoadString( &_Const0099 )), EwNewStringInt( 
                  alert->unitnum, 0, 10 )), EwLoadString( &_Const0484 )), alert->description 
                  ), EwLoadString( &_Const0486 ));
                }
                else
                  if ((( alert->flags & AppAlertFlagsDevice ) == AppAlertFlagsDevice 
                      ))
                  {
                    ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, 0 );
                    AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                    alert->chanimg );
                    s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                    EwConcatString( s, AppLibClass_Unit( EwGetAutoObject( &AppLib, 
                    AppLibClass ), alert->unitnum )), EwLoadString( &_Const0484 
                    )), alert->description ), EwLoadString( &_Const0487 )), AppLibClass_TypeName( 
                    EwGetAutoObject( &AppLib, AppLibClass ), alert->chanimg ));
                  }
                  else
                    if ((( alert->flags & AppAlertFlagsNetwork ) == AppAlertFlagsNetwork 
                        ))
                    {
                      ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, EwLoadResource( 
                      &Appzone3, ResourcesBitmap ));
                      AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                      AppChannelTypeNone );
                      s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                      EwConcatString( s, EwLoadString( &_Const009D )), EwNewStringInt( 
                      alert->unitnum, 0, 10 )), EwLoadString( &_Const0484 )), alert->description 
                      ), EwLoadString( &_Const0488 ));
                    }
                    else
                      if ((( alert->flags & AppAlertFlagsNetDevice ) == AppAlertFlagsNetDevice 
                          ))
                      {
                        ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, 0 
                        );
                        AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                        alert->chanimg );
                        s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                        EwConcatString( s, AppLibClass_Unit( EwGetAutoObject( &AppLib, 
                        AppLibClass ), alert->unitnum )), EwLoadString( &_Const0484 
                        )), alert->description ), EwLoadString( &_Const0487 )), 
                        AppLibClass_TypeName( EwGetAutoObject( &AppLib, AppLibClass 
                        ), alert->chanimg ));
                      }
                      else
                        if ((( alert->flags & AppAlertFlagsNetCAE ) == AppAlertFlagsNetCAE 
                            ))
                        {
                          ViewsImage_OnSetBitmap( &view->FireChannel.TypeImage, 
                          EwLoadResource( &AppCauseEffect2, ResourcesBitmap ));
                          AppSmallChannelImage_OnSetBitmap( &view->FireChannel.SmallChannelImage, 
                          AppChannelTypeNone );
                          s = EwConcatString( EwConcatString( EwConcatString( EwConcatString( 
                          EwConcatString( s, EwLoadString( &_Const0099 )), EwNewStringInt( 
                          alert->unitnum, 0, 10 )), EwLoadString( &_Const0484 )), 
                          alert->description ), EwLoadString( &_Const0486 ));
                        }
                        else
                        {
                          CoreGroup__OnSetVisible( &view->FireChannel, 0 );
                        }

                ViewsAttrText_OnSetString( &view->FireChannel.AttrText, s );
                ViewsImage_OnSetVisible( &view->FireChannel.SilenceImage, (( alert->flags 
                & AppAlertFlagsSilenced ) == AppAlertFlagsSilenced ));
                CoreGroup_InvalidateViewState((CoreGroup)&view->FireChannel );
                CoreGroup_InvalidateViewState((CoreGroup)view );
                view = EwCastObject( view->Super3.next, AppFireContainer );

                if ( view == 0 )
                  return;
              }
              else
              {
                row = row + 1;
              }
            }
        }
        while ( !!alert->flags );
      }

      if ( zonenum == 0 )
      {
        zonenum = numzonealerts - 1;
      }
      else
        if ( zonenum == ( numzonealerts - 1 ))
        {
          zonenum = 1;
        }
        else
        {
          zonenum = zonenum + 1;
        }

      alertcount = alertcount - 1;
    }
    else
    {
      CoreGroup__OnSetVisible( view, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)view );
      view = EwCastObject( view->Super3.next, AppFireContainer );
      itemNo = itemNo + 1;
    }
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppFire_onEvent( AppFire _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->LogoImage.Bitmap == 0 )
  {
    ViewsImage_OnSetBitmap( &_this->LogoImage, ((ResourcesBitmap)EwGetAutoObject( 
    &AppLogoBitmap, ResourcesExternBitmap )));
  }
  else
  {
    ResourcesExternBitmap_Reload( EwGetAutoObject( &AppLogoBitmap, ResourcesExternBitmap 
    ));
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppFire_onResoundStateEvent( AppFire _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_OnSetEnabled((CoreGroup)&_this->ResoundAlarmsButton, (XBool)( _this->ResoundStateEventHandler.Context 
  != 0 ));
}

/* 'C' function for method : 'App::Fire.ResetFire()' */
void AppFire_ResetFire( AppFire _this, XObject sender )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( ap->LevelAccess.AccessLevel >= 2 )
  {
    Command1( CMD_RESET_FIRE_STATE, 1 );
  }
  else
  {
    AppApplication_LowLevel( ap, 2 );
  }
}

/* Variants derived from the class : 'App::Fire' */
EW_DEFINE_CLASS_VARIANTS( AppFire )
EW_END_OF_CLASS_VARIANTS( AppFire )

/* Virtual Method Table (VMT) for the class : 'App::Fire' */
EW_DEFINE_CLASS( AppFire, CoreGroup, "App::Fire" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppFire_UpdateLayout,
  AppFire_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFire )

/* Initializer for the class 'App::FireZone' */
void AppFireZone__Init( AppFireZone _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Silenced, &_this->_XObject, 0 );
  GraphicsAttrSet__Init( &_this->AttrSet, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->ExpandImage, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFireZone );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0063 );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0489 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00A5 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0304 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const048A );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0055 );
  CoreView_OnSetLayout((CoreView)&_this->Silenced, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->Silenced, _Const048B );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const048C );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const048D ));
  CoreView_OnSetLayout((CoreView)&_this->ExpandImage, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->ExpandImage, _Const048E );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Silenced ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ExpandImage ), 0 );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppFireZone_ToggleExpand 
  );
  ViewsImage_OnSetBitmap( &_this->Silenced, EwLoadResource( &AppSilencedBitmap, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetFont1( &_this->AttrSet, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( &_this->AttrSet, EwLoadResource( &ResourcesFontMedium, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetBitmap2( &_this->AttrSet, EwLoadResource( &AppExpandBitmap, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetBitmap1( &_this->AttrSet, EwLoadResource( &AppCollapseBitmap, 
  ResourcesBitmap ));
  GraphicsAttrSet_OnSetBitmap0( &_this->AttrSet, EwLoadResource( &AppSilencedBitmap, 
  ResourcesBitmap ));
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, EwGetAutoObject( &AppAttrSetFireZone, 
  GraphicsAttrSet ));
  ViewsImage_OnSetBitmap( &_this->ExpandImage, EwLoadResource( &AppCollapseBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'App::FireZone' */
void AppFireZone__ReInit( AppFireZone _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsImage__ReInit( &_this->Silenced );
  GraphicsAttrSet__ReInit( &_this->AttrSet );
  ViewsAttrText__ReInit( &_this->AttrText );
  ViewsImage__ReInit( &_this->ExpandImage );
}

/* Finalizer method for the class 'App::FireZone' */
void AppFireZone__Done( AppFireZone _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFireZone );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsImage__Done( &_this->Silenced );
  GraphicsAttrSet__Done( &_this->AttrSet );
  ViewsAttrText__Done( &_this->AttrText );
  ViewsImage__Done( &_this->ExpandImage );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::FireZone' */
void AppFireZone__Mark( AppFireZone _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Silenced );
  EwMarkObject( &_this->AttrSet );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->ExpandImage );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppFireZone_UpdateLayout( AppFireZone _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFireZone_UpdateViewState( AppFireZone _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::FireZone.ToggleExpand()' */
void AppFireZone_ToggleExpand( AppFireZone _this, XObject sender )
{
  XSet zf;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  zf = AppLibClass_GetPanelZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->zone, 
  _this->panel );

  if ( !(( zf & AppZoneFlagsFireExpanded ) == AppZoneFlagsFireExpanded ))
  {
    zf = zf | AppZoneFlagsFireExpanded;
  }
  else
  {
    zf = zf & ~AppZoneFlagsFireExpanded;
  }

  AppLibClass_SetPanelZoneFlags( EwGetAutoObject( &AppLib, AppLibClass ), _this->zone, 
  _this->panel, zf );
  AppFire_SetListSize( EwCastObject( _this->Super3.Owner->Super2.Owner->Super2.Owner->Super2.Owner, 
  AppFire ));
}

/* Variants derived from the class : 'App::FireZone' */
EW_DEFINE_CLASS_VARIANTS( AppFireZone )
EW_END_OF_CLASS_VARIANTS( AppFireZone )

/* Virtual Method Table (VMT) for the class : 'App::FireZone' */
EW_DEFINE_CLASS( AppFireZone, CoreGroup, "App::FireZone" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppFireZone_UpdateLayout,
  AppFireZone_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFireZone )

/* Initializer for the class 'App::FireChannel' */
void AppFireChannel__Init( AppFireChannel _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsText__Init( &_this->TimeText, &_this->_XObject, 0 );
  AppSmallChannelImage__Init( &_this->SmallChannelImage, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->SilenceImage, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->TypeImage, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFireChannel );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const048F );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0490 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const00A5 );
  CoreView_OnSetLayout((CoreView)&_this->TimeText, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TimeText, _Const0491 );
  ViewsText_OnSetAlignment( &_this->TimeText, ViewsTextAlignmentAlignHorzRight | 
  ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->TimeText, EwLoadString( &_Const0492 ));
  ViewsText_OnSetColor( &_this->TimeText, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->SmallChannelImage, CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->SmallChannelImage, _Const0493 );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const0494 );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const0495 ));
  CoreView_OnSetLayout((CoreView)&_this->SilenceImage, CoreLayoutAlignToRight | 
  CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->SilenceImage, _Const0496 );
  ViewsImage_OnSetAlignment( &_this->SilenceImage, ViewsImageAlignmentAlignHorzRight 
  | ViewsImageAlignmentAlignVertCenter );
  CoreView_OnSetLayout((CoreView)&_this->TypeImage, CoreLayoutAlignToRight | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->TypeImage, _Const0497 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TimeText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SmallChannelImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SilenceImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TypeImage ), 0 );
  ViewsText_OnSetFont( &_this->TimeText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, EwGetAutoObject( &AppAttrSetFireChannel, 
  GraphicsAttrSet ));
  ViewsImage_OnSetBitmap( &_this->SilenceImage, EwLoadResource( &Appsilenced_small, 
  ResourcesBitmap ));
  ViewsImage_OnSetBitmap( &_this->TypeImage, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'App::FireChannel' */
void AppFireChannel__ReInit( AppFireChannel _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsText__ReInit( &_this->TimeText );
  AppSmallChannelImage__ReInit( &_this->SmallChannelImage );
  ViewsAttrText__ReInit( &_this->AttrText );
  ViewsImage__ReInit( &_this->SilenceImage );
  ViewsImage__ReInit( &_this->TypeImage );
}

/* Finalizer method for the class 'App::FireChannel' */
void AppFireChannel__Done( AppFireChannel _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFireChannel );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsText__Done( &_this->TimeText );
  AppSmallChannelImage__Done( &_this->SmallChannelImage );
  ViewsAttrText__Done( &_this->AttrText );
  ViewsImage__Done( &_this->SilenceImage );
  ViewsImage__Done( &_this->TypeImage );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::FireChannel' */
void AppFireChannel__Mark( AppFireChannel _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->TimeText );
  EwMarkObject( &_this->SmallChannelImage );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->SilenceImage );
  EwMarkObject( &_this->TypeImage );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppFireChannel_UpdateLayout( AppFireChannel _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFireChannel_UpdateViewState( AppFireChannel _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::FireChannel' */
EW_DEFINE_CLASS_VARIANTS( AppFireChannel )
EW_END_OF_CLASS_VARIANTS( AppFireChannel )

/* Virtual Method Table (VMT) for the class : 'App::FireChannel' */
EW_DEFINE_CLASS( AppFireChannel, CoreGroup, "App::FireChannel" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppFireChannel_UpdateLayout,
  AppFireChannel_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFireChannel )

/* Initializer for the class 'App::FireContainer' */
void AppFireContainer__Init( AppFireContainer _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppFireZone__Init( &_this->FireZone, &_this->_XObject, 0 );
  AppFireChannel__Init( &_this->FireChannel, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppFireContainer );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0490 );
  CoreRectView__OnSetBounds( &_this->FireZone, _Const0498 );
  CoreRectView__OnSetBounds( &_this->FireChannel, _Const0490 );
  CoreGroup__Add( _this, ((CoreView)&_this->FireZone ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->FireChannel ), 0 );
}

/* Re-Initializer for the class 'App::FireContainer' */
void AppFireContainer__ReInit( AppFireContainer _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppFireZone__ReInit( &_this->FireZone );
  AppFireChannel__ReInit( &_this->FireChannel );
}

/* Finalizer method for the class 'App::FireContainer' */
void AppFireContainer__Done( AppFireContainer _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppFireContainer );

  /* Finalize all embedded objects */
  AppFireZone__Done( &_this->FireZone );
  AppFireChannel__Done( &_this->FireChannel );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::FireContainer' */
void AppFireContainer__Mark( AppFireContainer _this )
{
  EwMarkObject( &_this->FireZone );
  EwMarkObject( &_this->FireChannel );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppFireContainer_UpdateLayout( AppFireContainer _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppFireContainer_UpdateViewState( AppFireContainer _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::FireContainer' */
EW_DEFINE_CLASS_VARIANTS( AppFireContainer )
EW_END_OF_CLASS_VARIANTS( AppFireContainer )

/* Virtual Method Table (VMT) for the class : 'App::FireContainer' */
EW_DEFINE_CLASS( AppFireContainer, CoreGroup, "App::FireContainer" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppFireContainer_UpdateLayout,
  AppFireContainer_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppFireContainer )

/* Initializer for the class 'App::ZoneAlert' */
void AppZoneAlert__Init( AppZoneAlert _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppZoneAlert );
}

/* Re-Initializer for the class 'App::ZoneAlert' */
void AppZoneAlert__ReInit( AppZoneAlert _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::ZoneAlert' */
void AppZoneAlert__Done( AppZoneAlert _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppZoneAlert );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ZoneAlert' */
void AppZoneAlert__Mark( AppZoneAlert _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::ZoneAlert' */
EW_DEFINE_CLASS_VARIANTS( AppZoneAlert )
EW_END_OF_CLASS_VARIANTS( AppZoneAlert )

/* Virtual Method Table (VMT) for the class : 'App::ZoneAlert' */
EW_DEFINE_CLASS( AppZoneAlert, XObject, "App::ZoneAlert" )
EW_END_OF_CLASS( AppZoneAlert )

/* Initializer for the class 'App::ButtonState' */
void AppButtonState__Init( AppButtonState _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppButtonState );
}

/* Re-Initializer for the class 'App::ButtonState' */
void AppButtonState__ReInit( AppButtonState _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::ButtonState' */
void AppButtonState__Done( AppButtonState _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppButtonState );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ButtonState' */
void AppButtonState__Mark( AppButtonState _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::ButtonState' */
EW_DEFINE_CLASS_VARIANTS( AppButtonState )
EW_END_OF_CLASS_VARIANTS( AppButtonState )

/* Virtual Method Table (VMT) for the class : 'App::ButtonState' */
EW_DEFINE_CLASS( AppButtonState, XObject, "App::ButtonState" )
EW_END_OF_CLASS( AppButtonState )

/* User defined auto object: 'App::LogoBitmap' */
EW_DEFINE_AUTOOBJECT( AppLogoBitmap, ResourcesExternBitmap )

/* Initializer for the auto object 'App::LogoBitmap' */
void AppLogoBitmap__Init( ResourcesExternBitmap _this )
{
  ResourcesExternBitmap_OnSetName( _this, EwLoadString( &_Const0499 ));
}

/* Table with links to derived variants of the auto object : 'App::LogoBitmap' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppLogoBitmap )
EW_END_OF_AUTOOBJECT_VARIANTS( AppLogoBitmap )

/* Bitmap resource : 'App::battery1' */
EW_DEFINE_BITMAP_RES( Appbattery1 )
  EW_BITMAP_FRAMES( Appbattery1, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 12, 0 )
    EW_BITMAP_FRAME( 3, 10, 20, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appbattery1, Default )                  /* ratio 20.65 % */
    0xFC080100, 0xC1001027, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0xFF81C4E2,
    0x98D41A32, 0x4041A151, 0x0481FF20, 0xC8E43224, 0xAA4F2492, 0x6532C934, 0x5730944B,
    0xB1299CBA, 0x368246E3, 0xC9B49E13, 0x9C4FA393, 0xED0A6F3F, 0xD0E8B409, 0x5E2927A0,
    0x6353B8B4, 0x890988D2, 0xB52A351E, 0x3297D22A, 0xF9B4C297, 0xA0D462D4, 0x1D82A956,
    0x59A0B1EB, 0x36255D81, 0x69569825, 0xDF70A9D8, 0xB74B3CE6, 0x00AEC0ED, 0x1AFD7AEC,
    0xA35F6C97, 0x5486EB74, 0xD2EF578A, 0x6AE588BF, 0xF0D67C0C, 0xA183BCDA, 0x57EC4C3E,
    0x2FAC5B31, 0x4CB48709, 0xCEE7AC59, 0xAC164990, 0x415E5057, 0x66699A7E, 0x75598D5D,
    0xF5AF98EB, 0x773B3006, 0x4AAD6DAF, 0xADBE4B73, 0x82BD22BB, 0x0C6B6805, 0x00000008,
    0x00000000

  EW_BITMAPS_TABLE( Appbattery1 )
    EW_BITMAP( Appbattery1, Default )
EW_END_OF_BITMAP_RES( Appbattery1 )

/* Table with links to derived variants of the bitmap resource : 'App::battery1' */
EW_RES_WITHOUT_VARIANTS( Appbattery1 )

/* Bitmap resource : 'App::battery2' */
EW_DEFINE_BITMAP_RES( Appbattery2 )
  EW_BITMAP_FRAMES( Appbattery2, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 12, 0 )
    EW_BITMAP_FRAME( 3, 10, 20, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appbattery2, Default )                  /* ratio 22.10 % */
    0xFC080100, 0xC1001027, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0xFF81C4E2,
    0x98D41A32, 0x4041A151, 0x0481FF20, 0xC8E43224, 0xAA4F2492, 0x6532C934, 0x5730944B,
    0xB1299CBA, 0x368246E3, 0xC9B49E13, 0x9C4FA393, 0xED0A6F3F, 0xD0E8B409, 0x5E2927A0,
    0x6353B8B4, 0x6D0988D2, 0x3518B53E, 0x04A3D128, 0xA90CC665, 0xAE5669B4, 0x053A3150,
    0xD1AC554B, 0xAA0B57AB, 0xA2553B5D, 0x956D0057, 0xB4BB254A, 0x41AB59E3, 0x4B85EAD7,
    0xBE592757, 0x04529524, 0xDDEAB75C, 0xB2F742C3, 0x2A703BED, 0x1F0FC161, 0x1889BD87,
    0x6AC546AD, 0x390E36E3, 0x8F64F037, 0xAE5A2D9A, 0xD6A6963C, 0x92F19CAE, 0xF5B58D5E,
    0xEA00C968, 0x90579415, 0x2FD36A1F, 0xCDCEEAB5, 0x986FB71B, 0xCDA80314, 0xD97219F9,
    0x2B8B85E3, 0x60AF48AF, 0x031AE181, 0x00000002, 0x00000000

  EW_BITMAPS_TABLE( Appbattery2 )
    EW_BITMAP( Appbattery2, Default )
EW_END_OF_BITMAP_RES( Appbattery2 )

/* Table with links to derived variants of the bitmap resource : 'App::battery2' */
EW_RES_WITHOUT_VARIANTS( Appbattery2 )

/* Bitmap resource : 'App::battery3' */
EW_DEFINE_BITMAP_RES( Appbattery3 )
  EW_BITMAP_FRAMES( Appbattery3, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 12, 0 )
    EW_BITMAP_FRAME( 3, 10, 20, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appbattery3, Default )                  /* ratio 22.10 % */
    0xFC080100, 0xC1001027, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0xFF81C4E2,
    0x98D41A32, 0x4041A151, 0x0481FF20, 0xC8E43224, 0xAA4F2492, 0x6532C934, 0x5730944B,
    0xB1299CBA, 0x368246E3, 0xC9B49E13, 0x9C4FA393, 0xED0A6F3F, 0xD0E8B409, 0x5E2927A0,
    0x6353B8B4, 0x6D0988D2, 0xD518B53E, 0x55A54869, 0x798CCA09, 0xAD536235, 0xB462A95D,
    0x58EB124A, 0x9EA165B0, 0x2DB6C82D, 0xBF12A980, 0xB4BB0DBE, 0x59BADA23, 0x7B15A6E7,
    0x82DBA3D3, 0x94867570, 0xE129574A, 0x170178BD, 0x6FF7FB56, 0x1F7281E0, 0xB89C3C5B,
    0x7ECADEA2, 0x2C462B1B, 0xB3652498, 0xB6832F7D, 0xC7B19A2B, 0xCA955BAD, 0x28D47A25,
    0x6141D7EB, 0xAF5A9D1B, 0xFC82BCA0, 0xBD44BF54, 0xDE4D37BB, 0xA4C37DBF, 0x4E6D8018,
    0x2393A3D3, 0x2977CE5F, 0x8C0582BD, 0x00080C6B, 0x00000000

  EW_BITMAPS_TABLE( Appbattery3 )
    EW_BITMAP( Appbattery3, Default )
EW_END_OF_BITMAP_RES( Appbattery3 )

/* Table with links to derived variants of the bitmap resource : 'App::battery3' */
EW_RES_WITHOUT_VARIANTS( Appbattery3 )

/* Bitmap resource : 'App::battery0' */
EW_DEFINE_BITMAP_RES( Appbattery0 )
  EW_BITMAP_FRAMES( Appbattery0, Default, EW_DRIVER_VARIANT_RGBA8888, 21, 11, 0 )
    EW_BITMAP_FRAME( 3, 0, 18, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appbattery0, Default )                  /* ratio 16.88 % */
    0xFC084D00, 0xC104D027, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x18003FE2,
    0x98C46A33, 0x7FC78990, 0xFC80991E, 0xC8A47218, 0xAA492892, 0xA4D2B93C, 0x132294CB,
    0xA0099C6E, 0x389A47E3, 0xB9DCEA73, 0x89C524B3, 0x1CF24B11, 0x4628B44A, 0xFE3F2F98,
    0xA9B46A14, 0x833EA353, 0xB54A7CDE, 0x16A8CD2A, 0x5ADD5A99, 0xAD44AB15, 0x446AC35C,
    0x54E9748A, 0x780168B1, 0xA59669FD, 0xC96FA4DB, 0xB71B94B6, 0x018C4CA5, 0xB88DB270,
    0xA05F62D7, 0xCC46F97E, 0x40670058, 0x00000000

  EW_BITMAPS_TABLE( Appbattery0 )
    EW_BITMAP( Appbattery0, Default )
EW_END_OF_BITMAP_RES( Appbattery0 )

/* Table with links to derived variants of the bitmap resource : 'App::battery0' */
EW_RES_WITHOUT_VARIANTS( Appbattery0 )

/* Initializer for the class 'App::ChannelImage' */
void AppChannelImage__Init( AppChannelImage _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppChannelImage );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const049A );
  CoreRectView__OnSetBounds( &_this->Image, _Const049A );
  CoreRectView__OnSetBounds( &_this->Text, _Const049B );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const049C ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  _this->Bitmap = AppChannelTypeInput1;
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &AppGeneralInputBitmap, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontSmall, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'App::ChannelImage' */
void AppChannelImage__ReInit( AppChannelImage _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::ChannelImage' */
void AppChannelImage__Done( AppChannelImage _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppChannelImage );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ChannelImage' */
void AppChannelImage__Mark( AppChannelImage _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppChannelImage_UpdateLayout( AppChannelImage _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppChannelImage_UpdateViewState( AppChannelImage _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsImage_OnSetBitmap( &_this->Image, AppChannelImage_TypeBitmap( _this ));
}

/* 'C' function for method : 'App::ChannelImage.OnSetBitmap()' */
void AppChannelImage_OnSetBitmap( AppChannelImage _this, XEnum value )
{
  if ( _this->Bitmap == value )
    return;

  _this->Bitmap = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::ChannelImage.TypeBitmap()' */
ResourcesBitmap AppChannelImage_TypeBitmap( AppChannelImage _this )
{
  ViewsText_OnSetString( &_this->Text, 0 );

  if (( _this->Bitmap <= AppChannelTypeInput32 ) && ( _this->Bitmap >= AppChannelTypeInput1 
      ))
  {
    ViewsText_OnSetString( &_this->Text, EwNewStringInt(( _this->Bitmap - AppChannelTypeInput1 
    ) + 1, 0, 10 ));
  }

  if (( _this->Bitmap <= AppChannelTypeOutput32 ) && ( _this->Bitmap >= AppChannelTypeOutput1 
      ))
  {
    ViewsText_OnSetString( &_this->Text, EwNewStringInt(( _this->Bitmap - AppChannelTypeOutput1 
    ) + 1, 0, 10 ));
  }

  return AppLibClass_TypeBitmap( EwGetAutoObject( &AppLib, AppLibClass ), _this->Bitmap 
    );
}

/* Variants derived from the class : 'App::ChannelImage' */
EW_DEFINE_CLASS_VARIANTS( AppChannelImage )
EW_END_OF_CLASS_VARIANTS( AppChannelImage )

/* Virtual Method Table (VMT) for the class : 'App::ChannelImage' */
EW_DEFINE_CLASS( AppChannelImage, CoreGroup, "App::ChannelImage" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppChannelImage_UpdateLayout,
  AppChannelImage_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppChannelImage )

/* Initializer for the class 'App::SmallChannelImage' */
void AppSmallChannelImage__Init( AppSmallChannelImage _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppSmallChannelImage );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const049D );
  _this->Bitmap = AppChannelTypeInput32;
  CoreRectView__OnSetBounds( &_this->Text, _Const049E );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const049C ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Image, _Const049F );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesDefaultFont, ResourcesFont 
  ));
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &ResourcesDefaultBitmap, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'App::SmallChannelImage' */
void AppSmallChannelImage__ReInit( AppSmallChannelImage _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  ViewsImage__ReInit( &_this->Image );
}

/* Finalizer method for the class 'App::SmallChannelImage' */
void AppSmallChannelImage__Done( AppSmallChannelImage _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppSmallChannelImage );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  ViewsImage__Done( &_this->Image );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::SmallChannelImage' */
void AppSmallChannelImage__Mark( AppSmallChannelImage _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Image );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppSmallChannelImage_UpdateLayout( AppSmallChannelImage _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppSmallChannelImage_UpdateViewState( AppSmallChannelImage _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsImage_OnSetBitmap( &_this->Image, AppSmallChannelImage_TypeBitmap( _this 
  ));
}

/* 'C' function for method : 'App::SmallChannelImage.OnSetBitmap()' */
void AppSmallChannelImage_OnSetBitmap( AppSmallChannelImage _this, XEnum value )
{
  if ( _this->Bitmap == value )
    return;

  _this->Bitmap = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::SmallChannelImage.TypeBitmap()' */
ResourcesBitmap AppSmallChannelImage_TypeBitmap( AppSmallChannelImage _this )
{
  ViewsText_OnSetString( &_this->Text, 0 );

  if (( _this->Bitmap <= AppChannelTypeInput32 ) && ( _this->Bitmap >= AppChannelTypeInput1 
      ))
  {
    ViewsText_OnSetString( &_this->Text, EwNewStringInt(( _this->Bitmap - AppChannelTypeInput1 
    ) + 1, 0, 10 ));
  }

  if (( _this->Bitmap <= AppChannelTypeOutput32 ) && ( _this->Bitmap >= AppChannelTypeOutput1 
      ))
  {
    ViewsText_OnSetString( &_this->Text, EwNewStringInt(( _this->Bitmap - AppChannelTypeOutput1 
    ) + 1, 0, 10 ));
  }

  return AppLibClass_TypeSmallBitmap( EwGetAutoObject( &AppLib, AppLibClass ), _this->Bitmap 
    );
}

/* Variants derived from the class : 'App::SmallChannelImage' */
EW_DEFINE_CLASS_VARIANTS( AppSmallChannelImage )
EW_END_OF_CLASS_VARIANTS( AppSmallChannelImage )

/* Virtual Method Table (VMT) for the class : 'App::SmallChannelImage' */
EW_DEFINE_CLASS( AppSmallChannelImage, CoreGroup, "App::SmallChannelImage" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppSmallChannelImage_UpdateLayout,
  AppSmallChannelImage_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppSmallChannelImage )

/* Initializer for the class 'App::DayTimesPopup' */
void AppDayTimesPopup__Init( AppDayTimesPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SiteChangeEventHandler1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AccessChangeEventHandler2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDayTimesPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04A0 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const04A1 );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const04A2 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->VerticalList, 1 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 50 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 7 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, EW_CLASS( AppDayTimeRow 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const04A3 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const04A4 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->Text, _Const04A5 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const04A6 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text1, _Const04A7 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const04A8 ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0244 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const04A9 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const04AA );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const04AB );
  CoreSimpleTouchHandler_OnSetRetargetDelay( &_this->SimpleTouchHandler, 10000 );
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->SimpleTouchHandler, 100 );
  CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppDayTimesPopup_OnLoadItem 
  );
  _this->PushButton.OnRelease = EwNullSlot;
  _this->PushButton.OnActivate = EwNewSlot( _this, AppDayTimesPopup_OKSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNullSlot;
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppDayTimesPopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppDayTimesPopup_LowLevel 
  );
  _this->SiteChangeEventHandler1.OnEvent = EwNewSlot( _this, AppDayTimesPopup_CancelSlot 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SiteChangeEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  _this->AccessChangeEventHandler2.OnEvent = EwNewSlot( _this, AppDayTimesPopup_AccessChange 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->AccessChangeEventHandler2, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AccessModeChangeEvent );

  /* Call the user defined constructor */
  AppDayTimesPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::DayTimesPopup' */
void AppDayTimesPopup__ReInit( AppDayTimesPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreVerticalList__ReInit( &_this->VerticalList );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  CoreSystemEventHandler__ReInit( &_this->SiteChangeEventHandler1 );
  CoreSystemEventHandler__ReInit( &_this->AccessChangeEventHandler2 );
}

/* Finalizer method for the class 'App::DayTimesPopup' */
void AppDayTimesPopup__Done( AppDayTimesPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDayTimesPopup );

  /* Finalize all embedded objects */
  CoreVerticalList__Done( &_this->VerticalList );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  CoreSystemEventHandler__Done( &_this->SiteChangeEventHandler1 );
  CoreSystemEventHandler__Done( &_this->AccessChangeEventHandler2 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DayTimesPopup' */
void AppDayTimesPopup__Mark( AppDayTimesPopup _this )
{
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->SiteChangeEventHandler1 );
  EwMarkObject( &_this->AccessChangeEventHandler2 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppDayTimesPopup_Init( AppDayTimesPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  CoreVerticalList_InvalidateItems( &_this->VerticalList, 0, 6 );
  EwPostSignal( EwNewSlot( _this, AppDayTimesPopup_AccessChange ), ((XObject)_this 
    ));
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppDayTimesPopup_OnLoadItem( AppDayTimesPopup _this, XObject sender )
{
  AppDayTimeRow r;
  XInt32 n;
  XInt32 sh;
  XInt32 sm;
  XInt32 eh;
  XInt32 em;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  r = EwCastObject( _this->VerticalList.View, AppDayTimeRow );
  n = _this->VerticalList.Item;

  if ( r == 0 )
    return;

  sh = n;
  sm = n;
  eh = n;
  em = n;
  {
    Command cmd;

    cmd.int0 = n;
    Command0( CMD_GET_DAY_TIME, &cmd );
    sh = cmd.int0;
    sm = cmd.int1;
    eh = cmd.int2;
    em = cmd.int3;
  }

  if ( r != 0 )
  {
    XString s;
    AppTimePicker1_OnSetHour( &r->Start, sh );
    AppTimePicker1_OnSetMinute( &r->Start, sm );
    AppTimePicker1_OnSetHour( &r->End, eh );
    AppTimePicker1_OnSetMinute( &r->End, em );

    switch ( n )
    {
      case 0 :
        s = EwLoadString( &ResourcesMonday );
      break;

      case 1 :
        s = EwLoadString( &ResourcesTuesday );
      break;

      case 2 :
        s = EwLoadString( &ResourcesWednesday );
      break;

      case 3 :
        s = EwLoadString( &ResourcesThursday );
      break;

      case 4 :
        s = EwLoadString( &ResourcesFriday );
      break;

      case 5 :
        s = EwLoadString( &ResourcesSaturday );
      break;

      case 6 :
        s = EwLoadString( &ResourcesSunday );
      break;
    }

    ViewsText_OnSetString( &r->Text, s );
  }
}

/* 'C' function for method : 'App::DayTimesPopup.OKSlot()' */
void AppDayTimesPopup_OKSlot( AppDayTimesPopup _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( app->LevelAccess.AccessLevel >= 3 )
    {
      AppDayTimeRow r = EwCastObject( _this->VerticalList.Super1.first, AppDayTimeRow 
        );
      XInt32 i = 0;

      while (( r != 0 ) && ( i < 7 ))
      {
        XInt32 sh = AppTimePicker1_OnGetHour( &r->Start );
        XInt32 sm = AppTimePicker1_OnGetMinute( &r->Start );
        XInt32 eh = AppTimePicker1_OnGetHour( &r->End );
        XInt32 em = AppTimePicker1_OnGetMinute( &r->End );
        {
          Command cmd;

          cmd.int0  = i;
          cmd.short2 = sh;
          cmd.short3 = sm;
          cmd.short4 = eh;
          cmd.short5 = em;

          Command0( CMD_SET_DAY_TIME, &cmd );
        }
        i = i + 1;
        r = EwCastObject( r->Super3.next, AppDayTimeRow );
      }
    }
  }

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::DayTimesPopup.CancelSlot()' */
void AppDayTimesPopup_CancelSlot( AppDayTimesPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::DayTimesPopup.LowLevel()' */
void AppDayTimesPopup_LowLevel( AppDayTimesPopup _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( app->LevelAccess.AccessLevel < 3 )
    {
      AppApplication_LowLevel( app, 3 );
    }
    else
    {
      CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
    }
  }
}

/* 'C' function for method : 'App::DayTimesPopup.AccessChange()' */
void AppDayTimesPopup_AccessChange( AppDayTimesPopup _this, XObject sender )
{
  AppApplication app;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( app->LevelAccess.AccessLevel < 3 )
    {
      CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 1 );
    }
    else
    {
      CoreSimpleTouchHandler_OnSetEnabled( &_this->SimpleTouchHandler, 0 );
    }
  }
}

/* Variants derived from the class : 'App::DayTimesPopup' */
EW_DEFINE_CLASS_VARIANTS( AppDayTimesPopup )
EW_END_OF_CLASS_VARIANTS( AppDayTimesPopup )

/* Virtual Method Table (VMT) for the class : 'App::DayTimesPopup' */
EW_DEFINE_CLASS( AppDayTimesPopup, AppPopup, "App::DayTimesPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDayTimesPopup )

/* Initializer for the class 'App::TimePicker1' */
void AppTimePicker1__Init( AppTimePicker1 _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesPickerControl__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerMinute, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->TouchHandlerHour, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListMinute, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->ListHour, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Separator1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTimePicker1 );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04AC );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const04AD );
  CoreRectView__OnSetBounds( &_this->TouchHandlerMinute, _Const04AE );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerMinute, _Const012E );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerMinute, 0.200000f );
  CoreRectView__OnSetBounds( &_this->TouchHandlerHour, _Const04AF );
  CoreSlideTouchHandler_OnSetSnapNext( &_this->TouchHandlerHour, _Const012E );
  _this->TouchHandlerHour.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetResetDelay( &_this->TouchHandlerHour, 100 );
  CoreSlideTouchHandler_OnSetFriction( &_this->TouchHandlerHour, 0.050000f );
  CoreRectView__OnSetBounds( &_this->ListMinute, _Const04B0 );
  CoreVerticalList_OnSetEndless( &_this->ListMinute, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListMinute, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListMinute, 60 );
  CoreRectView__OnSetBounds( &_this->ListHour, _Const04B1 );
  CoreVerticalList_OnSetEndless( &_this->ListHour, 1 );
  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, 60 );
  CoreVerticalList_OnSetItemHeight( &_this->ListHour, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->ListHour, 24 );
  CoreRectView__OnSetBounds( &_this->Separator1, _Const04B2 );
  ViewsText_OnSetString( &_this->Separator1, EwLoadString( &_Const013E ));
  ViewsText_OnSetColor( &_this->Separator1, _Const013F );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const04B3 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const04B4 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton1, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const04B5 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton2, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const04B6 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton3, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, 0 );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const04B7 );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const04B8 );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const04B9 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const0134 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const0134 );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const04BA );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const04BB );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const04BB );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const0134 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const0134 );
  CoreTimer_OnSetPeriod( &_this->Timer, 350 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandlerHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListMinute ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListHour ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Separator1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  _this->TouchHandlerMinute.OnEnd = EwNewSlot( _this, AppTimePicker1_onEndSlide 
  );
  _this->TouchHandlerMinute.OnStart = EwNewSlot( _this, AppTimePicker1_onStartSlide 
  );
  _this->TouchHandlerHour.OnEnd = EwNewSlot( _this, AppTimePicker1_onEndSlide );
  _this->TouchHandlerHour.OnStart = EwNewSlot( _this, AppTimePicker1_onStartSlide 
  );
  _this->ListMinute.OnLoadItem = EwNewSlot( _this, AppTimePicker1_OnLoadMinuteItem 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->ListMinute, &_this->TouchHandlerMinute 
  );
  _this->ListHour.OnLoadItem = EwNewSlot( _this, AppTimePicker1_OnLoadHourItem );
  CoreVerticalList_OnSetSlideHandler( &_this->ListHour, &_this->TouchHandlerHour 
  );
  ViewsText_OnSetFont( &_this->Separator1, EwLoadResource( &TemplatesDefaultFontPicker, 
  ResourcesFont ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppTimePicker1_ReleaseSlot );
  _this->PushButton.OnPress = EwNewSlot( _this, AppTimePicker1_PressSlot );
  _this->PushButton.OnActivate = EwNewSlot( _this, AppTimePicker1_MinuteUp );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppTimePicker1_ReleaseSlot );
  _this->PushButton1.OnPress = EwNewSlot( _this, AppTimePicker1_PressSlot );
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppTimePicker1_MinuteDown );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton1, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnRelease = EwNewSlot( _this, AppTimePicker1_ReleaseSlot );
  _this->PushButton2.OnPress = EwNewSlot( _this, AppTimePicker1_PressSlot );
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppTimePicker1_HourUp );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton2, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton3.OnRelease = EwNewSlot( _this, AppTimePicker1_ReleaseSlot );
  _this->PushButton3.OnPress = EwNewSlot( _this, AppTimePicker1_PressSlot );
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppTimePicker1_HourDown );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton3, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppTimePicker1_Tick );
}

/* Re-Initializer for the class 'App::TimePicker1' */
void AppTimePicker1__ReInit( AppTimePicker1 _this )
{
  /* At first re-initialize the super class ... */
  TemplatesPickerControl__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__ReInit( &_this->TouchHandlerHour );
  CoreVerticalList__ReInit( &_this->ListMinute );
  CoreVerticalList__ReInit( &_this->ListHour );
  ViewsText__ReInit( &_this->Separator1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'App::TimePicker1' */
void AppTimePicker1__Done( AppTimePicker1 _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTimePicker1 );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerMinute );
  CoreSlideTouchHandler__Done( &_this->TouchHandlerHour );
  CoreVerticalList__Done( &_this->ListMinute );
  CoreVerticalList__Done( &_this->ListHour );
  ViewsText__Done( &_this->Separator1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  ViewsBorder__Done( &_this->BorderCurrent );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  CoreTimer__Done( &_this->Timer );

  /* Don't forget to deinitialize the super class ... */
  TemplatesPickerControl__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TimePicker1' */
void AppTimePicker1__Mark( AppTimePicker1 _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->TouchHandlerMinute );
  EwMarkObject( &_this->TouchHandlerHour );
  EwMarkObject( &_this->ListMinute );
  EwMarkObject( &_this->ListHour );
  EwMarkObject( &_this->Separator1 );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->Timer );
  EwMarkObject( _this->Pressed );

  /* Give the super class a chance to mark its objects and references */
  TemplatesPickerControl__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTimePicker1_UpdateViewState( AppTimePicker1 _this, XSet aState )
{
  XBool isEnabled;
  XBool isSelected;
  XBool isSliding;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  isEnabled = (( aState & CoreViewStateEnabled ) == CoreViewStateEnabled );
  isSelected = (( aState & CoreViewStateSelected ) == CoreViewStateSelected );
  isSliding = (XBool)( _this->TouchHandlerHour.Sliding || _this->TouchHandlerMinute.Sliding 
  );

  if ( isSliding )
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const0141 );
  else
    ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const012C );

  _this->enabled = isEnabled;
  _this->selected = isSelected;
  _this->sliding = isSliding;
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has finished the slide animation. Thereupon 
   the owner of the time picker is notified, that the time has been changed. */
void AppTimePicker1_onEndSlide( AppTimePicker1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );

  if ( !_this->TouchHandlerHour.Sliding && !_this->TouchHandlerMinute.Sliding )
    EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called when one of the Slide Touch Handler (TouchHandlerHour, 
   TouchHandlerMinute or TouchHandlerSecond) has begun the slide animation. */
void AppTimePicker1_onStartSlide( AppTimePicker1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This method is called by 'ListMinute' vertical list every time the list loads 
   or updates an item. */
void AppTimePicker1_OnLoadMinuteItem( AppTimePicker1 _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListMinute.Item;
  itemView = EwCastObject( _this->ListMinute.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListMinute.Super2.Bounds ), _this->ListMinute.ItemHeight )));
}

/* This method is called by 'ListHour' vertical list every time the list loads or 
   updates an item. */
void AppTimePicker1_OnLoadHourItem( AppTimePicker1 _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListHour.Item;
  itemView = EwCastObject( _this->ListHour.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo, 2, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &TemplatesDefaultFontPicker, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->ListHour.Super2.Bounds ), _this->ListHour.ItemHeight )));
}

/* 'C' function for method : 'App::TimePicker1.OnGetMinute()' */
XInt32 AppTimePicker1_OnGetMinute( AppTimePicker1 _this )
{
  return ( -_this->ListMinute.ScrollOffset / _this->ListMinute.ItemHeight ) % 60;
}

/* 'C' function for method : 'App::TimePicker1.OnSetMinute()' */
void AppTimePicker1_OnSetMinute( AppTimePicker1 _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 59 )
    value = 59;

  CoreVerticalList_OnSetScrollOffset( &_this->ListMinute, value * -_this->ListMinute.ItemHeight 
  );
}

/* 'C' function for method : 'App::TimePicker1.OnGetHour()' */
XInt32 AppTimePicker1_OnGetHour( AppTimePicker1 _this )
{
  return ( -_this->ListHour.ScrollOffset / _this->ListHour.ItemHeight ) % 24;
}

/* 'C' function for method : 'App::TimePicker1.OnSetHour()' */
void AppTimePicker1_OnSetHour( AppTimePicker1 _this, XInt32 value )
{
  if ( value < 0 )
    value = 0;

  if ( value > 23 )
    value = 23;

  CoreVerticalList_OnSetScrollOffset( &_this->ListHour, value * -_this->ListHour.ItemHeight 
  );
}

/* 'C' function for method : 'App::TimePicker1.HourUp()' */
void AppTimePicker1_HourUp( AppTimePicker1 _this, XObject sender )
{
  XInt32 h;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  h = AppTimePicker1_OnGetHour( _this );

  if ( h == 23 )
    AppTimePicker1_OnSetHour( _this, 0 );
  else
    AppTimePicker1_OnSetHour( _this, h + 1 );
}

/* 'C' function for method : 'App::TimePicker1.HourDown()' */
void AppTimePicker1_HourDown( AppTimePicker1 _this, XObject sender )
{
  XInt32 h;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  h = AppTimePicker1_OnGetHour( _this );

  if ( h == 0 )
    AppTimePicker1_OnSetHour( _this, 23 );
  else
    AppTimePicker1_OnSetHour( _this, h - 1 );
}

/* 'C' function for method : 'App::TimePicker1.MinuteUp()' */
void AppTimePicker1_MinuteUp( AppTimePicker1 _this, XObject sender )
{
  XInt32 m;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  m = AppTimePicker1_OnGetMinute( _this );

  if ( m == 59 )
    AppTimePicker1_OnSetMinute( _this, 0 );
  else
    AppTimePicker1_OnSetMinute( _this, m + 1 );
}

/* 'C' function for method : 'App::TimePicker1.MinuteDown()' */
void AppTimePicker1_MinuteDown( AppTimePicker1 _this, XObject sender )
{
  XInt32 m;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  m = AppTimePicker1_OnGetMinute( _this );

  if ( m == 0 )
    AppTimePicker1_OnSetMinute( _this, 59 );
  else
    AppTimePicker1_OnSetMinute( _this, m - 1 );
}

/* 'C' function for method : 'App::TimePicker1.PressSlot()' */
void AppTimePicker1_PressSlot( AppTimePicker1 _this, XObject sender )
{
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  _this->Pressed = EwCastObject( sender, WidgetSetPushButton );
}

/* 'C' function for method : 'App::TimePicker1.ReleaseSlot()' */
void AppTimePicker1_ReleaseSlot( AppTimePicker1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  _this->Pressed = 0;
}

/* 'C' function for method : 'App::TimePicker1.Tick()' */
void AppTimePicker1_Tick( AppTimePicker1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Pressed == &_this->PushButton2 )
    EwSignal( EwNewSlot( _this, AppTimePicker1_HourUp ), ((XObject)_this ));

  if ( _this->Pressed == &_this->PushButton3 )
    EwSignal( EwNewSlot( _this, AppTimePicker1_HourDown ), ((XObject)_this ));

  if ( _this->Pressed == &_this->PushButton )
    EwSignal( EwNewSlot( _this, AppTimePicker1_MinuteUp ), ((XObject)_this ));

  if ( _this->Pressed == &_this->PushButton1 )
    EwSignal( EwNewSlot( _this, AppTimePicker1_MinuteDown ), ((XObject)_this ));
}

/* Variants derived from the class : 'App::TimePicker1' */
EW_DEFINE_CLASS_VARIANTS( AppTimePicker1 )
EW_END_OF_CLASS_VARIANTS( AppTimePicker1 )

/* Virtual Method Table (VMT) for the class : 'App::TimePicker1' */
EW_DEFINE_CLASS( AppTimePicker1, TemplatesPickerControl, "App::TimePicker1" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTimePicker1_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTimePicker1 )

/* Initializer for the class 'App::DayTimeRow' */
void AppDayTimeRow__Init( AppDayTimeRow _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppTimePicker1__Init( &_this->Start, &_this->_XObject, 0 );
  AppTimePicker1__Init( &_this->End, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDayTimeRow );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04BC );
  CoreRectView__OnSetBounds( &_this->Start, _Const04BD );
  CoreRectView__OnSetBounds( &_this->End, _Const04BE );
  CoreRectView__OnSetBounds( &_this->Text, _Const04BF );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const04C0 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Start ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->End ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
}

/* Re-Initializer for the class 'App::DayTimeRow' */
void AppDayTimeRow__ReInit( AppDayTimeRow _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppTimePicker1__ReInit( &_this->Start );
  AppTimePicker1__ReInit( &_this->End );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::DayTimeRow' */
void AppDayTimeRow__Done( AppDayTimeRow _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDayTimeRow );

  /* Finalize all embedded objects */
  AppTimePicker1__Done( &_this->Start );
  AppTimePicker1__Done( &_this->End );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DayTimeRow' */
void AppDayTimeRow__Mark( AppDayTimeRow _this )
{
  EwMarkObject( &_this->Start );
  EwMarkObject( &_this->End );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppDayTimeRow_UpdateLayout( AppDayTimeRow _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppDayTimeRow_UpdateViewState( AppDayTimeRow _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::DayTimeRow' */
EW_DEFINE_CLASS_VARIANTS( AppDayTimeRow )
EW_END_OF_CLASS_VARIANTS( AppDayTimeRow )

/* Virtual Method Table (VMT) for the class : 'App::DayTimeRow' */
EW_DEFINE_CLASS( AppDayTimeRow, CoreGroup, "App::DayTimeRow" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppDayTimeRow_UpdateLayout,
  AppDayTimeRow_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDayTimeRow )

/* Initializer for the class 'App::ToggleItem' */
void AppToggleItem__Init( AppToggleItem _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppToggleItem );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04C1 );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const04C1 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &AppSmallCheckBox, WidgetSetToggleButtonConfig ));
}

/* Re-Initializer for the class 'App::ToggleItem' */
void AppToggleItem__ReInit( AppToggleItem _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
}

/* Finalizer method for the class 'App::ToggleItem' */
void AppToggleItem__Done( AppToggleItem _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppToggleItem );

  /* Finalize all embedded objects */
  WidgetSetToggleButton__Done( &_this->ToggleButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ToggleItem' */
void AppToggleItem__Mark( AppToggleItem _this )
{
  EwMarkObject( &_this->ToggleButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppToggleItem_UpdateLayout( AppToggleItem _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppToggleItem_UpdateViewState( AppToggleItem _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::ToggleItem' */
EW_DEFINE_CLASS_VARIANTS( AppToggleItem )
EW_END_OF_CLASS_VARIANTS( AppToggleItem )

/* Virtual Method Table (VMT) for the class : 'App::ToggleItem' */
EW_DEFINE_CLASS( AppToggleItem, CoreGroup, "App::ToggleItem" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppToggleItem_UpdateLayout,
  AppToggleItem_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppToggleItem )

/* Bitmap resource : 'App::input_alarm' */
EW_DEFINE_BITMAP_RES( Appinput_alarm )
  EW_BITMAP_FRAMES( Appinput_alarm, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_alarm, Default )               /* ratio 32.02 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0xC7BB921E, 0xA97B1D41, 0x56AFF63A, 0xFDC86027, 0xFF476EC8, 0xF676FD1F,
    0x8FCFDFEB, 0xFAFFBF7F, 0x0FF804DB, 0x13FE042C, 0x25FC36E0, 0xFA7F5FF8, 0x7E20C835,
    0x9E53F593, 0x22B55677, 0xA4FF2E49, 0xFF3A8E73, 0x3A4E539C, 0x0942B8FF, 0xB5E93862,
    0xA20E82A0, 0x2C2B5F88, 0x8BC0B3FE, 0xE32000FF, 0xF8D40A3F, 0xAA382A8F, 0xFB89E3A8,
    0x799315F1, 0x8B3210A4, 0xF378D481, 0xFE483C8F, 0xE2368DF3, 0x230A93FC, 0x229898B6,
    0xC7D6538F, 0xF0FF95C2, 0xC63FE5A0, 0x0F4FF974, 0xC2B3FE60, 0xF9563B98, 0xAA3E8260,
    0x205CD574, 0x9BE6D205, 0x6719B91E, 0x8250AD47, 0x9CE339A1, 0x7C3C0FF3, 0x338D73FE,
    0xC8529608, 0xF89D5690, 0x2CFFA1CD, 0x263FE8A1, 0xA3A8CA34, 0xCFF09A8D, 0x43FE9400,
    0x4A8FA5C1, 0x9305297A, 0xA6691A56, 0xEA212AA0, 0xAA94DE3F, 0x592C9A63, 0xFFA00D65,
    0xABA08AAC, 0x2B0AB2AD, 0x833CD7AC, 0xE8E239A0, 0xFF3CA489, 0x3FEBE3BC, 0xCCE2ECC8,
    0x62162755, 0x24073FEC, 0xCC1A4FFB, 0xB3C6B3FE, 0xECFB42CE, 0x3B52D11A, 0x5ED8B56D,
    0xDC1AAD7B, 0xB7C083FE, 0xEE220CFF, 0xF8FD5EA9, 0xFEE83B94, 0xEA3BAE83, 0xBB6EBBA6,
    0xEBEBBEEC, 0xB9F67B3B, 0x6A4991EB, 0xC4374D43, 0xBFCA48A6, 0xC888CE31, 0x499E65C0,
    0x29F5C1A5, 0x00C070A2, 0x28CA3478, 0xEE658EE4, 0xD2C8C554, 0x5F153FCC, 0x16C6319C,
    0xC771AC73, 0xCD02F0C9, 0x83ACEC3F, 0x98E8BDDF, 0x9F2D61C3, 0x99A857C0, 0xF32198FF,
    0xFCD4063F, 0x1738328F, 0xCC7EF3AC, 0xB2AC8CF4, 0x33AD0464, 0xD728A25F, 0x40A87992,
    0xCC350FF9, 0x3C2F5360, 0x0EA3ACFF, 0xD2CCFF3B, 0x75F12F89, 0xF8C232F4, 0x3FF5E399,
    0x4FFD8418, 0xBCC33B41, 0xFF68189F, 0xFFDAC163, 0xD0F6E390, 0x5D09AAE5, 0xC2D8C589,
    0xA4EABBD4, 0xBC3FCEB3, 0x658C42A0, 0xADC82707, 0x6068FF1A, 0x275CD978, 0xCBE2C1B8,
    0x8F781B36, 0xAA9D155E, 0x254DC977, 0xFCBD270B, 0xD4314D03, 0x290B83FC, 0x14467CC1,
    0x77D766E0, 0xFF0CE9C9, 0x88EACE53, 0x39B5E827, 0x7B225BA9, 0x3D1B44EB, 0xB1567861,
    0xBF267559, 0x244AD3FC, 0xDC0720BA, 0x627DF5E3, 0x24DDEA7C, 0x877EFADF, 0x27BA937E,
    0xF71ED3D0, 0xC53FB8E4, 0x9E18244A, 0xFF3A0E43, 0x390DF38C, 0x0B823A37, 0xCF25F8E9,
    0x27E8006F, 0xA9FACA08, 0x7D7CB81F, 0xFD1F3FE6, 0xAC36327E, 0x4E68FDCD, 0x4F85347F,
    0x2D087299, 0x36C708FF, 0x5E2F81C6, 0xDC1A4365, 0x1029C7F8, 0xE1290B51, 0x4C1019E7,
    0x41767EDD, 0xE2CDD4C1, 0xCFC3EF82, 0xC128362D, 0x83E2C8FA, 0x5319EBA9, 0xC9163720,
    0x232AAFED, 0x570A4509, 0x5491B5A8, 0xC898406E, 0x3440878B, 0xC315CD2F, 0x04111E1A,
    0x9FB29EA1, 0x00A3FDD7, 0xC287FC40, 0x75B51114, 0x48042DEC, 0xD296D2CC, 0x319D44C1,
    0x883F4411, 0x403E3FE2, 0x91350CC5, 0x07FC5811, 0xB118B601, 0x76F098AB, 0x304660FF,
    0x31C611A2, 0x628C9196, 0xD319A344, 0x08668FF8, 0xEC011A43, 0x41E30106, 0x83B95EC7,
    0x0590C15E, 0x2675FA32, 0x4C51F822, 0x3FE27A64, 0x2D48415E, 0x88077172, 0xAD21641C,
    0x1501C8C1, 0x303C4B48, 0xD77C0124, 0xF2587522, 0xE4C82E1F, 0xC9C0823F, 0x8BE55A2E,
    0x9F0A7C29, 0xA7CA36A0, 0xA894B299, 0xEE9257B4, 0x586DAF75, 0x4B5B79C3, 0x29662F10,
    0xE17C7FC9, 0x51045696, 0x8FF9762C, 0x7532F811, 0x089D4BF5, 0x57C8A986, 0x1C92C3FC,
    0x3B32830A, 0xE87F8035, 0x7C9E99E2, 0xF6B5280A, 0xD0E1CD94, 0xE6BC369A, 0x4DC9B30D,
    0x69C3246A, 0x92593B25, 0x5C8FF9C2, 0x7C18629C, 0xD624D1D4, 0xB12BCB59, 0x88AC1FE0,
    0x56F71167, 0xAEA67A84, 0x2798459E, 0x0FF15B25, 0x1FF33277, 0x2E680890, 0x699539A3,
    0x0B2AC78A, 0x82336004, 0xD9780D31, 0xD2EC1D87, 0xE6FE29C5, 0x8E067498, 0xE7C18882,
    0xD1C0F03F, 0xA3E14104, 0x1428FBA9, 0x92879412, 0x448FC3FE, 0x89342670, 0x81FD2107,
    0x22253591, 0x61962D06, 0x03B57A47, 0x0600FFA2, 0x1988F62C, 0x90482696, 0x54E5DA27,
    0x5848E920, 0x126E1064, 0x9EE51B93, 0xC0508B62, 0xC8CD1AA7, 0xE17E3FC6, 0x428CF60A,
    0xAA3BE487, 0xBA5AB74F, 0x264AA133, 0x7988C877, 0x6894FAC6, 0xDF69C310, 0xD30106C0,
    0x2AB556BA, 0x7D6CADC9, 0x2AE75B6B, 0xF5C6BAD7, 0x2BCD70AE, 0x404AF15D, 0x0F2278BE,
    0x27C760AF, 0x648B00F6, 0x887AB590, 0x12FF283D, 0x189A956B, 0x087D2216, 0xB37A2AC6,
    0xB632C558, 0x8BD587B2, 0x0B1B2964, 0x34A68C3F, 0x3D058583, 0xCC5A4B32, 0xA1B1369A,
    0x202D07AD, 0x240C8C11, 0x89441464, 0x211E2B83, 0xF65AD399, 0x8B59D0B6, 0x1B29A8E8,
    0x73224057, 0x1D05A173, 0xE4903318, 0xB31362C8, 0x9765EDAD, 0xF2DB5B8B, 0x9399B7C5,
    0xF1C626DC, 0x80086C8B, 0x87F906B8, 0x5B000376, 0xB421C459, 0x2AC610F6, 0xE65A562E,
    0xC32F5796, 0xC03FEF18, 0x783F8A2B, 0x08FFBB57, 0x42DF7600, 0xE2B084DF, 0x80C0BA11,
    0x9D80F8E4, 0xB8C3CC9A, 0xE52F35CD, 0xFF1530F8, 0x102A563A, 0x342F4491, 0x0484DF30,
    0x00000004, 0x00000000

  EW_BITMAPS_TABLE( Appinput_alarm )
    EW_BITMAP( Appinput_alarm, Default )
EW_END_OF_BITMAP_RES( Appinput_alarm )

/* Table with links to derived variants of the bitmap resource : 'App::input_alarm' */
EW_RES_WITHOUT_VARIANTS( Appinput_alarm )

/* Bitmap resource : 'App::input_callpoint' */
EW_DEFINE_BITMAP_RES( Appinput_callpoint )
  EW_BITMAP_FRAMES( Appinput_callpoint, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_callpoint, Default )           /* ratio 36.65 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0x441431D9, 0xAA432892, 0x2412B91C, 0x632E97CB,
    0x31791CA6, 0xC45844E3, 0xD85C461E, 0x844FA130, 0x34FE0D40, 0xAC900A28, 0xD15F1336,
    0xD98AA60B, 0x9EB1933F, 0x352A849E, 0x53ABD52A, 0x5AD55AB3, 0xADD62BB5, 0xFD72BD60,
    0xB06A362A, 0xD26F4E54, 0xCDCB3A2B, 0x834283D0, 0x68151802, 0x8E56A696, 0x4BDD9578,
    0xBFD8EFB6, 0x0606FD61, 0x593097CC, 0x1A3CBBBC, 0x6136F4DD, 0xF06C5951, 0x785C15EA,
    0x98CAE5B0, 0xCC366B29, 0x7FE22C39, 0x6C0EDD6C, 0x05D76905, 0x6DE7144F, 0x733ABCBE,
    0x5FACD767, 0xD6AAA6B7, 0x19612556, 0xC3DACA4C, 0xD96CE9D4, 0x870B63C0, 0x5477FC4D,
    0x81FF4D61, 0xCFAB23EA, 0x8D383CA7, 0x7D3E0F17, 0x5CEBF4B8, 0xC9AB1E6F, 0xD7F5BB0E,
    0xFAD108A5, 0xB2D62C37, 0x91C2E37F, 0x3DAE97FB, 0xD3EDF77B, 0x7F1F97BD, 0xF8FAFDBE,
    0xBFA7EBE1, 0x7239BEDF, 0xCCC3FCE6, 0x73FCD32F, 0xFCB5218A, 0xDE485DC3, 0x47483479,
    0xCC72A8BD, 0x0274B53F, 0x0C7E728C, 0xCE2D4C67, 0x398E73FC, 0x5FD7DCE7, 0x2895FC7E,
    0x9E2489A2, 0xE77D62A8, 0x33CFF8B4, 0x555350C2, 0x47520C3F, 0xE4922B55, 0xEA39DEC2,
    0x7C8E5878, 0x989250AE, 0xB7A57B4E, 0xFE482D1E, 0xFF92C833, 0x8AE4E25C, 0xCD07F623,
    0x6204FF94, 0x647F3FE5, 0x5996A589, 0x97A5B1FE, 0xA50984CF, 0x5388E47C, 0xD9254CCE,
    0x84291278, 0x36CFF2CC, 0x8FF378D4, 0xF3FE743C, 0xFCE2368D, 0xB6230A93, 0x109F55EC,
    0xC023FE80, 0x6010FFA0, 0x24753FE8, 0x8C370FFA, 0x2B5F698E, 0xC063FE90, 0x6004FFA4,
    0x5A97A569, 0x9BA6001A, 0x3FE9E126, 0x68EA84E5, 0x05D15D4B, 0xA6A72052, 0xABAA11EA,
    0x250AD476, 0x4E339A3A, 0xFAD4F088, 0x6CCE35CF, 0x85294FF3, 0x7D5549B8, 0xCFFB0463,
    0x13FEC40C, 0x14FFB1C2, 0x453FECA0, 0x378FFB34, 0xCE28AAD0, 0x60A4FFB4, 0x64003FED,
    0xD9B6AD8B, 0xB7ADB002, 0xC083FEDD, 0x62ACFFB8, 0x7530A8EE, 0xFFAE4D65, 0xBBABABAC,
    0x2F0BB2ED, 0xA33CD7BC, 0x84E239AB, 0xFF3CA748, 0x3FEFE3BC, 0xE1D2ECC8, 0x63A1EEAF,
    0x24C43FF0, 0x0C298FFC, 0xC3CA43FF, 0xF12174FF, 0xAC54913F, 0x7F1832A2, 0x1CB871AB,
    0xB7B1EB73, 0x0FFC842F, 0x48AB2438, 0xA4EE552A, 0xEECA4FFC, 0xCB32ACAC, 0xB30CB72E,
    0x53FCEFBF, 0xD6733C2B, 0xDA3FEFB9, 0x574DD350, 0xF4238DF5, 0xFD148D3F, 0xFF4809CF,
    0xFF0BF213, 0x3FF4E2F4, 0x717D44BF, 0xFB831DC6, 0x6B57C6F1, 0x2995E55A, 0x31527C9E,
    0x0FF334B2, 0x3D9362D8, 0x9767D876, 0xBC32768D, 0x3B0FF340, 0x3393B4EB, 0xD398E8BF,
    0x5C9F2D63, 0xC67CB048, 0x35AEDDF4, 0x8DACF0D6, 0x605B1A36, 0xA4A99EB8, 0x5832B532,
    0xE378ED5B, 0xB92104FF, 0x615694A4, 0x30A28AB9, 0xA8835287, 0x350FF9F0, 0xB36360CC,
    0xC3A8EBAD, 0x74B33FCE, 0x69860BE2, 0x0FDF5546, 0x284A0BB0, 0xB3FC3FEC, 0x48FFEDC7,
    0x033FFBA0, 0x1A0FFEF4, 0xCB83FFC0, 0x832300F0, 0x4355E40C, 0xB9F2C6DE, 0x15796EEF,
    0x1D2BA726, 0xE2D8C591, 0xA4EACC14, 0xBC3FCEB3, 0x660C42A0, 0xFE2135F5, 0xCF940B3F,
    0xA4653FE9, 0xEC2F8FFF, 0xFBC893FF, 0xFF2220FF, 0xF314C5D8, 0x23F8324F, 0x6CF2757F,
    0xE18FFFF4, 0xF3C7F816, 0x1AB9A730, 0xCB2A277D, 0x382C8A89, 0x407F8BD1, 0xC23218A3,
    0x01822905, 0xCF80A31A, 0x20C8E43D, 0x0C318679, 0x50693125, 0x16C7F802, 0x512A0846,
    0x281A88A5, 0x560447FC, 0xB81C0FF8, 0xB38F7F50, 0x01FF0C83, 0x43FE1A83, 0xA024380D,
    0x2A641A4C, 0x17E265D4, 0x244568FF, 0xD79CA174, 0xBA45C8B0, 0x6A852248, 0x3825A091,
    0x880A1FF1, 0x961AC2E2, 0x0C18FAA2, 0x8578FF1D, 0x84F1FF16, 0x03C3FE2E, 0x0547FC60,
    0x2B3E78C6, 0xD51FE205, 0x5C87A348, 0xA9E935D4, 0x88AC2A29, 0x41CE8E84, 0xE38E2C0E,
    0x8551EB1B, 0x41717023, 0x1C6D08F9, 0x08104C4B, 0x3E8FF906, 0x641FF218, 0x8E3FE448,
    0x594748C0, 0x3AA160F1, 0xD9263013, 0x8A19A7B4, 0x633B5B00, 0xB5E3FB15, 0x14C57603,
    0x384F1887, 0x9DC801B6, 0xDC1A4365, 0x12221030, 0xA4FA9644, 0xA8FF95E1, 0x21FF2C84,
    0x83FE5A8C, 0x620CB801, 0x84953CA4, 0x936C9591, 0xC90FEA28, 0x65AC91C0, 0xEE91D199,
    0xA70EDCC9, 0x34509232, 0x192599F3, 0x01FF0249, 0xE5E84C0B, 0xD7EA3F1C, 0xB8181EBF,
    0x57C20851, 0xE48FA927, 0x43A85082, 0x1A9CE1DD, 0xFF3A81A3, 0x2E768CD1, 0x54C051AA,
    0xC3D70651, 0xAB2A54A8, 0xCF449900, 0xA2145AD0, 0x73732914, 0x30466127, 0x81A021A2,
    0x02A09416, 0x1341A845, 0x48614ECA, 0xE8E11FE3, 0x41E32006, 0xA3B97ED1, 0xC590C166,
    0xBA86F6F1, 0x0489B859, 0xF99F2520, 0x71524034, 0x28154B91, 0xE5306645, 0xFC2DC233,
    0xFD300DE3, 0x8A6605C7, 0xE0ED4528, 0x21D481A6, 0xB372A340, 0xA7ACE1D1, 0x5055B540,
    0xA2B3B671, 0xD61B69D6, 0xFAD006F8, 0xFC64BF83, 0xF824A403, 0x6AA62687, 0x317C0452,
    0x8614B58C, 0x8463ED4A, 0x8923FEAE, 0x1D544C44, 0x3A554AA4, 0x1061D598, 0x9B0167F3,
    0x3A6E1279, 0x738118B0, 0xFAE15CAB, 0x2351C0D6, 0x9B83A219, 0xD7A676DC, 0x14E2E47F,
    0x8A68E41D, 0x7F8AB5CC, 0x88B0E398, 0x160D5C53, 0x38218FFB, 0x8B816FF6, 0x79187D67,
    0xE15C7F84, 0xE99BE7B2, 0x1051FE05, 0xA74292B4, 0x2A8EAC06, 0x608CD3C7, 0xED660814,
    0x74CB4760, 0x3DEF8A71, 0xFD2BA966, 0xAB663607, 0xF0962BA2, 0x0FED924C, 0x8901FF65,
    0x8A5142DE, 0x3FC1DD37, 0xCF5C40DC, 0x9E996F46, 0x68311224, 0x5C779E71, 0x6DA91FF4,
    0xB1603019, 0x2390C251, 0x4FEDB81C, 0x5B9AB724, 0xBBE0F513, 0x21A43C85, 0x460FFBC6,
    0x481FF798, 0x5971AF48, 0x89342204, 0x08B69A76, 0xD1AA85C5, 0xCD406C8C, 0x26F21315,
    0x8C932F38, 0xB6CDB85C, 0x946EE5DD, 0x028BC3E4, 0xB0161353, 0x11827038, 0xCB0460BC,
    0xB9F5B696, 0xD242E8AB, 0xA4643B89, 0x093E1841, 0x8B71102A, 0x1C236567, 0x39C740FF,
    0x12E018B0, 0xB6AB780F, 0xEC32C6AD, 0x24478ADB, 0x787913C6, 0xB13E3B05, 0x23245807,
    0xB1C49EC3, 0x9ADC7568, 0x2218DC9B, 0x2AC6087D, 0x1DC6F37C, 0x47C79917, 0x89908AE6,
    0x903F0B1C, 0x863434C6, 0x9C903D05, 0xF95724E3, 0x728998CA, 0x8901683D, 0x21206460,
    0x1C4A30A3, 0xC988F15C, 0x58C8D958, 0x2A5B106E, 0xB8CC3AD8, 0xA40D1202, 0xD0E82D0B,
    0x472C8198, 0xB3209B16, 0x667CD399, 0x2BB9A32A, 0x32A06E6F, 0x5F8E3137, 0x75004364,
    0x163FC836, 0xCB30801D, 0xB6510E22, 0x21563087, 0xBA5B3F36, 0x061927CF, 0x6911FFA5,
    0xD1E1FC51, 0xA254AE8B, 0x84EA42E1, 0xBA11E2B0, 0xF93280C0, 0xCC9B9DA0, 0xBE7FCEE3,
    0xC14070F4, 0xDAB8A887, 0x888150C7, 0x81A17A24, 0x20242751, 0x00000000

  EW_BITMAPS_TABLE( Appinput_callpoint )
    EW_BITMAP( Appinput_callpoint, Default )
EW_END_OF_BITMAP_RES( Appinput_callpoint )

/* Table with links to derived variants of the bitmap resource : 'App::input_callpoint' */
EW_RES_WITHOUT_VARIANTS( Appinput_callpoint )

/* Bitmap resource : 'App::input_fault' */
EW_DEFINE_BITMAP_RES( Appinput_fault )
  EW_BITMAP_FRAMES( Appinput_fault, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_fault, Default )               /* ratio 32.72 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0xC7BB921E, 0xA97B1D41, 0x56AFF63A, 0xFDC86027, 0xCB162EC8, 0xBF673FD9,
    0xBFCFDDAA, 0xFF7E3F5F, 0xDFD7FDFC, 0x18160280, 0x260081E0, 0x84822048, 0x779E53F5,
    0x4922B556, 0x73A4FF2E, 0x9CFF3A8E, 0xFF3A4E53, 0x620942B8, 0x4DD5E938, 0x23FCE235,
    0xA22689CF, 0x293CA278, 0x8B62B8B2, 0xE3238E30, 0x5314C43F, 0x7CDE3FCC, 0xF13FCDF3,
    0x8BE308F4, 0xA428AA40, 0x15F2288B, 0x10A47993, 0xDB3FCB32, 0x8C0DE350, 0x625368DF,
    0x22D88C2A, 0x0E3F8922, 0xF08B2599, 0x2D8FF974, 0xC653FE60, 0x611CFF98, 0xA45E3FE6,
    0x6C2A8FF9, 0x9BCEE3FE, 0x2419C65B, 0x74AA468B, 0x05205CD5, 0x1E9EE792, 0x4767D9E9,
    0xA14250AD, 0xF39CE339, 0xFCF0974F, 0xDB338D73, 0x214A53FC, 0x0DF55A4B, 0x89C8E336,
    0x2CFFA222, 0x783FE9A3, 0x114FFA74, 0x2A1A7EA0, 0x5A8845A8, 0xB4FFA92A, 0xC23FEAA1,
    0x3BCFFAB4, 0x244A5AB0, 0xF91D5E9D, 0xFE8C3594, 0xBBA36B83, 0xAF6B9AEA, 0x4CF35EBD,
    0x6388E6A3, 0xBEB08BE8, 0xBB320FF3, 0x3A9567D8, 0x2303B0EA, 0xFB54E6A6, 0xFED822CF,
    0xA6B6C513, 0xB7EA8B76, 0xEE213EA1, 0xF13EE23F, 0xFEE8134F, 0xFFBAC7D3, 0xA1EEE374,
    0x97A9CE5E, 0xE9BD53AD, 0xDA709B8E, 0xFABDEF8B, 0xBC2C9BEA, 0x0DABCA89, 0xD55CDD35,
    0xA0FF3C63, 0xA347B0A3, 0x168FF28C, 0xEA3B7B10, 0xFC52A7C4, 0xFF18120F, 0x65C6C863,
    0xA96E099E, 0x4FFC8452, 0x23FF2426, 0xD630C9CE, 0xC55592C9, 0x3FCCD2C8, 0x331CBF2D,
    0x2CD32ECC, 0xF0C9CD73, 0xEC3FCD02, 0x8C0ED3AC, 0x618398E8, 0x67C09F2D, 0xA0E339D5,
    0x4C2D0FF3, 0xC4847C77, 0x750D4715, 0xFD5475B7, 0x4F58250F, 0x463FF1FD, 0x27CFFD74,
    0x95ECA760, 0x64B5CA28, 0xFE552A1E, 0xD8330D43, 0x3ACFFC00, 0x4B33FED1, 0xD7C4BE27,
    0x96235591, 0x5ADECB08, 0xAA35BC5B, 0x36AE045F, 0x93FCD435, 0x4B7DE1C6, 0x8C272A8D,
    0xBD163D8B, 0x8C5885C1, 0xABE94C2D, 0xFCEB3A4E, 0xC42A0BC3, 0x3FF79658, 0xF892C37B,
    0xFE9449E8, 0x2BA82DCF, 0x4E35CD7A, 0xE335BE8F, 0x157E389C, 0x977B2BD9, 0x70B254DC,
    0xD03FCBD2, 0x2E385314, 0x19F304A4, 0x19639E51, 0x877EEBBA, 0xAFF2C91A, 0xF3C8DAC6,
    0x2A1E2BC8, 0x455BB2EC, 0x3E10D9BB, 0x99DCA785, 0x2B4FF2FC, 0x1C82E891, 0xFF1F9F70,
    0x1EA5F277, 0xE43FC69E, 0xB2BCDFB4, 0x0FFFC48F, 0xE3FFF420, 0xFFD1FDC4, 0x2A8BFD43,
    0x559E1F63, 0x850488AC, 0xA50E41CE, 0xE41BE38D, 0x70239358, 0xF1BD3C51, 0x53527CED,
    0xA1FF0482, 0xA3FE0A8C, 0x9F7C181D, 0xC1C1B706, 0x83E12C7F, 0x915FDBF9, 0xF327656A,
    0xB410E298, 0xB63847F8, 0x6517A951, 0xF8DC1A43, 0x511029C7, 0x50392B8B, 0x16EC1074,
    0x0FF87615, 0x5D50F83D, 0xEB1D5AEC, 0x228A545E, 0x396BCD72, 0xF8E35C5C, 0x3DB2B637,
    0x09232AA8, 0x78A71445, 0x0EDC91B7, 0x8BC89874, 0xAFF43886, 0x23C359DE, 0x53D48882,
    0x4A8D71BE, 0xA37D0F99, 0x791A82E3, 0xB87623E4, 0x88731FF1, 0x1894FE63, 0xE58E263B,
    0x07FC4F7A, 0x0D118233, 0x8FD1F23D, 0x2063DC7D, 0x7FC828FF, 0xD2184334, 0x2A376150,
    0xB957B075, 0x90C15943, 0x82AE3205, 0xEE810B8E, 0xA1CC6881, 0x23093629, 0x83EA360E,
    0xF4E3984B, 0x3BC23896, 0x4F8A313A, 0xBD2A94C1, 0xB544CAB4, 0xB24C5652, 0xF2AC8EC6,
    0xF2D86E22, 0xE5C87C1F, 0xCBC0983F, 0x97E14DD1, 0x8A221BAA, 0xFC8946B0, 0xFF090C61,
    0xFF3283A0, 0x56668D21, 0x447829EF, 0xC8BC54E5, 0x917C62BB, 0x66B4D89A, 0x8D48BF35,
    0x67ADB464, 0x38117B3F, 0x538B91FF, 0x162AE30C, 0x308BD0C2, 0x2A0AB3F8, 0x88661FE3,
    0x5550EB67, 0xE2EC7F90, 0x85D0FF9E, 0x8571FF3E, 0x6BAD4E7E, 0x1A87F846, 0x5E8FF0B9,
    0xE942B418, 0xF8BC90E0, 0x65BBCD12, 0x4C332A6F, 0x31823361, 0x905D7D8D, 0xC5D2F71D,
    0x98E73A29, 0x5E4E7CAB, 0x87284A2F, 0x810A6936, 0x168931AE, 0xF54A82AB, 0xB872B8D7,
    0xBC769614, 0x13BD0953, 0x62D06222, 0x56548E19, 0x0FFA303B, 0x9262C060, 0x96A8F998,
    0x6AC8D5E4, 0x8E1FE399, 0xC6B92A48, 0x325E2A85, 0x88821FE1, 0x51C30AAA, 0x74814C22,
    0x6994A5A8, 0x4573C2ED, 0x3E02845B, 0x364668D5, 0x570BF1FE, 0x611467B0, 0xB14C206C,
    0x422EA2CA, 0x889B6763, 0x418C3FEB, 0x755E0D57, 0x5FECB056, 0x1190EE27, 0x29F5F8F3,
    0xDB4620D1, 0xC2295526, 0x88B0C3FE, 0x1561D4A5, 0x32C2D89B, 0x8D8EB1F6, 0xDB2562EC,
    0xC5EAC9D8, 0x05787913, 0x07B13E3B, 0xAFE32458, 0x78A87BFF, 0x9A9E2B40, 0x7D22167C,
    0x7A2AC608, 0xBAD25A23, 0x55A2B5B6, 0xE1636B2D, 0x8694D187, 0xC7A0B0B3, 0xDBCB436B,
    0x3AF6C2D1, 0x2D07AD9D, 0x0C8C1120, 0x44146424, 0x1E2B8389, 0xFADF9921, 0x59E6B7B6,
    0x2A1CF0CB, 0x6240571B, 0x05A17377, 0x9033181D, 0x1362C8E4, 0x742E6DCB, 0xE7DBBB9D,
    0xBBBAC55E, 0xC626DDA3, 0x086C8BF1, 0xF906BB80, 0x80037C87, 0x01C4595C, 0xC610F6B7,
    0xDE565E2A, 0x29F792FE, 0xD7EFD8C3, 0x510F6B3A, 0xF2BEC1FC, 0xE00047FD, 0x270696FB,
    0xD08F1584, 0xC7680605, 0x64D4EC07, 0xAF35DE1E, 0x0A03657F, 0xC2E54C3E, 0x440A95A6,
    0x0D0BD124, 0x01213830, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( Appinput_fault )
    EW_BITMAP( Appinput_fault, Default )
EW_END_OF_BITMAP_RES( Appinput_fault )

/* Table with links to derived variants of the bitmap resource : 'App::input_fault' */
EW_RES_WITHOUT_VARIANTS( Appinput_fault )

/* Bitmap resource : 'App::input_routing_ack' */
EW_DEFINE_BITMAP_RES( Appinput_routing_ack )
  EW_BITMAP_FRAMES( Appinput_routing_ack, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_routing_ack, Default )         /* ratio 33.87 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0xC7BB921E, 0xA97B1D41, 0x56AFF63A, 0xFDC86027, 0x0A55BEC8, 0xAD53AAFE,
    0xFFDB81FE, 0xFEFF9C8F, 0x0E47F9FF, 0x480A0380, 0x260681E0, 0x0582E018, 0x38A07832,
    0x0B43FE10, 0xE3FCB72B, 0x509B1BC8, 0xDE794FD5, 0x248AD559, 0xCE93FCB9, 0x73FCEA39,
    0xFCE9394E, 0x88250AE3, 0x3157A4E1, 0xCFF318C3, 0x183E3438, 0xFE3836E1, 0x0838A103,
    0x8360A83A, 0xE3481E40, 0xB8E0FF38, 0xFE118E8D, 0xB4912488, 0x4C6152B8, 0xC84291E6,
    0xE352452C, 0x64F23FCD, 0xDA37CFF9, 0x230A98F0, 0xE4A5E8B6, 0xE3FE6437, 0x50FF99C6,
    0x8D3FE6A0, 0x8F2489B4, 0xE3E9C64A, 0xF9D4997F, 0xFE7805CF, 0xFF9EC663, 0x8F67E370,
    0x8E07EE03, 0x3559234B, 0x20814817, 0x8947A8AA, 0x2B51DA32, 0xCE688494, 0x03FCE738,
    0x5CFFA5CF, 0xA591CCE3, 0x55A54214, 0x9FC7EA3B, 0xD3FEA41F, 0x7CFFA9C3, 0x273FEAA2,
    0x2BA2AAB4, 0x6B29BCAE, 0x1846B4A8, 0xFEB82B2A, 0xFFAEC203, 0x3FEBE278, 0x266B0442,
    0x6ACA829A, 0x594F9420, 0xCA3FE9B3, 0xB32CD91E, 0xECFB3ECB, 0x691CCF35, 0x6695388E,
    0xEF3FCF29, 0x320FFB74, 0x157338BB, 0x53FEE432, 0xAE69B9C5, 0x07BACA49, 0x3FC6E99E,
    0x8FFBC422, 0x5BCEF417, 0xD85EBD2F, 0xFFBE2F9B, 0xAEAFE170, 0xF021AABC, 0xFC14A681,
    0x9B08040F, 0xFF416E8B, 0xA130E314, 0xCEE5591D, 0xEC4CFFC4, 0x5B14C54E, 0x1AC5F18C,
    0xA58EFB77, 0xA58B6A98, 0xD350DA96, 0xA4C155CD, 0x2C010FFC, 0xCBC023FF, 0xF320C0FF,
    0xFCD4843F, 0xBB3806CF, 0x02CBF30C, 0xCF33DCE8, 0x340D073E, 0xF05E78D0, 0xFC7EA90F,
    0x42D2C343, 0x0526ACC3, 0x3522DCFF, 0x231557C4, 0x5F0D334B, 0x56D6359D, 0xD775AD73,
    0x0BC324FF, 0xB3B0FF34, 0x6F233B4E, 0x25398E8B, 0x7C09F2D6, 0x37236556, 0xBD0EF2BC,
    0xE33FDDF3, 0x7C00341D, 0xDDB7DDEF, 0xB4DE0779, 0x729B05E0, 0xB5CA28A0, 0x602A1E64,
    0x330D43FE, 0xCF0C80D8, 0xC3A8EB3F, 0x74B33FCE, 0x117C4BE2, 0x3727E53F, 0xF80ABAAC,
    0x601B41E0, 0xA4743FFA, 0xAC14CFFE, 0xEBC1E3FF, 0xC2BCDB34, 0x6110FFEC, 0xE47C3FFB,
    0x7BD42E9E, 0xC30FF19A, 0xCCA3FF4F, 0x1B2207F0, 0xD8C58B9E, 0xEAC694C2, 0x3FCEB3A4,
    0x8C42A0BC, 0x93FF9F65, 0x34FFF5C2, 0x7A3FFDA1, 0x1E0FFF74, 0xC723FFE0, 0xD9E677F8,
    0x5E99F9C0, 0xB3E60D73, 0x137DA950, 0xFF2384FF, 0xF1AB023F, 0xF7F829CF, 0x34D2E7F9,
    0xCA6E5B7C, 0x0DC7F8C1, 0x32A5B806, 0x2C710819, 0xA6724E81, 0xF44E0B22, 0x28D01FE2,
    0x81FE3506, 0xD004520B, 0x93FBD431, 0x8FF8360C, 0x50107867, 0x0882BAB2, 0x033A61FF,
    0x281043FC, 0x44DD17D4, 0xB8458FF0, 0x941B1FF0, 0x409E3FC1, 0xB0A613C3, 0x8380FF68,
    0x8681FF0E, 0x68CF961E, 0xE1C653C3, 0xF0A1C712, 0xB351AA18, 0xFE2FC4C8, 0xE8488AD1,
    0xF1C03902, 0xB7B31486, 0x1158623D, 0x17F2A184, 0x32C68217, 0x8770E402, 0x3FE3089C,
    0x5E89C8C2, 0x9E57CAFD, 0x329D47F8, 0xB84D8FF1, 0x88971FF1, 0x41283FE3, 0xB18A31C7,
    0x9E2C781A, 0x1563C44A, 0x44224456, 0x3A0720E7, 0x018DF466, 0xB811C2A9, 0x92818CB0,
    0xB5D5C8C1, 0x14901BAE, 0x78A4A0D5, 0x214DD625, 0x64C80B68, 0x8E591AD8, 0x93A3FE4E,
    0x27A4F8E5, 0x03420941, 0xA294E399, 0x8C92A50C, 0x1C531E27, 0xDBF11682, 0x96449106,
    0xEE80690D, 0x85A88814, 0xA433FE98, 0x806A95A3, 0x1207F837, 0xDBBB5986, 0xFF98E065,
    0xFF328090, 0x080CCC71, 0x0A72788F, 0xE94B3452, 0x2E2A0420, 0x66CA852A, 0xC509B4C4,
    0x1302C0A9, 0x8A513979, 0x62C1063C, 0x8223C358, 0x9453D4F8, 0xFC70BF24, 0xFCF019C3,
    0xF9E63347, 0xF07A78CE, 0x20FC1D19, 0xAC69F634, 0x9FD34939, 0x35920CD4, 0x660FF88B,
    0x051A2304, 0x1142683D, 0x2A86506A, 0x14F2A1B4, 0xD7E23486, 0xE3C5220D, 0xC772DCA2,
    0x0B2182C7, 0x9A655C64, 0x48680520, 0x80D249FF, 0x4F81310E, 0x54E4D4B9, 0xB296B92A,
    0xD321A5F4, 0xB644C892, 0xE37C6B0D, 0x69CD22A3, 0x526A4749, 0x88901E9E, 0x044A7A85,
    0x72D439CF, 0x469CD512, 0x92352A4D, 0xA1B33911, 0xFD4E644D, 0x314E2E47, 0x54EE9C0C,
    0xAAC53DA7, 0xD03A014F, 0x29F11AA0, 0x336584B8, 0x8D8D3182, 0xEC1DA3FD, 0x4E2E98B8,
    0x5A0C3D31, 0x8D57AB65, 0x3AE5566B, 0xC6B2564D, 0xC5A0C445, 0x31FA3232, 0x180C5EB4,
    0x6628F0B0, 0xB82834C8, 0x86B0F5CE, 0xECA85035, 0xFE059C0A, 0x80A116C3, 0x919A354F,
    0xC2FC7F8D, 0x4519EC15, 0x8BB32D3A, 0x97A5E45C, 0x68AAD589, 0x25CEDA4B, 0xB817C3FD,
    0x3A486008, 0x988C8771, 0x594FB5E7, 0x7A102F86, 0xD108620C, 0x29B8DC1B, 0x588B4768,
    0x17A81ADE, 0x252008B3, 0x5E8A20E8, 0xEC15E1E5, 0x601EC4F8, 0x7ED80C91, 0xEC7CB9F5,
    0x52C77490, 0xA442E693, 0x4558C10F, 0x5D1BA66F, 0xBBB73AE8, 0x76EEC97A, 0xD187E163,
    0xB0B94694, 0xD777C7A0, 0x1EF65DCB, 0xA0F5B96F, 0x91822405, 0x828C8481, 0xC5707128,
    0xDED32423, 0xBB977AFE, 0x510CF96B, 0x480AE382, 0xB42E703C, 0x066303A0, 0x6C591C92,
    0xFDFCBF42, 0xEBC184AF, 0xF814ABDE, 0xC4DC0881, 0x0D917E38, 0x20D82C01, 0x007108FF,
    0x388B2BEE, 0xC21ED7A0, 0x2AD60558, 0x5EFF62CC, 0x4E2A1865, 0x21ED72D5, 0x38943F8A,
    0xC008FFC4, 0xE3C2DF87, 0x11E2B084, 0x0200C0BA, 0x9A9D80F9, 0x14C1A3CC, 0xF902B176,
    0x57231530, 0x91102A57, 0xB0342F44, 0x040484E3, 0x00000000

  EW_BITMAPS_TABLE( Appinput_routing_ack )
    EW_BITMAP( Appinput_routing_ack, Default )
EW_END_OF_BITMAP_RES( Appinput_routing_ack )

/* Table with links to derived variants of the bitmap resource : 'App::input_routing_ack' */
EW_RES_WITHOUT_VARIANTS( Appinput_routing_ack )

/* Bitmap resource : 'App::input_silence' */
EW_DEFINE_BITMAP_RES( Appinput_silence )
  EW_BITMAP_FRAMES( Appinput_silence, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_silence, Default )             /* ratio 30.94 % */
    0x0408C100, 0xC10C1020, 0xC4010581, 0xC2CBE492, 0xF6B13EA7, 0x8AF3D27C, 0xAE3C2758,
    0x23F28DD8, 0x8EC6DFEB, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x1138CC5D, 0x1187B116, 0xC84C3617, 0x834FA113, 0x028A0D3D, 0xC4CDAB24, 0xA982F457,
    0x142FF662, 0x9D4FA6C4, 0x553A82C6, 0x56ABD52A, 0x5ADD46B3, 0xAF562B95, 0xFD8ABB5A,
    0x2A58363A, 0x0DE935A6, 0xE826E59D, 0x013FA041, 0x4B340A8C, 0xBC472B53, 0xBB0DEAC8,
    0xB1DFAC17, 0xEDFF037C, 0xDDF0780B, 0x6E891E5D, 0xA8709B72, 0xF377362C, 0x994C2E0A,
    0x97C9E5B0, 0xECDE6307, 0xB5BFF0F5, 0x82B6076D, 0x2782EBB4, 0x5738F38A, 0xB5799D56,
    0x63AED7E6, 0xAB6B4E5B, 0x4E0CB092, 0xCA51ED65, 0xD86FB594, 0x96FF83AD, 0xD2D85ACD,
    0xC8FAA07F, 0x8F29F3EA, 0x81C2E1CD, 0xBD2E9F43, 0xC79AE57A, 0x4EA3B266, 0xEEF47ADC,
    0xD5EBBFE0, 0xC7BB921E, 0xA97B1D41, 0x56AFF63A, 0xFDC86027, 0xCB162EC8, 0xBF673FD9,
    0xC76BFDAA, 0xFE7F7F7F, 0x2017F8ED, 0x48160280, 0x25FF81E0, 0x0682A038, 0x58604832,
    0x9DE794FD, 0x9248AD55, 0x9CE93FCB, 0xE73FCEA3, 0x3FCE9394, 0x188250AE, 0x53757A4E,
    0xC8FF388D, 0x0B8362A3, 0x8BE2C8B6, 0x0FF8C4E7, 0x88BE3432, 0x16378BA0, 0xE64C5568,
    0x2CC84291, 0x8D436CFF, 0xF8AE2937, 0xA628368D, 0x252D88C2, 0x3CA4589E, 0xA5283A36,
    0xF954808B, 0xFE58004F, 0xFF96C643, 0x9465E390, 0xA3B83238, 0x05CD574A, 0xA6672052,
    0x6B9A11E9, 0x250AD476, 0xCE339A17, 0x63C0FF39, 0x38D73FE7, 0xA53FCDB3, 0x55A40214,
    0xCE3360DF, 0x9A166093, 0xFE881E23, 0x8AA2C003, 0xA3C22A32, 0xA922DCFF, 0xC53E62A1,
    0xE8D653E3, 0x7BA64FF9, 0xA6A9BA72, 0xCD7A7A9E, 0x239A7B33, 0x422A9D0E, 0x33AACEF9,
    0x559F62EE, 0x0EC3A8EA, 0x3AD639A1, 0xE2888165, 0xBB0028D1, 0xAFC03AF6, 0x2C21BCFF,
    0x1ADA3287, 0x592C98E0, 0xFFB2CEE5, 0xB34EEB2C, 0xED0B3ACC, 0xFAAED2B3, 0xA6779D4E,
    0xD436A84A, 0xB1957374, 0x62E98694, 0xCA2EBDAE, 0x32E5B9AB, 0xFFBAC2AA, 0x8BEEE300,
    0x5564B6C8, 0xF334B231, 0xE2F6BD0F, 0xFBBD6F7B, 0x326FCBE6, 0x0FF340BC, 0xA804EB3B,
    0x6CE63A2D, 0xF027CB58, 0xC3C97559, 0x712330FF, 0x636E05B8, 0x64883FF1, 0xE8A26B8C,
    0xC7A8CC76, 0xC1BA32E7, 0x62ACFFC8, 0xA4193FF2, 0xCA28957C, 0x53E13BC9, 0x0FF92CA8,
    0x8360CC35, 0xACFF3C2D, 0xB33FEB23, 0x7C4BE274, 0xC675591D, 0xBCAB28D0, 0x5A85D1CC,
    0x4C0B27BC, 0xD3C493FF, 0x21F3A618, 0x1BA720B9, 0x6745D5F2, 0x5C290FF0, 0x84AF1AF7,
    0x8C5891E1, 0xAB494C2D, 0xFCEB3A4E, 0xC42A0BC3, 0xDBCEC658, 0xF721A0FF, 0xFDD4183F,
    0x5778324F, 0x7C0AF17C, 0xDFC4A3FF, 0xF823A0FF, 0x6D56BAC6, 0xA68CC7F8, 0xA4D735AC,
    0xCB14FD78, 0xDC977AC9, 0xD270B254, 0x14D03FCB, 0xB83FCD43, 0x67CC1290, 0xE0465944,
    0x61AEB3DB, 0xA4173FFA, 0xAC2D0FFE, 0x0AAEB3FF, 0x7B2130FF, 0xCA1F83E0, 0x1F58E231,
    0x5BE2ABCE, 0x55AE8D77, 0xDE1CBB90, 0x92CE6C8E, 0xB4FF2FC9, 0xC82E8912, 0x96EE0701,
    0xC46AF464, 0x087F51F4, 0x5BB8D52E, 0x8CEF3DAD, 0xA5D53E3B, 0x4AC53FC3, 0x439E1724,
    0x8CFF3A0E, 0xFF390DF3, 0x2E08E2A8, 0xCD7833A2, 0x609CFFFC, 0xE4263FFF, 0xFC054FFF,
    0x314C5BDF, 0xEE5EC285, 0xEE3557B2, 0x5F518EF9, 0x4C79891B, 0xFC5A0871, 0x18DB1C23,
    0x21B2B694, 0xE3FC6E0D, 0x85A88814, 0x8D64085E, 0x04A3FE0E, 0x1487FC20, 0x7FBD5846,
    0xFF84E1C4, 0xFF0A80A0, 0xBE168C41, 0xD3DA8048, 0xD77AD65D, 0xAE3DDFB8, 0x8A6B6065,
    0x34187702, 0x2A6F361E, 0x5E44C0B0, 0x6B21F43A, 0xD618AE61, 0xFE2088F0, 0x386A94F4,
    0x88241FF1, 0x40A83FE2, 0x68E612C5, 0xE14C580E, 0x45C1850A, 0x8090C5C2, 0x1880D3D9,
    0xD4B2764B, 0x3865605D, 0x9853E054, 0x44688C11, 0x746F8DAC, 0x08E51B23, 0xA3FE39C7,
    0xC690C219, 0xA831BB03, 0x1FF1F878, 0xB5C770EF, 0x640B2182, 0x8807E55C, 0x161587FC,
    0x115BC569, 0xFC900EA8, 0x59260847, 0x10CA1842, 0x64C8295D, 0x2395DEBB, 0x6831A5E0,
    0xCE13B14F, 0x52B37944, 0xD994F292, 0xB4B6915A, 0x7C6B0DB5, 0x4C1D2AE3, 0x0436AC62,
    0xE351702E, 0xE1945E96, 0xAC1006AF, 0x4E88C561, 0xE464F2E0, 0x24B992A6, 0xC688F316,
    0x97322244, 0xD8648D49, 0x5B06608C, 0x91FF3411, 0xE30C538B, 0x90DA192A, 0x48E96AB6,
    0x51D25906, 0x2DD49290, 0x1BA0F628, 0x183C530E, 0x82336074, 0xED698D31, 0xD2CF1D87,
    0xE6DA29C5, 0x0898AB98, 0xA6ECDB45, 0x87F45EB8, 0x4B295E7E, 0x38DF4BD0, 0x7DCDC506,
    0x61941026, 0x68310A7B, 0x0A400CB1, 0x02CF9DF2, 0x890C2C06, 0x4AD27B99, 0x8733149F,
    0x8C71FF46, 0xA313928E, 0xE4CF1507, 0x508B61FE, 0xCD1AA7C0, 0x7E3FC6C8, 0x8CF60AE1,
    0xB1968962, 0x59F73E68, 0x14D28FD0, 0x491A96A4, 0x1190EE27, 0x29F4F8F3, 0xCD8620D1,
    0xA2283502, 0x48A8C3FE, 0x9551D415, 0x32A2D49A, 0x8D4EA9F5, 0xDAA552EA, 0xC5EAA9D4,
    0x05787913, 0x07B13E3B, 0xA7E32458, 0x78AB0BE1, 0x9A9E2AC0, 0x7D22157C, 0x7A2AC608,
    0x92B132F3, 0xBD6DADF5, 0x1AD95A8A, 0xA68C3F0B, 0x05855C34, 0xD6EAE03D, 0xACB5F2B8,
    0x2D07AD5D, 0x0C8C1120, 0x44146424, 0x1E2B8389, 0x3ABF1921, 0x5D62AFB6, 0x6A10E80B,
    0xE2405719, 0x05A17372, 0x9033181D, 0x1362C8E4, 0x642C6D8B, 0xD258FAC7, 0x97B2C6CA,
    0xC626DC83, 0x086C8BF1, 0xF906B380, 0x80036C87, 0x21C45958, 0xC610F6AF, 0xD7F5EC2A,
    0x2AD696DE, 0x3FEDD8C3, 0x3F8A2B70, 0x57B656D8, 0x965BED82, 0x3C56109B, 0x80181742,
    0x53B01F1C, 0xD6787993, 0x0F35D8B4, 0x9530F828, 0x2A559AEA, 0x2F449110, 0x84DCA034,
    0x00000404, 0x00000000

  EW_BITMAPS_TABLE( Appinput_silence )
    EW_BITMAP( Appinput_silence, Default )
EW_END_OF_BITMAP_RES( Appinput_silence )

/* Table with links to derived variants of the bitmap resource : 'App::input_silence' */
EW_RES_WITHOUT_VARIANTS( Appinput_silence )

/* Bitmap resource : 'App::output_alarm' */
EW_DEFINE_BITMAP_RES( Appoutput_alarm )
  EW_BITMAP_FRAMES( Appoutput_alarm, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutput_alarm, Default )              /* ratio 32.25 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0x1F5BC3DE, 0x46A3132F, 0x761F9693, 0xD3AC0544, 0x98C75A3F, 0x0835924A, 0xF876D47B,
    0xA76FE1FF, 0xFEFEFF3F, 0x6027FDFC, 0xF814DB7E, 0xFE082C0F, 0x0036E053, 0x80603836,
    0x210845FE, 0x73F5987F, 0xFD385712, 0x942ECA13, 0x3A4E73FC, 0x8E83FCE5, 0xE3FCE73A,
    0xD8922E49, 0x0E83D577, 0x7F22D84A, 0xCFF8C4AD, 0x03FE3402, 0x28FF8DC0, 0xAA3FE3A0,
    0x8FE2F8F4, 0x9947FE2C, 0x6265604A, 0x74FF230B, 0xFF368E23, 0x3FE4E3C8, 0xCD4378D7,
    0x42CC933F, 0x054E8A88, 0xFC96A2E9, 0x3FE5E0B1, 0x8FF9843C, 0xD3FE6431, 0xACFF99C3,
    0x5B9026A0, 0x5EE149B6, 0x65555E44, 0xB348FF21, 0xC0FF338D, 0xE43FE7A3, 0x3FCE339C,
    0xE1D2E4A0, 0x43FC8150, 0x14B2A1A8, 0x89A2E87A, 0x37E2E7DE, 0xC4B3FE90, 0x6098FFA4,
    0x5A97A569, 0x033FC26A, 0x050FFA74, 0x29BA62A0, 0xEA7014A8, 0xA6A2A6A9, 0xFFAAC4AA,
    0x8FEAE378, 0x54E4C243, 0xF2ECCE30, 0x36B83BCF, 0xE738E4F9, 0x34CFF388, 0xEBF33CDB,
    0x09E2C39D, 0x1EC4B1AC, 0x13A3AC5B, 0xB3C853FE, 0xED201CFF, 0xFB54693F, 0x5ED81ACF,
    0x6BB62D9B, 0xB72DDB68, 0x2E0B86DE, 0xFB946AB8, 0xFEE8020F, 0xB0BAC833, 0x542B29C2,
    0xA53374D7, 0x5AE8F293, 0xDCF09EAF, 0xFC3BAB9A, 0x3BAFC3FE, 0x6FFBF6FE, 0xBC0F00C0,
    0x24A48BA2, 0x888E236C, 0xB366CC34, 0xC8A8FE5C, 0xF0030BC4, 0xB71828CF, 0x4E9C57DB,
    0x27CC02A9, 0x8E63AA22, 0xD3B0FFBD, 0x0CFF3ACE, 0xFF2F0D03, 0x2C8CD2E8, 0x331CBF2D,
    0x2CD32ECC, 0xFECCCD73, 0xFFCEC668, 0x3FF3E018, 0xF0FD04CA, 0x6331FFD0, 0x92D3B474,
    0x43D0F4A1, 0x541E855A, 0x8BE7AD43, 0xA3B0EB7B, 0x427B9E4E, 0xFF330D83, 0x96247268,
    0xCE6C4550, 0x6060FFD8, 0x11053FF6, 0x628366ED, 0x058FFDB4, 0x0E49F370, 0xEBBB4C39,
    0x10B06592, 0xEA3FCA83, 0xC10E93AC, 0x8CC2F4FF, 0x2864FF2D, 0x95FFC45D, 0x1A3FC6AB,
    0xC436AE34, 0x39206E2E, 0x9E22D6B5, 0x1377D35F, 0xAD3FD8F6, 0x3FCA4304, 0xCC5350C9,
    0xC2F4A73F, 0x888E3FC9, 0x973FF8F7, 0x3FF15EB4, 0xFABEC4E5, 0x7C8F637F, 0xE496C5A3,
    0x17E63ABE, 0x543A9612, 0xC912E89E, 0x92FCA53F, 0x8285A209, 0xFFDAF617, 0xEBFCE27D,
    0x7B3F44DD, 0xF37E907E, 0xEFD827BA, 0x60EF776E, 0x5E4B8271, 0x7D6390E0, 0x7DD0E839,
    0x37CAF0E2, 0xFF377D18, 0x837EE004, 0xFAFFC4A0, 0xB7F3D382, 0xFFD9F5FE, 0xDA3FFB77,
    0xAC60DFF4, 0x258A8B99, 0x7F88816A, 0xD21B8354, 0xC6375920, 0xD04AA0C1, 0x6B6010E2,
    0xF82633D0, 0xE2ECFFBA, 0x859BAF82, 0x8FF7EB06, 0x82B0785B, 0x088591F9, 0xAE34675F,
    0x4E4E0909, 0x24538903, 0xFC410B31, 0x18D61963, 0xE1DEAE1D, 0x83FD1021, 0x04C0BC14,
    0x98A29CEA, 0x70B0F48E, 0x5FA1F923, 0x02B64768, 0x131FF118, 0xD63FC453, 0x847FC4C1,
    0x126089E0, 0x38A63A53, 0xEDFE29B4, 0xC7FC5807, 0x0FF8B607, 0x1183FE2B, 0x0107FC60,
    0xA931A8C6, 0xB98026F0, 0xDCCC0640, 0xC5800EF1, 0xF8FF8DE3, 0x77D838C6, 0x6308690C,
    0x0608D14C, 0x8C68F51E, 0x8FF1EE3C, 0xC1DD1C30, 0x4284459A, 0x5E4D69A6, 0xC522857C,
    0x381DC648, 0x7C8A1FF2, 0x41AC3FC5, 0x282503C9, 0x24603C4C, 0x23273801, 0x1FF27875,
    0x3FE5082E, 0x32CA4082, 0xDC8CE58A, 0xAC37C6D3, 0x917A3241, 0xCB585F0C, 0xB9672C17,
    0x32065827, 0x85E1FF67, 0x8FF9352E, 0x8BB2F82F, 0x30858C54, 0x628231FF, 0xFB7F6EBE,
    0x21328113, 0x5E4F48B9, 0x34D00C2D, 0xA65A00D5, 0x92985D0B, 0xDA7CA82A, 0x8C31623F,
    0x64EC9453, 0xCA193324, 0x648D819A, 0xE78630BC, 0xD72DDD1C, 0x0E5BCE89, 0x889347F2,
    0xC4BD2F27, 0xE2B07F82, 0x626C4B9E, 0xBAF9F611, 0x9F21167D, 0x2B518B28, 0x694F41FE,
    0x90120A1A, 0x58DFE600, 0x6E6D3BC4, 0xF0C4162E, 0xC1DC3B66, 0x631DC00E, 0x60747A1A,
    0x3967D301, 0x56D05CFE, 0x1E07FCFE, 0x2820DA46, 0x2675F498, 0xF2834285, 0x147FD2C0,
    0xB4D40892, 0xC2C34766, 0x02E0C231, 0x0FD0B019, 0xC6D5FD45, 0x1962EC7F, 0xEA9C28B4,
    0x2F1FFA66, 0xB19848B2, 0x11266288, 0x32A25394, 0xD3DB72EF, 0xE8585FA6, 0xC31C5B42,
    0x4688FF15, 0x8FF19A36, 0x14230055, 0x3BCF243B, 0xB2B90A9D, 0x00A67072, 0xEE2B8444,
    0xAAB11DD0, 0xC0CB2FCE, 0xC1FE3106, 0x8360718D, 0xEBC576AE, 0xD7BAEB5D, 0xAF55F2BC,
    0x60ABFD80, 0xBED84AFD, 0x85B0361A, 0xF244CB05, 0xC0460EC0, 0x48C90F62, 0x4ADF649F,
    0x2792B759, 0x4885912D, 0x8CC16C1F, 0xB2704455, 0x656CFD96, 0xCF59C2A3, 0xA40FC556,
    0xF7638D31, 0x8AD00F40, 0x4DAEB436, 0xD1EB6ADF, 0x22406089, 0x0C510903, 0x9770E220,
    0xB7F6BC47, 0x684CB5B1, 0xD9880510, 0x0917A27C, 0x022D0495, 0x0CC68741, 0xE89B3964,
    0x1B47702D, 0xE53AD85C, 0x48DD09B8, 0x8BF1361F, 0x00432471, 0x3FC835CE, 0xDD001BC6,
    0xF6B561C6, 0x4C3345B0, 0x5AF6DD4B, 0x58B53657, 0x6B1F17EF, 0x21FCC50F, 0x5F6DE30E,
    0xDFC2E178, 0x17427484, 0x7680C08F, 0xB49DA0F9, 0xD33963CC, 0xF874EF7D, 0xCC9B1680,
    0xE955B303, 0x217A2783, 0x37EC0D09, 0x00010121, 0x00000000

  EW_BITMAPS_TABLE( Appoutput_alarm )
    EW_BITMAP( Appoutput_alarm, Default )
EW_END_OF_BITMAP_RES( Appoutput_alarm )

/* Table with links to derived variants of the bitmap resource : 'App::output_alarm' */
EW_RES_WITHOUT_VARIANTS( Appoutput_alarm )

/* Bitmap resource : 'App::output_fault' */
EW_DEFINE_BITMAP_RES( Appoutput_fault )
  EW_BITMAP_FRAMES( Appoutput_fault, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutput_fault, Default )              /* ratio 32.64 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0x1F5BC3DE, 0x46A3132F, 0x761F9693, 0xD3AC0544, 0x98C75A3F, 0x0835924A, 0xCE5D547B,
    0x5633FD62, 0xFEFED7ED, 0x9FC7F9FF, 0x180E0080, 0x260681E0, 0x0482E058, 0x83208836,
    0x1273F57F, 0x13FD3857, 0xFC942ECA, 0xE53A4E73, 0x3A8E83FC, 0x49E3FCE7, 0x77D8922E,
    0x54E23695, 0x2C3C8FF3, 0x8B22D8AE, 0x2318B8F2, 0x38D6328C, 0x10FF8DCE, 0xFF314C53,
    0x37CDF378, 0x6423C4FF, 0xF916348D, 0xB63391E2, 0x604A9948, 0x230B6265, 0x8E2374FF,
    0xE35E3536, 0x4CFF350D, 0x26210B32, 0x8AA2853A, 0x66292646, 0xF994F08D, 0xFE682D8F,
    0xFF9AC653, 0x3FE6E11C, 0x8FF9C45E, 0xE3FE742A, 0x22449DCE, 0x4B98E799, 0x9694E4C2,
    0xCD23FC85, 0x53FCCE36, 0x90FF3C26, 0xFF38CE73, 0x864B9280, 0x4FF20543, 0x22CA93A4,
    0x5A98A529, 0x7B97D51A, 0x32E66992, 0xC783FEA0, 0x6114FFA8, 0x9AA7A96A, 0xABAA045A,
    0x1B4FFAAA, 0xCC23FEB0, 0x63BCFFAC, 0x8661A76B, 0xC155E4C5, 0xAD4BB338, 0xCE38D2B7,
    0x33FCE239, 0x18CF36CD, 0x85B2A84B, 0xB2ECDB1E, 0x69BB32CE, 0x6A229E8A, 0x2D68B5CE,
    0x513FC8B2, 0xB7EACB74, 0xEA7B86AE, 0x43FEE413, 0x34FF13EE, 0xCC3FEEA1, 0xBBCDD541,
    0x6B999A86, 0x75392E9F, 0xE658374D, 0xEFB0287A, 0x9DE789D8, 0x301BF8EE, 0x7C1702C0,
    0x24E8B522, 0x0C28CFFC, 0xC3C5A3FF, 0x712AA6E0, 0x83FF13AB, 0x18FFC5C4, 0x6F9B71A2,
    0x14AABB8A, 0xC993FF20, 0x6388FFC8, 0x4EF48D72, 0xC02A9508, 0x3AA1E27C, 0x4EC8D4E6,
    0x33FCEB3B, 0xFCBC340C, 0xB2334BA3, 0xCFB3CCE8, 0xF41CEF3D, 0xAB4F42CF, 0x73482D22,
    0x14C4447C, 0xB7F4CD37, 0x0FFD4475, 0xED3F5425, 0x64463FF1, 0x5C27CFFD, 0x6F17BCA3,
    0xD43542F5, 0xB7B8BE7A, 0xC4EA3B0E, 0xD834288B, 0x268FF330, 0x1509764F, 0x6DD4B0A7,
    0xBB57C575, 0xFFDEC5FA, 0x3FF7E350, 0xB77E0469, 0x6272AED3, 0xED7DD7B8, 0xC42C196A,
    0x3A8FF2A0, 0x7053A4EB, 0xF2D8CC2F, 0xD1D2854F, 0x78DE776D, 0xE7C49C57, 0xFA22DCFF,
    0xAE94D73F, 0x1B4FE0F4, 0x52E209CE, 0x5832AD81, 0x4AD3FD8F, 0x93FCA430, 0x9E3C350C,
    0x8EEACBD2, 0xE68FF788, 0xF9CEA0B0, 0xCF1491AA, 0x348D47AF, 0xABE77C22, 0x58BACEAA,
    0x5847A3AE, 0xA27950EF, 0x94FF244B, 0x95264BF2, 0xDCDE0A4A, 0xFC1DD6D4, 0x9E074FF0,
    0x90E4A246, 0xEC23FC73, 0xFBC803FF, 0xFF2138FF, 0x4E1FCDF2, 0x83D2CA63, 0x792E09C5,
    0x900E4381, 0xFA8740E5, 0xEFBD8446, 0x9B7C2EFD, 0x94B7DE63, 0x287FC0C0, 0x68FF81E3,
    0x678F0487, 0xE36D7EAB, 0x8258FF82, 0x0FF7E906, 0x6BEFDDE7, 0x258AFA7E, 0x7F88816A,
    0xD21B8354, 0xC63751A8, 0x547F8DB1, 0x90871682, 0x245501DB, 0xE1520E3E, 0x83D0FF86,
    0x1CC5D90E, 0x468E99D2, 0xD62208A5, 0xC2BE46B4, 0x5F494FD9, 0x24FE4AB3, 0xFC410B31,
    0xE0D61963, 0xC4350551, 0x82907FA1, 0x07F89817, 0x12372EF5, 0x8BC474C5, 0x5709045C,
    0xABC1C780, 0x418CE171, 0xD63B121A, 0xB8398FF8, 0xF2A78CB1, 0xA7131220, 0x25423144,
    0x99E8C817, 0x3011DE3B, 0x1FE3C521, 0x374718DF, 0x690C71FE, 0xD13F6308, 0x15220608,
    0x2E448C69, 0xE45091F2, 0x9868C1D1, 0xD029C240, 0x64C8A655, 0x42D82E8D, 0x8E012E0D,
    0x07DD5BF5, 0xDFB618E9, 0xB81AC37D, 0x56BED16A, 0x22562669, 0x34915F6A, 0x41B83FDA,
    0xE1F07FCB, 0x8260FF96, 0x8537512E, 0x1AF0FA5E, 0x865AA235, 0x8BAA788A, 0x741FE121,
    0xA4A0A648, 0xB651C291, 0x89518EAE, 0xF14E30C5, 0x8CD5998F, 0x47FCD646, 0x8C91B033,
    0x9BD14627, 0x38A58A3C, 0x49CB19BF, 0xED8248D6, 0xCD042070, 0xB9D3CEC0, 0xD8FF20AA,
    0xA6753C85, 0xE3FC5D0B, 0x5A7CF80A, 0x8FF08CD6, 0x1FE17233, 0x3FE808BD, 0x4ED041D2,
    0x579A092D, 0x882C5D89, 0xB876CD41, 0x3B051D83, 0xF91434C6, 0x901A12C2, 0x11A2B953,
    0x49972541, 0x8D13F453, 0x155A74C4, 0xC3C1DA46, 0xA9A4E395, 0x4B0813E4, 0x205C17E9,
    0x850E7823, 0xB6031EE8, 0xE2D0658B, 0xA8C3BE72, 0xC7E5729E, 0x662B5C7F, 0xB9AA088E,
    0x5D2AE5CA, 0x821FE132, 0xC23FEA48, 0xED628E11, 0x9D3BA32B, 0x0842EB63, 0xD13A2616,
    0xC570C716, 0x8D91A23F, 0x1563FC66, 0x168508C0, 0xA82D4A73, 0x5357298E, 0xFF5A8684,
    0xEEB689B1, 0x38C618C7, 0xFA53599E, 0x048CAA3C, 0x43B8AE11, 0x4063C877, 0x1B032CBF,
    0x38E598C4, 0xC25821B0, 0x85B06372, 0x0D61EC4D, 0x2AC5D88B, 0x6590B1B6, 0x3B1F64AC,
    0x65FAC759, 0x07607922, 0x87B16023, 0x77D5F464, 0x682BE59F, 0xCF1693AF, 0xB60FA442,
    0x642AC660, 0x8ED65A18, 0x495FB456, 0xE2AB6AED, 0x6698D207, 0x47A07BB3, 0x5AFB776B,
    0xB70792D7, 0x3044E8F5, 0x84819120, 0x71100628, 0x7C23CBB8, 0x12DE5CCB, 0x02953426,
    0xD13E6CC4, 0x43FC480B, 0x0408B412, 0x90331A1D, 0xB9426CE5, 0x73ADEDCD, 0xEB5D4865,
    0x9B0FA46E, 0x9238C5F8, 0x1AEE0021, 0x0DF01FE4, 0x80E371C0, 0xA2D87B5B, 0xAF15B319,
    0x9B3B617E, 0x1FF7E05A, 0x1FCC55F5, 0x7FDF00E2, 0x70BDC004, 0x3A427049, 0x60478BA1,
    0xD07CBCE0, 0xB1E65A4E, 0x17F2F09C, 0x8B407C3C, 0xDA51E64D, 0x13C1F4AA, 0x068490BD,
    0x80909C10, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( Appoutput_fault )
    EW_BITMAP( Appoutput_fault, Default )
EW_END_OF_BITMAP_RES( Appoutput_fault )

/* Table with links to derived variants of the bitmap resource : 'App::output_fault' */
EW_RES_WITHOUT_VARIANTS( Appoutput_fault )

/* Bitmap resource : 'App::output_fire' */
EW_DEFINE_BITMAP_RES( Appoutput_fire )
  EW_BITMAP_FRAMES( Appoutput_fire, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutput_fire, Default )               /* ratio 35.19 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0xFAC51D96, 0x2D92CFF3, 0xD531B344, 0x128FF45A, 0x6491F62A, 0x08C7FA0D, 0xDCC27596,
    0xD87E5A4F, 0x4EB01511, 0x0C72D0FF, 0x87C89253, 0x38BA545D, 0xC63FCB13, 0x830BF354,
    0x8C43FE0E, 0xF804BD34, 0xF8FF2BCB, 0xFF1EC821, 0x2DCCB2F4, 0xA0D83E10, 0x188E1188,
    0xD0AC3FE2, 0x413FCA82, 0x3FC41108, 0xCA52C8A9, 0xC344C23F, 0x9A2689CB, 0xFA3F5988,
    0x3FD3857D, 0xC942ECA1, 0x53A4E73F, 0xA8E83FCE, 0x9E3FCE73, 0x81C922E4, 0x4E236957,
    0x63C8FF35, 0x64F03FE5, 0x5C324FF9, 0x97C573FE, 0xE621DCFF, 0x5994E93F, 0xCA5695E5,
    0x699AA673, 0x3B8FF9AE, 0xC2E3FE70, 0x60E8FF9C, 0xE49D3FE7, 0x7C3ACFF9, 0x6526D9BA,
    0x8995812A, 0xD3FC8C2D, 0xB8DA388D, 0xD4378D79, 0x2CC933FC, 0x94E94084, 0x49B65494,
    0xA0FFA5CE, 0x2B3FE9A1, 0x184FFA74, 0xCE7912A0, 0x8A966D92, 0xBE6AA9E6, 0x353FEAA3,
    0xA7A9CAB4, 0x0FFAC445, 0x13FEB42F, 0x026EADCF, 0x8F53930A, 0x348FF216, 0xA58338DB,
    0x339CE496, 0xE4A03FCE, 0x8150E432, 0xB3ACC3FC, 0xECFB34B2, 0x4546D1B4, 0x64C59BA9,
    0xDB0AEAFB, 0xB7C333FE, 0xEE2330FF, 0x43BEAA3F, 0xB2A699A6, 0xEC382579, 0xB729DB76,
    0x4894CAEF, 0x63B0FF22, 0x057BAE6F, 0xCE30557A, 0xAAEE42EC, 0x8E738E6D, 0xB34CFF38,
    0x070533CD, 0x06B0B09B, 0xC370AC33, 0xE53B5B0B, 0x47B4F0B0, 0x66F190C9, 0x1C19A9EC,
    0xC7CEA3FF, 0x8C230A34, 0x6796A89F, 0x7AEE2589, 0x68A6AF1A, 0x392973FC, 0xAFA5F6F8,
    0xD374D753, 0xFF14BA68, 0xEE9C2E6B, 0xCF2719BC, 0x340CF73E, 0x5C4E51D0, 0x247F3FEE,
    0x2ABC329D, 0xD3CAAA7B, 0x4C631A0C, 0xFD54B9CE, 0xB35835CF, 0x1A8BC418, 0x18EDCD33,
    0xCE33FF60, 0x354B31D8, 0x00AA5433, 0xEA9209F3, 0x3B26E398, 0xCFF3ACED, 0xA8DCD030,
    0xFCB2334B, 0x7BDE7773, 0xDFB78DEB, 0x345DFF7C, 0x62374795, 0x7F88D2F8, 0xE63FC33B,
    0x32CFFE34, 0xC4D3FF90, 0xC2B228E4, 0x64323FCA, 0x78BC788E, 0x3A248E74, 0x162D94E8,
    0x35392E6F, 0x00BE7F54, 0xEA3B0EB8, 0x360D0CE4, 0x09A3FCCC, 0x754292A1, 0xFCF1ADED,
    0x9BEECAE3, 0xE2ADCD37, 0x34FC831E, 0x60C2F153, 0x242C3FFC, 0x17B73BDF, 0x9FF4090F,
    0x184AEEF9, 0xA8ACC42C, 0x04E93ACE, 0xB63321DD, 0x74A3F3FC, 0xCD1AE3B7, 0x9B77CBF8,
    0x4F510CB9, 0x88FAC97D, 0xE23EE123, 0x201FC43E, 0x8AD8B42D, 0x5B32F42B, 0x8F659265,
    0x304AD3FD, 0x3512D8A4, 0x538FF18A, 0xFF1382F4, 0x247DCF10, 0x8D2BA956, 0xBA5F58ED,
    0x405AF942, 0xE17C7FC1, 0x83C8FF82, 0x8A771106, 0x658E220E, 0xCE14C32E, 0x903FA500,
    0x9E29C784, 0xFE2445D0, 0x645F8A51, 0x02CD5A02, 0xD626ED8F, 0xE2B5A026, 0x578BE586,
    0x2DE058F2, 0x1FED7570, 0xB76208D8, 0x7FC44076, 0x2488E2AC, 0x749A9753, 0x70C23A55,
    0x01791702, 0xF1BE3907, 0x03A0728F, 0xA15A4D66, 0x2D71FF0C, 0x196E419C, 0xA79AE35A,
    0xE403555A, 0x3F87EF29, 0x251A86FC, 0xB825B947, 0x88E11FF1, 0x47451263, 0xC545B395,
    0x4F40B512, 0x0D21B835, 0x1C637537, 0x2547F8DB, 0xDA887168, 0x25869171, 0xFE381763,
    0x76468731, 0xFC90152B, 0xF9262187, 0xA0B60A0F, 0xC6C4417C, 0xC9C1363F, 0x93E1387F,
    0x288768FF, 0xB33F88E7, 0x922A3095, 0x1E208598, 0x1E020D67, 0x224748AD, 0x91302F05,
    0xA628A740, 0xDEF4B723, 0x97E97248, 0x4CAC962E, 0x308443D9, 0x2FC3C8CD, 0x5E4FA9EE,
    0x74F96648, 0xA87FCCC1, 0x886C8A91, 0x86E531E6, 0xEE8E52B3, 0x05C95794, 0x8EE6F232,
    0x770CF477, 0x37471CCE, 0x690C71FE, 0xD118CC8C, 0xD2830608, 0xA2754EB9, 0x5CEC9DD3,
    0x38192B46, 0xCDC93E47, 0x07F88D70, 0xC559F616, 0x9C091C72, 0x3FE808CD, 0xC4504078,
    0xCF6733E1, 0xAA91E7EC, 0x36122579, 0xB0DF8B91, 0x94AF2906, 0x34558AA5, 0xA8CD1767,
    0xC049E496, 0x71B1CDC1, 0x4885136E, 0x928BF1FF, 0xA04DACE6, 0xD1309D0B, 0xB837C3F3,
    0x9C4AA274, 0xF47B43A3, 0xE30C588F, 0xDB8AF514, 0x0CDA74DB, 0x9583246C, 0x5028E404,
    0xA1542A87, 0xA267147A, 0x7542876C, 0xDA704736, 0xA272A9E2, 0x40DABC53, 0x755A9855,
    0x4A83FBA6, 0x0C4162FF, 0x1DC3B69C, 0x31DED0EC, 0x41CEA1A6, 0xBE8B67A2, 0xD543298C,
    0x3680B25A, 0x88511FE3, 0x4118B76B, 0x35AEAB57, 0x0BF4762C, 0x8B01902E, 0x4DF58250,
    0x2EC7FCDE, 0xEFBF5196, 0x76AD275D, 0xB4CE192D, 0x9C7FD8C1, 0xDADDB1E1, 0xCB136485,
    0xEF4625D6, 0xE5497EA1, 0x0C716D2A, 0x1A23FC57, 0x2AEB78D9, 0x5A8A1180, 0x8AA8F02E,
    0xFD656D4D, 0xAA718DD8, 0xB0FFB5E1, 0x21FF6C81, 0x5652DA8E, 0x844597A6, 0x9DD0EE2B,
    0x32C77AD3, 0x3106C0CB, 0x718DC1FE, 0xC7B8B268, 0x95712E35, 0x26E5DC8B, 0x4373B9F7,
    0xA1FE3006, 0x21682D85, 0x03E08043, 0xA541BF10, 0xB9977AE6, 0x5FAE85E0, 0x76079226,
    0xC90F67D4, 0x7F7AA2D8, 0xE88E9D6B, 0xF86F1281, 0x50C41647, 0xC2287F85, 0x605DBE14,
    0x910BD25A, 0x1982D83E, 0x7AE430AB, 0xF1160BF3, 0xB012C790, 0x54234F60, 0xD88F0801,
    0xF95CC047, 0xE2AB806F, 0xE698D207, 0x3018F4BC, 0xE1AC0984, 0x1EB79E2D, 0x2406089D,
    0xC5109032, 0x770E2200, 0x5786C479, 0x84CB61DC, 0x160D5A06, 0x017A27CE, 0x82487F89,
    0x43A08116, 0x9CB20663, 0xC598A44D, 0x873205EC, 0x1AE332B9, 0x9B0FA46F, 0x9238C5F8,
    0x1B1D8021, 0x0E501FE4, 0x70E38980, 0xA2D87B5E, 0x720E1319, 0xC0BC878B, 0x3E99605A,
    0x3D83D8B0, 0x3887F314, 0x011FF940, 0xD65C3270, 0xE84E909C, 0x381811E2, 0x93B41F32,
    0x472C7996, 0x8CAE78C8, 0xDFBCEB76, 0x13C1F4AA, 0x068490BD, 0x80909CD4, 0x00000000,
    0x00000000

  EW_BITMAPS_TABLE( Appoutput_fire )
    EW_BITMAP( Appoutput_fire, Default )
EW_END_OF_BITMAP_RES( Appoutput_fire )

/* Table with links to derived variants of the bitmap resource : 'App::output_fire' */
EW_RES_WITHOUT_VARIANTS( Appoutput_fire )

/* Bitmap resource : 'App::output_routing' */
EW_DEFINE_BITMAP_RES( Appoutput_routing )
  EW_BITMAP_FRAMES( Appoutput_routing, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutput_routing, Default )            /* ratio 34.26 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0x1F5BC3DE, 0x46A3132F, 0x761F9693, 0xD3AC0544, 0x98C75A3F, 0x0835924A, 0xC056D47B,
    0xD54BFD4A, 0x703FD4EA, 0xCE43FE00, 0x38120280, 0x22053920, 0x0C826078, 0x81A0E82E,
    0x21182A10, 0xF854E283, 0xB0B72C0F, 0x9B1F4FF2, 0x3F54F1BC, 0xD3857127, 0x42ECA13F,
    0xA4E73FC9, 0xE83FCE53, 0x3FCE73A8, 0x8922E49E, 0x6315577D, 0x8CFF30CC, 0x168523A3,
    0x3FE3E36E, 0xE0D38A15, 0x684A0F84, 0x8E3A8324, 0xDB8F8FF3, 0x91616900, 0x64238E40,
    0xE2B8B72C, 0x655F7A12, 0xFF230B62, 0x368E2374, 0xE623C8FF, 0x4378D73F, 0xCC933FCD,
    0x4E8D0842, 0x9BCDF941, 0xE721B8FF, 0xE9D4143F, 0x388D2351, 0x7C942429, 0x26604912,
    0xC173FE80, 0x6198FFA0, 0x24DC3FE8, 0x0082243A, 0x48257382, 0xC859A54E, 0xE36CD23F,
    0x64F03FCC, 0x4A39E02A, 0x89CB9282, 0x4FF20543, 0x22CAA3A8, 0x9AA8A92A, 0xFF90551A,
    0xABC7E805, 0xEB20F4FF, 0xFAD49F3F, 0xFEB809CF, 0x7AAECAE3, 0xAFEACAF6, 0xCACAB216,
    0x6080FFB0, 0x789E8C2C, 0xCC108FF2, 0xA36739C6, 0xD3182EBD, 0xB338C155, 0x64EF3FCB,
    0xE398E61B, 0x34E4239C, 0x0FF33CDB, 0x3B9297B8, 0x96E7A5AE, 0x57B9AE8B, 0x3FEEE321,
    0xA74BC455, 0xCBD4A49D, 0xFC6E9CA0, 0xFFBEC223, 0xBF6FE178, 0x05EBFAFF, 0xFC0B03C0,
    0x1708170F, 0x0C1AAC7B, 0xC3CA6833, 0x312040FF, 0xF416F2BC, 0x3F18314F, 0xDD35D51A,
    0x3CA6299C, 0x299C82DB, 0xEB6AD83C, 0x9CFFC9CE, 0x28CA4EEC, 0xCAF2CCAB, 0x4C1B532E,
    0x6010FF30, 0xE4023FF3, 0x3C0C0FFC, 0xCFC843FF, 0x34206CFF, 0x2CE73ACE, 0x1B47D100,
    0x4AD2F48D, 0x05E83D2B, 0x11DABCFF, 0xAD33540D, 0xFC149D73, 0x1AD6CB73, 0x300AA55F,
    0x8EA8B09F, 0xC3FF2139, 0xFCEB3B4E, 0xBC340C33, 0x334BA3FC, 0xB70DB8B2, 0x5DBF71DC,
    0x4776DCF7, 0xFADECD95, 0xD174DBF2, 0xF81D2780, 0x4E1400D2, 0x0B7FE1B8, 0x8BD5B8AE,
    0x830A6C3F, 0x6585591B, 0xE2F9EBA9, 0xA8EC3ADE, 0xD0A6A983, 0x3FCCC360, 0x26C96C9A,
    0x73728954, 0x3389AE6B, 0xAC01B4BE, 0xEBC743FF, 0xFB214CFF, 0xEED41E3F, 0xE42BD033,
    0xBC110FFE, 0xEFC7C3FF, 0xA86D66F3, 0x8C58FF19, 0x24CA3FF5, 0x854AB90F, 0x2A0C42C1,
    0x4EB3A8FF, 0xD3FF2F3A, 0xFCB6330B, 0xA574A233, 0xF7C293FF, 0xFE2134FF, 0xFF947A3F,
    0xFFE81E0F, 0x82FAC723, 0xFBC0DA12, 0xCD735E64, 0x1FD4B33F, 0xE4E1F8FE, 0x6AC30FFF,
    0xFFCA73FC, 0xD5145288, 0x770FF068, 0x331FE321, 0x160DD9A3, 0x7D378FF8, 0x83927963,
    0xF31E6114, 0x8304568F, 0x0648FF14, 0xBFE18A35, 0x1FE2705E, 0x004F108E, 0x1283274D,
    0x2819E3FE, 0xAEAF545C, 0xB07FC2C0, 0x10FF00CE, 0xD6090C84, 0x65A01137, 0x47F88B11,
    0x8FF06509, 0x8630F827, 0x3FDA7C33, 0x7FC440E0, 0xED88E1A0, 0x94F25A83, 0x58974101,
    0xF1508426, 0xF1222E84, 0x22FC528F, 0x1512A513, 0x8DE2A078, 0x09AFDE2E, 0x188620FF,
    0x842AC855, 0x36696171, 0x8B10C023, 0xFE3689C8, 0x4C1F8DA3, 0xF8E4B296, 0x7161400F,
    0xC7FC7813, 0x0FF8F625, 0x8DF1F84A, 0x2086AC6E, 0xCB130797, 0x79170270, 0x1E390701,
    0x20740E58, 0xDC544628, 0x41928322, 0xAECDD8C9, 0x956C981B, 0x0DE8BAA3, 0x69614E4B,
    0x0665080B, 0x528E592B, 0x2B94A3FE, 0x4D29E542, 0x990427D9, 0x5CAB95E3, 0xC5A69411,
    0x02D44B15, 0x06A8FF11, 0xB651A437, 0x49A38C6E, 0x21C5A095, 0x1DA48746, 0x0B1FED49,
    0x903FC1BC, 0xF5DDCCC0, 0xFCD0032E, 0xF9A60487, 0x0066680F, 0xA56BCA79, 0xCDA9B50A,
    0x2A1139C8, 0x20859892, 0x6B0CB1FE, 0xEF5B3070, 0xFE8A9140, 0x605E0A41, 0x514E8402,
    0xA9E4474C, 0xD3D091BD, 0x5FCA502F, 0x8CE1FE38, 0x19A3FE7E, 0x3FA7E500, 0x822E2851,
    0x081A03FE, 0x8E9F968D, 0x3685CDC4, 0xC9504431, 0xE6E23205, 0x2CAC778E, 0xE06D181E,
    0x8FF1BA38, 0x18434863, 0x344630FF, 0x92522668, 0x27A4348E, 0xCD39292D, 0x32869519,
    0xDD2EA1D4, 0x8A674C26, 0xF4426F20, 0x86F8DA1F, 0xB1F6CA35, 0x736C8DB2, 0x50A9FB24,
    0x72D3F535, 0x312AF072, 0x654D2A4D, 0xAAA6D2FA, 0x8B93A6D0, 0x73FC30C5, 0xB4F5B4B6,
    0x46C4FFAA, 0x41CA5632, 0xABF572A3, 0x522AF55E, 0xA754AA97, 0x4FA99596, 0x4B37CDE5,
    0xC47F8805, 0x69FE1882, 0x51D83B87, 0x834C63BD, 0xA5C4C166, 0x57CACF24, 0xA9D5FAB2,
    0x2E0C24B4, 0x7F8B0190, 0x15AE95C8, 0x962ED95D, 0x89ED0B41, 0x78E01BF0, 0xFACD5F60,
    0x936AB457, 0x4B058155, 0x8B69C738, 0x1A295863, 0x3FC668D9, 0x508C0156, 0x573C93C0,
    0x722F05D1, 0x4D1DA391, 0xCD95B2D6, 0x21C4FEA7, 0x22EC7FA5, 0x0968B818, 0x87715C22,
    0x8456A0EE, 0x3446297E, 0x6552117C, 0xDF4BA310, 0x60925D30, 0x32E6D94B, 0x08B84197,
    0x28622CC6, 0x63FC3A0A, 0x07607922, 0x87B16023, 0xBBF24864, 0x6FEF0DC0, 0xEF1693C9,
    0xB60FA442, 0x882AC660, 0xB2F1DE09, 0x4951BC57, 0xE2AB7AEF, 0x6698D207, 0x47A07BBB,
    0xDEEBDF7B, 0xBF124AFD, 0x3044E8F5, 0x84819120, 0x71100628, 0xF823CBB8, 0x5AFF60CB,
    0x9D6C3426, 0x017A27CD, 0x82487F89, 0x43A08116, 0x9CB20663, 0xC1B8284D, 0x7F7075F0,
    0x0AE1329D, 0xBF136E47, 0x04324718, 0xFC8361B0, 0x3801C5E3, 0x6BF01C70, 0x63345B0F,
    0xF1CE21BE, 0x8B536588, 0xC683FF1B, 0x1C43F98A, 0x008FFC5E, 0x482E18B4, 0x7427484E,
    0x440C08F1, 0x49DA0F8E, 0x03963CCB, 0x874F1DE2, 0xC9B1680F, 0x955BCA3C, 0x17A2783E,
    0x91C0D092, 0x00101213, 0x00000000

  EW_BITMAPS_TABLE( Appoutput_routing )
    EW_BITMAP( Appoutput_routing, Default )
EW_END_OF_BITMAP_RES( Appoutput_routing )

/* Table with links to derived variants of the bitmap resource : 'App::output_routing' */
EW_RES_WITHOUT_VARIANTS( Appoutput_routing )

/* Bitmap resource : 'App::output_sounders' */
EW_DEFINE_BITMAP_RES( Appoutput_sounders )
  EW_BITMAP_FRAMES( Appoutput_sounders, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 3, 2, 30, 32, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutput_sounders, Default )           /* ratio 28.94 % */
    0x0408C100, 0xC10C1020, 0x7C010581, 0xC2C925F2, 0xF67D58A3, 0x87A57A28, 0x78572258,
    0xE59235D8, 0x8EC6DFE7, 0x14723D1F, 0xC8647209, 0x96532693, 0x25B2495C, 0xFF2F964A,
    0x08B8CC5D, 0x1187C556, 0xC84C3617, 0x834FA113, 0x92420D3D, 0x44CDA805, 0x316AF43D,
    0x6211E553, 0xA34F3ED3, 0x153A7236, 0x54A9556A, 0x8AD55AB3, 0xAED7AB75, 0x758AAF60,
    0xAA598B4A, 0x4691357F, 0x4DC8059A, 0x7F4083D0, 0x481B5802, 0x8E5E2753, 0xFB1D72C2,
    0xBEDEAF95, 0x1E03037B, 0xA730B7FC, 0x111F795D, 0xE136F4DD, 0xEE6C4050, 0x594BF5E6,
    0x84CAE170, 0xACB65F31, 0xBCE1F359, 0xF426DB6B, 0x85D20BB4, 0x75E71445, 0x733ACCE6,
    0x63AECDEB, 0x969B06C3, 0x9561285E, 0x15923832, 0xD5D32951, 0x16CF81B2, 0x7175FC4E,
    0x2A9965A8, 0x1147D3EE, 0x8EC43CAC, 0x3D4E370F, 0xB2E9F578, 0xA99B1ED3, 0xEFF4BAF1,
    0x1F5BC3DE, 0x46A3132F, 0x761F9693, 0xD3AC0544, 0x98C75A3F, 0x0835924A, 0xCE5D547B,
    0x5633FD62, 0xFEFED7ED, 0x9FC7F9FF, 0x180E0080, 0x260681E0, 0x0482E058, 0x83208836,
    0x1273F57F, 0x13FD3857, 0xFC942ECA, 0xE53A4E73, 0x3A8E83FC, 0x49E3FCE7, 0x77D8922E,
    0x54E23695, 0x2C3C8FF3, 0x8B22D8AE, 0xCEF3FCF2, 0x38D2328C, 0xE2353BE3, 0x3C8E6378,
    0x8DA3E8EE, 0x62E8C234, 0x490A428C, 0x65604A99, 0xFF230B62, 0x368E2374, 0x8D73FE43,
    0x33FCD437, 0x98842CC9, 0x2A8A14E8, 0x8B62F916, 0xE623A23B, 0xD994C73F, 0xA23A9023,
    0x389A6679, 0x97E4497A, 0x93091E31, 0xF2165753, 0x38DB348F, 0x7C3C0FF3, 0x39CE43FE,
    0x4A03FCE3, 0x150E192E, 0x22863FC8, 0x89A1CB2A, 0x5468BA36, 0x26E9465C, 0xFA547A8F,
    0xFE98000F, 0xFFA6C5B3, 0x9AE9E394, 0x26D8FEA0, 0x28B6929C, 0x054E4BA7, 0x3C2ECCE3,
    0x39CE390A, 0xCD33FCE2, 0x9AC8CF36, 0xCE7AADA7, 0xBAADEB9A, 0x8A690AE2, 0xE319BEA5,
    0x7B14718E, 0x0298A669, 0xCC054FF0, 0xB3CB53FE, 0xE3B9AAA1, 0x3A9E93A4, 0x74D75421,
    0x7CA4E553, 0x3BA3C3C2, 0xAE03FEE0, 0x3B86E23B, 0x9EE4B96E, 0xD4B0227B, 0xB1634982,
    0x6CAB1C71, 0x7BD6F2B2, 0x8E1EBDC6, 0xA4AB6A29, 0x9217BB56, 0xCC02A957, 0x63AA1E27,
    0xB4EC944E, 0xC33FCEB3, 0x3FCBC340, 0x0B2334BA, 0x3C5312C4, 0x5717C471, 0x5DAFF18C,
    0x3922DBF6, 0x6F03FF20, 0x8C96F4BD, 0xA41DA66C, 0x2C2F8FFC, 0xB0AEDA83, 0x2A86F161,
    0xE7AD4354, 0xB0EB7B8B, 0x7D9ECEA3, 0x330D8342, 0xA4B268FF, 0xFA455096, 0x9B238F32,
    0x4BC9EF3C, 0x034FFD37, 0xCA83FF50, 0x602CFFD4, 0x6480BD75, 0x73CC6C1D, 0x310B0612,
    0xCEA3FCA8, 0xFBA0E93A, 0xD8CC2F4F, 0xD2854FF2, 0xB0F1ED19, 0x34AB1AEF, 0x6BD74CC9,
    0x828202F5, 0xCADD0A02, 0xD6C80D66, 0x1E855A47, 0xD3FD8F61, 0xFCA4304A, 0xC5350C93,
    0x2F4A73FC, 0x88E3FC9C, 0x0DB8FF78, 0xCAC490B3, 0x73DCF75D, 0xDEF79DDF, 0xF80DFB73,
    0x648382BF, 0x7950E4D9, 0xFF244BA2, 0x264BF294, 0x5E0A1E8A, 0x8DBEECD1, 0x734EE6B4,
    0x7AE7B75E, 0xE8B75E83, 0xB005F6FE, 0x92E09C65, 0x7CE43817, 0xE43A29D3, 0xEB0B9888,
    0xFB5E57B3, 0x98E2EEE5, 0x3BD8E6F4, 0x7CDEBBCD, 0xA93C03FF, 0x951E0ED6, 0xF220B525,
    0x48DC354F, 0xE3376513, 0x254FF36C, 0xB4421CB4, 0x0F531DF4, 0x77B8F5B7, 0xDBB2BBAF,
    0xF7F4EEFB, 0xCCDC0B30, 0x598921FE, 0xCB1FE208, 0x76E346B0, 0x910EA1B4, 0x90981782,
    0xD314539C, 0x6DAE0A11, 0x8BF41624, 0xB996B6E5, 0x7F4FED78, 0xF75FEA99, 0x01251800,
    0xB91FEB5E, 0xDCC4C640, 0xC5720EF1, 0xF8FF85E3, 0x41BA38C6, 0x63086926, 0x0608D13F,
    0x8C68750E, 0x87F0EE1C, 0xBADC6C09, 0x73B5B7EA, 0xD9772F5D, 0x960317AB, 0x25AA3528,
    0xD35889E0, 0x22A4F05A, 0xE36A13B3, 0x9AD8D61B, 0x33C5BA90, 0x8BF1716F, 0x1062E27D,
    0xEAC5A639, 0x1F7F2C89, 0xD60717A4, 0xED96B2B8, 0x224668EB, 0x316300DD, 0x23FC538C,
    0x12130B61, 0x0CD1FF1E, 0x8103246C, 0xE364040A, 0x40C848C6, 0x6588718E, 0x3D19DFBC,
    0xDD7A4498, 0x42F90CEB, 0x6546B447, 0xF1CA12BF, 0x058B8584, 0x0ED8EC31, 0x6CC3B077,
    0x0E8698C7, 0xE8BE67E1, 0x1D52706D, 0x2AB31EEC, 0xED682CE0, 0xB24195EB, 0xD7851C5D,
    0x02E0B035, 0x47F8B019, 0x42C93F27, 0x1962ED72, 0xE51B58B4, 0x1DAA494E, 0xF598E1E5,
    0xFC16D4DA, 0xB2583214, 0x34B265C9, 0xE96ABFD5, 0xD01E0297, 0xC570C716, 0x8D91A23F,
    0x1563FC66, 0x048508C0, 0xA3C883C9, 0x211CF031, 0x273A8632, 0x4637CEC9, 0xFCD34E33,
    0x715C2207, 0x9390EE87, 0x06597E72, 0x0FF18836, 0x1B038C6E, 0x4067FCFD, 0x76CCEA01,
    0x38A0EB4A, 0x154027F2, 0xFA86D03A, 0x60792265, 0xB1602307, 0xEF446487, 0xE8CCF8A2,
    0x1693C93D, 0x0FA4428B, 0x2AC660B6, 0x8DD187E6, 0x51A35492, 0xAB48E909, 0x98D207E2,
    0xA07BA266, 0x6A4F4947, 0x0F4699D2, 0x44E8F5A6, 0x81912030, 0x10062884, 0x23CBB871,
    0x9B544A68, 0x8A34265A, 0x3E709BFA, 0x10480BD1, 0xA0811690, 0xB2066343, 0xB5084D9C,
    0x6A3528A8, 0x54C29D4D, 0x0FA46EA7, 0x38C5F89B, 0xA9802192, 0x681FE41A, 0xE34FC00D,
    0xD87B5300, 0xCD2B19A2, 0x2AB75CAA, 0xF5C05A9B, 0xCC556D1F, 0x5695E21F, 0xAFE5C2B3,
    0x2E84E909, 0xAF81811E, 0x693B41F2, 0xB072C799, 0xF0E9D74A, 0x99362D01, 0xD2AB4747,
    0x42F44F07, 0x6BF01A12, 0x00020242, 0x00000000

  EW_BITMAPS_TABLE( Appoutput_sounders )
    EW_BITMAP( Appoutput_sounders, Default )
EW_END_OF_BITMAP_RES( Appoutput_sounders )

/* Table with links to derived variants of the bitmap resource : 'App::output_sounders' */
EW_RES_WITHOUT_VARIANTS( Appoutput_sounders )

/* User defined auto object: 'App::FocusedPushButton' */
EW_DEFINE_AUTOOBJECT( AppFocusedPushButton, WidgetSetPushButtonConfig )

/* Initializer for the auto object 'App::FocusedPushButton' */
void AppFocusedPushButton__Init( WidgetSetPushButtonConfig _this )
{
  WidgetSetPushButtonConfig_OnSetLabelColorActive( _this, _Const0000 );
  WidgetSetPushButtonConfig_OnSetLabelColorDisabled( _this, _Const0001 );
  WidgetSetPushButtonConfig_OnSetLabelFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetPushButtonConfig_OnSetFaceFrameActive( _this, 3 );
  WidgetSetPushButtonConfig_OnSetFaceFrameFocused( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDisabled( _this, 0 );
  WidgetSetPushButtonConfig_OnSetFaceFrameDefault( _this, 2 );
  WidgetSetPushButtonConfig_OnSetFaceActive( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceFocused( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDisabled( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
  WidgetSetPushButtonConfig_OnSetFaceDefault( _this, EwLoadResource( &WidgetSetPushButtonMedium, 
  ResourcesBitmap ));
}

/* Table with links to derived variants of the auto object : 'App::FocusedPushButton' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppFocusedPushButton )
EW_END_OF_AUTOOBJECT_VARIANTS( AppFocusedPushButton )

/* Initializer for the class 'App::Boolean' */
void AppBoolean__Init( AppBoolean _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppBoolean );
}

/* Re-Initializer for the class 'App::Boolean' */
void AppBoolean__ReInit( AppBoolean _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::Boolean' */
void AppBoolean__Done( AppBoolean _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppBoolean );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Boolean' */
void AppBoolean__Mark( AppBoolean _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::Boolean' */
EW_DEFINE_CLASS_VARIANTS( AppBoolean )
EW_END_OF_CLASS_VARIANTS( AppBoolean )

/* Virtual Method Table (VMT) for the class : 'App::Boolean' */
EW_DEFINE_CLASS( AppBoolean, XObject, "App::Boolean" )
EW_END_OF_CLASS( AppBoolean )

/* Initializer for the class 'App::MeshVector' */
void AppMeshVector__Init( AppMeshVector _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Frame1, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Frame, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshVector );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const03CE );
  CoreRectView__OnSetBounds( &_this->Frame1, _Const04C2 );
  ViewsImage_OnSetColor( &_this->Frame1, _Const0000 );
  ViewsImage_OnSetScrollOffset( &_this->Frame1, _Const0052 );
  ViewsImage_OnSetFrameNumber( &_this->Frame1, 0 );
  CoreRectView__OnSetBounds( &_this->Frame, _Const03CE );
  ViewsImage_OnSetScrollOffset( &_this->Frame, _Const0052 );
  CoreGroup__Add( _this, ((CoreView)&_this->Frame1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Frame ), 0 );
  ViewsImage_OnSetBitmap( &_this->Frame1, EwLoadResource( &Appmeshunit_fill, ResourcesBitmap 
  ));
  ViewsImage_OnSetBitmap( &_this->Frame, EwLoadResource( &Appmeshunit_outline_thin, 
  ResourcesBitmap ));
}

/* Re-Initializer for the class 'App::MeshVector' */
void AppMeshVector__ReInit( AppMeshVector _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Frame1 );
  ViewsImage__ReInit( &_this->Frame );
}

/* Finalizer method for the class 'App::MeshVector' */
void AppMeshVector__Done( AppMeshVector _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshVector );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Frame1 );
  ViewsImage__Done( &_this->Frame );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshVector' */
void AppMeshVector__Mark( AppMeshVector _this )
{
  EwMarkObject( &_this->Frame1 );
  EwMarkObject( &_this->Frame );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppMeshVector_UpdateLayout( AppMeshVector _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppMeshVector_UpdateViewState( AppMeshVector _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* Variants derived from the class : 'App::MeshVector' */
EW_DEFINE_CLASS_VARIANTS( AppMeshVector )
EW_END_OF_CLASS_VARIANTS( AppMeshVector )

/* Virtual Method Table (VMT) for the class : 'App::MeshVector' */
EW_DEFINE_CLASS( AppMeshVector, CoreGroup, "App::MeshVector" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppMeshVector_UpdateLayout,
  AppMeshVector_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMeshVector )

/* User defined auto object: 'App::AttrSetFireZone' */
EW_DEFINE_AUTOOBJECT( AppAttrSetFireZone, GraphicsAttrSet )

/* Initializer for the auto object 'App::AttrSetFireZone' */
void AppAttrSetFireZone__Init( GraphicsAttrSet _this )
{
  GraphicsAttrSet_OnSetFont1( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetFont0( _this, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  GraphicsAttrSet_OnSetBitmap2( _this, EwLoadResource( &AppExpandBitmap, ResourcesBitmap 
  ));
  GraphicsAttrSet_OnSetBitmap1( _this, EwLoadResource( &AppCollapseBitmap, ResourcesBitmap 
  ));
  GraphicsAttrSet_OnSetBitmap0( _this, EwLoadResource( &AppSilencedBitmap, ResourcesBitmap 
  ));
}

/* Table with links to derived variants of the auto object : 'App::AttrSetFireZone' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppAttrSetFireZone )
EW_END_OF_AUTOOBJECT_VARIANTS( AppAttrSetFireZone )

/* Initializer for the class 'App::ListViewer' */
void AppListViewer__Init( AppListViewer _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetVerticalScrollbar__Init( &_this->VerticalScrollbar, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppListViewer );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0092 );
  CoreView_OnSetLayout((CoreView)&_this->VerticalScrollbar, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->VerticalScrollbar, _Const04C3 );
  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, 0 );
  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, 350 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, 350 );
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const04C4 );
  _this->SlideTouchHandler.MaxOffset = _Const0052;
  _this->SlideTouchHandler.MinOffset = _Const04C5;
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreView_OnSetLayout((CoreView)&_this->VerticalList, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const04C4 );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 30 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 0 );
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, 0 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const04C6 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const04C7 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const04C8 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const04C9 );
  CoreSimpleTouchHandler_OnSetRetargetOffset( &_this->SimpleTouchHandler, 3 );
  _this->SimpleTouchHandler.RetargetCondition = CoreRetargetReasonLongPress | CoreRetargetReasonWipeDown 
  | CoreRetargetReasonWipeLeft | CoreRetargetReasonWipeRight | CoreRetargetReasonWipeUp;
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalScrollbar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  _this->VerticalScrollbar.OnScroll = EwNewSlot( _this, AppListViewer_BarScrollSlot 
  );
  WidgetSetVerticalScrollbar_OnSetAppearance( &_this->VerticalScrollbar, EwGetAutoObject( 
  &WidgetSetVerticalScrollbar_Medium, WidgetSetVerticalScrollbarConfig ));
  _this->SlideTouchHandler.OnSlide = EwNewSlot( _this, AppListViewer_SlideScrollSlot 
  );
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppListViewer_LoadItem );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList, 0 );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppListViewer_PageScroll 
  );
}

/* Re-Initializer for the class 'App::ListViewer' */
void AppListViewer__ReInit( AppListViewer _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetVerticalScrollbar__ReInit( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreVerticalList__ReInit( &_this->VerticalList );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
}

/* Finalizer method for the class 'App::ListViewer' */
void AppListViewer__Done( AppListViewer _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppListViewer );

  /* Finalize all embedded objects */
  WidgetSetVerticalScrollbar__Done( &_this->VerticalScrollbar );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreVerticalList__Done( &_this->VerticalList );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ListViewer' */
void AppListViewer__Mark( AppListViewer _this )
{
  EwMarkObject( &_this->VerticalScrollbar );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->VerticalList );
  EwMarkSlot( _this->OnLoadItem );
  EwMarkSlot( _this->onScroll );
  EwMarkSlot( _this->onRefreshAll );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkSlot( _this->onScrollRefresh );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppListViewer_UpdateLayout( AppListViewer _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectX2( _this->VerticalList.Super2.Bounds, 
  _this->VerticalScrollbar.Super2.Bounds.Point1.X ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppListViewer_UpdateViewState( AppListViewer _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ( _this->VerticalScrollbar.ContentArea <= _this->VerticalScrollbar.ViewArea )
  {
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, 0 );
    WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, 0 );
    WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, _this->VerticalScrollbar.ViewArea 
    );
  }

  if ( _this->VerticalList.ScrollOffset > ( _this->VerticalScrollbar.ContentArea 
      - _this->VerticalScrollbar.ViewArea ))
  {
    CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, _this->VerticalScrollbar.ContentArea 
    - _this->VerticalScrollbar.ViewArea );
  }
}

/* 'C' function for method : 'App::ListViewer.BarScrollSlot()' */
void AppListViewer_BarScrollSlot( AppListViewer _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VerticalScrollbar ) % _this->VerticalList.ItemHeight );
  _this->SlideTouchHandler.Offset.Y = -WidgetSetVerticalScrollbar_OnGetPosition( 
  &_this->VerticalScrollbar );
  _this->Item = -_this->SlideTouchHandler.Offset.Y / _this->VerticalList.ItemHeight;

  if ( _this->Item != _this->StartRow )
  {
    if ( _this->onScrollRefresh.Object == 0 )
    {
      EwSignal( _this->onRefreshAll, ((XObject)_this ));
    }
    else
    {
      EwSignal( _this->onScrollRefresh, ((XObject)_this ));
    }
  }

  EwPostSignal( _this->onScroll, ((XObject)_this ));
  _this->StartRow = _this->Item;
}

/* 'C' function for method : 'App::ListViewer.SlideScrollSlot()' */
void AppListViewer_SlideScrollSlot( AppListViewer _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, -_this->SlideTouchHandler.Offset.Y 
  );
  _this->Item = -_this->SlideTouchHandler.Offset.Y / _this->VerticalList.ItemHeight;
  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -( -_this->SlideTouchHandler.Offset.Y 
  % _this->VerticalList.ItemHeight ));

  if ( _this->Item != _this->StartRow )
  {
    _this->Item = -_this->SlideTouchHandler.Offset.Y / _this->VerticalList.ItemHeight;

    if ( _this->onScrollRefresh.Object == 0 )
    {
      EwSignal( _this->onRefreshAll, ((XObject)_this ));
    }
    else
    {
      EwSignal( _this->onScrollRefresh, ((XObject)_this ));
    }
  }

  EwPostSignal( _this->onScroll, ((XObject)_this ));
  _this->StartRow = _this->Item;
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppListViewer_LoadItem( AppListViewer _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->Item = _this->VerticalList.Item + ( -_this->SlideTouchHandler.Offset.Y 
  / _this->VerticalList.ItemHeight );
  EwSignal( _this->OnLoadItem, ((XObject)_this ));
}

/* 'C' function for method : 'App::ListViewer.OnSetItemClass()' */
void AppListViewer_OnSetItemClass( AppListViewer _this, XClass value )
{
  if ( _this->ItemClass == value )
    return;

  _this->ItemClass = value;
  CoreVerticalList_OnSetItemClass( &_this->VerticalList, _this->ItemClass );
}

/* 'C' function for method : 'App::ListViewer.OnSetItemHeight()' */
void AppListViewer_OnSetItemHeight( AppListViewer _this, XInt32 value )
{
  if ( _this->ItemHeight == value )
    return;

  _this->ItemHeight = value;
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, _this->ItemHeight );
  CoreRectView__OnSetBounds( &_this->VerticalList, EwSetRectH( _this->VerticalList.Super2.Bounds, 
  EwGetRectH( _this->Super2.Bounds )));
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, (( EwGetRectH( _this->VerticalList.Super2.Bounds 
  ) + ( _this->VerticalList.ItemHeight - 1 )) / _this->VerticalList.ItemHeight ) 
  + 1 );
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, _this->NoOfItems 
  * _this->ItemHeight );
  _this->SlideTouchHandler.MinOffset.Y = -_this->VerticalScrollbar.ContentArea;
}

/* 'C' function for method : 'App::ListViewer.OnSetNoOfItems()' */
void AppListViewer_OnSetNoOfItems( AppListViewer _this, XInt32 value )
{
  XInt32 n;

  _this->NoOfItems = value;
  n = value;

  if ( n < ( _this->VerticalList.NoOfItems - 1 ))
  {
    n = _this->VerticalList.NoOfItems - 1;
  }

  WidgetSetVerticalScrollbar_OnSetViewArea( &_this->VerticalScrollbar, EwGetRectH( 
  _this->Super2.Bounds ));
  WidgetSetVerticalScrollbar_OnSetContentArea( &_this->VerticalScrollbar, n * _this->ItemHeight 
  );
  _this->SlideTouchHandler.MinOffset.Y = -( _this->VerticalScrollbar.ContentArea 
  - _this->VerticalScrollbar.ViewArea );

  if ( _this->SlideTouchHandler.Offset.Y < _this->SlideTouchHandler.MinOffset.Y )
  {
    _this->SlideTouchHandler.Offset.Y = _this->SlideTouchHandler.MinOffset.Y;
    EwSignal( EwNewSlot( _this, AppListViewer_SlideScrollSlot ), ((XObject)_this 
      ));
  }

  if ( WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar ) > ( 
      _this->VerticalScrollbar.ContentArea - _this->VerticalScrollbar.ViewArea ))
  {
    WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, _this->VerticalScrollbar.ContentArea 
    - _this->VerticalScrollbar.ViewArea );
    EwSignal( EwNewSlot( _this, AppListViewer_BarScrollSlot ), ((XObject)_this ));
  }

  _this->Item = WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar 
  ) / _this->VerticalList.ItemHeight;
  EwSignal( _this->onRefreshAll, ((XObject)_this ));
}

/* 'C' function for method : 'App::ListViewer.OnSetScrollOffset()' */
void AppListViewer_OnSetScrollOffset( AppListViewer _this, XInt32 value )
{
  _this->ScrollOffset = value;
  WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, value );
  _this->SlideTouchHandler.Offset.Y = -value;
  _this->Item = -_this->SlideTouchHandler.Offset.Y / _this->VerticalList.ItemHeight;
  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList, -( value % _this->VerticalList.ItemHeight 
  ));

  if ( _this->Item != _this->StartRow )
  {
    EwSignal( _this->onRefreshAll, ((XObject)_this ));
    _this->StartRow = _this->Item;
  }
}

/* 'C' function for method : 'App::ListViewer.PageScroll()' */
void AppListViewer_PageScroll( AppListViewer _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->VerticalScrollbar.ContentArea != 0 )
  {
    XInt32 handleheight = ( _this->VerticalScrollbar.ViewArea * _this->VerticalScrollbar.ViewArea 
      ) / _this->VerticalScrollbar.ContentArea;
    XInt32 handlepos = ( WidgetSetVerticalScrollbar_OnGetPosition( &_this->VerticalScrollbar 
      ) * _this->VerticalScrollbar.ViewArea ) / _this->VerticalScrollbar.ContentArea;

    if ( _this->SimpleTouchHandler.HittingPos.Y < handlepos )
    {
      WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, WidgetSetVerticalScrollbar_OnGetPosition( 
      &_this->VerticalScrollbar ) - _this->VerticalScrollbar.ViewArea );
      EwSignal( EwNewSlot( _this, AppListViewer_BarScrollSlot ), ((XObject)_this 
        ));
    }
    else
      if ( _this->SimpleTouchHandler.HittingPos.Y > ( handlepos + handleheight ))
      {
        WidgetSetVerticalScrollbar_OnSetPosition( &_this->VerticalScrollbar, WidgetSetVerticalScrollbar_OnGetPosition( 
        &_this->VerticalScrollbar ) + _this->VerticalScrollbar.ViewArea );
        EwSignal( EwNewSlot( _this, AppListViewer_BarScrollSlot ), ((XObject)_this 
          ));
      }
  }
}

/* Variants derived from the class : 'App::ListViewer' */
EW_DEFINE_CLASS_VARIANTS( AppListViewer )
EW_END_OF_CLASS_VARIANTS( AppListViewer )

/* Virtual Method Table (VMT) for the class : 'App::ListViewer' */
EW_DEFINE_CLASS( AppListViewer, CoreGroup, "App::ListViewer" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppListViewer_UpdateLayout,
  AppListViewer_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppListViewer )

/* User defined auto object: 'App::AttrSetFireChannel' */
EW_DEFINE_AUTOOBJECT( AppAttrSetFireChannel, GraphicsAttrSet )

/* Initializer for the auto object 'App::AttrSetFireChannel' */
void AppAttrSetFireChannel__Init( GraphicsAttrSet _this )
{
  GraphicsAttrSet_OnSetFont0( _this, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  GraphicsAttrSet_OnSetBitmap0( _this, 0 );
}

/* Table with links to derived variants of the auto object : 'App::AttrSetFireChannel' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppAttrSetFireChannel )
EW_END_OF_AUTOOBJECT_VARIANTS( AppAttrSetFireChannel )

/* Initializer for the class 'App::DisablementsTabButton' */
void AppDisablementsTabButton__Init( AppDisablementsTabButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppTabButton__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->routing, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->fire, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppDisablementsTabButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04CA );
  CoreRectView__OnSetBounds( &_this->Super1.Image, _Const04CB );
  CoreRectView__OnSetBounds( &_this->Super1.Text2, _Const04CC );
  CoreRectView__OnSetBounds( &_this->Super1.Text1, _Const04CD );
  ViewsAttrText_OnSetString( &_this->Super1.Text1, EwLoadString( &_Const04CE ));
  CoreRectView__OnSetBounds( &_this->routing, _Const04CF );
  ViewsImage_OnSetVisible( &_this->routing, 0 );
  CoreRectView__OnSetBounds( &_this->fire, _Const04D0 );
  ViewsImage_OnSetVisible( &_this->fire, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->routing ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->fire ), 0 );
  ViewsImage_OnSetBitmap( &_this->routing, EwLoadResource( &Applorry, ResourcesBitmap 
  ));
  ViewsImage_OnSetBitmap( &_this->fire, EwLoadResource( &Appoutputs_off, ResourcesBitmap 
  ));
}

/* Re-Initializer for the class 'App::DisablementsTabButton' */
void AppDisablementsTabButton__ReInit( AppDisablementsTabButton _this )
{
  /* At first re-initialize the super class ... */
  AppTabButton__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->routing );
  ViewsImage__ReInit( &_this->fire );
}

/* Finalizer method for the class 'App::DisablementsTabButton' */
void AppDisablementsTabButton__Done( AppDisablementsTabButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppDisablementsTabButton );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->routing );
  ViewsImage__Done( &_this->fire );

  /* Don't forget to deinitialize the super class ... */
  AppTabButton__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::DisablementsTabButton' */
void AppDisablementsTabButton__Mark( AppDisablementsTabButton _this )
{
  EwMarkObject( &_this->routing );
  EwMarkObject( &_this->fire );

  /* Give the super class a chance to mark its objects and references */
  AppTabButton__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::DisablementsTabButton' */
EW_DEFINE_CLASS_VARIANTS( AppDisablementsTabButton )
EW_END_OF_CLASS_VARIANTS( AppDisablementsTabButton )

/* Virtual Method Table (VMT) for the class : 'App::DisablementsTabButton' */
EW_DEFINE_CLASS( AppDisablementsTabButton, AppTabButton, "App::DisablementsTabButton" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppTabButton_UpdateLayout,
  AppTabButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppDisablementsTabButton )

/* Bitmap resource : 'App::lorry' */
EW_DEFINE_BITMAP_RES( Applorry )
  EW_BITMAP_FRAMES( Applorry, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 20, 0 )
    EW_BITMAP_FRAME( 2, 9, 23, 8, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applorry, Default )                     /* ratio 63.80 % */
    0x10F82B00, 0x41204003, 0xF025087F, 0x870A6499, 0xFE8D3995, 0x6AC4CA11, 0xA3479DDF,
    0x382C1826, 0x8DC12390, 0xFC863B20, 0x2BE3B228, 0xB47CC85E, 0x5FE9C431, 0xF08F3B16,
    0xE9E441BD, 0xEC743902, 0xC8F48C12, 0x68B1E373, 0x391D94D9, 0x0A5FE833, 0x89FE6E27,
    0xDFE6B248, 0xBE8E3A95, 0x6285644D, 0x2492D5A7, 0xD58002B3, 0x3013992B, 0x3BFD267B,
    0xD92924C1, 0x30E254A4, 0x9B33F7FA, 0x0B707FA6, 0x8F378CEC, 0xD264ACDE, 0xE27931B6,
    0x21BCD106, 0x43FD0264, 0xBFDB4D26, 0xFD9CC35B, 0xCDE4E153, 0x629F45BF, 0x4EC9BB7D,
    0x3BAD55C2, 0x57B3D5E7, 0x4B9FCC85, 0xA95864F5, 0xCFD76FF3, 0xF1FF85C1, 0x1FE7B2F0,
    0xFEA94B20, 0xED465B01, 0x6E284EC1, 0x187BFD12, 0x339103B1, 0x526104FF, 0xF19FAFF5,
    0xE9F2F87F, 0xCC4417FB, 0xA62E7F9F, 0xC637F9C8, 0x9E7FA58F, 0xBCFF612F, 0xEEF67B5D,
    0xFC5CB5E0, 0x9A08C1F7, 0xFD117C7F, 0xDF8FB7DB, 0xF6FA7D3F, 0x28C3A3FD, 0x4B123FD4,
    0x92E3FCD8, 0x40F81227, 0xC1C71097, 0x63FC6610, 0xFC630FC1, 0xCE731063, 0x2FCB23FD,
    0x09F3FCCB, 0x33FCBE2C, 0x2D4D1282, 0x0A40E1A8, 0x18A1B872, 0xA1F8821D, 0x27420881,
    0xD8A73FDD, 0xAE3FCC42, 0x3FCC72F0, 0x07816436, 0x882E0989, 0xB6091041, 0x8574C520,
    0x884AD268, 0x0173FE34, 0xD52E0910, 0x1DE77954, 0x4192A098, 0x8964E932, 0xE5092E4F,
    0x990E0994, 0xA4470820, 0x48084FF1, 0x9524D1A8, 0x4600FCFF, 0x1600FF1F, 0x50CC1988,
    0x51900DD3, 0x9BE5297E, 0x04106641, 0x6080FF19, 0xD2729684, 0xE6792569, 0x1141E3FD,
    0x81B931C0, 0x99D46510, 0xFE793FE5, 0x7795E373, 0x816033FE, 0x0721564C, 0x73D8F323,
    0xB4393E0F, 0x9C88E405, 0x9EE4C872, 0xC851A84B, 0xB2DCA83F, 0x3C751622, 0xA4688FF2,
    0x2F0AD271, 0xCA7254FF, 0xF5314A2D, 0xA0941F8F, 0xB4294FF2, 0x50CFF308, 0x2630F945,
    0xB3FE2A8A, 0xFE484B52, 0xA52447A3, 0x3413E2C8, 0x6833FCD9, 0x8AAAA8A1, 0x96CBAEAB,
    0x921ECFF2, 0x1A4FF298, 0xC255BC83, 0x8A286D12, 0x2C733FE3, 0xFE421F62, 0x2A4983FC,
    0x04C3FCB9, 0xD3FC861B, 0xFCF33C0E, 0xEE3A8E73, 0x15C333FC, 0x4D73FC76, 0xA720E437,
    0x38763FDC, 0x653FCA32, 0x3FC98200, 0x8AB3FEEC, 0x83FCC62E, 0x79491342, 0x1DB39373,
    0x360CF319, 0x0FF8CA30, 0x03A4E538, 0xA328C9D7, 0xFF668F2C, 0x2507C184, 0xDD5826E6,
    0xEC94DF75, 0x08FF6C1A, 0xFF200631, 0x378D8340, 0x42C619A8, 0x43FC7114, 0x64FF3431,
    0x0EC33353, 0x3FD106EF, 0xCE838CDD, 0x4298943F, 0xCEE5B8EB, 0x27300D46, 0xB40C7033,
    0x85C0E8FF, 0xBD48FF1E, 0xC368CA4E, 0xFF3E19B5, 0x5BC821A0, 0xA5A9DA4C, 0x18CC580D,
    0xFC741543, 0x79150303, 0x100FF99B, 0xCFF1F861, 0xD6AF45D0, 0x1069129A, 0x318CF212,
    0x3FEC08CE, 0xC7916C38, 0x23FF44E0, 0xB0D623DE, 0xF8D981FB, 0x32D6B5A4, 0x369370D3,
    0x0DB296DA, 0x0260DC2E, 0x23E1B82E, 0x0707DB08, 0x263EC3AE, 0x81B44E07, 0xE05B0808,
    0xB5090901, 0xEDBBC223, 0x08CA4824, 0x224D6009, 0x9BB1EC42, 0xE646C149, 0x04CED3A4,
    0x0C02C4A2, 0xF7F45D37, 0xFCEF4E0F, 0xF73D4F43, 0x3D99A3FC, 0xBD93B3D7, 0xE2487917,
    0xA0493FE6, 0x7415F8A1, 0x4EC07238, 0x8393D72B, 0xD354CC30, 0xD4A52488, 0xFFCBF2D2,
    0x2648219C, 0x3F50A212, 0x788ED1D4, 0x3D32E260, 0x722A88E9, 0xACB20C61, 0x68DF10C1,
    0xF10E1B42, 0xE204330F, 0x6003FE61, 0x9473FCF5, 0x5A4A3CA4, 0xBD179284, 0x478791FE,
    0x1D7DE294, 0xEA375349, 0x89FD3F80, 0x42894C89, 0x05AEE29C, 0xC35C678B, 0xA040631B,
    0x2FB23B0E, 0x14C30477, 0x3CC618B5, 0x600B2146, 0xF388B10C, 0xE63095E0, 0x145C0A91,
    0x33131E63, 0x389D1306, 0x6371D00F, 0xC670C41E, 0x18804835, 0x0763B067, 0x3EC3D85D,
    0x42841034, 0x700A00AD, 0xE6450890, 0x684206A1, 0x98CA0262, 0x827436C6, 0xA6620495,
    0xA3BC3B8E, 0x0BD0011E, 0x0F0048C2, 0x1105208F, 0x7D0A13E8, 0xE5098098, 0x3C7E8FC2,
    0x1A058F77, 0x0BD81763, 0x48ED1E41, 0xB24E49C9, 0x84D8ED79, 0x8C113105, 0x662E481C,
    0x3FE07AF2, 0x660C1168, 0xDB2F03FC, 0xF1258258, 0xAE3DCAC8, 0xD0AC2092, 0xD02231C5,
    0x62C45008, 0x83FA3812, 0xA858C83F, 0x6ACD520E, 0x280CA0EE, 0x57474328, 0xC792B2B6,
    0xB400257C, 0x1C730E01, 0x18AC8DC1, 0xA50C594B, 0x41BC28A5, 0x85B0EA11, 0x0AF19C30,
    0x2E43799F, 0x31A70CC9, 0x3DCC89C7, 0xED1D0396, 0x1C6306C8, 0xC87F9E93, 0xB0C50A70,
    0x49940C61, 0x24F2714F, 0x00000020, 0x00000000

  EW_BITMAPS_TABLE( Applorry )
    EW_BITMAP( Applorry, Default )
EW_END_OF_BITMAP_RES( Applorry )

/* Table with links to derived variants of the bitmap resource : 'App::lorry' */
EW_RES_WITHOUT_VARIANTS( Applorry )

/* Font resource : 'App::FontMediumBold' */
EW_DEFINE_FONT_RES( AppFontMediumBold, 19, 5, 0, 16, 0x0001, 0x007E )
  EW_GLYPH( 0x0001, 1, -14, 8, 14, 10, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 6, 0x00000162 ),                /* ' ' */
  EW_GLYPH( 0x0021, 1, -14, 4, 14, 6, 0x00000162 ),             /* '!' */
  EW_GLYPH( 0x0022, 1, -15, 6, 5, 7, 0x000001F2 ),              /* '"' */
  EW_GLYPH( 0x0023, 0, -14, 13, 14, 13, 0x00000244 ),           /* '#' */
  EW_GLYPH( 0x0024, 0, -17, 12, 19, 12, 0x00000426 ),           /* '$' */
  EW_GLYPH( 0x0025, 1, -14, 14, 14, 16, 0x0000068D ),           /* '%' */
  EW_GLYPH( 0x0026, 1, -14, 13, 14, 14, 0x000008C7 ),           /* '&' */
  EW_GLYPH( 0x0027, 0, -15, 4, 5, 4, 0x00000AB9 ),              /* ''' */
  EW_GLYPH( 0x0028, 1, -16, 7, 21, 8, 0x00000AE5 ),             /* '(' */
  EW_GLYPH( 0x0029, 0, -16, 7, 21, 8, 0x00000C55 ),             /* ')' */
  EW_GLYPH( 0x002A, 0, -14, 10, 9, 10, 0x00000DB3 ),            /* '*' */
  EW_GLYPH( 0x002B, 0, -12, 12, 11, 12, 0x00000ECA ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 5, 6, 5, 0x00000FC8 ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -7, 7, 2, 8, 0x0000101C ),               /* '-' */
  EW_GLYPH( 0x002E, 1, -3, 5, 3, 7, 0x00001049 ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -14, 9, 15, 9, 0x00001081 ),             /* '/' */
  EW_GLYPH( 0x0030, 0, -14, 12, 14, 12, 0x000011AC ),           /* '0' */
  EW_GLYPH( 0x0031, 1, -14, 8, 14, 12, 0x00001332 ),            /* '1' */
  EW_GLYPH( 0x0032, 0, -14, 12, 14, 12, 0x000013E9 ),           /* '2' */
  EW_GLYPH( 0x0033, 0, -14, 11, 14, 12, 0x000015B0 ),           /* '3' */
  EW_GLYPH( 0x0034, 0, -14, 12, 14, 12, 0x00001785 ),           /* '4' */
  EW_GLYPH( 0x0035, 1, -14, 11, 14, 12, 0x000018D1 ),           /* '5' */
  EW_GLYPH( 0x0036, 0, -14, 12, 14, 12, 0x00001A90 ),           /* '6' */
  EW_GLYPH( 0x0037, 0, -14, 12, 14, 12, 0x00001C53 ),           /* '7' */
  EW_GLYPH( 0x0038, 0, -14, 12, 14, 12, 0x00001DCC ),           /* '8' */
  EW_GLYPH( 0x0039, 0, -14, 11, 14, 12, 0x00001FAA ),           /* '9' */
  EW_GLYPH( 0x003A, 1, -11, 5, 11, 6, 0x00002165 ),             /* ':' */
  EW_GLYPH( 0x003B, 0, -11, 6, 14, 6, 0x000021FF ),             /* ';' */
  EW_GLYPH( 0x003C, 0, -11, 10, 10, 11, 0x000022C3 ),           /* '<' */
  EW_GLYPH( 0x003D, 1, -9, 10, 6, 12, 0x000023FC ),             /* '=' */
  EW_GLYPH( 0x003E, 1, -11, 10, 10, 11, 0x000024B9 ),           /* '>' */
  EW_GLYPH( 0x003F, 0, -14, 11, 14, 11, 0x000025FC ),           /* '?' */
  EW_GLYPH( 0x0040, 1, -14, 18, 18, 19, 0x00002784 ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -14, 15, 14, 14, 0x00002B5B ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -14, 12, 14, 14, 0x00002D30 ),           /* 'B' */
  EW_GLYPH( 0x0043, 1, -14, 13, 14, 14, 0x00002EBC ),           /* 'C' */
  EW_GLYPH( 0x0044, 1, -14, 12, 14, 14, 0x00003091 ),           /* 'D' */
  EW_GLYPH( 0x0045, 1, -14, 11, 14, 12, 0x00003200 ),           /* 'E' */
  EW_GLYPH( 0x0046, 1, -14, 11, 14, 12, 0x00003342 ),           /* 'F' */
  EW_GLYPH( 0x0047, 1, -14, 13, 14, 15, 0x0000345F ),           /* 'G' */
  EW_GLYPH( 0x0048, 1, -14, 13, 14, 15, 0x00003646 ),           /* 'H' */
  EW_GLYPH( 0x0049, 1, -14, 4, 14, 7, 0x00003756 ),             /* 'I' */
  EW_GLYPH( 0x004A, 0, -14, 11, 14, 12, 0x0000379F ),           /* 'J' */
  EW_GLYPH( 0x004B, 1, -14, 13, 14, 14, 0x000038C4 ),           /* 'K' */
  EW_GLYPH( 0x004C, 1, -14, 11, 14, 12, 0x00003A5C ),           /* 'L' */
  EW_GLYPH( 0x004D, 1, -14, 16, 14, 19, 0x00003B28 ),           /* 'M' */
  EW_GLYPH( 0x004E, 1, -14, 13, 14, 15, 0x00003CE5 ),           /* 'N' */
  EW_GLYPH( 0x004F, 1, -14, 13, 14, 15, 0x00003E29 ),           /* 'O' */
  EW_GLYPH( 0x0050, 1, -14, 13, 14, 14, 0x0000400E ),           /* 'P' */
  EW_GLYPH( 0x0051, 1, -14, 13, 17, 15, 0x0000417B ),           /* 'Q' */
  EW_GLYPH( 0x0052, 1, -14, 12, 14, 13, 0x000043C5 ),           /* 'R' */
  EW_GLYPH( 0x0053, 0, -14, 13, 14, 13, 0x00004544 ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -14, 13, 14, 13, 0x0000477B ),           /* 'T' */
  EW_GLYPH( 0x0055, 1, -14, 12, 14, 14, 0x00004893 ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -14, 14, 14, 14, 0x000049C6 ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -14, 19, 14, 19, 0x00004B91 ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -14, 14, 14, 14, 0x00004E0A ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -14, 14, 14, 13, 0x00004FEC ),           /* 'Y' */
  EW_GLYPH( 0x005A, 0, -14, 13, 14, 13, 0x00005167 ),           /* 'Z' */
  EW_GLYPH( 0x005B, 1, -16, 6, 19, 6, 0x00005318 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -14, 10, 15, 9, 0x000053BC ),            /* '\' */
  EW_GLYPH( 0x005D, 0, -16, 6, 19, 6, 0x000054FA ),             /* ']' */
  EW_GLYPH( 0x005E, 0, -14, 10, 7, 10, 0x00005599 ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 0, 10, 2, 10, 0x00005651 ),              /* '_' */
  EW_GLYPH( 0x0060, 0, -15, 7, 3, 7, 0x0000568D ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -11, 10, 11, 12, 0x000056D2 ),           /* 'a' */
  EW_GLYPH( 0x0062, 1, -15, 11, 15, 12, 0x00005818 ),           /* 'b' */
  EW_GLYPH( 0x0063, 0, -11, 11, 11, 11, 0x00005956 ),           /* 'c' */
  EW_GLYPH( 0x0064, 0, -15, 11, 15, 12, 0x00005AC8 ),           /* 'd' */
  EW_GLYPH( 0x0065, 1, -11, 11, 11, 12, 0x00005C0A ),           /* 'e' */
  EW_GLYPH( 0x0066, 0, -15, 8, 15, 8, 0x00005D7B ),             /* 'f' */
  EW_GLYPH( 0x0067, 0, -11, 11, 15, 12, 0x00005E52 ),           /* 'g' */
  EW_GLYPH( 0x0068, 1, -15, 10, 15, 12, 0x00005FF9 ),           /* 'h' */
  EW_GLYPH( 0x0069, 1, -16, 4, 16, 6, 0x000060E8 ),             /* 'i' */
  EW_GLYPH( 0x006A, -1, -16, 6, 20, 6, 0x00006173 ),            /* 'j' */
  EW_GLYPH( 0x006B, 1, -15, 11, 15, 11, 0x0000625F ),           /* 'k' */
  EW_GLYPH( 0x006C, 1, -15, 4, 15, 6, 0x000063A9 ),             /* 'l' */
  EW_GLYPH( 0x006D, 1, -11, 16, 11, 18, 0x000063F8 ),           /* 'm' */
  EW_GLYPH( 0x006E, 1, -11, 10, 11, 12, 0x00006543 ),           /* 'n' */
  EW_GLYPH( 0x006F, 0, -11, 12, 11, 12, 0x0000660E ),           /* 'o' */
  EW_GLYPH( 0x0070, 1, -11, 11, 15, 12, 0x00006760 ),           /* 'p' */
  EW_GLYPH( 0x0071, 0, -11, 11, 15, 12, 0x000068B8 ),           /* 'q' */
  EW_GLYPH( 0x0072, 1, -11, 7, 11, 8, 0x00006A01 ),             /* 'r' */
  EW_GLYPH( 0x0073, 0, -11, 11, 11, 11, 0x00006A87 ),           /* 's' */
  EW_GLYPH( 0x0074, 0, -14, 8, 14, 8, 0x00006C1F ),             /* 't' */
  EW_GLYPH( 0x0075, 1, -11, 10, 11, 12, 0x00006CF0 ),           /* 'u' */
  EW_GLYPH( 0x0076, 0, -11, 11, 11, 11, 0x00006DAA ),           /* 'v' */
  EW_GLYPH( 0x0077, 0, -11, 16, 11, 16, 0x00006EE9 ),           /* 'w' */
  EW_GLYPH( 0x0078, 0, -11, 11, 11, 11, 0x000070B2 ),           /* 'x' */
  EW_GLYPH( 0x0079, 0, -11, 11, 15, 11, 0x000071F8 ),           /* 'y' */
  EW_GLYPH( 0x007A, 0, -11, 11, 11, 11, 0x0000739B ),           /* 'z' */
  EW_GLYPH( 0x007B, 0, -16, 8, 20, 8, 0x000074D0 ),             /* '{' */
  EW_GLYPH( 0x007C, 1, -14, 4, 17, 6, 0x00007614 ),             /* '|' */
  EW_GLYPH( 0x007D, 0, -16, 8, 20, 8, 0x00007669 ),             /* '}' */
  EW_GLYPH( 0x007E, 1, -8, 12, 4, 14, 0x000077B9 ),             /* '~' */
  EW_GLYPH( 0x00A0, 0, 0, 0, 0, 6, 0x00007869 ),
  EW_GLYPH( 0x00A1, 1, -11, 4, 15, 6, 0x00007869 ),
  EW_GLYPH( 0x00A2, 0, -14, 11, 17, 12, 0x00007901 ),
  EW_GLYPH( 0x00A3, 1, -14, 12, 14, 13, 0x00007AE4 ),
  EW_GLYPH( 0x00A4, 0, -13, 15, 14, 15, 0x00007C60 ),
  EW_GLYPH( 0x00A5, 0, -14, 12, 14, 12, 0x00007E8E ),
  EW_GLYPH( 0x00A6, 1, -14, 4, 17, 6, 0x0000803F ),
  EW_GLYPH( 0x00A7, 0, -14, 13, 19, 13, 0x000080B9 ),
  EW_GLYPH( 0x00A8, 0, -14, 9, 2, 10, 0x00008399 ),
  EW_GLYPH( 0x00A9, 1, -15, 15, 15, 17, 0x000083D2 ),
  EW_GLYPH( 0x00AA, 1, -14, 8, 7, 10, 0x0000872E ),
  EW_GLYPH( 0x00AB, 1, -9, 9, 8, 11, 0x000087F0 ),
  EW_GLYPH( 0x00AC, 1, -8, 10, 4, 12, 0x000088C1 ),
  EW_GLYPH( 0x00AD, 0, -7, 7, 2, 8, 0x00008932 ),
  EW_GLYPH( 0x00AE, 1, -14, 15, 14, 17, 0x0000895F ),
  EW_GLYPH( 0x00AF, 1, -14, 9, 2, 11, 0x00008C35 ),
  EW_GLYPH( 0x00B0, 1, -14, 7, 5, 9, 0x00008C6C ),
  EW_GLYPH( 0x00B1, 0, -13, 11, 13, 12, 0x00008CEF ),
  EW_GLYPH( 0x00B2, 0, -14, 8, 8, 8, 0x00008E1D ),
  EW_GLYPH( 0x00B3, 0, -14, 8, 8, 8, 0x00008EFE ),
  EW_GLYPH( 0x00B4, 1, -15, 6, 3, 8, 0x00008FEC ),
  EW_GLYPH( 0x00B5, 1, -11, 11, 15, 13, 0x00009031 ),
  EW_GLYPH( 0x00B6, 0, -14, 10, 14, 11, 0x00009133 ),
  EW_GLYPH( 0x00B7, 1, -8, 5, 3, 7, 0x0000922B ),
  EW_GLYPH( 0x00B8, 1, 0, 5, 4, 6, 0x00009264 ),
  EW_GLYPH( 0x00B9, 1, -14, 5, 8, 8, 0x000092AF ),
  EW_GLYPH( 0x00BA, 1, -14, 8, 7, 10, 0x0000930B ),
  EW_GLYPH( 0x00BB, 0, -9, 11, 8, 11, 0x000093CE ),
  EW_GLYPH( 0x03A9, 0, -14, 13, 14, 14, 0x000094CA ),
  EW_GLYPH( 0x04A9, 0, -11, 13, 11, 13, 0x000096A2 ),

  EW_FONT_PIXEL( AppFontMediumBold, 0x00009812 )                /* ratio 60.45 % */
    0xEF7BDEF7, 0xDEFFC3BD, 0x23C51EAD, 0x8AC94C85, 0x9C4289E7, 0x1EAB3093, 0x0F559800,
    0x158939C4, 0xC84513CF, 0x23C51E94, 0x5BBDFF87, 0x2C6EF7BD, 0x3025C080, 0x2FBDD600,
    0xE1F6F73C, 0xFBDCF3F9, 0x8265F7BF, 0x0E0830E0, 0xF37DCE09, 0xDC3205DE, 0xE78B00C5,
    0xE4FE03CF, 0xEF73C190, 0x7FBC94E2, 0x97B9E000, 0x1FEF79B5, 0x80F0F383, 0x8830E787,
    0xE2F65F7B, 0x710000DE, 0x7D0E786F, 0x5FE1906F, 0x9FD4500C, 0x00118802, 0x00006ECE,
    0x3BCCBBE2, 0x0F603F60, 0xA3FBF266, 0x47E554B9, 0xEBAA2C11, 0x2338C7E5, 0x5E326FD6,
    0xE605DF62, 0x424FA07F, 0x2BC4DBEE, 0x3EB26FD6, 0x5BD7462A, 0xFC1C8C4C, 0x1A910E32,
    0xD4BC93FF, 0x8C2DF00E, 0x03EEF9B3, 0x7BDF4020, 0xCB58017F, 0x1DF63EA7, 0x54B3D4FC,
    0x2E0490F4, 0xE041D2CF, 0x3F0B1AF2, 0x85D22CF5, 0x39927CB5, 0x8B7BDF40, 0x607EF7BC,
    0xF3CFCA4C, 0x566151C2, 0x0DE95859, 0x195B6410, 0x95A30820, 0xB8C594F9, 0x79F1EF9B,
    0x7BDEEA5E, 0xC1FA8077, 0x9B52E0B8, 0xC6726078, 0xF3EE2803, 0xE78FC0F0, 0xC89C8363,
    0x913BC033, 0x7ABEFB19, 0x786BD832, 0xBC5DDE4C, 0x037E023C, 0xC4778AFE, 0x7D8D2C83,
    0xFF197226, 0xC67E9201, 0x00E02FBD, 0xC0FFDE12, 0x1EB27337, 0x9A2D11EB, 0x3164C697,
    0x078A08C2, 0x90048387, 0x81060608, 0x60F141C3, 0x2C981184, 0x2D10FCBC, 0x1FA3D617,
    0x39E3337C, 0x787D620D, 0xE5E267A6, 0x1E2F340D, 0xC0C53226, 0x5C1C90A2, 0x25C00012,
    0x8A4C1C91, 0x99306218, 0xF0E97978, 0x26796786, 0x73C07D62, 0xA26003EF, 0xFFA93FCE,
    0xE9B2231E, 0x1FBACF1C, 0x0FE4EEFC, 0xE9996781, 0x03ECA64B, 0xB8C7FDC6, 0xEF7BC137,
    0x0000000F, 0xF7B9E000, 0xFBDEEA4E, 0xEF73C000, 0xF7BDD49D, 0x00000001, 0xEFBDF800,
    0x03BDEE0B, 0x87151640, 0xF0F6FDF6, 0xFDEF7BDC, 0xBFDEF203, 0x390F1C87, 0x605BDF40,
    0x0F0A82CA, 0x8F107C38, 0xC0F8B091, 0x9E1C82C7, 0xA6038F80, 0xC130A828, 0x8C7883E1,
    0xFE07C584, 0xEEFC402C, 0x8817F7BD, 0x78275053, 0x1E5E37B1, 0x21E68C7A, 0x02320C19,
    0x0000058B, 0x58100000, 0x060C902C, 0x8C7A1E19, 0xF60DE1E6, 0x3EE25E26, 0xBCC03750,
    0x5F73A977, 0x7800BF3C, 0x13BDCF13, 0x00000000, 0x00000000, 0xEF7DC800, 0xFF513BBD,
    0xBC9FE301, 0x3687FFE4, 0x58B59B92, 0x84B9330C, 0x8F8BEFB1, 0x2C53A01F, 0xC0FE2D60,
    0x3C037E6C, 0xF502BF2F, 0x3F502BF1, 0x87E2057E, 0xDEF7BDDF, 0xFF8C0005, 0x417EF7BD,
    0x84E784ED, 0xEF1B3C8F, 0x458C6E08, 0x126F7B8D, 0x1C99E02C, 0xBC7EF73C, 0xCF0D800F,
    0x579E3FBD, 0xD65EA08E, 0x4027DFF3, 0x2F18BE14, 0x36752F15, 0x3A81FCDA, 0xBDEEF803,
    0xC003D401, 0x001BC007, 0xD0E004C6, 0x80B34E80, 0xB80BC4B1, 0xF839807C, 0x07F38DDD,
    0xBDEF7980, 0x01FCE377, 0xEEFC0000, 0xFBDEF7BD, 0xD8300267, 0x17FBDEF7, 0x08830241,
    0xDEF71260, 0x6F8010FB, 0xFE73D359, 0x7EF7CB41, 0x24051B91, 0x24EF77E2, 0xC4778311,
    0xF60DEA25, 0x4EE27E49, 0xFE301FB0, 0xDE01DEF7, 0xA93D009D, 0xF172077D, 0x51F806FD,
    0xEEA1E00F, 0x00C1F7BD, 0xFDF8137C, 0xE55F0683, 0x0C02189F, 0x127F0F4C, 0xB93D61D3,
    0xF879E1C9, 0xAF8BC1FE, 0xEE797621, 0x7BDEF7BD, 0x88005DEF, 0xEF7BDEE7, 0x9A0263FD,
    0x0F87C805, 0x2049E3F0, 0xA5E02F26, 0x0B8B1006, 0x9A016498, 0x1312601F, 0x1980BCD0,
    0xEEFE404C, 0xC817F7BD, 0xE09D417F, 0xF2F1BD87, 0x1458C730, 0x67F1600B, 0x33F8B18E,
    0x89E9BD9B, 0x95F1FC0D, 0x579E6FF8, 0x7E397C3C, 0x0888004C, 0x0C8FCCBE, 0x0FFFE23F,
    0xC407679A, 0xDEFB907E, 0x7FC6177B, 0xE25CBF40, 0x072B31FF, 0x27267CFF, 0x24166C90,
    0x3FC11C83, 0xF11F85EB, 0x3F3C21FF, 0xDEF75240, 0x8A30145B, 0x99B7E41F, 0x0FFF7183,
    0xF7E202F5, 0x7BFDEF23, 0x2390F1C8, 0x0003FDEF, 0xEFF7BC80, 0x0E43C721, 0x879FEF79,
    0xC8721E1C, 0x0000FF7B, 0x077BDC00, 0xE1515200, 0x3DBF7CD0, 0x42FBAC00, 0xE325B77C,
    0x719C1E7F, 0x3EFB9277, 0x07FEE785, 0x415DCF03, 0xCE7D17DD, 0x441DDE60, 0x12FF38C3,
    0xF7EEFE40, 0xBDEF7BDE, 0x7801FEF7, 0xDEF7BDEF, 0xBC00FF7B, 0xEF7BDEF7, 0x7E007FBD,
    0xEF9401F7, 0x9D634076, 0x2FEEB25F, 0xA93FFFA9, 0x45C87DFF, 0x7CC1F7BE, 0xBBE27FEE,
    0xF7D8C3E3, 0x07B3AD21, 0xC0076FFC, 0x3BDEF7BA, 0x5B7835F1, 0x5879F43E, 0x15BFD7F2,
    0xF156A107, 0x27780467, 0x3D93BC17, 0x03FE4C60, 0xF302543C, 0x00001FDE, 0xF807EF75,
    0x3CFE00F3, 0xF7BDD600, 0xA801DBDE, 0x7F7BBEDB, 0xE603CEB1, 0xEA1F7BCF, 0x78C2BE7C,
    0xE59E04F5, 0x38CB9687, 0xCBD7DEF7, 0xEC67CA32, 0xA3B33E78, 0x8AE3C56C, 0xC786B82F,
    0x29863916, 0x1E985748, 0x10125FC5, 0x2C267F03, 0x1C208188, 0x258431D2, 0x3F281E99,
    0x59CFE18F, 0xCB195C83, 0xD3DAA79F, 0x2EBBB1EB, 0xEF75B435, 0xFBDEEFED, 0x01F95C0B,
    0xEE7B6300, 0x137BE30A, 0xCFABEE30, 0x00054FDD, 0x0007BDEF, 0x4C007893, 0xF0FE00B8,
    0x608B2004, 0xE5EA3E02, 0x0FFE4C03, 0x2B054039, 0x2A1C0F8B, 0x0F1099FC, 0x898BEF75,
    0x1F1FC009, 0xBEF7BDCF, 0x81C91A54, 0x1447CF89, 0xBDCF4C98, 0xEF7BDEF7, 0x81FBC004,
    0x33C3CF73, 0x00F0F880, 0x3F880302, 0x833DCE0A, 0xC0FC001D, 0x4D65F7B9, 0x00FE2CC0,
    0x187CC001, 0x897DEE70, 0x41BCC017, 0x7BDEF77C, 0x80F38C27, 0xFB1B1377, 0x71368CBE,
    0x7E98B986, 0x911F813C, 0xBDC61FC9, 0x00000337, 0xF2400040, 0xCDEF7187, 0x87E04F1F,
    0x5AC3389C, 0x6FB1B12C, 0x1E719A33, 0x7BDE6EF0, 0x4EF7BDEF, 0x80FFBC00, 0x3F25F7BC,
    0x03D4DCC0, 0xD801C518, 0x0008003C, 0xC004B800, 0x715401E0, 0xF18FF440, 0xE459EF20,
    0x0FF7C01F, 0xEF7BDEEB, 0x00BEF7BD, 0xEF7BDE40, 0x00002FBD, 0xBDE40000, 0x001FDEF7,
    0xF7BDEF20, 0x000000FE, 0x7BDE4000, 0x003FBDEF, 0xBDEF7BAC, 0x00BBDEF7, 0xDEF7BC80,
    0x0000177B, 0xBDE40000, 0x0017DEF7, 0x7BDEF790, 0x0000005F, 0x00000000, 0xDEF7BDF4,
    0x8167102F, 0xE0BE0CE7, 0xA31C3FBD, 0x64DAA6F8, 0x630788FD, 0xF4078349, 0x000017FD,
    0x7BDEF7FE, 0x3C180017, 0xFC4DEFFC, 0x1E300588, 0xC25623BA, 0x34E75837, 0x7D02FD8A,
    0x0FF7BAC7, 0x00FEF77E, 0x00000000, 0x20000000, 0x16F7BDEF, 0xDEF20000, 0x00016F7B,
    0x00000000, 0x73C00000, 0x000005EF, 0x00000000, 0x1FDEEFC0, 0x00000000, 0x00000000,
    0xCE400000, 0xDEF88035, 0x363263FE, 0xEC9BC6F1, 0x3C99E62A, 0xF7835F8F, 0x23FDEEB3,
    0x0037BDCE, 0xF00760FF, 0x58037E0D, 0xD3C05D0F, 0x47E405CC, 0x003800BD, 0x7C0005F0,
    0x5A8FFF00, 0xD0F3E640, 0xFE0BE003, 0x07C4FE00, 0xB3CF1630, 0x0003FDEE, 0x00000000,
    0x00000000, 0x00000000, 0xEF200000, 0x07DEF7BD, 0xBBDEEB00, 0x7BDEE781, 0x01700C61,
    0x800F107C, 0x0F001309, 0x461C003E, 0x7D2A0C02, 0x63C3C00C, 0xF0E203F2, 0x95012A4D,
    0xF800E5F2, 0x13001E20, 0xE0F10026, 0x18C38007, 0x0DEF77E0, 0xC2FBDFF8, 0x00F50007,
    0xD00017C0, 0xA00B3000, 0x3F005E1E, 0x63E201B2, 0x0053C025, 0x364002F0, 0x0001AC00,
    0xBDEEB017, 0xD3882EF7, 0x05F04FA0, 0x4F88FDDF, 0xF3C7BF15, 0x28CFEAA3, 0xF0FFE0D4,
    0x00278780, 0x00200010, 0x780F0F10, 0x30A33678, 0xF8A7FF06, 0xA33678CD, 0x3E7BC17C,
    0x069C4FE2, 0xF7BAC27D, 0x7DEF7BDE, 0x04F30003, 0xF87EF7B8, 0x02A69E00, 0x24006060,
    0xA979E006, 0x87EF7B80, 0x0339E006, 0xFDEF7BDC, 0x00000002, 0x40000000, 0x5DEF7BDF,
    0xFE817790, 0x79DF0707, 0xD833CFC9, 0x1A8FCC4F, 0x92781A97, 0xC58062DF, 0x4C182E48,
    0x305C9000, 0x16018B98, 0x4A81A979, 0x3F60CFFE, 0x39547F31, 0x7C4BCEF8, 0x24405DE4,
    0x1FF7BDF4, 0xF3C809EC, 0x73BE0050, 0xBDEF77F2, 0x00FFDEF7, 0xDD417720, 0xC601F1BB,
    0x0780188F, 0x0260F013, 0xEA0723F5, 0x002E1FDE, 0x1FDE6127, 0x0FC5500A, 0x201625E0,
    0x17809D17, 0xBDEF758D, 0x69C40BF7, 0x07419CF0, 0x1438DDEF, 0x723F1A73, 0xFFA83C98,
    0x71870FFE, 0x3C91C857, 0x09DCFA2F, 0x9EF059E6, 0x7FFBE884, 0x6FD72388, 0x18C7DF92,
    0x2616F5D1, 0xC8F7E48C, 0x77C5D23F, 0xF21BC1FF, 0x7A7B102E, 0xDEF7BDEF, 0x3FBDEF7B,
    0x7BDEF000, 0xF7BDF60F, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0xDDF80000,
    0xEF7BC2FB, 0x0000001F, 0x00000000, 0x00000000, 0xC9100300, 0xC9FE6282, 0x392FC45F,
    0x8A73A8B5, 0xFC07FA55, 0x0DEF7BDA, 0xFBEF7B88, 0x8DF0A0A1, 0x8721C0E4, 0xF8A20A8F,
    0x1E145078, 0x461CB8B2, 0x8A23CFE2, 0xC29E160F, 0x97B87882, 0x79E1C027, 0xC40540B8,
    0x00B05803, 0x4600F83E, 0xBDC60392, 0xDEF71077, 0x6B7BDC41, 0xE2850F04, 0xF2E1E3C1,
    0xC23366C7, 0x0C50A1E6, 0x0C43061E, 0x85361E18, 0x2C19502A, 0xB166C60C, 0xFE289917,
    0xB36A9BC5, 0x4693CFE0, 0x050D9314, 0x440F06CA, 0x031056C2, 0x3C489414, 0xC1E145C0,
    0x7F1B0A06, 0xEF7B8C0C, 0x6DDEE70B, 0x83A0E62C, 0x2E57074B, 0x98C7C0E6, 0xE1EA1A2F,
    0x3F00BE2D, 0x0D100F50, 0x4008002F, 0x0BC05C36, 0xF8B302C6, 0x2F103A1E, 0x43F0FCF5,
    0xF3CD15E3, 0x564AC9A8, 0x7BDDF3F2, 0x6EF7FE03, 0xD24F178D, 0xA682B172, 0x27AF178A,
    0xA2B34469, 0x60AC0679, 0xC9340D27, 0xBC26604A, 0x800E8D00, 0x00000242, 0x00000000,
    0xDEF7B880, 0xF7BDEF7B, 0x7B880006, 0xA377BDEF, 0x05A87003, 0xF00F9378, 0xE200BE4C,
    0x8F803E63, 0xF8AB0178, 0x01E9B203, 0xE8058CB8, 0xE17200E4, 0xF7BDEF7F, 0xBF00013E,
    0x001DEF7B, 0x00001DE6, 0x00000000, 0x00000000, 0xD0077980, 0x1F80FEF7, 0x0F146095,
    0x2603E7F0, 0x00E4C059, 0x31804F1F, 0x07C7C098, 0xC980B24C, 0x009E3E01, 0x8F813063,
    0xFD64580F, 0x8037BDEF, 0x000006FF, 0x00000000, 0x00000000, 0xD0006FF8, 0x993036F7,
    0x81E209E0, 0x54A30703, 0x39C7C1A9, 0xE78A627C, 0xBDEE3309, 0xEF7BDEF7, 0xBDEF2005,
    0xC3D66E4D, 0xDFC9B1F8, 0x42FEF7BD, 0x46EA0BFE, 0xF989BFE3, 0x28E4FBDB, 0xDEE7384E,
    0x3404ED42, 0xBE0C2DF6, 0xAB139201, 0x31A751F0, 0xFF580BD6, 0x0000177B, 0xFA000000,
    0x800B7BDE, 0x47FD815F, 0x31FC8F43, 0x004C2812, 0x0A008002, 0xC7F23D13, 0x347FD848,
    0xF90AFC24, 0x85DEF7BF, 0x1FE84FF1, 0xD47FF887, 0xCF9D9233, 0x9221FFC3, 0x060EDEEF,
    0x87801820, 0x73BDD648, 0x669F3B24, 0xA3FFC438, 0xD09FE31E, 0xEF75803F, 0x0000001F,
    0x7BDEE300, 0x7006C61B, 0xE0E437B1, 0xE2634637, 0x04010201, 0xE4051300, 0xC34637E0,
    0x6C60DEC5, 0xBDEF3008, 0xBEF03FF7, 0x26787B90, 0x876833BF, 0x3C5438AE, 0x647FBDF4,
    0xDEF78000, 0xC51DEF7B, 0xBEA7F01F, 0x7CDB7BA8, 0xE48FCE78, 0xC1FBC17B, 0xBA1EF7BA,
    0x5EEA4C11, 0xF17BC382, 0x5EF005DD, 0x0001777C, 0x00000000, 0xEE300000, 0x7BDEF7BD,
    0x62E00D8D, 0x37C1C86F, 0x028987C6, 0x00040102, 0x28818A0F, 0xD0BC637E, 0x1D8C1BD8,
    0xF7B9C600, 0xEF71862E, 0x8A51678C, 0x5B647CF7, 0xFEFF303F, 0x00002EF7, 0xDF400000,
    0xF004EF7B, 0x38FEFC16, 0x04C5CAE8, 0x0000012E, 0x00000000, 0xF5DEEB00, 0xB7E3F7E3,
    0xDEF05DEE, 0x000003FB, 0xDD600000, 0xF3F8F93B, 0x3BDD67F1, 0xFEF77E01, 0x00000000,
    0x00000000, 0xDFC87884, 0xADE07609, 0x002FBDDF, 0x00000000, 0x0FDEF718, 0x307C66C4,
    0x4F07F136, 0x4BE003B2, 0x63002F00, 0x13A2CF01, 0xE00E4E8C, 0x16301630, 0x7F7BDE3D,
    0x00000000, 0xF7000000, 0xF7BDFFDE, 0xDEF7BAD6, 0x86BF0905, 0xC1FFF09E, 0x5F0F927B,
    0xF8CCF156, 0x83060091, 0x00000000, 0x00000000, 0x00000000, 0xBFFBDFF8, 0x0909DEF7,
    0x3FBF03EF, 0x3172BA2E, 0x00004B81, 0x00000000, 0xDDF10000, 0xC817EF7B, 0x9273C0F3,
    0x95E37B17, 0x1F8C6FC5, 0x61450B95, 0x2C000001, 0xC5958514, 0x951F8C6F, 0x978DEC5E,
    0x49CF053C, 0xBDCF7BFF, 0xF80816F7, 0x0D1BD815, 0x918FC63D, 0x040983C0, 0x50040802,
    0x3E31E898, 0xB8DEC246, 0xFA037E00, 0x000B7BDE, 0xD4000000, 0x7B9EF7BD, 0x0107EAFF,
    0x0C61BD8D, 0x2634637E, 0x0000000A, 0xC1C80A16, 0xC6868C6F, 0x0036A0DE, 0x1B7BDEE3,
    0x00000000, 0x7BDEF77E, 0x77E0203F, 0x0005987F, 0x00000000, 0xEF7B9E00, 0x03EB13BD,
    0xE799A2EF, 0xF1FE05A1, 0xC3C4665B, 0xBEEFCEEF, 0xFFD07BE1, 0x97EEF893, 0xB7FE36C4,
    0x8621FF9F, 0x182C56B4, 0x352F3E93, 0x1FE82FBC, 0x000FBDEE, 0xEF8BBF00, 0xC5DF800E,
    0x00000777, 0xC1000000, 0x1F758A1F, 0x7BFF113A, 0x3FDEEB17, 0x00000000, 0x00000000,
    0xC6ACE8B0, 0xF507FFC1, 0x7FBDF401, 0x3F5DEFFC, 0x19E48D32, 0x7A462949, 0xF8FCDBF8,
    0x8C3C5151, 0x8F8919A4, 0xF01E0FC9, 0x048C0E40, 0x0780FC3F, 0x9BBDD60F, 0xBFF177BE,
    0x62831677, 0x3046A48B, 0x90F15072, 0xDA82A8A9, 0x1FFF9B14, 0x545360F6, 0x8A1EB0C9,
    0x44B3C14C, 0xDF828118, 0x188D8286, 0x14286C0F, 0x5C188285, 0xBDD40CFE, 0xEF7B8CB7,
    0x52ED0F53, 0x37E31F8F, 0x58A68978, 0x06889589, 0xC688261F, 0x18D0680A, 0x5C1CC593,
    0x39AE1FAA, 0x7D58CD68, 0xB7B9C1EF, 0x8230C47F, 0x14FC18DF, 0xFC78FC39, 0x67C878F8,
    0x1F8390F0, 0xF823F123, 0x440F04C1, 0xE3F82461, 0x403C2C07, 0xC7E41231, 0x627FFE07,
    0x88372082, 0xF7BDEF7B, 0x88001BDE, 0xE8DDEF7B, 0x816A7F00, 0x9CC0F837, 0x65F202FC,
    0x068C3815, 0x1720383D, 0xFBDEF7FE, 0xF7500004, 0x881FCC0E, 0x21E0DF97, 0x0084C90B,
    0xD9B20000, 0x016A7F3C, 0x85A9FCF0, 0x0000366C, 0x50992004, 0x6FCBC164, 0xEE30FE60,
    0x0000007D, 0x00000000, 0x05BDC600, 0xFD44DF8B, 0x0292A178, 0x60040004, 0xC4E9B091,
    0x000FFE2A, 0x6C3FF8AB, 0x0848B13A, 0x95020000, 0x3F1FA8A2, 0xAC0F7E2C, 0xBC19EF7B,
    0xB11B37F7, 0xE3EB4D57, 0xEF8FF4D7, 0xC0ED6AB1, 0xEBBDD73B, 0x5BE3F7C7, 0xF7582EF7,
    0x011700BE, 0x040C040C, 0x80999E20, 0x001FDEFA, 0xF31F7C40, 0xE40FD89F, 0xFBF2753F,
    0xE5743DA3, 0x78324547, 0x00B03DEE, 0x8C524400, 0x5743DB7D, 0xC9D487FE, 0xFB341FEF,
    0xF127FC81, 0x027FCC7D, 0xFEF7D400, 0xBDEF7580, 0x835F81F7, 0xFAC5526F, 0xA20C7E0F,
    0x300232F3, 0x01013DEE, 0x2F7B8DB8, 0x70FDC000, 0x000005EE, 0xC0119700, 0xDEF7187D,
    0x0003EF7B, 0xD0220044, 0xF7BDF4E7, 0x23E7BEDE, 0xC9856059, 0x0FCEF897, 0x7DE52336,
    0xE1E0EEA2, 0x972E0BC7, 0x130603C1, 0x01E0C000, 0x178FC983, 0xDE492E5C, 0x160EEA27,
    0x0FCEF87F, 0xE8346D36, 0xAF775347, 0xEBBDEF7B, 0xF7BAD3BB, 0x5DEF7926, 0x2C3E3F0B,
    0x668B0CCD, 0x2C2C4E61, 0x5E0B1FDE, 0x26217922, 0x4EEFC0CC, 0x0005F798, 0x7516F77E,
    0xDEEFCBEF, 0x017DEEA2, 0x45BDDF80, 0x8002FBDD, 0x0017DEF7, 0xF7BDE000, 0x17DEF785,
    0x88000000, 0xEF7BDEEF, 0x01E7181B, 0xDF8D04F3, 0xBC3CD17D, 0x921E2E65, 0xCBEBF78D,
    0xC676E78F, 0xD61306B3, 0x01FC36FF, 0xF0630EEB, 0x02E267BF, 0x3118FDE2, 0xF0087FF0,
    0x8FEF77C3, 0x80BFD427, 0x777F21F1, 0x67894617, 0x9377E30D, 0x277AF9E3, 0x0FF8508A,
    0xB0F924CF, 0xD9E687EF, 0xEC13CC03, 0x6F73C77B, 0xDE204183, 0x0DBDEF7B, 0xDF6399D4,
    0x8C0EEB9D, 0xC61EDF9F, 0xE393B3FF, 0xEF7BFF9D, 0x7331DAAF, 0x8FF59DCC, 0xF518ADFA,
    0xCBE19BF7, 0x4FFA63D7, 0xFEB0C8E3, 0x5A4F7F7F, 0x69113201, 0x4C44C805, 0xFEB0C8E3,
    0xDFCF7F7F, 0xAF97C2B7, 0x999FF4C7, 0xA3FD676B, 0x1CAA2B7E, 0x7BDFFCEF, 0xC65ED57F,
    0xE30F6FCF, 0x3A89D9FF, 0x73BBEC6B, 0xEF7581DD, 0x5EB54BBD, 0xEB3DD47A, 0x773DE3C7,
    0x377A6B13, 0xE1CC3F90, 0x7BACB8B7, 0xD1877BBF, 0x870D63C6, 0xC24DED14, 0x126F000F,
    0x68A4387E, 0x358F1B46, 0x7BDEF77E, 0x000FBDEF, 0xBDEF7BBF, 0xF73C0013, 0x00FF7BDE,
    0xBDEF77C4, 0x9CF00DF7, 0x63DDF6A7, 0xD9F3C29E, 0xEDEC61BF, 0xCFB3E257, 0xF2FEF7BD,
    0x833D79F3, 0x67BEA33E, 0xE2172CC4, 0x34ECFCA7, 0x2D253E21, 0x486A4FA0, 0x2B96FA0F,
    0xD83F9FAD, 0x553D9F86, 0x1988E601, 0xCBB9DF9F, 0xC7D7BFBA, 0x61BFD9F3, 0xE15F9FEC,
    0xDDF6B339, 0xB9E29E63, 0xEF7BDEF7, 0x7BDD6000, 0xAE9F6A97, 0xA4653C61, 0xDA7C94F1,
    0xF7581FA7, 0x0243803E, 0x7B880000, 0xFDEFA4EF, 0xBDEE2003, 0x0FF7BE93, 0x10400000,
    0xC277BE80, 0xEF7BDEEF, 0xC00177BD, 0x47DEF7BC, 0x8BE3D6BD, 0xE720DF14, 0x6C49263D,
    0xF78760BE, 0xF277A761, 0x977BDE0C, 0x65DEF7BE, 0x31E8FD2E, 0x7BC05DEF, 0xDEF06B1F,
    0x9DE31AC7, 0x5DF3552E, 0x3F4B5A97, 0xF7B9E1BE, 0xF57C7E56, 0xBDD63EF0, 0x1F7BDC7F,
    0x00000000, 0x00000000, 0xF1580090, 0x0099F402, 0xF7BDE400, 0x0000FBDE, 0x7F200000,
    0x977BDEF7, 0x05C02FF1, 0x001001C8, 0x000E4002, 0x17F8C017, 0x9DEEFE40, 0x00000000,
    0x4F7BC800, 0xC459E22C, 0x1F2DEFB3, 0xFE0F9ABF, 0xBFF52E8F, 0xCD2FFFBF, 0x0001107D,
    0xBDEEB000, 0x7BED5A77, 0x9F27F3BD, 0x2200BE99, 0xE7C9F880, 0xDF6ADF49, 0xB77DA7A7,
    0x635C377D, 0x4C61635D, 0xE681EA6D, 0x001FE3FF, 0xF8FFF9A0, 0xA9B53187, 0xD758D707,
    0xEFFC6058, 0x3097F7BD, 0x8BFD4277, 0x1BFE32F1, 0x3B12F0BF, 0x87AF1FC7, 0xE0541C85,
    0x0C0124C0, 0x2220C002, 0x163C10B8, 0x3F7F0F05, 0x4C42A0C6, 0xFD47B2F9, 0x9C5F73F8,
    0x001FF61F, 0xFABBDCF0, 0xF9E1FBDE, 0x979E1778, 0x919930A6, 0x8BE43FC9, 0x0200F027,
    0xF9160400, 0x2FF06660, 0x9978623E, 0xC3D65E09, 0x7BE3FD04, 0x00001EA1
EW_END_OF_FONT_RES( AppFontMediumBold )

/* Table with links to derived variants of the font resource : 'App::FontMediumBold' */
EW_RES_WITHOUT_VARIANTS( AppFontMediumBold )

/* Bitmap resource : 'App::hazard' */
EW_DEFINE_BITMAP_RES( Apphazard )
  EW_BITMAP_FRAMES( Apphazard, Default, EW_DRIVER_VARIANT_RGBA8888, 217, 198, 0 )
    EW_BITMAP_FRAME( 50, 91, 119, 107, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Apphazard, Default )                    /* ratio 6.11 % */
    0x1C080100, 0xC1A0B048, 0x28FF0883, 0x61A62014, 0x01101083, 0x4B5898A9, 0xEA028241,
    0xC03BAA06, 0x8F831ED1, 0x08323EFF, 0xC9245209, 0x96532691, 0xE592895C, 0x5B2A97C9,
    0x32E984CA, 0x3699CD26, 0x89DCD673, 0x9FCDE793, 0x050A7B3A, 0xD12833EA, 0x169346A1,
    0xE9948A5D, 0x9B4AA7D1, 0x34EA854A, 0x56A9D52A, 0x8ADD56B3, 0xAFD5EB95, 0x058ABB5A,
    0xD92C35EB, 0xC6D204A9, 0x404028D3, 0x72397500, 0xA0B750D8, 0x3C21226E, 0xC2A8B84C,
    0xBFC20077, 0x1E0B0380, 0x8743582C, 0x1A2CB8C3, 0xB19037F8, 0x2000C740, 0xF94C6E4B,
    0x97C8E571, 0x8CDE5B27, 0xCEE6B399, 0xCE8B3FA0, 0xE973DA4C, 0x9B47A7D0, 0xB59A8D5E,
    0x5FB0D6EA, 0xDB4D4ECB, 0xB7D8ED75, 0x8DDEDB67, 0xDEEEB79B, 0xCF0B7FC0, 0xF177DC4D,
    0x1B87C7E0, 0xB99C8E5F, 0x9FD0E6F2, 0x1C9E4F4B, 0x2B6E7583, 0xC2F06050, 0x050CC664,
    0x0F8BC384, 0x8342A19F, 0x3AD7034B, 0x7DBEBEA7, 0xDDEFF674, 0x7F0F974F, 0xF6FBFC7E,
    0x4FDFD7F3, 0xFE7E3FBF, 0x9FA7F9FF, 0x180E0080, 0x260681E0, 0x016A6058, 0x05591004,
    0x0DF05015, 0x30FE1405, 0xA18385DE, 0x130341A0, 0x0982A0AC, 0xE0482CE5, 0x588A0888,
    0xA20A8922, 0x278A6268, 0x8BE2C8B6, 0xE2A8C62B, 0x58CA2E8C, 0xE2308D23, 0x0D3FE368,
    0x0FCFF006, 0x0A50C43C, 0x85F8005F, 0x3C1C8621, 0x210200E0, 0x8DE4E8EA, 0xE518E650,
    0x293E548E, 0x4E5595E5, 0x58966569, 0x96A5E96E, 0x66197660, 0xF5B80363, 0x5C260ACF,
    0x8191DE80, 0x0B845145, 0xC1205016, 0x6970E102, 0xE66297E7, 0x7898E779, 0x9F67A9EE,
    0xE829F280, 0x69FA839F, 0xB5D2A068, 0x4A1323E5, 0x3FCA4110, 0x26C83A90, 0x60880100,
    0x16872DE9, 0x84A6688A, 0xA7E9CA76, 0xE9AA869B, 0x5A8A9EA8, 0x86A0A92A, 0xFFAAC039,
    0x0B8340DC, 0xC4791C53, 0x7AA46BAC, 0xE6B6ADEA, 0xA8AEAA6A, 0xAF6BEAEE, 0xABFAE2C0,
    0x0816C1B0, 0x60090381, 0x1C0E0543, 0x77982024, 0x40E01433, 0xC3AC0703, 0x5ED8B12B,
    0xDBB0EDAB, 0xB7EDCB16, 0x2D9B86DE, 0x87E2E3B8, 0x0888B9C3, 0x14080236, 0xB963D194,
    0x2F1B76F0, 0x4BD6F2B9, 0xDAE2BDEF, 0xF3BE2F9B, 0x084237E2, 0xD823EC1B, 0xE30002AA,
    0x080C03A7, 0x6E20CFF0, 0x2B4FF068, 0x0FF0889B, 0x307CA22E, 0x5B17C571, 0x18C6B14C,
    0xC7F19C6F, 0xF1DC871E, 0x0C971CC8, 0x9B27C932, 0x28CAB22C, 0xCBF29CAF, 0xF2DCC72E,
    0x0CD72CCC, 0xDB37CD33, 0x38CEB32C, 0xCFF39CEF, 0xF3DD073E, 0x0D173CD0, 0x1B47D134,
    0x48D2B42D, 0xD3F49D2F, 0xF4DD474E, 0x0D574CD4, 0x5B57D535, 0x48D6B52D, 0x080A02D3,
    0x87C244FF, 0x10D83FC5, 0xF96E3FC1, 0xFFA2A5C8, 0x160651A0, 0xC1E4104E, 0x60440F03,
    0xE4030140, 0x0E120559, 0x35CF23FC, 0xCD8A402A, 0x1352900A, 0x17863FF8, 0x88E2787E,
    0xE2B8EE2F, 0x391E3790, 0x2E3F94E3, 0x4F95E5F9, 0x98E6796E, 0xE6B9EE6F, 0x3A1E77A0,
    0x2E7FA4E7, 0x8FA5E9FA, 0xA8EA7A6E, 0xEABAEEAF, 0x3B1EB7B0, 0x2EBFB4EB, 0xCFB5EDFB,
    0xB8EE7B6E, 0xEEBBEEEF, 0x3C1EF7C0, 0x2EFFC4EF, 0x0FC5F1FC, 0xC8F27C6F, 0xE10DBE9B,
    0xC25294BB, 0x9048163F, 0x1F089737, 0x5E410690, 0x1FC50170, 0xC3A10A5C, 0x9348F6D9,
    0x37E8F282, 0xECF33E9F, 0xFAFEEF2F, 0x7F2FABEF, 0x3FD7F0FB, 0xDFF4FC7F, 0xFCFE7F6F,
    0xFEFFEFE3, 0x009FD3FF, 0x02C007FB, 0xD576D00E, 0x6032DC08, 0x652E3121, 0xC80E02E0,
    0xB12A41C6, 0xE9940223, 0x8598CD1F, 0x40952009, 0x80F01203, 0x07E00C1E, 0x12C22847,
    0x2084F086, 0x5109214C, 0x9A1542B8, 0x7C2C85D0, 0x28670B61, 0xCE421AC3, 0x5C08D81F,
    0x92307C11, 0x2070492C, 0x2C620817, 0x0C01B476, 0xFB1FE020, 0x970C61C8, 0xD226C308,
    0x744F8990, 0x08A50DA2, 0xF14629C5, 0x62CC568A, 0xC548B715, 0x7611622E, 0xC5834072,
    0x1E90487C, 0x570780F4, 0xCE15432A, 0x106C8FF6, 0x845A8BCE, 0x28BF1723, 0xF1D23AC7,
    0xE3C4718E, 0xC7C8F31C, 0x8ED1FA3D, 0x2662A47D, 0x2B81B10C, 0xFC028851, 0x4F2284B0,
    0xB8190330, 0xC0694AE0, 0xF8DD1B02, 0xB2023D47, 0xA4B48192, 0x49C93326, 0x92F27A4C,
    0x27E4DCA0, 0x4BC97945, 0x57038214, 0xFF2A80B2, 0xAE568941, 0x202F0600, 0xA0B08EDC,
    0xF1B5BE84, 0x65CCA48D, 0x4BB94327, 0x97B28E5D, 0x30A5FCC0, 0x5F4C3979, 0x5C861312,
    0xAE04C2A0, 0x7C021694, 0x3CD01223, 0x882840C0, 0x607410A3, 0x46B0FE24, 0xCC698F30,
    0x9BD36E6E, 0x38A6FCC5, 0x6E4E49C3, 0x279CD38E, 0x271287C4, 0x3DEB8100, 0xA10587E9,
    0xA6EE9466, 0x02EC6AB0, 0x2704E505, 0xCFA9F73A, 0x9FD39E7E, 0x40A7FCF9, 0x14D04A03,
    0x76117076, 0x329E40B8, 0xD8070160, 0x805A2082, 0xB4B824DB, 0x80482D86, 0x67E50383,
    0xD1AA0146, 0xA3F47282, 0x47A90D1B, 0x77CC4A45, 0x189F0338, 0xAE0100A8, 0x90C8A0D4,
    0xA8150420, 0x06E84102, 0x49940880, 0x8062386D, 0x8D761402, 0xA3B06C5E, 0x48E90540,
    0x92541A87, 0x44A8B50A, 0x6D52AA3D, 0x307FCDA7, 0xE50A0EE2, 0x400C0192, 0x33407E00,
    0x08201C12, 0x26555691, 0x08E97065, 0xE025B03D, 0xB2D46A92, 0x48ACF592, 0xD152EB4D,
    0xDAB556BA, 0xC0CB1CF0, 0xC3173B27, 0xA0200525, 0x8C109400, 0x01303A08, 0xA5A9703C,
    0x2845D0FF, 0xA68FF62C, 0x66AD95BA, 0xDB62AC3D, 0x36C4D8CA, 0xA568B116, 0x10B61A24,
    0xF5712B55, 0xACC8641F, 0x04B30410, 0x0220B41E, 0x97077A3D, 0x2382705A, 0x8E1A23CE,
    0x17642D4D, 0xAED65AAB, 0x8DAEB1F6, 0xC83B292D, 0x0C48588C, 0x81225CB0, 0x8991996E,
    0x3C4016DE, 0x0400E020, 0x06D7F10E, 0x8712E3FD, 0x5B6C9870, 0x32E6DB0B, 0x85AFB9F7,
    0x1BA372EE, 0x23FDE7BB, 0x40803908, 0xDDC00A9E, 0xBBE14C7F, 0x0FD23849, 0x0600442C,
    0xF200E02C, 0x2E0712E0, 0x4A7552B0, 0x9DD4B9D7, 0x9AC71D6E, 0xA376250F, 0x47F82717,
    0x81E1362D, 0x0E41F87F, 0x1382AB12, 0x310FF01E, 0x4E02C164, 0x657F43E5, 0x687FDFC1,
    0xE5F91803, 0xFB0B58C7, 0x17C70ADE, 0x05DCC4BE, 0x8FF04229, 0x4F6C28B4, 0x41149A6B,
    0x39E2408C, 0x680F09F8, 0x2EE0EE50, 0x62F9616C, 0x20DA7998, 0x91923A1C, 0x6180385F,
    0xC0F02499, 0x4EE6EE62, 0x1FF8F0FC, 0x11C1282A, 0x54072109, 0x907CC3CA, 0x5B8BF09A,
    0xD71664BC, 0xFE311FAF, 0x6AE95EC7, 0x001EF325, 0x71101232, 0x65C11E41, 0x0165D408,
    0x0252E0DF, 0x6E30A00E, 0x2E7CE308, 0x9D9AB266, 0x05F2B92C, 0xE815C6CE, 0xB53905F0,
    0xE244C8AA, 0x87DB600F, 0x66983B61, 0xCFB93736, 0x22EB1BC7, 0x4E8180F0, 0x8F0725C5,
    0x6260B2D0, 0xC40D02A0, 0x785A4F0D, 0xA1FD8102, 0xFA0335E4, 0x60ED6DCF, 0x82316A34,
    0x01609533, 0x10CC92FD, 0x76B67076, 0x7C8DE334, 0x55A5B4C6, 0x2875DD4D, 0xBD297CE3,
    0xC0289732, 0xE17C7ACE, 0x745020D6, 0x02252C78, 0x00A95AAF, 0x34D1F004, 0x55E7ED38,
    0xBC9C9B1B, 0xAB7E4530, 0x6750E3D7, 0x28170366, 0x11C63FC0, 0xFAB29F8C, 0x6F96C7D2,
    0x8590D194, 0xA58A4A8B, 0x0881418F, 0x5D05F02A, 0x790F285F, 0x120EC3A0, 0x707B5770,
    0xB8370809, 0x89283F28, 0xFBDB62ED, 0xC6741D98, 0x011D3A2C, 0x5F5B3407, 0xA83711B2,
    0x340D11E3, 0xD9E0FB5F, 0x373DA806, 0x5B0FD3A8, 0x4F100509, 0xFD15B987, 0xA2340740,
    0x85A191B8, 0x8FF62426, 0xE3FC2754, 0x3C2026F7, 0x12B841A4, 0x0088E080, 0x76114FAF,
    0x587FEA00, 0x4730DEB7, 0xCBAD4178, 0xD0F41A03, 0xC038084A, 0x8540A94A, 0xE2615028,
    0x0F42365A, 0x0381D056, 0xEA1E6DDC, 0xE5B480CD, 0x83830D31, 0xCF4FE63C, 0x20E7075F,
    0x5CA66586, 0x853AEF40, 0x586B0824, 0xE43D4399, 0x2705B49D, 0x2B5B8BFA, 0xB401D431,
    0x01DABA00, 0x6FB68370, 0x58A24FC2, 0x0C292144, 0x5D7FBAF6, 0xF1A0E77F, 0xF0EAEC3F,
    0x0369857D, 0x3C295816, 0xBB74E1A0, 0x26F0FD7B, 0x0835C7C4, 0x28158327, 0xDDDCBB60,
    0xFF261847, 0xBD03B582, 0xC06F980E, 0x25C1AA40, 0x01204C0B, 0xE1BA6B7E, 0xC8FA4EA3,
    0x550DF58D, 0x609E3677, 0x8C1209D1, 0x5F77F5FE, 0x50F42361, 0xE97177E8, 0x855FB805,
    0x903F77E5, 0x0A600EA9, 0x1F52E36C, 0x248190DC, 0xC7F63E97, 0x4E3CDC4F, 0xC9390FFA,
    0x6A5C5F9A, 0x896C1002, 0xDE23D81D, 0x07A3AFFA, 0x8177CE35, 0x4B94AC09, 0x688042C7,
    0xDE292205, 0x48091E5B, 0x3E01C120, 0x706E7EC0, 0xCA3EE8C9, 0xD7A62F06, 0xDFDBE4F1,
    0x6DB0C9C9, 0xFAAD8387, 0x6F3D1941, 0xD86950F6, 0x17C88037, 0x06362B39, 0x7E671056,
    0x001A01F2, 0x7E606A01, 0x51105810, 0x10648130, 0x05F2567C, 0xFE5DA051, 0x57D76F40,
    0x41D81E80, 0x1D0940AA, 0x32B77FD0, 0x5F90AE0C, 0x2A81D81E, 0xD0D83AF8, 0x77C3D30B,
    0x1D01F279, 0xD0E10160, 0x65983608, 0x04839811, 0x04100181, 0x5DC25C0B, 0xD6419379,
    0xD8297F76, 0x07C54D62, 0x2401406B, 0x80A129C8, 0x80451855, 0xFD77582B, 0x50525D60,
    0x27900D04, 0x300FE292, 0x601C02C0, 0x85F83A21, 0x2B034104, 0x56EC1860, 0x25C0FE00,
    0x8F03103A, 0x56510FE7, 0x5D285084, 0x5205A54D, 0x47574850, 0x7720A12A, 0x5F87986F,
    0x80AA0C07, 0x2832654F, 0xBE00C272, 0xF8848600, 0x88703417, 0xFF7180AE, 0xD0980B20,
    0x88F86E5F, 0x5854D67F, 0x54A80500, 0x0A129D87, 0x5177308D, 0xC7208908, 0x5A46510F,
    0xF527B857, 0x78A405C0, 0x8A788503, 0xAA069105, 0x00110298, 0x0F700C01, 0xA06E225C,
    0xA7240F37, 0x54789B87, 0x9506C847, 0xD2D877E5, 0x7744A884, 0xD28B689C, 0x536241D5,
    0x44527E68, 0xA808900E, 0x617F8CB8, 0x57E6E302, 0x8709D278, 0x27F53600, 0x6F88D68C,
    0x960AC381, 0xF8968230, 0x0CA18F57, 0xB78280B4, 0xE64D8448, 0x3840D10E, 0x617CF50C,
    0x600611C2, 0x04204B0F, 0xCC01B025, 0xB1058F38, 0x00653A55, 0x15256712, 0x837E3D60,
    0x8FF8C164, 0xB10C856B, 0x81695F90, 0x27E8BC53, 0xFA6D2116, 0x08D78E30, 0x07E5635B,
    0x7889506F, 0x091402B2, 0x9178F407, 0x1A04C17F, 0xC27880F9, 0x84A06807, 0x008020FF,
    0x64E38E49, 0x3E70D50F, 0xDD78F445, 0x004C2388, 0x0FF85704, 0x0D9237D5, 0x20DE5669,
    0x37741B0C, 0x10257906, 0xB00800D0, 0x7E51030C, 0x02941918, 0xD94409C1, 0x94700900,
    0x086620D4, 0x00DB3790, 0x9327850C, 0x4D4C6950, 0xA06A0795, 0x25192B84, 0xAE0A50BA,
    0x79249517, 0x44A0FD56, 0x5C37D4B4, 0x902C5972, 0x05001C02, 0x86969942, 0x385E85C8,
    0x05206028, 0x5D0FD671, 0xE95C95D7, 0x0CF0EE49, 0xFF6FD4F8, 0x22027D06, 0x18B01C02,
    0x337840F4, 0xD4FB9839, 0x0AB0C341, 0x794F47AE, 0x198C0272, 0x4D25570E, 0x0899196A,
    0xF0150161, 0x27E0C200, 0x9D0B20CB, 0x499C9756, 0x0894944A, 0x0E23C509, 0x01F284B2,
    0x0990AF58, 0x8471E88E, 0xA51D90C9, 0x02E5D60F, 0x578EA026, 0xD0022652, 0x03F0460F,
    0x9202402A, 0xE17F9BB9, 0x1DF9BE06, 0x5692A00A, 0xD0390452, 0x9AC86D72, 0xD69259C8,
    0x068C3840, 0x1C29577A, 0x6C04B055, 0x99749C74, 0x54D5059C, 0x120930A9, 0x60272839,
    0x0A002102, 0x7F9E19BC, 0x207F10A1, 0x0144D600, 0x802568CA, 0xC0980AD5, 0x9D68C061,
    0xDC49D99D, 0xB3D30BF0, 0x97C7DF5E, 0x479B01C1, 0xD9D57DA4, 0x6475439F, 0x2879E3E7,
    0x30132567, 0x0FE01201, 0x1F06210D, 0xFA0C9E20, 0x9B804A17, 0x04553018, 0xF2565E90,
    0x6D201B01, 0xAB7050F4, 0x84979FE9, 0x41B0BB0D, 0xA19A48E9, 0x70210271, 0x0C80E744,
    0xF0A1C8E2, 0x056351C9, 0x88A7A907, 0x1301E021, 0x5A0D2B50, 0x03C182A3, 0x1303903A,
    0x00962785, 0x0FF7C508, 0x1B9F162B, 0xA0D745BA, 0x8627AE0B, 0x622FC9CE, 0x46080560,
    0x6A80D30F, 0xE4A51A2A, 0x80CC0EA4, 0x00F0124F, 0x1025197B, 0x50F20211, 0x00B26F04,
    0x7FA61A36, 0xB0052D01, 0x01A01B01, 0x0D25C0F9, 0xA65700C0, 0xA439D40F, 0x53472A42,
    0xE0933848, 0x2C748507, 0xEC29C6D2, 0xD0B13794, 0x81C2907A, 0xE0A71A52, 0x838481B4,
    0x80A04D05, 0x8A050278, 0xDA62065A, 0x029183A8, 0x49018026, 0xD2793040, 0x67106006,
    0x814B860E, 0xB4BBA2BA, 0x6A70EA62, 0x7808A0FF, 0xA03250A0, 0x16E44702, 0xFF865208,
    0x30380420, 0x08D0A012, 0x8C0F65FD, 0xCA709733, 0x0CE4E4A9, 0x0B29D40C, 0x200700A0,
    0xABFA8E0B, 0x5517C183, 0xA8AD0030, 0x5520D800, 0xD423E005, 0x695B0B50, 0x4E7A82AB,
    0x4D0FA54D, 0x90C60E95, 0x3129595F, 0x1B08B09E, 0x507408B4, 0x07308A48, 0x9009E485,
    0x40CF5F90, 0x6A669D0B, 0x879723E7, 0x5ACF9AA3, 0x0FE4E3AB, 0x300385D6, 0x0261A490,
    0x0FE0036C, 0x35018268, 0x3AFCAC00, 0xAFF05818, 0x5727E05C, 0xD5DA04A0, 0xAEEA800F,
    0x0AAEDB08, 0xD41FACEB, 0x0950AA54, 0x6181661C, 0x703476D2, 0xB17AFD0C, 0x0D5291E3,
    0x79630A80, 0x0B20CE41, 0x9BB0B4F8, 0xCB09B23A, 0x801426B0, 0x1B020381, 0x323B9B20,
    0x0FC0082D, 0x22044044, 0x5B1800F0, 0x02D183B3, 0x1101E01E, 0x63028650, 0x02702E25,
    0xDE0FC657, 0x4B25A9A0, 0xB45B22B2, 0x85494B09, 0x98BB0730, 0xB4F04227, 0x52B3607B,
    0x50351E3B, 0x88A0A1B5, 0xBF0900A8, 0xDB47AB48, 0xB48B26B5, 0xBE0DAB47, 0x911782F0,
    0x013A0527, 0x698AA0EE, 0xDB530110, 0x078183B6, 0x53024B70, 0xC0F50065, 0x01901D25,
    0xB50ED657, 0xFB46B5E8, 0xB09B7CB5, 0x4D05A651, 0x636B6040, 0x01B01E26, 0x6E04B010,
    0x41E3B8BB, 0x03404004, 0x9527E092, 0xC5840800, 0xB97B7EAE, 0x43B99B7D, 0xB0BA0D5A,
    0x93973941, 0x0C79E23B, 0x5B8C7EE0, 0x55B1E2BA, 0xDD005ABB, 0xF3093D80, 0xB5C0F50F,
    0xF9B60B98, 0x40DD6F43, 0x0C10DE38, 0x9D4193D3, 0x90FFBBA6, 0xBB582877, 0x7FB44A7F,
    0x042BBC3B, 0x735384AF, 0x6727E5DA, 0x6040BCB0, 0x1E3BCEBA, 0x60BD1057, 0x777D16D0,
    0x05D06F25, 0x9A921517, 0x93AFBC4B, 0x0DB3814D, 0x5F0FF9F4, 0xA5DA04F0, 0x00B1B9AA,
    0x5A30A009, 0x860404B0, 0x0FF7F30D, 0xDBBB2AEA, 0xA0A7404B, 0x44529D9D, 0xCFB9100F,
    0xD1E2BFBB, 0x00A0995B, 0x12018019, 0x925C0C50, 0x0D330A73, 0xF2A290B9, 0x941DB09B,
    0x3840CA0E, 0xDA055061, 0x622F7F05, 0x69123E41, 0xCD0EE604, 0x3BB0B210, 0x3A0C1EBF,
    0x52A4F0F3, 0x565401D6, 0x0F6416AF, 0x1702E02E, 0xDBFC0210, 0x03D1E3C2, 0x36021038,
    0xA04AB020, 0x9220FD84, 0x1DB5DBB1, 0x90C50E34, 0x0240285F, 0x252888A1, 0x38570210,
    0xA500C40E, 0x4FBDCC0B, 0xC0830958, 0x26176561, 0x98035B55, 0xCC54C2E0, 0x00C6B426,
    0xC427E0BA, 0x971C0AE0, 0x381C5EC3, 0x246480F1, 0x29C201F0, 0x37D7262E, 0x1F0CD0EB,
    0x9392C4AC, 0xA58979C6, 0x0A011B66, 0x5C551190, 0x044247C7, 0x2903103E, 0x6B843740,
    0x02D03625, 0xC272E7A0, 0x68D7C5FB, 0x04004B5D, 0x8F907737, 0xB04A0561, 0xC49C824C,
    0x6A5D6C39, 0xB27E3674, 0x0560142E, 0x6CC99C76, 0xD0440472, 0x9EAC5903, 0x8E0A29A3,
    0x0C1D8D40, 0x0BC720C9, 0x7F3600A5, 0xD0FFA228, 0x8D40A70B, 0xF9B7FC84, 0x7B124F87,
    0x01744125, 0xE0BFE0DA, 0x2CBCC9A1, 0x02A6241E, 0xEA865012, 0x0A162611, 0x7CC0EC7A,
    0x37851C6C, 0x104A381C, 0xCACC8904, 0x8E03E047, 0x6C6BC38C, 0x4940FB9D, 0x6503403E,
    0xB28A257C, 0x0520560F, 0xBD968049, 0x4C77CE3C, 0x9E904304, 0x7B08E283, 0x5CC96850,
    0x0D30F07A, 0x2C7DD381, 0x70FF9F8B, 0x0EE379A5, 0x5FCB1CC8, 0x309A0AFB, 0x28316D3D,
    0x0D014017, 0x5CE40AF0, 0x06626CD0, 0x19005D08, 0x6748D0B0, 0x4ED01425, 0x839810FF,
    0x66C7CD5C, 0xCAC9360E, 0xFF537199, 0x40B60D00, 0x9FECFA7F, 0x2B38190B, 0xBCCF0240,
    0x7A094723, 0x2803C043, 0xDD060260, 0x01326CD2, 0x4000B00F, 0xA279AF60, 0xA3F05C06,
    0xD4CEDCA5, 0xF7FA0CD5, 0x0CB1999C, 0x14C5D0AA, 0x054D804D, 0x283A8891, 0x2202A02C,
    0xDD2E07E0, 0x98C68AD4, 0xEF0D0027, 0x30FFAC97, 0x95B0BC0D, 0x7DD43B96, 0xD09E0B56,
    0x19ED3E5F, 0xD58239A7, 0xC86ED3A8, 0xA560CA0E, 0x63662C70, 0x30430EB6, 0x01302804,
    0x6CD71D4E, 0x205F6B72, 0x26E283CE, 0x590FD857, 0xF590CA6D, 0x69D08008, 0x941A1D5F,
    0xBA3F0820, 0x64DD64D7, 0x71381694, 0xE30E0630, 0x045A5E27, 0x92D72079, 0x403668AD,
    0x0C902C03, 0x0223EB1D, 0x6D1FB219, 0x0690746F, 0x9ED189DB, 0xE06F07A1, 0xD9DD869E,
    0xB90D475F, 0x95E67AE0, 0x000CA0A7, 0x9398F0C0, 0xD26CDB3D, 0xB3BB3802, 0xF225C6ED,
    0x90F95DAA, 0x64DD5A0D, 0x94057061, 0x21A9CF4C, 0xA9805506, 0x4DDA8D39, 0xC43A6126,
    0x83F6A003, 0x2E0335DD, 0x403C0220, 0x68ADD6DB, 0x9000E83C, 0xC1918DE0, 0x5CA08909,
    0x19DBFDA7, 0x905862B5, 0xDC496204, 0x4204F1AE, 0x10FE8570, 0x5B1D7CDE, 0x960AB41D,
    0x39A3C4E0, 0x0CBDB65A, 0xD70049E4, 0xE26CDFBD, 0x00801EBF, 0x0E0F4E00, 0xE6570154,
    0xDE20CB0E, 0x4ABC0568, 0x8D2503D0, 0x0441A1DE, 0x2FBF09C5, 0x566BDCA7, 0x02D7A20F,
    0x61C41028, 0x28B028A2, 0xDFC55910, 0x4165AE20, 0xC03303F0, 0x09127E07, 0xC988E07E,
    0x04FBE08D, 0xAA6033BC, 0x621B1DA2, 0x3CD74478, 0x56DDEFD1, 0x8D8D2563, 0xC02E278D,
    0x08E02502, 0x8AE41E21, 0xB00D55B6, 0x0D600800, 0x470126B3, 0xA0CA0E64, 0x503D87C0,
    0x1DBC00FE, 0xAC7D01A0, 0x01A1D1C8, 0x8A857017, 0x3E4FE367, 0x9820EE54, 0xF3010012,
    0x501C251C, 0x9E40FDE6, 0x6AE4200C, 0x617CE43E, 0x25C59705, 0xF0492064, 0x8E5DA6FB,
    0x0FFD894E, 0x311E6017, 0xA0F51B2E, 0x5B0E2C0D, 0x6507362B, 0xECA08C60, 0x2B17BE23,
    0x5AE89E6B, 0x55DC98F6, 0x256ABE00, 0xBB0D9C14, 0xFE7FD580, 0xE7BCF0AE, 0x1A0F51B9,
    0xA56BE75A, 0x77B82E0D, 0x3BBD5008, 0x3EA40252, 0x01F5E30E, 0xAAE8A008, 0x204868AE,
    0xCB517A04, 0x4304C23B, 0x7CD46F20, 0x0EF49DE3, 0x814F80D0, 0x50E61B2D, 0xEB68430C,
    0x8495F504, 0x70400483, 0x23E5C551, 0x88EC904F, 0x6ECCEABE, 0x022D2B6E, 0xC7283E8F,
    0x49EE0AD0, 0x0DD4E4E1, 0xBB3D30C0, 0x70BC1A9E, 0xED699B0A, 0xA80C25AE, 0xCD3461C0,
    0x0065E625, 0xEAECDB57, 0xFA09713E, 0xEEF01101, 0x3E256867, 0xB0F5657E, 0x4C4EC07D,
    0x98C5C0C8, 0xC09A1BEE, 0xEB59EE08, 0xC649DE9C, 0x57260FFB, 0xE00257C2, 0x2B9B0866,
    0x0F0CEEBC, 0x0362E774, 0x2FC4F0B1, 0x10A85802, 0xE95ED509, 0x960A747E, 0x2E0EEBA0,
    0x55008B1C, 0x4D4FAEF7, 0xC0840975, 0x0FFDAF8D, 0x89A3903A, 0x3F2CF0D8, 0x02A5E371,
    0x07A6B00C, 0x85EA0F00, 0x0EC65701, 0x7DF21A55, 0x407D08B4, 0x1F9E56E8, 0x9806A07F,
    0x6500EE0A, 0xD014F8E0, 0x062619F7, 0xC0F900CA, 0x07507C07, 0x52F2D027, 0xC91A740F,
    0x278B5104, 0x0A075083, 0xBF44D635, 0xEFBF3DF3, 0x5B06C1C1, 0xDE5C9D30, 0x65145CF5,
    0x56066073, 0x20252789, 0x06701602, 0x40F71F53, 0x9D0BDF97, 0x2618F901, 0xECBAD00F,
    0x8F650CF0, 0x41D402F1, 0x08072085, 0xE1AEEDB6, 0x290CCE04, 0x97F66E74, 0x80BE0D94,
    0x279A124F, 0xE501EB39, 0x2246AC20, 0x6E6F96F7, 0x0E01801C, 0x18400350, 0x05F261EF,
    0x41CEC053, 0xB42DF8AA, 0xE7206762, 0x311B1F84, 0x9A9802B0, 0x451F7EF8, 0x3F04862B,
    0x6257E1A0, 0xA660FEAF, 0x978A6012, 0x3796FBBF, 0x00B01101, 0x1625C0C8, 0xA0C60FFC,
    0x406F01EF, 0xC9C8C62B, 0x01B9F1DB, 0xF3A4B783, 0xC041D44C, 0x00FFEDE0, 0x238BA06C,
    0xBE00DE79, 0xBFDCFBC6, 0x067BCB76, 0x48278BCD, 0x30FFE0C0, 0xFD0F7D6F, 0x3F62B3B7,
    0x9B4D0390, 0xFCE192FA, 0xFB47DFA4, 0xF0366510, 0x52CE5502, 0x080FE20D, 0xD034066D,
    0x7BBFFEFD, 0xE0422100, 0xFF05002E, 0xD0700415, 0x09854220, 0x185C3E19, 0x5AC1A1D1,
    0xFBFC4AA1, 0x46054D47, 0x66371C8D, 0xA411D8FC, 0x4D239247, 0x5219448A, 0x2C94C965,
    0xD97C9E57, 0x9A4BA612, 0x94CA6D33, 0x88636D69, 0xFE1A060E, 0x28513884, 0x87448950,
    0x149A3506, 0x06045229, 0x076BFC02, 0x9C4D450D, 0xBD52AD31, 0x556B337A, 0x7AB55DAC,
    0x66D5FAE5, 0x2CA98DB5, 0x745A5091, 0x09B65AA9, 0x857DBC55, 0xBA5CEE50, 0xC5DEED75,
    0x5EEF579B, 0xFEFD7DBE, 0xF0581C05, 0x0D85C260, 0x633BA61F, 0x08078886, 0xB778140E,
    0xB4DB68F6, 0x70A46109, 0xB61F4FF0, 0x7AC19DAD, 0x34561B16, 0x4D9FD1E8, 0x6DA7E48F,
    0x1A0FBFC5, 0x2D86540A, 0xD9653639, 0x20160DB5, 0xAF9B14F0, 0x874BA713, 0xB7DC1D26,
    0x4DC3E070, 0xE2969BCF, 0x030804DF, 0x9E864F66, 0xC8020114, 0x98685028, 0x76FB5880,
    0x7FBDDDEE, 0xBC5E1F07, 0x201A0E76, 0x3D1DB21C, 0x7F4ACFFD, 0x46BC6032, 0xF97CF7FC,
    0xC7178DF5, 0x355E92DF, 0x102C1AE5, 0xF5C02E78, 0xB28DA406, 0x07FC0E00, 0xFA2E5698,
    0xE8FBAC87, 0xFCBED07B, 0x3F108424, 0x6381FE9D, 0x5408F78C, 0x7884C0AF, 0xF1907100,
    0x44B12446, 0x31444F13, 0x611CC145, 0x5E060331, 0x014387A4, 0x02E0DA0D, 0x6671DB00,
    0xE42309AA, 0x2B1F4771, 0x76237204, 0x8287FC72, 0x31939C08, 0xEC670F49, 0x405B2870,
    0x20C7A0F9, 0x4AB0A4A5, 0x271ABB2A, 0x8826A998, 0x9B2527C0, 0x0B0309FC, 0x1207101C,
    0x31502F33, 0x64D7354D, 0xF3374DB3, 0x1787E20A, 0xC992F8C2, 0x83C9147F, 0xFCACF803,
    0xFB29CF91, 0x639C52BC, 0x01807394, 0x7444EB00, 0x521344C9, 0x1B3D11E5, 0x2BD233F4,
    0x4FF4A501, 0xE2A3566E, 0x0D16CC88, 0x361505D0, 0x514DE210, 0x54B52547, 0xA2AB0B53,
    0x7006000A, 0xA00401A0, 0x76BD74E1, 0x52ADE996, 0xF49D6D49, 0x09B4AE4F, 0xA804B566,
    0x455633B3, 0x10CE8D87, 0x33D82C3A, 0x5D755BD7, 0x8E9259B6, 0x61394579, 0x5AA124C1,
    0x56C0FE63, 0xE5B75380, 0x476F5BB6, 0x140641AD, 0xDCA03098, 0x27FD8960, 0xFB32258B,
    0xDF653547, 0x29DE35C5, 0x8465919B, 0xF69CC173, 0x10E29FDE, 0xE56482E3, 0x78601675,
    0xBE27DCA7, 0x01405C7F, 0x53D77D01, 0xCA7FD7E0, 0x258B6310, 0x62B8A5BE, 0x0EFE2F8B,
    0x28083FDB, 0xF26D63A1, 0x02008A45, 0x1847F804, 0x7482D055, 0x559980E0, 0x5A66A699,
    0x74616111, 0x8B374641, 0xC8C03A27, 0x66778141, 0x1D096799, 0x3D12054C, 0xDF000805,
    0x20E28B99, 0xD13E0803, 0x9F8C0098, 0xA96A3A86, 0x87C222F3, 0x99104A14, 0x3A879A64,
    0xFE0887C2, 0xD59AE7E1, 0xEC996E7C, 0x25D41D78, 0x96B72894, 0xFFB768D9, 0x048581A9,
    0xEEB95E72, 0x6AE67BB2, 0x98389DBF, 0x16866D9B, 0x221FBC00, 0x83C15088, 0x3C470FA9,
    0xD83DA8F1, 0xFC550200, 0x01808836, 0x13657E48, 0xDBB6EE0F, 0xB41D3FEC, 0x8F0D9044,
    0xB7F21B7E, 0x80E12059, 0x3BC1F27F, 0xAF31D4F3, 0xE64360C9, 0x9FF453D0, 0x131DA07C,
    0x3DC76FC5, 0xE0A16DF7, 0x7E09027D, 0x117647DF, 0x9FAD783A, 0x5D5EC66D, 0xDE7FD573,
    0x62330E08, 0x25FA3D96, 0x27C11053, 0x9E560C7C, 0x1501ECF5, 0xFE131887, 0xD929F911,
    0x00A05017, 0xC2288A6E, 0x67740585, 0xD5F77DBF, 0x3500F42C, 0x741F140E, 0x684C0ED8,
    0xBD1E4092, 0xFFE4FB70, 0xAA3FDE67, 0xB40904E0, 0xCBB280CD, 0xE35E0540, 0xC728678E,
    0xDED3CB7F, 0x1AB1B26F, 0x02A1402E, 0x008CA407, 0x180FF834, 0x6404C0C0, 0x45085F78,
    0xA4F0C238, 0x8006054A, 0x21DCAB80, 0x40600E3B, 0xE0823861, 0x12B82303, 0x01A10826,
    0xFD9D0C18, 0x0018E4EA, 0x33506395, 0x670CA204, 0x5C5D8D52, 0xD28761A4, 0x502E92E1,
    0x42C40601, 0x61200663, 0x4538A514, 0x04C0A0C2, 0xF4838816, 0x3487B212, 0xEE230050,
    0x81002212, 0x05770FE8, 0xC00A06C1, 0x06D91A61, 0x4AD4640E, 0x218C618C, 0x8DD1FC57,
    0x05C0DCD5, 0x98224B7D, 0x1F8FF6B2, 0x2804C0E4, 0x052062A0, 0x34BC4839, 0xF48702AD,
    0x8014EC86, 0x43859200, 0x638BC818, 0x8FC5DF24, 0x0663FD4B, 0x1698502A, 0x703F68D5,
    0x707BE300, 0x451BE20C, 0x284F2172, 0x8C9B0402, 0xA05A0B4E, 0xA4205702, 0x65848468,
    0x0649092C, 0x0C017031, 0x00C02805, 0x20BB21F8, 0xFF0160E0, 0x203607F0, 0x02494A19,
    0xFBC71F6A, 0x604009C7, 0x93364D3A, 0x4518B932, 0x4D394094, 0x3923D231, 0x07C118FF,
    0x17BB297E, 0x511FA02D, 0x640B2700, 0x12724E39, 0x50110252, 0x17642F40, 0x03047FBE,
    0x1BA02115, 0xA3B9E531, 0x1FED887C, 0x03009815, 0x4E4FB950, 0xF611826D, 0x933166A2,
    0xF83ABAE7, 0xF821934B, 0x50F60480, 0x7436864E, 0x28807A8A, 0x4FC7E80E, 0x97C10083,
    0xFF47D8FF, 0x49502944, 0xCA19C3E1, 0xF2979F21, 0x821CD148, 0x406E0F09, 0xC9E74056,
    0xA4747A32, 0x692D2250, 0xD3304280, 0x07E0FC7D, 0x4380401F, 0x1153BA75, 0xA8A7C072,
    0x402D24D0, 0x6D9D20C1, 0xB1F6A574, 0x35A43347, 0x14C66752, 0xC2F87229, 0xCC223004,
    0x3F1556A3, 0x1847FC13, 0xD94170AA, 0x2229EE4D, 0x780F8023, 0xB2B2563A, 0x3C4C2DEF,
    0x70080180, 0x2099D90E, 0x87C4FA04, 0xD56A3946, 0x18037C96, 0x492A6917, 0x2685C403,
    0x468C0BB0, 0x1CA52955, 0xC0558C54, 0x454E8353, 0xD9F20597, 0xC0FE9B0C, 0x6C856569,
    0x02271364, 0x0FC05810, 0xFE1B6513, 0x3D8911FE, 0x81AE6FF0, 0x5C31C96D, 0x96BCCF01,
    0xF04B28B6, 0x51FF3E81, 0x967ED049, 0x9830FA2B, 0x4EBA2E10, 0x0A63F991, 0x648205B7,
    0xA95BBB75, 0x13B7C24D, 0xE604EE00, 0x500BBB21, 0x38E74000, 0xBB5D1B86, 0xA2C87FDC,
    0x6A63D013, 0x531B1174, 0xB596AA3B, 0xB3AEC580, 0xB40A2176, 0x7A72600C, 0x640D81B5,
    0x96DE0CF0, 0x8351BCD7, 0xA09D7A40, 0xE1A03B49, 0x6AA0FF3D, 0x0889E56B, 0xBA4DAC3E,
    0x0497CD7A, 0xD5B73020, 0x2ABE530E, 0x5A6ADE35, 0x367DD303, 0xE8070180, 0xE0497847,
    0xD836F380, 0x16C2DEC1, 0x81000400, 0x7C6328C6, 0x3909F00A, 0xFFCF1B92, 0x761FF766,
    0xEF570358, 0x6A98DA6B, 0xF5FE5DB6, 0x623F8770, 0xC1C841B0, 0x8CA623A0, 0x88FC640E,
    0xC6D8D707, 0x0F0202DD, 0x0484306A, 0x4AAF58F4, 0xE96A81F8, 0xB6495748, 0xC6248BD7,
    0xF68A81AF, 0xC3447B0F, 0xB2862981, 0x8C51C470, 0x35E731EF, 0x05C0C3B2, 0x368F2020,
    0x37039974, 0xB7987306, 0xE1D909C5, 0x38BF29E6, 0xA6533C05, 0x33217862, 0x1AF8580D,
    0x59AC9192, 0x4183086E, 0x17F22651, 0x2E86D357, 0x51935014, 0x1811C280, 0x17426621,
    0xE01C547A, 0x20755EA1, 0x43E61B83, 0x19DE79AE, 0xE4109732, 0xAF574F24, 0x93C568C1,
    0x6E4A0B99, 0xBF394304, 0x65A59FAA, 0x77520263, 0x46A7D0C3, 0xC03E9B75, 0x42800881,
    0xC4C0B093, 0x3D81FEE5, 0x990F6F3C, 0x9F81402C, 0x5DEA2C61, 0x921466C3, 0xB79B19C0,
    0xB41AB067, 0xF45A8D00, 0x0D941487, 0xDB375485, 0x42A226D9, 0x016025B4, 0x1EC0500B,
    0x0640EBB2, 0x4DE8E35E, 0x269911BF, 0x2A040110, 0x85196E3D, 0x801B1122, 0x7B9D87B4,
    0x1AF1A239, 0x80C0194C, 0x6CF16203, 0x44BBD77A, 0x24C1BE32, 0x42D9A764, 0xE9B3C1D0,
    0x188393E6, 0xF5AD00A0, 0x42E8CE5A, 0x1A521CC4, 0xD87B5ADF, 0x4D58D61E, 0x6C704C0B,
    0x7E841B83, 0x0AC188FA, 0x7B02903E, 0xDDE3DC77, 0x41C844B9, 0x467C8140, 0x7909E2A6,
    0x36480340, 0x1728630E, 0xD219C6E0, 0x6A191654, 0x4EDC9F72, 0xB8829862, 0x6EE28BE1,
    0xA5237C07, 0x345A0490, 0x7FA20319, 0x4747E3E2, 0x9056773A, 0x418C0C82, 0x83007193,
    0xF2FC4F54, 0x1FFCC51D, 0xBBB9AF33, 0x208498D3, 0x54E76BF8, 0xA43BD967, 0x3C090FF2,
    0x6F364900, 0x61CC01D5, 0x363C0053, 0x3B876FE9, 0xF7315460, 0xEEC05C01, 0x6E7328D7,
    0x9E0C45DA, 0xDA2AFD83, 0xD245C5F0, 0x6B83F34A, 0x402F465D, 0xDEFC03C1, 0x0196AA23,
    0x3C362F0B, 0x01378665, 0xF2DDC434, 0x134C0F97, 0x84052F34, 0x357643E4, 0x383F62F4,
    0x28AFF8B3, 0xD9CA1663, 0xFEB3E163, 0xE7FC0D93, 0x75A0FD1F, 0x8D9479CF, 0x7C854C5F,
    0x50FC8F67, 0x7501277E, 0x10F7C23C, 0x85F07CC0, 0x400897CF, 0xB4AD0140, 0x6212E4F9,
    0xB872688B, 0x0581F6E1, 0x59A94E27, 0x02D923D5, 0x3CCE7012, 0xD269A1A4, 0x1BF60573,
    0x2B6A4249, 0x28270FED, 0x1B130801, 0x6FD5FA7E, 0xA1042317, 0xAB002F04, 0xB738ED5E,
    0xD85E8C7D, 0x2645615C, 0x9B7D572E, 0xCEECA7AF, 0xD0668761, 0x11EBE791, 0x57865107,
    0x4BDCAE80, 0xB2D00C8A, 0x07BF585B, 0xC0BB4084, 0x04840980, 0xCB05AA4D, 0x134788C1,
    0x85290736, 0xFE374046, 0x49194053, 0x06C8E72B, 0xD940185F, 0xD8CD8E2B, 0x01201508,
    0x77A2D27D, 0x7828A700, 0xC1A40881, 0x05882C1A, 0x90711FC0, 0x80D00F1D, 0xFE07AA5F,
    0x890BBD20, 0x80C03E84, 0xA4C103D5, 0x005B0658, 0x11F40228, 0x3E046907, 0x2A4D4228,
    0x0428078F, 0x1B42B41B, 0xB3560104, 0x39B3EA03, 0x0B83703F, 0x1C14359A, 0x83A88DA5,
    0x23AA9032, 0xA865BD54, 0x895BEE97, 0x0F420079, 0x7ABD36D0, 0x87B80611, 0x16021026,
    0xD42B9340, 0x027407C3, 0x0681381D, 0x944080D8, 0xBFF9D907, 0x6587487F, 0xBB484138,
    0x03784090, 0xFEC10B11, 0xA865B9B3, 0xC3142585, 0x3D2AA097, 0x840F8358, 0x824084C4,
    0x3D84344E, 0xD41B4504, 0x03E826BC, 0x3639B2CC, 0xFC2282F0, 0x3362AC07, 0x8B85385E,
    0xDBC220D0, 0x8CA42344, 0xB11003EB, 0xDBFBC44B, 0x05E06C88, 0x58C59ABC, 0x18840644,
    0xC6245080, 0xDF00141A, 0x90620059, 0x86D3449D, 0x15397ABB, 0xB9E187FC, 0x434459B2,
    0x39040883, 0x7BD89478, 0x88D9B0B9, 0x1B822828, 0xFA5C332A, 0x813BA207, 0x73C62826,
    0x201441B4, 0x01C00B01, 0x7F0018DC, 0x38201D90, 0x34833D23, 0x56062107, 0x7C2E0DE8,
    0x17D47DC4, 0xD3984818, 0x2C264561, 0x0548608D, 0x82A5C17B, 0x501647E3, 0x1A687048,
    0x74C87474, 0x58658EB4, 0x0A7801A7, 0x80055862, 0xA34DAA2A, 0x84204CAA, 0x591C90F7,
    0x32BCC7E4, 0x09F01001, 0x5D39721F, 0x598328C4, 0x26601301, 0x77A5C39B, 0x48208254,
    0xC8780F81, 0x7CC3D49A, 0xE496805A, 0x01801BC7, 0xBEAD83C5, 0xA10BB003, 0x42884004,
    0x1EC59C6A, 0x3A340198, 0xC3623687, 0x47052164, 0xEC599D88, 0x04D0F300, 0x3DCAB49B,
    0x900989E4, 0x052A4D04, 0xAA3D24A8, 0x50590652, 0x09E8118E, 0xC7A98C5A, 0xF8400A78,
    0x2643D7C2, 0x06099C94, 0xC80892DA, 0xB9239B24, 0x2707D809, 0xB80D4BC0, 0x41B4BDCA,
    0x08CBF02D, 0x8008CC00, 0xAE332C07, 0x4AC1F87F, 0x8107092C, 0x8D586887, 0x9C038841,
    0x34842149, 0xBC187FCB, 0x2882F07F, 0xC06C3710, 0x40D19405, 0x070D0481, 0xD22E83C9,
    0x811A89AB, 0xBE033391, 0xAC3DCD44, 0x044CD581, 0x3A84324D, 0x746D3590, 0x0751074B,
    0x3C0A9866, 0xC00E93D1, 0xAC38D780, 0x7FB76A34, 0xA9000FF0, 0xA2F03383, 0x60CA6072,
    0x34CF4A02, 0x8650748D, 0xC93948A9, 0x52FD1B64, 0x82A87900, 0xD4A280B7, 0x8C3D4EC4,
    0x00500780, 0x8226E070, 0xFB2987FB, 0x11F4E524, 0x682641EC, 0xC87FCCD8, 0x0F784084,
    0x2F022027, 0x809F491A, 0xCF98D7C3, 0x7FCF887F, 0x901E8238, 0x03A844AA, 0x58864164,
    0xC87D9988, 0x4C431586, 0x2A97714A, 0x9B238250, 0x02A368C5, 0x07CEC93A, 0xCBC443D5,
    0x24D02880, 0xAF82C835, 0x24B687F9, 0x1FE99ECF, 0x7B2AA1EC, 0x75104200, 0x19D2F8A0,
    0x6750DCD9, 0x884F85A9, 0xB9B3D492, 0x59005273, 0x95082570, 0x3B9C1B51, 0x0E801855,
    0xD068D1C0, 0xA4F070A4, 0x13CB74A6, 0x707B8D35, 0x4B98CB90, 0x04B1EC7E, 0x9ADB87E8,
    0xD1981702, 0x4EC3DD26, 0x40218244, 0x1D907A88, 0x7E2A93F3, 0x0502CCE8, 0x097D1FD2,
    0x5384A1A0, 0x22BD48FA, 0x275018BA, 0x62533527, 0x30051DF4, 0x4DF9D905, 0x5385285E,
    0x952DB35A, 0x8ABD2D53, 0x2C98307B, 0xA1B63024, 0x9E0804B0, 0x33A9C882, 0x4C3D5405,
    0xA2B02182, 0x14D31523, 0xC87D1850, 0x539D1F52, 0x412AC2AB, 0xD1640378, 0x8221C1A4,
    0x4BD4083B, 0x882A462D, 0x05602502, 0x4384D24D, 0xA5132690, 0x24954653, 0x4206006E,
    0xDBDC0061, 0xD56007A7, 0x57834873, 0x954C008D, 0x38246255, 0x9B2449A2, 0x89B9AC53,
    0xD523ED87, 0x7F1ECD5E, 0x602B10B8, 0xB9B14D82, 0x2B87F458, 0xB02682A8, 0x566559D4,
    0x0F010462, 0x30368090, 0x03947E45, 0x45BA9032, 0x5D5F52E5, 0x8598669D, 0xD94CA8DE,
    0xD00627C1, 0x572566D1, 0xD2C4EC62, 0x1D7480F9, 0x007B9B4C, 0x73192006, 0x956CCA60,
    0x87F2A357, 0x1B01FA4A, 0x9B9B3388, 0x57E03728, 0x7FD7281E, 0xF0194875, 0x35ECE82E,
    0x2F02E836, 0x1CE4C55A, 0xA00D79D5, 0x4D04604F, 0x8083490C, 0x01301781, 0x8016CA27,
    0x0C6258C5, 0x13180C80, 0x031D905F, 0x687FA5C8, 0xD6D44986, 0x68296585, 0xE0108E50,
    0x47E46980, 0x798011C9, 0xD01581A0, 0xD8C80E80, 0x18C62D9A, 0xD0050164, 0x9D907ED9,
    0x7EA8B821, 0x1592C8C8, 0x9070935A, 0x5383F047, 0xE11024D2, 0xD9B04A01, 0x19487DA6,
    0xF8168188, 0xC8A2AE85, 0x5085C87F, 0xD59348C0, 0x8740E35A, 0x0C0DE862, 0xDD2280A8,
    0x06F51727, 0x3C848133, 0x0DB4DA74, 0x84304345, 0x8401C840, 0x7B9B59E0, 0xB4681481,
    0x865AD869, 0xFAAA0AF5, 0x371B9C82, 0x0A811014, 0x15B53CE0, 0x26CC875C, 0x4D04400A,
    0xD04504DA, 0xD852A980, 0x66D205A1, 0x60A985A0, 0xAFD44227, 0xC502606C, 0xD5C18050,
    0x81B462DC, 0xB480716A, 0x20740022, 0x07FBB344, 0xC7401078, 0x707CD51D, 0x01881C10,
    0x8BC7E23C, 0x202802A3, 0xDCD81F82, 0x1CC87DDA, 0x403E5DC0, 0xB9B47808, 0x3D03503C,
    0x455107F1, 0x1B4279DD, 0x783719B5, 0xB2A0007B, 0xCBE5E5DD, 0x081D906A, 0x98D78070,
    0xD46C5CB2, 0x8DD3B56C, 0xD26D0120, 0xDEE0072B, 0x1E02187F, 0x60110128, 0xC87DF1DE,
    0x2380E170, 0xF27DD698, 0x3AFDBE02, 0x0BAFFDBC, 0x1B7F0421, 0x8059C037, 0xF2518839,
    0xAC625FC5, 0x810001D1, 0x59C895FE, 0xBAA2412C, 0x0754E55B, 0xFD0DE865, 0x61B65552,
    0x87580755, 0x1681E025, 0x95FCD588, 0x81EC8760, 0x8401960A, 0xE1D90788, 0x37101A01,
    0xB9E01D45, 0x307FCE42, 0x3C802D03, 0xFB451ABD, 0xB614E09D, 0x000AEF4A, 0x925AA04F,
    0x504F85C9, 0x5F75A0B3, 0x6106F2A3, 0x615F9EF8, 0xC58A7DD9, 0x1FE1505C, 0xE8234ABE,
    0x00E81581, 0xD93C5556, 0xC9D34161, 0xDE1DBB07, 0x1AD7B19D, 0x1D96B8A0, 0x01687F99,
    0x20476014, 0x0CABE2C6, 0x051E2D82, 0xA1053A4D, 0x05EA97F9, 0x0599072C, 0xE51CB84E,
    0x70172BD3, 0x86501681, 0x2C96D308, 0xB4876386, 0x9F229C29, 0x9B18F803, 0x718512E3,
    0xE26A8F87, 0x0707C129, 0xED3CAB71, 0x80315FB5, 0x4382B87E, 0x563881EE, 0x812CABE4,
    0x3280A011, 0x4C901A20, 0x430432A3, 0x0963156C, 0xF0492AA1, 0xD88CA283, 0x0926C884,
    0x1645DC38, 0x0814D465, 0xF1875811, 0x01920049, 0xC9386187, 0x7591E64B, 0x087FCDB0,
    0xC40ABD29, 0xC687C80D, 0xD651D3FA, 0x4BF49B65, 0x9003302D, 0x735EE04D, 0xABFBAF3C,
    0x830AF60F, 0x702D0349, 0x9A261E44, 0x0480607F, 0xD8278030, 0xCD4669E5, 0x0C80D000,
    0x785B0078, 0x86907FE1, 0x635EA05A, 0x286C099E, 0x15F87FA2, 0x7C405582, 0x6871005A,
    0xE6A3B72C, 0x15C9AE76, 0x480C0128, 0x07D49781, 0xFA3459D9, 0x25ADE4B3, 0xCF70D5A3,
    0x5EC59C33, 0x16776696, 0x98ECD468, 0x36058012, 0x587F96D5, 0x99884B05, 0x835BBD38,
    0xE8548619, 0x34AD818D, 0x8BE81B32, 0x7BDF4D46, 0x08401804, 0xC41D907C, 0x707C21BB,
    0x07E099E5, 0x1DD952AC, 0xDA1E1B66, 0x80916A87, 0x97E8C32F, 0xA010E826, 0x24D03D00,
    0xF784284B, 0x12AB67CA, 0x13D03F42, 0x1BA7DC7D, 0x8535EA00, 0x4D46A1E9, 0x2300618D,
    0x79D9071E, 0xCE68A84E, 0x69878BC5, 0x700DB010, 0x39227DDD, 0xAB83C43A, 0xD6A20126,
    0xAC6CD4EA, 0xB65F483C, 0x6DC597E1, 0x1774F25F, 0x5D02F838, 0x24FB64EB, 0xBA700B81,
    0xD46B76AD, 0x76B8848C, 0x8053E280, 0x063B4460, 0x6E1B8D78, 0x06DAB9E5, 0xC70D5860,
    0x997CE490, 0x06D00C40, 0x02EC3033, 0x4EC4EB78, 0x81C81ECD, 0xEF01F012, 0xDC05660A,
    0x38639D5B, 0x20E10A49, 0xDA6D81C8, 0x0005B8C4, 0xCFEC568E, 0x396CEA2E, 0x0636D181,
    0x35867A4D, 0xB1B2E874, 0x27805547, 0xFBEC0D90, 0x9806DB02, 0xEDA6D05A, 0x36038507,
    0x681D8318, 0x5DE00615, 0x1701A47E, 0x85603C50, 0x97707DA0, 0x7D470362, 0xD87F103D,
    0x81001B01, 0xE7EDAC19, 0x6D8E507E, 0xE8404B00, 0x4D0578A7, 0x6E9CD380, 0x04739FC2,
    0x11A4D17B, 0x83576F00, 0x507EF1EE, 0x0A01329B, 0x39D96598, 0x07C07FE9, 0x3D981626,
    0x42C50A9E, 0x972C7E22, 0x1501C5D0, 0x200900E0, 0x5086FDEF, 0xAF84AD4A, 0x304DB5EE,
    0x6B1B7404, 0xE190B909, 0x224D5C5C, 0x03F2CA81, 0x087076FE, 0x903896C5, 0x80E00E80,
    0x7E57580B, 0x489F5E84, 0xBEE06407, 0x6307091D, 0x31869EF8, 0x22B234E7, 0x4D87B810,
    0x7EFD7140, 0x507F15F0, 0x2E475813, 0x4ABD4588, 0xA0282D83, 0x91DC6D0C, 0x28D5D7A8,
    0xD7C81D82, 0x1F0216B4, 0x60248168, 0x527721F1, 0xA4811EF0, 0xF9C94976, 0xA9403E07,
    0x8C6A85D2, 0x724AC560, 0x87FC4407, 0x0503403C, 0x500BEB4D, 0x9548622C, 0x2FF22155,
    0x10315087, 0xE1D5BD83, 0x9F0FF371, 0xB81801A8, 0x18535C21, 0x4D4C280C, 0xFF38803A,
    0x82936507, 0x3BF30023, 0x216C7087, 0x1D201700, 0xB4CA330B, 0x680E0F5E, 0xF3C6EA1C,
    0xCBD26F42, 0x701280D8, 0xF3FB6BC7, 0x7F3DDBD5, 0xC0153200, 0x74A74300, 0x140EB527,
    0x546A8548, 0x0082F4C0, 0x4FF4A82F, 0x3E8D5277, 0x80415681, 0x7CCC9F0B, 0x406DC979,
    0xF505CC88, 0x2F526F56, 0x6833F580, 0x753F5980, 0x0B87DAE9, 0xC8058098, 0x75E7572D,
    0x0E6DFD40, 0x297283F8, 0x75AEDE80, 0xCF458930, 0xE81A882B, 0x559F65F5, 0x2081D319,
    0x38029868, 0x8F5F46E5, 0x7C00B409, 0xF01A81C8, 0xF6652900, 0x3557276E, 0x20318350,
    0x80F01081, 0xFC05C00B, 0xA371ECE1, 0x20487F1F, 0xDE047007, 0xF0EC8281, 0xDA6F79F6,
    0x1081A01C, 0x636A81A8, 0x80785E80, 0x3AF74942, 0x926EA899, 0x80C00D07, 0x2F848807,
    0xA76E7840, 0xDE6785F7, 0x2B831831, 0x5882B8E0, 0x00D5A881, 0x4A8828F4, 0xBF8C0840,
    0x82278CF8, 0x5C04A5EF, 0xF815802A, 0x03683B03, 0xF3786697, 0x0000080A, 0x00000000

  EW_BITMAPS_TABLE( Apphazard )
    EW_BITMAP( Apphazard, Default )
EW_END_OF_BITMAP_RES( Apphazard )

/* Table with links to derived variants of the bitmap resource : 'App::hazard' */
EW_RES_WITHOUT_VARIANTS( Apphazard )

/* Bitmap resource : 'App::hazardstripe' */
EW_DEFINE_BITMAP_RES( Apphazardstripe )
  EW_BITMAP_FRAMES( Apphazardstripe, Default, EW_DRIVER_VARIANT_RGBA8888, 44, 5, 0 )
    EW_BITMAP_FRAME( 0, 0, 44, 5, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Apphazardstripe, Default )              /* ratio 49.09 % */
    0xFC080700, 0x80010097, 0x1C1E0F7F, 0x20E14104, 0xFE084CAE, 0xE14673ED, 0x0767BFDF,
    0xB8CB29FF, 0x7F41E38C, 0x0BF5FF18, 0x33633209, 0x9E2D2893, 0xDFF29954, 0xA12292CA,
    0x33391C1D, 0x1964BE24, 0x67F841B7, 0x7F85D94F, 0xA41CE291, 0x87A0E040, 0x0801070C,
    0xC0800A48, 0x9F50003F, 0x707A6006, 0x51A7D529, 0x8AD55EA1, 0x03D66B75, 0xC051FE03,
    0xC3A15070, 0x2DF34E4C, 0x597160CB, 0x2D1EB681, 0x2CC8B46E, 0x248FB3A3, 0xE95CB6F3,
    0xBC5DAF72, 0xFDDDF107, 0xE05A8FA7, 0x1D90FC95, 0xA2ACD7E4, 0x210734A1, 0xA217FD2C,
    0x0B03C1C3, 0x901D26BC, 0xCFD73274, 0xEE6B4359, 0x81EB9A4A, 0x14190703, 0x522B07FD,
    0xE81B6B46, 0x9757FDBE, 0x19DA5C6E, 0xC965F76B, 0xBE6FB77B, 0xAC7F73C0, 0xB56338CD,
    0xDE0ED2C0, 0x5FE0267B, 0x12FF8A3E, 0x6128399D, 0x06108875, 0x905021FE, 0xA4E6C0D4,
    0x2F8B3A05, 0x68FC9A2D, 0x1E9157D0, 0xE2DAE5BC, 0x9D2A10B4, 0x4FDC1BFA, 0xFFC04C66,
    0x1DCEFE60, 0xE0EF76C0, 0x2016E1FE, 0xF584D15F, 0xFD4E354F, 0xF0584D83, 0x3FC18338,
    0x5071B07F, 0x7651DE03, 0x240141C2, 0xFD515570, 0x5840201D, 0x55279956, 0x88895352,
    0xD5E5899E, 0x1603C8F2, 0x4581F345, 0x4CF824C6, 0x941DF57F, 0xE1CE724F, 0x33344FB8,
    0x335FA7D9, 0x8CB3FDFD, 0x5904CC81, 0xE9BA8064, 0x174857C6, 0x734CE905, 0xCFF628FB,
    0xF241074D, 0xFDA86446, 0x490941D3, 0x691DF035, 0x9D900408, 0xF8855777, 0x914A8959,
    0x27795E78, 0x00101572, 0x00000000

  EW_BITMAPS_TABLE( Apphazardstripe )
    EW_BITMAP( Apphazardstripe, Default )
EW_END_OF_BITMAP_RES( Apphazardstripe )

/* Table with links to derived variants of the bitmap resource : 'App::hazardstripe' */
EW_RES_WITHOUT_VARIANTS( Apphazardstripe )

/* Initializer for the class 'App::ConfirmTimerPopup' */
void AppConfirmTimerPopup__Init( AppConfirmTimerPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppConfirmTimerPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const014C );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const014D );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const04D1 );
  ViewsText_OnSetWrapText( &_this->Text1, 1 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const04D2 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const04D3 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const04D4 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreTimer_OnSetPeriod( &_this->Timer, 300 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppConfirmTimerPopup_Proceed );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppConfirmTimerPopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppConfirmTimerPopup_Tick );
}

/* Re-Initializer for the class 'App::ConfirmTimerPopup' */
void AppConfirmTimerPopup__ReInit( AppConfirmTimerPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'App::ConfirmTimerPopup' */
void AppConfirmTimerPopup__Done( AppConfirmTimerPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppConfirmTimerPopup );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  CoreTimer__Done( &_this->Timer );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ConfirmTimerPopup' */
void AppConfirmTimerPopup__Mark( AppConfirmTimerPopup _this )
{
  EwMarkObject( &_this->Text1 );
  EwMarkSlot( _this->meth );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::ConfirmTimerPopup.Proceed()' */
void AppConfirmTimerPopup_Proceed( AppConfirmTimerPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  EwSignal( _this->meth, ((XObject)_this ));
  CoreTimer_OnSetEnabled( &_this->Timer, 1 );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::ConfirmTimerPopup.Cancel()' */
void AppConfirmTimerPopup_Cancel( AppConfirmTimerPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::ConfirmTimerPopup.ShowThen()' */
void AppConfirmTimerPopup_ShowThen( AppConfirmTimerPopup _this, CoreRoot rootObject, 
  XSlot method )
{
  XPoint m;

  _this->Super1.mask = EwNewObject( ViewsRectangle, 0 );
  _this->Super1.touch = EwNewObject( CoreSimpleTouchHandler, 0 );
  _this->Super1.root = rootObject;
  _this->meth = method;
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  CoreQuadView__OnSetPoint1( _this->Super1.touch, _Const0052 );
  CoreQuadView__OnSetPoint2( _this->Super1.touch, _Const008F );
  CoreQuadView__OnSetPoint3( _this->Super1.touch, _Const008E );
  CoreQuadView__OnSetPoint4( _this->Super1.touch, _Const00CD );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.touch ), 0 );
  ViewsRectangle_OnSetColor( _this->Super1.mask, _Const0151 );
  CoreRectView__OnSetBounds( _this->Super1.mask, _Const0002 );
  CoreGroup__Add( rootObject, ((CoreView)_this->Super1.mask ), 0 );
  m = EwNewPoint(( 800 - EwGetRectSize( _this->Super3.Bounds ).X ) / 2, ( 480 - 
  EwGetRectSize( _this->Super3.Bounds ).Y ) / 2 );
  CoreRectView__OnSetBounds( _this, EwSetRectPoint1( _this->Super3.Bounds, m ));
  CoreRectView__OnSetBounds( _this, EwSetRectPoint2( _this->Super3.Bounds, EwMovePointNeg( 
  _Const008E, m )));
  CoreGroup__Add( rootObject, ((CoreView)_this ), 0 );
  return;
}

/* 'C' function for method : 'App::ConfirmTimerPopup.Tick()' */
void AppConfirmTimerPopup_Tick( AppConfirmTimerPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 100 
  - ((( 100 - WidgetSetHorizontalValueBar_OnGetCurrentValue( &_this->HorizontalValueBar 
  )) * 19 ) / 20 ));
}

/* Variants derived from the class : 'App::ConfirmTimerPopup' */
EW_DEFINE_CLASS_VARIANTS( AppConfirmTimerPopup )
EW_END_OF_CLASS_VARIANTS( AppConfirmTimerPopup )

/* Virtual Method Table (VMT) for the class : 'App::ConfirmTimerPopup' */
EW_DEFINE_CLASS( AppConfirmTimerPopup, AppPopup, "App::ConfirmTimerPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppConfirmTimerPopup )

/* Initializer for the class 'App::NewNumberPopup' */
void AppNewNumberPopup__Init( AppNewNumberPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppMattsKeyboard__Init( &_this->MattsKeyboard, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppNewNumberPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04D5 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0124 );
  CoreRectView__OnSetBounds( &_this->MattsKeyboard, _Const04D6 );
  CoreRectView__OnSetBounds( &_this->Writable, _Const04D7 );
  CoreRectView__OnSetBounds( &_this->Writable1, _Const04D8 );
  CoreRectView__OnSetBounds( &_this->Text, _Const04D9 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const04DA ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->Text1, CoreLayoutAlignToLeft | CoreLayoutAlignToTop 
  );
  CoreRectView__OnSetBounds( &_this->Text1, _Const04DB );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const04DC ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const04DD );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0128 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const04DE );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const04DF );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const04E0 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const04E1 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const04E2 );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler1, _Const04E3 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler1, _Const04E4 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler1, _Const04E5 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler1, _Const04E6 );
  CoreGroup__Add( _this, ((CoreView)&_this->MattsKeyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler1 ), 0 );
  CoreGroup__OnSetFocus( _this, ((CoreView)&_this->Writable ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppNewNumberPopup_OK );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppNewNumberPopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppNewNumberPopup_NumberSlot 
  );
  _this->SimpleTouchHandler1.OnPress = EwNewSlot( _this, AppNewNumberPopup_NameSlot 
  );
}

/* Re-Initializer for the class 'App::NewNumberPopup' */
void AppNewNumberPopup__ReInit( AppNewNumberPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppMattsKeyboard__ReInit( &_this->MattsKeyboard );
  AppWritable__ReInit( &_this->Writable );
  AppWritable__ReInit( &_this->Writable1 );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler1 );
}

/* Finalizer method for the class 'App::NewNumberPopup' */
void AppNewNumberPopup__Done( AppNewNumberPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppNewNumberPopup );

  /* Finalize all embedded objects */
  AppMattsKeyboard__Done( &_this->MattsKeyboard );
  AppWritable__Done( &_this->Writable );
  AppWritable__Done( &_this->Writable1 );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler1 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::NewNumberPopup' */
void AppNewNumberPopup__Mark( AppNewNumberPopup _this )
{
  EwMarkObject( &_this->MattsKeyboard );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Writable1 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->SimpleTouchHandler1 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::NewNumberPopup.OK()' */
void AppNewNumberPopup_OK( AppNewNumberPopup _this, XObject sender )
{
  XString name;
  XString num;
  AppTextPopup p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  name = AppTextEditor_OnGetString( &_this->Writable.TextEditor );
  num = AppTextEditor_OnGetString( &_this->Writable1.TextEditor );
  {
    char _name[ 40];
    char _num[ 16];

    EwStringToAnsi( name, _name, 40, '-' );
    EwStringToAnsi( num, _num, 16, '-' );

    Command2( CMD_NEW_SMS_NUMBER, (int)_name, (int)_num );
  }
  p = EwCastObject( _this->Super1.Parent, AppTextPopup );

  if ( p != 0 )
  {
    EwPostSignal( EwNewSlot( p, AppTextPopup_Refresh ), ((XObject)_this ));
  }

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::NewNumberPopup.Cancel()' */
void AppNewNumberPopup_Cancel( AppNewNumberPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::NewNumberPopup.NumberSlot()' */
void AppNewNumberPopup_NumberSlot( AppNewNumberPopup _this, XObject sender )
{
  AppMattsKeyboard kbd;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  kbd = &_this->MattsKeyboard;
  CoreGroup__OnSetVisible( &kbd->Keyboard, 0 );
  CoreGroup__OnSetVisible( &kbd->Numboard, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 1 );
  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable1 );
}

/* 'C' function for method : 'App::NewNumberPopup.NameSlot()' */
void AppNewNumberPopup_NameSlot( AppNewNumberPopup _this, XObject sender )
{
  AppMattsKeyboard kbd;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  kbd = &_this->MattsKeyboard;
  CoreGroup__OnSetVisible( &kbd->Keyboard, 1 );
  CoreGroup__OnSetVisible( &kbd->Numboard, 0 );
  CoreGroup_OnSetEnabled((CoreGroup)&kbd->Keyboard, 1 );
  CoreGroup_OnSetEnabled((CoreGroup)&kbd->Numboard, 0 );
  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable );
}

/* Variants derived from the class : 'App::NewNumberPopup' */
EW_DEFINE_CLASS_VARIANTS( AppNewNumberPopup )
EW_END_OF_CLASS_VARIANTS( AppNewNumberPopup )

/* Virtual Method Table (VMT) for the class : 'App::NewNumberPopup' */
EW_DEFINE_CLASS( AppNewNumberPopup, AppPopup, "App::NewNumberPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppNewNumberPopup )

/* Initializer for the class 'App::AddDevicePopup' */
void AppAddDevicePopup__Init( AppAddDevicePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler3, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text5, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton4, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  AppDropDownMenu__Init( &_this->DropDownMenu1, &_this->_XObject, 0 );
  AppDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler4, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Unit, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAddDevicePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const04E7 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const04E8 );
  CoreRectView__OnSetBounds( &_this->Image, _Const04E9 );
  CoreRectView__OnSetBounds( &_this->Text, _Const04EA );
  ViewsText_OnSetRowDistance( &_this->Text, 30 );
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const04EB ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Image1, _Const04EC );
  CoreRectView__OnSetBounds( &_this->Text1, _Const04ED );
  ViewsText_OnSetWrapText( &_this->Text1, 1 );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const04EE ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text2, _Const04EF );
  ViewsText_OnSetWrapText( &_this->Text2, 1 );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const04F0 ));
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const04F1 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const04F2 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->Text5, _Const04F3 );
  ViewsText_OnSetString( &_this->Text5, 0 );
  ViewsText_OnSetColor( &_this->Text5, _Const0047 );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const04F4 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const04F5 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton4, _Const04F6 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton4, EwLoadString( &_Const04F7 
  ));
  CoreRectView__OnSetBounds( &_this->Text3, _Const04F8 );
  ViewsText_OnSetRowDistance( &_this->Text3, 30 );
  ViewsText_OnSetWrapText( &_this->Text3, 1 );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const04F9 ));
  ViewsText_OnSetColor( &_this->Text3, _Const04FA );
  CoreRectView__OnSetBounds( &_this->DropDownMenu1, _Const04FB );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DropDownMenu1, 0 );
  CoreGroup__OnSetVisible( &_this->DropDownMenu1, 1 );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const04FC );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->DropDownMenu, 0 );
  EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const04FD ));
  _this->DropDownMenu.itemIndex = 1;
  AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu, 42 );
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const04FE );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const04FF 
  ));
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const0500 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0501 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel1, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const0502 );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const02B4 );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const02B5 );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const02B5 );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const02B4 );
  CoreView_OnSetLayout((CoreView)&_this->Unit, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Unit, _Const0503 );
  ViewsText_OnSetAlignment( &_this->Unit, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Unit, EwLoadString( &_Const0504 ));
  ViewsText_OnSetColor( &_this->Unit, _Const000E );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Unit ), 0 );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &Appusbsmall, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsImage_OnSetBitmap( &_this->Image1, EwLoadResource( &Appjackplugsm, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppAddDevicePopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->Super1.SystemEventHandler1.OnEvent = EwNewSlot( _this, AppAddDevicePopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->Super1.SystemEventHandler1, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->RBUDetectedEvent );
  _this->SystemEventHandler3.OnEvent = EwNewSlot( _this, AppAddDevicePopup_onEvent1 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler3, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->RBUProgressEvent );
  ViewsText_OnSetFont( &_this->Text5, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppAddDevicePopup_Program );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton4.OnActivate = EwNewSlot( _this, AppAddDevicePopup_Setup );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton4, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->DropDownMenu1.onSelection = EwNewSlot( _this, AppAddDevicePopup_SelectSlot 
  );
  _this->DropDownMenu1.GetItemCallback = EwNewSlot( _this, AppAddDevicePopup_FillMenu 
  );
  _this->DropDownMenu.onSelection = EwNewSlot( _this, AppAddDevicePopup_SelectSlot 
  );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, AppAddDevicePopup_GetMenuItem 
  );
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppAddDevicePopup_CreateSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SystemEventHandler4.OnEvent = EwNewSlot( _this, AppAddDevicePopup_onEvent2 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler4, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->NewZoneAndCombi );
  ViewsText_OnSetFont( &_this->Unit, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));

  /* Call the user defined constructor */
  AppAddDevicePopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::AddDevicePopup' */
void AppAddDevicePopup__ReInit( AppAddDevicePopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Image );
  ViewsText__ReInit( &_this->Text );
  ViewsImage__ReInit( &_this->Image1 );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text2 );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler3 );
  ViewsText__ReInit( &_this->Text5 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  WidgetSetPushButton__ReInit( &_this->PushButton4 );
  ViewsText__ReInit( &_this->Text3 );
  AppDropDownMenu__ReInit( &_this->DropDownMenu1 );
  AppDropDownMenu__ReInit( &_this->DropDownMenu );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler4 );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsText__ReInit( &_this->Unit );
}

/* Finalizer method for the class 'App::AddDevicePopup' */
void AppAddDevicePopup__Done( AppAddDevicePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAddDevicePopup );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Image );
  ViewsText__Done( &_this->Text );
  ViewsImage__Done( &_this->Image1 );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text2 );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler3 );
  ViewsText__Done( &_this->Text5 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  WidgetSetPushButton__Done( &_this->PushButton4 );
  ViewsText__Done( &_this->Text3 );
  AppDropDownMenu__Done( &_this->DropDownMenu1 );
  AppDropDownMenu__Done( &_this->DropDownMenu );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler4 );
  ViewsRectangle__Done( &_this->Rectangle9 );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsText__Done( &_this->Unit );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AddDevicePopup' */
void AppAddDevicePopup__Mark( AppAddDevicePopup _this )
{
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Image1 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->SystemEventHandler3 );
  EwMarkObject( &_this->Text5 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->PushButton4 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->DropDownMenu1 );
  EwMarkObject( &_this->DropDownMenu );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->SystemEventHandler4 );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Unit );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppAddDevicePopup_Init( AppAddDevicePopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  AppAddDevicePopup_SetupMenus( _this );
}

/* 'C' function for method : 'App::AddDevicePopup.GetMenuItem()' */
void AppAddDevicePopup_GetMenuItem( AppAddDevicePopup _this, XObject sender )
{
  AppDropDownMenu menu;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  menu = EwCastObject( sender, AppDropDownMenu );
  EwRetainString( &menu->itemName, AppLibClass_GetCombiName( EwGetAutoObject( &AppLib, 
  AppLibClass ), menu->itemIndex ));
}

/* 'C' function for method : 'App::AddDevicePopup.SetupMenus()' */
void AppAddDevicePopup_SetupMenus( AppAddDevicePopup _this )
{
  CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, 0 );
  ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, EwLoadString( &_Const0505 
  ));
  CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu1.VerticalList, 0 );
  ViewsText_OnSetString( &_this->DropDownMenu1.MenuSelectionText, EwLoadString( 
  &_Const0506 ));
  AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu1, (XUInt8)AppLibClass_NumZones( 
  EwGetAutoObject( &AppLib, AppLibClass )));
  AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu, (XUInt8)AppLibClass_NumDevTypes( 
  EwGetAutoObject( &AppLib, AppLibClass )));
}

/* 'C' function for method : 'App::AddDevicePopup.FillMenu()' */
void AppAddDevicePopup_FillMenu( AppAddDevicePopup _this, XObject sender )
{
  AppDropDownMenu menu;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );

  menu = EwCastObject( sender, AppDropDownMenu );
  EwRetainString( &menu->itemName, EwConcatString( EwLoadString( &_Const009B ), 
  EwNewStringInt( menu->itemIndex + 1, 0, 10 )));
}

/* 'C' function for method : 'App::AddDevicePopup.Setup()' */
void AppAddDevicePopup_Setup( AppAddDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  {
    AppModifyPopup p = EwNewObject( AppModifyPopup, 0 );
    CoreRoot r;
    WidgetSetPushButton_OnSetLabel( &p->WriteButton, EwLoadString( &_Const0128 ));
    r = CoreView__GetRoot( _this );
    AppModifyPopup_OnSetdevice( p, AppLibClass_GetConfig( EwGetAutoObject( &AppLib, 
    AppLibClass ), (XInt16)_this->NewUnitNum ));

    if ( p->device != 0 )
    {
      EwPostSignal( EwNewSlot( p, AppModifyPopup_SetFocus ), ((XObject)_this ));
      AppPopup_Show((AppPopup)p, r );
    }
  }
}

/* 'C' function for method : 'App::AddDevicePopup.Cancel()' */
void AppAddDevicePopup_Cancel( AppAddDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler1' 
   receives an event. */
void AppAddDevicePopup_onEvent( AppAddDevicePopup _this, XObject sender )
{
  AppPtrClass p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwCastObject( _this->Super1.SystemEventHandler1.Context, AppPtrClass );

  if ( p->ptr == -1 )
  {
    ViewsText_OnSetString( &_this->Unit, EwLoadString( &_Const0507 ));
  }
  else
  {
    ViewsText_OnSetString( &_this->Unit, AppLibClass_Unit( EwGetAutoObject( &AppLib, 
    AppLibClass ), p->ptr ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DropDownMenu, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->DropDownMenu1, 1 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 1 );
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler3' 
   receives an event. */
void AppAddDevicePopup_onEvent1( AppAddDevicePopup _this, XObject sender )
{
  AppRBUProgress p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwCastObject( _this->SystemEventHandler3.Context, AppRBUProgress );

  if ( p->progress > 0 )
  {
    WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, p->progress 
    );

    if ( p->progress == 100 )
    {
      ViewsText_OnSetColor( &_this->Text5, _Const000E );
      ViewsText_OnSetString( &_this->Text5, p->errmsg );
      WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0128 
      ));
    }
  }
  else
  {
    ViewsText_OnSetColor( &_this->Text5, _Const0060 );
    ViewsText_OnSetString( &_this->Text5, p->errmsg );
  }
}

/* 'C' function for method : 'App::AddDevicePopup.SelectSlot()' */
void AppAddDevicePopup_SelectSlot( AppAddDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->DropDownMenu.VerticalList.SelectedItem != 0 )
  {
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 1 );
  }
}

/* 'C' function for method : 'App::AddDevicePopup.Program()' */
void AppAddDevicePopup_Program( AppAddDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  Command1( CMD_PROGRAM_RBU, 0 );
}

/* 'C' function for method : 'App::AddDevicePopup.CreateSlot()' */
void AppAddDevicePopup_CreateSlot( AppAddDevicePopup _this, XObject sender )
{
  XInt32 type;
  XInt32 zone;
  XInt32 result;
  XString s;
  XInt32 unit_num;
  XInt32 err;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->DropDownMenu.VerticalList.SelectedItem == 0 )
  {
    ViewsText_OnSetColor( &_this->Text5, _Const0508 );
    ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const0509 ));
    return;
  }

  ViewsText_OnSetString( &_this->Text5, 0 );
  type = _this->DropDownMenu.VerticalList.SelectedItem;
  zone = _this->DropDownMenu1.VerticalList.SelectedItem + 1;
  result = 1;
  s = AppLibClass_GetCombiName( EwGetAutoObject( &AppLib, AppLibClass ), type );
  err = -1;
  {
    char str[ 41];
    EwStringToAnsi( s, str, 41, '-' );

    Command cmd;

    cmd.int0 = zone;
    cmd.int1 = type;
    cmd.int2 = (int) str;

    result = Command0( CMD_SETUP_RBU, &cmd );

    if ( result == CMD_ERR_WRITE_FAIL )
    {
      err = 1;
    }
    else if ( result == CMD_ERR_ALREADY_EXISTS )
    {
      err = 2;
    }
    else if ( result == CMD_ERR_DEVICE_BUSY )
    {
      err = 3;
    }
    else if ( result == CMD_OK )
    {
      err = 0;
    }
    else 
    {
      err = -1;
    }

    unit_num = cmd.int3;
  }

  if ( err == 2 )
  {
    ViewsText_OnSetColor( &_this->Text5, _Const050A );
    ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const050B ));
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
    CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 0 );
  }
  else
    if ( err != 0 )
    {
      ViewsText_OnSetColor( &_this->Text5, _Const0060 );
      ViewsText_OnSetString( &_this->Text5, EwLoadString( &_Const050C ));
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 0 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 0 );
    }
    else
    {
      ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwLoadString( 
      &_Const050D ), EwNewStringInt( unit_num, 0, 10 )), EwLoadString( &_Const050E 
      )));
      _this->NewUnitNum = unit_num;
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton4, 1 );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton3, 0 );
    }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler4' 
   receives an event. */
void AppAddDevicePopup_onEvent2( AppAddDevicePopup _this, XObject sender )
{
  AppZoneAndCombi context;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  context = EwCastObject( _this->SystemEventHandler4.Context, AppZoneAndCombi );

  if ( context != 0 )
  {
    if ( context->Zone > 0 )
    {
      AppDropDownMenu_SetIndex( &_this->DropDownMenu1, context->Zone - 1 );
    }

    AppDropDownMenu_SetIndex( &_this->DropDownMenu, context->Combination );
  }
}

/* Variants derived from the class : 'App::AddDevicePopup' */
EW_DEFINE_CLASS_VARIANTS( AppAddDevicePopup )
EW_END_OF_CLASS_VARIANTS( AppAddDevicePopup )

/* Virtual Method Table (VMT) for the class : 'App::AddDevicePopup' */
EW_DEFINE_CLASS( AppAddDevicePopup, AppPopup, "App::AddDevicePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAddDevicePopup )

/* Bitmap resource : 'App::usbsmall' */
EW_DEFINE_BITMAP_RES( Appusbsmall )
  EW_BITMAP_FRAMES( Appusbsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 123, 127, 0 )
    EW_BITMAP_FRAME( 39, 54, 50, 45, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appusbsmall, Default )                  /* ratio 32.90 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0x50E89C4A, 0x7E5E3017,
    0xE50A9D42, 0x592F1727, 0x72E96AFF, 0xBFE3F215, 0x015EB758, 0xA5B2C8A2, 0x633097CB,
    0xB3499CCA, 0x389BCDA6, 0x1864EA73, 0x1F2F582C, 0xE28954A8, 0x2D57AB93, 0xB96CB27F,
    0x17CBA7F2, 0x92C47FAD, 0x6C87FAF5, 0xCA7FAE19, 0xCAC2E998, 0x56BFD7CC, 0x23F948AE,
    0x8F940A85, 0xAAD3689D, 0xADB6CB5D, 0x6570B7DB, 0xAC066322, 0xA557AB47, 0x95A2D0F4,
    0x5BADD78A, 0xDAEDFAAD, 0x321FCAF5, 0x1D8D5B64, 0xD9CFF5AB, 0x98FF5DB3, 0x0FF5BB35,
    0xCDABB45A, 0xC6748198, 0x663429EC, 0x72CDFEB9, 0x25DFEA25, 0xC5FC8E4A, 0xB5BACD5D,
    0x63B0D7EB, 0x8BB5C4BF, 0xAC561E16, 0x45E9E142, 0x5DAFDF98, 0x2325FAAC, 0x335A54F6,
    0x5196CFC8, 0xDA58CE4E, 0x96CECA33, 0xACECAABD, 0xD36ABFD5, 0xB66BFD62, 0x68BFD4EC,
    0x9BFD58CD, 0xBFD60CC6, 0xFD6CCB6B, 0xD40AD5CB, 0xFA8346BF, 0x8954E3FC, 0xF8D92E92,
    0xCFDFEBF3, 0x5F003FBF, 0x03B2F8C2, 0x62A8AC2A, 0xE8BD2D47, 0xB72D0FB2, 0x304FB2C8,
    0x4CC55CC2, 0xA3459032, 0x2CD355CC, 0xC934D8C3, 0x324D1768, 0xD9A34920, 0x5748D23F,
    0x90AB3299, 0xFF2A8CD8, 0x2A4CF350, 0xCA4331DF, 0x4695C93F, 0x5A30330D, 0xD9490CC3,
    0x3FCB3328, 0xC9E2B4BD, 0xE20C933F, 0x008A3FC7, 0x9B3FC802, 0x0EC9725C, 0xE52945FE,
    0x59525494, 0xE8CA328C, 0xA92B4AD0, 0x2F4BE1D0, 0x8B83E8B8, 0x33E8B02D, 0xF0B7300C,
    0x5B328CF3, 0x859579AD, 0x4CB34594, 0x67922371, 0x4D24791E, 0xCC78DE13, 0x9F9E474C,
    0x8CD78E7D, 0x58A62275, 0xA4CC8928, 0xD58B1E48, 0x8B4A8330, 0x9208667B, 0xF284B02F,
    0xE880258F, 0x7C248FF1, 0x2449AA68, 0x6583F08E, 0x69543A31, 0xA6A8A9EA, 0xAC2852FA,
    0x2D072278, 0x0B62C4BD, 0xF3E4B282, 0xF0B530CB, 0x9032CCB3, 0x8D21732D, 0x0D17A8CA,
    0xF865EA33, 0x923F8654, 0x7C9D9207, 0xA0A839FA, 0xAD13368A, 0x575A7A78, 0x2E84A0AD,
    0xDB895243, 0x8B6DC89A, 0x8CF77E38, 0xA334D078, 0x94B02F5D, 0x7F2109C6, 0x7BE9DA5C,
    0x0FF1E47E, 0x9260A129, 0xE6F8AA8B, 0xB67EEFAB, 0x1C0B32D8, 0x4702A25B, 0x82DCBA2E,
    0xE1B52E8F, 0x588F8C43, 0x3318C339, 0x4CB630D0, 0x333A3479, 0x8DD5349D, 0xC6788CE7,
    0xB98D48B1, 0xB1F76A90, 0x8C58D479, 0xEB28B42D, 0x82CAA309, 0xB467A8B2, 0x8CBC5ED9,
    0x1328D276, 0xB22ACCE2, 0xCD4918E8, 0x2EE3F334, 0x098694B1, 0xA3FC7B20, 0xFC7C1F09,
    0x8EBBC943, 0x2A2ED20C, 0xEFB0E350, 0xDD5754D4, 0xE8BC2DD2, 0xAE2A46F2, 0x2E06F2A4,
    0x0F72E0BC, 0x23DCAF83, 0x2991844C, 0xCC634BC3, 0xDADE0DAC, 0xD2033CD0, 0x5490CD33,
    0x40D475AE, 0x309C9243, 0xB80A685A, 0x4D0361DE, 0x5493258A, 0x18CE8B78, 0xD2CA71BE,
    0x3372EE32, 0x729E432B, 0x579A25A0, 0x14CA8873, 0x24C56737, 0x32DDAC41, 0x4BA7A8CE,
    0xD256332C, 0xE3461E07, 0x4826E9A1, 0xA687DA6F, 0xC9325098, 0x6ED7563E, 0x1ABBBE3B,
    0xB62D0363, 0x6D06D2BC, 0x0B52C4B4, 0x73D8B02E, 0x3154DB4C, 0xCD329903, 0x72F3D56C,
    0x8D0480CE, 0xFA11C6C9, 0x83349EAC, 0xE09FECCC, 0x4928D492, 0x4FFB68D6, 0xC9C9D6F8,
    0x331C88A2, 0xD575BE93, 0xA031FC98, 0xFEC332DB, 0x633FE033, 0x68CF359E, 0xDC8FFF87,
    0x37D90354, 0x78C600D7, 0x67BE33D2, 0xD71B655C, 0xB435CC80, 0x6CF38BF1, 0xBA4018C3,
    0x21348B05, 0x42757688, 0x84E3450F, 0x8991FEEA, 0x118D143E, 0x2ADA287E, 0x5889F142,
    0x2884EEDC, 0x605FCD5C, 0xC98206B1, 0xE0BC1602, 0x31EA2CC5, 0xE3E85798, 0x0E58C618,
    0x1573B8F2, 0x19EC8067, 0x74CEA389, 0x712E31A2, 0x8F6308C1, 0xA6DFCE72, 0x55BF8CE1,
    0xA9201963, 0xB3AEE646, 0xD13D1F8C, 0x22A4558A, 0x0D447F16, 0x3A6A0A28, 0xF44EBBEF,
    0x12A3F80A, 0x0E8A2A01, 0xFE73CF3B, 0x6C6A0DB1, 0x80D41B85, 0xB1AC374C, 0x635C6F36,
    0xC6E8E42A, 0x0E11FE30, 0x1BD0086D, 0x3807FC74, 0x6FC0D1B0, 0xDA81A358, 0xFE3086C8,
    0x246D8D81, 0xB0B84803, 0x7497050E, 0x0275A4C1, 0xC4DBA80F, 0x0911FEEB, 0x9381D83D,
    0x2A125882, 0x1A8A313C, 0xA894F0A4, 0xC02D8894, 0xB0528694, 0xB86914A2, 0x416C2F85,
    0xC2F05D8F, 0x0620F415, 0x8CB61E31, 0x6D6738AD, 0x684678D3, 0x8F94F4F4, 0x37641145,
    0x528DCF12, 0x11F9BED4, 0x73E719CA, 0x445EDF46, 0xCB826822, 0x13BC4F3C, 0x1DA3C8C5,
    0x4429F26E, 0x386328CC, 0x34462643, 0xEA7DA53E, 0xBC34C6D9, 0x2C6A8DD2, 0x38D81C32,
    0xE1C63FC6, 0x03623E48, 0x86CC7C19, 0x0D91C53C, 0x1B438A08, 0x54E3B47B, 0x6D5038FA,
    0xD91C0640, 0xAA390D08, 0x787F8C11, 0xDC101B03, 0xF19636C6, 0x82E05F0F, 0x44189824,
    0xC183E620, 0x3E7260F9, 0x26D7907C, 0x483A8100, 0x9E7501F0, 0xF22544A0, 0x9E96CA91,
    0xA53016B0, 0x71545DC1, 0x68045E06, 0x45D0B61E, 0x0C31E62D, 0x19500864, 0x560628CF,
    0x6647B19E, 0x5B39CAFC, 0x8C685BC9, 0x886745C3, 0x5CCA196C, 0xC1AE8B06, 0x6365160C,
    0x2AB9D619, 0x9E619A8F, 0x72C3386B, 0x5718B8CD, 0xE99E63A9, 0x687AE9DD, 0xC2B6DEB5,
    0x82B19DFA, 0x99E6AC07, 0xE90054E3, 0x74360015, 0x871C7B90, 0xCFC9F036, 0x1AE38647,
    0x358704F8, 0x6B0E19E4, 0x421AF5F0, 0xF6364725, 0x4C6D8E58, 0xE8D41BA5, 0xA89233EA,
    0x8398D28C, 0x0739941B, 0x0D79DE35, 0x1B637679, 0x2E68A8CD, 0x420963CC, 0x7B13492C,
    0xF226DA28, 0xBC4E3A80, 0x907A134B, 0xF1303FC3, 0x82294D07, 0x0521F20F, 0x07914828,
    0x54D6FA97, 0x2905D0B8, 0x5C8BF0CA, 0xC61E42AC, 0xF02C45F8, 0x14630CD1, 0x1B1A38EB,
    0x52AE33A6, 0x633D62B2, 0x516BF943, 0x32445D76, 0x3A7769FB, 0x780678D5, 0xEB5DA7E9,
    0xD81A0358, 0xE29E9934, 0x32EF3787, 0xAA3B8871, 0x23AEFC8C, 0xEFEA02DE, 0xDFC23F19,
    0xD758EC53, 0x1BF4346B, 0x20E3D8D8, 0x6C0E2A85, 0xCEC0B684, 0x143327C8, 0xF06CC82C,
    0x1D421B15, 0x59163607, 0xC3FE420E, 0x8900D11C, 0xA961A439, 0x10A33470, 0x1B463C6C,
    0x648DD1FE, 0xD91FE1A4, 0xA81B0620, 0x08330B22, 0xF88C1952, 0x2B1C3B07, 0xF3C86D48,
    0x87FDA01A, 0x1D31782E, 0x5E421449, 0x27C3F89A, 0x4F2F282F, 0xA55DA1E0, 0x40EA03B8,
    0x55D407A1, 0x52F20FE2, 0x80F620C4, 0xE2E45C8F, 0xADF83315, 0x8BB3F196, 0x17C8145E,
    0x8DD180BF, 0xCA0CCBA8, 0x373188DC, 0xD433A2B2, 0xB5F69DAC, 0x022EBEB9, 0x2CE79C23,
    0xF77F3AE7, 0x737C4CCE, 0x94F1A37E, 0x3183446B, 0x58D6F0D0, 0xC667BBC3, 0xA11AA36C,
    0x00641FE9, 0x146BD739, 0x1C8B1AF2, 0x18213DB0, 0x51F27D0E, 0x63ED421B, 0x6941B5A6,
    0x9F78371B, 0x8147FCF1, 0x6B8E4821, 0xE71FE310, 0xA2684690, 0xB4418BC1, 0xF8621808,
    0x70A02E8E, 0xE16C5C9D, 0xC338B63A, 0x86A16A78, 0xD7A2CCC6, 0x1F1BD0E7, 0x6BEA71AD,
    0xFF19E35C, 0x182E45E0, 0x24420933, 0xB87F136D, 0xB13A3FC3, 0x42736907, 0x45129A0F,
    0x09F5E41E, 0x83BB483D, 0x204496D2, 0x4F0A45E4, 0x5B1F0258, 0x766AF74E, 0xA4598BE1,
    0xD9E64202, 0x53191A15, 0xB314668D, 0x99192019, 0xDE3CDF18, 0xBB6E1AF1, 0xC0591700,
    0x81702BB5, 0x6819AB2F, 0xC2650676, 0x86F3957B, 0x98D41B46, 0xF90E370A, 0x92286F8F,
    0x3538DB8F, 0xC0FC233D, 0x9E436E79, 0x442C0CF4, 0x1ED7C9ED, 0x8F1B5A89, 0x1A370704,
    0x786E8E08, 0x68DB1C25, 0x8D4FCC28, 0x34220850, 0x3058D8E5, 0x5A11AE38, 0x9187A074,
    0x3FC498C7, 0x696B797A, 0x950AA2F0, 0xAE184599, 0x8C388B23, 0xE62B16AF, 0xD0D02F86,
    0xD8805C22, 0xCAB8D41C, 0x8C3D915F, 0x12E6405B, 0x27357081, 0x4FD20842, 0x750F8266,
    0xA7485260, 0xB76B07CD, 0x907D68DD, 0x1EE22417, 0x42A50292, 0xCB5778DD, 0x89B14C28,
    0x342334C6, 0x9E8CA1D8, 0x92D6C8C0, 0xE164D781, 0xE933AF1D, 0x3AA6EFFB, 0x2F8F711E,
    0xF19DE459, 0x4DAEF394, 0xABB8D31B, 0xD148F3A5, 0xF3D3E23E, 0xC8F8AE9F, 0xBD4F89F9,
    0xE41FE32A, 0xCA3FE898, 0xC2D08DC1, 0x3CFC91F3, 0x3C17817D, 0x7CE86C8E, 0x27F718AF,
    0x7BB9E7A7, 0x9073CA78, 0x3646F7A7, 0x647C2B42, 0xA8ABC38F, 0x8AC886C7, 0xBA75B491,
    0x90C81C98, 0x91903A2D, 0x43347776, 0x06A0F2B6, 0x0C2E2A1C, 0x11D8A7A7, 0xC5C740FF,
    0x490AE181, 0xFF1081FE, 0x9E1F44F0, 0xF4D3768D, 0x82970E81, 0xDED6D1B2, 0x8287696D,
    0x4500FFB5, 0x6CD5DA20, 0x17395B57, 0x02779030, 0x40A31368, 0x1E30980A, 0xD05490D1,
    0xF5E44510, 0x1E238832, 0xD81DA67E, 0x11200D20, 0x5E95F481, 0xEA0D04D8, 0x16665E11,
    0x1EA3883A, 0x1015767E, 0xA0E036B7, 0x0E448B0D, 0xDA4FB0DE, 0xB4FF5140, 0x6A282D60,
    0x9560B0DB, 0x955779D6, 0x82C8344F, 0xA27B3835, 0xC7B17266, 0x7B28387B, 0xD857E0D9,
    0x173B7A70, 0x3F84F30D, 0xA70D67A8, 0x00D60E57, 0x4FB61541, 0xDB71560E, 0x50DB7A70,
    0x84E7C283, 0xD26040DB, 0x671F1240, 0x0D663208, 0xD40EB49F, 0xD0FF0630, 0x0650D40E,
    0xD10EB0FF, 0x46C16270, 0x0BF0D175, 0xFF5957DE, 0x70A20B70, 0x09F0FF09, 0xA151B081,
    0xD1F207D0, 0x09776B09, 0x7E2973A7, 0x777429E0, 0x0A46D27F, 0xDD6D2078, 0xB0913A86,
    0x5BA3A807, 0x030F609D, 0x512E8938, 0x0760C415, 0x990A90A8, 0x40D21D70, 0x5E74415D,
    0xD867E1D3, 0xF2785F54, 0x2840CA1D, 0x3F3ED281, 0x31EA6C72, 0x71019081, 0x355FE4EC,
    0x973047B6, 0x6A285969, 0xE34100DC, 0xA57C0DC0, 0x0DA82E0D, 0x278C0607, 0xC7B67AE7,
    0x83269560, 0xCA83D8C5, 0xF85183C8, 0x6948BD4F, 0x106990D9, 0x90D96A86, 0x7A773E60,
    0xFF4EE0E9, 0xF3FE0EA0, 0x0D80E90F, 0x750D5503, 0xC6A70DA4, 0x4F20DC0D, 0x004810D6,
    0x484C5144, 0x2300D27B, 0xA80CF0DD, 0x70D90E73, 0x0D30E362, 0xD20E5623, 0x50E72ED0,
    0x7B62F20D, 0xAC0B9620, 0x20B66200, 0x0FF0920A, 0xE80880A8, 0xC41E0A37, 0x24C64D24,
    0x1D2ED07F, 0xA5AE3494, 0x0FF7F529, 0xE949E0A1, 0xF5B36D57, 0x08D34907, 0xB363A91E,
    0x40A50B10, 0x10F92689, 0x7F0AC17B, 0x30AF0B00, 0x0D30D724, 0xE738D70B, 0x54058185,
    0x14F0D081, 0x70157798, 0xF40036B4, 0x4F38D14E, 0xDB7B00DC, 0xD69E79F0, 0x0E64F247,
    0xE560B0DF, 0x382C0DE0, 0x0E27A194, 0x4D9507AA, 0x76979539, 0x95647D7A, 0x409580DA,
    0xA8BD7258, 0x8B47BA82, 0x0279A0D9, 0x936B6954, 0x1DA0DD0E, 0x300D90EA, 0x60D30EA2,
    0x0D00E929, 0x9658B243, 0xB0D76170, 0x0FF8E05F, 0xDA71D0DC, 0xB6020DC0, 0x4F30D00D,
    0x907AB92F, 0xD0CF46C6, 0x85E21C77, 0x8D0C70D1, 0x50C01910, 0x0B515009, 0xC10FF089,
    0xC9730B40, 0x0AB1EE1E, 0xAF742096, 0x863108F0, 0x2470810A, 0x9D2EF09F, 0xA7E924A0,
    0x6DD34907, 0x6E87E29A, 0xE09A7697, 0x0966D207, 0x7E09791C, 0xB09E1F20, 0x0C663108,
    0x2702D2BB, 0x41079BB9, 0x09C0A40A, 0xB40B707F, 0x90D92330, 0x81732D75, 0x8C0C718D,
    0xC7A86F82, 0x8E761797, 0xA88BC7AB, 0xA7A994E7, 0x6A471C82, 0xE54F20DD, 0x78CF0DD0,
    0x8417BF69, 0x4294260D, 0x08537B29, 0x95979D83, 0x4557E697, 0x77A469E9, 0x7BC95F72,
    0xEF4FC47B, 0x34020D84, 0x69536B48, 0xD00DC120, 0xB0DC51B0, 0x58B7690C, 0x7347474E,
    0xF0B31580, 0x8076C449, 0xD04754FC, 0x39490DE9, 0x5420D33E, 0x530C70CE, 0xF0BD0C81,
    0x0A318414, 0xA50B3515, 0xF9029920, 0x0BE0C60F, 0xC10C618C, 0x71840FF5, 0x0A60B215,
    0x9E0B223F, 0x10B028F0, 0x0FF09109, 0xAE0880AE, 0x40810A46, 0x0FF7EB91, 0x490780A2,
    0xB0790A03, 0x09876F3A, 0x9749F07E, 0x36DF0800, 0x07E7E988, 0x77095247, 0x90A429A0,
    0x0F50A60A, 0x03A519BC, 0x409A0A01, 0x0B30BF5B, 0x5E73C1D6, 0x10D00D71, 0x1E68131A,
    0xD60D20D9, 0x00AF0BA1, 0x81E0DD7E, 0xE29E80EA, 0x00D89DA7, 0x0DC0E719, 0x2C0D961A,
    0x80D60E42, 0x0D10E0A1, 0xCD97809A, 0xC0E98070, 0x0E61DA0D, 0x0550D0DA, 0xA7A80D26,
    0x7AB0DB0D, 0xB27C94F7, 0x84823827, 0xA8D0D50D, 0x797A0846, 0xE0E615E4, 0x58D15B0D,
    0x980E447B, 0xC0D550E5, 0x0D60E222, 0xDE44C50A, 0xB0D40D58, 0x1E38268D, 0xD16310C4,
    0x70560B70, 0x0580BA1D, 0x4B0BA22D, 0xA6BD1CF7, 0x6D20B50C, 0x820B00C2, 0x50C41DF0,
    0x0C00C91A, 0xB20B628F, 0x60B91DA0, 0x0BE1570B, 0xC30FF65D, 0x06C92000, 0x15349036,
    0x6B0B60BB, 0xD15B6CB3, 0x15E0B60B, 0x900B30B9, 0x618C14A1, 0x1E20AA0B, 0x070950A8,
    0xA08F0AA9, 0x0AA0FF08, 0x7E7F9652, 0xB51F5280, 0x2F207A09, 0x9729A41D, 0x29B27F20,
    0x9A82EF52, 0x450797F9, 0xB07E0963, 0x0AE1C024, 0x27A52075, 0x30990A19, 0x3050C9A4,
    0x1E4526A2, 0xA9DA9427, 0x9CC1E747, 0xE198E5C6, 0xC4020D00, 0x7A88E40E, 0xDE2290D5,
    0xC0940D10, 0x2ED0CA47, 0xB20C40DD, 0xE0BB0D35, 0x8642C162, 0xF20C10D1, 0x30DE0E91,
    0x9F14FF1D, 0x25AA50DE, 0x50DF4F88, 0x6C87169E, 0x9E7C6825, 0xA0D80E46, 0x29650B1E,
    0x420D30E5, 0x80CB0E17, 0x1F28FA7E, 0xDB0C50D6, 0xA6314F17, 0x4020D60E, 0x090D60E9,
    0xD0D90E66, 0xA1B57A40, 0x9A0C00D3, 0x27691562, 0x49F0B10C, 0xB824B294, 0xF0880AC0,
    0x0B60BF0F, 0xB9B6609C, 0xE0C428F0, 0xACEA2414, 0xB8153AC5, 0x236B0B50, 0x3051909C,
    0xFF4ABAD8, 0xC36BB730, 0xB7AA24B7, 0x5B0B40B9, 0xF0B10B71, 0x7E50B714, 0xA10AF0FF,
    0x10A62430, 0x0AC63109, 0xA6B6508D, 0xC8772460, 0x90D41907, 0x9A7EEAF1, 0xB09CB992,
    0x6D891607, 0x0EA3D918, 0x40993459, 0x0F408608, 0x2B0BD152, 0x1802B020, 0x0AB0AC0B,
    0x9B0AB0F3, 0xD4F78070, 0x8BE0E540, 0xACA8F83B, 0xD0E7A847, 0x0D75A10D, 0xBE1A10CA,
    0xEB690AF0, 0x0E05630D, 0xD0B690CF, 0xB6D20BE0, 0x0600B80D, 0x590B946C, 0x80B86280,
    0x05775974, 0x4B0B5743, 0x00C30D27, 0x18CA6F62, 0xDB402716, 0xC46C9D90, 0x9419789D,
    0xA70DC715, 0x71A15976, 0x5960D80E, 0xE69910D1, 0x149F0CB0, 0x6270CF0F, 0x5E0CD0EC,
    0xE0D48650, 0x0B818D06, 0xD69415B2, 0x81E40E11, 0x1EA0C415, 0x1B0C00C0, 0x90B30B8A,
    0x0B90BEB6, 0xBF0C3A1B, 0x42671D30, 0x1EA6CA19, 0xA10B70B8, 0x9AD317B1, 0x0BB48B0B,
    0x7840D0B8, 0xEB7A1EBB, 0xB7BB71B7, 0xB4873B74, 0xBB761900, 0xB7BC2B1E, 0x0C1A10B3,
    0x20B91EAC, 0xADE1200B, 0xA00B328F, 0xD0A8B690, 0x0AB99108, 0xA399108B, 0xF51B0820,
    0x24708009, 0x973459AD, 0xA7F388E0, 0x87791529, 0x9A7F7BA2, 0x29B30A02, 0x09634988,
    0xAA08B08B, 0xF779BAC0, 0x09A2334A, 0xA785E088, 0xD6310950, 0x0D65777A, 0x844F60D7,
    0x982E4F4A, 0x15B8BEA8, 0xE3B1D7E4, 0x4A180CF0, 0x0DE7E0B4, 0xDD7DB0BB, 0xC62E0B90,
    0x05C0B80D, 0xD30B748C, 0x40BA0D9B, 0x6271D286, 0x6908F961, 0x023F0D88, 0x71F50173,
    0x2A9D050E, 0x7C7EA997, 0x37F0D861, 0xE5907B41, 0xC6200CF0, 0x6200CE0E, 0x9A0C40E0,
    0xF2ED4012, 0x0BEB1D77, 0xC00FF25C, 0xE6A70B50, 0x63B51413, 0x0D3C350D, 0xB0B90B65,
    0x0B70B547, 0xB40B347B, 0x30B150D0, 0x0B840D0B, 0xB34F20B8, 0xB2B36A72, 0xB79AC547,
    0x7EC29B72, 0xDC2DB7EB, 0xB832FEC2, 0xB3C320B2, 0xBB7315B0, 0x194AD115, 0xBB1D3657,
    0xD2300AA0, 0x98E0960A, 0x8B08C0A8, 0x70A50FF0, 0x0A162008, 0x0D24C51A, 0xC90F0989,
    0xB9EC4E3A, 0x4CBA0877, 0x909E29A6, 0x49B76607, 0xF208108E, 0xC0AF0B31, 0xC5C0730A,
    0x9B0A465A, 0x809E77D0, 0x34608708, 0xA1349083, 0x66AE08F0, 0x6140C90D, 0x506090DC,
    0xCC904FE9, 0x0CF956B3, 0xAC0C350D, 0x20E97420, 0x0DF22C0D, 0xD498B0C8, 0x97F00BC0,
    0x0D886475, 0xD405A0B9, 0xA0DCD2AB, 0x1DF0640B, 0xE37540AF, 0xCCE30C30, 0x4F39610E,
    0xE26A70D4, 0xB8305800, 0x54250F60, 0xEA0D10D6, 0x50C50CD1, 0x0BD0C61A, 0xB00BB876,
    0xF2112430, 0x1DAA1F28, 0x46153D47, 0x40BA47B1, 0x0B77A70B, 0xB74F20B5, 0xC6A70B60,
    0x0B56A73B, 0xFD5420B6, 0x22B347B2, 0x2B00B640, 0xD30B4B7B, 0x263ACD3A, 0xC2CC2A12,
    0x71CCDC2F, 0x5D70D73D, 0x0B31EBD7, 0x6ECCD153, 0x9157B73D, 0xB631DA12, 0xA10B41D6,
    0x7CDEA180, 0xAE6C3D80, 0xBB0850A2, 0x407F09DA, 0x6D4A379B, 0xD7BA0CF4, 0xB6D72F26,
    0x5AE90F64, 0x440942F2, 0x00851EF3, 0x0C50F208, 0x280BF0C5, 0x54A9D000, 0x09F87687,
    0x9DD07087, 0x99A00840, 0x0A11F208, 0x577E808D, 0xB8BB1575, 0x9D00E248, 0xE7846A9A,
    0xEA840D60, 0x15E0C80D, 0x070AC0C5, 0xF0D10DC8, 0x0D062409, 0xBD0CEC8A, 0x01D706B0,
    0x8E2BD00C, 0xB60D2BD8, 0x70D5AB00, 0x80B8640B, 0x2C68EBFE, 0xC5410E12, 0xACB1A198,
    0x3F0B5B83, 0x336B6602, 0x992C120C, 0xB615E0C1, 0xF6A70BB0, 0x4020B40A, 0x0D0B40B0,
    0xFDEC0B94, 0x15E2FD0F, 0x63190D5B, 0x7AC51572, 0xC29C2615, 0xB5B7753A, 0xAD551A10,
    0x14F1B51E, 0x200B40BC, 0x823F1B51, 0xD6FB820B, 0x76D72E10, 0x9D77E12D, 0x2B3C2FD7,
    0xC2D6EADB, 0x83401A19, 0x1D30A9C1, 0x1B233C3A, 0x90A6A2FD, 0x7FA85E08, 0x480A22ED,
    0x75A97F9A, 0xD90E2D87, 0x1D6DC90E, 0x951D09E5, 0x0950FFC4, 0x97918415, 0xC0A70950,
    0x2220BF10, 0x94081028, 0x804F0910, 0x08908C07, 0x2106709A, 0xB0460E55, 0x0E505705,
    0x64066053, 0x70740E50, 0x04F08408, 0x5816EDA4, 0xE0270CA2, 0xA2F09009, 0x070860A0,
    0x8D9D0A1D, 0x1F2087A3, 0x200860A5, 0x708A0A06, 0x1EABC024, 0xDAB34DB7, 0xF58A6090,
    0x0D80EAA8, 0xBC0E0846, 0x20AE2402, 0x0CF0DE74, 0xD00DF37F, 0xE0CF8760, 0x26C3A80B,
    0x03C077DB, 0x90B30C1A, 0xABB90234, 0xC60AB0B7, 0x515BD47D, 0x515C090C, 0x0848B0BD,
    0x20BAC1F3, 0xCC430554, 0xBB873DF2, 0x1CB5D640, 0x48B0B712, 0x734B20B6, 0x7B7BD5B8,
    0xD58E0D0B, 0x24AC663A, 0xE0BBD6EA, 0x15B53AD6, 0xA1C2EAD4, 0x4EBBB811, 0x1A1EBD0B,
    0x74EC1E14, 0x9C2FE11D, 0x153E16AD, 0xEB121E18, 0x00B5873D, 0xECD0BC19, 0xFE0AFA24,
    0x21D30A7D, 0x89B09C0B, 0x8B0900AB, 0x80850A69, 0x9A40A67E, 0x3B07B0A2, 0xCB96E2FA,
    0x09FE2D24, 0xE82ED079, 0x207BEEAE, 0xC5509B1F, 0x775A6095, 0x909509A8, 0x06806009,
    0x53099067, 0x40610620, 0x03502A0E, 0x2D0F1033, 0xF0340370, 0x035F030F, 0x330280FF,
    0xE0FF0300, 0x03603802, 0x330290FF, 0xF0FF0310, 0x297032EF, 0x27096096, 0x6169E590,
    0x0C80C60C, 0x8C09A07F, 0xEE646310, 0x0870A485, 0x870A351B, 0xE0A32ED0, 0xF2AD0707,
    0x8E09D620, 0xA21624B0, 0xB320E050, 0xE797F0D9, 0x76090DB0, 0x8294F8E7, 0xA50BD4F8,
    0xD0D12960, 0x0C12290B, 0xB19730AF, 0x22018072, 0x48BF1E1E, 0xC1402360, 0x24B6B835,
    0x15B0B71A, 0xB8ADB3C2, 0xD26350D0, 0xCBE0BA50, 0x5E0B2240, 0x01EAA151, 0x0BA36BA2,
    0xAFDF6F62, 0xDEB715B0, 0x0B4B7DD6, 0x8FC0C47B, 0x315E6CB4, 0x0B5F75B7, 0xB30B5DF8,
    0x4121CBBC, 0x0B348B0B, 0x7B0FFCAC, 0x59C248B1, 0xC2DEC3B7, 0x2FDFAE0E, 0xBF6FE0EC,
    0x0B4DF8D6, 0x21208DEA, 0xCE0AF921, 0x3A3C2FDF, 0x200AAEC0, 0x60A30B81, 0x0960B029,
    0x880A9B1D, 0x20A8B650, 0x0A4ABB08, 0xAD9185B8, 0xA90D09D3, 0xCF534949, 0x780A06AE,
    0x707A87A0, 0x3AD0A024, 0xFFA3509A, 0xC07007C0, 0x03002EDC, 0x36F0D02B, 0xF038F170,
    0x0370FFF0, 0x3BF05036, 0xF0380390, 0xF000360F, 0x13FD0FCE, 0x6F1102FF, 0x0FF02502,
    0xF1EF806A, 0xA168F1C0, 0x07FAC20B, 0x5E08A098, 0x12ED2EB8, 0xCE46CE0A, 0xEB2ED088,
    0x8D05ABB2, 0x08B09C7E, 0x8E09B620, 0xB0CCD070, 0x19C1E7AC, 0xBF0C90FF, 0x3B671530,
    0x0FFD6ADE, 0x176C5100, 0x7CC77FB1, 0x0B55E411, 0xB85EBFD7, 0x75DBFD76, 0x5CBFD7AB,
    0xBBFD82B8, 0x3FD84B75, 0x517CB75C, 0xE38BF5C4, 0x6CB7912D, 0x11F9347D, 0xBA8FAD57,
    0xF97CB568, 0x87AD574F, 0xFCBA272E, 0x2E662B98, 0xAE7B1C96, 0xD68B88BC, 0x8B315BC6,
    0x918A3C4E, 0xFFA5C956, 0x0A7D356C, 0xA2D369CC, 0xA451794C, 0x42EB0BA5, 0xCE64B997,
    0x962BC87A, 0x86B05E54, 0x36758C41, 0xB2B52C97, 0x6912CE88, 0xA7D6966B, 0xBAD56B0B,
    0x2D567185, 0xDEF8AD86, 0x5FEA7502, 0xFE93482B, 0xE8442A9D, 0x7D40A91F, 0x93EA7DFE,
    0x3EA6DFE7, 0xFA71FE78, 0xA85FE7C3, 0xEB367E3D, 0xCF69EC71, 0xF47CC99E, 0xC7C4BBFC,
    0x923F2532, 0xF2A96CD3, 0x170D07CF, 0x88DC76FF, 0x0D477B61, 0xFC723CDB, 0xF78371AB,
    0xFE361B8D, 0x030190E1, 0xFF1309B8, 0xF0F8845E, 0x4724116F, 0xC75C0071, 0x76FB5D9E,
    0x7FBDDDEE, 0xFC5E1F07, 0xC3E5F278, 0x67FA12FB, 0xFF42A212, 0x34121930, 0xF91FD099,
    0x5221319E, 0x3FFF096C, 0xFD209250, 0x50944573, 0x95E57228, 0x48B97E82, 0x12445E18,
    0x7E8B97A6, 0x5DA085E1, 0x4288822C, 0xC8A18B08, 0xD1729116, 0x3B0DC330, 0x1143F0E4,
    0xA549F43D, 0x31344E9F, 0x5C5712C5, 0x5716C549, 0x5A462A4C, 0x29519A90, 0x0A546F1A,
    0x2A2E59A5, 0xBC5A272A, 0x99AF89E2, 0x16A8A168, 0x4AF2B05B, 0xD2AE5997, 0xB4A121E9,
    0x28A1EA2A, 0x2B25A9FF, 0x52ACAD2A, 0x62392CAB, 0x525D48E5, 0x591FE589, 0x9FE4E936,
    0xE4491654, 0x13E243B0, 0x3ACD1025, 0x4F34E3E9, 0x142C70FE, 0x64FB343E, 0xD93A7FB4,
    0x4C4DB4E3, 0x3C92A7FB, 0x1287F8EC, 0x0469FED5, 0xA1FE398F, 0xFE1E0842, 0x1D379471,
    0x9FE19874, 0x01C07A1C, 0xF86E1D38, 0x381C06C7, 0xDC8661CD, 0x04E1386E, 0x00D83AE7,
    0x808C2352, 0x5F573CC7, 0x59563585, 0x17EEED67, 0x6538215B, 0xC9B65194, 0x36489204,
    0x001304BB, 0x1FE51945, 0x07FAF05F, 0x42A45F99, 0x808D9806, 0x602AE5C1, 0x18091176,
    0xC5D22E5E, 0xD97C8996, 0x745EA2E5, 0x0EC40B51, 0xA365C979, 0x373C4910, 0x3C47715D,
    0x517745F7, 0x77DE1164, 0x4657845D, 0x31B5ED1C, 0xDA291EDF, 0xAC945F91, 0x8C48C5BC,
    0x96EA72E4, 0xD2260A59, 0xC2F85B16, 0x0D2A164B, 0x5B61987E, 0x96B2DABC, 0x45B22659,
    0x9632A916, 0xB857166A, 0x5C48E57A, 0x9FE5494C, 0x76113058, 0xF9164695, 0xE24294C7,
    0xCDCE850B, 0x944CF0FC, 0x93D4F03D, 0xC5013F4F, 0x2CCB0F44, 0xA0D02C89, 0x8C4338F9,
    0xA1A87A7F, 0xE0781EB6, 0x681C06AD, 0xDF06E7F8, 0x5321CEA2, 0x2190681D, 0xF85014EA,
    0x520F0607, 0x1003C12D, 0x0D4329FE, 0x35A12835, 0x66D7B56D, 0xDE67D5DB, 0x61184086,
    0x17248190, 0xD5B2A45D, 0x01847F98, 0x4B09EF46, 0xBFAAE5AA, 0x9745E1FF, 0xCABE168B,
    0x124CA924, 0xA45B9749, 0xC7F1B752, 0x72975DD1, 0x379F2B76, 0xD7377A5E, 0x3F7C73BC,
    0x89F411AF, 0xC7C59972, 0x687969C4, 0x796D2D61, 0xFFD61688, 0xAB96C599, 0x964ABF62,
    0xE59ABC5B, 0xD16FD876, 0x2F2A7032, 0x92964A76, 0xADD1E164, 0x9259687F, 0xBA1658CA,
    0x73309585, 0x00150539, 0xCCC4A129, 0x0524D244, 0xEB164010, 0x713B33C3, 0xD2E74D26,
    0x0F64CB4E, 0x83F136C9, 0xA8F04A34, 0xB143D0A3, 0xDB090270, 0xE9FA8D42, 0xA200747F,
    0xF875A887, 0xB21B072D, 0x520A81B6, 0x7C188FF0, 0x08321FED, 0xE1FE08C1, 0x66D41602,
    0xC4889110, 0x4136DA08, 0x6D50560A, 0x30C618B4, 0x64124022, 0xC717AB64, 0x7046D828,
    0x8C820B91, 0x59782090, 0x8238B95C, 0xD0B2110B, 0x1C80B529, 0xC3372C49, 0x732891C8,
    0x0E579437, 0xD122F739, 0x3F742BE9, 0x7D1017BC, 0x611FA4C8, 0x38B44A05, 0xA16A505D,
    0x6320A2B7, 0x1DF8C92A, 0x96762D14, 0x2262C058, 0xE24578B1, 0x5A952166, 0xB525A2C4,
    0x74E908B8, 0x88B03B54, 0xA15E1649, 0x92F22C05, 0x6C38568B, 0xC5109F16, 0x88F1543F,
    0x10E2A55F, 0x204C3888, 0xC707D660, 0x7B4EE280, 0xF264D3EA, 0xF84C9960, 0x93E51FEC,
    0x732CCF4C, 0xA6583D89, 0xC320680E, 0x9C80783F, 0x5240E4E3, 0x0D94783E, 0xFF9C76AA,
    0x03056701, 0x52080184, 0x84108365, 0xF02B1FE0, 0x806E7440, 0xC2881C03, 0x6584AF82,
    0x8B555D2C, 0x17831C5F, 0x2F212A3F, 0x5C0B489C, 0x201765A8, 0x3B0B85C4, 0x948E9522,
    0xAC3424E4, 0x886B0D5C, 0xB0EA1DC3, 0x61EB9973, 0xCD288534, 0x294429C4, 0x5AD7D95E,
    0x820B0844, 0x2515E2E4, 0x5D08857C, 0x3C57B8D1, 0xD3C017A4, 0xE6282C45, 0xA2CD220A,
    0x08710C8D, 0x92B2F256, 0x2B4F20BC, 0x43C590B3, 0xBA0B1166, 0xA82EC2BC, 0x362C5030,
    0x28C389F1, 0x218B1142, 0x40FE9B04, 0x21F8501F, 0x0D207C34, 0xBE70F427, 0x32D20A41,
    0x2168A89B, 0x3607B32D, 0x3768E1A4, 0x78D55AC8, 0xE81E0393, 0xFC9B53A0, 0xC068A554,
    0x47381502, 0x0E381C04, 0xC056C609, 0x0503FC0E, 0x2225301F, 0x3708F116, 0x3FA7D2C8,
    0x7475EA05, 0xC0650BF1, 0xC1677721, 0x716C59CB, 0x22E2308B, 0x96D13986, 0x4C94984F,
    0x446E5EAA, 0x33A67CCC, 0x69C3CAB1, 0x5F883576, 0xAA8E21F5, 0x258B1574, 0x4957164E,
    0xC2C456A7, 0xA2C45F97, 0x4600FF15, 0x8FF14A2C, 0x13C2C060, 0x25856AC6, 0x7F8972FA,
    0x6F17E334, 0x16318695, 0x60680D82, 0x80D21AC8, 0x241A3122, 0xA53A2C26, 0x089B168C,
    0x11F1642D, 0x2902C45A, 0x2D8AF0AF, 0x5556F150, 0xA530C250, 0xFE218450, 0x6C410A21,
    0xA080144F, 0x2334640F, 0xC1E2889A, 0xED709C32, 0x518B6265, 0x0E420CCB, 0x0D4D906F,
    0x1C03A372, 0x3B070718, 0xF80DCDF8, 0x541C1C77, 0x7D2D692A, 0x2A6A08C1, 0xAAA41183,
    0x29A81F06, 0x8250420E, 0x07A1107F, 0x50476842, 0x57DDBBB5, 0x728482D6, 0x72504850,
    0x3A194611, 0x78BB226E, 0x726A4CDD, 0x7556654C, 0x6AD55B86, 0xA345E97C, 0x468E9DD3,
    0x34AB02FF, 0x8D3B0BEF, 0x18784F1D, 0xC25A27E1, 0x80578BD4, 0xF8B0AE02, 0x4162308F,
    0xA2C4621F, 0x0588C77D, 0x8ACAE01D, 0x19437145, 0x3887F899, 0x7F8AE1A8, 0x5A1AA37C,
    0x0C3586D9, 0x30668D5B, 0x393270A4, 0x523E5EAB, 0x364AFF8B, 0x8AB8B12E, 0xA611562D,
    0xC0C28858, 0x23C4A0A8, 0x848A31FE, 0xFCB4B8EE, 0xFC6783F9, 0x5AD819A8, 0x307713C6,
    0xFA2D9232, 0x41DC440F, 0x81983EC2, 0x1C6B8072, 0xB7EA724D, 0xD4256526, 0x1582F06A,
    0x3504902C, 0x3208816D, 0xC00FB510, 0x181A0734, 0x60320ADB, 0x01B0364A, 0x6EE08D0E,
    0xB69CE59C, 0x0E630D68, 0xC15D90B2, 0x30A1F98C, 0xB42210C2, 0x7648B3FC, 0x8B41E801,
    0xF5ECAB64, 0xC2AE4CDD, 0xF0A263C3, 0xDDCB9378, 0x94AD2245, 0x27A540B8, 0x91887A46,
    0xCCB0A216, 0x3C29E8D6, 0x1D578A32, 0xC9E4E31B, 0x4D64D485, 0xB23FA0DE, 0xE298500A,
    0xC618D31F, 0x8C41B247, 0x16633192, 0x2CC6698E, 0x678FF0C6, 0xFF0AC2CC, 0x8C2C86B8,
    0xA0578D26, 0x50C91FE1, 0x9C321B45, 0x4399610C, 0x4722611A, 0x0E123635, 0x1AF8946B,
    0x118660CE, 0xFF46A761, 0x2C864926, 0x8E2C6CCE, 0x18560B14, 0x5ABA1568, 0x3A0E23CC,
    0xE628448A, 0x0CF08113, 0x89F3249F, 0xA2A63E89, 0x265425B0, 0x470FF7D8, 0xFF0EE1E8,
    0x007241F8, 0xAD4E039E, 0xADC3B7D2, 0xC06CD41A, 0x2091AEE5, 0x81102E3A, 0x0331FE07,
    0x0734D40F, 0x074E0362, 0x1883B6C6, 0x83116D40, 0xE607C458, 0x9792723C, 0x50C317E7,
    0xB2141D06, 0xD3105B31, 0xC5B2E616, 0x681D0A59, 0xBE1CCF9A, 0x46094B9C, 0xA9246CFC,
    0x1AD202D0, 0x39CBDE39, 0xC88C1702, 0x93194302, 0x64A90622, 0x6C2CBA0B, 0x4A1B182A,
    0x2F9AC28E, 0xEADA8F53, 0x926C9755, 0x568B798E, 0x9E15CC1C, 0xCA3FC4D8, 0x74858D01,
    0x618618A3, 0xC0CC2C86, 0xC3FF5F6B, 0x8280B41A, 0x85816DDB, 0x15C3287F, 0x2C48285C,
    0x730FF0DC, 0xE4D5C350, 0xB242C6B0, 0x748F8CF1, 0x5ED91AA3, 0xE1963206, 0x6C58BCDF,
    0xA7AD9221, 0x10B77EED, 0x1589122C, 0x3FC558A8, 0xBD09A156, 0x7811A28E, 0xE82084F4,
    0x08400A13, 0xA8A09039, 0xF0F22737, 0xA1E44C6F, 0xE468907D, 0x6510803F, 0xB896F3D9,
    0xFF41CE56, 0x170367EC, 0x0E061974, 0xA2081AEF, 0x480F8333, 0x301D06FC, 0xB3A2077E,
    0x54D40E02, 0x03706D0D, 0x7D3E4A3B, 0x188783EA, 0x09C650C4, 0x70CFC162, 0x6198C5DC,
    0xE4BB6F74, 0xF9C5F3AB, 0x34C46039, 0x42A8553F, 0x8E945C74, 0x08A46722, 0x0AF5CC2C,
    0x15E2E228, 0x520A137A, 0xA7949590, 0x3D5F659C, 0x2C00BAAC, 0x0589E4B5, 0x988BA059,
    0xE27C85C0, 0x9D831988, 0x72ABE050, 0xF8580688, 0x86006A87, 0x58864283, 0xB06728F0,
    0x87F82A05, 0x0E05A065, 0x305A063C, 0x8598611A, 0x5B060145, 0xC86A2838, 0x862363B5,
    0x5C05E085, 0x916F9238, 0x89F2F30A, 0x59BF834C, 0x40B936E0, 0x1931E5A3, 0x531E39E7,
    0xA8C38520, 0x05095F84, 0x532D1044, 0x18F68430, 0xA408C7B2, 0x42A4304E, 0xE048B7FA,
    0x0208C903, 0x200DC81A, 0xCA943840, 0xBDD94B3D, 0xE8B86BDE, 0xFBE10188, 0xBE281A07,
    0x333E414E, 0xF817A9AC, 0x8138E880, 0x440E6812, 0xA8361EA0, 0xC3A439BE, 0xE10590EB,
    0xE0BD80A1, 0x2A587105, 0x62A1911E, 0xFB43091A, 0x9853F1C3, 0x9CBF43F2, 0x10B589E8,
    0x0B08589C, 0x1E0B0858, 0xC85905E4, 0x192C48BC, 0xC20560B1, 0xE9220581, 0x8B42CB05,
    0x17A2D8A0, 0x12212FCA, 0x1DFB53C0, 0x5810A2B2, 0xE90E3148, 0x88985926, 0x55053859,
    0x20558990, 0x869871A8, 0x5C0640BC, 0x22BFB1D0, 0x05685F14, 0x5705D8C9, 0x805D8F88,
    0x25B9EA85, 0x5D0600C1, 0xC1720AB8, 0xA6010E10, 0xBB2CA89E, 0x6057BF80, 0x85918385,
    0x23AC7190, 0x641C9D6A, 0x302AB785, 0x5F053303, 0x48438C59, 0x8CF0C813, 0x7FA8804F,
    0xD0C90D10, 0x42924304, 0x1A8210C9, 0xD8209AC8, 0x9FE29301, 0xDD3DC94C, 0x8C2F3853,
    0xC30BE001, 0x8C01A9B1, 0xB3893E3B, 0x29800F01, 0x53A5281A, 0x9012012A, 0x822021A4,
    0x69865075, 0xA80E8698, 0x3E9C89C3, 0x0A85B185, 0x105F1DC8, 0x09125E07, 0xD71DF059,
    0x3BAD98C1, 0x09C117A6, 0xAA88F8AC, 0xEBF805BB, 0x1C208F05, 0x5905F12B, 0x805F0858,
    0x05E12385, 0x6406241F, 0xB8610679, 0x05C86244, 0x5D062996, 0x98608F88, 0x06231D05,
    0x5F87FB3C, 0x488A3FA0, 0x9839DF8B, 0x019D48A7, 0xB451C524, 0x9312B2BA, 0x5A059098,
    0xA1E239E8, 0x1C805812, 0x50A39456, 0x505AC208, 0x86096285, 0x619E905A, 0x230E05B0,
    0x9BD98C86, 0x5C2B808C, 0x611A9D18, 0x4A5B4931, 0x0C058859, 0x81D9AC91, 0x8AD41D85,
    0xBE41DACA, 0x3C0312A4, 0x9E3A751E, 0x59187057, 0xCBCD4578, 0x87F84E04, 0x1F29D852,
    0x0AD38F6B, 0x03E8C784, 0xD5C758D2, 0x487F8CC8, 0x81F9A982, 0xFE949A4D, 0xB1FB9499,
    0x0179A8A4, 0x12A03816, 0x33E22530, 0xB8D01AA5, 0xE3C339A8, 0x5AE8482B, 0x9B181120,
    0xB1810011, 0x78378359, 0xC8A04E03, 0xB93E9CDE, 0x900A8671, 0x07186188, 0xEF1DF058,
    0x40BD8912, 0x89EC918A, 0xE005DC92, 0xFA7605B9, 0x05285787, 0x89C9FC58, 0xFBEB8678,
    0x86686C87, 0x6806FBC5, 0x306AB128, 0x05790786, 0x6706F1E9, 0x406B9308, 0x2BA04606,
    0x7F830059, 0x905A0630, 0x85908283, 0x72860ABB, 0x38578992, 0xAC748F49, 0xA84A8CA7,
    0x9D003ABC, 0x5019E485, 0x2EAFEACA, 0x217EA112, 0x25E09B9D, 0x8E39F088, 0x808C4470,
    0xCBDB1885, 0xC78581E3, 0x69DC059B, 0x1D7059D0, 0xCAD069D8, 0x1B181D6A, 0x2CA8ABCC,
    0x12D11512, 0x6CC1D11D, 0x92A4981D, 0x1A922056, 0xA8569E93, 0x0C584D04, 0x50934843,
    0x224023D0, 0x140BD59F, 0x258C7040, 0x181D81F0, 0xB841AB38, 0xE19FE4D0, 0x34D3CD28,
    0x00F01A25, 0x53433011, 0x40E3C80A, 0x00E38995, 0x32A0200C, 0xB432815C, 0x0440DE24,
    0xDF00E208, 0xCB39D304, 0x06806285, 0x6209200B, 0xD2760720, 0x0A709092, 0x8F8984E6,
    0x01E005E0, 0x9EA84805, 0x0023B84B, 0x8CC604F1, 0x87F86836, 0x65069870, 0xB87187F8,
    0x069CEF06, 0x6786E90C, 0x485E8910, 0x8718C305, 0x6F2B9866, 0x59348628, 0x2DC05906,
    0xD3858863, 0xD0588608, 0x9874612B, 0x8D85885B, 0x018C0B90, 0xD524A950, 0xD4B161E4,
    0x885B5111, 0x55589285, 0x158580A7, 0x98A2D113, 0xB70089AA, 0xFE50C9E3, 0x243B8BCA,
    0xD5E05A12, 0xE3AC91E3, 0x755F22E9, 0xCBEACA98, 0x13563513, 0x4514D645, 0x41B43BD1,
    0x8385526C, 0x905105B9, 0x0470559E, 0x418518C3, 0xD9F10F68, 0x07F9F304, 0x7FB7804B,
    0x781F8260, 0x8DFC2C14, 0xFBC7981D, 0xBCD1D231, 0x01952481, 0x268E04D4, 0x800E1A8D,
    0x81CC33D2, 0xE380D00E, 0x615480F8, 0x81BA9852, 0xE6A9B484, 0xA03307FB, 0x87483A83,
    0x39D83530, 0xCD32D323, 0x83D8600A, 0x94536C8C, 0x8898CE68, 0x062889D3, 0x460CDC54,
    0x104B1960, 0x2BB0CF04, 0x0C53F2BD, 0x088236A1, 0x30CB5987, 0x65071592, 0x40628910,
    0x07510185, 0x6E0BC865, 0x24F60600, 0xB5D85806, 0x0905A05F, 0x705905DB, 0x05805C35,
    0xB898CD3E, 0xFDA0D518, 0x4C21C4CF, 0x0992759E, 0x21D1B005, 0xD0885B3A, 0x8A4C0C67,
    0xBD5E12B1, 0xA7C55BA7, 0xC9232CBE, 0x64AF55A2, 0x563ACA31, 0x145AED65, 0xBA7DD145,
    0x085C6D8A, 0xAD058059, 0xF05705C0, 0x10305392, 0x8204D05A, 0x6845054A, 0xAD40CD84,
    0xFA0408CD, 0x68CF56F0, 0x81F02002, 0x9347907F, 0x101E01E2, 0xD7381CD2, 0x16CD2523,
    0x7577D250, 0x57901BD2, 0x7AB894D7, 0x101DD7BD, 0x819A9A81, 0x1A52B00D, 0x729A80E8,
    0x01043381, 0x46201814, 0x484D84C0, 0xDD258383, 0x9F054339, 0x498F83E3, 0x09E5361D,
    0x5F4FC095, 0x605C9E48, 0x850C0905, 0x4D31D047, 0x6CC98438, 0x0FF84D85, 0x7FABF06C,
    0x586C86E8, 0x06B06B3C, 0xC406CA28, 0x9860C0EA, 0xBCC8B108, 0x5EC4BC9F, 0xE4FB05B0,
    0x85F99285, 0x59B4585D, 0x29E03A38, 0xC052B255, 0x1B4C0D53, 0x54051D4C, 0x5EFDF055,
    0xEF5F21E5, 0x58B95EF5, 0x562D15D1, 0xCAB1492D, 0xC5A42C8A, 0x5F735441, 0xA73F818A,
    0x5AFF3ACD, 0x5FDA7D88, 0x5705836E, 0xF8590AF0, 0x85612A18, 0x090550BF, 0x28500594,
    0x9EA05496, 0xC504313D, 0xC31F84D0, 0x0C504084, 0x2081F827, 0xB8E2A490, 0x29301E9F,
    0x1B14C9A9, 0xC9A801B8, 0x8DC81901, 0x1AAEA576, 0xB5270100, 0xC7F00F81, 0x9AC81C32,
    0x2482C81A, 0x4328E048, 0x173893E2, 0x09B18108, 0x02182482, 0x6B85D074, 0x280D0668,
    0x2EDE21DD, 0x3E8608B8, 0xA98C2350, 0x857D5A05, 0x1A8B2223, 0x085685E1, 0x0FF05293,
    0x43846474, 0x85959D80, 0x12385FAB, 0x5F10339F, 0x38918F40, 0x16E05F98, 0xAF05C888,
    0x885C85D8, 0xD144C12C, 0xA155016C, 0x95EECA9D, 0xE39DF3E3, 0x3ADF45F2, 0x0E3A63BE,
    0xD0AA7BD1, 0xC1E3CBAA, 0xC0BCE3E4, 0xC6B55CC1, 0x578BE46A, 0x9CE9BAE8, 0x05590046,
    0x06056987, 0x90538554, 0x052855C0, 0x52056103, 0x1856C4B8, 0x05799285, 0x55AB9851,
    0x23B084D8, 0x84BE2A85, 0x6E841841, 0x78C50405, 0x02202082, 0x1E573B80, 0xB9478200,
    0x0DF81E81, 0x19A9194F, 0x301914A8, 0x81A95301, 0xE8E14483, 0x23892E78, 0xC32E6143,
    0x62C31E61, 0x64D961AE, 0x83457BE1, 0x4C83B03D, 0xDE68E220, 0x0602242E, 0x5F49803F,
    0x92A58730, 0x05D05D8A, 0xB2BF7260, 0xD4A40858, 0x882902C4, 0x8092605E, 0x1E329C21,
    0x16454ED0, 0xFF8AF418, 0x8895983D, 0xE0144E2C, 0x51057C56, 0xB5A1D515, 0x67E63C63,
    0x7F67DE3D, 0xDE405626, 0x27F600B6, 0x8241C681, 0x9682DB2E, 0x8570BE46, 0x56922055,
    0x88C1D678, 0xC09648E8, 0x54903648, 0x41030530, 0x30E05285, 0x533CD68A, 0xCE4A30E0,
    0x99285264, 0x20851056, 0x3B740584, 0x2BE04C05, 0x8384584E, 0xD03C845A, 0x01C0220C,
    0x1E81FA93, 0xCADFD210, 0x81F01C14, 0xFBADEE0E, 0x91A801A1, 0x9AE01381, 0x1B25365E,
    0x56634310, 0xE626646A, 0x10A026A6, 0x50134348, 0x14E14F20, 0x0CEAB042, 0xFEACE690,
    0x06305CA9, 0x55833864, 0xC873AEF0, 0xBA11C5C4, 0x00AF38B5, 0x48AF0B13, 0x8958AF08,
    0xD83A634D, 0xCA798589, 0x09F55933, 0xA4234891, 0x20A117E8, 0x1C398C88, 0x3FE385ED,
    0xFE7EEC06, 0xDEF6C1E7, 0x31683E80, 0x5C6AE829, 0x183E8808, 0x5607FEC6, 0x59870548,
    0x93085405, 0xC9983EC9, 0x0E489876, 0x6CAE8C13, 0x48983854, 0x36CE1876, 0x64985313,
    0x54239280, 0x385630E0, 0x056BCC85, 0x571E9053, 0x48C10520, 0x5B804F85, 0x4893284F,
    0x49460C48, 0x3D902502, 0x4C0DF81C, 0x324D5212, 0xE9E81D0E, 0x1AEE1A4A, 0x28146A10,
    0x4D58116A, 0xE8AE7C31, 0x8EA76A58, 0x012C31EE, 0x0D017527, 0x8EEBA980, 0x0360378E,
    0xAD073837, 0xC29FEF06, 0x85685684, 0x5EE0280C, 0xBB710738, 0x05705708, 0xA210E0AD,
    0xA3F6CAF0, 0xA17A2455, 0xF74939D3, 0x31E559FB, 0x1833A8B4, 0x2ECAD550, 0xE31608BA,
    0xE81E3DDE, 0xF4C52500, 0x363AD535, 0x6C3D0AEC, 0x85EC46C5, 0x0ECEEC98, 0xE476C813,
    0x39708E88, 0xA3CD6492, 0x6C8EC7EC, 0x546C970E, 0xA18770F8, 0x6D1F0F70, 0x12E8E68D,
    0x444BED3F, 0x45805305, 0x3884F051, 0xBABE3CE2, 0x036934E2, 0x29BB5833, 0x80260260,
    0x94C4D094, 0x9324C14C, 0xB69C01EA, 0x94B60E0D, 0x9FC7B01D, 0xA94E249E, 0x4D301681,
    0x1501101B, 0x9663E1CE, 0xA9AB8A38, 0x1B6636E9, 0xC4310E76, 0x81C4D681, 0x18B8900C,
    0x92EA0128, 0x84C84D84, 0x33EF0833, 0x5AA62587, 0x16D6F306, 0x0C1D4074, 0xF22F0579,
    0x1E408BD0, 0xFA4B922E, 0xE8B88B96, 0x9E098E2F, 0x03F3D98D, 0xFA2ED56D, 0xF01EFB97,
    0xDC705EC1, 0x7058D0A9, 0x8580BC85, 0x85923856, 0xB8BE6456, 0x68F68F70, 0x0DB7368C,
    0x368F711F, 0xC4B85185, 0x0B922686, 0x2F0D74B7, 0xE489036D, 0x4BF15AB7, 0x8052053C,
    0x44BE8C45, 0x4A35731B, 0x7ABE0488, 0x835934E0, 0x7F835834, 0x88280290, 0x01FDBF02,
    0x5F75E020, 0xC0DFADE7, 0x24C147E9, 0x212929FD, 0xDA935C0D, 0x5C21A981, 0x4938247B,
    0xE4D1292A, 0x8E30DB94, 0x2E816019, 0x801181B3, 0x43147F72, 0x6FF2972A, 0x3CD56E9F,
    0x0E880E0E, 0xCD00D81C, 0xE0224D95, 0xF3407361, 0xB3A58776, 0xF80D0625, 0x87486018,
    0xE30B3CBD, 0xB50E08DC, 0x0BA55173, 0x7FEFBEBF, 0x35AC9E0F, 0xF435F6D1, 0x46EC3B00,
    0x8F84123F, 0xF4FE4674, 0x0CF49F0D, 0xAF87E8F7, 0xF50F0CE8, 0x0E68DF50, 0x0F11F50B,
    0xEC774875, 0x58051052, 0x3A38050C, 0xB0C04BA4, 0x370C5284, 0x587FEEE8, 0x82582482,
    0x568212EA, 0x2DBEA4C6, 0x1A59A3F6, 0xC1720768, 0xE81F0D95, 0xE9CD735B, 0x65C7A01C,
    0xC0203807, 0x1479FC60, 0x1FA497A2, 0x1720D210, 0x24C01FD2, 0x20F688D9, 0xA9ABF9A8,
    0x01201B94, 0xE601BA05, 0x66A48E06, 0xC32F706A, 0x78772C7F, 0x91B1C81D, 0x017CD901,
    0x11A98010, 0xF80B80D0, 0x0356EE07, 0xB7F7703E, 0x205D20A7, 0x84C62086, 0xB52B7852,
    0x148F0B3D, 0x9D492A89, 0xC7550A22, 0x0CFEE7CA, 0x9DC562CC, 0xBCB6DEB8, 0xF7487480,
    0x983E8974, 0x89711F11, 0x9F0BF127, 0x409789EC, 0xC870EFC7, 0xF74868F7, 0x420BB068,
    0xBB84A84C, 0x223C3D12, 0x83503083, 0x2682807F, 0x0020C0E0, 0x75E01F82, 0x647A61FD,
    0x8A492E07, 0x0D97D7FD, 0xE31FE722, 0xA79B7648, 0x01F76479, 0xA601E9FD, 0x10208D97,
    0x82138002, 0xE11A3821, 0x3FA814B7, 0xF5F0221A, 0x22824822, 0xFF95F950, 0x02702787,
    0x23825F1D, 0x387F8230, 0x7E182182, 0xA801B01D, 0xC57F01C1, 0x94EF6D01, 0xAE65FF28,
    0x97AF6A77, 0xD2700EA4, 0x53010019, 0x9B2F816A, 0x4DA2E74D, 0xE301ABD9, 0xB7FC8458,
    0xFFE7B800, 0x2601F9B5, 0xFF288800, 0xF5327134, 0x5EAC56AF, 0xDAC566FF, 0x2C562FF5,
    0xC968FF5D, 0xD65135F2, 0x78B189AF, 0xCFF8DC2D, 0xFF5BAB15, 0xF5A2A958, 0x59AA556F,
    0x44995323, 0xAAD5B269, 0xC955235A, 0xD62A6544, 0xFF2E994C, 0xB2A542A9, 0xAA93ACA7,
    0xE544F160, 0xA32A5FEA, 0x4D1D533C, 0x51E7B47A, 0x5A0CA051, 0x1FE9A4AA, 0xFE8441A1,
    0xE6331991, 0xFFB0921F, 0xF2090484, 0x7FDA07AF, 0xCBFED63A, 0x8EDFF6E1, 0xF9FE3A1D,
    0xAE83C1E8, 0x763DB3DD, 0xEFFB95C0, 0x781E8FC7, 0x5BBDA2EF, 0xC05A7097, 0x3595FE3F,
    0x5831E42B, 0x2C944AB1, 0xC9E4E7F9, 0xA6517F93, 0xA537F94C, 0x527F954A, 0x028674A4,
    0xCB93E045, 0xF9208D60, 0x90882437, 0xDC743C7F, 0xC66331BD, 0x40251B3F, 0xC231BBFC,
    0xC0116E43, 0xF0E8886B, 0xE30806AF, 0xF88395C8, 0x6E79BC70, 0x4069BC10, 0x391CEEA7,
    0x381D18F0, 0x02115BFC, 0x6C3A1AF8, 0x6F2801C8, 0xF4FA3CFE, 0x6FB3D7EA, 0xFC3DFEEF,
    0xD3E7F2F8, 0x463F4FAF, 0x8643B30F, 0x28D4B654, 0xC8B63FD3, 0xB02B50A2, 0x2AD232E4,
    0x1274E4B6, 0xD499454B, 0x29244993, 0xA529D3B8, 0x2A8AB4E0, 0xCA72A141, 0x42A1482B,
    0xC8AC2B54, 0x24511494, 0x5121B3FE, 0x0A48761B, 0xC3FCA729, 0x509541A2, 0x803FC972,
    0x3FC82200, 0xC611785E, 0x0409983F, 0xC8431004, 0x6A0F83C6, 0x5E8380E9, 0x03E0F973,
    0xF6CC3C5F, 0x01770FD7, 0x74931866, 0x916540F9, 0xA4B9664B, 0x09024595, 0xFD656304,
    0xFF990443, 0x3FE67114, 0x8FF9A84C, 0x43FC5069, 0x5CFF9C05, 0x719BE731, 0x12CFF9B6,
    0x0473FE79, 0x610E669F, 0x10416B84, 0x3E100FF1, 0x9157B598, 0xDB10FC41, 0xC91D8B95,
    0xD8340E17, 0x280E0FF0, 0x09A9408C, 0x8230D9CE, 0x43FDC272, 0x31CC0843, 0xFF759CE7,
    0xA90210CC, 0x81E0DDD0, 0x40743973, 0xB5C007AA, 0x243FDBF0, 0x259C009C, 0x864258A0,
    0xFAFABD7D, 0x0AC1B02B, 0xC92D6C3B, 0x0BC64324, 0x1806083C, 0x30EC43A0, 0x3C8522A8,
    0x322B9272, 0x844AB2B1, 0x6184A8AB, 0x12A4AA50, 0x66E04A14, 0x2A4E14B8, 0x510AB49E,
    0x549876D7, 0x4294FF2B, 0x74FF2A4A, 0xFF2849C2, 0x8D09224C, 0xC7E1E87B, 0x5184623F,
    0x3DAD6446, 0x825A1B16, 0x9017C939, 0x5779398B, 0x0C1D735C, 0x524B60A5, 0x7A606529,
    0x987125F1, 0xE6063D8B, 0x99A266C0, 0xAE69C804, 0x75C90519, 0x9D272152, 0x19ECA859,
    0xF6623D67, 0x7849C80F, 0x8B94045C, 0x97735629, 0xE600F174, 0xA6CE6095, 0xEE450EB0,
    0x6AD073E5, 0x0E9820E1, 0x83B5CC36, 0xA5C02A0B, 0xEDBD0942, 0xA0A7A9F6, 0xD5DCFA8A,
    0x1CEAA6A7, 0xF5AAAC0E, 0xC35E5B6A, 0x307181F0, 0x9EC2209C, 0xCE310446, 0x4330CC2F,
    0xCB71B0C1, 0x75DD373D, 0x2ECA77A3, 0x82D200BB, 0x10F24D0E, 0x2C37101B, 0x47100446,
    0xBEC773FC, 0x8AD2B4FF, 0x7506214A, 0x7B904E2D, 0x448621D8, 0xBB4A629D, 0xCA427CA0,
    0x5250943F, 0xFC808D49, 0xA5184FF1, 0x1284B9E3, 0x28459163, 0x66158B10, 0x0BAC0E64,
    0x11104406, 0xDF5730FF, 0xC3E0F693, 0x41003F5C, 0xDE46EF18, 0x75C46560, 0x99260EB1,
    0x3CB11A83, 0xD6B449CC, 0x9A6CF404, 0x5A168FF6, 0x1672816C, 0x1A215A75, 0x564CFF69,
    0xEF329F19, 0x66902837, 0x59A50F95, 0x9689824B, 0x25F6CAC2, 0xAD775C58, 0x370E5775,
    0xD1BF6FD0, 0xE450E7F0, 0x9D1F4891, 0xF7FE6CBF, 0x40C81983, 0x41602E36, 0x02404E6E,
    0x6B608953, 0xD90DEB58, 0xAD1C63A2, 0x1F554A7D, 0xC00E8E70, 0xD1B003B6, 0xF81B0340,
    0x603C0C87, 0x8078151C, 0xD1B8773B, 0xC2A6EC24, 0x85B0B215, 0x4F44B1E9, 0xDF0320FE,
    0x660785C1, 0xCEFEC209, 0xB81C3452, 0x786B0D6F, 0x81468BC3, 0x62707F8A, 0xC7F8A013,
    0x89411C23, 0x0EA1D87F, 0x1747F87A, 0x980620B8, 0x1E09C121, 0x905B9993, 0xA12416B4,
    0x71652F85, 0xD48691D4, 0xF17D8ABB, 0xDD883E2C, 0x3BE762EE, 0x59610A2F, 0x60A36040,
    0x3DB6A08A, 0x6A506121, 0x409DCCAA, 0x69EA9A13, 0xCB2A1FE1, 0xE7A51E9E, 0x41353526,
    0x0B233475, 0xBE4480CD, 0x2EC9081F, 0x9801DB3E, 0xB918B2E2, 0x3A872FF0, 0x30D201C8,
    0xE64D16A9, 0xF96D8780, 0xC93325DF, 0x00EDFFBF, 0x01CB0A07, 0x839922D1, 0x2E129A49,
    0x0DC1DCAD, 0x24036766, 0x300620F1, 0x520A4DC8, 0xA011A9F0, 0xC821536D, 0xA82077CD,
    0x907C0F9C, 0xD4D1C882, 0x9CE6BF05, 0x06E73A0D, 0x0E8EE01A, 0x649D303E, 0x862DE0D6,
    0x2624C498, 0x726DC2E0, 0x31F59BB3, 0xF1302684, 0x49881A07, 0xC1D31A59, 0x17C078B2,
    0x6100FC1D, 0x600D8840, 0x21165362, 0xB250C0FD, 0xD296C1D9, 0x18B8CF67, 0xB31649CC,
    0xB78A9512, 0x66018AAC, 0x942BB3A0, 0x47435E6B, 0x35A64D9A, 0x6742B055, 0x2C9A14E6,
    0xFF0AE168, 0xB216C2D8, 0xF99399C7, 0x604A7BC8, 0xD7963FC2, 0x521D321A, 0x525A4208,
    0x03D622FB, 0x2CF4AD46, 0x59A97436, 0x764932E4, 0x32A685C2, 0x732564DD, 0x5E9DD38A,
    0x753DA752, 0xB94F2B25, 0x85981D3E, 0x2A04A807, 0xA5996152, 0x066D2C1B, 0x0B0DE835,
    0x13C0905A, 0x970486F4, 0x40D70DF2, 0x7D559DC0, 0x81C33A90, 0xD3A00D8E, 0x007666B5,
    0x6B283738, 0x836AD06F, 0x04A3FD58, 0x3FC0D01C, 0x3B0790E6, 0x769BC388, 0xCB5E2BBD,
    0x18420703, 0xDA629C62, 0x759C62DD, 0x60F42017, 0x52504069, 0xC934AD3D, 0x78A6201D,
    0x938BBD8B, 0xC031D304, 0xC7B28980, 0x96981283, 0xA4C9B867, 0x19AA09CE, 0x20B8674D,
    0x0F55EA5A, 0x07F85865, 0x26A7B668, 0x752C8290, 0x10D66BCB, 0xF44F3506, 0x4467C959,
    0x76C31232, 0x3922CFD0, 0xAC90B789, 0xE92E9829, 0x726E55A8, 0x2E2DC6B8, 0x5C9B8572,
    0x9225CAE2, 0x742E703A, 0xA2839365, 0x3A6080E6, 0x840ED460, 0x94D8D464, 0x3038A632,
    0x17040E8B, 0x40D5A440, 0x8DC0308B, 0x82E05A0E, 0x6A2098DC, 0x6F012038, 0x4A2A1072,
    0x5F3A3311, 0x8E740EBD, 0x000FA9F9, 0xDDFC0687, 0x7AD870EF, 0x92FC1003, 0x07FDED05,
    0x0BD1862E, 0xC1B5E431, 0x179BA60E, 0xBF0740E4, 0xAE300FA6, 0x1CA28BC9, 0x5E334386,
    0x298078CC, 0x49E899D2, 0x698020C6, 0x4C818E3F, 0x9A98AC9E, 0x0A8154CE, 0x1602CDA7,
    0x2EC500B8, 0x310B08F0, 0x42140CD6, 0xB82584C3, 0x904508C9, 0x26049919, 0x38914004,
    0x12B48C91, 0x4F7676C1, 0xC980ED85, 0x5DB253EB, 0xBEE4DA8A, 0x457F94CC, 0xB09164EB,
    0xF658A94C, 0xE98206C6, 0x6CC062E4, 0x52B54734, 0x24B666B9, 0xDC0B9F73, 0x36573735,
    0x49E1D5D7, 0x3917459F, 0xDE95D76F, 0x820DEF05, 0xE1FE038B, 0x4034078F, 0x40640F92,
    0x809A0483, 0xA5F82452, 0x03A9820E, 0xAD8A52AD, 0x7426A036, 0x10032828, 0xFFD28764,
    0xFDA58188, 0x80201C0B, 0xB81604ED, 0x011C3FC0, 0xE1FC4709, 0xB53EA6C1, 0x0600A4AF,
    0x06C1FC31, 0xED0B51FB, 0xB1A402E8, 0x36754A28, 0xFE58E77B, 0xA423D214, 0xA847090E,
    0x70A0144C, 0x769F16B2, 0x02F05A0B, 0x95F0BEE9, 0x7AE1542B, 0x45828053, 0x37049099,
    0x9508A11D, 0x880FC211, 0xF64483EC, 0x3A515060, 0x4CE6DFE9, 0x8A1C1DB0, 0x2E6170A8,
    0x43995F73, 0x94B9701E, 0x6F6EFE61, 0xD8BF668A, 0x39D079FD, 0xB891A740, 0xD52403DB,
    0xABB106E0, 0xABC00D81, 0x691D9903, 0x01B83D50, 0x3E406B3C, 0xDF6CD01A, 0x5A9A4B0E,
    0x52EF6076, 0x38CD45B6, 0xDCA0C1D0, 0x14B59B12, 0xF5470769, 0xDBA32AB8, 0x19AB91E6,
    0x01CA94E4, 0x97C072FD, 0x966C5E52, 0xA6017C06, 0x10837AA8, 0x22072DA0, 0x3C0E94B8,
    0xADAF5F10, 0x868E534A, 0x49917E34, 0x307C0DAA, 0x131C2205, 0x6A508C12, 0xE9BD3354,
    0x1902C1EE, 0x1C07F0D0, 0x3D500110, 0x65D20D60, 0x376063B6, 0xB0548AC1, 0x80AEF5C2,
    0x6F502E85, 0xA280600B, 0x84E47B14, 0x09413593, 0x11023902, 0xD6B6A32A, 0xE2084114,
    0xBAA11C2B, 0xF0BFEE2D, 0x2DD6CE20, 0x1875E037, 0x377AC2F8, 0xF3DD49A8, 0x401DEE59,
    0x66927530, 0x5AAE9838, 0x2017FDF6, 0x3507553C, 0x6E5FC188, 0x1FC43170, 0xC0383629,
    0xBDEECD01, 0x7E25BEF1, 0x01B04178, 0x0350845F, 0x2CFC059E, 0xF0CB949E, 0x7B97CE54,
    0xA12DC59B, 0x2BC56EAF, 0xCF33DC79, 0x5725E454, 0xF304D2B3, 0x80E3D9F8, 0x1D8F072F,
    0x9B80640F, 0xAA40A81C, 0x0E742DEF, 0x68E85046, 0x38379CEE, 0x8159EB40, 0x36085633,
    0x48379933, 0xAE8E0C66, 0x92FC1102, 0xBA59C203, 0x7EAFD3D3, 0x13E24400, 0x10C380A3,
    0x8A1A809E, 0x160AC68A, 0x4E1442A5, 0x74278546, 0x284908E6, 0xDB5D1CA4, 0xEB46B410,
    0x1810521C, 0x9B6C104E, 0x0DC6C9E0, 0x112B5C74, 0xDB7DDEDE, 0xCF951A02, 0x512B5C7C,
    0xA05574A0, 0xE19E1E06, 0xC1C75295, 0x40E19B12, 0x0E00F06B, 0x600E149C, 0x8170199E,
    0x154198E1, 0x10160EC4, 0x41150201, 0xE9D53C0D, 0x9CFD5A01, 0x45A9C485, 0x0159B92D,
    0xF953D19D, 0x459DE680, 0x0F4EA40D, 0x94E180D8, 0xDC789092, 0xBDD51DEE, 0x2DC5C62D,
    0xD9B21421, 0xF05745EF, 0x1597DC9D, 0x8936031F, 0x0BC6C953, 0xA40E9014, 0x17BD0200,
    0x07C0E155, 0x361912FC, 0x9809A393, 0xF761ADF7, 0x400CC739, 0xC0940B47, 0x16414D02,
    0xAC37C158, 0x1FAE1E1F, 0x1E01DC1A, 0x840F83C0, 0x8114100C, 0x0FCB3590, 0x040F8A0C,
    0x576919A2, 0x3D59B54B, 0x45DF5B79, 0x1BB9B9A0, 0x24E06607, 0x79965786, 0xA24A24D9,
    0x2712BE26, 0x9125924E, 0x151491A0, 0xE04CC80E, 0x440DCF20, 0xC224268D, 0x21027169,
    0x00268980, 0x021CA4C2, 0x1B062C1D, 0x3C6E0174, 0xD5501141, 0x4D40AD19, 0xE5C7CEE1,
    0x1F185C90, 0xFFC0F9E2, 0xE492A310, 0xC5EDA0C0, 0xE546CD2D, 0x0C5B9BE1, 0x170525CA,
    0x149EF171, 0x3C981EFA, 0x9E3C915E, 0x105640FF, 0x200CC0F6, 0xC0D00FC9, 0x0B80F0F0,
    0x980D9E60, 0xD3000A00, 0x6F15852F, 0xFD3500D4, 0x61B5F7D7, 0xD78D71A3, 0xB86F23B8,
    0x4DA00880, 0x69C16815, 0x363FA1E5, 0x42A4269D, 0x0FC0842A, 0xE42449E4, 0x12CC6C59,
    0xF154BCC3, 0xBD4D9E31, 0x99699B54, 0x0345AA25, 0x4E2605C2, 0x1E1A26E4, 0x46606206,
    0x1E46E252, 0x206E47D5, 0xF1571247, 0x959BDECD, 0x0100A012, 0x178F0C0E, 0xC9CC0144,
    0x14582882, 0x92027C2D, 0x142642C8, 0x0244299A, 0x22026902, 0xDC214F0C, 0x00E548C1,
    0x0D40F46E, 0x16509480, 0x53AD25D2, 0x891A140F, 0xFC6B8065, 0x414507C0, 0x1AD2E812,
    0xE891418C, 0xD4801D01, 0xA5C10010, 0xDC920EFC, 0x49080D00, 0xE21E3127, 0x91969969,
    0xDC56359C, 0x03207971, 0x280D4612, 0x91A00D09, 0x0ED53C0C, 0x5871E174, 0xDF9071D5,
    0x3B408471, 0xD10597E6, 0x05AA6023, 0x0BC3FDCD, 0x345823E4, 0xA3FC6541, 0x181FAE62,
    0x481BC1B0, 0xC0F80D02, 0x11C109C6, 0x30B2991E, 0x99AE214A, 0x0E645644, 0xC80D645C,
    0x6476454F, 0x48247A48, 0x9A48A696, 0x269E6926, 0xC6D26518, 0xE85D2095, 0x41AC6E00,
    0x2945DC19, 0xB1158270, 0x8F0C2782, 0x02026C2B, 0xDC2582BD, 0xC2602BD2, 0x1C4210A0,
    0xD4118598, 0xC1006E00, 0x0E49B80C, 0xD0E180C8, 0x01F1A146, 0x260A0C21, 0x806C4268,
    0x94802702, 0x1F42802A, 0x582802B5, 0xC28C2BD4, 0x1B01D569, 0x001206E0, 0xC0F10201,
    0xBBD27DEA, 0x22595965, 0x63565A1E, 0xE417814D, 0xDA686269, 0x8D296400, 0x6C99FC6C,
    0xA00DA16C, 0x80D5A140, 0x0D4A5C09, 0xF65EDA1C, 0x5F6E3CA5, 0x0F473906, 0xB8A5C084,
    0x459D3480, 0x62C3FCEB, 0x09FAE856, 0xC25824C2, 0x1180D824, 0x1CD1CEA4, 0x49080F8A,
    0x729744DF, 0x5E462249, 0x62766864, 0x68E8AE6A, 0xBA6A28B6, 0x1CAE27A8, 0x7063480E,
    0x8953C0ED, 0x01C45F1D, 0x17C9141C, 0x48738164, 0x4CC82182, 0x6B42542C, 0xE0204268,
    0x417C1CC6, 0x7F8110D4, 0xFD3906B9, 0x4CF00D05, 0x274DA00F, 0xC0F5C284, 0x89082BC2,
    0x6C42942B, 0xC82842CC, 0xC26C2BCC, 0x27C2C85D, 0x38274EC4, 0x01B45CC2, 0x10C92018,
    0x4CF0C0DC, 0xA7BE59A4, 0x5AD72DEE, 0x7925D9BE, 0x28A57057, 0x0ECFE0FC, 0x228DA7E8,
    0x00B80E49, 0x0AC0E22F, 0x0C0D23A4, 0xE5F0A7E8, 0xD7A82473, 0x7C59E82C, 0x80BCDA00,
    0x0CA611CE, 0x5E859E60, 0x01F5FAEA, 0x14600536, 0xD56303C8, 0x45ED6FDE, 0x0919A94C,
    0x6245646A, 0x971205E4, 0xAB269E8B, 0x1E8BE8B2, 0xD7100F55, 0x27238D19, 0x41E69711,
    0x1A0C0F8A, 0x5C52DD0F, 0xD4120920, 0x4228BB8E, 0x2482A465, 0x182585F0, 0x41ADE602,
    0x10E3A417, 0x190200D4, 0x64A40E01, 0x18DA0C0D, 0x8C5F0174, 0xC5CC2742, 0x62C27C2B,
    0x2C2642C0, 0x02502B46, 0x2682C502, 0x642B102C, 0x02410142, 0x0CD91020, 0xD1294D44,
    0x927E9C8F, 0xBCABCE7B, 0x245CABD6, 0x1BC27D61, 0xD21992AA, 0xA1786104, 0x5E600D11,
    0x2F00BC0E, 0x310280DA, 0x65FC74D0, 0xD8132CD8, 0xB80700E4, 0x8A5C0821, 0x3FEC4C09,
    0x143202E8, 0xAA601743, 0x1B5D36C6, 0x8C1EC1D0, 0xC1901440, 0x0D43C819, 0x006CD4B4,
    0x61240E4E, 0xDE8632C9, 0x50FF59B5, 0xC5DEBC24, 0xD15CAE4A, 0x4E07CDF4, 0x62780F12,
    0x4768AA07, 0xEDC7E26A, 0xE9B86C40, 0x0D40D862, 0xD80DC62C, 0x9B90FF00, 0xE180FC6C,
    0xBC6552C4, 0x49080D40, 0x7AC11812, 0x80238249, 0x82642889, 0x20425554, 0x581C12DC,
    0x2B4EAF81, 0xA51BF45C, 0xA9A0C0E8, 0x0EC41941, 0xF5C27828, 0xDC25C25C, 0x02602885,
    0xD3AB8502, 0xCC2302A0, 0x41581A05, 0x3A50E23A, 0xF268091E, 0x6452E019, 0xE1244EE0,
    0xAA2FE34E, 0xEBD19912, 0xEA1F0A4A, 0x11EC52B9, 0x80B06E50, 0xD46808D3, 0x925E80D8,
    0x00E87021, 0x0E477007, 0xE15C006C, 0x45B47240, 0x09C6F007, 0x8470006C, 0x02B42BC2,
    0xEB2C6C20, 0x9C229D36, 0xC08C29C2, 0x1F41E81A, 0xACD283CC, 0x603D9D0F, 0xD1A129B8,
    0xD61613AC, 0x64AC5CCF, 0xC44FCCEC, 0xD56E8FC1, 0x6F26CED0, 0x2628AA26, 0x600DC609,
    0x0EC4A461, 0x2240FC12, 0xF85FDCA1, 0x9A0CDF45, 0x2C46E0FD, 0x1C1285CD, 0x02612E81,
    0x2A4A0023, 0x505DC244, 0xCF0C1DC2, 0x5CC14C1A, 0x4C0D8110, 0xD6F11BCA, 0x9E63A40D,
    0x506C05DC, 0x015817D5, 0x2542B070, 0x402AC908, 0x41E86C42, 0x09CC181A, 0x0EBF6452,
    0x3026A9EE, 0x352BD302, 0x7DE22446, 0xD972365E, 0xC5ECCAD1, 0x3C0D06F5, 0x00B80D95,
    0x0A80DDCC, 0x900DCD38, 0x17C902C0, 0xE755C2C3, 0xCC0DA53A, 0xEE980F17, 0x0600B03F,
    0x58228718, 0x5FA02502, 0xA9F0CEEB, 0x503342FD, 0x816C0903, 0x25C1B01A, 0x980FC0CC,
    0x1E799EC5, 0xA0C6054D, 0x916F1518, 0x27E29F12, 0xFFCFC203, 0x299BB118, 0x2CF2CF6F,
    0xABA35E27, 0x0493CA11, 0x86F00F01, 0x73814015, 0xE81801A4, 0x017C1A52, 0x14016DCC,
    0xF0115CC0, 0x4EF12E80, 0x0CC0F8EC, 0x201645DC, 0x828CF0C1, 0x2A065424, 0x38A4C254,
    0x553C1DC2, 0x6E012819, 0xAC0C012C, 0x2C041097, 0xA04EA694, 0xB8159159, 0xC25C49EF,
    0x92025AB0, 0x181EC21C, 0x9F280E0E, 0xE1324EE0, 0x5B25302A, 0xABD6E2F2, 0x96971244,
    0x7704F265, 0x1BF86D59, 0x736D90A5, 0x6E5D46E2, 0x1F46C530, 0x7FC0ECDA, 0x140780E5,
    0x07700853, 0x612C3C0F, 0xA073806A, 0x81C81C81, 0x2F30D30C, 0x381E1D37, 0x82602302,
    0x7E06B608, 0x193A86C6, 0x9BED4D33, 0xBB1E20D0, 0x17128C19, 0x2D20C461, 0xA964545D,
    0x5F142F2E, 0x858E8CE0, 0x9F8E180E, 0x0C2292E9, 0x443C1482, 0x2A54582A, 0x9C62C278,
    0x09802582, 0x48023829, 0x801B020D, 0xD53DE509, 0xCF80D80F, 0x4D0140D4, 0x8D441381,
    0x91425C27, 0xC02642A0, 0xC1E4259C, 0x1141B17A, 0xCC120D38, 0x00FCF0C0, 0x189A0C0C,
    0x94A0C154, 0x82E457F3, 0x28C4082B, 0x946C4264, 0xE0F41781, 0x02F25E4A, 0x7F47B473,
    0x29C72672, 0x914FD6BD, 0x2AF3AD1C, 0xC5CED131, 0xD8D7940D, 0x6B1B0F0E, 0x63A40A2F,
    0x0840980E, 0xCC6F008F, 0x00C0701C, 0x0F55C008, 0x700CB2D0, 0x01252FC0, 0x2F6EACC9,
    0x69FAB517, 0x42B82C02, 0x13010026, 0xF03D0140, 0x56FE1250, 0x0E0A0CA1, 0xA9F180D4,
    0x67A9972A, 0x6080D0C4, 0xC35700F4, 0x150A8A45, 0xC2B14625, 0xBC0F92B4, 0xE8145D25,
    0x2682883F, 0x90E28198, 0x82BF3842, 0x2C891428, 0x6444EB64, 0x02845982, 0x38459821,
    0x215197AE, 0x21393E09, 0x021D7E28, 0x1425426D, 0x423C2949, 0x1D425D01, 0x0815DA0C,
    0x01DD5501, 0x2C5A0C1A, 0xD115829C, 0x86B42B82, 0xCD026427, 0xAC178190, 0x40E40FD7,
    0x262EFF1A, 0x9597E676, 0xB69F6A36, 0x2605B76A, 0x736BB266, 0xA3532659, 0x97728348,
    0xFB4B0EE1, 0xC0B9E559, 0x0A80E97A, 0x200DD2E8, 0xF4D80D2A, 0x5C0A71A5, 0xA0075070,
    0x81CC1A0D, 0x5183681C, 0xB9FAF737, 0x42081F01, 0x16813409, 0xCC3D017C, 0x221EF580,
    0x72288CCD, 0x486C9529, 0x27EF56B3, 0x523584C3, 0x9714A471, 0x00CCFAF5, 0xE600DD3C,
    0xC81CC1E1, 0x4268274C, 0x26028466, 0xD42A05DC, 0xC25447F7, 0x200278A0, 0xDC110908,
    0xE8D95500, 0xA01630F0, 0x005999FC, 0xC13A8DDC, 0x25029553, 0x4829D69C, 0xC250EC42,
    0x2F9E6021, 0xE46742BC, 0xD2142982, 0xA0C22425, 0xE8134148, 0x52DF5552, 0x0C924724,
    0x9B34A340, 0x36AF6B36, 0x6A78AF8A, 0xC1F0996F, 0x52678C36, 0x27972A14, 0xC755712B,
    0xCA4E320E, 0x0140C40E, 0xD954AA05, 0xD5500A40, 0xDA00980C, 0x7009C0C4, 0x504133CD,
    0x1C8198D4, 0x3A8501C4, 0xDFAB9437, 0x2B829C24, 0xD01A0098, 0x43D41DC1, 0x106CD40C,
    0xC50F0A00, 0x52445B86, 0x24E9F736, 0x1E25C0D5, 0xF59324F0, 0xE90965E1, 0xE69BCEF1,
    0x2D4DE600, 0x1301486E, 0x981C4D38, 0x42A5E601, 0xD7067426, 0xB4204F0E, 0xB4389141,
    0x0E8118D3, 0xE80F2B30, 0x62F00DA2, 0x1917AF20, 0x95CC0150, 0x86C425C2, 0x02027C2A,
    0xFF3982CD, 0x01CC2483, 0x0F01545F, 0x0C0D1F4C, 0x0A0D355A, 0x0EC6B6D1, 0xDA73C0C0,
    0x38B59840, 0x8B78AB8B, 0xBF8BF6BF, 0x6BC726BA, 0x27E45727, 0x205CED1F, 0x9C012D23,
    0x2DC0C85A, 0x380B40D9, 0x40A80CCD, 0x0A00C1A1, 0x413392FC, 0xD5500853, 0x94568C14,
    0xD5FAFB37, 0x83243082, 0x2281F009, 0xC83AC238, 0x667D3D80, 0x9DDB86D0, 0x5D9E0D1A,
    0xB8A667E3, 0xC7B9AB47, 0x753A8D09, 0xB8F06099, 0xCCAFBC90, 0xA1EBAA88, 0x019C1C0D,
    0x26028C6E, 0x2028C664, 0x0284A4C2, 0x2852DC22, 0x6CF0C22C, 0x46C42202, 0x6C41F023,
    0x0C1BC1F8, 0x4A5E2D4F, 0x0201B81F, 0x0C26C2A5, 0xC23029CF, 0xA0C1B31D, 0xDC0F4151,
    0xE2F00D74, 0x71D25C0B, 0xF359D0E4, 0x3C87AA8F, 0xABB6AFAB, 0x97C9B8BB, 0x2D0BC97C,
    0xF074AF6D, 0x2D19F4B2, 0xC6F60CCD, 0x0B4A7F1F, 0x1C0BA3A4, 0x18106CB9, 0x10CD457D,
    0x3B93C650, 0xA1E7D03B, 0x2202201D, 0x2C0EC274, 0xB5712141, 0xCA1E3C90, 0x82AE4A02,
    0xA4AF3497, 0x1078DACC, 0x593AD276, 0x96E2526F, 0x0D8914D1, 0x0126E644, 0xB97925CA,
    0xF0C93178, 0x58D380DA, 0x0A4C13C1, 0x60820824, 0xCC23C274, 0x35E02985, 0xE1826C52,
    0x002702A8, 0x02742A8A, 0x2682A098, 0x5028C608, 0x42845DC2, 0x2A1E6025, 0x946E0258,
    0x953C22C2, 0x53C1D022, 0x7C0EC121, 0x00D40E50, 0x6E6345CC, 0xD093A93C, 0x31B40D0C,
    0x5DC0D108, 0xF462D354, 0x4FE3495B, 0xB84C3267, 0x9FD4F557, 0xB8D8A53E, 0x0E3EA3EA,
    0x66677128, 0xFEAB6B63, 0x357E893A, 0xE74206F5, 0x43FDA086, 0x0F0DA0D3, 0x7059D2F0,
    0x0108A5C0, 0xF13D05BE, 0x9824A3FF, 0x427829C2, 0x1281140E, 0xF237C3D8, 0x0A000E4C,
    0x7800CC0F, 0xCBACD2B5, 0x0FD728AC, 0xD1AF3F8E, 0x0DC78EC4, 0x7259E72F, 0xDFB47725,
    0xBD549E26, 0xC1263A51, 0x150D3810, 0x7A2F012C, 0x90201501, 0xE281901C, 0x6CA001EF,
    0xF4502302, 0x2A521425, 0x9CA0C268, 0xF8FC402B, 0x8DD0C9D7, 0xCCD07F7F, 0x06C487F8,
    0x72417F87, 0xE397F8B4, 0x3B7F8BC6, 0x78B8C06E, 0x8F0E6143, 0x10E870FF, 0x8F86C358,
    0xF46C377F, 0xC7636898, 0x74351D3F, 0x43C1AC80, 0x331C4D26, 0x69BCE66B, 0x95CEE713,
    0xFCA4732A, 0x0DE7D439, 0xD06D2D1A, 0xC7149988, 0x56331A3F, 0xE2111480, 0x131006E2,
    0xB0054453, 0xAF576B95, 0x1586C15F, 0x596C963B, 0xA6D167B3, 0x6D96BB55, 0xE55EB75B,
    0xE28429FC, 0xF62F96C9, 0xB8990A94, 0x1CCB88A3, 0xD40AFC40, 0xC524C371, 0xE46A3996,
    0x314368B8, 0x6E3CA6C6, 0x72AC1E28, 0x2ECAC9B0, 0x9CB66309, 0xC060F2F9, 0x01287038,
    0xC8096399, 0x9A6F7D1B, 0x268361E4, 0x2E351A8F, 0x23C8D0CE, 0x497F8B06, 0xE296C06C,
    0x443FC463, 0x6BFC6C73, 0xC0C88955, 0x61FE3142, 0x137B0432, 0x0E8EC024, 0xC72404C5,
    0x322A18E4, 0x41B101FE, 0xD86ADFE2, 0x10D64FA9, 0x6326D288, 0xF3D13D9D, 0x669E7F54,
    0xDD42A050, 0xB469C513, 0x33A5C725, 0xE198D714, 0x148A65C2, 0xE128432E, 0xF038129F,
    0x10B79FE0, 0x05C1504C, 0xC1D06C19, 0xE562BF07, 0xB0505F97, 0x502588E1, 0xBDA44159,
    0x8721D2F4, 0x6CD30220, 0x4B1A1A22, 0x4C1E9FEC, 0x1BB1B144, 0xC5CCE328, 0x911460CD,
    0x04488122, 0x131028EC, 0x1B066813, 0xA9A92262, 0x8A686E1B, 0x00788322, 0x641F1FED,
    0x278B8A68, 0x14459360, 0xC5C1FE2F, 0x79FE2194, 0x5EDB1325, 0x5C22C4C1, 0x96295144,
    0x255B144D, 0x41409512, 0xD27F8904, 0x212142B0, 0x87889068, 0x49BA4C19, 0xB2841B2F,
    0x5A9BC8C1, 0xF4CF49F2, 0xBE29CBD8, 0xAA13E13F, 0xB1FEA3A8, 0xF0A40661, 0x1E360993,
    0x06A8D060, 0x8133FE13, 0xAC210104, 0x314BD2D4, 0xAFD354CD, 0x9A669974, 0x6490F614,
    0x2A667792, 0xFA1F076E, 0x2307E1F2, 0xA56A550A, 0xB5707696, 0xA3BB1207, 0x021D29A1,
    0xA1D74F7D, 0x8715DD00, 0xE1B24C1C, 0x02509A06, 0x2C95C58A, 0x8131692B, 0x07E95356,
    0xA352241E, 0x315A830C, 0x587F8A25, 0x55214509, 0x386FF930, 0x8481548D, 0x91607F86,
    0x2257A624, 0x47956D81, 0x8F27F88E, 0x82225A31, 0x1566DB06, 0x812A26E8, 0x1C06A954,
    0x0721DA0C, 0xEFA332C1, 0x50641A9F, 0x7D81604C, 0x1D07AF8A, 0x44185C40, 0x2EEAFE1E,
    0xAD06F8E2, 0x601A55CF, 0x1886EEC0, 0x056175C6, 0x229094FE, 0x2D367B8A, 0x5193E4D9,
    0x3F2C594E, 0x14248916, 0x7338841C, 0x8DF6BD26, 0x695C58F3, 0x1D26358A, 0x5739D866,
    0xD5EE7F5E, 0xA078A125, 0x001A5981, 0x1A61F59B, 0xCA9A2AF4, 0x7A78661E, 0xA6A0E286,
    0xB2C006DA, 0x4CB002A8, 0x9FE2C92C, 0x12A1344F, 0x33604B94, 0x527FEC85, 0x553604C1,
    0x1537192E, 0x0456C449, 0x78C07F8A, 0x6A20A342, 0x7B35C8B0, 0xB40BD06D, 0x09887338,
    0xC22ED607, 0xA967A041, 0x7FD56214, 0x8922108A, 0xE208887F, 0x9727C8CC, 0x20C0625C,
    0xC3076C06, 0x5893DC45, 0x4A5A8D42, 0x8D848306, 0x24168449, 0x50946492, 0xF5D950F0,
    0x7D8F61D7, 0x71163E41, 0x8FBE8A84, 0x0D8627C0, 0x070F1A61, 0xA963DB63, 0xDE81CF4F,
    0x14D5BE35, 0x3B31ED5B, 0x076A6B17, 0x8C6F9EF3, 0xEA68C5C7, 0x6A976FA1, 0x280A4FE0,
    0x0D83722C, 0x84311493, 0x411C7F8A, 0x1A7F8AA4, 0xDF098431, 0x0D92A100, 0xC2931430,
    0xC880A888, 0x741F36C1, 0xCB086968, 0xB4A21087, 0x38F08622, 0x5DA11023, 0xE2976B91,
    0x23B88558, 0x0E2F40ED, 0xE2C01C2B, 0xCD8A1384, 0xAA847407, 0x867AA158, 0xC4A99F41,
    0xC8B02C04, 0x07F1021B, 0x848EC851, 0x09E13425, 0x3C8672C5, 0x510541FC, 0xF01882F0,
    0x801E0331, 0xFA714788, 0x673E699D, 0x849E1D31, 0x1A134250, 0x8374F2BF, 0x8860E13C,
    0xA15C094B, 0xA598988E, 0x3748F110, 0xBA905A48, 0xF0EC03A3, 0xF12E4DE0, 0xA0767750,
    0xA0FC2092, 0xCA6C0025, 0x97A08811, 0x5DA11823, 0x5F421040, 0x5604107A, 0xC507A0E9,
    0x000E81D1, 0x2489B383, 0xE416070A, 0xA87304D3, 0x4C1581C1, 0x0FCB048F, 0x8310691F,
    0x50CA111F, 0x0D944A3D, 0x1502F8F8, 0x5E0AEB8C, 0x502A8318, 0x4E494918, 0x18B18492,
    0x105630C6, 0x41C83886, 0x01E0311E, 0xB035FE8D, 0x31A6E563, 0x13089C59, 0x8E830063,
    0x315F9130, 0xCC52D201, 0x6C91A3C3, 0xA12A56C8, 0x0606B0C1, 0x00F089AC, 0x42083E30,
    0x8430845F, 0x71EE2933, 0x01C1F843, 0x22AAC081, 0x4034A110, 0x7A99C1F8, 0xED7683C0,
    0xD9178180, 0xC0724081, 0x067CD039, 0x163C3407, 0x9B955C0D, 0x59AE10C3, 0xC1E0C927,
    0x4092D82A, 0x3C8FC536, 0x65048C3C, 0xF6191360, 0x64E05691, 0x73820D27, 0xC9B4E093,
    0x80F82B22, 0x0501FE08, 0x0FE15029, 0x41E83494, 0x2BB28A11, 0xA40D2198, 0x590DC170,
    0xE81D97A2, 0xBBD330A0, 0x33645349, 0xD3E6442E, 0xC98B4356, 0xC9F25AE6, 0x38A10206,
    0x3FE3383F, 0x22AED982, 0x44344118, 0x82BB4218, 0xF12A03E0, 0xB4A78E00, 0xA5F84A99,
    0x94D8F212, 0x093D39A7, 0xC3B9D0E1, 0xA893BAA0, 0x1EA42B02, 0x0CD49A8F, 0x8795D52A,
    0x700C489A, 0xE67A4F1A, 0xB90606A7, 0xD06AB8C9, 0xA0C4A882, 0x4179DC04, 0x84421C07,
    0xA1221A30, 0x59EB3565, 0x4708041F, 0x3014A244, 0x8C68176B, 0x3DFC12A5, 0xA345332C,
    0x624C7689, 0xE9501D04, 0x95603D08, 0xB4D0780F, 0x0700EA9A, 0xE10CA19B, 0x1A1AD25E,
    0x2EB16CE4, 0x6F365CE1, 0x029D1A6A, 0x2CE27095, 0x9A840D54, 0x766AA2CE, 0xEA454CA8,
    0x9F7B4152, 0x0649E4FB, 0x52679D3A, 0xE091C569, 0x1A05E0E8, 0x00084189, 0x5C0F032A,
    0x301E0625, 0x40E81BD0, 0x95A10387, 0xADF5BDB7, 0x08F1005A, 0x07A16449, 0x3E425845,
    0xC4AAE05C, 0x23584600, 0x669E4191, 0x75381940, 0x347BBA27, 0xDB130658, 0x40D5A21D,
    0xEB92B325, 0x2C46A13C, 0x25B65ECC, 0x21D8B835, 0x1EDE6BC7, 0x9E31579D, 0x3B50ECF5,
    0x8ACFDA1B, 0xAC18BE76, 0x450D754F, 0xE0E2A393, 0xCE402C90, 0x0260460C, 0x2AE074A7,
    0x55C0E038, 0x0F81F066, 0x5F0B43FC, 0x7F6EC2F8, 0x4F09611B, 0x68822BB8, 0xE05A24C4,
    0x429EDC05, 0x02B85308, 0x4A10583D, 0x1FEC3018, 0x5E4CC82F, 0x9021F29C, 0x3CBB9368,
    0x5F6349B4, 0xB9DDA712, 0x112D0604, 0x338A0E82, 0x8B12C9B8, 0x8E0CA970, 0x5CA6077A,
    0xBDD7D6F6, 0x7D322DF2, 0x254EDB3D, 0x3D6091F3, 0xCAC12A92, 0x241C47CB, 0x402B50A9,
    0x70460D8E, 0x807C9702, 0x00E83A3B, 0xDB606940, 0x0A614A80, 0x99F0A610, 0x4BE68CD1,
    0x5B15A2A8, 0xAC150200, 0x003585B0, 0xF8F51022, 0x50A614C1, 0xC0F4148F, 0xCCC83024,
    0x442B1A0B, 0x3015552A, 0x2D81A032, 0x93641D0F, 0x96255798, 0x9F9029DD, 0xAF211F92,
    0x3644D297, 0x8C91A5F2, 0x99323EE9, 0x8A5C7FD3, 0xE518F727, 0x06F952F6, 0x0A88E82E,
    0x1203A224, 0x20075968, 0x3C0D4EE0, 0x2423E0B0, 0xB6693441, 0xFD71ADF5, 0x82FC5315,
    0x03485C17, 0x85C0F21D, 0x0F41D033, 0x1A82D8A8, 0x1B8F50DE, 0x2B1F5004, 0x5B22CA10,
    0xA5CE02F2, 0x994E9040, 0x9BF54FF4, 0x19036BDE, 0x74B647C8, 0xDF5DC1A6, 0xD3D1FF25,
    0x0DB50127, 0x81EA2062, 0x1B29A0CD, 0x2C0B8905, 0x80FF0372, 0xBE0204A4, 0xE2A80801,
    0x9AE49691, 0xF7F6FDDF, 0x0D218457, 0x1160B86C, 0x1745089F, 0x2B852082, 0x7E0D8174,
    0x743D8410, 0xD8268480, 0x803005C3, 0x3297380D, 0xB906C85E, 0xA70EDCD2, 0x721DBDA6,
    0xBADB8F4D, 0x4C419285, 0x62030072, 0x4FE4BBA5, 0xF4F33769, 0xB81A1D83, 0x503636C0,
    0x20707FC1, 0x60ACDE82, 0xF7F91205, 0xF41E81CF, 0x14A250B1, 0xCA8550A9, 0xA492C4A9,
    0xD206D54B, 0xFFC9C89E, 0x04188321, 0x8F530607, 0x11FEBEFA, 0x00CBAC03, 0xA8E833EB,
    0x5A960D79, 0x20DC9B76, 0x41818835, 0xB1DE5310, 0x4C96C453, 0x5A7EAA76, 0x23A80332,
    0x918AD3F2, 0x0062418D, 0x80CC7FE8, 0x01A12063, 0x75506C6C, 0xEB36B490, 0x094A882A,
    0xC5742F08, 0x90F15E2F, 0xBE2AC530, 0xEC256CB0, 0x002D0583, 0xD29A0C3C, 0xE4C18083,
    0x7AB92124, 0x14DEB453, 0xE5C53743, 0xE934F9E1, 0x1C9C1060, 0x633F3680, 0xD641BB97,
    0xD32A14E9, 0x6FB5F660, 0xA8332137, 0xB951831F, 0xD7183006, 0x11A05A0C, 0x241F041B,
    0x0A485031, 0x2D1FC058, 0xFB0D61B0, 0xA1F3FC60, 0xE837EFFF, 0x10301081, 0xB0A61402,
    0xFD70148F, 0xBA8AA724, 0x9463820C, 0xDD1CB2F6, 0xCB3F2148, 0xFC82F067, 0x509E7F90,
    0x66B28A76, 0xBC17E2D0, 0x0999F540, 0x5EF4520A, 0xC49EFF03, 0x0A6C7BD4, 0x062FFA0C,
    0x7A3B005A, 0x80645C6F, 0x5E623405, 0x080703F8, 0x004A05CF, 0x0D61FE05, 0xC80D60D4,
    0x81741745, 0x032FA206, 0xF4D71035, 0x012811E0, 0x0BE09206, 0x4C1F60BA, 0x02140660,
    0xCFC3F29F, 0xF6AA050A, 0xCF6824C8, 0xBA606424, 0x10300FE2, 0x60542630, 0x300FE8C6,
    0x54BAA054, 0xA1FEB9E0, 0x3FCC6605, 0x5605E234, 0xE06222C0, 0x22E05404, 0x7221683C,
    0x058E35A0, 0x054FF606, 0x5F09204A, 0xE2240520, 0x2A205005, 0x66235018, 0xE1FEF0C0,
    0x1FED6204, 0x14CC4046, 0x611C1221, 0x0D303610, 0x0ECCF0D5, 0x21381421, 0x0D20B006,
    0x501F80D2, 0x8EF70800, 0x262CAC8F, 0x42262DA8, 0xE5C60580, 0x08607805, 0xB008E1F0,
    0xC1F00BE0, 0x0EC0E00B, 0x2B03A1F0, 0x007C1F01, 0x0C40B00A, 0xE40D00B6, 0x607A0C40,
    0x0487C609, 0xB220C05C, 0x204836CC, 0x04CC0404, 0x7440C03A, 0xC36C0580, 0x5EC07E09,
    0x52C4AEB4, 0x89143F80, 0xF900603F, 0x6C054EF6, 0x10BC0683, 0x40404A06, 0x0004405A,
    0xC040052A, 0x2A308A40, 0x4814E136, 0xF0D60A41, 0xAD119118, 0x94194176, 0x20BE0621,
    0x0C60D80D, 0xC714003C, 0x40A408A0, 0x1100C60B, 0xC613E134, 0x619092C0, 0x1384120C,
    0x5C16815E, 0xE0840661, 0x0581F808, 0xB0EAA44C, 0x4226F8CA, 0xF2A06EF0, 0x9005C29C,
    0x80540603, 0x0440523F, 0x6D0BA404, 0xE0500643, 0x04C0623F, 0x4605EC04, 0xF17637A0,
    0x0349FC2A, 0x3804C1FE, 0x48D32140, 0x2220AA20, 0x29192007, 0x122922B2, 0x14A14A12,
    0x764340FA, 0x204E1F80, 0xE7B21706, 0xF914C1FE, 0xF16805A3, 0x03003C1F, 0x421FE036,
    0xE03A0320, 0x02101C1F, 0xB2DEA05F, 0x0CB404EE, 0xABC04806, 0x7F07E2A6, 0x20601FF1,
    0x06921404, 0x3518003E, 0xA72325E0, 0x22219A08, 0x2D226155, 0x329D29B2, 0x11C0FEFA,
    0xAE06411C, 0x40D00D00, 0x5C723E1F, 0xB30EC04C, 0x40502A2C, 0xF886071F, 0x92050062,
    0xD02108F0, 0x069092E6, 0x66CB4050, 0x8EA2ABA0, 0x060A0004, 0x2E03003E, 0x325E03C2,
    0x40C02E07, 0x0C02C052, 0x40DE0D04, 0x15419A0E, 0x981FE1FE, 0xF30D29F2, 0x130E8530,
    0xCC15414E, 0x01000DC0, 0x0D416010, 0xF40FA0FA, 0x40F40C61, 0x0C81F40F, 0xF40EC0EA,
    0x2D0C0501, 0x7B2FB8EB, 0x67096634, 0xCEB30B20, 0x068CB404, 0x682A8046, 0x221C0340,
    0xC1603007, 0xB803806E, 0x803A0463, 0x32E0E42A, 0x780FE1AD, 0xF3100053, 0x03738137,
    0x1E1180E9, 0x60521F41, 0xEAC05E7A, 0x06CAC060, 0x3202382F, 0x04806509, 0x42068C04,
    0xE21A37A0, 0x03406C2A, 0x0805C40C, 0x403A1FEC, 0x0CB2E803, 0x980D60DE, 0xC1FF3061,
    0x3D338337, 0xA4E833D5, 0x20CC0C80, 0xDE004216, 0x627A6EF6, 0x051C0520, 0x26D08C05,
    0x6C3B92DF, 0xB3B003E0, 0x03726040, 0x42059214, 0xE03525E0, 0x1FE02A02, 0xD60DA0CA,
    0xF3D61040, 0xDFD42141, 0x041060D2, 0x20481FA1, 0x9D905739, 0x551EA050, 0x404F3A00,
    0x35606A40, 0x1C03E24F, 0x3256CC22, 0x21403E06, 0x5E03A063, 0xE9FE0532, 0x0EE0E61F,
    0x2209A0F4, 0x346D46B4, 0x53C16CC2, 0x9C09ABB8, 0xEF8216C0, 0x39C05CC7, 0xF5246633,
    0xC04A0653, 0x40C0453A, 0x32038066, 0xC04024E0, 0x02606621, 0x2EEF602E, 0xE068C160,
    0x15C36005, 0x9817E176, 0xF4BD46E0, 0x16EA134B, 0xEC19E19A, 0x00B809C0, 0x0521FE0C,
    0xA8EA4EF4, 0x4234056E, 0x09205206, 0x16040061, 0x0046064C, 0xB60066A0, 0x40C0E50A,
    0xC2AE0342, 0xA0003805, 0xFEA04096, 0x618E1741, 0x4C009419, 0x4F517515, 0xC1481228,
    0x6A60D614, 0xA81FC08A, 0x6FF300CD, 0x0603B005, 0x51200046, 0x948D0200, 0x2AE0433F,
    0x9D45806E, 0xE1FEC142, 0x2E802E03, 0xD20D60C5, 0x33CC1920, 0x56351800, 0x1A655565,
    0xC14A14E1, 0x0860620F, 0x14EB44A8, 0x700916C3, 0x14D260FB, 0x5205327D, 0x050B2E13,
    0x06325E04, 0xB202C034, 0x61FF49EE, 0x1FF41003, 0x14116104, 0x02B81801, 0x5B356756,
    0x1652F5B5, 0x81441441, 0x06CFB60D, 0xFCEE81F0, 0x605A05E1, 0x20CF685C, 0xA32C8058,
    0x20652DCE, 0x05A2A804, 0x4727D542, 0x205CC160, 0x40521745, 0x6406229D, 0x755E1900,
    0x6036015B, 0x951962DF, 0xA11E0441, 0x10014213, 0xC606B3EC, 0xC06B0101, 0x00CF821F,
    0xF4065165, 0xD2720633, 0x05D27727, 0x6B256040, 0x72560420, 0x21725406, 0xB32E8025,
    0x75FCE160, 0x6055B130, 0xC9657655, 0x41641322, 0x05001416, 0xCC0BC888, 0xE1FA05F5,
    0x06822500, 0x78E6A056, 0x0052606E, 0x20406702, 0xA804AEF7, 0x403C06C2, 0x02806F21,
    0x3207549A, 0xA05037A0, 0x0FC3B803, 0x8E118118, 0x019016C1, 0x65801C19, 0xBB6B76B5,
    0x01701322, 0x0BC05017, 0x700EE0EA, 0xC4760481, 0x60674727, 0x5A50AF52, 0x54E02140,
    0x40553422, 0x6F3AD3A8, 0x603250B3, 0x2AC062C1, 0x00040406, 0x40B80AAA, 0x00018E0B,
    0x096B9650, 0x416F6597, 0x0721A41A, 0xDA0D40AE, 0x123E1700, 0x00CE2A36, 0x50EF76DB,
    0x334D0120, 0x45ED5F3A, 0x394AD367, 0xC052C160, 0x04221C03, 0xEE1FF448, 0xC1001060,
    0x75370A18, 0xBA08F709, 0x41720B80, 0x04CF0804, 0xD407029B, 0xCCB2C4B1, 0x3A605127,
    0x174474EF, 0x0AC006AC, 0x0595F126, 0x6D25603A, 0x40A525F3, 0x08E0AC0A, 0x03797754,
    0x453C1716, 0x0FE0D007, 0xAC1FC0FC, 0xCF2CAB0C, 0x63CFF629, 0x5F6283FE, 0x6C16044D,
    0xEF75A006, 0xF40695F0, 0x602C0615, 0x23516D25, 0x061060F6, 0xF79808C1, 0x16B5B37D,
    0x8A196196, 0x00C80AE0, 0xDAB2600D, 0x00361000, 0x50B03910, 0x046062CB, 0x0D63A2AE,
    0x021CB644, 0x0750C207, 0x642AE030, 0x837A0340, 0x1784CEA4, 0x8A19C19C, 0x982D7E00,
    0x17A15351, 0x6C112182, 0xC09208C0, 0x29AB921F, 0x27012AB4, 0x10212037, 0x3B804406,
    0xF56E4AB8, 0x54AD5474, 0x0501FF3B, 0x180C3860, 0xF82ECCCA, 0x8554BF86, 0x560760FA,
    0x024C07C0, 0x0623154B, 0x8660706E, 0x95876DF8, 0x50B48F2D, 0x1D447744, 0xF7400602,
    0x25717E1F, 0x8410174B, 0xF8AD8701, 0x16E1374B, 0x6017216A, 0xA08007E0, 0x16CB2C1F,
    0x68FFB6DD, 0x901C36CE, 0x0440683B, 0x157C82AE, 0x749B7C12, 0x78B89E06, 0x2A11E1FB,
    0xE15812E1, 0x46B8F18A, 0x3413010B, 0xE448C301, 0x072EA41D, 0x896D75CA, 0x22B34DF0,
    0x50AE74EA, 0x3606D3BA, 0x406040C0, 0x05F21403, 0x50EA37CE, 0x21DC05C0, 0x46B9318F,
    0xEC0E40C5, 0x604A0E40, 0x4DC1BD00, 0x621FA06B, 0xEDE73940, 0x54589553, 0x46065549,
    0x125ECC37, 0x04403206, 0x699321F8, 0xE0DB3D79, 0x04E00F96, 0xEC0CE476, 0xA1CA0693,
    0x58572051, 0x0158B163, 0x359006CA, 0x607596EB, 0x3163E03E, 0xF96A21C0, 0x0C53D799,
    0x1A0EA0EA, 0xA24804A0, 0x74605E12, 0x82EF81EC, 0x743D5D63, 0x40C0431F, 0x8D98E068,
    0x402D4AD9, 0x9D39A121, 0x0C0E33D7, 0xCD5610C1, 0xC7C190F7, 0xB036A1F6, 0xB85188C3,
    0xC0520237, 0xFC50B730, 0xF9D586D3, 0x13329F9F, 0x0A198198, 0x41080F00, 0x72A0AA11,
    0xE61A406B, 0xC1F6068F, 0x21405806, 0x3B161682, 0x743EEA34, 0xA0144460, 0x7F381A35,
    0x01BE1BE1, 0x0B57EA01, 0x2A0440C0, 0x63F61BAE, 0x5C6AB394, 0x59430060, 0x004B48A0,
    0x000202A0, 0x00000000

  EW_BITMAPS_TABLE( Appusbsmall )
    EW_BITMAP( Appusbsmall, Default )
EW_END_OF_BITMAP_RES( Appusbsmall )

/* Table with links to derived variants of the bitmap resource : 'App::usbsmall' */
EW_RES_WITHOUT_VARIANTS( Appusbsmall )

/* Bitmap resource : 'App::jackplugsm' */
EW_DEFINE_BITMAP_RES( Appjackplugsm )
  EW_BITMAP_FRAMES( Appjackplugsm, Default, EW_DRIVER_VARIANT_RGBA8888, 107, 92, 0 )
    EW_BITMAP_FRAME( 37, 46, 18, 15, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appjackplugsm, Default )                /* ratio 20.11 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2,
    0xA8DC6A33, 0x044793F0, 0x48364275, 0x034EA894, 0x701B284E, 0xA5B2C95C, 0x633097CB,
    0xB3499CCA, 0x3845C1A6, 0x64422017, 0x2E171188, 0xA9558859, 0x9F588532, 0xC9767A3E,
    0x48A6E391, 0x16A25CAE, 0xB54A9CD8, 0x58ABD5AA, 0xC6256AB3, 0x572B8695, 0xB15582AD,
    0x881E8522, 0x85FE1D10, 0x46169110, 0x72FF168C, 0xEF41B0E8, 0xBD259409, 0x9341B0D8,
    0x055F9644, 0x1E0B035A, 0xE1B0B84C, 0x1B12AA8D, 0x974BC5E8, 0x44A65332, 0x0341B305,
    0x1F103A46, 0xE17BFC34, 0x163FC522, 0x2BFC502C, 0xBFC42261, 0xA3442B15, 0x9F825140,
    0x58753C1D, 0x0B266331, 0xB8DBE1F0, 0xADDEEB73, 0x016F8FF1, 0xC0A382BF, 0x1E168B65,
    0xA572BB5E, 0x50A8E472, 0x4E2C178F, 0xE20D6380, 0xFFCE8C1F, 0x4D30944C, 0x12F54482,
    0x3BFC4425, 0xBFC48271, 0xF03A200F, 0x11E94493, 0x06AAC4A5, 0xBF4F9EF0, 0xC7C2FDBE,
    0xC1E30D8E, 0x5EA89835, 0x1C72ECBD, 0xD1BCB72F, 0x2C872308, 0xF75DC533, 0x0A82F0C8,
    0x99E0B5D6, 0xF0702008, 0x8C280A8F, 0x390E8FF0, 0x660FF0D0, 0xC1B06D9A, 0x80E0FF05,
    0xF8D00CC3, 0xF70807F6, 0x8BE2E8B5, 0x8CE46230, 0x9054C233, 0x38C4320C, 0xBF310C93,
    0x2AD5F0C0, 0x0802044F, 0xF104F61F, 0x28FF0EC3, 0xFF108471, 0x0A610838, 0xC1E3FDA5,
    0xD3FC1606, 0xFC551685, 0x982789F3, 0x18C643FC, 0x4543FC5D, 0xE3FC4C14, 0x88481344,
    0x6119C673, 0x9BE310A8, 0xD589C670, 0xB006743F, 0x19F00050, 0x169ECC50, 0x058C59EC,
    0xC0F331B3, 0x6188C09E, 0x38822188, 0x6A1B46E1, 0x0CC34398, 0x81E79C2F, 0x95BC3266,
    0xFC451264, 0x3F69A503, 0x3FC360F0, 0xC8924094, 0x2364DC3F, 0x44D53FCD, 0x933FCCA3,
    0x3FC87238, 0x4E71DA43, 0x51E08120, 0xE6B89C83, 0xD445ABAA, 0x31806AF4, 0xE7406EC0,
    0xA40E763F, 0xBC6F00A2, 0x3B0405F1, 0x2D83A20D, 0xC7E2C0B6, 0x1130C56C, 0x68102FDC,
    0xB624C982, 0x14055158, 0x9A10B4EB, 0xB69E19A6, 0x459F0982, 0x4B130FF7, 0x16CFF118,
    0xCFF14C59, 0xF1B4741D, 0xE4C1314F, 0xE63B4FF2, 0x308FF378, 0xEAC2C8BB, 0xC3FC8222,
    0x14FB1994, 0x65200852, 0xC3F0EAEC, 0xD0CB1EB8, 0x4AF402B0, 0x527B9E8D, 0x54C6C941,
    0x1B8731D8, 0x8A729C61, 0x02C08F28, 0xF00D270B, 0x6C2D4BC2, 0x3B089730, 0x8491384F,
    0x6084223F, 0x98290AA1, 0xA20B42E7, 0x09C2B0B1, 0xC1ECD4FF, 0xC3FF3F67, 0xFC832208,
    0xA82B8B33, 0x3ACF23FC, 0x8D23FCE2, 0xE3FCC032, 0xFC9A294A, 0x641B8793, 0x170623FC,
    0x8711BEF2, 0x6C406E1A, 0x05F3D9F6, 0xCD02A810, 0x4402EDB4, 0xDF900EC3, 0xF4784E31,
    0x749D2C09, 0x7E200992, 0x2A4462B9, 0xC5A284A9, 0x31EC8320, 0xF443110E, 0x270A0FF0,
    0x69B8C754, 0xA17096E2, 0xA7921A0A, 0xB59E6821, 0xB93FD7B1, 0x350FFB44, 0x6FB324CF,
    0x13FCDC39, 0x2CFF29F0, 0xFF1CC7F2, 0x1245618C, 0x85F198FF, 0x0A1CF815, 0xE76817C8,
    0xC34C3BAE, 0xC5102B16, 0x0169FB6B, 0x30BFC432, 0x502FF1CC, 0x0E323C44, 0x10CB6B40,
    0x0172C72A, 0x627CA82A, 0xA4711C47, 0x3A0E8F51, 0x0856A0C4, 0xB3ABA419, 0x56AF400B,
    0x601F07DD, 0x3B0F0FF0, 0x6F8FF0DC, 0x4D63FC7D, 0x83FCD035, 0xFCDF394E, 0x55324CD3,
    0x314CE35F, 0x2C85E0FF, 0x33073750, 0x681FE164, 0xF812C2C8, 0xBC3C8821, 0xC8991921,
    0xB0502304, 0x305A0ABB, 0x8683BD22, 0x8C101706, 0x4FC0660E, 0x310AE01F, 0x233CB060,
    0x2684E324, 0x26326138, 0x04813120, 0x3C300900, 0xD0D440C0, 0x2301E3BB, 0xC4D37909,
    0x08D11A2B, 0x87828045, 0x1B46108A, 0x7D0650DC, 0x1403E074, 0xAA08DA08, 0xBCF316E4,
    0x41E605E0, 0x43AA0981, 0x86981082, 0xC2684909, 0x8971383F, 0x1D43FC4D, 0x3FC730E6,
    0x6A8DC1C4, 0xB016E3FC, 0x1C3FC518, 0xFC3A8881, 0x88630D63, 0x20DED682, 0x825C7F86,
    0x47B88611, 0x08911C27, 0x37C25043, 0x1FD3A00C, 0x42C17004, 0xC020921A, 0x76024632,
    0xB409C8C1, 0x582E19AD, 0x7844109E, 0x40216B82, 0x4058D083, 0x14B20D0B, 0x44C09839,
    0x0285A836, 0x6F008014, 0x3B94E2D4, 0x3E288510, 0x84308E11, 0xF0FF0BE1, 0xA44AA741,
    0x09481A83, 0x414BEA04, 0x1A703E0B, 0x054D0C17, 0x09D0B02D, 0x16BE104C, 0x563CC0A8,
    0xA2964280, 0x9877AFA5, 0xD8FF1DA3, 0xF19C33C6, 0x2D60588F, 0xC3708175, 0x85E0CA3F,
    0x0C81A94C, 0x2547D84E, 0x6E88011A, 0xA01502C0, 0x0CC581F0, 0x5E76C870, 0x9BC277B0,
    0x183A0A5B, 0x4C580C8C, 0xC8A3BD02, 0xBD8008B5, 0x01C30C37, 0x3FC0680E, 0x7A809946,
    0xD50E8484, 0x94130260, 0x9414A9A0, 0x18FF358F, 0xA9780901, 0x68681582, 0x50803406,
    0xA1E07C0F, 0x338B08EE, 0x1B4381E6, 0x650FF0CE, 0xFF186314, 0xC8394758, 0x20680FF1,
    0xC0A3A503, 0xA1FE2384, 0xE18C3807, 0xC2F8671F, 0x0871FE13, 0x1F21B43F, 0x1F047897,
    0x5E0C110E, 0xEE06C2B8, 0xEB3BEA4C, 0x4C5DC8C4, 0x70285AE0, 0xD2370C9E, 0x802644BB,
    0xC2104408, 0x0080101D, 0x00C3FC03, 0xB9802806, 0x7FA14426, 0x363C4774, 0x6A3FCCA0,
    0xC5488360, 0x6A100640, 0x43440B81, 0x817A3914, 0xE3585A0B, 0x0FF11022, 0x5FC39473,
    0x36C730E9, 0x5E8C01FE, 0x9B1FE2B8, 0xE0C144B0, 0x6DD68508, 0xA8FC0941, 0x217C1969,
    0x8274550B, 0x44C9B307, 0xD9CA9401, 0xB3E32A0B, 0x6886F81D, 0x6192E011, 0xEF1DE021,
    0xCE104758, 0x3C718E71, 0x30680D03, 0x60023F83, 0x80107FA7, 0xC7F80300, 0x50201E03,
    0x340E48F2, 0x0AC16D71, 0x1603449A, 0xD5052E2C, 0x78088119, 0x10218459, 0xC0BD1FE1,
    0x68BE2F05, 0x23FC738E, 0xC6B8DE1C, 0x0B116C3F, 0x1203FC50, 0x3FC3908C, 0x250660D4,
    0x610CC3EC, 0x06390238, 0x183507D1, 0xEC842062, 0xCBE77CAC, 0x800CF811, 0xC3DDF81D,
    0x0D91B636, 0x13626C75, 0x1087F899, 0x7F840084, 0x0200600C, 0x176D5620, 0x2C0500B0,
    0x1393718E, 0x504608CD, 0xABA2B91D, 0x9308650C, 0x0FFA441C, 0xBBC27851, 0x3686B0DB,
    0x6D0DF1FE, 0xA114F88C, 0xF83FC4B8, 0x8E9B8780, 0x18410BC1, 0x108E196F, 0xC204438E,
    0xAFA04D0C, 0xBBD45F8E, 0x62925A7D, 0x06400935, 0x9300AC86, 0xF80682C1, 0x1E34C765,
    0x08410F89, 0xF8FF1022, 0x27140FC1, 0x5581F0A2, 0x6AF903AC, 0x81D1FF58, 0xCBAB080E,
    0xBAEB3AC2, 0x542EE098, 0xD7BBC298, 0xD23FDD00, 0x65A88E31, 0x30D11A83, 0xB15E2D1D,
    0xC1EC4446, 0x5D805C6B, 0xD0C0C61A, 0x0E022446, 0x268510D9, 0x1D821116, 0xBD379A1B,
    0x1BA286BB, 0x1C1842A0, 0x582F186F, 0x40CC4CA7, 0xE0C01CE9, 0xC9C0AED2, 0x8BE1EE22,
    0x0E03FF4E, 0x0E112EA0, 0xB4BE87DC, 0x10979158, 0xFE038080, 0x08016591, 0xE0FF0020,
    0x205B57AA, 0x01AAF1DC, 0x4578FF0D, 0xE6B1542B, 0x1DC3FED6, 0x31692D2A, 0x4C8FF17A,
    0x7F546250, 0x101AC3C0, 0x8D790628, 0xB09DAF2D, 0x51F02144, 0x2280570B, 0x85815C12,
    0x6DCD0E4A, 0x912DC4C2, 0x0E611012, 0x40832912, 0xE526366D, 0x6202B748, 0x706D6EC0,
    0xF8FF0115, 0xE1FE1709, 0xCE4F7A85, 0x1A1BE833, 0x03243478, 0xCB80C019, 0xAB90B01D,
    0x585B4C13, 0x2534795F, 0x5A2B50D0, 0xB07F8AB1, 0x18E91D43, 0xA74A37A3, 0x961C5B0B,
    0xC346778F, 0x054B1A18, 0x0DE92027, 0x8742B868, 0x7C88F135, 0xA91622EC, 0xA253C408,
    0x5F96EDD2, 0x4AC0AAA5, 0xA4FD0800, 0x004E1503, 0x24D91BC8, 0x81058600, 0x12239230,
    0x04C0A014, 0x04E071F6, 0x13ACA08B, 0xABD1CD36, 0xB9743383, 0x719E0580, 0x84200B81,
    0x20450B19, 0x404EAB02, 0x00FDE002, 0x33079F55, 0x932E70FF, 0x4A097132, 0x9F14A3FC,
    0xFC3FC4E0, 0x92F107A0, 0x22F20C01, 0x81FE15AF, 0x828A3734, 0xC6689013, 0x8AE1702F,
    0xE5DB9834, 0xDC4A9F80, 0x17E8F6D6, 0x6B047088, 0xA89E4973, 0xAC220A57, 0xA8E61D63,
    0x51D43A41, 0xC2F46E8E, 0x07B0B917, 0x00F02204, 0xE7601303, 0x0240680C, 0x5A343894,
    0x9A679D47, 0x4278813A, 0xEC7F9990, 0xC85A33CC, 0x00809642, 0xE7A1C504, 0x87FA1897,
    0x029B875C, 0x08878814, 0x3FC1C83F, 0x30E315DA, 0x87EE6170, 0xFC1F8410, 0x78520A91,
    0xB8BD1A82, 0x10562C45, 0xC4AFEAF8, 0x16BC96BE, 0xFDC18403, 0x04ADCC0A, 0x2240ECF4,
    0x8A2753CD, 0xF02A32A8, 0x284200C1, 0x0873F8F6, 0xE8E11C21, 0xB1643886, 0xE1B87FB4,
    0x806C340D, 0x002C1C03, 0x00A3FCF9, 0x66004006, 0xE1D50255, 0x0265C616, 0x1E01F251,
    0x60373E10, 0x0713DE03, 0x8D6CB070, 0xE52D0B41, 0x0FF0C80C, 0x34070074, 0x929121D4,
    0x4BC02502, 0x1C2167AA, 0xF0110180, 0x0100140F, 0x9E16F481, 0x40625E41, 0x0B97980C,
    0x327D603B, 0x36E61198, 0x01D8360D, 0x3D8390D1, 0xF0CE2330, 0x02D48904, 0xFB2357DC,
    0x51431044, 0x22A00305, 0x3F652004, 0xC6528490, 0x84884B84, 0x0E851091, 0xA0A61900,
    0x0A83D401, 0xF06E005E, 0x10EF0F00, 0x0D80D60A, 0x950DF0D3, 0xE0910960, 0x0540530F,
    0xA61A453B, 0x70170161, 0x48400173, 0xB07FD0FF, 0x00150146, 0x16C16A01, 0xC201F1E7,
    0x30470482, 0x08A34604, 0xCF0FF086, 0xF0C60CB0, 0x0F30F50F, 0xE30FF0EB, 0xA4660DD0,
    0x62A0A20A, 0xF3067071, 0x30370426, 0x22438D5C, 0x0B00F012, 0xD00B0FF0, 0x7090F455,
    0x62087020, 0xA0580620, 0x8A783301, 0x73314115, 0xF83C0173, 0x0B914F03, 0xF127489B,
    0x53BE0005, 0x02680810, 0xBA06E014, 0xD04D0A28, 0x3E80FA8B, 0x130FA01F, 0xB0FA0236,
    0x0FA8C603, 0xFA8C9054, 0xA8CC0640, 0x8CF07E0F, 0x376460D2, 0x20956490, 0x0D10D20D,
    0x4708B0FE, 0xE0447613, 0x01E65C03, 0xFA5123EA, 0x755F4536, 0x87070400, 0x09005004,
    0x22C21676, 0x0FF20B05, 0xA44AB0A1, 0x00FF6212, 0x5D60ED0F, 0xA20D10D8, 0x309C0A73,
    0x0860FF09, 0x672F607A, 0xD50C0590, 0x58D05E06, 0x7808308B, 0x809C0FB0, 0x0CD09509,
    0x8F0A4380, 0x58A85F00, 0x73611591, 0x199190CB, 0x810B8430, 0x91F06084, 0x22018042,
    0x47410A89, 0x5B70FE01, 0x0A703802, 0xF6EF6B06, 0x5620057F, 0x7479D5BB, 0xD3FA9330,
    0x0BA0D836, 0x760FB938, 0xD46E0760, 0x7C203D03, 0x69023022, 0xB1D51A41, 0x2E802C02,
    0x122E8946, 0x26AB0130, 0x8EA5B687, 0x160150FF, 0xC07B4F80, 0x0E246362, 0xF10FF0E0,
    0xF0EC0F10, 0x0BF2380F, 0xA30926C5, 0x706D0772, 0x05706453, 0x6E07D50C, 0xA58805E0,
    0x0EF07B08, 0x970A00A9, 0xF0AF08D0, 0x22C0A70A, 0x14979916, 0xD0D768A1, 0x4BC48F00,
    0x0110F8B2, 0x798406B0, 0x02F44F04, 0xFD9280EB, 0x77A375A0, 0x7055B960, 0x9200C0FF,
    0xF5B75B69, 0x8766A90F, 0xD19990A4, 0x20FF5FB4, 0x05A3A832, 0xC62E99A0, 0xE2C23E85,
    0x19F20F02, 0x2934002D, 0x239202A0, 0x0190FF8E, 0xBA01501A, 0x989B0105, 0x79B5B98E,
    0xFF7BB502, 0xA0AC3260, 0x0AD0B134, 0x7F085774, 0x30645E30, 0x05805F6F, 0x7708053B,
    0x00FE06B0, 0x0870950A, 0x8E8FC0F4, 0xA0D40460, 0x97A4F918, 0xC71089D8, 0x53CB7362,
    0x69410F68, 0x45005066, 0x305F9E30, 0x0FE9E603, 0x5C6B198E, 0x855E65A5, 0x6AE87192,
    0xAB56292E, 0x88541A21, 0x4660D52A, 0xC39F9096, 0x104B04B7, 0x34161351, 0xE850D747,
    0x47A802C2, 0x86A1A2A0, 0x4B1D5803, 0xF04704C0, 0x81106F0F, 0xFF3ED21B, 0xA22301A0,
    0x4561D87B, 0x9F3EC216, 0x303A2462, 0x87E0487C, 0x76065811, 0xE0880924, 0x0927770B,
    0x2A9D9050, 0xE3C2111A, 0x3CB03E27, 0x7310C00E, 0x800BA330, 0x04D02B1A, 0xE6021456,
    0xC89C9250, 0x9EC9F160, 0x139E9A3F, 0x56B9A430, 0x0C058497, 0x4A07A355, 0x57B40FFA,
    0x566A3960, 0xC32E61DD, 0x82106B45, 0x87733902, 0x109A6169, 0x805D05C2, 0x0A025A05,
    0xDC0DB45E, 0xA0CD5DA0, 0x05F6F423, 0x30031579, 0x60235C30, 0x0180FF33, 0x13826953,
    0x074279D0, 0x0460FE01, 0x935AB045, 0x308D0900, 0xA7FA2B05, 0x1168F10D, 0xC7863CB0,
    0x42E8A615, 0x86287108, 0xE6F50240, 0x01E0CB05, 0x1C0EAA90, 0x30FFA930, 0x4A3737A4,
    0x599E960E, 0x25B89906, 0x95507D56, 0xB40B50FF, 0x43B10B30, 0x02A47506, 0x1F2529AC,
    0x80273E10, 0x1D044E02, 0x291D9563, 0x201F21A0, 0x03524D94, 0x760753DE, 0x85D00740,
    0x0EB70E1C, 0xEE0F05D6, 0xE0C15D60, 0x08FAA40B, 0x593F108C, 0xB9FD0570, 0x0FF3DD03,
    0x2E034034, 0xA0253930, 0x03D6040D, 0x5C8CC099, 0x091C0210, 0x103ADEA8, 0x1900B8AF,
    0x204B0CB9, 0x8A310CA8, 0x4601A062, 0x00C0AEB0, 0x222343A9, 0xF20152C2, 0x16439AFA,
    0x92F99399, 0x763BF658, 0x91F26B02, 0x07707C5B, 0x7805F677, 0x802E1D65, 0x2245CA2E,
    0x6E4BC515, 0x39A61A21, 0x4BC02321, 0x9A02401D, 0xC04603D1, 0x0820FF03, 0xC70FF636,
    0x60FF2370, 0x0F40F30F, 0x510E545F, 0xC46A4683, 0x2F608208, 0x5E5E906B, 0xC50C0603,
    0x07007E07, 0xA20A00FD, 0x60E60960, 0x04E0A632, 0x3AADF9D7, 0xA73810BB, 0x02084A10,
    0xA303B8C6, 0x30FE8C00, 0x0163E164, 0x44A95B48, 0xD0FF931A, 0x0FFB4E00, 0x94B51007,
    0x50058029, 0x00300699, 0x35039802, 0x41E54B60, 0x2C202345, 0x2CA036EC, 0x61A81E20,
    0x16916B1E, 0x4F3401AB, 0x52650520, 0x8FE09A09, 0xCB0D20CF, 0x10F195A0, 0x2A60DD71,
    0x290A80FF, 0x82B50FF6, 0x6790686B, 0x6206D0FF, 0x90842650, 0x0990F54D, 0x9E08C09A,
    0xF0CC0C90, 0x73A0600B, 0x15B91B3B, 0x30199251, 0x65D0C88C, 0x3C0FD01D, 0x20FFA96A,
    0x996B9E01, 0x37B4A6A9, 0xFA98B4C7, 0xA3D98C0F, 0x0760D89B, 0x70189AF0, 0x5141DA73,
    0xE61A6029, 0x902919E9, 0x01E1E202, 0x333E101D, 0xBB81A6A0, 0x0B32F606, 0xBF0B00B2,
    0x20F3462A, 0x0CB7110F, 0xC50B80C7, 0x43050936, 0x57906C07, 0x48059064, 0x106D5340,
    0x09209F26, 0xB30FA084, 0x86D70AC0, 0xB9232812, 0x2E496916, 0x759A4111, 0x027BE604,
    0xCB011757, 0xF997A4F0, 0xBEF0170F, 0xAB5000FF, 0xC4819926, 0xBA589B60, 0x02B4EBED,
    0x6BA0BFA5, 0x01201187, 0x0EBFF481, 0x51E61A06, 0x1AB1A6BB, 0xC27AC1A6, 0xF033B5A2,
    0x07707B0F, 0xBE2FF078, 0xD95C3550, 0x0E80F095, 0xBA0C152C, 0xC2A29C00, 0x06506CAB,
    0xCF9C59FD, 0x50770815, 0x88F0FE06, 0xB70E2089, 0x509C0A90, 0x79F1C149, 0xF68A8BE0,
    0xC03442A5, 0x6F22C711, 0x339E606B, 0xD01A0E40, 0xC3EA13C3, 0x9C224BEF, 0x0BF4BEDB,
    0x92DB52B5, 0x4ABFDBE9, 0x5737741C, 0x82501701, 0x81013011, 0x60240224, 0x16961321,
    0x49B0F024, 0x15CF0472, 0x08B08C09, 0xAB0CC52D, 0xE0EF0F32, 0x0DD57D0E, 0xAA0B63A5,
    0xD0FF0A50, 0x07608308, 0x6306C0FF, 0x0067B380, 0x0852EE06, 0xF106507C, 0x709809F0,
    0x0B80B108, 0x31041BDC, 0xF5A2ADFC, 0x1175A40D, 0x8A04E2C7, 0x6AF008CC, 0xA6FC410F,
    0x4CC4A922, 0x3503BF6B, 0x6F09EA4A, 0xF29E99EE, 0xD741826B, 0xA3CB9FB9, 0xFFAB3026,
    0xB0160110, 0x80B01B6A, 0xC302E7AE, 0x15795775, 0x0E35DE19, 0xF95830DF, 0xF0F00F60,
    0x64B0DA0F, 0x980A40FF, 0x60FF0910, 0x4B006807, 0x9905105E, 0x37210722, 0x25CC1130,
    0xB40D4085, 0x009C0AC0, 0xC832C498, 0x05112CD0, 0x10227470, 0x01892206, 0xD7C8F0F1,
    0xE4F8C9EC, 0xC9B4F8B9, 0x53AF892D, 0xA6099EFB, 0xA93BFC92, 0xB2AF2216, 0xA0190189,
    0x0380343E, 0x5301A21E, 0x101ABEE2, 0x0410413E, 0xBD70C24C, 0xF0E15AD9, 0x0F00F30F,
    0xCE0FF0EA, 0x29600CA0, 0x3F108A09, 0xD0068074, 0xFC0E968B, 0x08635D06, 0x4D3AC07D,
    0xF03F0470, 0x0400450F, 0x7F0D203A, 0x101414B0, 0x10BD1ECD, 0x9802C69A, 0x6B4806FB,
    0xC3D0EA01, 0x9CB9C19A, 0x5C45C9BB, 0x9EECE2BA, 0x51CE2CE2, 0x2B4CBABB, 0xB46AD375,
    0x2AC91BEE, 0x10FF19C0, 0xA0D04604, 0xB402001D, 0xD1E601FA, 0x4B005C05, 0xB10B30B8,
    0xC0AFAA10, 0x081089C6, 0x63C71071, 0xD89253B0, 0x07C088A0, 0x7307E6CB, 0x00384340,
    0x00F17003, 0x4648100A, 0x20470430, 0xD6708C0D, 0x3BD1FD1D, 0x901842AB, 0x05F10378,
    0x3E028D70, 0xA0CCD730, 0xD380FCCE, 0xF1CDEA3C, 0xBD7B500B, 0x92D92D6A, 0x4092FD30,
    0xBC94BA7A, 0x1E61DDC9, 0x1C29F569, 0xF1E765D0, 0x04A0479F, 0x4E04C265, 0x08084720,
    0x392C5921, 0xFF33B032, 0x39FD1640, 0x24C04F05, 0x9905605B, 0x02612F52, 0x45A05906,
    0x2501301B, 0x08E90098, 0x008004B5, 0x470490FE, 0xB0B904E0, 0x0BB0AA0B, 0x80D6A00F,
    0xE42A3C2A, 0x3DC6E006, 0x3702303A, 0x80D0DC30, 0xD250FFCE, 0xBB5BABA2, 0x5B4FB4D5,
    0xA41D33BA, 0x3FCE4607, 0xDBFC92DA, 0xD28B9CBE, 0x4D9E3D16, 0x00FF6FD2, 0x01E252AF,
    0x4C6034BC, 0x39FD9FC2, 0x1D53DF8C, 0x3D21665D, 0x76553EAC, 0x449016DC, 0x0675B00A,
    0x0B506AF6, 0x008C4656, 0x70D250FB, 0xB915DBA0, 0x0CA59F36, 0x73D6C01D, 0x627E08A3,
    0x07BA8A0E, 0xD70BFA39, 0xCDC80FEC, 0xBFCC49A3, 0x99D82D2E, 0x292ADD1C, 0xC9492DCE,
    0xDBD7ABED, 0xEBB5DD8C, 0x50D84519, 0x921E019E, 0xA1706B43, 0x04926550, 0xD3CA9E28,
    0x2DDD8B7A, 0x255DEE22, 0xE2B4CBED, 0x7500C9AC, 0x06B9840F, 0xA8DFC064, 0x6AE34EB8,
    0x054AE303, 0x680BC32A, 0x706F2C90, 0xE0CAD164, 0xA3CEAB49, 0xDDCA757C, 0xBA7C4579,
    0xE955E560, 0x2D819EE9, 0xBFCBA556, 0xDBE4AC49, 0xD020D38C, 0x1A63DFE5, 0xF1038226,
    0x1AD013F6, 0x19AC3FAD, 0xC0210AA8, 0xEDC30FFD, 0x9FEA363E, 0xF4AEE21A, 0xDB4C3E1A,
    0xD28DCF92, 0x9B5FF0DC, 0x7E3A0120, 0x4894968A, 0xBD20004D, 0x509502F0, 0x1E40EFE8,
    0xD70FB027, 0xCC9BC3ED, 0x75AE4FBF, 0x56E54A3F, 0xEE17DF6B, 0xE59C9BA3, 0xC6D38AF3,
    0x41D5E5DD, 0x1A260FCD, 0x1EAD1E6F, 0xB0706A02, 0xB1603C3E, 0xC61A0DDE, 0xFE70E885,
    0xB98E5E21, 0xCFAF3951, 0xB500D2BD, 0x0920921E, 0xE1E7D0C3, 0x6489C2FB, 0xEBF08A03,
    0x5AE6F0D4, 0x3C9BC91E, 0x92DA3EC9, 0xE9CE3E51, 0x592DEC99, 0xE4CE97C4, 0xC6CDBA3C,
    0xEA4FEB0D, 0xE24E6FE9, 0x6C44F19B, 0xF0FFDC3E, 0x6A2EDE04, 0x9CEACE62, 0x84BC879E,
    0xDC8C9DD7, 0xF9A96C8F, 0x90AD8C30, 0xBE000CE6, 0x33B393BD, 0xF68F2C78, 0x6C731B09,
    0x8F0EACE8, 0xCE4CE0EC, 0xEC9C94BF, 0x535B9E13, 0xBE95995E, 0xA44DD689, 0x9B3EAEC3,
    0xCE9EE5EE, 0xD36E6FE2, 0x936B47BA, 0xCA4F2103, 0x7008C0E2, 0xC6C8F169, 0x4CDBDC6D,
    0x0FE00EEB, 0xBC08813B, 0xA7EA8450, 0x2D78A8EB, 0x2A090058, 0xAA4D017F, 0xCDBDC809,
    0xC8C45B4C, 0xA9E9DF6E, 0xC46E5592, 0xEDC45BAB, 0x8C8FA3CB, 0xEE3EB0DD, 0xE41E3E22,
    0x5E2A9A21, 0x708E69F4, 0xDEE9E392, 0xBD7FBEDD, 0x9909E99E, 0x360FCD33, 0xEC8A0DFA,
    0xF2626E04, 0x26841A2A, 0x706369A0, 0xD7A0E68B, 0xE189BEC6, 0x992AD82C, 0x9EBE169E,
    0xD0E58C94, 0xECDBC9DE, 0xA4FE72DD, 0x52E1DF41, 0x8170F11A, 0xDE6F72ED, 0x49B9CEB0,
    0x2E76BA7C, 0xD259EEB5, 0x9F8B70FC, 0x30648CC0, 0xF589815C, 0xED7E58A9, 0xF0102D74,
    0x0500B468, 0x380FAF90, 0xFEC9C9BD, 0x92ACE2DC, 0x57EC9990, 0xAC49B4FE, 0xC91ED1D7,
    0x70F17DC6, 0x4E9F1E0F, 0xE6FED8F4, 0x2EF4AF72, 0x6D2DA3CE, 0xDD1E33C9, 0xD5A43EB3,
    0xCFB40390, 0xFB706A04, 0x1CF88EEF, 0x3367EF21, 0x0051B378, 0xC2A8D736, 0xCE4AE9E0,
    0xFC792ABF, 0xD1F659F0, 0xB502F9BD, 0xE4AC9DF3, 0xE3A94E9A, 0x3808F0DE, 0xF10F10F7,
    0x17F41E6F, 0x5B9CD38F, 0xF95EC9C4, 0xFC98CB52, 0xD0445580, 0x073A330C, 0x33FBAF57,
    0xF8B53BE1, 0x2D755226, 0xCB7DF01C, 0x85B00383, 0xE1D04206, 0x49EB00EA, 0x6EC9CE2C,
    0xECCD82F6, 0xC1008100, 0xFF0506BF, 0x6FF84041, 0x177FC2C2, 0x10CBFE1C, 0x8A071FF1,
    0xFC5C3EFF, 0x3FE34237, 0xA9FF1D13, 0xC5CFF900, 0x4C2F7FC8, 0xF29163FE, 0x16960A1F,
    0xF0CC4631, 0x824CC24F, 0xFCDC1306, 0xBFE74047, 0x69FB3D02, 0xC98F1A00, 0x8C5B4B50,
    0x3497F83A, 0x4DA60000, 0x1A853E9D, 0xAA54EA55, 0xC55EAD55, 0x56EB559A, 0x7EBD5DAE,
    0xD6D5DB05, 0xCCC503D8, 0x9695F8EA, 0x57B620C1, 0xB6EDBC6E, 0x8642AE41, 0x3BFEEC11,
    0x00DFF790, 0xFE7B3CBE, 0x1FE099BB, 0x1CFFC203, 0xB349961C, 0x128862C2, 0xE7F87229,
    0x113FF241, 0xC091FF95, 0x4825B2BC, 0x7C5AFF15, 0xC5724916, 0x3B99CBE8, 0xB8B7FE9C,
    0x8184C1C2, 0x3BE4EE73, 0x7F5E6F00, 0x83236C38, 0x2A899B92, 0xFEC203DE, 0xF85C1E06,
    0x8DC5E270, 0x5BCA9F1F, 0xCD5080D5, 0x2E810479, 0xA03FF54F, 0x8DD9FE1A, 0x40E04FF0,
    0xF6F7DD05, 0xDFFE1035, 0x21ACF202, 0xBE90A3FC, 0x139843E1, 0x4F80822B, 0x134772D9,
    0x47DC52FF, 0x8BA472A9, 0x863E2CFC, 0xEA048CC4, 0x026BA280, 0xEEDB10C3, 0xFC16011F,
    0xB5070027, 0xF21F2813, 0x0F221816, 0x6A682B0B, 0xE436E429, 0x3F0F43B0, 0x642C3104,
    0x1A807446, 0x26600D13, 0xCC2C02C5, 0x5E2688A3, 0xA430E75C, 0xA0AF3A10, 0xE03B6606,
    0x93BE0235, 0xFE053BAD, 0xA440F1F1, 0xA1D03216, 0xEEB4060B, 0x81FE0EB4, 0x368C840F,
    0xFB4A212A, 0x056D1BF0, 0xC94B40CF, 0x2CB613BF, 0x3CC9404D, 0x3102C7F8, 0x426F2BC7,
    0x8044211D, 0xC9AAD51F, 0xAA390A0D, 0x10B7D380, 0x4EB3A4E7, 0x2E1CEF3B, 0x80313D19,
    0xFA05CFA6, 0x1E083400, 0x3086FD06, 0xCBBBAE06, 0xD472BCB5, 0xFED8C769, 0x2000CF09,
    0xD2A07BBD, 0x20C1FF02, 0xDAE47FD3, 0xFF251FE0, 0x27D42109, 0xCB67F847, 0x214CA613,
    0xFBF6FE34, 0x2300B3AF, 0x0C532C9B, 0x81F4A9FE, 0xA9EC6E9A, 0xFC853400, 0x5B5F0A47,
    0x13D821D1, 0x0136218C, 0x36458F3C, 0x55916559, 0x9E42806E, 0x690961DD, 0x5771B1ED,
    0x4BF51733, 0xDD1B47D7, 0xD4F44655, 0xB9D37233, 0x545504BE, 0xB535488D, 0xF85B2BD5,
    0xFB770607, 0x4EDC52EB, 0xCC809267, 0x0C056E05, 0x5B5547A7, 0x2221CBE7, 0x6580F801,
    0x60B82607, 0x566B8583, 0xD89B850F, 0x8275E1A1, 0x6F482D74, 0x5211C573, 0xF5AB5CF1,
    0x8B1A0A5B, 0xE32631E9, 0x289FF73B, 0x850CD04B, 0x7554AA7F, 0x9645545D, 0x36F4E3D2,
    0x20CCD8CE, 0xC947F469, 0x39C0E660, 0x90AB380C, 0x7F9F60F3, 0xA7683A06, 0x82225DA4,
    0x655852FB, 0xC4687F3B, 0x65336297, 0x5A50CEF6, 0x02D3152D, 0xAC83DD8E, 0x5BE978C9,
    0xDD783399, 0xD264E185, 0x5600FA2E, 0xD5E6AB30, 0x15396E4C, 0x3846286A, 0x5FAD2063,
    0x6EBA1008, 0x4006EFBB, 0xE292AE43, 0x70DB37E9, 0x7D3AA1F8, 0xC836F628, 0x3A62F56B,
    0xFE3DB463, 0x47B253F4, 0x944B952D, 0x0627FEC1, 0xFAE653CB, 0x3BD75971, 0x62BD5152,
    0xD10807DB, 0x089BF9CD, 0x002F4E33, 0x6757D56F, 0x09BE2A1D, 0x08F62780, 0x8D678762,
    0x20D76E7A, 0x540DDD1E, 0x9914AA4A, 0xE1118029, 0x51F049C1, 0xD7A413A6, 0x23B3445E,
    0x43726AF2, 0x9672010D, 0xCB3AF64C, 0x39472994, 0xBF394E64, 0x6B6C4834, 0x44E5E7C5,
    0x831F20E8, 0xFF47CFD6, 0x6FD67F7C, 0x49F71EE0, 0x139FDF58, 0x879FA1F4, 0x82C7EE79,
    0xFAA4046F, 0xCA037FA3, 0x123CE000, 0x498CB144, 0x43C9792D, 0x56B0755B, 0x0D71E8AE,
    0x97619F65, 0xB476BCF5, 0x04465578, 0x74CD429E, 0xEAAD8632, 0xAA2603C8, 0x0A196000,
    0x46120781, 0x44277D20, 0x26F8DE21, 0x8008A49B, 0x9BE0016F, 0x83476801, 0x0A10D475,
    0x18C01151, 0xD5078874, 0x524CC3F4, 0xB0D3104B, 0x694C2483, 0x0B5A71EA, 0x8558CA19,
    0xCF41AE32, 0x8E9C446C, 0x2911FC8C, 0x1ED0587C, 0x2DC3D30A, 0x1A45B09C, 0xCA012DFC,
    0x5E578031, 0x45DEC638, 0x70026F85, 0x20FEFF4A, 0x31B46580, 0x63842912, 0x42F4331C,
    0x1ED0BCA9, 0x3B00EC77, 0xA68548F4, 0x5649A018, 0xB83C17A0, 0x356F3195, 0x23C979AF,
    0xF71F0297, 0xCD7974AA, 0x9CD2AF6B, 0x8FC65EA6, 0x5CE3955A, 0x0BC930D8, 0x4E06B14C,
    0x2E29A0CA, 0xCE70632C, 0x9E520CA8, 0x9CA719A0, 0xD9543041, 0x23511301, 0x11194D8C,
    0xC7505432, 0x96D1CA50, 0x19CA74B7, 0x12CBB1F1, 0x6197C3A4, 0x161951F0, 0x256E0E65,
    0x790C90A8, 0xB5671159, 0x90598F3D, 0x646B2465, 0x3D36B848, 0x79732A06, 0x3641F0FD,
    0x202E7183, 0x2C9BC22C, 0x4928D3B0, 0x2E368229, 0xCCE505A3, 0x8752EFC0, 0xD3B6764B,
    0x14180A2B, 0x45B0980F, 0x4162D827, 0xA2C75802, 0xC43121FC, 0x9B3DB324, 0x20C8DCDB,
    0x02095027, 0xA9A834C8, 0xC48C3F8E, 0xC3B9E98F, 0xC3005257, 0x81CA2428, 0x02E3CDFB,
    0x0568C0E6, 0xAB51B1B8, 0xEE95E525, 0xEB486904, 0xC15C8076, 0x88933620, 0xC3B638CD,
    0x6425998F, 0x1AD3DB3A, 0xB8F23124, 0x5D305174, 0xA707F2E7, 0x783551F8, 0x461B8754,
    0x623042D9, 0x14768959, 0x40E50755, 0xB1D011AA, 0xC3802E54, 0x470854A9, 0x4AD08D54,
    0xAAD48809, 0x00563D57, 0x1F00931E, 0x0141C0C9, 0xAAA34410, 0x3520C541, 0xD204812F,
    0xD9A2D71A, 0x69729B19, 0xDE80FE64, 0x0E92603E, 0x6462FD1A, 0x5E43387B, 0x16CE5095,
    0x1C1D91E8, 0x28396A40, 0x9C0757E0, 0x100BB0C3, 0xD3056247, 0xD636AC42, 0x9BD154B1,
    0x55B2BEDE, 0xA4E0E17A, 0xA2C6B4F7, 0xE4A661EE, 0x4E53EB85, 0x28692074, 0xCEB6B5C8,
    0xA8DF82CF, 0xB468289A, 0xC0991B05, 0xD0CC678B, 0x5B3B6563, 0x29B0ACB0, 0x55AC933D,
    0x4E007402, 0x895160B9, 0x7236AAF8, 0xF9430F75, 0xF2E18863, 0x06BCC858, 0xCABD7541,
    0x5430FD48, 0x8AF3B63B, 0x42614D5A, 0x6D2DB816, 0xAFDDBBB5, 0x31307190, 0x025623A4,
    0xBC051300, 0x0981064C, 0x11A2A344, 0xCAD47B98, 0x0894FE1F, 0x414642B9, 0x82CF5956,
    0x3E1AA8FE, 0x7B8D147C, 0x2629A1EE, 0xB8DD0A68, 0x7702603B, 0xABB78CE5, 0x5B18A747,
    0x600A3515, 0xC07E0F06, 0x2B907C63, 0x46D58848, 0x7E1220F6, 0xF8D304C7, 0xD291CD70,
    0xFC9288F4, 0xD479AF41, 0x4A3E174A, 0x10165342, 0xD8B702DB, 0x633958C5, 0x42D3ACFC,
    0x3B5282EF, 0x07F1C0DE, 0x2A63B0B0, 0x8D13C6C4, 0xEE8F86E2, 0x5B0D2361, 0x138F63CD,
    0xC34172E8, 0x83F0C7B5, 0x11B0E848, 0x8393B629, 0xCAD8BF00, 0x52B18657, 0x8A8106F8,
    0xE6A3005A, 0x24FC40A8, 0xBC0DD7E0, 0x7880CCC1, 0x75162F8C, 0x23E51B0E, 0x1C739B79,
    0x2AC5D246, 0x6AB5BEE6, 0x354EC0F6, 0x2F88048C, 0x5893E089, 0xAFA07406, 0x146D42F2,
    0xD68500FA, 0xB11A01C6, 0x105804E8, 0xC6FA860F, 0x23E1EC84, 0xB3CF347F, 0x7E2F99A8,
    0x9503172C, 0xF4565139, 0xC831CD50, 0x61008686, 0x15B92988, 0x8D55AA74, 0x8A2C0295,
    0x8742B90C, 0x6441F6A1, 0xC904C6F8, 0xBB325252, 0x4ABD0828, 0xB51DE42F, 0xB6DFC4C2,
    0xAE1325F0, 0x76C7D8DA, 0xB07E529D, 0x2A44046C, 0x0772910F, 0x4435BD91, 0x3334C58F,
    0xD8A4CB5E, 0xEAD094AC, 0x885E83D0, 0xB007A350, 0xB00A6E31, 0x460D3838, 0x19DDBA76,
    0x7BB42F00, 0x45E25905, 0x2661F660, 0x3DAF35A6, 0xCA20A35A, 0x051F8826, 0xF4198AD6,
    0x041883E4, 0x147700DE, 0xE94956DC, 0x68567019, 0x3C37755B, 0x5B000185, 0x71306409,
    0x632B546E, 0x724E9BCD, 0x82CD4237, 0xB26B8676, 0xAA84C7F2, 0x7615D251, 0x13027E39,
    0xE86319CE, 0x2FA79670, 0x4181AA00, 0x7161A875, 0x3DB10D4B, 0xF5974AE4, 0x275CC7AC,
    0x591DCD56, 0x9ADFC66A, 0x30A4C730, 0xDF471E40, 0xE2AD2D58, 0x45255D5D, 0x3A872DC0,
    0x9DB0650A, 0x69684C6A, 0xB85CD909, 0xE635C5C8, 0xE49A8F5A, 0x7C3D109A, 0x94240744,
    0x54B9039D, 0x9262FC4A, 0x45527594, 0x5BE51EE5, 0x2377E204, 0xEEDD4784, 0xDE438B42,
    0x11A8B013, 0xAE1A676C, 0xA6F26219, 0x59AD4D43, 0x7CD4558F, 0x265E3F4C, 0x3E34210F,
    0x6335D913, 0xBD17E30B, 0xEDE537BA, 0x059F8A40, 0xA519D7E2, 0x07F3DDDF, 0x8804A353,
    0x0CC08846, 0x7DC75AA3, 0xEB40F6C8, 0x5C4DEB11, 0x9232F106, 0x8BE50C3F, 0x67618287,
    0x8365A709, 0xF8F73CC4, 0x49BBF62D, 0x3F479599, 0x95A17C3F, 0x3807091D, 0x40F5F242,
    0x310C7C24, 0x9ED934F0, 0xEFA9A933, 0xE40C8490, 0x76C64B64, 0xEEEE603C, 0x4D6F9DB2,
    0x896C09CF, 0x91A0FE3F, 0x99ED104D, 0x89145DF6, 0xCAA74C91, 0x1AD12DEB, 0x3471DCBD,
    0x0F10904A, 0xFE7F267E, 0x6AA41C5D, 0x9F2E74BD, 0x620A2672, 0x1C7A0A2E, 0x1A07614E,
    0xD33F82F9, 0x317405BF, 0xCF9B418A, 0xA1579512, 0xBAF8922F, 0x600D50C9, 0x8C0C8298,
    0x28F8CE03, 0x02C0F406, 0x70F698A3, 0xBD6A2726, 0x2718FB89, 0x221F0981, 0xA3E84F0F,
    0x4041740F, 0x4172120B, 0x39E36C99, 0x75923151, 0x805F8CE0, 0x8138208E, 0x4041F417,
    0x52B59A63, 0x9431C799, 0x21109870, 0xD838BBC8, 0x42641F80, 0x56264B40, 0xEA0B1749,
    0x87712507, 0x26824278, 0xDB5542C4, 0x1591579E, 0x55085B27, 0xA8331D38, 0x43242C82,
    0xAD16AB55, 0x683E1919, 0xC328070A, 0x80B55436, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( Appjackplugsm )
    EW_BITMAP( Appjackplugsm, Default )
EW_END_OF_BITMAP_RES( Appjackplugsm )

/* Table with links to derived variants of the bitmap resource : 'App::jackplugsm' */
EW_RES_WITHOUT_VARIANTS( Appjackplugsm )

/* Initializer for the class 'App::RBUProgress' */
void AppRBUProgress__Init( AppRBUProgress _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppRBUProgress );
}

/* Re-Initializer for the class 'App::RBUProgress' */
void AppRBUProgress__ReInit( AppRBUProgress _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::RBUProgress' */
void AppRBUProgress__Done( AppRBUProgress _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppRBUProgress );

  /* Release all used strings */
  EwReleaseString( &_this->errmsg );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::RBUProgress' */
void AppRBUProgress__Mark( AppRBUProgress _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::RBUProgress' */
EW_DEFINE_CLASS_VARIANTS( AppRBUProgress )
EW_END_OF_CLASS_VARIANTS( AppRBUProgress )

/* Virtual Method Table (VMT) for the class : 'App::RBUProgress' */
EW_DEFINE_CLASS( AppRBUProgress, XObject, "App::RBUProgress" )
EW_END_OF_CLASS( AppRBUProgress )

/* Initializer for the class 'App::PtrClass' */
void AppPtrClass__Init( AppPtrClass _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppPtrClass );
}

/* Re-Initializer for the class 'App::PtrClass' */
void AppPtrClass__ReInit( AppPtrClass _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::PtrClass' */
void AppPtrClass__Done( AppPtrClass _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppPtrClass );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::PtrClass' */
void AppPtrClass__Mark( AppPtrClass _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::PtrClass' */
EW_DEFINE_CLASS_VARIANTS( AppPtrClass )
EW_END_OF_CLASS_VARIANTS( AppPtrClass )

/* Virtual Method Table (VMT) for the class : 'App::PtrClass' */
EW_DEFINE_CLASS( AppPtrClass, XObject, "App::PtrClass" )
EW_END_OF_CLASS( AppPtrClass )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppLargeDisableCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::LargeDisableCheckBox' */
void AppLargeDisableCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 45 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const02A0 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, CoreLayoutAlignToLeft );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const037E );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const037F );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &AppDisableCheckboxBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const02A1 );
}

/* Table with links to derived variants of the auto object : 'App::LargeDisableCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppLargeDisableCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( AppLargeDisableCheckBox )

/* Bitmap resource : 'App::DisableCheckboxBitmap' */
EW_DEFINE_BITMAP_RES( AppDisableCheckboxBitmap )
  EW_BITMAP_FRAMES( AppDisableCheckboxBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 36, 36, 0 )
    EW_BITMAP_FRAME( 1, 0, 34, 5, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 34, 2, 0x00000424, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 34, 5, 0x000006B0, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppDisableCheckboxBitmap, Default )     /* ratio 18.03 % */
    0x0409FF00, 0xBF1ECF50, 0x917EB77F, 0x53E927FB, 0x22817FB3, 0x91288305, 0x1788C4E2,
    0xC8B4622B, 0x8D47A371, 0xEC8A3320, 0xC8E49218, 0xA24B278F, 0xA110E864, 0x0F057FC2,
    0xE007FC0A, 0xFF7DBC5D, 0x66526D1C, 0x9FCAE7B2, 0x1CA6832A, 0x516853EA, 0xEA8940A2,
    0x671369E4, 0x930B5EAD, 0xB52A9D1E, 0x48AB51AA, 0x3ACD6AAF, 0x44C2E9F1, 0xDD518E98,
    0xD96B963A, 0x92D158B3, 0x9929A465, 0x0B1BB35A, 0x8FF62255, 0x6F61A510, 0x88DDA6F3,
    0xBD3152E8, 0x0592F764, 0xBC97E914, 0x79B8B658, 0x1B6B4563, 0xF093423D, 0xB81B860A,
    0xCB4EA462, 0x663315FA, 0x47A01BCE, 0x064DC8BE, 0xE122794C, 0xF34EF060, 0xDB600999,
    0x4A857936, 0x2F56C2B9, 0xA46124D0, 0xC5024EF3, 0x65329FCC, 0x26B180E8, 0xE9C48BFC,
    0x1B93A36C, 0x630F0D3D, 0x07D0D620, 0x4F36E372, 0xD7572912, 0xFD2F29F6, 0x67A8D32F,
    0x4B2D96FF, 0xCD3A2B17, 0xBD8290E1, 0x3B6D0D38, 0xCDAA7969, 0x7ACF9003, 0xDCC6757A,
    0x94FCAF72, 0x64BFDA4A, 0xDF4275C0, 0x769DF240, 0xB8CA4603, 0xC0611697, 0x79E03378,
    0x21084604, 0x51F9F64D, 0xE4E12F0B, 0xD42A8A16, 0x31CC63FC, 0x1BF238E6, 0x383C043A,
    0xD227849F, 0x0A1E1184, 0x3D11260E, 0xE26215A7, 0xA005028C, 0x80F2368D, 0xE6310BF1,
    0x2ACA159C, 0x0C13FCD5, 0xF22CE531, 0x34EC33CC, 0x2984E340, 0x24881002, 0x5EC0ECC1,
    0x5461DC8B, 0x2C92449B, 0x236B24D9, 0x3CA3700A, 0x8C931844, 0xA2813D3A, 0x10FF34CA,
    0xCE2359C3, 0x03CEB338, 0x0918165A, 0xF69C3530, 0x9DB9950D, 0x71961DA6, 0x005338A2,
    0x4CA0CDF6, 0xC3FCEC33, 0x2DFE29C9, 0x973A4CC3, 0x9F40688C, 0xCC55CA4C, 0x83D1A70A,
    0x3125A5E7, 0x7A1E87E8, 0xA4001260, 0xCB92E64D, 0x82E03936, 0x80AA368B, 0xC16D9F2A,
    0x9569807C, 0x1A751195, 0xA2107E18, 0xFAAA008D, 0xAB932BA9, 0x064C224A, 0xAB17EAAF,
    0xC112504F, 0xF2B9A7A9, 0x80936BBA, 0x070BE240, 0xEC3B46C1, 0x90CE504F, 0x7ECB96EC,
    0xD2098C16, 0x6E6DEAC2, 0x4E5314C5, 0x97CAD70E, 0xC8F1364D, 0xDD3E5180, 0x54ADFB0A,
    0x2682A49E, 0x9390C431, 0x62A0B2EA, 0x943C4D83, 0x364B12A0, 0xF02BB4FD, 0x12B0A2B0,
    0xB0D033A4, 0xF8B94973, 0x384E140E, 0x4B2234F5, 0x6BB8E02E, 0xB4A49E31, 0xCA7FCD62,
    0x3788D3A4, 0x68F3D0DE, 0x8C96CAC3, 0x40E0932D, 0xC22F074C, 0xB4F17394, 0xF1948F30,
    0x8320C6C6, 0x5CD722CE, 0x249C0F03, 0x96B3EC9F, 0xF213765D, 0xF98CC515, 0x1564BBF2,
    0xCD33241C, 0x91C8E3AC, 0x70FB5E49, 0x2388323D, 0x5C943D4E, 0xF4C825DB, 0x33CCC0F0,
    0x716D1CED, 0x33FE8827, 0x74EE34CD, 0x3D896232, 0xB6C8F817, 0x4C35DAEB, 0xC235A73F,
    0x4C013FF0, 0xD133832D, 0xC0CFE3B8, 0x8A325D66, 0x5354FE33, 0xB5E53BCD, 0x9521ACBD,
    0x82C1D30C, 0x2C71D112, 0x49338AAE, 0x00F6390E, 0xEC330C81, 0xD89B7768, 0xCFFAF91E,
    0xD334A124, 0x08EFE18F, 0x94CFB957, 0xB40CF288, 0xDA73FF31, 0x7B5F9315, 0xB0563DB9,
    0xED3DCE5C, 0x36962582, 0xE0E3CCDB, 0x1215F2EA, 0xF2DD0819, 0xABA7EC70, 0x37CBD2F7,
    0xCC55F40A, 0x445B8021, 0x8024710E, 0x2A3064FA, 0x30A4FF54, 0x0C096832, 0x2030E130,
    0x7C78376A, 0xA0344A82, 0x3651272F, 0x2267AACD, 0xE8BE7583, 0xC4FE44BD, 0xE37C840F,
    0x2E4B7F97, 0x288398DC, 0xFB9FE154, 0xD0224AC9, 0xB66B1030, 0xDC892527, 0xD1EE7629,
    0xE0AC4613, 0x8FFDE83C, 0x4508781B, 0x3487DA7F, 0x22482491, 0x04129878, 0x06123847,
    0x877A43DD, 0xA029C4F0, 0x1A16C1C1, 0xF3B185D0, 0x383B0C1D, 0xC5B1B143, 0xE1A95E2D,
    0x9258770B, 0x29A42C84, 0x0E89D939, 0xEE443849, 0xF11FE52C, 0x584E0790, 0xE47F9313,
    0xA32E1822, 0x519C2844, 0x47BA2AC4, 0xA27C548A, 0x9AC89ACB, 0x00000080, 0xD8740100,
    0xB71B0001, 0x94A4FF70, 0x01AFF3D1, 0x04FF220A, 0x903888EE, 0x168944E2, 0x58DC6233,
    0x8EC5E391, 0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884, 0x01128441, 0xEE06DB5C,
    0x4715841F, 0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419, 0xCE73378C, 0xA332D9AC,
    0xFE732F12, 0xCE97338D, 0x58988022, 0x9AD55E07, 0xADD76095, 0x0D8AB95E, 0xD9AC164B,
    0x9EC768AF, 0x5CF5FB55, 0x9EFF763A, 0x94D8C546, 0x188809C1, 0x5B4DC2DD, 0xBEDAEF96,
    0x1E03036C, 0xDFB0B7FC, 0xA1CD5AC3, 0x41D1975B, 0x0D46228A, 0x184C960B, 0x96C9E571,
    0x6BE66B29, 0xCFE66AD4, 0x1E5F4398, 0xE97459BD, 0xAB4F21A3, 0xF59A4D06, 0x7D9CD36A,
    0xBB4D867A, 0xB6D7ED75, 0xECEDFF73, 0xBF6DF7BA, 0x09938257, 0x6F87857E, 0x1E8BB1DD,
    0x263CCDC7, 0xB7C1E1F1, 0xDC461F11, 0x64EBEFF8, 0x7E6F6379, 0xE97139FB, 0x1711FFC1,
    0x707A9C1F, 0x5B97D550, 0x7B7C8ED6, 0xC7D1EF66, 0xFF3F0FCB, 0xE62BF90A, 0xCC17AB8B,
    0xC27B7B9E, 0x9E015DF0, 0x67DDF57D, 0xA5D38160, 0xFD58DEE7, 0x001FF7ED, 0x20780E01,
    0x426DC17D, 0x5209181C, 0xF986A048, 0x6CA0F759, 0x5CC7F91E, 0x686A0884, 0x38247061,
    0x190F1C17, 0x7DE2E86E, 0xE0D71E1D, 0xA891A482, 0x9C5784E1, 0x938A4578, 0x8E22D755,
    0xDB982A30, 0x28F61F8C, 0xBA2577DC, 0xBA8F23A8, 0x925E58F9, 0x1EB8AE41, 0x66163488,
    0x2DF58BE3, 0x2B8420E9, 0x182498FE, 0xA5572A53, 0x2740578A, 0x69C49420, 0x4E5AA639,
    0x712597E2, 0xE446524C, 0x77C64788, 0x6E289BE3, 0xC1975EF9, 0x6D679861, 0x2659EE73,
    0x089A7792, 0xFE6B9EA7, 0x8391A817, 0xA1A589DA, 0xA929167F, 0x5A2D5D88, 0xA64095D6,
    0x94A26879, 0x97296A26, 0xA8599E8D, 0x8A4E9B92, 0x520CA9A8, 0x6E9F2009, 0xAA26AA8E,
    0xD83A76B0, 0x07A264A7, 0xCAA78EE9, 0xA8726BAA, 0x9FAAC8D5, 0xEB9A72B8, 0x198AA9B0,
    0x0AC7B12B, 0xC96CEC6B, 0xA7ABBB36, 0x2CEB3EAA, 0xAAD2B2B2, 0x9ED7B4EC, 0xDCB62D66,
    0x46272B4A, 0x9155E176, 0x6B518C62, 0x917EB66E, 0x0963D8DB, 0x1211942D, 0x8FF1C85C,
    0x4B76E7BA, 0xCAF0BAAD, 0x2FBB974B, 0x7B1384D9, 0xF01AAB00, 0xBC1702B2, 0xF4FF526C,
    0xDE36931B, 0x432ED388, 0x7066418E, 0x3C5303AF, 0x4529C571, 0x0C3FF0FC, 0xC7CFFC3B,
    0x00040400, 0xD8740100, 0x39DC8001, 0x9CA8FF75, 0x830FF3D9, 0x04FF268C, 0x903888EE,
    0x168944E2, 0x58DC6233, 0x8EC5E391, 0xD48A3F20, 0x48E49218, 0x3A53268F, 0xA190A884,
    0x01128441, 0xEDE6CB54, 0x4816049F, 0x59DCA252, 0x9EC9E792, 0xD50A7F40, 0x50E89419,
    0xCE73378C, 0x4C8519AC, 0x7D50A31E, 0xB52A2D46, 0x47ABD52A, 0xFA6BFEB1, 0x2209C194,
    0x0D8AB353, 0x58EAD64B, 0x3E2B65B3, 0xED246150, 0x44068AD9, 0x2047F8FC, 0x78B70F84,
    0xA8A806D1, 0xBC9044A0, 0xE60AD15A, 0x131E4380, 0x09BC652C, 0x1E863291, 0x05771001,
    0xF13C9E07, 0xFD238BC2, 0xE3C9D8E6, 0x1A86800D, 0x1DBF24E4, 0x0EC393AD, 0xF34C0078,
    0x001AC7F9, 0x6E85D7A9, 0x4F52F124, 0x801E07C0, 0x20DC6349, 0x3FBF8943, 0x8EB181C0,
    0x09071A98, 0x89B23A81, 0xB4FA5DCE, 0x01C340C4, 0xAA5E8F44, 0x491AA4BA, 0xBE5BECBA,
    0x278E449C, 0x8F8900FF, 0x7475BD35, 0xBC761B00, 0x3B8D0E40, 0x52F29365, 0xBE6D58EF,
    0x11F2C47E, 0x2497E94F, 0xE6198A64, 0x0400B528, 0xE1F4FF15, 0xE09D1F87, 0x0B7D9D27,
    0x0F01B712, 0x8CA44837, 0xA071BA7B, 0x2A0C4D43, 0xD56B61A8, 0x14C7E29D, 0x1CC1C461,
    0xF158420C, 0xEC781D0F, 0x7F7008E1, 0x7DE1B010, 0x1126B619, 0xA5A6141E, 0x15F23D03,
    0x3C8362F2, 0x288017E2, 0x460290A2, 0x41F47119, 0x5C440C56, 0x711B0FF1, 0x2248B1DC,
    0xE3B03650, 0xC078008E, 0xE81D4103, 0x357BDED0, 0x448F544A, 0x63194C92, 0x100A2C44,
    0x10A5284A, 0x871F4741, 0x1082F4A4, 0x4713FC55, 0x82347A1D, 0x880F9DC8, 0x009EE309,
    0x0D4396A4, 0x25D37DF2, 0xB0E94097, 0x8E6140DD, 0x0198E3D9, 0x0CCA5754, 0xC8D2147D,
    0x20F8293F, 0x0C827845, 0x068B0972, 0x4468B9E8, 0xC4108C05, 0x48E1C80A, 0x46A76EA8,
    0x7D1FA164, 0xA7801002, 0x6B21760A, 0xAAD45B0E, 0x028AAC0A, 0x1F0E4200, 0xAFEA8A0C,
    0x4600E944, 0x80087F9F, 0x7EC79F2B, 0x3D07A7DA, 0x802BE064, 0x2564EEA9, 0xAABEAD11,
    0x6E54B268, 0xCF070360, 0x552D1B76, 0xED80CE56, 0xC67A0CB5, 0x02DE0983, 0x74592E9B,
    0xB8C39BB4, 0xC9E6B6C8, 0xB5EC32BC, 0xE6EB3E43, 0x2C48EDFB, 0x1CA71100, 0x6E4ADF00,
    0xC00304BC, 0xEC94C1C9, 0xFD1884E0, 0xBEEEABE8, 0x4450C929, 0xA220FF16, 0xC0972308,
    0xB382ACAB, 0x1308DC74, 0xED01BC5D, 0x54A724C3, 0xFC5B11C3, 0x841F87A3, 0xCBCAA234,
    0xB1BC0E9D, 0x22BDD1CC, 0x7C742C8B, 0x0E4306D1, 0xC9D50C8F, 0x2743FC5A, 0x62648B20,
    0x27349E74, 0x6574705D, 0x2B0AC2A6, 0x47C1C457, 0x2BAF3D9B, 0x1081C531, 0x50238882,
    0xD2A52226, 0x8B2CDE3C, 0x4D94B40C, 0xBE65C689, 0x800F0AEC, 0xCF891224, 0x03F0AAEB,
    0x22489081, 0xBA2C2749, 0x1A79F608, 0x3E6F6B9C, 0xB0D0F58F, 0x6DEE9369, 0xDF37005F,
    0x8C210322, 0xD54FE250, 0x8370815A, 0x6254FE13, 0xF3867939, 0x3D08C089, 0x0ED83074,
    0x6C6AB474, 0x62EC00E6, 0x0C77103A, 0xB63EC8D2, 0x0073D6E1, 0xC1B3FE56, 0x73F44C0C,
    0x91C2EDC9, 0x51B69D1E, 0x0EADFB70, 0xB1AE8857, 0x015BC42E, 0xF4F7CEC6, 0xFF10D5EC,
    0x860A89A0, 0xC07CCB4B, 0xE0803F07, 0x26D50F30, 0x0AF6C66B, 0x1002502C, 0x522E4087,
    0x90918468, 0xA83C956C, 0xCC447E20, 0x1AA9E0CA, 0xC5B033F0, 0xE1E06317, 0xADE00FC2,
    0xE87251CF, 0x072547A9, 0xFE952A7F, 0xF4B8F206, 0xF0414100, 0xB0030353, 0xCC3085D0,
    0x88420661, 0xD77EDC02, 0xE0DD079E, 0x8822563C, 0x31050469, 0x224A18F7, 0x199ED856,
    0x06859014, 0x410641E2, 0x7F00E090, 0xD081A135, 0x2A5B4B28, 0x742CB759, 0x8F81EF0F,
    0xC2703D05, 0xC1D86504, 0x87F0F21E, 0x580AF119, 0x22C3B856, 0x6D2D6B3E, 0x7D118AE1,
    0xA22044B8, 0x58FF25A4, 0xD2704D8A, 0x51122AC4, 0x07F9492A, 0x0E11B836, 0x20E4148B,
    0x1A82B8FF, 0x1A01B48C, 0x57898FE4, 0xCA456344, 0x1A311E08, 0x0C5E25E9, 0x00000008,
    0x00000000

  EW_BITMAPS_TABLE( AppDisableCheckboxBitmap )
    EW_BITMAP( AppDisableCheckboxBitmap, Default )
EW_END_OF_BITMAP_RES( AppDisableCheckboxBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::DisableCheckboxBitmap' */
EW_RES_WITHOUT_VARIANTS( AppDisableCheckboxBitmap )

/* Bitmap resource : 'App::DisableCheckboxSmallBitmap' */
EW_DEFINE_BITMAP_RES( AppDisableCheckboxSmallBitmap )
  EW_BITMAP_FRAMES( AppDisableCheckboxSmallBitmap, Default, EW_DRIVER_VARIANT_RGBA8888, 20, 20, 0 )
    EW_BITMAP_FRAME( 1, 0, 18, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 18, 1, 0x0000027C, 0x00000000 ),
    EW_BITMAP_FRAME( 1, 0, 18, 2, 0x00000468, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppDisableCheckboxSmallBitmap, Default )/* ratio 37.08 % */
    0x8B81B900, 0xABD48957, 0x4D06FF6B, 0x502FF61A, 0x1F0D60A4, 0x90E88446, 0x138AC4A2,
    0x78DC6233, 0x8845A3B1, 0xFB092482, 0xB4D529D7, 0xBDBCD97F, 0x95AA2523, 0x611E8D35,
    0x9349947E, 0x359B4CE3, 0xF9327A25, 0x9C48E42F, 0x3BF9811C, 0xBF588964, 0x02633790,
    0x68D4498D, 0x414B7EC5, 0x1339CC8A, 0xC5602410, 0xB712F978, 0x68291306, 0xFD52A2EF,
    0x31D308A7, 0x7974B87E, 0xD1E7F433, 0xF715482F, 0xCFEA8D89, 0x8E42562A, 0xC0006582,
    0x68334017, 0x4270A6EC, 0x5CDE2D25, 0x253A8F89, 0x178B97D3, 0x017D3B38, 0xEDA48A44,
    0xC1482040, 0x860E5D08, 0x6045B0EF, 0x5C3D00FD, 0xDF74B913, 0x29DAD56A, 0x1A6AA501,
    0x388F9C3B, 0xCB97BB29, 0xFF3937D7, 0xCD300772, 0x60235057, 0x4307442D, 0x586659E7,
    0x037853CC, 0x802FFDC8, 0x4439C2B4, 0x88ED4AB1, 0xB77C3253, 0x65B1DB1C, 0x3FF2B2AB,
    0x10917E8D, 0x5D99AC0D, 0x6281C57F, 0xAAE7F78E, 0x79BBE612, 0x4E962B17, 0xD75A2C07,
    0x5FDB30F8, 0x4C213940, 0x4E05D97A, 0x08154A7A, 0xBCC15591, 0x39300936, 0x6F20E728,
    0x0BF2307F, 0xD3010E05, 0x6549810D, 0xED301398, 0x338A7264, 0x5A683C3A, 0x1360B92C,
    0x60DE5D82, 0x89715638, 0x2F4B975D, 0x6221F0E0, 0xD33CCF69, 0x9C9C154E, 0x06618D12,
    0x4E23D8AE, 0x1B327491, 0x6388C02F, 0xF4CC7EC7, 0xF05F6337, 0x3BCD5349, 0x1AD27C50,
    0x17162A3C, 0xE8CA2789, 0xE4308BE3, 0x779DD1C8, 0x0C12E5BC, 0xF3302138, 0xC05539CC,
    0xCF7C1917, 0x100EF34C, 0xCD82C4A7, 0xA8F9483C, 0x209A2321, 0xC4308FC3, 0x9A876394,
    0x21326610, 0x27B1488A, 0xC57D1412, 0xD6359A67, 0x2A0383C4, 0xDAF364B2, 0x8225318F,
    0x10FD3189, 0x86398C73, 0x24C898CC, 0xD15068C4, 0x08213185, 0x00BF5B4F, 0xC52FA331,
    0x51043390, 0xE94584C5, 0x043D5047, 0xF26064C9, 0x02789E05, 0x3CD987A6, 0x0BF2447F,
    0xF2FD910E, 0x9814394B, 0xAC350AB2, 0x43094214, 0x17243E55, 0x06F88466, 0x44CD791C,
    0xEC66207B, 0x10CC2B38, 0x8ACB2CA4, 0x530C9521, 0x72BE86AB, 0xE73A1C26, 0xB39C6B69,
    0x8828F6D0, 0x22989A44, 0xBAF89D8D, 0xD0579C5B, 0x2388B3FC, 0x0A02909A, 0xB424D42B,
    0x22B3BE50, 0xFF4F933C, 0x3FCD1BD4, 0x0A425C94, 0x0001012C, 0xFAD55900, 0x1346C955,
    0x7C04FF32, 0x400FF1E0, 0x1F0D1D87, 0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1,
    0x44303C01, 0x3FCB4401, 0x9174AF53, 0x6104C1B2, 0xEA893B99, 0x69F48215, 0x3F0D8008,
    0xB9CCDC38, 0x9F4E2753, 0x1CF67F3C, 0xD068B42A, 0x443940A3, 0x05879311, 0xDC99451F,
    0x25F230BD, 0x857FC8A1, 0x09B28D28, 0xAFD7ABA0, 0x1D8AC360, 0x58ECB64B, 0xA9A8CE64,
    0xA3757010, 0xE370B350, 0x42AB95CA, 0x148E0185, 0xEBDDCEDF, 0x16DF8A95, 0xE01F0248,
    0x5DEEB5FB, 0x12F50D8F, 0xB1A56B36, 0xB7902B92, 0xC80C9955, 0x7C10952F, 0xCC4DE30D,
    0xC6D8F173, 0x16808E56, 0xBFCAF907, 0x3F4AF9D2, 0xAE22ACB3, 0x3D43C466, 0x1A500D77,
    0xA5706948, 0x053E95F9, 0x7EE8173A, 0x194995A5, 0x006BC28E, 0x723FAFB0, 0x76B8B9D6,
    0xFDA56F69, 0xA5A49695, 0xD82C047A, 0x158E802F, 0xD03374BD, 0xDDDB902F, 0xE82E5B1C,
    0x83A3B723, 0xBDA4C456, 0xE259B182, 0xAB0D0053, 0xCAC869F4, 0x90004B2C, 0xCFE2A35C,
    0xDB968D8E, 0xF131ED74, 0x55965CDE, 0xA5161D80, 0x1986882C, 0xDFC01610, 0xE7FDB078,
    0x81A379D5, 0x9A694FB6, 0x0445A754, 0xC5F579B2, 0x60FC0888, 0x1DE20122, 0xB4795CA6,
    0x641B6641, 0x1BA641B8, 0x61409A64, 0x2E2104E3, 0x395B9FD6, 0x0185564D, 0x1DD281A5,
    0x9759D464, 0x5E3B8863, 0xA579D8A4, 0x81E051ED, 0x6498E647, 0x69459D5E, 0x2E535C25,
    0x6596E577, 0x431217F5, 0xE5C5354B, 0x22956098, 0x84142FCB, 0x26491104, 0x544891E9,
    0xE135A968, 0x39D59A5D, 0xDE749D9E, 0x7C9E67A9, 0x61A7E9CE, 0x0909A266, 0x338CA927,
    0xFC560EC2, 0x781C86B3, 0x55553290, 0x1E44316C, 0x58AE946C, 0xA98846A9, 0x3C08CFF9,
    0x1D86EA24, 0x1012C07D, 0x1AE16100, 0x94072956, 0x8006FF33, 0x400FF1F0, 0x1F0D1D87,
    0x90E88446, 0x138AC4A2, 0x78DC6233, 0x8845A3B1, 0xF8F03C01, 0x970862B7, 0xF568AB7F,
    0x09835522, 0x611E8D19, 0x9349947E, 0x359B4CE3, 0xF230BE25, 0x91009FE5, 0x4BFA3F39,
    0xBF480240, 0x2A712390, 0x4151898D, 0x750E7ED1, 0x512A6540, 0x54A487C0, 0x51D0726F,
    0x3B9ACC2C, 0x90E84A6B, 0xD6402EF2, 0xA01CFFA0, 0x8BAFC210, 0x00863619, 0x2901C070,
    0x37A5BEEA, 0xBB93FA3D, 0x0F0018A3, 0x1800323D, 0xA350E00C, 0x04585349, 0x6F0F12B9,
    0x8E2E0B46, 0x06730BE8, 0x83C21D8E, 0x20392049, 0xBE210737, 0x94731CF8, 0xE60D79DA,
    0x5D2984D3, 0x0664A4F2, 0x70EC2E12, 0xE481785A, 0x7236DB9E, 0x4D400708, 0xBE0B6E78,
    0xDD3344E8, 0x8EAFEEFA, 0xFC01BC29, 0xD1401E5B, 0x6E3949A3, 0x6ED2F92C, 0x587C11F6,
    0xD3B1B0C6, 0xE4E73BA6, 0x6DF04973, 0x59EF7156, 0x6F1A3BE1, 0x7744A1D0, 0xFE7B3B72,
    0x856280E8, 0xF8331F0B, 0x1BFF240B, 0xF43822B8, 0xDB15E168, 0xB0E43A07, 0x65A881DF,
    0x72050330, 0x800DD0E9, 0x50F79E10, 0xF0F42B3B, 0x9E080E84, 0x731905C6, 0x37A0D084,
    0x2225E611, 0x90C0185A, 0x905E3E04, 0x191F06A1, 0x2408D662, 0x18A15493, 0x38498D16,
    0x94FF8862, 0x613DC4A8, 0x1D8741A4, 0x5FA90499, 0xF72D838B, 0x6492004F, 0x311409F2,
    0x3C05C11C, 0x41980238, 0x63E84A0C, 0xC8781BC6, 0x912446D1, 0x871A877C, 0x08A08483,
    0xE1549924, 0x2C016A1E, 0x4026C932, 0x19C54108, 0xE01520F3, 0x50A81159, 0xE4703F04,
    0x8365C7F1, 0x099C96ED, 0x95B8303F, 0x27A56637, 0x9C500F17, 0x9F269A89, 0x1083828C,
    0x4EC1A056, 0xD4C63748, 0xF4430A00, 0x871FC773, 0x026085C4, 0x41A0E81D, 0xB70E0F45,
    0xEC1B9403, 0x72864400, 0x10C851E4, 0x4420940A, 0x044E3671, 0x697556D5, 0xE160E5E6,
    0xAD5FF5F1, 0x4003CD51, 0x966038AA, 0xE4147E05, 0xAC150470, 0x4302201C, 0x177A8651,
    0x85C99E07, 0xEC1C6FC3, 0x54B01E40, 0xB38EC0E9, 0x43910C3C, 0x3022CC11, 0x8D530F82,
    0xD968A728, 0x706D9686, 0xE957990F, 0xF43E47BC, 0xA2CF018E, 0x3F09E725, 0xBD273164,
    0x131C02D1, 0xF1583C09, 0xE4731B4F, 0x4A0CCA41, 0x08109188, 0x712BFC3D, 0xC50247C0,
    0xE071BFAF, 0x012C0801, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( AppDisableCheckboxSmallBitmap )
    EW_BITMAP( AppDisableCheckboxSmallBitmap, Default )
EW_END_OF_BITMAP_RES( AppDisableCheckboxSmallBitmap )

/* Table with links to derived variants of the bitmap resource : 'App::DisableCheckboxSmallBitmap' */
EW_RES_WITHOUT_VARIANTS( AppDisableCheckboxSmallBitmap )

/* This autoobject provides one of the default customizations for the 'toggle' widget 
   (WidgetSet::ToggleButton) in its medium size variant. With this customization 
   the toggle button appears as a 'check box'. */
EW_DEFINE_AUTOOBJECT( AppDisableSmallCheckBox, WidgetSetToggleButtonConfig )

/* Initializer for the auto object 'App::DisableSmallCheckBox' */
void AppDisableSmallCheckBox__Init( WidgetSetToggleButtonConfig _this )
{
  WidgetSetToggleButtonConfig_OnSetLabelOnColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOnColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorActive( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorFocused( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDisabled( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelOffColorDefault( _this, _Const0000 );
  WidgetSetToggleButtonConfig_OnSetLabelMarginLeft( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetIconOnTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintActive( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintFocused( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetIconOffTintDefault( _this, _Const029F );
  WidgetSetToggleButtonConfig_OnSetIconMarginLeft( _this, 40 );
  WidgetSetToggleButtonConfig_OnSetLabelAlignment( _this, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetLabelOnFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetLabelOffFont( _this, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  WidgetSetToggleButtonConfig_OnSetIconAlignment( _this, ViewsImageAlignmentAlignHorzCenter 
  | ViewsImageAlignmentAlignVertCenter );
  WidgetSetToggleButtonConfig_OnSetFaceLayout( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDisabled( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnFrameDefault( _this, 2 );
  WidgetSetToggleButtonConfig_OnSetFaceOnActive( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnFocused( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDisabled( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOnDefault( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDisabled( _this, _Const0380 );
  WidgetSetToggleButtonConfig_OnSetFaceOffTintDefault( _this, _Const037F );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameActive( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameFocused( _this, 0 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDisabled( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffFrameDefault( _this, 1 );
  WidgetSetToggleButtonConfig_OnSetFaceOffActive( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffFocused( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDisabled( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetFaceOffDefault( _this, EwLoadResource( &AppDisableCheckboxSmallBitmap, 
  ResourcesBitmap ));
  WidgetSetToggleButtonConfig_OnSetWidgetMinSize( _this, _Const0381 );
}

/* Table with links to derived variants of the auto object : 'App::DisableSmallCheckBox' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDisableSmallCheckBox )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDisableSmallCheckBox )

/* Initializer for the class 'App::KeypadChangePopup' */
void AppKeypadChangePopup__Init( AppKeypadChangePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppKeypadKey__Init( &_this->KeypadKey, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey1, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey2, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey3, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey4, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey5, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey6, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey7, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey8, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey9, &_this->_XObject, 0 );
  AppKeypadKey__Init( &_this->KeypadKey10, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->AcceptTimer, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->StarTimer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->accept2, &_this->_XObject, 0 );
  AppWritable__Init( &_this->Writable1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny3, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->DenyTimer, &_this->_XObject, 0 );
  ViewsText__Init( &_this->deny4, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppKeypadChangePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const050F );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0153 );
  CoreRectView__OnSetBounds( &_this->KeypadKey, _Const0154 );
  EwRetainString( &_this->KeypadKey.NumProperty, EwLoadString( &_Const0155 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey1, _Const0156 );
  EwRetainString( &_this->KeypadKey1.NumProperty, EwLoadString( &_Const0157 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey2, _Const0158 );
  EwRetainString( &_this->KeypadKey2.NumProperty, EwLoadString( &_Const0159 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey3, _Const015A );
  EwRetainString( &_this->KeypadKey3.NumProperty, EwLoadString( &_Const015B ));
  CoreRectView__OnSetBounds( &_this->KeypadKey4, _Const015C );
  EwRetainString( &_this->KeypadKey4.NumProperty, EwLoadString( &_Const015D ));
  CoreRectView__OnSetBounds( &_this->KeypadKey5, _Const015E );
  EwRetainString( &_this->KeypadKey5.NumProperty, EwLoadString( &_Const015F ));
  CoreRectView__OnSetBounds( &_this->KeypadKey6, _Const0160 );
  EwRetainString( &_this->KeypadKey6.NumProperty, EwLoadString( &_Const0161 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey7, _Const0162 );
  EwRetainString( &_this->KeypadKey7.NumProperty, EwLoadString( &_Const0163 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey8, _Const0164 );
  EwRetainString( &_this->KeypadKey8.NumProperty, EwLoadString( &_Const0165 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey9, _Const0166 );
  EwRetainString( &_this->KeypadKey9.NumProperty, EwLoadString( &_Const0167 ));
  CoreRectView__OnSetBounds( &_this->KeypadKey10, _Const0168 );
  EwRetainString( &_this->KeypadKey10.NumProperty, EwLoadString( &_Const0169 ));
  CoreRectView__OnSetBounds( &_this->Writable, _Const0510 );
  AppWritable_OnSetMaxLength( &_this->Writable, 4 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0511 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0512 ));
  ViewsText_OnSetColor( &_this->Text, _Const016D );
  CoreTimer_OnSetPeriod( &_this->AcceptTimer, 1000 );
  EwRetainString( &_this->passkey1, EwLoadString( &_Const0167 ));
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0513 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0514 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0128 
  ));
  _this->getting = 1;
  CoreRectView__OnSetBounds( &_this->deny2, _Const0515 );
  ViewsText_OnSetString( &_this->deny2, EwLoadString( &_Const0175 ));
  ViewsText_OnSetColor( &_this->deny2, _Const0176 );
  ViewsText_OnSetVisible( &_this->deny2, 0 );
  CoreRectView__OnSetBounds( &_this->accept2, _Const0516 );
  ViewsText_OnSetString( &_this->accept2, EwLoadString( &_Const0178 ));
  ViewsText_OnSetColor( &_this->accept2, _Const0176 );
  ViewsText_OnSetVisible( &_this->accept2, 0 );
  CoreRectView__OnSetBounds( &_this->Writable1, _Const0517 );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Writable1, 0 );
  CoreGroup__OnSetVisible( &_this->Writable1, 0 );
  AppWritable_OnSetMaxLength( &_this->Writable1, 4 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0518 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0519 ));
  ViewsText_OnSetColor( &_this->Text1, _Const016D );
  ViewsText_OnSetVisible( &_this->Text1, 0 );
  CoreRectView__OnSetBounds( &_this->deny3, _Const051A );
  ViewsText_OnSetWrapText( &_this->deny3, 1 );
  ViewsText_OnSetAlignment( &_this->deny3, ViewsTextAlignmentAlignHorzJustified 
  | ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->deny3, EwLoadString( &_Const051B ));
  ViewsText_OnSetColor( &_this->deny3, _Const0176 );
  ViewsText_OnSetVisible( &_this->deny3, 0 );
  EwRetainString( &_this->passkey2, EwLoadString( &_Const0167 ));
  CoreTimer_OnSetPeriod( &_this->DenyTimer, 1000 );
  CoreRectView__OnSetBounds( &_this->deny4, _Const051A );
  ViewsText_OnSetWrapText( &_this->deny4, 1 );
  ViewsText_OnSetAlignment( &_this->deny4, ViewsTextAlignmentAlignHorzJustified 
  | ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->deny4, EwLoadString( &_Const051C ));
  ViewsText_OnSetColor( &_this->deny4, _Const0176 );
  ViewsText_OnSetVisible( &_this->deny4, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey5 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey6 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey7 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey8 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeypadKey10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->accept2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Writable1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->deny4 ), 0 );
  _this->KeypadKey.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey1.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey2.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey3.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey4.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey5.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey6.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey7.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey8.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey9.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  _this->KeypadKey10.UserPress = EwNewSlot( _this, AppKeypadChangePopup_Press );
  CoreGroup__OnSetFocus( &_this->Writable, 0 );
  _this->Writable.onPress = EwNewSlot( _this, AppKeypadChangePopup_PressTop );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->AcceptTimer.OnTrigger = EwNewSlot( _this, AppKeypadChangePopup_AcceptSlot 
  );
  _this->StarTimer.OnTrigger = EwNewSlot( _this, AppKeypadChangePopup_StarSlot );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppKeypadChangePopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnRelease = EwNewSlot( _this, AppKeypadChangePopup_Proceeed 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->deny2, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->accept2, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  CoreGroup__OnSetFocus( &_this->Writable1, 0 );
  _this->Writable1.onPress = EwNewSlot( _this, AppKeypadChangePopup_PressBot );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->deny3, EwLoadResource( &FlatFontM, ResourcesFont 
  ));
  _this->passkey = EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey1, AppKeypadChangePopup_OnSetpasskey1 
  );
  _this->DenyTimer.OnTrigger = EwNewSlot( _this, AppKeypadChangePopup_DenySlot );
  ViewsText_OnSetFont( &_this->deny4, EwLoadResource( &FlatFontM, ResourcesFont 
  ));

  /* Call the user defined constructor */
  AppKeypadChangePopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::KeypadChangePopup' */
void AppKeypadChangePopup__ReInit( AppKeypadChangePopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppKeypadKey__ReInit( &_this->KeypadKey );
  AppKeypadKey__ReInit( &_this->KeypadKey1 );
  AppKeypadKey__ReInit( &_this->KeypadKey2 );
  AppKeypadKey__ReInit( &_this->KeypadKey3 );
  AppKeypadKey__ReInit( &_this->KeypadKey4 );
  AppKeypadKey__ReInit( &_this->KeypadKey5 );
  AppKeypadKey__ReInit( &_this->KeypadKey6 );
  AppKeypadKey__ReInit( &_this->KeypadKey7 );
  AppKeypadKey__ReInit( &_this->KeypadKey8 );
  AppKeypadKey__ReInit( &_this->KeypadKey9 );
  AppKeypadKey__ReInit( &_this->KeypadKey10 );
  AppWritable__ReInit( &_this->Writable );
  ViewsText__ReInit( &_this->Text );
  CoreTimer__ReInit( &_this->AcceptTimer );
  CoreTimer__ReInit( &_this->StarTimer );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ViewsText__ReInit( &_this->deny2 );
  ViewsText__ReInit( &_this->accept2 );
  AppWritable__ReInit( &_this->Writable1 );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->deny3 );
  CoreTimer__ReInit( &_this->DenyTimer );
  ViewsText__ReInit( &_this->deny4 );
}

/* Finalizer method for the class 'App::KeypadChangePopup' */
void AppKeypadChangePopup__Done( AppKeypadChangePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppKeypadChangePopup );

  /* Finalize all embedded objects */
  AppKeypadKey__Done( &_this->KeypadKey );
  AppKeypadKey__Done( &_this->KeypadKey1 );
  AppKeypadKey__Done( &_this->KeypadKey2 );
  AppKeypadKey__Done( &_this->KeypadKey3 );
  AppKeypadKey__Done( &_this->KeypadKey4 );
  AppKeypadKey__Done( &_this->KeypadKey5 );
  AppKeypadKey__Done( &_this->KeypadKey6 );
  AppKeypadKey__Done( &_this->KeypadKey7 );
  AppKeypadKey__Done( &_this->KeypadKey8 );
  AppKeypadKey__Done( &_this->KeypadKey9 );
  AppKeypadKey__Done( &_this->KeypadKey10 );
  AppWritable__Done( &_this->Writable );
  ViewsText__Done( &_this->Text );
  CoreTimer__Done( &_this->AcceptTimer );
  CoreTimer__Done( &_this->StarTimer );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ViewsText__Done( &_this->deny2 );
  ViewsText__Done( &_this->accept2 );
  AppWritable__Done( &_this->Writable1 );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->deny3 );
  CoreTimer__Done( &_this->DenyTimer );
  ViewsText__Done( &_this->deny4 );

  /* Release all used strings */
  EwReleaseString( &_this->passkey1 );
  EwReleaseString( &_this->passkey2 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::KeypadChangePopup' */
void AppKeypadChangePopup__Mark( AppKeypadChangePopup _this )
{
  EwMarkObject( &_this->KeypadKey );
  EwMarkObject( &_this->KeypadKey1 );
  EwMarkObject( &_this->KeypadKey2 );
  EwMarkObject( &_this->KeypadKey3 );
  EwMarkObject( &_this->KeypadKey4 );
  EwMarkObject( &_this->KeypadKey5 );
  EwMarkObject( &_this->KeypadKey6 );
  EwMarkObject( &_this->KeypadKey7 );
  EwMarkObject( &_this->KeypadKey8 );
  EwMarkObject( &_this->KeypadKey9 );
  EwMarkObject( &_this->KeypadKey10 );
  EwMarkObject( &_this->Writable );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->AcceptTimer );
  EwMarkObject( &_this->StarTimer );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->deny2 );
  EwMarkObject( &_this->accept2 );
  EwMarkObject( &_this->Writable1 );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( _this->editor );
  EwMarkObject( &_this->deny3 );
  EwMarkRef( _this->passkey );
  EwMarkObject( &_this->DenyTimer );
  EwMarkObject( &_this->deny4 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppKeypadChangePopup_Init( AppKeypadChangePopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  ViewsText_OnSetString( &_this->Writable.TextEditor.Text, 0 );
  ViewsText_OnSetString( &_this->Writable1.TextEditor.Text, 0 );
  EwReleaseString( &_this->passkey1 );
  EwReleaseString( &_this->passkey2 );
  _this->passkey = EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey1, AppKeypadChangePopup_OnSetpasskey1 
  );
  CoreGroup_ObtainFocus((CoreGroup)&_this->Writable.TextEditor );
  AppKeypadChangePopup_OnSeteditor( _this, &_this->Writable.TextEditor );
}

/* 'C' function for method : 'App::KeypadChangePopup.Press()' */
void AppKeypadChangePopup_Press( AppKeypadChangePopup _this, XObject sender )
{
  AppKeypadKey key = EwCastObject( sender, AppKeypadKey );

  if ( EwGetStringLength( key->NumProperty ) == 1 )
  {
    if ( EwGetStringLength( EwOnGetString( _this->passkey )) < 4 )
    {
      EwOnSetString( _this->passkey, EwConcatStringChar( EwOnGetString( _this->passkey 
      ), EwGetStringChar( key->NumProperty, 0 )));
      AppKeypadChangePopup_Update( _this );
    }

    if (( EwGetStringLength( _this->passkey1 ) == 4 ) && ( _this->editor == &_this->Writable.TextEditor 
        ))
    {
      CoreGroup__OnSetVisible( &_this->Writable1, 1 );
      ViewsText_OnSetVisible( &_this->Text1, 1 );
      CoreGroup_ObtainFocus((CoreGroup)&_this->Writable1.TextEditor );
      _this->passkey = EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey2, AppKeypadChangePopup_OnSetpasskey2 
      );
      AppKeypadChangePopup_OnSeteditor( _this, &_this->Writable1.TextEditor );
      CoreGroup_OnSetEnabled((CoreGroup)&_this->Writable1, 1 );
    }
  }

  if ( !EwCompString( key->NumProperty, EwLoadString( &_Const0169 )))
  {
    if ( EwGetStringLength( EwOnGetString( _this->passkey )) > 0 )
    {
      EwOnSetString( _this->passkey, EwStringLeft( EwOnGetString( _this->passkey 
      ), EwGetStringLength( EwOnGetString( _this->passkey )) - 1 ));
      AppKeypadChangePopup_Update( _this );
    }
  }
}

/* 'C' function for method : 'App::KeypadChangePopup.Proceeed()' */
void AppKeypadChangePopup_Proceeed( AppKeypadChangePopup _this, XObject sender )
{
  AppApplication ap;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ap = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( EwGetStringLength( _this->passkey1 ) != 4 )
  {
    ViewsText_OnSetVisible( &_this->deny2, 1 );
    CoreTimer_OnSetEnabled( &_this->DenyTimer, 1 );
    CoreTimer_restart( &_this->DenyTimer, 0, 2000 );
    return;
  }

  if ( EwCompString( _this->passkey1, _this->passkey2 ) != 0 )
  {
    ViewsText_OnSetVisible( &_this->deny3, 1 );
    CoreTimer_OnSetEnabled( &_this->DenyTimer, 1 );
    CoreTimer_restart( &_this->DenyTimer, 0, 2000 );
  }
  else
  {
    XInt32 userindex = ap->LevelAccess.UserIndex;

    if ( userindex != -1 )
    {
      XInt32 key = EwStringParseInt32( _this->passkey1, -1, 10 );
      XBool ok = 0;
      {
        if ( Command2( CMD_SET_PASSKEY, key, userindex ) == CMD_OK )
        {
            ok = 1;
        }
      }

      if ( ok )
      {
        ViewsText_OnSetVisible( &_this->accept2, 1 );
        CoreTimer_OnSetEnabled( &_this->AcceptTimer, 1 );
        CoreTimer_restart( &_this->AcceptTimer, 0, 800 );
        return;
      }
    }

    ViewsText_OnSetVisible( &_this->deny4, 1 );
  }
}

/* 'C' function for method : 'App::KeypadChangePopup.Cancel()' */
void AppKeypadChangePopup_Cancel( AppKeypadChangePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::KeypadChangePopup.AcceptSlot()' */
void AppKeypadChangePopup_AcceptSlot( AppKeypadChangePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->AcceptTimer, 0 );
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::KeypadChangePopup.StarSlot()' */
void AppKeypadChangePopup_StarSlot( AppKeypadChangePopup _this, XObject sender )
{
  XInt32 n;
  XString s;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );
  s = 0;

  for ( n = 0; n < EwGetStringLength( EwOnGetString( _this->passkey )); n = n + 
       1 )
  {
    s = EwConcatString( s, EwLoadString( &_Const0179 ));
  }

  if ( !EwCompRef( _this->passkey, EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey2, 
      AppKeypadChangePopup_OnSetpasskey2 )))
    AppTextEditor_OnSetString( &_this->Writable.TextEditor, EwLoadString( &_Const051D 
    ));

  AppTextEditor_OnSetString( _this->editor, s );
}

/* 'C' function for method : 'App::KeypadChangePopup.Update()' */
void AppKeypadChangePopup_Update( AppKeypadChangePopup _this )
{
  XInt32 n;

  if ( _this->StarTimer.Enabled )
    CoreTimer_OnSetEnabled( &_this->StarTimer, 0 );

  AppTextEditor_OnSetString( _this->editor, 0 );

  for ( n = 0; n < EwGetStringLength( EwOnGetString( _this->passkey )); n = n + 
       1 )
  {
    if (( n == ( EwGetStringLength( EwOnGetString( _this->passkey )) - 1 )) || !_this->getting )
    {
      AppTextEditor_OnSetString( _this->editor, EwConcatStringChar( AppTextEditor_OnGetString( 
      _this->editor ), EwGetStringChar( EwOnGetString( _this->passkey ), n )));
    }
    else
    {
      AppTextEditor_OnSetString( _this->editor, EwConcatStringChar( AppTextEditor_OnGetString( 
      _this->editor ), '*' ));
    }
  }

  CoreTimer_OnSetEnabled( &_this->StarTimer, 1 );
  CoreTimer_restart( &_this->StarTimer, 0, 1000 );
}

/* 'C' function for method : 'App::KeypadChangePopup.OnSeteditor()' */
void AppKeypadChangePopup_OnSeteditor( AppKeypadChangePopup _this, AppTextEditor 
  value )
{
  if ( _this->editor == value )
    return;

  _this->editor = value;
}

/* 'C' function for method : 'App::KeypadChangePopup.DenySlot()' */
void AppKeypadChangePopup_DenySlot( AppKeypadChangePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetVisible( &_this->deny3, 0 );
  ViewsText_OnSetVisible( &_this->deny2, 0 );
}

/* 'C' function for method : 'App::KeypadChangePopup.PressTop()' */
void AppKeypadChangePopup_PressTop( AppKeypadChangePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->passkey = EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey1, AppKeypadChangePopup_OnSetpasskey1 
  );
  AppKeypadChangePopup_OnSeteditor( _this, &_this->Writable.TextEditor );
  CoreGroup_ObtainFocus((CoreGroup)_this->editor );
}

/* 'C' function for method : 'App::KeypadChangePopup.PressBot()' */
void AppKeypadChangePopup_PressBot( AppKeypadChangePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  _this->passkey = EwNewRef( _this, AppKeypadChangePopup_OnGetpasskey2, AppKeypadChangePopup_OnSetpasskey2 
  );
  AppKeypadChangePopup_OnSeteditor( _this, &_this->Writable1.TextEditor );
  CoreGroup_ObtainFocus((CoreGroup)_this->editor );
}

/* Default onget method for the property 'passkey1' */
XString AppKeypadChangePopup_OnGetpasskey1( AppKeypadChangePopup _this )
{
  return _this->passkey1;
}

/* Default onset method for the property 'passkey1' */
void AppKeypadChangePopup_OnSetpasskey1( AppKeypadChangePopup _this, XString value )
{
  EwRetainString( &_this->passkey1, value );
}

/* Default onget method for the property 'passkey2' */
XString AppKeypadChangePopup_OnGetpasskey2( AppKeypadChangePopup _this )
{
  return _this->passkey2;
}

/* Default onset method for the property 'passkey2' */
void AppKeypadChangePopup_OnSetpasskey2( AppKeypadChangePopup _this, XString value )
{
  EwRetainString( &_this->passkey2, value );
}

/* Variants derived from the class : 'App::KeypadChangePopup' */
EW_DEFINE_CLASS_VARIANTS( AppKeypadChangePopup )
EW_END_OF_CLASS_VARIANTS( AppKeypadChangePopup )

/* Virtual Method Table (VMT) for the class : 'App::KeypadChangePopup' */
EW_DEFINE_CLASS( AppKeypadChangePopup, AppPopup, "App::KeypadChangePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppKeypadChangePopup )

/* Initializer for the class 'App::ZoneAndCombi' */
void AppZoneAndCombi__Init( AppZoneAndCombi _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppZoneAndCombi );
}

/* Re-Initializer for the class 'App::ZoneAndCombi' */
void AppZoneAndCombi__ReInit( AppZoneAndCombi _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::ZoneAndCombi' */
void AppZoneAndCombi__Done( AppZoneAndCombi _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppZoneAndCombi );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ZoneAndCombi' */
void AppZoneAndCombi__Mark( AppZoneAndCombi _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::ZoneAndCombi' */
EW_DEFINE_CLASS_VARIANTS( AppZoneAndCombi )
EW_END_OF_CLASS_VARIANTS( AppZoneAndCombi )

/* Virtual Method Table (VMT) for the class : 'App::ZoneAndCombi' */
EW_DEFINE_CLASS( AppZoneAndCombi, XObject, "App::ZoneAndCombi" )
EW_END_OF_CLASS( AppZoneAndCombi )

/* Bitmap resource : 'App::log_broadcast' */
EW_DEFINE_BITMAP_RES( Applog_broadcast )
  EW_BITMAP_FRAMES( Applog_broadcast, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 11, 13, 1, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applog_broadcast, Default )             /* ratio 35.35 % */
    0x1C080100, 0xC1A0B048, 0xE60B0883, 0xC006F280, 0x6E007FC2, 0xB091B938, 0x188BC5A2,
    0xD85C5E33, 0x89C461F0, 0x1C8A431A, 0x43A391A9, 0x52251028, 0x25B2C924, 0x551E934B,
    0x73499CBA, 0x2993C323, 0x2974D641, 0x3013C740, 0xA8D4A30E, 0xC7E51309, 0xE4072E95,
    0xC0655288, 0x3040278E, 0x02F288EE, 0x4F1C0027, 0x19BD1132, 0x85CCE753, 0x693E1CD1,
    0x9145C007, 0x96170905, 0x8A637AB2, 0xB845828B, 0x6501E5A0, 0x39A2C606, 0x90242691,
    0x818F89C3, 0x88EA0A01, 0xCFAAC642, 0x7C7F0536, 0x9EB27041, 0xA1696058, 0x6FDB126C,
    0x17268DC1, 0x63856212, 0x1C1346D5, 0xB120A39A, 0x414C758A, 0x5C0C5515, 0xEAEEF285,
    0xA5826313, 0xD4BAB104, 0x5519C14D, 0x17C6AC1E, 0x62940700, 0x993E1580, 0x6D1EF273,
    0x3A1CE828, 0x2CD05259, 0x5CEAAC5A, 0xE4FCD34F, 0x44006514, 0x435D0772, 0x1BC16FDB,
    0x8690A450, 0x53A085F2, 0x3F484928, 0xC72016B9, 0xD9624993, 0xE3D00635, 0x96E10749,
    0x50D13B0C, 0xAB1DAB10, 0x14A0CD74, 0x74E08914, 0x804F0FC0, 0x7A13DFD0, 0x55553558,
    0x8500E980, 0x8445BB28, 0xE0477099, 0x6A52C024, 0x6D06782C, 0x10A10851, 0x15393853,
    0x41ED1445, 0x175B08F1, 0x1F10B412, 0x02A1399D, 0xD1461B41, 0x00F449CA, 0x046A9A80,
    0x0C8510E1, 0x61201138, 0x21410A1D, 0x104E6906, 0x4F141821, 0x15D3E868, 0x90F71162,
    0x20E45090, 0x3D86175C, 0x3E8D0531, 0x6F91E87E, 0xC5552E14, 0x543DC06A, 0x10315F40,
    0x8C141BD4, 0x0F8064E0, 0xE340A450, 0xE9047160, 0x3D4E0F53, 0x846184D1, 0x0F007411,
    0x1D708852, 0xF411D656, 0x9C040FC3, 0x1071CB14, 0x145ED43D, 0x18141C81, 0x78A4DC56,
    0x3455000E, 0x00272455, 0x03015152, 0xC141303F, 0xB6ACFE49, 0xEE29420A, 0x623F5AE2,
    0x1FD060E9, 0xE1958802, 0x15D51166, 0x05284759, 0x9220D3E0, 0x8A4E249E, 0x8B9750DB,
    0xB55CF958, 0xB22306C4, 0xEB6FA150, 0x4F92DAB4, 0xCFB6F940, 0x8000DF49, 0x2E2E6E9B,
    0x08212207, 0x96D3E00D, 0x1F913E5F, 0x7141EE42, 0xB9D73E92, 0x0245AAE7, 0x1425FAD0,
    0x272782CD, 0xBAC07F41, 0x1EE7329A, 0x4F5DE098, 0x781D730C, 0x9BE421E9, 0x913DED0D,
    0x2835000A, 0x12460181, 0x2828F0E6, 0x84C0EC00, 0xE1419A07, 0x888B78C7, 0x24134384,
    0xC78F26AC, 0x13B9DC00, 0x41A1BE49, 0x00D449EA, 0x0C1543F0, 0x6CC4EB3C, 0x9EE719BE,
    0x2143213D, 0x87237047, 0xAE0344EC, 0xA950B7E5, 0x90E38DEE, 0x4CE41F14, 0xAC3BA000,
    0x054E0E56, 0x698520EC, 0x99379F23, 0x0335EE47, 0x70510D80, 0x08427390, 0x1421B042,
    0xDFB0EA30, 0xB50D4BD6, 0xB23B7714, 0x00001014, 0x00000000

  EW_BITMAPS_TABLE( Applog_broadcast )
    EW_BITMAP( Applog_broadcast, Default )
EW_END_OF_BITMAP_RES( Applog_broadcast )

/* Table with links to derived variants of the bitmap resource : 'App::log_broadcast' */
EW_RES_WITHOUT_VARIANTS( Applog_broadcast )

/* Bitmap resource : 'App::log_link' */
EW_DEFINE_BITMAP_RES( Applog_link )
  EW_BITMAP_FRAMES( Applog_link, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 16, 1, 3, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applog_link, Default )                  /* ratio 32.14 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0x0A439834, 0xA43D030A, 0x43C041D4, 0x3D019F8A,
    0x50012CA2, 0x8580CAA5, 0x1C8A4320, 0x80003029, 0x01144F1C, 0xDF84F1C0, 0x5EFF2849,
    0x3301CCC6, 0x18664D00, 0x40F96894, 0x844FA7B2, 0x92626926, 0x4CE69449, 0xC28AFE28,
    0xCA43B024, 0xBC480AB8, 0x7549F88C, 0x2F011FE1, 0x67FD2937, 0x00388A13, 0x60D0A63A,
    0x854A83C0, 0xB4A83D03, 0x5AB2FADA, 0x14662606, 0x200B9D54, 0x94280E80, 0x0285DAB6,
    0x10952D0E, 0xF8FC7F08, 0xAAAFC043, 0x8E9A02AD, 0x40D3DBA1, 0x9F271443, 0xD5D993F4,
    0x3C86821B, 0x92A0E249, 0x993DEBA0, 0x6268A510, 0x5DC0524C, 0x6EEF9434, 0x0A23902B,
    0xD969048B, 0x23DB0810, 0x4997E624, 0x2888168D, 0x0148F489, 0xD574D5AD, 0x954820F6,
    0x44A3A619, 0x1FB2CA23, 0x7E501E01, 0x31905410, 0x6C6C5743, 0x2DF10E51, 0x137401B2,
    0x894C7C0A, 0x765A9C91, 0x507C0998, 0xF3609379, 0xB2519B06, 0x4501C5B1, 0xDC9340D4,
    0x51F82A41, 0xA680C305, 0x4FF79CDB, 0xE6B0CE72, 0x704F4D9A, 0x00295E73, 0x63004608,
    0xC530F009, 0x1145600D, 0xC04F4AC7, 0x1177C061, 0x07457118, 0xE0235D7B, 0xE338517F,
    0xD0580FC0, 0xA179D950, 0x5551E470, 0x80712048, 0x65AC515D, 0x41346514, 0xC978DE13,
    0x8FE37805, 0x63A4554B, 0xF5D83246, 0xF94A3804, 0x2E23D7B3, 0x0FD5447E, 0x6180205F,
    0x65DD7A2E, 0xD45610E2, 0x02379C90, 0x044C5726, 0x40F15444, 0xC1443F02, 0x5C526981,
    0x0015E681, 0x0744F0F4, 0x84C0CDA4, 0xA2ED345C, 0x18CB4D17, 0x7C6982C8, 0x3194D88D,
    0x45A12C1E, 0xD6FDF904, 0x72409D95, 0xC913C3A5, 0x0404F834, 0xC7B14160, 0xA3191588,
    0x18337180, 0x854383F0, 0x13838482, 0x84F9DC51, 0xF9840031, 0x48384140, 0x93860441,
    0x149FF519, 0xC40024C0, 0xB39D5D84, 0x75A81412, 0xA37C109A, 0x3E44F8FD, 0xC500D400,
    0x5145B604, 0x545149C3, 0x33740051, 0x514E9918, 0x6BA18451, 0x827E2442, 0x4CF81423,
    0x0D1383A0, 0x14ECB490, 0xCEA5742E, 0x05F8FCB5, 0xA107B4D8, 0x35764609, 0x19833002,
    0xDAC42005, 0x83B20878, 0xA2935DD8, 0x05BBD0BB, 0x9DCD0574, 0x40D2D450, 0x309C5410,
    0x044C4D00, 0xD93B9F40, 0xBE88013D, 0xC4D0DD3F, 0x979AB705, 0xF14A80A8, 0x656FB101,
    0x2F95D055, 0x0F64A318, 0x0C6C729F, 0x89B30071, 0x69149B35, 0x8345B724, 0x3260504C,
    0x0001015D, 0x00000000

  EW_BITMAPS_TABLE( Applog_link )
    EW_BITMAP( Applog_link, Default )
EW_END_OF_BITMAP_RES( Applog_link )

/* Table with links to derived variants of the bitmap resource : 'App::log_link' */
EW_RES_WITHOUT_VARIANTS( Applog_link )

/* Bitmap resource : 'App::log_status' */
EW_DEFINE_BITMAP_RES( Applog_status )
  EW_BITMAP_FRAMES( Applog_status, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 18, 4, 4, 15, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applog_status, Default )                /* ratio 26.28 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0x02788C4A, 0x190D188B,
    0x91E95C8E, 0x8E476371, 0x0C7A411A, 0xC924B1F9, 0x8A532393, 0x6552695C, 0xA82A9087,
    0x3040918C, 0x50290FC1, 0xB288E404, 0x280E400F, 0x15027CFF, 0xD167F41A, 0x2A8946A1,
    0xA914CA4D, 0x9750A3D3, 0x401A253E, 0x0A789407, 0x1191587A, 0xA92D67E0, 0x9D869B51,
    0xD9AC162A, 0x02C968B2, 0x12651AAD, 0x78501C00, 0xB63B559D, 0x69BB5CEE, 0xF1C54EF1,
    0xB8DBD344, 0x25E70377, 0x1447402A, 0xDCA18571, 0x30374C12, 0xE570BF5F, 0xD8DC9E0E,
    0x551F8328, 0x7C4C1078, 0xA8DEB18D, 0xAE4AFF8F, 0x812EBA4C, 0x21A2511D, 0x8A43A01C,
    0x43B0CF20, 0x194D8647, 0x511E016A, 0x105C20C2, 0xDA0ACA64, 0x15F6DFA5, 0x142759ED,
    0x54840F59, 0xF940D419, 0x8E52C2A0, 0x01C76E25, 0x0B049507, 0x50B1448A, 0x18154740,
    0xD35EAD9B, 0x0359E519, 0xA793CB20, 0x507EAE77, 0x8610F6FB, 0xBC42795C, 0x5E2406F6,
    0xD1BC245C, 0xD40142E4, 0x80441080, 0x05747A61, 0xF2022385, 0x361FC520, 0x44C3414D,
    0xDB56CD0A, 0x23885269, 0x000C2954, 0x0814C561, 0x198660CD, 0x4E362405, 0x03905055,
    0x087F1FC0, 0x5C114170, 0x77504058, 0x53F7804F, 0x38D61729, 0x8D7C8D63, 0x62705F51,
    0x38C526B1, 0xC4812024, 0xB0190401, 0x805214C3, 0x530F4045, 0x0EDAB0E8, 0x5C027850,
    0x5601B250, 0xF8095DDB, 0x041B8530, 0x315A800D, 0x0516B160, 0x40890424, 0x180F1544,
    0xC294CF48, 0x8F256641, 0x8FB81974, 0x73585297, 0x48E86257, 0x0E16C360, 0x1CC524E8,
    0xE555266C, 0xCA059F68, 0x08FA13E3, 0x54A18FE5, 0x9C21270E, 0x29295E85, 0xA98A6DA4,
    0x4E98A30A, 0x0550291A, 0x224510F4, 0x8570F00D, 0x81465E09, 0x5841030C, 0xAAAA0FE1,
    0xAA6ABAB2, 0xAB0AB6AF, 0x6ACEB4AB, 0xC6B8ACAB, 0xB9AD6BAA, 0x69EB0036, 0x0182E451,
    0x00545412, 0x26C8B1E1, 0xCCB2ECAB, 0xB3ECEB36, 0x101002D0, 0x00000000

  EW_BITMAPS_TABLE( Applog_status )
    EW_BITMAP( Applog_status, Default )
EW_END_OF_BITMAP_RES( Applog_status )

/* Table with links to derived variants of the bitmap resource : 'App::log_status' */
EW_RES_WITHOUT_VARIANTS( Applog_status )

/* Bitmap resource : 'App::log_drop' */
EW_DEFINE_BITMAP_RES( Applog_drop )
  EW_BITMAP_FRAMES( Applog_drop, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 23, 0 )
    EW_BITMAP_FRAME( 8, 7, 7, 7, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applog_drop, Default )                  /* ratio 20.23 % */
    0x1C080100, 0xC1A0B048, 0x286A0083, 0x070000C1, 0x9F0D3F94, 0x03900328, 0x508A3D4A,
    0x877445FE, 0x384457F1, 0x813C7E00, 0xC9A4B080, 0x56072893, 0x1E711334, 0x61158D46,
    0x33497C66, 0xF027CD66, 0x93594628, 0x81CFA7B2, 0xA9E89E38, 0xD1A6D339, 0x51AA50A2,
    0x2227427C, 0x88F488A4, 0xE96A0C6A, 0x3A8255A7, 0xDA58F49E, 0x8AD7AA4F, 0xA8A800B2,
    0x8DA4A062, 0x6E302126, 0xCBA4FAFB, 0x9E399F55, 0x548AFB00, 0x6E28CC26, 0x118566AC,
    0xA0CD1F91, 0x780606DC, 0x1387506B, 0xD1FD180D, 0x49F7FBB5, 0x504C8A3A, 0xCAF87558,
    0x2A270DAB, 0x11CC1708, 0xCFE2C965, 0xC3BE1D36, 0x50652598, 0x38715E32, 0xE099A289,
    0x4058270D, 0xF30D95D7, 0x3C002B49, 0x0CD84496, 0xD7D78985, 0xC40B5BB1, 0xED07E4C1,
    0x3EA747E3, 0x45C00699, 0xF9180591, 0x444276A4, 0xD0E740B8, 0x3E43DE1D, 0x286A793B,
    0x4B269679, 0xF58364BD, 0x71524FCD, 0x7BDDEC67, 0x1B897350, 0xF08F3B77, 0xF1199406,
    0xCFDF77DB, 0xA7E37F9E, 0xD15499F4, 0xE815EB27, 0x05F87D9D, 0x24489258, 0x818DF455,
    0xC4F7B5FE, 0x855A0A31, 0xE9DB4460, 0x6C86DFD7, 0x61215141, 0x06013C37, 0x35C61C84,
    0x7D83409E, 0x9A505AD8, 0x0E1F1890, 0x22A0EC4D, 0xA130337D, 0x72105A80, 0xAF8EE332,
    0x13DC8139, 0xD23484E4, 0x160E448E, 0x756C3597, 0x441099C5, 0x50504936, 0x04F6FC84,
    0x89564E20, 0xFC4F1415, 0x00654505, 0x958021FC, 0xC4D0D660, 0x03414B0A, 0x82378D40,
    0x00001019, 0x00000000

  EW_BITMAPS_TABLE( Applog_drop )
    EW_BITMAP( Applog_drop, Default )
EW_END_OF_BITMAP_RES( Applog_drop )

/* Table with links to derived variants of the bitmap resource : 'App::log_drop' */
EW_RES_WITHOUT_VARIANTS( Applog_drop )

/* Bitmap resource : 'App::cygnusblue2' */
EW_DEFINE_BITMAP_RES( Appcygnusblue2 )
  EW_BITMAP_FRAMES( Appcygnusblue2, Default, EW_DRIVER_VARIANT_RGBA8888, 180, 39, 0 )
    EW_BITMAP_FRAME( 38, 14, 1, 12, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appcygnusblue2, Default )               /* ratio 40.78 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2,
    0x38DC6A33, 0x00B844B1, 0x2A1CC45A, 0xAE15C7A0, 0x81929A05, 0x6549909B, 0xC0C54C86,
    0x0C64D871, 0xC350875C, 0x9704B664, 0x70B253A1, 0x02AD0014, 0x198C20E6, 0x28E00740,
    0x2211C015, 0x0EA142A0, 0x0D35A234, 0xD45D2542, 0x1ACD5C24, 0x08B516E9, 0x4B21447C,
    0xD3403030, 0xAAD368B3, 0x06F6CB5D, 0x6E043810, 0xE082A0F4, 0x65025D86, 0xCBDDEAD9,
    0xBFDFAFB7, 0x58030380, 0x9D00D842, 0x1042AA48, 0x0B0C254A, 0x28D25B24, 0x4DE60A69,
    0xE99CA6D9, 0x87031136, 0x7F38334F, 0xBBEB369C, 0xA6DD6E0C, 0x49A2DF60, 0x502AAAC2,
    0xE6765E29, 0x63353A48, 0x06381449, 0xA43C86F4, 0x5F299060, 0xCAF92A5B, 0xAF92EB36,
    0x0130C36D, 0x52AC26E3, 0x0AAD6CAF, 0x84F60AA5, 0x82DC92F0, 0x6C176BB3, 0x2C95007D,
    0x19681070, 0xC7A9A05F, 0x890E6D00, 0x9327A13A, 0x06692FAC, 0xC5A21265, 0xDB079E4D,
    0xCFDFEBF3, 0xEFFF3FBF, 0x0951D5E1, 0x163C382A, 0x7DA725CD, 0xF5690DD3, 0x3F0E0684,
    0xE113F99E, 0x58499B84, 0x90FD83A1, 0xDE64CFB6, 0x2DC903A0, 0x065220D1, 0xA0589921,
    0x087004D6, 0xA22306D0, 0x2E4920AC, 0x59E2B4D4, 0x98419E3D, 0xF4943D93, 0x792D0D82,
    0x0C0AD254, 0xE427F979, 0x718D0D90, 0xB8091F06, 0x332908E1, 0x2F8A7210, 0x4971DC5C,
    0xB094392A, 0x59D81104, 0x5B1843F4, 0x2A08401C, 0xDC617CBF, 0x8708DC36, 0x787E2F0D,
    0x4A0E4B52, 0x9BE448A5, 0xE729C670, 0xB1C04B7E, 0x80800186, 0x940E8B62, 0x298D72EC,
    0x8DF3089A, 0xE67E143B, 0x961C3D99, 0xDB2FC993, 0x368BF81C, 0xCDA718CA, 0xDA309733,
    0x6CEF870D, 0x983D5312, 0x210D171C, 0x0572F8A5, 0x8234761C, 0xB4515A40, 0x8702C7A1,
    0x87067630, 0x618844E2, 0xE3799426, 0xA4CB2C88, 0x90208651, 0xAFE7302C, 0x86600644,
    0xB0609620, 0x7090355A, 0xB5240E08, 0x1789633C, 0x01823478, 0x71905246, 0xC48C04C7,
    0x09244CB2, 0x2FE663CE, 0x8AA25075, 0x779C000C, 0xA1025990, 0xECBAEC0B, 0x8A2ECBB6,
    0xC8F1D802, 0x35742828, 0xC5A4288D, 0x396820E3, 0x39139865, 0x8D62F095, 0x22A08627,
    0x587817CC, 0xB20F8AA2, 0x240706D1, 0x8700E0A1, 0x9128A123, 0x34692E26, 0x90330B32,
    0x324AF22C, 0x47D18873, 0xA9041722, 0xA4029B51, 0x2F278851, 0x354BA24C, 0x0C226CAF,
    0x5270F938, 0xC8FF384C, 0x2F3C4E0C, 0x1E496356, 0x4232CC96, 0x6BB91FB9, 0xAAEA5A74,
    0x580FD05B, 0x2240E1C0, 0x085318AD, 0xBA74F269, 0x2C6E330D, 0x000E4A22, 0x00513BC0,
    0x89B2206B, 0xB34E2F0A, 0x7CF4824B, 0xC325CD28, 0x12D04B16, 0x00918C4E, 0x62447F1A,
    0x6C8619C3, 0x701843D2, 0x00015200, 0xD4C17470, 0x6E1784D1, 0xC05A5AB8, 0x890286D1,
    0x19CC92C4, 0x4E437F32, 0xFA04FEA1, 0xBC9439CD, 0x981F087C, 0x78C242D4, 0x5107945A,
    0x60103702, 0x407016C4, 0x912005D0, 0x53726044, 0x8801A050, 0x92B88D03, 0x0C9A1C0C,
    0x38CDB923, 0x718FC693, 0x079318D8, 0x00F4B127, 0x2787E8BA, 0x690050EF, 0x03CA6248,
    0x032D6870, 0x70E893DD, 0x30561783, 0xA55D9040, 0x2C89C1EB, 0x4C026452, 0xE870DF37,
    0xFCA7214E, 0x779D4602, 0x0FC4B446, 0x0941E003, 0xF2604D2B, 0xD0D5370B, 0x9E1FE1DA,
    0x12C6C2DC, 0x4112406D, 0x4807C0C6, 0xB211A064, 0x0224C668, 0x10650D76, 0xA8C21542,
    0x00BC12C3, 0xEF280907, 0x60CC1882, 0x07800242, 0x732089E7, 0x690540D5, 0x9CBBC1F0,
    0x3A12C8DD, 0x4820851A, 0xB4168B91, 0xEAC02F09, 0x61441FCE, 0x87281A8B, 0x44E0B91B,
    0x33766A4E, 0x1D238213, 0x33859090, 0x348540EC, 0xAF0201F8, 0x7F0620D3, 0x1C308450,
    0x8A6010A0, 0x616E9982, 0x019C58AF, 0x57209410, 0x866208BA, 0x06024040, 0x3106A22F,
    0x5B8F6348, 0x5411232D, 0x20EA4338, 0x842E8372, 0xE8A51047, 0x31341DC5, 0x71D074BE,
    0x9F90D31B, 0x3DC0842A, 0x0F2BC0BC, 0x0C05909A, 0x9D0C7524, 0x8A40C3CD, 0x081C42E8,
    0xAE253AE1, 0xF14C5D45, 0x3204D79A, 0x8D280038, 0x9AEC902D, 0x26E9249B, 0x91D1264A,
    0x1E4EE91A, 0x280AE130, 0xD51BAA2C, 0xC8AD1CA0, 0x605FA5F7, 0xF4028001, 0x492D2CA4,
    0x48F431A4, 0xC6918F02, 0x8EE6741E, 0x1C0A6A12, 0x2C5490FA, 0x160B8866, 0x1C92A40C,
    0x3B26E489, 0x5E4A8009, 0xE94D9412, 0x91461FA3, 0xD1D0270B, 0x1FD0E31B, 0x8A10FE3A,
    0x05A1685C, 0x411D0834, 0x430730B2, 0x9F972064, 0xC23E0CF0, 0x0C320B58, 0x801D1262,
    0x40F01708, 0x287C0B08, 0x9CB09A1A, 0x8B99723C, 0x68624E2E, 0x5C0B72E9, 0x5909B0F4,
    0xE47C4134, 0x0E399C8B, 0x9C620AC1, 0x406B07E1, 0x2086410A, 0xE0283806, 0x4128918A,
    0x8170FF45, 0x9A09752D, 0x010A5380, 0x39C8C914, 0x2514A23C, 0x44234390, 0x2C3683D1,
    0x684C1402, 0xE13C2283, 0xF4CC3704, 0xC4406E08, 0x06106627, 0x0382203C, 0x26A8B514,
    0xDB2E7991, 0x620966E0, 0x0419CFB8, 0xC00D09B1, 0x60A41261, 0xCA594A81, 0x22804706,
    0x29A53209, 0x89F1181B, 0x13B4E427, 0x23C37049, 0x3683B140, 0x21138224, 0xCE1682B0,
    0x519400D0, 0x430F3BA4, 0xF0FE0505, 0x80785A09, 0x80F8B5A0, 0x8AE1341E, 0x148C4C0F,
    0x444EE816, 0x3F8693CE, 0x7901E258, 0xEE2B04B8, 0xE2BC89BA, 0xC87503F5, 0x60322A84,
    0x041E8914, 0x4E900996, 0x4AB0F630, 0x87509476, 0xA547E8E0, 0x518C91B4, 0x7708A2C2,
    0x482A0490, 0x98478750, 0x806E0642, 0x306E2904, 0x00B6AB07, 0x40D08A61, 0x0650B00F,
    0x2FB16D5F, 0x2CE821DD, 0x4609606E, 0x25430309, 0x54215654, 0xEC318C31, 0xBD6F57AA,
    0xB0062582, 0x80344DD4, 0x2BE8940E, 0x31111A1C, 0x0DB55E9B, 0x57E9A08D, 0x1ADDCAC3,
    0x370356E0, 0x4E1382A0, 0xB6505BF5, 0x28530B40, 0xA1141A80, 0x261C0989, 0x43585431,
    0xDED89023, 0x124C8800, 0xC084A02E, 0x79B91190, 0xC715C224, 0xB2118440, 0x0AFE0620,
    0xE0780B44, 0x415621CD, 0x4DA03F0C, 0x1010CF52, 0x3CB4802A, 0x11E1E831, 0x2E163829,
    0xA80F133C, 0x3B12A31D, 0x2617C2B8, 0x2029B6F0, 0x68BF60A9, 0x8394F983, 0xA2D9FE47,
    0x9C0D8208, 0xAE35C200, 0x15A64048, 0x288652D9, 0x20AF30E4, 0x027935B8, 0x121DC318,
    0x98420121, 0x404417E2, 0x11163360, 0xC2EC6C30, 0x46A0DA7E, 0x8E01B6A5, 0x38C38F2D,
    0x9806F0D9, 0x58CB919F, 0xC4154218, 0x081A83A8, 0x741309A1, 0x9C463BA7, 0x155A0804,
    0xE2282A8C, 0xA5C88963, 0x0BE12C2B, 0x53A31C6D, 0x70D9F0DA, 0x2FDA31BE, 0xF61C871F,
    0x87A106DB, 0xF0498D53, 0x40BB1AE2, 0x418C2B84, 0xE0CD8688, 0x02711078, 0x0140E018,
    0x9561E313, 0x374C98B9, 0x6E3E217C, 0xCE5982EC, 0xEB7CC420, 0x9952110B, 0xF0C18A0A,
    0x61B57142, 0x02FB510B, 0x46E0C113, 0x0D2C7C2F, 0x1367A44E, 0x011D7831, 0x1809180D,
    0xF7348281, 0x228565F0, 0x66140E07, 0xCE7C15E3, 0xCC682F06, 0x236B3E0C, 0x0656CE1A,
    0x0B11A2B3, 0x0F02F8DF, 0x2443E864, 0xB6582050, 0x820E4148, 0x97020098, 0xB4D207D1,
    0xDC3DB3E3, 0xC4943072, 0xA43B23A4, 0xEE11E18D, 0x8B411E0D, 0x39C1EC67, 0x96C590D7,
    0x311C3529, 0x891C6A33, 0xA036B45E, 0xB4682CC1, 0xC89F1002, 0x10B21905, 0xC0643E87,
    0xC00C17DE, 0x0900FA18, 0x16023012, 0x9F4460CA, 0x270B01AE, 0xEF0A42F7, 0xA2412F8D,
    0xD83D0630, 0x989C3213, 0x31702451, 0xE1885B0D, 0xC826720F, 0x8B6DDAF1, 0x1CE8702F,
    0x1DC70C37, 0x260AB128, 0x7400243C, 0x78298480, 0x446AE020, 0x40EE3483, 0x518C2B04,
    0x412C1687, 0xB9D00A0B, 0x8140F61A, 0x46623B86, 0x3545C893, 0xA2076174, 0x252CA0AB,
    0x6C75C160, 0x9B5105AC, 0xF9CB12E3, 0xA153D946, 0x0AFE4F85, 0x03D86565, 0x61303E24,
    0xD4A1D063, 0x3D0CF0C9, 0x5943D564, 0x1743266D, 0x33E1FC2A, 0x886F0C21, 0x58C5EA43,
    0x0012DC5F, 0x0D383305, 0x8618AB11, 0xA0B9561C, 0xB403D8CD, 0x85F65A10, 0x7E99E5FA,
    0xCA87B720, 0xEA4E5436, 0xD46AB2E1, 0x60910E62, 0xB7E060D2, 0x7B840090, 0x65C82612,
    0x0FB97E2D, 0xC828DE5F, 0xB5D6A899, 0x48CEE220, 0xD2E66050, 0x48CCD6E0, 0xF0CDFA88,
    0x80C3E003, 0x6B5E2503, 0x01FB8D32, 0x04982D12, 0x0BD1AA2E, 0xF51EF4CF, 0xE849CFA8,
    0x7CDA0339, 0x873472FC, 0x403FD077, 0xC50E0FDB, 0x88AB6D43, 0x9064289E, 0xA465E472,
    0x0599EDFE, 0x0C5E0010, 0x671BC3D0, 0x6A0CA263, 0x70970850, 0x38238003, 0xF64F44F2,
    0x20D00B74, 0x0EB1A409, 0x387E07FE, 0x17EB7FF3, 0x4AB20F7E, 0xC53500E7, 0xB48A08B0,
    0x71802208, 0x1C5FE385, 0x668E02C7, 0x7820C30D, 0x38609607, 0xA3DB56C6, 0x1BE0085E,
    0x090780BD, 0x13560F12, 0x09B0790D, 0x070360AF, 0xB3280028, 0x0B509C07, 0xD8508043,
    0xD0EF5080, 0x06683F07, 0xD204B10C, 0x70870035, 0x4A60C10A, 0xE20DD0C1, 0x84AD8180,
    0x16547D05, 0x7E06E05B, 0x92060200, 0x08D4860A, 0x9E0CA0B1, 0x507305B0, 0x36F01B08,
    0x98009401, 0xE07C0C47, 0x0D065B7E, 0x3E0A741D, 0x30323AF0, 0x03C37205, 0x0F05A050,
    0x65EB5E90, 0x5FE17E77, 0x17092087, 0xB4A38290, 0x1A40DC1C, 0x107A90FA, 0x60ED2822,
    0x40C3F83F, 0x4340C0CB, 0x91A68518, 0x1CE0F213, 0x430B10D9, 0xD0350A97, 0x08506347,
    0xC501B095, 0x94E90D46, 0x81688913, 0xF3333212, 0x20DC3FA0, 0x0C60D760, 0xD50BB095,
    0x72390BE0, 0x4AB0C90D, 0x143BE0E8, 0xF0F31A48, 0x0892CD08, 0x14087610, 0x947D1080,
    0x03F0AF58, 0xCF0DD6B8, 0x24BE2FB0, 0x6070F028, 0x430760C6, 0x07580470, 0x07705E11,
    0xC5024083, 0x22320D26, 0x3348CD7E, 0x700A82F6, 0xC0A10880, 0x32810401, 0x440B2837,
    0x70D76CE0, 0x43B8137A, 0xD60DD1CA, 0xE0AF6D10, 0x09E0D81C, 0xA00D867C, 0xC0BD2660,
    0x7840EA21, 0xF41393BD, 0x90A27C80, 0x02509E1E, 0x6C74787E, 0xD4E72240, 0x20908B6F,
    0x158124BD, 0xB4AB3388, 0x0A224A0D, 0x0E6E5047, 0x906D0561, 0x08B00D07, 0xC90C90B0,
    0x97831942, 0x2F90F713, 0xA4423624, 0x19121A01, 0x0DE28121, 0x6108B0EA, 0x80640838,
    0x2437C607, 0x0751E001, 0x100E5950, 0x5ED75954, 0x7905F000, 0x701A0920, 0x8A62F82C,
    0xAA6FD090, 0x391D0540, 0x47D1032D, 0x5C0A8765, 0xB0E45080, 0x0E00DC28, 0x5283F07E,
    0x02E98570, 0x02E0B034, 0x810D91C2, 0xD0F519B7, 0x84908070, 0x52006276, 0x40650C47,
    0x2660EA1A, 0xA85D80DB, 0x27D50440, 0x02C09032, 0xC20D215D, 0x70F01A40, 0x0810CC2B,
    0xE7447445, 0x20950838, 0x15E09201, 0xF739109B, 0xB8B20930, 0x0AC3F20B, 0x8436F022,
    0x706B0031, 0x04309B08, 0x8424F083, 0xF4DD07D0, 0x72E2A905, 0x46168909, 0x80870065,
    0x04E0C10A, 0x350CF508, 0xB0E07BE2, 0x0D46890F, 0x7D0CF2CC, 0x10B14800, 0x09622304,
    0x6C069033, 0xF07C03C6, 0x0610B509, 0xCD0B308F, 0x80830910, 0x0540BE0A, 0x8306704B,
    0x64943DA0, 0x09608606, 0xA58FC030, 0x20F99AC7, 0x7520A829, 0x5B04F0C7, 0x403009F5,
    0x4570293D, 0xA007F459, 0x00680B80, 0x7EC0D468, 0x560FE7A9, 0x10630C23, 0x54345908,
    0xA35EB82D, 0x305E0B14, 0x7CD3BB19, 0x370FF0E0, 0x84DC0E34, 0x95C0530B, 0x5900110D,
    0x203709F3, 0x6040D660, 0x3892C139, 0xE24E7EE3, 0x0500830B, 0x6F34E056, 0x609607D3,
    0x0AA08A00, 0xA70620C5, 0xB9E943F1, 0x08A0E14A, 0x70065753, 0x00A208F0, 0x09E07002,
    0x7C0120A3, 0x20AF0920, 0x08D07301, 0x320290A5, 0x90830CA9, 0x91259E20, 0xBF3E873F,
    0x93EC0670, 0x1B73EE25, 0xAB086006, 0xB04B0C20, 0x7EC0D14A, 0xFF913900, 0x00EC3FA0,
    0x0563FD08, 0x67070037, 0x510E4300, 0x0B49BD7F, 0xBC72306A, 0xA0A170D0, 0x0C80AD08,
    0xAB08A07F, 0xF07C0C60, 0x09C0C971, 0x334A9961, 0xA81343C3, 0x50819F78, 0x488E90DA,
    0x61F983B0, 0x91E05C05, 0x494D4081, 0xD6947520, 0x0B309E07, 0x5C04505F, 0x110382C0,
    0x00D08AA1, 0x800CC408, 0x32924230, 0xA315E00C, 0x932F1326, 0xE0410A90, 0x8513F988,
    0xA20810EC, 0x606E0BA0, 0x060A3E1D, 0x21088074, 0xE0B30900, 0x29B7BB0C, 0x0C09E689,
    0xA41405A1, 0x0C230500, 0xEF33A077, 0x80CE8F60, 0x03822406, 0x76328165, 0xB0A70950,
    0x0D630103, 0xDE1A70D6, 0xE08A0EC0, 0x06A0C80A, 0x025EC200, 0x14F04EE1, 0x2330B046,
    0x6B0A4466, 0xF08B07B0, 0x93A10337, 0x750BBA79, 0xA68688E0, 0x0907D10D, 0xF00340A5,
    0x671417D9, 0x0CD2B771, 0x9F8AA80E, 0xE3E378B5, 0x6140890D, 0x1836D06E, 0x934991A0,
    0x04E1D776, 0x6775C06C, 0x4A8707E0, 0x1DD00134, 0x460A7749, 0x9AC16D10, 0x3BAA0B78,
    0xC56130EB, 0xE5CF06A0, 0x5FD4B45B, 0xC50137C2, 0x908F0C8A, 0xA4AA6C20, 0xE00D4658,
    0x091A0419, 0x08738900, 0xC635000F, 0xD2826160, 0x0FEA6E20, 0xB10CF961, 0x29A135B5,
    0x278AF610, 0x540BC0A3, 0x40DE21C0, 0x4DC73F81, 0x7C05C0BA, 0xC000ACA8, 0x79091E91,
    0xF25A0081, 0xE2FD59F0, 0x6960C58A, 0x3C10B4C7, 0x23648E48, 0x13136776, 0x9B3BD7DF,
    0xE6EB0F71, 0x98589F09, 0xA53D135F, 0x473301A0, 0x19B2DC0D, 0xF97A00F3, 0xE6C95A02,
    0x6770F4A6, 0xC90680C7, 0x904D35FA, 0x02007806, 0x305B2075, 0xF0196C30, 0x06105603,
    0x4B03700E, 0xB00C0480, 0x06B05B04, 0x4F63C015, 0x60D527D0, 0x0FC20E0C, 0xEB9268BB,
    0xF04B0886, 0x9CC05E04, 0xC69351DA, 0x8B154B97, 0x2060EC1A, 0x6F0610B0, 0x33DB53F0,
    0x34000817, 0x963900AC, 0x00D4508B, 0x09E08907, 0x73AF4040, 0x102DAE00, 0x19B4856D,
    0x2008E0F4, 0x12460847, 0x0501024B, 0x0707505F, 0x10CA0B24, 0x3917820A, 0x3E10C0B9,
    0x66B000DB, 0x0F31A899, 0x610C28F9, 0x94C609E3, 0x4707F52E, 0x944D60BC, 0x288E0E01,
    0x3FD07C0E, 0x57B1D055, 0x50270954, 0x5C70D36C, 0xB808C896, 0x906108F2, 0x00E09007,
    0x7D069104, 0xD949B200, 0x0DF3B980, 0xBF8A30F2, 0xC08C06A0, 0xB2D02409, 0x723F04A1,
    0x889C0900, 0x0C40D842, 0x397859E8, 0x64F70F81, 0x5685660A, 0x7011BB49, 0x99203723,
    0x21C0660C, 0x959F8810, 0x10D71943, 0x0490A92E, 0x0B4E24E0, 0xD38C8C11, 0x4BB0C70A,
    0x1279F1A8, 0x90CE6899, 0x09808206, 0x033EF873, 0xB0641650, 0xA064F007, 0xEFC010A0,
    0x045320F8, 0x0A308C07, 0x7A10FBF7, 0xF082B7CB, 0x282AB11B, 0x9F901A37, 0xD0D56601,
    0x0350B21E, 0x8EAF2B1D, 0x20CD0B40, 0x8A720E0A, 0x92B503BD, 0x70A77DB0, 0x10F73973,
    0x1193504F, 0xD31B08E0, 0x0F41A408, 0xB10FD9AC, 0xB0BE0D78, 0x11057D57, 0xBE99993A,
    0x8A4604F0, 0x0F0139A4, 0x850DE6B8, 0xE6EF1A84, 0xAE70F7A6, 0x1EA7607F, 0xF4991179,
    0x08093E10, 0x620BC0A6, 0x90E821C0, 0x36A5A1B8, 0x680560C2, 0x09910780, 0xB0D17E94,
    0x3397FBE2, 0x90CA5A32, 0x0A909107, 0x2D165029, 0x3005C9B0, 0x05020307, 0xE2508B34,
    0x40A13130, 0xCA702505, 0x5C671A3E, 0xA0D00B68, 0x73398A0B, 0x850940D3, 0xA36F5875,
    0x46641506, 0xF1139B15, 0x80D121C0, 0x4AD1F796, 0xF633A094, 0x40B9BFE0, 0x50031407,
    0xCA03F102, 0xD0A225EC, 0x2829F50B, 0xD88F60E5, 0x309966B0, 0x0014B3A7, 0x2F0A35B5,
    0xE9AA2C70, 0x0CD9C18C, 0x04C1C07D, 0x5BDE5E71, 0x08A6050A, 0x4D0A9921, 0x507605F0,
    0xC9B17D32, 0x8000502D, 0x90490AC4, 0x92D8ED20, 0x1BAEF7AB, 0x987A8788, 0x063B7E16,
    0x5E97E012, 0x1B44BB0C, 0x0C12635A, 0x2E0A05B5, 0x710C14B4, 0x9796E96E, 0xE9C0375F,
    0x10BA65B9, 0x02E09C36, 0xB6496AE3, 0xC02D095A, 0xA490C140, 0x9A97E4EA, 0xC07E06A0,
    0x05C10F6A, 0x0872E06B, 0x80990CA4, 0x0FC9AC6C, 0x1C0B84F7, 0xF01F0839, 0x22D22B3A,
    0x39B069D2, 0xF949BB03, 0x0620870C, 0x0D60E2D1, 0xF00B99F1, 0xCBA6EDCD, 0x8CD06AEB,
    0x59590C92, 0x3CBC990B, 0x1F098223, 0x09894610, 0x0FD1A4B6, 0xD90D2356, 0x50920C92,
    0xD050EA6A, 0xCDC5C0F9, 0xBB110950, 0x6E27B61D, 0xBE700028, 0x97EB8EE0, 0x957295A0,
    0x3BABC072, 0xA17EB1D0, 0x0B94DC93, 0xEF3FA06F, 0x90D54D70, 0x0B109907, 0x2A45BAB8,
    0xD0AD765C, 0x508CBC03, 0xF306F0EE, 0x50200652, 0x00703F02, 0x66B7F104, 0x40AC6418,
    0x0D476146, 0x265CF0A1, 0x404B1032, 0x00C07006, 0x810CABB2, 0x419E97C0, 0x06A10C0E,
    0x1109F08E, 0xD0C931E0, 0x0F8BEF09, 0x740B2292, 0x10A30930, 0x0321034F, 0x0904704B,
    0xD0A40840, 0x39606A0B, 0xD68B10E8, 0xB0620D00, 0x87308E07, 0x9807A5FD, 0x20370B00,
    0x0EE39689, 0x95071D62, 0x1103D905, 0x023DC606, 0xEF0B2365, 0xC0880F2B, 0x04EC285C,
    0x7D416057, 0x307747D1, 0x39604820, 0xFAC860D8, 0x90AE7C80, 0x34309A1E, 0x2011B63A,
    0xC01E6111, 0x0B40CE6F, 0x88B1733A, 0xD0A42068, 0x7474E672, 0x81072060, 0x20B7AA30,
    0x21A0AB0D, 0xC10FA9AC, 0x409C0D09, 0x86708E40, 0x3E177501, 0xB6898408, 0x8CE8BB0D,
    0x790C3613, 0xB0580510, 0x0687472A, 0x2909A087, 0xD6238F90, 0xC047A92F, 0x472070B6,
    0x562B0560, 0x3CE0747D, 0x47680040, 0x35A0A09A, 0x0E70DEC1, 0xB709F07E, 0xC6F80670,
    0x79510CB3, 0x35A8934E, 0x8D49896A, 0x0C71CBD5, 0x0AD4FD4D, 0xF0790541, 0x0BF0A96A,
    0xD9508059, 0x90DFC6E0, 0x09D19036, 0xE50A5BFB, 0xF0E428C9, 0x40908FD2, 0x6A0500AB,
    0xA1F97160, 0x8C206C05, 0xA50CF6FC, 0x4B364C08, 0x9FD0E719, 0x58256053, 0xB3C71822,
    0x0B409A07, 0xAB73F060, 0x48C60DC4, 0x22A4B397, 0x310A608E, 0x60C83560, 0xA790F439,
    0x0B0710BC, 0x7103164C, 0x01737405, 0x9BBBE641, 0x70AB7C82, 0x10494445, 0x08276054,
    0xF076A330, 0x19B299BE, 0x7110C0F1, 0x30B97C75, 0x4230A30D, 0xAD0D6399, 0x20840750,
    0x5130190A, 0xAE00A8D4, 0x10730BC1, 0x8250EA39, 0x7C0610CA, 0x4D8108D0, 0x7982F04B,
    0x3703D0C3, 0x378C0DE4, 0x067D5BAC, 0x617F61BB, 0xA08B07D0, 0x0BCB5D02, 0xDD0F1391,
    0x008B0C3D, 0x05004503, 0x02180BE8, 0xC02E5FF0, 0x0C10D598, 0x74213D6C, 0x60906A8C,
    0x02B097AB, 0xAD7F6C19, 0x56ED14B6, 0x9E60340B, 0xF443EC32, 0x640E71F0, 0xEA2B78B7,
    0xA6BFB14B, 0xB4200350, 0xC029D30C, 0xB30EF0E0, 0x303F07AE, 0xE98ED804, 0xD20081E0,
    0x680F3EA1, 0xB0ACD0B3, 0x49A404AF, 0xC06B9938, 0x0430A108, 0x82D20B19, 0xDE5F0F22,
    0xB3B0720C, 0x0D7F5104, 0x5851953A, 0x0FED050E, 0x8F0D5508, 0xDA000449, 0x06605610,
    0xEB015076, 0xF2330936, 0x8317ADD2, 0x200B0095, 0x8C367B50, 0x42274DC3, 0x8742419B,
    0xB0D68F17, 0x0550BC42, 0x9708306A, 0xC26304C0, 0x7A5E350D, 0xC00D627D, 0xB3530700,
    0x03C1DBF3, 0x0F04B03E, 0xC0A40830, 0xB25C5E0B, 0xEA0DFE17, 0x30B83FC0, 0x17417206,
    0x53A51182, 0x50B79E2A, 0x0E121C05, 0xF20E1508, 0xB103CEA3, 0x8E32E9C2, 0x0002A0A1,
    0xD23797B7, 0x05E07AD3, 0x3DB904EE, 0xB015F30B, 0x7ABD2DD5, 0xB10D5761, 0xA01ECB30,
    0x00512273, 0x6F0CA2B7, 0xC7E77500, 0x09207610, 0xDA0150A1, 0xC0A60D57, 0xF51A6B09,
    0x9206B0AA, 0x2CEE09C0, 0x04003D10, 0x7400B051, 0x48320B85, 0xDC20EC19, 0x7C05F0C7,
    0xBAE208A0, 0x08A63A45, 0x0904138E, 0xB67D65D2, 0x063F640E, 0x655D384A, 0x907805D1,
    0xCB002E08, 0x6BC6FD1F, 0xB0340848, 0x00D05604, 0x6CA82182, 0xF07459A5, 0x6CBD2073,
    0x0D0F01A8, 0xD07B0B57, 0x05B0B209, 0x0C54EE96, 0x450210BD, 0x0B6A7E00, 0xE53FA054,
    0xB0DFF1A0, 0x0C6AC50E, 0x4E44C065, 0x6E7210C4, 0x0C099900, 0xE1194FE9, 0x87858CC0,
    0x07D0E31A, 0xD6E9F100, 0xA83D1B96, 0x10900020, 0x80341400, 0x656A241C, 0x6226CFCC,
    0x2A71E8E0, 0xA71FEE16, 0xF92AFD8A, 0x4ECCF6C2, 0xE03B55A5, 0x50A0149C, 0x611FCAE5,
    0x54201CB6, 0x4C9797AA, 0xC3B1BCC1, 0xBFE731A8, 0xFDCADD9A, 0xCAAB7501, 0x5403A212,
    0xE612B0FE, 0x7B63AB61, 0x07030936, 0x61A7276F, 0xCC7DF8E0, 0xA44EEBD6, 0x06142655,
    0xA5761958, 0x40933F98, 0x8D05A240, 0xF9705515, 0x87045276, 0x66AC91CF, 0xCA10CAA7,
    0x802C4164, 0x24C26325, 0x180A9430, 0xBAC04C97, 0x6FEB837D, 0xF46FB053, 0x9672CD1E,
    0x481F0C09, 0xBA08D221, 0x2F930404, 0xFAD8D46D, 0xD8098CFB, 0x2C7966B6, 0x57B15AB1,
    0xABD66AF5, 0xE1F8CC61, 0x5C281000, 0x9E37168A, 0x62DFF19A, 0x8502EA6F, 0xE0A635C2,
    0x8DC5D6C1, 0x0401BCAF, 0x9B3E010E, 0x64D14564, 0x6EE15BD3, 0x8E9CF0E4, 0xC2A8D0A2,
    0x9D448736, 0x17AD88F8, 0xE88F7BDC, 0xC66309FA, 0x6A274AA1, 0x145850E0, 0xB825592B,
    0x9AE122F4, 0x59AC8B46, 0xA0F27095, 0x5A920022, 0xAE0361A2, 0xCD6B1276, 0xA942490E,
    0x4CFC1260, 0x7CAA04E1, 0x1AA5D924, 0x8490D655, 0xEA540B93, 0x16288801, 0x5C13E3F0,
    0x9D8DE0F2, 0xE6B97A4A, 0x50F82F98, 0x00AF8684, 0x010BA380, 0x99256914, 0xE7036E20,
    0xF1D6CE12, 0xC45C13C3, 0xED896A20, 0x0BA00800, 0x2171123C, 0x11A45B92, 0xE0AA9366,
    0x62954449, 0x0A41B906, 0x2E38182F, 0xF8032CCB, 0x34450F02, 0x3C18E880, 0x1AE6D474,
    0x27B9C127, 0xD4CE8D37, 0xB85F9307, 0xC811C721, 0x9223993A, 0x084B5253, 0xC8A8B12C,
    0x0A0411A3, 0x3C97E541, 0x1E26F3A2, 0x5371FF35, 0xB8F26C1B, 0x602395C4, 0x2AB5B194,
    0x94E424AF, 0x44D0F65F, 0x79DC6F98, 0xC27F22AB, 0x490E467B, 0xA141D94E, 0xE344F294,
    0xA038480F, 0xCE5042A4, 0xAAADE7DC, 0x974491F8, 0xC2F95A6A, 0xCABC478F, 0xE02D35B3,
    0x0101E438, 0x4CE409A1, 0x88AAA67C, 0x19AAC327, 0x135295F4, 0x29A1353A, 0x0363A8D2,
    0xC6596446, 0xD58EB813, 0x167BCCED, 0x4D992581, 0x0F6350B4, 0x093CB20A, 0xE900010E,
    0x2E1C1724, 0x651B45F9, 0xD34B7B12, 0xD6C11A78, 0x50E02B10, 0x02B101A4, 0x4E910380,
    0x9A6FB850, 0xAB63C854, 0x91B6CD9F, 0x624D8F46, 0x1D864259, 0x8D4048C6, 0xC1B93643,
    0xF9966DCD, 0x16EA276C, 0x679664D5, 0x4B568801, 0x8212C393, 0x20222E8A, 0x26611544,
    0x7B1C0A79, 0x9CEDE50E, 0xE2B976DF, 0x380F9D07, 0x94E467B9, 0x28B9CE63, 0x30CE9BA8,
    0x45651872, 0xEA54ED0A, 0xC513BBEE, 0x5891D6F3, 0xA183F996, 0xEF6A14F5, 0x5160463D,
    0xE9339286, 0x69972481, 0x840FD96A, 0x700BFEFE, 0x3A2B02C0, 0xF6D6D3D0, 0x0A1504C8,
    0x9490A926, 0x449ADB08, 0xE1586B17, 0x540C13F7, 0x2D08E21A, 0x0EB9B814, 0x8499D742,
    0x99946B17, 0x5E1B11CC, 0x40DD409C, 0x07A5F94C, 0xEC39824C, 0x71D86FA9, 0xCC659604,
    0x95009748, 0x9103D0BC, 0x45C92415, 0x8F345F1A, 0x825510C7, 0x22860449, 0x67C070A0,
    0xA00AF7DB, 0x68CE2E08, 0x524A0EC0, 0x662E6229, 0x9BBCB940, 0x558AE071, 0x19349DB7,
    0x1E791BE6, 0x2E920673, 0x8223C0DC, 0xA418E0BD, 0xC9260912, 0xD84D1A85, 0x7F1C14EC,
    0x984CE12C, 0x25312639, 0x13591786, 0x2E448E43, 0x51193AD8, 0x2AD5958C, 0x05AC9648,
    0xE1103C8B, 0xD2012575, 0xC20BCBC0, 0xD5848BD3, 0x92021F0F, 0x00C22246, 0x20544007,
    0x12FA5D4B, 0x0A319E5A, 0x7C25588E, 0x5651D0FD, 0x578980EE, 0x247D6090, 0x4022439B,
    0xA04A02D1, 0xE9553C68, 0xA1E0FD47, 0xE3245788, 0x50FA1D0E, 0x87009696, 0x10601835,
    0x16C5F0A6, 0xF08E1734, 0xDC26A3F9, 0x06604700, 0x162205A3, 0x204B2540, 0x10181C03,
    0x82F45208, 0x06E9D10D, 0x97031238, 0x1A6EA07A, 0x65031898, 0x34AA6032, 0x2F132224,
    0xE830D320, 0x84EA1BA5, 0x58940F23, 0x754C1305, 0x81B19F3B, 0x40C8990F, 0xBC814AC1,
    0x1FC554A9, 0x50070284, 0x16843172, 0x460A6168, 0x6EC9E364, 0x30338700, 0xA8B413A7,
    0xC3451E02, 0x81D4710D, 0xC278AA12, 0xB014F2D2, 0x12C0A850, 0xCC460228, 0x65AF81EC,
    0x6D0AC1EC, 0x14BF83C8, 0xD8330562, 0xE08D02A1, 0x68A8261A, 0x61945945, 0xC0F8900F,
    0x00686911, 0x19E2D047, 0x3B93386F, 0x700C5136, 0x7035A3E8, 0x2428C490, 0x405B0900,
    0xCB3113E3, 0x17142507, 0xC2343A8B, 0x89501B13, 0x8470960C, 0x14820804, 0x6DC368BC,
    0x6B4CA1D2, 0x780BC33C, 0x3E0F0458, 0x643C8018, 0xC0381622, 0xB532368A, 0x61B5E829,
    0x89543586, 0x8850E618, 0x1A47DC12, 0x3C9338B6, 0x620AB10E, 0x4706A250, 0x02F58278,
    0xF4955039, 0x08628FF1, 0x303C2584, 0x22F85388, 0x86B4250D, 0x47556033, 0x24047870,
    0x21C348D0, 0x5ECE2134, 0x9BA32429, 0xA8DE4100, 0x76028B41, 0xE0FB978B, 0x0152355E,
    0xC2984807, 0x8009C703, 0xC967D01D, 0x7563645E, 0x5B57AC28, 0x4D0D17EE, 0xEF0FA188,
    0x840DC953, 0x583B804A, 0x204615A2, 0xA8C63593, 0x84C5C391, 0x82186817, 0x00A0E018,
    0x1241CE98, 0x254148A9, 0x608D7178, 0xBC37752C, 0xA4FDC7D4, 0x029F09E1, 0x402D2155,
    0xE518016B, 0x46794228, 0x1421BA79, 0x0AA10E39, 0x39215462, 0x1912C9CB, 0x0A0870EC,
    0xCF16A23C, 0xE6CC4440, 0x9C7DBF51, 0xC0BD1AE8, 0x314E2543, 0x4BA4AF83, 0x9F407500,
    0xCF89B80C, 0x3123DC8A, 0x3786009A, 0x2BA611B4, 0x3CB3C184, 0x0A1B53CB, 0x641389B1,
    0x4C151770, 0xB9166EA1, 0x4176B58E, 0x8E350492, 0x08A0DA00, 0x3360AC4E, 0x6A05E0D9,
    0x674DC82F, 0x9B1121B4, 0x22000168, 0xFAD83257, 0xE87C88AA, 0x22682CC4, 0x03946F0C,
    0x9460DD8A, 0x2D051E2A, 0x152F9D53, 0x31D85831, 0x430F4508, 0x731862AC, 0xCA154288,
    0x349500B0, 0xB87F0D41, 0xA6A62340, 0x7154AAAD, 0x0308AC49, 0x44755620, 0x950C5027,
    0x2E43A8C9, 0xD68F14CF, 0x700CE150, 0x02210080, 0x916F0975, 0xA0B81B0F, 0x11482403,
    0xCCECA382, 0xC2F8BD9A, 0xD5A1CC6D, 0x0C63646B, 0x1184987E, 0x3AA798D6, 0x74061828,
    0xD63486AB, 0xC4460F09, 0x587A1942, 0x90F81B42, 0x50409500, 0x069A4A03, 0x0F49D62A,
    0x18C2B844, 0x1441F8A8, 0xE2C0E0D6, 0x482BF8F6, 0x441FE254, 0xF4350B91, 0xD2871D04,
    0x31D036D1, 0x21605592, 0x800A4348, 0xD9215523, 0x53D4490A, 0x224793E1, 0x440C7158,
    0x7E0D2150, 0x512FC080, 0x10536092, 0xA8DC3361, 0x06635786, 0x63167D8F, 0xC3C05A0F,
    0x90AAA821, 0x0137D425, 0x32457089, 0x759BC0CE, 0x507C4B20, 0x4D8746BC, 0xB6B40491,
    0x79AB9000, 0x11677232, 0x83609E84, 0x87B15566, 0x07C19E80, 0xCE8ED5AB, 0x27C3EE76,
    0x7586616A, 0x9E5BB91E, 0xA0365F22, 0xE851D2C1, 0x89AB83E0, 0xA0DC0091, 0xF0941BE0,
    0xC7E415B0, 0x0ED9D667, 0x0FC32EF5, 0x2443F06A, 0x30909A04, 0x0E120220, 0xEC328F88,
    0x4C74CEB0, 0x0E20D211, 0x712C1D05, 0xB38C118A, 0xC4C0820D, 0x0B14C807, 0x318B76DD,
    0x2B0440F3, 0x8306D188, 0x61C7DA1E, 0xA4012BB9, 0x044B847C, 0xBA661B83, 0xB2AAB772,
    0xC342620F, 0x03084B15, 0xD1D9A01B, 0x967A236F, 0x1AF21880, 0x758DF798, 0x241AE750,
    0x49470562, 0xB8EBE4F6, 0x7EFB07C2, 0xD1B86146, 0xEA8C3A0E, 0x01BD420C, 0x06E94642,
    0xC4A06841, 0x7B5838CA, 0x310A3A45, 0x47434224, 0xA403224C, 0xBCB63546, 0x68E47343,
    0x594327CD, 0xC22C5F29, 0x87A8DF49, 0x8C1AB625, 0x05227CEE, 0x20B7095F, 0x270BC144,
    0xE21BC4D4, 0x9A3918D0, 0x38298B23, 0x98809E36, 0x6AC40A44, 0x23C8B60C, 0x57D88BD8,
    0x879964BF, 0x19A9C807, 0x3D08A9F4, 0x5E8D555A, 0x2F6041A4, 0x09BD77A5, 0xB112003A,
    0xA8D726D5, 0x853C6820, 0x61C87215, 0x4A18A712, 0x131C9E51, 0x27A1345F, 0x9AEB7C3C,
    0x430E72AA, 0x6818029C, 0x5AC533A8, 0xC02884B3, 0xD88100C1, 0xDB301839, 0x5BA7628D,
    0xAE609923, 0x8B8D3238, 0x254E842E, 0xFC595B29, 0x1EF59B7E, 0xC51B4F92, 0x42230380,
    0xAF0D82E1, 0x204B04A6, 0xE0F80182, 0x06105A89, 0x5438E773, 0x0AB111A7, 0x9DE16C63,
    0x15C95006, 0x618890F2, 0xA319C2D6, 0x9F05ECAD, 0x817E0BA6, 0x527A7FA2, 0x20C2004D,
    0x00544587, 0x9120C9CF, 0xBE11CCA6, 0x1B08E87D, 0x2C1870C3, 0xD1037E20, 0xB13AFAA5,
    0x72D3C198, 0xC4704BB1, 0xDBC523AA, 0x6180A006, 0x58B3157B, 0x046CDF2C, 0xF19C4006,
    0x3CAFD68A, 0xE0440190, 0x95762FDD, 0x8CCE59C0, 0x6A27B1B0, 0x99A0779E, 0x7687A88A,
    0x68258433, 0x00782D02, 0x2F0E2BFE, 0x604183B8, 0x05784480, 0xAA889864, 0xD8D10790,
    0x11206606, 0x3CBD2058, 0xD01A0169, 0x03C00282, 0x2685604C, 0x586C8DB8, 0x038871BC,
    0x2C851047, 0xF8128100, 0x884AD001, 0x5B0B3A8F, 0x385A8688, 0x29487B13, 0x4703504C,
    0x035D84F8, 0x83882780, 0x6617C1EA, 0x88AAB970, 0x8698DB87, 0xF1AF08D6, 0x0853842A,
    0x0A80A706, 0x66288078, 0xB8420360, 0x95E91704, 0x580A72E1, 0xD17801E0, 0x0DB86D06,
    0x5F940076, 0x33C20328, 0x0348953C, 0x91285043, 0xBC1D85A2, 0x95C85138, 0x95009847,
    0x58160128, 0x8A700302, 0xE283D859, 0x69320761, 0x2C5AAB06, 0x071752E1, 0x292C97FC,
    0x83D03483, 0x62B2D005, 0x237D8348, 0x85F3E107, 0x3486586B, 0x104B0418, 0x81F80138,
    0x03830822, 0xD8518400, 0x94203805, 0x3221E876, 0x90A706A9, 0xB2782385, 0x3B0308D6,
    0x04238870, 0xA1EA2A04, 0x3F0681E2, 0x40E50A08, 0x82D8A389, 0xF880A830, 0xE96F04E1,
    0x05F31021, 0x49840833, 0xDBB0B668, 0x806B950B, 0x3E06596B, 0x2943B198, 0x06706D8C,
    0x5384A039, 0xCC5681F8, 0xAC31B293, 0x8AB35053, 0xD8B4A038, 0x84183204, 0xD6173848,
    0x80410328, 0x8F880584, 0x8D02A064, 0xAA93A891, 0x07286F97, 0x66037209, 0xF02E8AFC,
    0x00884203, 0x3C065254, 0x8A9CA6D0, 0x06805AB4, 0x68B6784F, 0x10F6353B, 0x2F517303,
    0x8A957865, 0xD3BD1E48, 0x04C25B29, 0x3502B021, 0xABE435D8, 0x84283637, 0x57982A67,
    0xFBBCC791, 0x06F14C87, 0x2BB96072, 0x64443708, 0x3E6BE58D, 0x0C869125, 0xA1D43AC9,
    0xC8385B06, 0xE1885258, 0x72728040, 0x94203105, 0x6B1E2873, 0x30478390, 0x38802285,
    0x3C13C9D1, 0x685784D0, 0x86C24B81, 0x7C2ED862, 0x48430669, 0x095475C7, 0x0C25002A,
    0x804EA4E0, 0x09E8790B, 0x968D685E, 0x13BE8978, 0x19883406, 0x6C05E913, 0xE2DF06D8,
    0x27182104, 0x17123831, 0x5864AB10, 0x11A078A7, 0x2283E063, 0x52508300, 0x04283189,
    0x5C0491ED, 0x6AF606A0, 0x86A9D40B, 0x4983A05D, 0x580E8518, 0x4B535489, 0x69262021,
    0x8A620480, 0x03503D06, 0xFE84D042, 0x0B1EAE21, 0x03B03100, 0xA4954B30, 0x4A06A05B,
    0xCB0315B1, 0x20C1F803, 0x585D3C44, 0x85E0AC02, 0x799F096D, 0xC06B88F8, 0x04103304,
    0x519BF84B, 0x200697E2, 0x1980C104, 0xB787A94D, 0xC0482938, 0x05D86905, 0x160454B7,
    0xC03312C8, 0x8B43F883, 0xB6050066, 0x2A930B70, 0x05BAB13F, 0x14054296, 0x8BCC3538,
    0x06497000, 0x9145A048, 0xD86E1374, 0x04C03C86, 0x2B028057, 0x7A5082E0, 0x02B825B2,
    0x1F80184B, 0x38400358, 0x03E83180, 0x48812048, 0xA9579EE8, 0x45387D0A, 0x358588CE,
    0xC04C0418, 0xAE1AEA4E, 0x1884D8EE, 0xF0630F08, 0x1D74B9AA, 0xDD03E861, 0x61531DE1,
    0x8314F74F, 0x08046842, 0x5824B918, 0x26405D27, 0x9487928A, 0xF839850A, 0x8AF8129D,
    0xA7411C10, 0x081E05A0, 0xA93A4CCF, 0x6E09E8C4, 0xA85E26B0, 0xC3DC3C82, 0x238210D6,
    0x58429958, 0x04B06105, 0x764E91FA, 0x40574823, 0x22D8318A, 0x27A82465, 0xC850040B,
    0x85F9CB05, 0x6F86806D, 0x1A45A8AC, 0x858AE406, 0x95484817, 0x7825895C, 0xC5C12B82,
    0xBF82905A, 0x604522BC, 0x83A06305, 0x092FF82B, 0x6BA88950, 0x06192880, 0x7A1E68A7,
    0xE862B850, 0x01805230, 0x3C1683A3, 0x005804C8, 0x8690EA02, 0x4087589E, 0x885E0518,
    0xA78CD283, 0x5A0B3CE5, 0x88580670, 0x98D07A19, 0xA2BC1851, 0x905F94A8, 0x07314202,
    0x29B96323, 0x0968C430, 0x03EC8B80, 0x67ABF011, 0x61AF8588, 0x04C86421, 0xDB83CCAB,
    0x4CD1884C, 0x8612B980, 0x50AF6AD1, 0x93290673, 0xD2D0BD81, 0x4722C92B, 0x9C3A80D8,
    0x40736E80, 0x3802C82A, 0xFA1B8040, 0x04A02505, 0xAD85815B, 0xA04F8651, 0x03A06411,
    0x34063A16, 0x325B0478, 0x23118584, 0x298798A8, 0xDC414882, 0x027060CD, 0xB288555E,
    0x5069CFC1, 0x3FB4FDD4, 0x2C84F2B1, 0x283E8340, 0x2720E2D2, 0xD8AAC04B, 0xA08ECD6C,
    0x9E107B28, 0x3982C84B, 0x65758430, 0x91099D89, 0x9E83005B, 0xE98E8728, 0x31010916,
    0x56843863, 0x083EB370, 0x4DD82B0A, 0x1282A85F, 0xE033865B, 0x944849A4, 0x35A9286C,
    0x68462CA9, 0x02E04921, 0xBD04203C, 0x2C112B38, 0x05284100, 0xE282385F, 0xB34786F9,
    0x4A0C6008, 0xA0825851, 0x0020851C, 0x027A6B84, 0x3F0668F3, 0xED2684C8, 0x2C188AAA,
    0x77275A14, 0x406BA650, 0x85D45085, 0x1A0F5096, 0xB4A9800C, 0x16296180, 0x4FC530A8,
    0xB1568B8B, 0x30485506, 0xB0D2BB66, 0xF01F8180, 0x83F00701, 0x4605C850, 0x54DFB7D8,
    0x27B28AB7, 0x3A31D062, 0x1D233060, 0x03882EA8, 0x670B447E, 0x79CD03B8, 0x58189D5A,
    0xC9079870, 0xE9EC0454, 0x52C47384, 0xBE8008E3, 0x830B8BF8, 0x84822CA3, 0x3CC9480C,
    0xE00CDC21, 0x9CD1EF1E, 0x574C787C, 0x983D8320, 0x93CCC504, 0x4C83B4A2, 0xA02B0560,
    0xA3286F8E, 0x2D059BD5, 0x0B43D130, 0x1DF83C00, 0x311C5212, 0x995AD37A, 0xA9804386,
    0x4D846034, 0xB1BA01F0, 0x9CD06C06, 0x6DB6C877, 0xCC1999D3, 0x3DEBDDBD, 0x6F049068,
    0xC86A95A9, 0x84783985, 0x90D12052, 0xF03EC11D, 0x02F85B04, 0x780DEACC, 0x806F86D9,
    0x5ABBB82C, 0x2C48D095, 0x683F4CDD, 0xC9701004, 0x7A0AA9EF, 0x88B82640, 0x9CD59F87,
    0x6C48856B, 0x85E81345, 0x86336C86, 0x3C831835, 0x597F9ED0, 0x84A04203, 0x7130A01D,
    0xB2B829C1, 0x4BA87789, 0x1A02A03E, 0x18E2B892, 0x05741280, 0x699E2821, 0x70AAB350,
    0x064D8D07, 0xBD4F403A, 0x98008D5C, 0xC970CA8C, 0x04D6B263, 0xC9CD0AB6, 0x06D85F40,
    0x741E2875, 0xE1038DB8, 0x15988BA5, 0xC65F397A, 0xD0DF8718, 0x81B83605, 0x2C02581D,
    0xFBCAC9B9, 0x06085413, 0xC693382F, 0x9A1E9F13, 0x86F1A7CB, 0x37CD9350, 0x337D86F9,
    0x96DCFDB9, 0xE106F275, 0x0049869C, 0xDFFBF048, 0x00600835, 0x0B455D08, 0x18E18D02,
    0x4D2CBA14, 0x70458711, 0x03186405, 0xA982F02D, 0xB81A12CA, 0x80682281, 0xA685CD24,
    0x814306FD, 0xCB394FDA, 0x4583686B, 0x0BD2A118, 0x146370A4, 0x164A6430, 0x528A3F2D,
    0x86660E18, 0x24057A0D, 0xEBDC1208, 0xDEBA81DB, 0x4103593C, 0x381504A8, 0xBF186B11,
    0x476063AC, 0xC82E8210, 0x55F42102, 0x60B01560, 0x61CD0390, 0x85F04C87, 0x1206906E,
    0x946C8591, 0x3C98A2BB, 0x6A39F021, 0x107739F0, 0x12CA8730, 0xD303A82F, 0xAA4CAB11,
    0xAEE8798A, 0x1B848061, 0x082A0258, 0x62688533, 0xEFB2D004, 0x8985E0D2, 0xA7151406,
    0x4654CB54, 0xA81A0569, 0x85F10A84, 0x5A86A9C4, 0x285A3D58, 0x641C5DBC, 0x33828576,
    0x680E03C8, 0x85F44CB3, 0xC62A506C, 0xD08B1B68, 0x2F6ACB1C, 0x420771CD, 0x5DA906E9,
    0x05FB0105, 0x3E83582C, 0x231E04A8, 0x0940FE92, 0x50846837, 0x126E0268, 0x0738C617,
    0x78C9F1CD, 0x6DF80679, 0x81280032, 0x70642870, 0x91A42A1B, 0x14244102, 0x7394D610,
    0xE03ED580, 0x82785B04, 0x47A42A41, 0x88381215, 0x81805404, 0x5084AC76, 0x59E69EF3,
    0x8DBDF287, 0x7C27587B, 0xD07A9338, 0x103998E0, 0x6A3CF3E9, 0x906B6658, 0x8C804805,
    0x53260040, 0x0CA28170, 0x355AA1AA, 0xC781C851, 0x9CA6050C, 0x36294206, 0x951CD17B,
    0xD2CB0C66, 0x5F107B14, 0x7F0751CD, 0x265ABF9B, 0x011DAA83, 0x2F0B0D6F, 0x7B8BB303,
    0xA750EA03, 0x7D8741E6, 0x2310072B, 0x8D383985, 0xE3E630D4, 0x581A8190, 0xDE500482,
    0xB3B7D05B, 0x1686B4EB, 0x273A37C4, 0xC71DB46D, 0xD040836A, 0xB9181184, 0x4E0C65DF,
    0x6133C911, 0x8660C787, 0x3D031842, 0xADEAD7C8, 0x800A40E6, 0x496BD8EE, 0x435704CB,
    0x06440A06, 0xCB82A032, 0x6828E27E, 0xDA583D03, 0x59D1E925, 0x285C3106, 0xA223E3BE,
    0xE583FC11, 0x114202D5, 0x8710EA07, 0xEC857A72, 0x902B0E38, 0xA0920683, 0xC7CDF157,
    0xB85B0668, 0x2A0E6CE6, 0x4D03D1A0, 0xE8290590, 0x89E87209, 0x92841873, 0x00FF0305,
    0x833CBD90, 0x59146315, 0x329901A0, 0x83481505, 0x0684B03F, 0x492D6C5C, 0x206ED935,
    0x5404A03A, 0x184101E0, 0x03205E85, 0x4205C0A0, 0x905B91E8, 0xDAF8D984, 0xB685EA1B,
    0xD8262EF5, 0x01205420, 0x3CEC5555, 0x203A02E9, 0x32100E84, 0x4A82505D, 0x00298601,
    0x841829F0, 0x7202526B, 0x4993DC9C, 0x80FC755A, 0x2585E898, 0x0F08F018, 0x02D824D4,
    0x7984283E, 0x78E3E79B, 0x25325232, 0x1C854BB7, 0x085E39D0, 0x03FE1503, 0x4785B5E5,
    0xA84E83F0, 0x11084A05, 0x1204705C, 0x4035F077, 0x06185504, 0x5284002A, 0x801D05D8,
    0x04C04203, 0xEBEEA811, 0x5CA368B6, 0x82F36E8D, 0x9BBF8840, 0xB99B81B6, 0x05E6F102,
    0xE003F83A, 0xB11E8440, 0x6F484985, 0x92F18048, 0xDF028315, 0x853CC3A3, 0x3683180F,
    0x3B1604A8, 0x13E0D5EB, 0x5084013F, 0x381885E0, 0x701828C3, 0x29140843, 0x92E483E8,
    0x1DBBF6A6, 0x47838001, 0xD8100510, 0x70805FCD, 0x3F7013BF, 0xA0267007, 0x53B00E24,
    0x842C7193, 0xF24E2852, 0x1E394203, 0x7C5A8579, 0xD05A1A78, 0x81ADE583, 0xB16ECDC3,
    0xEF0436EB, 0x04703700, 0x3A819852, 0xD85304A8, 0x75207080, 0x8E800BE4, 0xE1BCCE3D,
    0xC672FDBA, 0x33825848, 0x58952530, 0x043C46C4, 0x12062856, 0xE87809B1, 0x20D86889,
    0xDC92CBED, 0xE702803D, 0x89E83E85, 0x6D0CD877, 0x58370690, 0x01B84F84, 0x5054D148,
    0x3818056F, 0xAF6A8976, 0x43067D68, 0x64094080, 0x74BE838D, 0xA2800A82, 0xA01B80E4,
    0x01400401, 0x0581E816, 0x88053428, 0x6BB419C1, 0x94BE4236, 0x301F8258, 0x779F788A,
    0x766FBF79, 0xB0BE7675, 0xF7D77A77, 0x81CCC921, 0x47717702, 0x81881680, 0x72805021,
    0x8774F73F, 0x51A00438, 0x6E6BB003, 0x6B27AD87, 0x01900CF8, 0x82004817, 0x578C7837,
    0xF71F7080, 0x42802B42, 0xDF782D87, 0x77F791F7, 0x7AF913FE, 0x89537947, 0x027AA9AA,
    0x409EA832, 0x1CF6CF5E, 0x04283280, 0x21005852, 0x101605C3, 0x6740411E, 0x9D2D48B8,
    0x06039598, 0x95FE1A94, 0x6EB39836, 0xE8D57A47, 0x04E03DB6, 0x8D02605A, 0x46A206F1,
    0x86085484, 0x29819032, 0x38853C10, 0xCE157CEC, 0x7B998D3E, 0xF49A5E08, 0x8E3DB4B8,
    0xDF121006, 0x502A0541, 0x39F06EB8, 0x57CF2074, 0x6F600318, 0x00D12F31, 0x42051349,
    0x68B986F1, 0x97D84486, 0xBFFA4F58, 0x17C0FC07, 0xFC27C1FC, 0x95A827C2, 0xC8519C27,
    0xB3C02485, 0xA6045863, 0x5034859F, 0x82A71368, 0x4B83854F, 0x606E0600, 0x8729CD05,
    0xB1B58933, 0xB8DB87DD, 0x05A84886, 0x3A83A869, 0xBF510470, 0x4447C377, 0x3E803435,
    0xA05B04D8, 0x86C91382, 0xD05A0866, 0xE81F3053, 0x8340AFF7, 0x0AA122D1, 0x93483F19,
    0x17204934, 0x36F05173, 0x939B0468, 0x6A5926DA, 0xB69E94EE, 0x24D2C215, 0x81D0574F,
    0x60055042, 0x46B202A0, 0x02A01B8D, 0xD6627827, 0x17F0FF07, 0xFF27F1FF, 0x753317F2,
    0x60542991, 0x8545E081, 0x770EA4AD, 0x2871CF08, 0x6701E39E, 0xC55F44E8, 0xD87B8AA8,
    0xA504C975, 0x0C05904A, 0x02380800, 0x68280005, 0x84C220F0, 0x6C32170A, 0xC421F0E8,
    0x68030988, 0x0287B351, 0x80A8491D, 0xEB950200, 0x7F3915C9, 0xD00C182E, 0x02968682,
    0xCC7D4680, 0xB61BCC14, 0xB1BEC24D, 0xD92AE463, 0xE0622199, 0xF0889028, 0x13411BCB,
    0xA662C91C, 0x7030D369, 0xAAF128F6, 0xA24D6BC6, 0x1E4A2A50, 0xC09561BC, 0x7D5494C9,
    0xF5EAED72, 0x62B0D82B, 0x6B2D92C7, 0xB4DA2CF6, 0x5DAAD76A, 0x018E0512, 0x3D78A440,
    0x1B6BF4C1, 0xC0C44DB4, 0xB494E3E5, 0xE162A71F, 0xAC1E05FE, 0xBF3F9C17, 0xB61DF8E0,
    0x389BD2E7, 0xB9ACBB4A, 0x588AC43A, 0x3A833817, 0xAE100051, 0xA2B60057, 0x50158347,
    0x0312C582, 0x2174E000, 0x1A0A1068, 0xBD160E40, 0x2907B64A, 0x7E9975B8, 0xC7667375,
    0x4B20AB52, 0xFAF80F86, 0x0396CC23, 0x23055486, 0xB8A5E9A3, 0xF195774B, 0x882B34E9,
    0x49AE3840, 0xFDEEEF73, 0xE2F0F83B, 0x9F2F93C7, 0x38168050, 0xF1F43C87, 0x240D0B54,
    0x4D50CE5A, 0x998D45CA, 0x5CDE6DDD, 0xC9770B76, 0x48D83657, 0x902F9F62, 0x264D22D8,
    0x8C32AC84, 0x82547618, 0xE05A0A0A, 0x054F4871, 0x861E6685, 0x863005E2, 0x0064861E,
    0x58D12DC9, 0xE84CC9A2, 0x27CD480C, 0x49520C65, 0x91412508, 0xF45D6C87, 0x5B074931,
    0x080851C0, 0x86316C4B, 0x176D0604, 0x64841940, 0xA72102C2, 0x20C792FC, 0x45B300A9,
    0xE258861A, 0x4A198F81, 0x55952539, 0x9625795A, 0x65B0B5E3, 0xC1584801, 0xCC5A0646,
    0x770D0861, 0x118AA258, 0xCBA2807D, 0x12607A12, 0xC85D108B, 0x560B8841, 0x0548019C,
    0xC059E85A, 0xA9FA5956, 0x503D0DD6, 0x86198081, 0x2083B260, 0x8772F4A5, 0x42CC9B1E,
    0x88651445, 0x8841C0B1, 0x0F4C72B0, 0x8BD28C84, 0x12647911, 0xBC9BA74B, 0x7715C3F2,
    0x41A3D1F0, 0xD7015C25, 0x11E06413, 0x846312C1, 0x7F944091, 0xAE2B7ADA, 0xEBBAEAB9,
    0x20021778, 0x144B70C0, 0x7D768137, 0x59EC7AF2, 0x85000EC1, 0x60387015, 0x34791B45,
    0x93416B50, 0x174D72F0, 0x0C82B88A, 0xE2A08316, 0x9C83188B, 0x7013CBE2, 0x088A6250,
    0x2EBB22C6, 0xFBBAEDBB, 0xCAF1BC2E, 0xB423DE3B, 0xBD46233C, 0x1F1168D0, 0xE9146634,
    0x3C70140B, 0xEA080A22, 0xC2307BCE, 0x30BC2B09, 0x179B0DC3, 0x00000010, 0x00000000

  EW_BITMAPS_TABLE( Appcygnusblue2 )
    EW_BITMAP( Appcygnusblue2, Default )
EW_END_OF_BITMAP_RES( Appcygnusblue2 )

/* Table with links to derived variants of the bitmap resource : 'App::cygnusblue2' */
EW_RES_WITHOUT_VARIANTS( Appcygnusblue2 )

/* Bitmap resource : 'App::function' */
EW_DEFINE_BITMAP_RES( Appfunction )
  EW_BITMAP_FRAMES( Appfunction, Default, EW_DRIVER_VARIANT_RGBA8888, 40, 40, 0 )
    EW_BITMAP_FRAME( 2, 2, 36, 36, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appfunction, Default )                  /* ratio 19.25 % */
    0x0409FF00, 0xC11FF020, 0xEDE2E881, 0x0720119B, 0x1F0D7F94, 0x90E88446, 0x138AC4A2,
    0x78DC6233, 0x8FC5A3B1, 0x04863D1A, 0xC8A491C9, 0x26472392, 0xA0F0585C, 0x053096C1,
    0x6D960806, 0x2894A1DE, 0xF0443E73, 0x313FCAA3, 0xA3FD2484, 0x3FD96C45, 0xFDDAEB73,
    0x5FF4C7DB, 0xA14EA7BF, 0x9517ED3E, 0xF97C3DEA, 0x671B71FE, 0x5D299FEE, 0xD955FEC1,
    0x015FE8A3, 0xAA4C531E, 0xADB279C5, 0xE6DA615A, 0x20182A19, 0x369A41A6, 0x792DAED9,
    0x7FA00DE4, 0x2BA5CCE0, 0xE1B0B848, 0x1F1388C3, 0x8975DADE, 0xDD7B419C, 0x125C9DEA,
    0x2B96DCAE, 0xFC8CEA19, 0x4B220CF1, 0x5689F8FF, 0x69B4BA4C, 0x11FF53D2, 0x338AA4FA,
    0x279BC965, 0x19A7D426, 0x467FEDB6, 0x3D09FCDE, 0xDFEFB4FA, 0xF20B0DC0, 0xEC75CA94,
    0xAB5FB7E3, 0x0AC3F04D, 0xA3C1C160, 0x5A9DFF4B, 0xC6469F8B, 0xCECF2393, 0x4A21CCB9,
    0xF78BC3D3, 0x3FEAEF6D, 0x70E8621B, 0xFB7ECE57, 0x9CC85CC4, 0x5F4F9F8D, 0xEC753971,
    0x22686DFE, 0xFFFBBD66, 0xCF13B9B7, 0x6815F53C, 0x54CA6160, 0x0A3FCDA3, 0x7B5CE100,
    0xD1F845DA, 0x71503E01, 0x121885E0, 0xC22E8A76, 0x842127F8, 0xE1983A0C, 0x91F62388,
    0xA61E2949, 0xCE8357A8, 0x81A2E891, 0xC78149A9, 0xA8022A21, 0xE62F8B16, 0xF53CE078,
    0x0C0FF3D8, 0xE351C05E, 0xA8E11587, 0xB4FF91E3, 0xF3318BF2, 0x35CD1315, 0x2468A643,
    0x88E23992, 0x4CA22587, 0x20565587, 0x88A45976, 0xE2295654, 0x42607C44, 0x3CC2700A,
    0x20944D53, 0x8926194E, 0x07748E38, 0xB3FCA125, 0x88DB6165, 0x580A55D3, 0x8DA6C1AC,
    0x8520F004, 0xF564F99D, 0x6E718626, 0x5C118126, 0x1642A3FC, 0xE813FC6C, 0xE9125EA0,
    0xECB32756, 0xEC39DA62, 0x6FE873B8, 0xA7FA5A89, 0x685113A8, 0xF22889A1, 0xFF340CB2,
    0x2E0AF260, 0x45007CFF, 0xF3ACFF19, 0x929F3C4E, 0xBCA8EA16, 0x1459CA56, 0x4F48D077,
    0xA3E98579, 0x48FF3ECF, 0x482D0AA2, 0xB3EBEAEE, 0x10FB4236, 0xF1744805, 0xF46C10CF,
    0x4F074FF1, 0x3211F18C, 0x5A6364D4, 0x33C8F03B, 0xA6D1B39D, 0x51BAAA4B, 0x17849056,
    0xCAE25CFF, 0x2B80FF2D, 0xD8AC256E, 0x7D164FF2, 0x98EE7230, 0x6BDB4AEC, 0xD43F04C0,
    0xA1D25FD7, 0x03C2EEBB, 0xC1E20C33, 0x70583EFF, 0xE48F14C3, 0xFC5910C0, 0x1BB5AD43,
    0xC7AD5C6B, 0x2BBC7F1C, 0xEC0309C4, 0x4F02C4F0, 0x69158264, 0x2C89C3FC, 0xCED3A69A,
    0x81EDF33B, 0x911F28C9, 0x8FAEDD1C, 0x3FCB22A0, 0x8BD2D4A0, 0x8C5690A3, 0x0C614972,
    0x8655D422, 0xA71A9416, 0x9836069E, 0x0D4DCFD4, 0x306CD51D, 0x7ECE4992, 0x2891FC45,
    0xD852FCB6, 0x0224689D, 0x3F47CA5A, 0xA98D2C04, 0x2A4906A5, 0x84E0733F, 0xDC1B68B7,
    0x3F12C975, 0x61130194, 0x2948C3FC, 0x4FC6F0B0, 0xC15CFF55, 0x4B4622C7, 0x4A522388,
    0xD9D9E611, 0x83D01915, 0x919C3C85, 0x46418FC7, 0x0A7073A9, 0x2146347F, 0x33261493,
    0x81080CCD, 0x6D9CE245, 0x852387F1, 0x344CB2F5, 0x6B4AC91F, 0x9390E136, 0x99465118,
    0x6D111DCA, 0xEE9D31F8, 0xCC92E9CA, 0x217D8533, 0xEBA82408, 0xF42B4965, 0x67C66612,
    0x4B92951F, 0xA1A5BF58, 0x75DC25C8, 0xA63DEC3C, 0xB88D5325, 0x08619220, 0x0AB98478,
    0xA9DCDD6B, 0x85310BD2, 0x44D90639, 0x0DE368D0, 0x52B09470, 0xD04D8A4B, 0x503FC841,
    0xFCFF1617, 0x8A53E828, 0x41072094, 0xEC7D4614, 0xEA729F43, 0x58C23F77, 0xC9137B0F,
    0x01722BC4, 0x02042F1C, 0x8012BE79, 0x0FF0A20E, 0x0B411408, 0x615C7ABC, 0x052F4796,
    0x8870C76E, 0xA030CC23, 0x4C89A6B1, 0x0A8D08E0, 0x51A83386, 0xCE0CD118, 0x20D0FF7C,
    0x30C84D07, 0x1A633860, 0xBF97E185, 0x9E19C878, 0xE81C44F8, 0xE6614750, 0xA84F0910,
    0x70FF7645, 0x2888BC17, 0x62343730, 0x47198513, 0x0FF1D63A, 0x36694623, 0x121149B5,
    0xA58810E0, 0x9B308534, 0xFE2E8588, 0x5196B2B1, 0xA0246271, 0xF55A1A02, 0x0531C22A,
    0x43884959, 0x12B57D19, 0x1844B419, 0x218790D9, 0xB205657C, 0x3E4783FC, 0xEA80CC42,
    0x35D18FF1, 0xA48F6672, 0x09272399, 0xB24A4A49, 0xA4BC9892, 0x0FF92326, 0x1E83CC78,
    0xE1644189, 0xCB25170E, 0x2E2EC214, 0xE230C009, 0x415F0852, 0xFACC5951, 0x41D03986,
    0x26255CB8, 0x65835435, 0x4A5566AC, 0x9505D256, 0xFA23ECA8, 0x1C1692CE, 0xC7445319,
    0x43324E74, 0x3A644CA4, 0x64D099B3, 0x42D059A6, 0x73023EB1, 0x00010120, 0x00000000

  EW_BITMAPS_TABLE( Appfunction )
    EW_BITMAP( Appfunction, Default )
EW_END_OF_BITMAP_RES( Appfunction )

/* Table with links to derived variants of the bitmap resource : 'App::function' */
EW_RES_WITHOUT_VARIANTS( Appfunction )

/* Initializer for the class 'App::CountView' */
void AppCountView__Init( AppCountView _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar1, &_this->_XObject, 0 );
  CoreTimer__Init( &_this->Timer, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppCountView );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const051E );
  CoreRectView__OnSetBounds( &_this->Text, _Const051F );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0520 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->HorizontalValueBar1, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar1, _Const0521 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar1, 0 
  );
  CoreTimer_OnSetPeriod( &_this->Timer, 125 );
  CoreTimer_OnSetEnabled( &_this->Timer, 0 );
  _this->dy = 16;
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar1 ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar1, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Small, WidgetSetHorizontalValueBarConfig ));
  _this->Timer.OnTrigger = EwNewSlot( _this, AppCountView_Slot );
}

/* Re-Initializer for the class 'App::CountView' */
void AppCountView__ReInit( AppCountView _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->Text );
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar1 );
  CoreTimer__ReInit( &_this->Timer );
}

/* Finalizer method for the class 'App::CountView' */
void AppCountView__Done( AppCountView _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppCountView );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->Text );
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar1 );
  CoreTimer__Done( &_this->Timer );

  /* Release all used strings */
  EwReleaseString( &_this->prefix );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::CountView' */
void AppCountView__Mark( AppCountView _this )
{
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->HorizontalValueBar1 );
  EwMarkObject( &_this->Timer );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppCountView_UpdateLayout( AppCountView _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppCountView_UpdateViewState( AppCountView _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  ViewsText_OnSetString( &_this->Text, EwConcatString( EwConcatString( EwConcatString( 
  EwConcatString( _this->prefix, EwLoadString( &_Const004B )), EwNewStringInt( _this->count, 
  0, 10 )), EwLoadString( &_Const0522 )), EwNewStringInt( _this->total, 0, 10 )));
}

/* 'C' function for method : 'App::CountView.OnSetprefix()' */
void AppCountView_OnSetprefix( AppCountView _this, XString value )
{
  if ( !EwCompString( _this->prefix, value ))
    return;

  EwRetainString( &_this->prefix, value );
}

/* 'C' function for method : 'App::CountView.OnSetcount()' */
void AppCountView_OnSetcount( AppCountView _this, XInt32 value )
{
  if ( _this->count == value )
    return;

  _this->count = value;
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar1, value 
  );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::CountView.OnSettotal()' */
void AppCountView_OnSettotal( AppCountView _this, XInt32 value )
{
  if ( _this->total == value )
    return;

  _this->total = value;
  WidgetSetHorizontalValueBar_OnSetMaxValue( &_this->HorizontalValueBar1, value 
  );
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::CountView.Slot()' */
void AppCountView_Slot( AppCountView _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup__OnSetOpacity( &_this->HorizontalValueBar1, _this->HorizontalValueBar1.Super1.Opacity 
  + _this->dy );

  if ( _this->HorizontalValueBar1.Super1.Opacity >= 255 )
  {
    _this->dy = -16;
  }

  if ( _this->HorizontalValueBar1.Super1.Opacity <= 32 )
  {
    _this->dy = 16;
  }
}

/* Variants derived from the class : 'App::CountView' */
EW_DEFINE_CLASS_VARIANTS( AppCountView )
EW_END_OF_CLASS_VARIANTS( AppCountView )

/* Virtual Method Table (VMT) for the class : 'App::CountView' */
EW_DEFINE_CLASS( AppCountView, CoreGroup, "App::CountView" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppCountView_UpdateLayout,
  AppCountView_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppCountView )

/* Initializer for the class 'App::MeshLogPopup2' */
void AppMeshLogPopup2__Init( AppMeshLogPopup2 _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->LogEventHandler, &_this->_XObject, 0 );
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Sync, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Faults, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Broadcast, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Fire, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Settings, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Mesh, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Status, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->Misc, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppMeshLogPopup2 );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const01A2 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0153 );
  ViewsRectangle_OnSetVisible( &_this->Super1.Background, 1 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const01A3 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const013A );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const01A4 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const01B2 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppLogItem ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 25 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 10 );
  CoreRectView__OnSetBounds( &_this->Sync, _Const0523 );
  WidgetSetToggleButton_OnSetChecked( &_this->Sync, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Sync, EwLoadString( &_Const0524 ));
  CoreRectView__OnSetBounds( &_this->Faults, _Const0525 );
  WidgetSetToggleButton_OnSetChecked( &_this->Faults, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Faults, EwLoadString( &_Const01A8 ));
  CoreRectView__OnSetBounds( &_this->Broadcast, _Const0526 );
  WidgetSetToggleButton_OnSetChecked( &_this->Broadcast, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Broadcast, EwLoadString( &_Const0527 
  ));
  CoreRectView__OnSetBounds( &_this->Fire, _Const0528 );
  WidgetSetToggleButton_OnSetChecked( &_this->Fire, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Fire, EwLoadString( &_Const0529 ));
  CoreRectView__OnSetBounds( &_this->Settings, _Const052A );
  WidgetSetToggleButton_OnSetChecked( &_this->Settings, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Settings, EwLoadString( &_Const01AD 
  ));
  CoreRectView__OnSetBounds( &_this->Mesh, _Const052B );
  WidgetSetToggleButton_OnSetChecked( &_this->Mesh, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Mesh, EwLoadString( &_Const052C ));
  CoreRectView__OnSetBounds( &_this->Status, _Const052D );
  WidgetSetToggleButton_OnSetChecked( &_this->Status, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Status, EwLoadString( &_Const052E ));
  CoreRectView__OnSetBounds( &_this->Misc, _Const052F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->Misc, 1 );
  CoreGroup__OnSetVisible( &_this->Misc, 1 );
  WidgetSetToggleButton_OnSetChecked( &_this->Misc, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->Misc, EwLoadString( &_Const01B1 ));
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Sync ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Faults ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Broadcast ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Fire ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Settings ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Mesh ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Status ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Misc ), 0 );
  _this->PushButton.OnRelease = EwNewSlot( _this, AppMeshLogPopup2_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->LogEventHandler.OnEvent = EwNullSlot;
  CoreSystemEventHandler_OnSetEvent( &_this->LogEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->LogListChangeEvent );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppMeshLogPopup2_OnLoadItem );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppMeshLogPopup2_RefreshAll 
  );
  _this->ListViewer.onScrollRefresh = EwNewSlot( _this, AppMeshLogPopup2_ScrollRefresh 
  );
  _this->Sync.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Sync.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Sync, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Faults.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Faults.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Faults, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Broadcast.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Broadcast.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Broadcast, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Fire.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Fire.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Fire, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Settings.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Settings.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Settings, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Mesh.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Mesh.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Mesh, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Status.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Status.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Status, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));
  _this->Misc.OnSwitchOn = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  _this->Misc.OnSwitchOff = EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff );
  WidgetSetToggleButton_OnSetAppearance( &_this->Misc, EwGetAutoObject( &AppSmallCheckBoxCaption, 
  WidgetSetToggleButtonConfig ));

  /* Call the user defined constructor */
  AppMeshLogPopup2_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::MeshLogPopup2' */
void AppMeshLogPopup2__ReInit( AppMeshLogPopup2 _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSystemEventHandler__ReInit( &_this->LogEventHandler );
  AppListViewer__ReInit( &_this->ListViewer );
  WidgetSetToggleButton__ReInit( &_this->Sync );
  WidgetSetToggleButton__ReInit( &_this->Faults );
  WidgetSetToggleButton__ReInit( &_this->Broadcast );
  WidgetSetToggleButton__ReInit( &_this->Fire );
  WidgetSetToggleButton__ReInit( &_this->Settings );
  WidgetSetToggleButton__ReInit( &_this->Mesh );
  WidgetSetToggleButton__ReInit( &_this->Status );
  WidgetSetToggleButton__ReInit( &_this->Misc );
}

/* Finalizer method for the class 'App::MeshLogPopup2' */
void AppMeshLogPopup2__Done( AppMeshLogPopup2 _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppMeshLogPopup2 );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle9 );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSystemEventHandler__Done( &_this->LogEventHandler );
  AppListViewer__Done( &_this->ListViewer );
  WidgetSetToggleButton__Done( &_this->Sync );
  WidgetSetToggleButton__Done( &_this->Faults );
  WidgetSetToggleButton__Done( &_this->Broadcast );
  WidgetSetToggleButton__Done( &_this->Fire );
  WidgetSetToggleButton__Done( &_this->Settings );
  WidgetSetToggleButton__Done( &_this->Mesh );
  WidgetSetToggleButton__Done( &_this->Status );
  WidgetSetToggleButton__Done( &_this->Misc );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::MeshLogPopup2' */
void AppMeshLogPopup2__Mark( AppMeshLogPopup2 _this )
{
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->LogEventHandler );
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->Sync );
  EwMarkObject( &_this->Faults );
  EwMarkObject( &_this->Broadcast );
  EwMarkObject( &_this->Fire );
  EwMarkObject( &_this->Settings );
  EwMarkObject( &_this->Mesh );
  EwMarkObject( &_this->Status );
  EwMarkObject( &_this->Misc );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppMeshLogPopup2_Init( AppMeshLogPopup2 _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwSignal( EwNewSlot( _this, AppMeshLogPopup2_ChckOnOff ), ((XObject)_this ));

  if (( _this->ListViewer.NoOfItems * _this->ListViewer.ItemHeight ) > EwGetRectH( 
      _this->ListViewer.Super2.Bounds ))
  {
    AppListViewer_OnSetScrollOffset( &_this->ListViewer, ( _this->ListViewer.NoOfItems 
    * _this->ListViewer.ItemHeight ) - EwGetRectH( _this->ListViewer.Super2.Bounds 
    ));
  }
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppMeshLogPopup2_OnLoadItem( AppMeshLogPopup2 _this, XObject sender )
{
  XInt32 itemNo;
  AppLogItem i;
  XInt32 t;
  XInt32 filter;
  XString msg;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  i = EwCastObject( _this->ListViewer.VerticalList.View, AppLogItem );

  if ( i == 0 )
    return;

  if (( itemNo < 0 ) || ( itemNo >= _this->ListViewer.NoOfItems ))
  {
    CoreGroup__OnSetVisible( i, 0 );
    return;
  }

  CoreGroup__OnSetVisible( i, 1 );
  t = -1;
  filter = AppMeshLogPopup2_GetFilter( _this );
  msg = EwLoadString( &_Const01B3 );
  {
    char buff[ 128 ];
    Command cmd;

    cmd.int0 = itemNo;
    cmd.int1 = filter;
    cmd.int2 = (int) buff;

    if ( Command0( CMD_GET_MESH_LOG_LINE, &cmd ) == CMD_OK )
    {

      t = cmd.int3;

      msg = EwNewStringAnsi( buff );
    }
  }

  switch ( t )
  {
    case 4 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_broadcast, ResourcesBitmap 
      ));
    break;

    case 1 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_status, ResourcesBitmap 
      ));
    break;

    case 5 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
      ));
    break;

    case 6 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
      ));
    break;

    case 0 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_link, ResourcesBitmap 
      ));
    break;

    case 3 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
      ));
    break;

    case 2 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_drop, ResourcesBitmap 
      ));
    break;

    case 7 :
      ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, ResourcesBitmap 
      ));
    break;

    default : 
      ViewsImage_OnSetBitmap( &i->Image, 0 );
  }

  switch ( t )
  {
    case 4 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0527 ));
    break;

    case 1 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052E ));
    break;

    case 5 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
    break;

    case 6 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
    break;

    case 0 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0524 ));
    break;

    case 3 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0530 ));
    break;

    case 2 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052C ));
    break;

    case 7 :
      ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01AD ));
    break;

    default : 
      ViewsText_OnSetString( &i->TypeText, 0 );
  }

  ViewsText_OnSetString( &i->DescripText, msg );
}

/* 'C' function for method : 'App::MeshLogPopup2.Close()' */
void AppMeshLogPopup2_Close( AppMeshLogPopup2 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::MeshLogPopup2.GetFilter()' */
XInt32 AppMeshLogPopup2_GetFilter( AppMeshLogPopup2 _this )
{
  XInt32 filter = 0;

  if ( _this->Sync.Checked )
    filter = filter | 1;

  if ( _this->Faults.Checked )
    filter = filter | 64;

  if ( _this->Broadcast.Checked )
    filter = filter | 16;

  if ( _this->Fire.Checked )
    filter = filter | 8;

  if ( _this->Misc.Checked )
    filter = filter | 32;

  if ( _this->Mesh.Checked )
    filter = filter | 4;

  if ( _this->Settings.Checked )
    filter = filter | 128;

  if ( _this->Status.Checked )
    filter = filter | 2;

  return filter;
}

/* 'C' function for method : 'App::MeshLogPopup2.ScrollRefresh()' */
void AppMeshLogPopup2_ScrollRefresh( AppMeshLogPopup2 _this, XObject sender )
{
  XInt32 itemNo;
  XInt32 filter;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  filter = AppMeshLogPopup2_GetFilter( _this );

  if ( _this->ListViewer.StartRow < itemNo )
  {
    AppLogItem i = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppLogItem 
      );
    AppLogItem j = i;
    XInt32 diff = itemNo - _this->ListViewer.StartRow;
    XInt32 n = 0;

    while (( j != 0 ) && ( n < diff ))
    {
      j = EwCastObject( j->Super3.next, AppLogItem );
      n = n + 1;
    }

    while (( i != 0 ) && ( j != 0 ))
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        ViewsImage_OnSetBitmap( &i->Image, j->Image.Bitmap );
        ViewsText_OnSetString( &i->DescripText, j->DescripText.String );
        ViewsText_OnSetString( &i->TypeText, j->TypeText.String );
        CoreGroup__OnSetVisible( i, 1 );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)i );
      itemNo = itemNo + 1;
      j = EwCastObject( j->Super3.next, AppLogItem );
      i = EwCastObject( i->Super3.next, AppLogItem );
    }

    while ( i != 0 )
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        XInt32 t = -1;
        XString msg = EwLoadString( &_Const01B3 );
        CoreGroup__OnSetVisible( i, 1 );
        {
          char buff[ 129 ];
          Command cmd;

          cmd.int0 = itemNo;
          cmd.int1 = filter;
          cmd.int2 = (int) buff;

          if ( Command0( CMD_GET_MESH_LOG_LINE, &cmd ) == CMD_OK )
          {

            t = cmd.int3;

            msg = EwNewStringAnsi( buff );
          }
        }

        switch ( t )
        {
          case 4 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_broadcast, 
            ResourcesBitmap ));
          break;

          case 1 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_status, ResourcesBitmap 
            ));
          break;

          case 5 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
            ));
          break;

          case 6 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
            ));
          break;

          case 0 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_link, ResourcesBitmap 
            ));
          break;

          case 3 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
            ));
          break;

          case 2 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_drop, ResourcesBitmap 
            ));
          break;

          case 7 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, 
            ResourcesBitmap ));
          break;

          default : 
            ViewsImage_OnSetBitmap( &i->Image, 0 );
        }

        switch ( t )
        {
          case 4 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0527 ));
          break;

          case 1 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052E ));
          break;

          case 5 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
          break;

          case 6 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
          break;

          case 0 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0524 ));
          break;

          case 3 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0530 ));
          break;

          case 2 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052C ));
          break;

          case 7 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01AD ));
          break;

          default : 
            ViewsText_OnSetString( &i->TypeText, 0 );
        }

        ViewsText_OnSetString( &i->DescripText, msg );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      itemNo = itemNo + 1;
      CoreGroup_InvalidateViewState((CoreGroup)i );
      i = EwCastObject( i->Super3.next, AppLogItem );
    }
  }
  else
  {
    AppLogItem i = EwCastObject( _this->ListViewer.VerticalList.Super1.last, AppLogItem 
      );
    AppLogItem j = i;
    XInt32 diff = _this->ListViewer.StartRow - itemNo;
    XInt32 n = 0;

    while (( j != 0 ) && ( n < diff ))
    {
      j = EwCastObject( j->Super3.prev, AppLogItem );
      n = n + 1;
    }

    itemNo = itemNo + 12;

    while (( i != 0 ) && ( j != 0 ))
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        ViewsImage_OnSetBitmap( &i->Image, j->Image.Bitmap );
        ViewsText_OnSetString( &i->DescripText, j->DescripText.String );
        ViewsText_OnSetString( &i->TypeText, j->TypeText.String );
        CoreGroup__OnSetVisible( i, 1 );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      CoreGroup_InvalidateViewState((CoreGroup)i );
      itemNo = itemNo - 1;
      j = EwCastObject( j->Super3.prev, AppLogItem );
      i = EwCastObject( i->Super3.prev, AppLogItem );
    }

    while ( i != 0 )
    {
      if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
      {
        XInt32 t = -1;
        XString msg = EwLoadString( &_Const01B3 );
        CoreGroup__OnSetVisible( i, 1 );
        {
          char buff[ 129 ];
          Command cmd;

          cmd.int0 = itemNo;
          cmd.int1 = filter;
          cmd.int2 = (int) buff;

          if ( Command0( CMD_GET_MESH_LOG_LINE, &cmd ) == CMD_OK )
          {

            t = cmd.int3;

            msg = EwNewStringAnsi( buff );
          }
        }

        switch ( t )
        {
          case 4 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_broadcast, 
            ResourcesBitmap ));
          break;

          case 1 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_status, ResourcesBitmap 
            ));
          break;

          case 5 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
            ));
          break;

          case 6 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
            ));
          break;

          case 0 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_link, ResourcesBitmap 
            ));
          break;

          case 3 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
            ));
          break;

          case 2 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_drop, ResourcesBitmap 
            ));
          break;

          case 7 :
            ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, 
            ResourcesBitmap ));
          break;

          default : 
            ViewsImage_OnSetBitmap( &i->Image, 0 );
        }

        switch ( t )
        {
          case 4 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0527 ));
          break;

          case 1 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052E ));
          break;

          case 5 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
          break;

          case 6 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
          break;

          case 0 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0524 ));
          break;

          case 3 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0530 ));
          break;

          case 2 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052C ));
          break;

          case 7 :
            ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01AD ));
          break;

          default : 
            ViewsText_OnSetString( &i->TypeText, 0 );
        }

        ViewsText_OnSetString( &i->DescripText, msg );
      }
      else
      {
        CoreGroup__OnSetVisible( i, 0 );
      }

      itemNo = itemNo - 1;
      CoreGroup_InvalidateViewState((CoreGroup)i );
      i = EwCastObject( i->Super3.prev, AppLogItem );
    }
  }
}

/* 'C' function for method : 'App::MeshLogPopup2.ChckOnOff()' */
void AppMeshLogPopup2_ChckOnOff( AppMeshLogPopup2 _this, XObject sender )
{
  XInt32 n;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  n = AppMeshLogPopup2_GetFilter( _this );
  {
    Command cmd;
    cmd.int0 = n;

    Command0( CMD_GET_MESH_LOG_LENGTH, &cmd );

    n = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, n );
}

/* 'C' function for method : 'App::MeshLogPopup2.RefreshAll()' */
void AppMeshLogPopup2_RefreshAll( AppMeshLogPopup2 _this, XObject sender )
{
  XInt32 itemNo;
  AppLogItem i;
  XInt32 filter;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  i = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppLogItem );
  filter = AppMeshLogPopup2_GetFilter( _this );

  while ( i != 0 )
  {
    if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
    {
      XInt32 t;
      XString msg;
      CoreGroup__OnSetVisible( i, 1 );
      t = -1;
      msg = EwLoadString( &_Const01B3 );
      {
        char buff[ 129 ];
        Command cmd;

        cmd.int0 = itemNo;
        cmd.int1 = filter;
        cmd.int2 = (int) buff;

        if ( Command0( CMD_GET_MESH_LOG_LINE, &cmd ) == CMD_OK )
        {

          t = cmd.int3;

          msg = EwNewStringAnsi( buff );
        }
      }

      switch ( t )
      {
        case 4 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_broadcast, 
          ResourcesBitmap ));
        break;

        case 1 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_status, ResourcesBitmap 
          ));
        break;

        case 5 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogMisc, ResourcesBitmap 
          ));
        break;

        case 6 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFaults, ResourcesBitmap 
          ));
        break;

        case 0 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_link, ResourcesBitmap 
          ));
        break;

        case 3 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogFire, ResourcesBitmap 
          ));
        break;

        case 2 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &Applog_drop, ResourcesBitmap 
          ));
        break;

        case 7 :
          ViewsImage_OnSetBitmap( &i->Image, EwLoadResource( &AppLogSettings, ResourcesBitmap 
          ));
        break;

        default : 
          ViewsImage_OnSetBitmap( &i->Image, 0 );
      }

      switch ( t )
      {
        case 4 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0527 ));
        break;

        case 1 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052E ));
        break;

        case 5 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B7 ));
        break;

        case 6 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01B5 ));
        break;

        case 0 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0524 ));
        break;

        case 3 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const0530 ));
        break;

        case 2 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const052C ));
        break;

        case 7 :
          ViewsText_OnSetString( &i->TypeText, EwLoadString( &_Const01AD ));
        break;

        default : 
          ViewsText_OnSetString( &i->TypeText, 0 );
      }

      ViewsText_OnSetString( &i->DescripText, msg );
    }
    else
    {
      CoreGroup__OnSetVisible( i, 0 );
    }

    itemNo = itemNo + 1;
    CoreGroup_InvalidateViewState((CoreGroup)i );
    i = EwCastObject( i->Super3.next, AppLogItem );
  }
}

/* Variants derived from the class : 'App::MeshLogPopup2' */
EW_DEFINE_CLASS_VARIANTS( AppMeshLogPopup2 )
EW_END_OF_CLASS_VARIANTS( AppMeshLogPopup2 )

/* Virtual Method Table (VMT) for the class : 'App::MeshLogPopup2' */
EW_DEFINE_CLASS( AppMeshLogPopup2, AppPopup, "App::MeshLogPopup2" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppMeshLogPopup2 )

/* Initializer for the class 'App::UserButton' */
void AppUserButton__Init( AppUserButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsFillPath__Init( &_this->FillPath, &_this->_XObject, 0 );
  ViewsAttrText__Init( &_this->AttrText, &_this->_XObject, 0 );
  ViewsStrokePath__Init( &_this->StrokePath, &_this->_XObject, 0 );
  GraphicsPath__Init( &_this->Path1, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Image, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Greyed, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppUserButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0531 );
  CoreView_OnSetLayout((CoreView)&_this->FillPath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->FillPath, _Const0531 );
  ViewsFillPath_OnSetColor( &_this->FillPath, _Const004D );
  ViewsFillPath_OnSetQuality( &_this->FillPath, 0 );
  CoreView_OnSetLayout((CoreView)&_this->AttrText, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->AttrText, _Const0532 );
  ViewsAttrText_OnSetWrapWidth( &_this->AttrText, 0 );
  ViewsAttrText_OnSetAlignment( &_this->AttrText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsAttrText_OnSetString( &_this->AttrText, EwLoadString( &_Const0436 ));
  CoreView_OnSetLayout((CoreView)&_this->StrokePath, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->StrokePath, _Const0531 );
  ViewsStrokePath_OnSetColor( &_this->StrokePath, _Const0074 );
  ViewsStrokePath_OnSetQuality( &_this->StrokePath, 1 );
  ViewsStrokePath_OnSetJoinPoints( &_this->StrokePath, GraphicsPathJoinRound );
  ViewsStrokePath_OnSetWidth( &_this->StrokePath, 2.000000f );
  _this->Radius = 5;
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0052 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0533 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0534 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0055 );
  _this->Elevation = 1;
  CoreView_OnSetLayout((CoreView)&_this->Image, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz );
  CoreRectView__OnSetBounds( &_this->Image, _Const0535 );
  CoreView_OnSetLayout((CoreView)&_this->Greyed, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Greyed, _Const0531 );
  ViewsRectangle_OnSetColor( &_this->Greyed, _Const0077 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0536 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0163 ));
  CoreGroup__Add( _this, ((CoreView)&_this->FillPath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->AttrText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->StrokePath ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Image ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Greyed ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  ViewsFillPath_OnSetPath( &_this->FillPath, &_this->Path1 );
  ViewsAttrText_OnSetAttrSet( &_this->AttrText, EwGetAutoObject( &AppAttrSetFireChannel, 
  GraphicsAttrSet ));
  ViewsStrokePath_OnSetPath( &_this->StrokePath, &_this->Path1 );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppUserButton_Release 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppUserButton_Touch );
  ViewsImage_OnSetBitmap( &_this->Image, EwLoadResource( &Applillybutton, ResourcesBitmap 
  ));
  _this->SystemEventHandler.OnEvent = EwNewSlot( _this, AppUserButton_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->SiteChangedEvent );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontMediumBold, ResourcesFont 
  ));

  /* Call the user defined constructor */
  AppUserButton_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::UserButton' */
void AppUserButton__ReInit( AppUserButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsFillPath__ReInit( &_this->FillPath );
  ViewsAttrText__ReInit( &_this->AttrText );
  ViewsStrokePath__ReInit( &_this->StrokePath );
  GraphicsPath__ReInit( &_this->Path1 );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsImage__ReInit( &_this->Image );
  ViewsRectangle__ReInit( &_this->Greyed );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler );
  ViewsText__ReInit( &_this->Text );
}

/* Finalizer method for the class 'App::UserButton' */
void AppUserButton__Done( AppUserButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppUserButton );

  /* Finalize all embedded objects */
  ViewsFillPath__Done( &_this->FillPath );
  ViewsAttrText__Done( &_this->AttrText );
  ViewsStrokePath__Done( &_this->StrokePath );
  GraphicsPath__Done( &_this->Path1 );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsImage__Done( &_this->Image );
  ViewsRectangle__Done( &_this->Greyed );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler );
  ViewsText__Done( &_this->Text );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::UserButton' */
void AppUserButton__Mark( AppUserButton _this )
{
  EwMarkObject( &_this->FillPath );
  EwMarkObject( &_this->AttrText );
  EwMarkObject( &_this->StrokePath );
  EwMarkObject( &_this->Path1 );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkSlot( _this->ActionPress );
  EwMarkSlot( _this->ActionRelease );
  EwMarkObject( &_this->Image );
  EwMarkObject( &_this->Greyed );
  EwMarkObject( &_this->SystemEventHandler );
  EwMarkObject( &_this->Text );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppUserButton_UpdateLayout( AppUserButton _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)_this->Radius, 0.000000f );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)(( EwGetRectH( _this->Super2.Bounds ) - 3 ) 
  - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 0.000000f, 90.000000f, 
  5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)(( EwGetRectH( 
  _this->Super2.Bounds ) - 3 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  (XFloat)_this->Radius, (XFloat)_this->Radius, 180.000000f, 270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
  return;
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppUserButton_UpdateViewState( AppUserButton _this, XSet aState )
{
  AppApplication app;
  XInt32 i;
  XString s;

  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
  app = EwCastObject( CoreView__GetRoot( _this ), AppApplication );

  if ( app != 0 )
  {
    if ( _this->Elevation > EwCastObject( CoreView__GetRoot( _this ), AppApplication 
        )->LevelAccess.AccessLevel )
    {
      ViewsRectangle_OnSetVisible( &_this->Greyed, 1 );
    }
    else
    {
      ViewsRectangle_OnSetVisible( &_this->Greyed, 0 );
    }
  }

  ViewsText_OnSetString( &_this->Text, EwNewStringInt( _this->ButtonIndex + 1, 0, 
  10 ));
  i = _this->ButtonIndex;
  s = 0;
  {
    Command cmd;

    cmd.int0 = i;
    Command0( CMD_GET_USER_BUTTON_ACTION, &cmd );

    s = EwNewStringAnsi( (char*) cmd.int1 );
  }
  ViewsAttrText_OnSetString( &_this->AttrText, s );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppUserButton_Init( AppUserButton _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  GraphicsPath_InitSubPath( &_this->Path1, 0, 24 );
  GraphicsPath_Translate( &_this->Path1, 1.000000f, 1.000000f );
  GraphicsPath_Begin( &_this->Path1, 0, (XFloat)_this->Radius, 0.000000f );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  -90.000000f, 0.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)(( EwGetRectW( _this->Super2.Bounds 
  ) - 2 ) - _this->Radius ), (XFloat)(( EwGetRectH( _this->Super2.Bounds ) - 3 ) 
  - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 0.000000f, 90.000000f, 
  5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)(( EwGetRectH( 
  _this->Super2.Bounds ) - 3 ) - _this->Radius ), (XFloat)_this->Radius, (XFloat)_this->Radius, 
  90.000000f, 180.000000f, 5 );
  GraphicsPath_AddArc( &_this->Path1, 0, (XFloat)_this->Radius, (XFloat)_this->Radius, 
  (XFloat)_this->Radius, (XFloat)_this->Radius, 180.000000f, 270.000000f, 5 );
  GraphicsPath_Close( &_this->Path1, 0 );
  return;
}

/* 'C' function for method : 'App::UserButton.Touch()' */
void AppUserButton_Touch( AppUserButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= _this->Elevation )
  {
    EwPostSignal( _this->ActionPress, ((XObject)_this ));
  }
  else
  {
    AppApplication_LowLevel( EwCastObject( CoreView__GetRoot( _this ), AppApplication 
    ), _this->Elevation );
  }
}

/* 'C' function for method : 'App::UserButton.Release()' */
void AppUserButton_Release( AppUserButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( EwCastObject( CoreView__GetRoot( _this ), AppApplication )->LevelAccess.AccessLevel 
      >= _this->Elevation )
  {
    EwPostSignal( _this->ActionRelease, ((XObject)_this ));
  }
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppUserButton_onEvent( AppUserButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'App::UserButton' */
EW_DEFINE_CLASS_VARIANTS( AppUserButton )
EW_END_OF_CLASS_VARIANTS( AppUserButton )

/* Virtual Method Table (VMT) for the class : 'App::UserButton' */
EW_DEFINE_CLASS( AppUserButton, CoreGroup, "App::UserButton" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppUserButton_UpdateLayout,
  AppUserButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppUserButton )

/* Bitmap resource : 'App::lillybutton' */
EW_DEFINE_BITMAP_RES( Applillybutton )
  EW_BITMAP_FRAMES( Applillybutton, Default, EW_DRIVER_VARIANT_RGBA8888, 78, 20, 0 )
    EW_BITMAP_FRAME( 7, 0, 66, 20, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Applillybutton, Default )               /* ratio 13.14 % */
    0x80E40300, 0x41204FF2, 0x26070583, 0xA110A83C, 0x191086C3, 0xF1485C4A, 0x158B44E1,
    0xA8BC6623, 0x8EC7A311, 0xDC8A3920, 0x48E3F248, 0xA6432593, 0xA512A93C, 0x593096CB,
    0xF3495CCA, 0x359B4CE5, 0xA9BCE663, 0x9C4E8053, 0xE50A7F40, 0xD1A77449, 0x1E9145A0,
    0x2934BA1D, 0x1D4AA553, 0x8FF2C90C, 0x552E9202, 0x0AC566AF, 0xA757A9F5, 0xED8A9B60,
    0xD8EC961A, 0x9A2767AF, 0x1FE692B0, 0xFEBB5927, 0xEEF76BA5, 0x78BBDD9F, 0x5B9DDAF3,
    0xBA5CAF97, 0xF602FB7F, 0x61B0784B, 0xFF0388C1, 0xD7AB5503, 0xD859153F, 0xB66C9DA4,
    0x65CB5A32, 0x18266B2F, 0x7FA49066, 0xCBE5F0F7, 0xBFF4AFDB, 0xFDDCEC73, 0xDD2E6703,
    0x5DAFD6EA, 0xBB4D9DEB, 0x79DBEDB6, 0x93468F45, 0xCDE512C8, 0x0F0B33BF, 0xBFF31C4E,
    0xFD0E7728, 0xB96FDD2B, 0x64A94869, 0x64E0E3FD, 0x4005518C, 0xAEC3FCAC, 0xECF6FB9D,
    0xF783BBDF, 0x79BC7E4E, 0x31FFE8F1, 0x1FEB052A, 0x9BCEF7BF, 0xA8B3E15F, 0xF8E37038,
    0x8E1FEBEF, 0x75B9BBD1, 0x0675E4ED, 0x6421BE22, 0xFC540F40, 0x7919C3C3, 0x178303FC,
    0x80264C70, 0xE588510E, 0x14634CD3, 0x7E5E4932, 0x16042031, 0x5FB7F1F6, 0x57E62488,
    0x387F16D4, 0xCB2F5792, 0x07D14344, 0x4FF19450, 0x5390E136, 0x2CC42D1B, 0x3E01CFF3,
    0x84D38824, 0x92489A15, 0x933CC92E, 0x408217D7, 0x4288E252, 0x93E4C936, 0xCAD25913,
    0x4199792D, 0xE4A54520, 0x796E0C12, 0x25C8A1A5, 0x86470E4B, 0x75E49421, 0x3A542B89,
    0x619AE229, 0x3FE6A9B6, 0x4C42F4AA, 0x31C84B5E, 0x68D04508, 0x78970DE3, 0x2D4AC251,
    0x84A5A26E, 0x45E4821C, 0x04C02E0A, 0x8C9BE6CA, 0x9F993942, 0x25E5E280, 0xF2650898,
    0xDE7C2E4A, 0x4A2045E5, 0x80D61A36, 0xC895E1BE, 0x6A28AE28, 0x3AA7A7AA, 0xF57CD08A,
    0x340C35E1, 0xC13450D5, 0x13FC5C11, 0xE4D4338C, 0xFF3F1EF5, 0x2E0AF260, 0x6A9900FF,
    0x3338C051, 0x24FE3FCD, 0x74138FFB, 0xB3EC3210, 0x223B46A8, 0xF1543F02, 0xA8E8388F,
    0x911CD793, 0x8C124278, 0x84905632, 0xE532D017, 0xE49B2346, 0x3CB6AD85, 0xBBEAA8FA,
    0xEE5BC28B, 0x11C0484C, 0xE4FB3FC8, 0xB126D79B, 0x5ACFF2E8, 0x161B496D, 0xD1A05409,
    0xE1F1AFEB, 0x71126FAB, 0xBCF02BDC, 0x9C6C3F10, 0xF2287B15, 0xD8F53CCF, 0x183C5B53,
    0x6258562B, 0x987C7B1F, 0x0C8F20C8, 0xD4F43CCF, 0xACC6B186, 0xC4AF2C46, 0x113CC72F,
    0xA248FFB8, 0x7CFF2D0A, 0x093A0E63, 0xCFF3EA67, 0x5B1731B4, 0x43FF37CD, 0x18FEC0B3,
    0xFC418E74, 0xD3EF1CC0, 0x0055872E, 0x6784530F, 0x61E97975, 0x5B79F57D, 0xD4DE0D67,
    0x50BD3B55, 0x63CD03D2, 0x59061CD0, 0x623E9063, 0xD4732DB7, 0xB64A7B70, 0x0418F148,
    0x1807418B, 0xC9418524, 0xDB8F8418, 0xF71E0350, 0x63F702DB, 0xC503D992, 0x000D5062,
    0x41800E34, 0x83B41804, 0x23D506DD, 0x6784E5F8, 0x73BC381E, 0x418F746F, 0x03E418BF,
    0x000101DE, 0x00000000

  EW_BITMAPS_TABLE( Applillybutton )
    EW_BITMAP( Applillybutton, Default )
EW_END_OF_BITMAP_RES( Applillybutton )

/* Table with links to derived variants of the bitmap resource : 'App::lillybutton' */
EW_RES_WITHOUT_VARIANTS( Applillybutton )

/* Bitmap resource : 'App::goodbyeelise' */
EW_DEFINE_BITMAP_RES( Appgoodbyeelise )
  EW_BITMAP_FRAMES( Appgoodbyeelise, Default, EW_DRIVER_VARIANT_RGBA8888, 133, 125, 0 )
    EW_BITMAP_FRAME( 10, 7, 113, 111, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appgoodbyeelise, Default )              /* ratio 4.34 % */
    0x0409FF00, 0xC11FF020, 0x1A0F0581, 0xA110C84C, 0x150F85C3, 0xB1086C4A, 0x1488C4E2,
    0xC6C31801, 0x7646C80E, 0xFA823E80, 0xBC23EC08, 0xAA50FF8F, 0xE59298E4, 0x612D764A,
    0x73498CBE, 0x38974DA6, 0xB9ACE665, 0x9FCEA6F3, 0x0CFA813C, 0xD1A8744A, 0x2685489E,
    0xA8F4BA2D, 0xA14CA7D2, 0xB31A8D3A, 0x1F584724, 0xC8F47243, 0xAFC64211, 0x045AC318,
    0xC5EC563B, 0xAACF68B2, 0x2CD6BB25, 0x411F8CDB, 0x7243847C, 0x78A6DDAA, 0x7AA5E6A5,
    0xBE5FAF57, 0xFE02FB7B, 0xE070B82B, 0x0F1184C3, 0xDA12FC5E, 0xDD6FB8DC, 0x991B4E4A,
    0x96B6E4F2, 0xD8D66333, 0x8F9823F5, 0x4E1B158E, 0xE8B19A4C, 0x9B47A5D3, 0xB57A8D4E,
    0x5BB0D56B, 0x956BF6C7, 0x9BCA981D, 0xBCBEEB71, 0x8FDB335B, 0x9C9AB210, 0x71B65AFD,
    0x278BC8D6, 0xB8FCCE27, 0x97CDE7F2, 0xEE097F3B, 0xB9DE9023, 0xBDF76B79, 0xE170225D,
    0x1F4E4F1C, 0x743CBD2F, 0x47CDE7F2, 0xBD7ECF4F, 0x6B7DF47B, 0xBF4EC083, 0xD6B4FD7B,
    0xCF87563F, 0xF6FF7D5F, 0xDFE7BDFF, 0x28120080, 0x89AB8160, 0xF7140EC7, 0x83DDC765,
    0xC9047D9B, 0x68061481, 0x221781A1, 0x1C862158, 0x68E1986A, 0xA2283480, 0xC77D037D,
    0x761E6D51, 0x2C8A61B8, 0x87E2E8AE, 0x4DB3297B, 0x7374FF3B, 0xA0FF3CCE, 0x2D3DCEF3,
    0x5262A8C2, 0x21088CA0, 0x13B22676, 0xF6488FDA, 0x4B8BE498, 0x8CA2C8FA, 0xE388DA34,
    0x53E4F43B, 0xFE5895D0, 0xEF374CE3, 0x9325E928, 0xE4389241, 0xF91E4565, 0x9E4C93A5,
    0x6A9AE4D9, 0x394D9512, 0xA543FCF2, 0x69D65995, 0xA8E04167, 0x699B4F43, 0x98A2186E,
    0x6655AA0E, 0xCA16689F, 0x1A87A126, 0xFA3E0FFA, 0xA3E773F0, 0x8F53CA8F, 0xBA2A7C3E,
    0x12808321, 0x9648D1C9, 0xA7E89A76, 0xA07A8295, 0x6A423C8E, 0x86509DEA, 0x0A746AAA,
    0x59A9957A, 0xAABA219E, 0x4A8AB3A7, 0x80D16AAB, 0xBCA9CF03, 0xAD652966, 0x8B06CEC0,
    0x1675DE90, 0xDEC8AC9E, 0xCCADACAA, 0xA3A8C73E, 0x673A9EBD, 0x77A6CBB0, 0x8906ABDD,
    0xDBB36C94, 0xB56DCB52, 0xED1A9153, 0xE3F4FCA9, 0x8EE8B78F, 0x71834E06, 0xB82EEB75,
    0xAF2B7EF0, 0x1B8E709B, 0xC4E2356D, 0xABBC6E93, 0xB69DD6DD, 0xAF3BBEFC, 0x5BCEFBC0,
    0x3EF6B9EE, 0x0CC12E2A, 0x992EB6A3, 0xF015C91C, 0xAC5303C4, 0xCA5D96EA, 0x77C26D3A,
    0xA38F83D6, 0xDE5C570D, 0x4471F8B5, 0x1721C597, 0x6F7AF2AC, 0x3C4EB9C6, 0x3073FCF8,
    0xCAFEB296, 0xA6A9A9B1, 0x615E73AC, 0xCEE46C96, 0x728CAF22, 0x78D6338C, 0xCA559CA3,
    0x2DB8EE6C, 0xCDF189B7, 0xB40AFEA6, 0x9AB97ED0, 0x6753C46D, 0x43D0743D, 0x96750CCD,
    0xAB2CC72F, 0x7D7ED0C7, 0xA754D865, 0x57BF93ED, 0xD735A6DB, 0x13BDAB5B, 0xF95F66DA,
    0xD6E2AAAC, 0x6FDDD05D, 0xCF53FDCB, 0x29C3B19C, 0x6DFB84DC, 0xEB4D4A38, 0xBBAE659D,
    0xE2B899A6, 0xF71CE657, 0xC896BBDB, 0x677D9991, 0xA9B5793E, 0x9E657E42, 0xB9D9A67B,
    0xAD3502E7, 0xC12FE179, 0x9BE1FA70, 0xA5292E17, 0xF63B4F90, 0xDC2F9EC7, 0xDD9FDFBA,
    0xD5EEFABE, 0x3D8EC38E, 0x6B2CCF9E, 0xCEBF8ADE, 0x4D39EA3A, 0xC8F2FBA8, 0xBEAF8E17,
    0x78C40BA4, 0xCF47369B, 0x5E28F37B, 0xDDF6FC7F, 0xE838AD7A, 0xBD19734E, 0x4F72BAF4,
    0x9BCD7EF1, 0x4F4CFE9F, 0xACBE0AFF, 0xB49EC7C6, 0xFDEBDEAC, 0xE7EAF33E, 0xA97AFDAF,
    0xD92E2D36, 0xEF9592A7, 0xBE390780, 0x8A7E2A29, 0xF0FADDB3, 0xFE063FB7, 0x7B7A8107,
    0x38249B5E, 0x69A5A7BE, 0x5E339E80, 0x41C81703, 0x6EE865FD, 0xACA0C390, 0x273A67C6,
    0x1B748E3D, 0x530760F4, 0x15BA1AA8, 0x02AA526F, 0x177F0860, 0x6F8D2EBE, 0xE0742C7A,
    0x9AE8750A, 0x5150A1EA, 0x069BD3C4, 0x7AC24515, 0x488770E5, 0xA66BA154, 0xA6093E37,
    0x137587C9, 0x386101DE, 0x511DE043, 0x62BC5789, 0x3F76EAFD, 0x7A305136, 0x0B936392,
    0x2CB686F5, 0x498CD0F2, 0xEB04099C, 0x46224656, 0xC24E89CF, 0x9886E420, 0xB1DA33C6,
    0xA391A58E, 0xBB3800E2, 0x4F4FD9B2, 0xF8D7CC13, 0x424778B0, 0x5F2891E2, 0x36A821FC,
    0xB51DC096, 0x2C608989, 0x490D1A1A, 0x4AA499C9, 0x5E341882, 0xB4F4BD17, 0x82EF961B,
    0x0C239C34, 0x4146F847, 0xB794F24E, 0xD0F81A7B, 0xD15EC206, 0x345B4DB1, 0x584CD49B,
    0x4A3602AF, 0x5BD4AD55, 0xCA890F09, 0x72114243, 0xE2A2A3F0, 0x44A4E844, 0xB0982E7A,
    0x7B0D261B, 0x41DBC959, 0x74167492, 0x26EB1052, 0x0E92373B, 0x631A4E87, 0xCBC988DD,
    0x88B24E42, 0xF8134A71, 0x52294944, 0x6C8E0E92, 0x4710A3D2, 0x7676CDE9, 0x346B2613,
    0x64BD371B, 0x314E604C, 0x9D0C7F99, 0xC2F9C693, 0x99B3BA72, 0xD9A6D487, 0x4EA6C8DA,
    0x69469246, 0xE6D7E78A, 0x7E7AA2B9, 0x04EF80CD, 0x59D512A8, 0xA9A657B7, 0x638CA689,
    0xA3C91B28, 0x6F543934, 0xDC690CCC, 0x29337A3E, 0x75972A82, 0x2897A743, 0x668B366A,
    0x948A7468, 0x47D348A8, 0xD321B352, 0xD0CD0C73, 0x52E6BF2F, 0x7C505536, 0xDC699533,
    0x2738D93C, 0x396F5231, 0x134D524D, 0x6136D106, 0x8D415F54, 0xDA9EBF2A, 0x4D7E9626,
    0xE414F481, 0x528564F8, 0xAA54A9B3, 0x429BED11, 0x95CBB6A1, 0xFE9D746E, 0xB6F8A82C,
    0x7DCF4F7A, 0x55609FF5, 0x966F58D9, 0x13F11654, 0x2B62AAAD, 0xB1CAE6A8, 0xAFF5C64D,
    0x36EA3A8A, 0xAD4C5997, 0xD1AF33F6, 0xF89B26C3, 0x02BAB09A, 0xB2FCAC36, 0xFB1CD42A,
    0xCBDAA59F, 0x252D4EA4, 0x58C49D54, 0xB216517B, 0x649EDDA0, 0x2F4D566F, 0x17A6361A,
    0xA69B6CD5, 0x86C24F29, 0x1B2AB1F6, 0xCA7AC72D, 0xACDECB22, 0x68CD6E8F, 0x583ACF3A,
    0xB7F5C22B, 0xC26D9449, 0x98207B68, 0x90ADB31E, 0x84926B7B, 0x0AD759EB, 0x3BB7B5F5,
    0x09D94561, 0xA9B6BD2A, 0x2E52E3B3, 0xAE3B988B, 0xBBF73ECF, 0xB46DB304, 0xEB219B88,
    0x11985426, 0x0959ADD4, 0x42DF4CA8, 0x13DBBDF7, 0x9BA92BAF, 0x1672D459, 0xEF5529BD,
    0x2D1BB88A, 0xBFF6C2EF, 0xAF2F91E8, 0xF3249BC8, 0xF99F17DE, 0xD96EECDD, 0x02E7548B,
    0x12DDBE18, 0xCC08A9F0, 0x162F0322, 0x6FD55EBF, 0x2BDBF886, 0xBC1702FF, 0xA9B092D5,
    0x0B207C28, 0xF7BB097B, 0x7972F0D2, 0x82F75ADB, 0xBB16C218, 0x5AD374EB, 0x15EEE3DF,
    0xEED35FC3, 0x2BCC3881, 0xC7F8C30F, 0x84F1E2C0, 0x67A2BBE9, 0x38BAF8DA, 0xFF8E9A86,
    0xF9536423, 0x0650C5F8, 0x1C678325, 0x4F59E848, 0xB1CCB151, 0xE2CBB78A, 0xC3F83A85,
    0x9355560F, 0x86D58521, 0xA9C8F69E, 0x0F96E73D, 0x7F0EE284, 0x4E61C819, 0xECBD6B13,
    0x595B3362, 0x66B47C6F, 0xE27C156E, 0xCDF5D324, 0xB5730651, 0x4063DCDA, 0x2DBA481F,
    0xC693B225, 0x233EC617, 0x8681C5B8, 0x7D08BF33, 0xB86EBF2A, 0xF12350CB, 0x22BC4C7F,
    0xACAA9B4A, 0x49F41671, 0x35DC996F, 0xA4D31933, 0xEF615F9D, 0xEF03E68C, 0xEEB0D239,
    0xECE55516, 0x79562AC8, 0x757CE690, 0x56AD25A8, 0xC9141E1B, 0xADF3A68F, 0x355889C9,
    0xB1D779F3, 0xED99F00E, 0x4360E379, 0xCE0B966D, 0x7A7DA2A0, 0xBB275E65, 0x5A853B59,
    0x5AABAB9E, 0xB4AE7B29, 0xB3356559, 0xFDEE4DAF, 0xD3B67AA2, 0xDB5112F6, 0x7B615024,
    0x438AD974, 0xE39DBCB6, 0x993D4869, 0xD5EE2238, 0xB8ED6D4D, 0xDE761E5A, 0x57515ED6,
    0x2F6D06BF, 0xB7A1FA21, 0x15A92AE4, 0x4F4BEA07, 0x0634D139, 0x635BB978, 0xDB1F52DC,
    0xF88ED2E1, 0xD1ADBBA2, 0xA08D7F87, 0x86780F13, 0x8D2BCDF2, 0x65720D25, 0x494190CE,
    0xFB4EE8D7, 0x16F76399, 0xF3D9C875, 0xABDB2CAB, 0xE19269A9, 0x6EF900F7, 0xB91BC771,
    0xC8A7D73B, 0xA7AC0E87, 0x7391CFF9, 0x759A7705, 0x12404FBD, 0x9F16D73B, 0x35BBC4B9,
    0xD69A68BD, 0x796B7AE7, 0x350CE686, 0x68B4BFA5, 0xCC98CD3F, 0xC5763EA7, 0x986CD8C8,
    0xFFB3AF3D, 0xC391E75C, 0x2765A41B, 0xD2FFD93A, 0x7BA74CEE, 0x59BF3645, 0xED9493C3,
    0xEE3CE19B, 0x60BC0752, 0xB6E0DE74, 0x9EE56927, 0x337AEC53, 0x0BB9781E, 0x0234689E,
    0x0E0E9B67, 0xD4E366F7, 0xBC778FD0, 0xF6F911E6, 0xC57D69BA, 0xED36D71E, 0x2E47EE14,
    0x8DF33CF2, 0x1F98FD4F, 0xAF0BF7F5, 0x5F20639D, 0x9EE7D47A, 0x9E12A0FA, 0x5553308D,
    0xFA7AFBDE, 0xF51AE3AB, 0xF8F30FB4, 0xC422BE0A, 0x7BE9BECF, 0x80C825B2, 0x4FCDFCCF,
    0xAC349305, 0xEEAC40B7, 0x54DBBEA5, 0xB54F7551, 0xFCDF8295, 0x7FA4B3DA, 0xDDD712F5,
    0xECA5EF5A, 0x6CE35BA3, 0xB9A43DBA, 0x6BEEFCEF, 0x4B50E06F, 0xAE2A9279, 0xFFB725B8,
    0x9F4FDEFE, 0xC46E19F1, 0xF3F20F55, 0xEC8017F9, 0xC3473D47, 0x71D49268, 0x037E439E,
    0x87EE80B8, 0x3907B97D, 0xDF6C06DB, 0xC7F86AA6, 0x31681580, 0xF23097BB, 0x681925E7,
    0x8176962F, 0x0220A1E5, 0x621D80D8, 0x77B39064, 0x8A82622C, 0x181678A3, 0x3D91B514,
    0x04823824, 0xA4017AB2, 0x35F76728, 0xC2831769, 0x28201E02, 0x7EA1EC83, 0x1977753C,
    0xE3665822, 0x22083D75, 0x4A83A1F9, 0x43FF2498, 0x81F3663B, 0x503D16EA, 0x412F82D8,
    0x83E38132, 0xAA18A854, 0x45D84804, 0x4836767D, 0xCA84B82C, 0x83813561, 0x85986215,
    0xBF2A921D, 0x54D27B12, 0x83938A6B, 0xD01A8847, 0x911C1700, 0x8778713B, 0x5D8406E4,
    0x88588147, 0x87407018, 0xC71C10EC, 0x68848672, 0x37A7FB6D, 0xAB8857C4, 0xB2B01F31,
    0x87D86829, 0x7A837487, 0xE88A85E3, 0x1B80C014, 0x953AA11F, 0x45F089B8, 0x81135F84,
    0x6C12F88F, 0xC1752813, 0x3F989089, 0x1B37A7F4, 0x330F8688, 0x15C36D26, 0xB78A1878,
    0x135F7D63, 0x1798B186, 0x8E2EC856, 0x58B28A68, 0x35089E38, 0x398BC80A, 0x52D88971,
    0x1C38812C, 0x1D8B78C2, 0xB33787A4, 0x20A8C98A, 0x118AE88C, 0xD05011C2, 0x3298A78B,
    0xCC27B85B, 0x78B62768, 0x2C48D48D, 0xCA8BB898, 0xF4878DE8, 0x7E341834, 0x418C9709,
    0xA8D227F1, 0x3978C78B, 0x168F18D6, 0x28E38943, 0x8C58E012, 0xF28EA283, 0x03CC8F58,
    0x8ED8F738, 0xFC8F9111, 0xA8E49038, 0x2818EC3E, 0x969088FF, 0xA33F8EF3, 0x90490E8F,
    0x9820A321, 0xA9149002, 0x21219A90, 0x199058FB, 0x915D83B9, 0x8F891E90, 0x1B1FA15B,
    0x891A90F9, 0x8B93E818, 0x1591F8C5, 0x02C61BF9, 0x9108C812, 0xEC923924, 0xA8A33E80,
    0x93791692, 0x45109936, 0x293315A2, 0x82092593, 0x2B928383, 0x39449299, 0x11F8D294,
    0xE88E28D5, 0xD94C93F3, 0x86620A4B, 0x4591D36E, 0x99539389, 0x90195593, 0x3C875358,
    0x13981B58, 0x2CC95E93, 0xCA1B53E8, 0x00EC9513, 0x94695603, 0x01106954, 0x00000001,
    0x00000000

  EW_BITMAPS_TABLE( Appgoodbyeelise )
    EW_BITMAP( Appgoodbyeelise, Default )
EW_END_OF_BITMAP_RES( Appgoodbyeelise )

/* Table with links to derived variants of the bitmap resource : 'App::goodbyeelise' */
EW_RES_WITHOUT_VARIANTS( Appgoodbyeelise )

/* Initializer for the class 'App::RadioSetup' */
void AppRadioSetup__Init( AppRadioSetup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle10, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle11, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsBevel__Init( &_this->Bevel1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->ToggleButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton3, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->AcumeshEventHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text4, &_this->_XObject, 0 );
  AppDropDownMenu__Init( &_this->DropDownMenu, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppRadioSetup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0537 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0538 );
  CoreRectView__OnSetBounds( &_this->Rectangle10, _Const0539 );
  CoreRectView__OnSetBounds( &_this->Rectangle11, _Const053A );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0539 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const053B );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const030D );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const030D );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const053B );
  CoreRectView__OnSetBounds( &_this->Bevel1, _Const053A );
  ViewsBevel_OnSetWidth( &_this->Bevel1, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel1, _Const053B );
  ViewsBevel_OnSetColorR( &_this->Bevel1, _Const030D );
  ViewsBevel_OnSetColorB( &_this->Bevel1, _Const030D );
  ViewsBevel_OnSetColorT( &_this->Bevel1, _Const053B );
  CoreRectView__OnSetBounds( &_this->Text, _Const053C );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const053D ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text1, _Const053E );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const053F ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->ToggleButton, _Const0540 );
  WidgetSetToggleButton_OnSetChecked( &_this->ToggleButton, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->ToggleButton, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0541 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton, 0 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, 0 );
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0542 );
  WidgetSetPushButton_OnSetIconFrame( &_this->PushButton1, 1 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, 0 );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0543 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const0544 ));
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text3, _Const0545 );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzCenter | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const0546 ));
  ViewsText_OnSetColor( &_this->Text3, _Const000E );
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const0547 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0548 
  ));
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const0549 );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const000E );
  CoreRectView__OnSetBounds( &_this->VerticalList, _Const054A );
  CoreVerticalList_OnSetItemHeight( &_this->VerticalList, 16 );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList, 8 );
  CoreRectView__OnSetBounds( &_this->PushButton3, _Const054B );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton3, EwLoadString( &_Const00E8 
  ));
  CoreRectView__OnSetBounds( &_this->Text4, _Const054C );
  ViewsText_OnSetAlignment( &_this->Text4, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text4, EwLoadString( &_Const054D ));
  ViewsText_OnSetColor( &_this->Text4, _Const000E );
  CoreRectView__OnSetBounds( &_this->DropDownMenu, _Const054E );
  AppDropDownMenu_OnSetnumItems( &_this->DropDownMenu, 5 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle1 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle2 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle4 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle5 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle6 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle7 ), -1 );
  CoreGroup__Restack( _this, ((CoreView)&_this->Super1.Rectangle8 ), -1 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle10 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle11 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ToggleButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text4 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->DropDownMenu ), 0 );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  _this->ToggleButton.OnSwitchOn = EwNewSlot( _this, AppRadioSetup_Encrpt );
  _this->ToggleButton.OnSwitchOff = EwNewSlot( _this, AppRadioSetup_Encrpt );
  WidgetSetToggleButton_OnSetAppearance( &_this->ToggleButton, EwGetAutoObject( 
  &AppNormalCheckBox, WidgetSetToggleButtonConfig ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppRadioSetup_Up );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppRadioSetup_Down );
  WidgetSetPushButton_OnSetIcon( &_this->PushButton1, EwLoadResource( &ResourcesNavigationIconsSmall, 
  ResourcesBitmap ));
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppRadioSetup_Configure );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->VerticalList.OnLoadItem = EwNewSlot( _this, AppRadioSetup_OnLoadItem );
  _this->PushButton3.OnActivate = EwNewSlot( _this, AppRadioSetup_Close );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton3, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->AcumeshEventHandler.OnEvent = EwNewSlot( _this, AppRadioSetup_onEvent );
  CoreSystemEventHandler_OnSetEvent( &_this->AcumeshEventHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->AcumeshEvent );
  ViewsText_OnSetFont( &_this->Text4, EwLoadResource( &OldResourcesFontVerdana20, 
  ResourcesFont ));
  _this->DropDownMenu.onSelection = EwNewSlot( _this, AppRadioSetup_Select );
  _this->DropDownMenu.GetItemCallback = EwNewSlot( _this, AppRadioSetup_GetItems 
  );

  /* Call the user defined constructor */
  AppRadioSetup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::RadioSetup' */
void AppRadioSetup__ReInit( AppRadioSetup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle10 );
  ViewsRectangle__ReInit( &_this->Rectangle11 );
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsBevel__ReInit( &_this->Bevel1 );
  ViewsText__ReInit( &_this->Text );
  ViewsText__ReInit( &_this->Text1 );
  WidgetSetToggleButton__ReInit( &_this->ToggleButton );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  ViewsText__ReInit( &_this->Text2 );
  ViewsText__ReInit( &_this->Text3 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  CoreVerticalList__ReInit( &_this->VerticalList );
  WidgetSetPushButton__ReInit( &_this->PushButton3 );
  CoreSystemEventHandler__ReInit( &_this->AcumeshEventHandler );
  ViewsText__ReInit( &_this->Text4 );
  AppDropDownMenu__ReInit( &_this->DropDownMenu );
}

/* Finalizer method for the class 'App::RadioSetup' */
void AppRadioSetup__Done( AppRadioSetup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppRadioSetup );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle10 );
  ViewsRectangle__Done( &_this->Rectangle11 );
  ViewsBevel__Done( &_this->Bevel );
  ViewsBevel__Done( &_this->Bevel1 );
  ViewsText__Done( &_this->Text );
  ViewsText__Done( &_this->Text1 );
  WidgetSetToggleButton__Done( &_this->ToggleButton );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  ViewsText__Done( &_this->Text2 );
  ViewsText__Done( &_this->Text3 );
  WidgetSetPushButton__Done( &_this->PushButton2 );
  ViewsRectangle__Done( &_this->Rectangle9 );
  CoreVerticalList__Done( &_this->VerticalList );
  WidgetSetPushButton__Done( &_this->PushButton3 );
  CoreSystemEventHandler__Done( &_this->AcumeshEventHandler );
  ViewsText__Done( &_this->Text4 );
  AppDropDownMenu__Done( &_this->DropDownMenu );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::RadioSetup' */
void AppRadioSetup__Mark( AppRadioSetup _this )
{
  EwMarkObject( &_this->Rectangle10 );
  EwMarkObject( &_this->Rectangle11 );
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Bevel1 );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->ToggleButton );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->PushButton2 );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->VerticalList );
  EwMarkObject( &_this->PushButton3 );
  EwMarkObject( &_this->AcumeshEventHandler );
  EwMarkObject( &_this->Text4 );
  EwMarkObject( &_this->DropDownMenu );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppRadioSetup_UpdateViewState( AppRadioSetup _this, XSet aState )
{
  XInt32 id;
  XString encrypt;
  XBool acu;
  XInt32 c;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  id = 0;
  encrypt = 0;
  acu = 0;
  {
    Command cmd;

    Command0( CMD_GET_RADIO_SETTINGS, &cmd );

    if ( cmd.int1 != 0 )
    {
      id = cmd.int0;
      encrypt = EwNewStringAnsi( (char*) cmd.int1 );
      acu = cmd.int2;
    }
  }

  for ( c = 0; c < EwGetStringLength( encrypt ); c = c + 1 )
  {
    if ( EwGetStringChar( encrypt, c ) == '-' )
      encrypt = EwStringRemove( encrypt, c, 1 );
  }

  ViewsText_OnSetString( &_this->Text3, EwGetStringUpper( encrypt ));
  ViewsText_OnSetString( &_this->Text2, EwNewStringInt( id, 0, 10 ));
  CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, acu );

  if ( acu )
  {
    AppRadioSetup_AddLine( _this, EwLoadString( &_Const054F ));
  }
  else
  {
    AppRadioSetup_AddLine( _this, EwLoadString( &_Const0550 ));
    AppRadioSetup_AddLine( _this, EwLoadString( &_Const0551 ));
  }
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppRadioSetup_Init( AppRadioSetup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  ViewsText_OnSetString( &_this->DropDownMenu.MenuSelectionText, EwLoadString( &_Const0552 
  ));
  CoreVerticalList_OnSetSelectedItem( &_this->DropDownMenu.VerticalList, 0 );
}

/* This method is called by 'VerticalList' every time the list loads or updates 
   an item. */
void AppRadioSetup_OnLoadItem( AppRadioSetup _this, XObject sender )
{
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemView = EwCastObject( _this->VerticalList.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwLoadString( &_Const004B ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &AppTerminalFont, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const00D2 );
  ViewsText_OnSetAlignment( itemView, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList.Super2.Bounds ), _this->VerticalList.ItemHeight 
  )));
}

/* 'C' function for method : 'App::RadioSetup.Up()' */
void AppRadioSetup_Up( AppRadioSetup _this, XObject sender )
{
  XInt32 x;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  x = EwStringParseInt32( _this->Text2.String, 0, 10 );

  if ( x < 32767 )
    x = x + 1;

  ViewsText_OnSetString( &_this->Text2, EwNewStringInt( x, 0, 10 ));
}

/* 'C' function for method : 'App::RadioSetup.Down()' */
void AppRadioSetup_Down( AppRadioSetup _this, XObject sender )
{
  XInt32 x;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  x = EwStringParseInt32( _this->Text2.String, 0, 10 );

  if ( x > 0 )
    x = x - 1;

  ViewsText_OnSetString( &_this->Text2, EwNewStringInt( x, 0, 10 ));
}

/* 'C' function for method : 'App::RadioSetup.Encrpt()' */
void AppRadioSetup_Encrpt( AppRadioSetup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->ToggleButton.Checked )
  {
    ViewsText_OnSetColor( &_this->Text3, _Const000E );
    ViewsBevel_OnSetColorB( &_this->Bevel1, _Const030D );
    ViewsBevel_OnSetColorL( &_this->Bevel1, _Const053B );
    ViewsBevel_OnSetColorR( &_this->Bevel1, _Const030D );
    ViewsBevel_OnSetColorT( &_this->Bevel1, _Const053B );
  }
  else
  {
    ViewsText_OnSetColor( &_this->Text3, _Const030D );
    ViewsBevel_OnSetColorB( &_this->Bevel1, _Const0039 );
    ViewsBevel_OnSetColorL( &_this->Bevel1, _Const0039 );
    ViewsBevel_OnSetColorR( &_this->Bevel1, _Const0039 );
    ViewsBevel_OnSetColorT( &_this->Bevel1, _Const0039 );
  }
}

/* 'C' function for method : 'App::RadioSetup.Configure()' */
void AppRadioSetup_Configure( AppRadioSetup _this, XObject sender )
{
  XInt32 id;
  XBool aes;
  XInt32 baud;
  XString key;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  id = EwStringParseInt32( _this->Text2.String, 0, 10 );
  aes = _this->ToggleButton.Checked;
  baud = EwStringParseInt32( _this->DropDownMenu.MenuSelectionText.String, 9600, 
  10 );
  key = _this->Text3.String;
  {
    char dest[ 34 ];
    EwStringToAnsi( key, dest, 34, '0' );

    if ( Command4( CMD_SET_RADIO_SETTINGS, id, (int) dest, aes, baud ) == CMD_OK )
    {
       // AddLine( "SUCCESS!" );
    }
  }
}

/* 'C' function for method : 'App::RadioSetup.AddLine()' */
void AppRadioSetup_AddLine( AppRadioSetup _this, XString s )
{
  ViewsText tv = EwCastObject( _this->VerticalList.Super1.first, ViewsText );

  if ( tv != 0 )
    while ( tv->Super2.next != 0 )
    {
      ViewsText nxt = EwCastObject( tv->Super2.next, ViewsText );
      ViewsText_OnSetString( tv, nxt->String );
      tv = nxt;
    }

  ViewsText_OnSetString( tv, s );
}

/* 'C' function for method : 'App::RadioSetup.Close()' */
void AppRadioSetup_Close( AppRadioSetup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  Command1( CMD_EXIT_RADIO_SETTINGS, 0 );
  AppPopup_Hide((AppPopup)_this );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler1' 
   receives an event. */
void AppRadioSetup_onEvent( AppRadioSetup _this, XObject sender )
{
  AppProgress p;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  p = EwCastObject( _this->AcumeshEventHandler.Context, AppProgress );

  switch ( p->amount )
  {
    case 1 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 1 );
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const054F ));
    }
    break;

    case 0 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 0 );
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0553 ));
    }
    break;

    case 2 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0554 ));
    }
    break;

    case -2 :
    {
      CoreGroup_OnSetEnabled((CoreGroup)&_this->PushButton2, 0 );
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0555 ));
    }
    break;

    case 3 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0556 ));
    }
    break;

    case 4 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0557 ));
    }
    break;

    case 5 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0558 ));
    }
    break;

    case 6 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const0559 ));
    }
    break;

    case 7 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const055A ));
    }
    break;

    case 8 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const055B ));
    }
    break;

    case -3 :
    {
      AppRadioSetup_AddLine( _this, EwLoadString( &_Const055C ));
    }
    break;
  }
}

/* 'C' function for method : 'App::RadioSetup.GetItems()' */
void AppRadioSetup_GetItems( AppRadioSetup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  switch ( _this->DropDownMenu.itemIndex )
  {
    case 0 :
      EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const0552 ));
    break;

    case 1 :
      EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const055D ));
    break;

    case 2 :
      EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const055E ));
    break;

    case 3 :
      EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const055F ));
    break;

    case 4 :
      EwRetainString( &_this->DropDownMenu.itemName, EwLoadString( &_Const0560 ));
    break;
  }
}

/* 'C' function for method : 'App::RadioSetup.Select()' */
void AppRadioSetup_Select( AppRadioSetup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  Command1( CMD_CHANGE_RADIO_SETTINGS, 0 );
}

/* Variants derived from the class : 'App::RadioSetup' */
EW_DEFINE_CLASS_VARIANTS( AppRadioSetup )
EW_END_OF_CLASS_VARIANTS( AppRadioSetup )

/* Virtual Method Table (VMT) for the class : 'App::RadioSetup' */
EW_DEFINE_CLASS( AppRadioSetup, AppPopup, "App::RadioSetup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppRadioSetup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppRadioSetup )

/* Font resource : 'App::TerminalFont' */
EW_DEFINE_FONT_RES( AppTerminalFont, 13, 3, 0, 16, 0x001F, 0x0042 )
  EW_GLYPH( 0x001F, 2, -10, 6, 10, 10, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 10, 0x00000085 ),               /* ' ' */
  EW_GLYPH( 0x0021, 4, -12, 1, 12, 10, 0x00000085 ),            /* '!' */
  EW_GLYPH( 0x0022, 2, -12, 5, 4, 10, 0x000000A7 ),             /* '"' */
  EW_GLYPH( 0x0023, 0, -12, 9, 12, 10, 0x000000E3 ),            /* '#' */
  EW_GLYPH( 0x0024, 2, -13, 6, 14, 10, 0x0000026B ),            /* '$' */
  EW_GLYPH( 0x0025, 0, -12, 10, 12, 10, 0x00000385 ),           /* '%' */
  EW_GLYPH( 0x0026, 0, -12, 10, 12, 10, 0x00000557 ),           /* '&' */
  EW_GLYPH( 0x0027, 4, -12, 1, 4, 10, 0x00000703 ),             /* ''' */
  EW_GLYPH( 0x0028, 3, -12, 6, 14, 10, 0x0000071B ),            /* '(' */
  EW_GLYPH( 0x0029, 1, -12, 6, 14, 10, 0x00000810 ),            /* ')' */
  EW_GLYPH( 0x002A, 1, -12, 7, 7, 10, 0x00000905 ),             /* '*' */
  EW_GLYPH( 0x002B, 0, -8, 9, 8, 10, 0x000009C2 ),              /* '+' */
  EW_GLYPH( 0x002C, 4, -2, 2, 5, 10, 0x00000A4E ),              /* ',' */
  EW_GLYPH( 0x002D, 2, -5, 6, 1, 10, 0x00000A77 ),              /* '-' */
  EW_GLYPH( 0x002E, 3, -2, 2, 2, 10, 0x00000A95 ),              /* '.' */
  EW_GLYPH( 0x002F, 1, -12, 8, 14, 10, 0x00000AA1 ),            /* '/' */
  EW_GLYPH( 0x0030, 1, -12, 7, 12, 10, 0x00000B75 ),            /* '0' */
  EW_GLYPH( 0x0031, 1, -12, 7, 12, 10, 0x00000C8B ),            /* '1' */
  EW_GLYPH( 0x0032, 1, -12, 6, 12, 10, 0x00000D25 ),            /* '2' */
  EW_GLYPH( 0x0033, 2, -12, 5, 12, 10, 0x00000E0D ),            /* '3' */
  EW_GLYPH( 0x0034, 0, -12, 8, 12, 10, 0x00000EE1 ),            /* '4' */
  EW_GLYPH( 0x0035, 2, -12, 5, 12, 10, 0x00000FC5 ),            /* '5' */
  EW_GLYPH( 0x0036, 1, -12, 7, 12, 10, 0x00001088 ),            /* '6' */
  EW_GLYPH( 0x0037, 1, -12, 7, 12, 10, 0x000011BE ),            /* '7' */
  EW_GLYPH( 0x0038, 1, -12, 7, 12, 10, 0x000012A7 ),            /* '8' */
  EW_GLYPH( 0x0039, 1, -12, 7, 12, 10, 0x00001409 ),            /* '9' */
  EW_GLYPH( 0x003A, 3, -8, 2, 8, 10, 0x0000154A ),              /* ':' */
  EW_GLYPH( 0x003B, 3, -8, 2, 11, 10, 0x00001572 ),             /* ';' */
  EW_GLYPH( 0x003C, 1, -8, 8, 8, 10, 0x000015B5 ),              /* '<' */
  EW_GLYPH( 0x003D, 1, -6, 8, 4, 10, 0x00001697 ),              /* '=' */
  EW_GLYPH( 0x003E, 1, -8, 8, 8, 10, 0x00001717 ),              /* '>' */
  EW_GLYPH( 0x003F, 1, -12, 7, 12, 10, 0x000017F9 ),            /* '?' */
  EW_GLYPH( 0x0040, 0, -12, 10, 12, 10, 0x000018E1 ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -10, 10, 10, 10, 0x00001A95 ),           /* 'A' */
  EW_GLYPH( 0x0042, 1, -10, 7, 10, 10, 0x00001BCE ),            /* 'B' */
  EW_GLYPH( 0x0043, 0, -10, 8, 10, 10, 0x00001CD6 ),            /* 'C' */
  EW_GLYPH( 0x0044, 1, -10, 7, 10, 10, 0x00001DD3 ),            /* 'D' */
  EW_GLYPH( 0x0045, 1, -10, 7, 10, 10, 0x00001E93 ),            /* 'E' */
  EW_GLYPH( 0x0046, 1, -10, 7, 10, 10, 0x00001F4D ),            /* 'F' */
  EW_GLYPH( 0x0047, 1, -10, 8, 10, 10, 0x00001FEF ),            /* 'G' */
  EW_GLYPH( 0x0048, 1, -10, 7, 10, 10, 0x00002102 ),            /* 'H' */
  EW_GLYPH( 0x0049, 1, -10, 7, 10, 10, 0x00002178 ),            /* 'I' */
  EW_GLYPH( 0x004A, 2, -10, 5, 10, 10, 0x0000220A ),            /* 'J' */
  EW_GLYPH( 0x004B, 1, -10, 9, 10, 10, 0x00002280 ),            /* 'K' */
  EW_GLYPH( 0x004C, 1, -10, 7, 10, 10, 0x0000237E ),            /* 'L' */
  EW_GLYPH( 0x004D, 0, -10, 8, 10, 10, 0x000023E0 ),            /* 'M' */
  EW_GLYPH( 0x004E, 1, -10, 7, 10, 10, 0x000024BF ),            /* 'N' */
  EW_GLYPH( 0x004F, 1, -10, 8, 10, 10, 0x00002563 ),            /* 'O' */
  EW_GLYPH( 0x0050, 1, -10, 7, 10, 10, 0x00002683 ),            /* 'P' */
  EW_GLYPH( 0x0051, 1, -10, 9, 12, 10, 0x0000274D ),            /* 'Q' */
  EW_GLYPH( 0x0052, 1, -10, 8, 10, 10, 0x000028A6 ),            /* 'R' */
  EW_GLYPH( 0x0053, 1, -10, 7, 10, 10, 0x0000298E ),            /* 'S' */
  EW_GLYPH( 0x0054, 0, -10, 9, 10, 10, 0x00002AB1 ),            /* 'T' */
  EW_GLYPH( 0x0055, 1, -10, 7, 10, 10, 0x00002B4F ),            /* 'U' */
  EW_GLYPH( 0x0056, 0, -10, 10, 10, 10, 0x00002BE1 ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -10, 10, 10, 10, 0x00002D05 ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -10, 10, 10, 10, 0x00002E6C ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -10, 10, 10, 10, 0x00002FA5 ),           /* 'Y' */
  EW_GLYPH( 0x005A, 1, -10, 8, 10, 10, 0x00003089 ),            /* 'Z' */
  EW_GLYPH( 0x005B, 3, -12, 5, 14, 10, 0x0000318D ),            /* '[' */
  EW_GLYPH( 0x005C, 1, -12, 8, 14, 10, 0x00003207 ),            /* '\' */
  EW_GLYPH( 0x005D, 1, -12, 5, 14, 10, 0x000032DB ),            /* ']' */
  EW_GLYPH( 0x005E, 1, -12, 8, 10, 10, 0x00003355 ),            /* '^' */
  EW_GLYPH( 0x005F, 0, 0, 10, 1, 10, 0x00003441 ),              /* '_' */
  EW_GLYPH( 0x0060, 3, -13, 3, 2, 10, 0x00003473 ),             /* '`' */

  EW_FONT_PIXEL( AppTerminalFont, 0x00003496 )                  /* ratio 73.55 % */
    0xEAD6B5BF, 0x175AD6BD, 0x00000000, 0x5AD6BD80, 0xFC3C42F7, 0x0BFE3FAE, 0xC0FF8FEB,
    0x1FC5FC40, 0xD829E59E, 0x1E30BEDB, 0x6B7FE1E3, 0xFF7FDADF, 0xDE6FDE6F, 0x9BDB7B3F,
    0x9DDF9DFF, 0x5DFFDDDF, 0xDBBDD777, 0xEE033C33, 0x63D437B6, 0x1F45C03D, 0x9D79D7E7,
    0x19E0BF33, 0x85FF7E03, 0x6B06BEF9, 0xBE6927FB, 0x7A103EF0, 0xEBDC54F0, 0xFD7DDEFC,
    0x97F77F22, 0x7FF7DE78, 0xDE792FFF, 0xBEF1669A, 0x3DE59A6A, 0xFFDFFDE9, 0xDFC878FB,
    0xE02F39FD, 0xF1EF017D, 0xF1E4BFBB, 0x7FFBFFBC, 0x34D579E5, 0xD352FBCB, 0xEF24F7AC,
    0xF25FFEFF, 0xEF00F777, 0xD407BEFF, 0xCA300CF4, 0x9EF7C137, 0xF65F50D1, 0xEFDBCF0B,
    0xCD6FA707, 0x932788B5, 0x7FE61DF7, 0xE677E43C, 0x587BFD9E, 0x3FF56EF1, 0xF667DEE7,
    0xC0FFAFFC, 0xF77D0EF8, 0xC8CF72B5, 0x07DF87DF, 0x0048C14F, 0xF053C246, 0x1F7F20FB,
    0xA0CFFCAC, 0x1BE7BECF, 0x3134FBB8, 0xFBE0B9FF, 0xA83F7C25, 0x90007207, 0xEF81EA03,
    0x3197EF87, 0xDF772E77, 0xF0780706, 0xF9FB3DFB, 0x6BD8CEFD, 0x59F4F38F, 0x8EF51FA7,
    0xB9ACD62E, 0x000005C0, 0xAF7BDC00, 0xF7BDEF7B, 0x0BDEF75E, 0xDCBDC000, 0x7BDFAA78,
    0x5EF7BDEF, 0xBA03F180, 0x374030C1, 0x06E80618, 0x60DD00C3, 0x0C1BA018, 0x61837403,
    0xFE406E80, 0xF7392FEE, 0x4AFE63DE, 0x50BFE6FD, 0x663039FF, 0xC8240482, 0xBFE63039,
    0x2BF9FF50, 0xBDCE9BF5, 0xE36B10F7, 0xF7037E77, 0x0000286E, 0x00000000, 0xBDD7BDC0,
    0x7FDFFDF7, 0xB7FF738B, 0x0C12B07B, 0xF23F9E00, 0x19AF8C5F, 0xE2FD135F, 0xEEF9E077,
    0xEE77F7BD, 0xF6F7FF2F, 0x8048C33B, 0x4EFBDC75, 0x058DBEF7, 0x3C27DC0E, 0xBFE73DF7,
    0x06882EA0, 0x1E3505FA, 0xBEF03FD0, 0xA03C6301, 0x7B9D407F, 0xBDEF7BAF, 0x0017BAF7,
    0xAF7BDEE0, 0xC005EF7B, 0x9CF70DF9, 0x46DE7833, 0x29E3003D, 0xFDDF4F71, 0xE73DE23D,
    0x39CF77C7, 0xDC79319E, 0xF77E581F, 0xEF7EC8FF, 0xBC69D2E9, 0x12AA0637, 0x9E30AFC4,
    0x8EDE43D9, 0xC77DEF7B, 0x7BDEF7BD, 0x7EF7BDEF, 0xE7869C0B, 0x7984CE0F, 0x7581FFC0,
    0x2CC0F7C0, 0xE783FFF0, 0xBF7DEB01, 0xF7DE3A2F, 0x789CDFBB, 0xD3D6146A, 0xFFDF1ADF,
    0xE3DEDE7B, 0xAF5FBE33, 0x375A9F57, 0x36F8831F, 0xFA263388, 0xDF7FB3E9, 0xBBFF3D2F,
    0x7B9EF187, 0xE30EFA3B, 0xFE40CF9D, 0x107ACC03, 0x5FC87B79, 0xBEFB9F54, 0x9FDFF9E9,
    0xC3D77E05, 0xCE738F1C, 0xBDCBDCFD, 0xCBDCBDC0, 0x9CBDC0BD, 0x1817EAA8, 0xDBBF183F,
    0x7B39DF8C, 0xFFFFDF8C, 0xBF18007F, 0xC0FFFFFF, 0x07B39DF8, 0x7BEDDF8C, 0xDEF7BDEF,
    0xF7BDEF7B, 0xEF7B805E, 0xDFDEF7BD, 0x06FEFA00, 0x6FCE7D8C, 0xFFFFF3C0, 0xE780037F,
    0xC6FFFFFF, 0x06FCE7D8, 0xDE037F7D, 0xCDBFEF7D, 0x4F8DEF73, 0x6173EF92, 0xF17BC80C,
    0xB3A83B9C, 0x2A0BEE07, 0x002E05C1, 0x5E73BF18, 0xE739CE78, 0x3CEFC4BC, 0xE62BFFCF,
    0x3BDDE31C, 0x6F7CFDF9, 0x92A87204, 0x883C3208, 0x94F0FC10, 0xBCE17467, 0xDEED9FFA,
    0xFA717D67, 0xE5FAF7B9, 0xE30067BE, 0xBE5F803E, 0x01E27980, 0x17BF19F3, 0x30A98FFC,
    0xF1B7879E, 0x37EF7B8B, 0xBDEE798A, 0x0566BBF7, 0x0FFC6B3C, 0xF7BDF6F0, 0x7BDD2F9E,
    0xAE42FFF7, 0xBB5FA881, 0xE9FF7CF7, 0x26FF7FDE, 0xC40FEE72, 0xBDC27882, 0xCF1FEEF7,
    0xE7FFDCEF, 0xF9EE7D3D, 0x8C1BF93F, 0x06781A75, 0xC0518010, 0xBB9CC0D7, 0xDEF7C7C8,
    0xF7BDEF73, 0xEF706F9E, 0xCF1127BD, 0x00F181F9, 0xB500000B, 0x7B97B391, 0xF7BBFDEF,
    0x7BAF7BDE, 0x0017BDEF, 0xDEF7B800, 0x5EF7BDCB, 0xEF7B8000, 0x7BDEF7BD, 0xBDEEBDEF,
    0x00005EF7, 0x2F7BDEE0, 0x017BDEF7, 0xDF9E0000, 0x7BCFFFB9, 0x7FF3DCFA, 0xEB1837F2,
    0x000CF034, 0xC29F7BDC, 0x806FFEBD, 0xF84CF6B9, 0x7FEFBFFA, 0x0001705E, 0xF7BDC000,
    0xF7BDEE5E, 0xF7000002, 0xBDEF7BDE, 0x02F7BAF7, 0x00000000, 0xBAF7B800, 0x5EF7BAF7,
    0x00005EF7, 0x98672000, 0xDB9EFFCF, 0x01FFC617, 0xCF03CF75, 0xFB980FFD, 0x02F1D017,
    0xFA8037FB, 0x77E204F7, 0x777BC03F, 0xCF39CF02, 0x00000005, 0x00000000, 0xBDEF7BDC,
    0x3CBEC0F7, 0x67975264, 0x3EFC2A71, 0x8188AC6A, 0xF81EBFE7, 0x18C1F7D5, 0x800DEC12,
    0x02FAE0BB, 0x2B305EFC, 0xE540FF41, 0x1C836F00, 0x620BDE05, 0x7EFBEF93, 0xDF7EDE29,
    0x3FEF1BDF, 0x0B5BFF88, 0x18808D56, 0x46202300, 0xFEF5582D, 0xF1BFF883, 0xDEFEFBF6,
    0xF3DEF7B8, 0xFDEF7B85, 0x40AB107F, 0xBB4EA226, 0xB8FB9F77, 0x000DFFF7, 0xEFBE4000,
    0xF6F125FB, 0xF0DEFEFB, 0xBFF883FE, 0x232AC16A, 0x23000620, 0xB05A8620, 0xF883FF4A,
    0xDFBF5F37, 0xF7DE21F7, 0xD5D0131B, 0xFCF7BDCF, 0x7DDEF712, 0xE401AC40, 0xDC5EF500,
    0xBDC0DFDB, 0xB77E01EB, 0xC019DF80, 0xDFFEA6F7, 0xFEEFBFB3, 0x5AFFB9EF, 0x1379EB18,
    0x2BDDF77E, 0xBFFBBF98, 0x2F7DF185, 0x213DF1A8, 0x7BDE39DE, 0xBDEFA7FF, 0xEF7BDEF7,
    0xF7BAF7BD, 0x0000005E, 0x00000000, 0x2E0B8000, 0x00000000, 0x23031880, 0xDFD90EBF,
    0x3DDEFBDC, 0xEFD4057F, 0x67DEE01C, 0xBE558C05, 0xF597DE17, 0xE783D720, 0xF7C1FBE1,
    0xCE42678A, 0xBCE03F31, 0x566A04DF, 0xFA803FE0, 0xEB1807AF, 0x9C3FF97F, 0x43CC8F5D,
    0x9AD5233E, 0xF73219E1, 0xCF24567E, 0xF3FDFAAA, 0x318FBEE1, 0x6C67977F, 0x8A23166A,
    0x300FD4BF, 0xDA80EFBB, 0xEEA4EBED, 0xD18DEF87, 0x3FFBC41F, 0x404CC027, 0x027BDF7E,
    0xFEAABE71, 0xFF5175F0, 0xB982DF4F, 0xAE401BFB, 0xADF8835F, 0x5EFC2FB8, 0xE0FDF14A,
    0x00DF78ED, 0x2A00F7BD, 0x0000001F, 0xF7BDEE00, 0xBDEF7BDE, 0x8177DEF7, 0xBCE30DBA,
    0xDF03FD10, 0xC275F01B, 0x5BAC067B, 0xEF7BDFA0, 0x7BDEF7BD, 0x05EF7BAF, 0x00000000,
    0xF7B80000, 0xBA00DFDE, 0xDD006181, 0x6E8030C0, 0x37401860, 0x1BA00C30, 0x0DD00618,
    0xBEE8030C, 0xEF7BDEF7, 0x000000BD, 0x00000000, 0x260BDEF7, 0xE2FC0D90, 0x81CF5881,
    0x7813DF99, 0xA7CC5ADB, 0x66BE7F7C, 0xF035A8CC, 0xFDF0DBCC, 0xDEF7BDEE, 0xFF9DEF7B,
    0x001FBF98
EW_END_OF_FONT_RES( AppTerminalFont )

/* Table with links to derived variants of the font resource : 'App::TerminalFont' */
EW_RES_WITHOUT_VARIANTS( AppTerminalFont )

/* Bitmap resource : 'App::outputs_off' */
EW_DEFINE_BITMAP_RES( Appoutputs_off )
  EW_BITMAP_FRAMES( Appoutputs_off, Default, EW_DRIVER_VARIANT_RGBA8888, 21, 22, 0 )
    EW_BITMAP_FRAME( 6, 5, 4, 4, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appoutputs_off, Default )               /* ratio 56.49 % */
    0x0C080100, 0x998CC330, 0xB4A83002, 0x49C2F0A9, 0x942A259A, 0x42B3F19C, 0x27521A09,
    0x85D19890, 0x68998922, 0x2B7CCD1D, 0xB8CCA451, 0x9CC64511, 0x04CE394C, 0x52E13292,
    0x2D532928, 0x2A604785, 0x25199C8E, 0x359ACA23, 0x1954AA00, 0x1FCFE000, 0x0A874201,
    0xC64017FC, 0x223D3613, 0xB2E541A2, 0x2F14360C, 0xB45C857D, 0x349A0962, 0x793ABC2D,
    0x8ECCE4D1, 0xB8DC5318, 0x0DE4F1A8, 0xE0541C8C, 0xA531C908, 0x698A8C4D, 0xF2A0D452,
    0x268B8726, 0x90B09868, 0x9A2C2678, 0xC4CB581E, 0xCAC67C19, 0xCE6A260B, 0xC3DAF0A4,
    0x4C15D5A6, 0xB280D62E, 0x2E114726, 0x04081673, 0xE9B46010, 0xA331A6D3, 0x64A26321,
    0xCC4C163C, 0xFA8D41C8, 0x082F8FC7, 0x6129CA42, 0x16344C84, 0x6144CE4B, 0x99C9314C,
    0x48CFB060, 0x4569E896, 0x6C8E3412, 0xB1D4099A, 0xCF139B0C, 0xD33464B5, 0x3291C524,
    0x3E1FBC44, 0x6F147BD1, 0x184CFB32, 0xF5AB8319, 0x9C2E1D98, 0x8281B9A8, 0x678E84F3,
    0x424094CA, 0x8F0B1B06, 0x46A5FC61, 0xE265C65E, 0xA0625782, 0x2A145C10, 0x0B48B478,
    0x2071AD99, 0x46A8581A, 0xD46A8406, 0xCE44D111, 0x4C88719D, 0xDBC23467, 0x54A0A218,
    0xAC242CC6, 0x480A4A67, 0x1302E884, 0x21B1A069, 0x5191EA18, 0x351A0ACD, 0x105B43F1,
    0x86E147C4, 0xC5A0F485, 0x66583E1D, 0xDC656F07, 0xF1195243, 0x880E78D4, 0x1120A0CB,
    0x3199322A, 0x08674549, 0x311D2202, 0x1C86D148, 0x87215037, 0xE144331C, 0xC82D1C46,
    0xF37C4547, 0x31864791, 0x62F1661B, 0x67A8741A, 0x9CF079D2, 0x540D8F67, 0x0B85E1C4,
    0x8161A045, 0x51AC4F0B, 0xA46511A7, 0x8B3FE483, 0xA3288A36, 0x065A3A8F, 0x892E93A4,
    0x446B434E, 0xD526E6E1, 0x8515D259, 0xCFD18D24, 0xB19229A2, 0xFE1E574E, 0x141C8590,
    0x6DC1F698, 0x9DF09808, 0x23EEA51D, 0xDEB8A529, 0x8F3BE48A, 0x6CA0D729, 0x60D2FD55,
    0x092C5A19, 0x9045A90E, 0x638A4FC1, 0x1542A298, 0xDB40306A, 0xE18D2E69, 0x46C90902,
    0xDCA46BA3, 0x3CDBDA56, 0x6BF1EE20, 0xD3363518, 0x9C6B1A20, 0xAE198470, 0xB20FC92C,
    0xC2539C64, 0x312C6211, 0xC433B4ED, 0x839D80A6, 0x3E4658A4, 0x2C9A56DB, 0x277C283E,
    0xD86786C9, 0x67834D69, 0x23D961B0, 0x68D3D248, 0x976CFC49, 0x267D070A, 0x00C6EF70,
    0x79C3B874, 0x290B7523, 0x5790FE19, 0xA1C02C06, 0x63B60621, 0x19983388, 0x8665745C,
    0x5191241E, 0xD864B6CF, 0x6C150333, 0xCFF1C0D8, 0x48D1C400, 0x6AC80923, 0xD6B731C6,
    0x650B0D68, 0x9C335159, 0xD981C91E, 0xFA94531A, 0xAA8BC8AE, 0x40320637, 0x0E800D77,
    0x80D1D462, 0xE32065AC, 0x35C0A9A8, 0xD822955C, 0x0BCA7199, 0x9E710285, 0xAAE3013B,
    0x78D7196E, 0x510BB40D, 0x335E7A08, 0x5323CAFE, 0xB0A88219, 0x96F34184, 0x66660BD1,
    0xB6A4815C, 0xE93E4758, 0xFDE8F186, 0x4A7D11B3, 0x19313770, 0xDA486191, 0x8C69D85B,
    0x91BC674D, 0xB8A91951, 0x89ADF75B, 0xC739637D, 0x21000D49, 0x5ECC491A, 0x5C6411EC,
    0x5B1CABF3, 0xE4B12BF9, 0xF0FC8AB9, 0x58435DEB, 0x02960C86, 0x581E4697, 0xEAF1118E,
    0xCDBD93C0, 0xD198590C, 0xD6D3F12A, 0x181A84A0, 0x760BF8D4, 0x42826467, 0x579C2CDF,
    0x02B6920E, 0xF6A23AAF, 0x590CFDDC, 0xFD80AC6A, 0x868680B4, 0xD32644D5, 0x621383A2,
    0x0406F8EF, 0x2D55FBA0, 0x898FE4EC, 0xA71FA191, 0x9C0B064B, 0xC09EB2A0, 0xE3F30321,
    0xF0D44C98, 0xE228FC01, 0xC1A0663F, 0x1B434A68, 0x5D41A501, 0xA4DAB866, 0x7D0645B0,
    0x8E0CC6F0, 0x6CEBE088, 0xCC0207F3, 0x78660AA0, 0xF0090B00, 0x68C4D833, 0x611BE93B,
    0xC201F46F, 0x87F0AA14, 0x12816B7A, 0x1003E0CC, 0xEC66A33E, 0x06379240, 0xD22010F3,
    0x00002026, 0x00000000

  EW_BITMAPS_TABLE( Appoutputs_off )
    EW_BITMAP( Appoutputs_off, Default )
EW_END_OF_BITMAP_RES( Appoutputs_off )

/* Table with links to derived variants of the bitmap resource : 'App::outputs_off' */
EW_RES_WITHOUT_VARIANTS( Appoutputs_off )

/* Initializer for the class 'App::UpdateDevicePopup' */
void AppUpdateDevicePopup__Init( AppUpdateDevicePopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetHorizontalValueBar__Init( &_this->HorizontalValueBar, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->ProgressHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppUpdateDevicePopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const030F );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const01C7 );
  CoreRectView__OnSetBounds( &_this->HorizontalValueBar, _Const0310 );
  WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 0 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0311 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0561 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0313 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const00E8 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->HorizontalValueBar ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  WidgetSetHorizontalValueBar_OnSetAppearance( &_this->HorizontalValueBar, EwGetAutoObject( 
  &WidgetSetHorizontalValueBar_Medium, WidgetSetHorizontalValueBarConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnRelease = EwNewSlot( _this, AppUpdateDevicePopup_CancelSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->ProgressHandler.OnEvent = EwNewSlot( _this, AppUpdateDevicePopup_ProgressEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->ProgressHandler, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->UpdateDeviceEvent );
}

/* Re-Initializer for the class 'App::UpdateDevicePopup' */
void AppUpdateDevicePopup__ReInit( AppUpdateDevicePopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetHorizontalValueBar__ReInit( &_this->HorizontalValueBar );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  CoreSystemEventHandler__ReInit( &_this->ProgressHandler );
}

/* Finalizer method for the class 'App::UpdateDevicePopup' */
void AppUpdateDevicePopup__Done( AppUpdateDevicePopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppUpdateDevicePopup );

  /* Finalize all embedded objects */
  WidgetSetHorizontalValueBar__Done( &_this->HorizontalValueBar );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );
  CoreSystemEventHandler__Done( &_this->ProgressHandler );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::UpdateDevicePopup' */
void AppUpdateDevicePopup__Mark( AppUpdateDevicePopup _this )
{
  EwMarkObject( &_this->HorizontalValueBar );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->ProgressHandler );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::UpdateDevicePopup.CancelSlot()' */
void AppUpdateDevicePopup_CancelSlot( AppUpdateDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreSystemEventHandler_OnSetEnabled( &_this->ProgressHandler, 0 );
  AppPopup_Hide((AppPopup)_this );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler' 
   receives an event. */
void AppUpdateDevicePopup_ProgressEvent( AppUpdateDevicePopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->Super1.Dead )
  {
    AppProgress p = EwCastObject( _this->ProgressHandler.Context, AppProgress );

    if ( EwCompString( _this->PushButton.Label, EwLoadString( &_Const0314 )) != 
        0 )
    {
      if ( p->amount == -1 )
      {
        WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0314 
        ));
        WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 
        0 );
      }
      else
        if ( p->amount == 100 )
        {
          WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0315 
          ));
          WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 
          100 );
        }
        else
        {
          WidgetSetHorizontalValueBar_OnSetCurrentValue( &_this->HorizontalValueBar, 
          p->amount );
        }
    }
  }
}

/* Variants derived from the class : 'App::UpdateDevicePopup' */
EW_DEFINE_CLASS_VARIANTS( AppUpdateDevicePopup )
EW_END_OF_CLASS_VARIANTS( AppUpdateDevicePopup )

/* Virtual Method Table (VMT) for the class : 'App::UpdateDevicePopup' */
EW_DEFINE_CLASS( AppUpdateDevicePopup, AppPopup, "App::UpdateDevicePopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppUpdateDevicePopup )

/* User defined auto object: 'App::DummyOutputChan1' */
EW_DEFINE_AUTOOBJECT( AppDummyOutputChan1, AppOutputChannel )

/* Initializer for the auto object 'App::DummyOutputChan1' */
void AppDummyOutputChan1__Init( AppOutputChannel _this )
{
  _this->flags = AppOptionsCoincidence;
  _this->actions = AppActionBitsEvacuation | AppActionBitsFire | AppActionBitsFirstAid;
  _this->type = AppChannelTypeBeacon;
}

/* Table with links to derived variants of the auto object : 'App::DummyOutputChan1' */
EW_DEFINE_AUTOOBJECT_VARIANTS( AppDummyOutputChan1 )
EW_END_OF_AUTOOBJECT_VARIANTS( AppDummyOutputChan1 )

/* Bitmap resource : 'App::ontest' */
EW_DEFINE_BITMAP_RES( Appontest )
  EW_BITMAP_FRAMES( Appontest, Default, EW_DRIVER_VARIANT_RGBA8888, 26, 27, 0 )
    EW_BITMAP_FRAME( 1, 1, 24, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appontest, Default )                    /* ratio 30.63 % */
    0xA8CC2300, 0x8F0300F2, 0x0C38A92B, 0x214C82E9, 0x170D8743, 0x11287C46, 0x188AC5A2,
    0xC89C6A29, 0x8F46E2F1, 0xD866251D, 0x07158571, 0x6424631C, 0x150591E0, 0xFE5D2207,
    0x53398CBD, 0x349B4C26, 0xA9DCD66F, 0x9FCE67B3, 0x04F28338, 0xCFA8543A, 0xB47C19A0,
    0x4B8440DC, 0xB8439DB2, 0x70B0DBD4, 0x562ED51A, 0x8ACD5EAB, 0xAD57AB75, 0xE586BB60,
    0xD8ABF64A, 0x2AAB65B3, 0xA9935A94, 0x6F4FB753, 0x85D2086E, 0x78BB8018, 0xCBDDEAF3,
    0xBFDFAFB7, 0x9DDF0380, 0xD36DB75B, 0xD2DB7064, 0xB1B82BB5, 0xF390C7E3, 0xF8662612,
    0x75C561ED, 0xCCDE6B23, 0xCAE2F079, 0x5DCB2F88, 0x5E34B9DC, 0xC4A6340A, 0x4A63A0C0,
    0x9C360BA9, 0x9B2D82F0, 0x521CECF6, 0xF0F8011E, 0xCFE48103, 0x1E270F72, 0x05B4B99D,
    0x68B8501A, 0x9465C200, 0x5A4F1905, 0x65695E04, 0x3AEBD159, 0xF241707F, 0xCB7070BB,
    0x8E33314E, 0x1306414C, 0x04B95437, 0x9DE59E5D, 0x5C4D1885, 0x6400CDF4, 0xEAB99BCB,
    0xA9890837, 0x7FFEFF9F, 0xCEE171CB, 0x71503404, 0x7D947742, 0xC4785A17, 0x0558278D,
    0xDFA1A9E6, 0x1760FD16, 0xAC5A72D3, 0x480B4123, 0x0397D070, 0x0121502A, 0x38912988,
    0x7D290AA2, 0xBE17C1F0, 0x681935F1, 0x1A47F1C3, 0xE0CC1660, 0xFA131A04, 0x194C5503,
    0x350590F4, 0xC3305145, 0x16986313, 0xC60A8BD8, 0x7D64CFF8, 0x1904C795, 0x8FF8EE39,
    0x215C3705, 0x542A0007, 0x3E068061, 0x49018226, 0x82704C9E, 0x09180D0E, 0x09FC9218,
    0xC58C9A27, 0x16D065DD, 0x05B5CC2A, 0x805E523F, 0x987515C3, 0x50768196, 0x39C594AC,
    0x68016E3D, 0x0A06820F, 0x145A0FA8, 0x1A13A623, 0x9AE30820, 0x5778CE4B, 0x89D446A0,
    0x98791603, 0x570F6939, 0x51A16330, 0xC5D1023C, 0x09268E13, 0x5D7C9329, 0x601683A0,
    0x15C36058, 0x979A6AA4, 0x01643905, 0x605397C5, 0xF4142543, 0x0DEBDAEC, 0x45497EBC,
    0xB0D8122F, 0xA6A50385, 0x6C5C5E09, 0xB3EB283A, 0xA4B9A19A, 0x0B360C9A, 0x02D1B5ED,
    0xCC82ECA7, 0x5EA6DA46, 0x4300600C, 0x9B880A05, 0x9C30B944, 0xEABA2E6B, 0xBBEECBA6,
    0xAEEBC6EB, 0xBBD6EDBC, 0x58390880, 0x70B497D0, 0x5DEA8929, 0xC5B0E81A, 0x3171FA09,
    0x1F08A7CF, 0xA3513095, 0x058FD169, 0x1D216838, 0xDB52FC5E, 0xB000BFED, 0x0B128566,
    0xC771EA83, 0x03905F1D, 0x3B244B16, 0xF1E2B2ED, 0xACAA8015, 0x2145C97E, 0xC3BCC32E,
    0x3CD731CB, 0xDF34CCB3, 0x3CCE736C, 0x9DB3ECE3, 0xC009145A, 0xDC98021F, 0x6292A9EF,
    0xDA91F4AB, 0xCA6DCC9E, 0x57FD474B, 0x25CB28C5, 0x0578316A, 0x77D6F590, 0xD735DD69,
    0x361D7800, 0x4D9762D8, 0xA75FD9F6, 0x1BD7763D, 0x54630D5C, 0xC5B10B17, 0xBDD2C23F,
    0xE3761503, 0x77DEF75D, 0xDF37EDE7, 0xF80DF77A, 0x1E1782DF, 0x4F7EE1F8, 0xC97A5418,
    0x274598F4, 0x392C2B20, 0x3C7F94C3, 0xD795E5B9, 0x560EC174, 0x11A202AC, 0x85797C12,
    0xD3228124, 0x9BA74323, 0xABEA03DE, 0xEBFACEAB, 0xFA9EC7AE, 0x0ED3ADEC, 0xD7B2EDBB,
    0x18433BAE, 0x030928F8, 0x4150F024, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( Appontest )
    EW_BITMAP( Appontest, Default )
EW_END_OF_BITMAP_RES( Appontest )

/* Table with links to derived variants of the bitmap resource : 'App::ontest' */
EW_RES_WITHOUT_VARIANTS( Appontest )

/* Initializer for the class 'App::AppSupportPopup' */
void AppAppSupportPopup__Init( AppAppSupportPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppMattsKeyboard__Init( &_this->MattsKeyboard, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text1, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text2, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  AppWritable1__Init( &_this->KeyWritable, &_this->_XObject, 0 );
  AppWritable1__Init( &_this->Password, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text3, &_this->_XObject, 0 );
  AppWritable1__Init( &_this->APN, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAppSupportPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0562 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0375 );
  CoreRectView__OnSetBounds( &_this->MattsKeyboard, _Const0563 );
  CoreRectView__OnSetBounds( &_this->Text1, _Const0564 );
  ViewsText_OnSetAlignment( &_this->Text1, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text1, EwLoadString( &_Const0565 ));
  ViewsText_OnSetColor( &_this->Text1, _Const000E );
  CoreRectView__OnSetBounds( &_this->Text2, _Const0566 );
  ViewsText_OnSetAlignment( &_this->Text2, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text2, EwLoadString( &_Const0567 ));
  ViewsText_OnSetColor( &_this->Text2, _Const000E );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0568 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0569 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const056A );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->KeyWritable, _Const056B );
  CoreRectView__OnSetBounds( &_this->Password, _Const056C );
  _this->Password.MaxLength = 4;
  CoreRectView__OnSetBounds( &_this->Text3, _Const056D );
  ViewsText_OnSetAlignment( &_this->Text3, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text3, EwLoadString( &_Const056E ));
  ViewsText_OnSetColor( &_this->Text3, _Const000E );
  CoreRectView__OnSetBounds( &_this->APN, _Const056F );
  _this->APN.MaxLength = 4;
  CoreGroup__Add( _this, ((CoreView)&_this->MattsKeyboard ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->KeyWritable ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Password ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text3 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->APN ), 0 );
  ViewsText_OnSetFont( &_this->Text1, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  ViewsText_OnSetFont( &_this->Text2, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppAppSupportPopup_OK );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppAppSupportPopup_Cancel );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  ViewsText_OnSetFont( &_this->Text3, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));

  /* Call the user defined constructor */
  AppAppSupportPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::AppSupportPopup' */
void AppAppSupportPopup__ReInit( AppAppSupportPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppMattsKeyboard__ReInit( &_this->MattsKeyboard );
  ViewsText__ReInit( &_this->Text1 );
  ViewsText__ReInit( &_this->Text2 );
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  AppWritable1__ReInit( &_this->KeyWritable );
  AppWritable1__ReInit( &_this->Password );
  ViewsText__ReInit( &_this->Text3 );
  AppWritable1__ReInit( &_this->APN );
}

/* Finalizer method for the class 'App::AppSupportPopup' */
void AppAppSupportPopup__Done( AppAppSupportPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAppSupportPopup );

  /* Finalize all embedded objects */
  AppMattsKeyboard__Done( &_this->MattsKeyboard );
  ViewsText__Done( &_this->Text1 );
  ViewsText__Done( &_this->Text2 );
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  AppWritable1__Done( &_this->KeyWritable );
  AppWritable1__Done( &_this->Password );
  ViewsText__Done( &_this->Text3 );
  AppWritable1__Done( &_this->APN );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AppSupportPopup' */
void AppAppSupportPopup__Mark( AppAppSupportPopup _this )
{
  EwMarkObject( &_this->MattsKeyboard );
  EwMarkObject( &_this->Text1 );
  EwMarkObject( &_this->Text2 );
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->KeyWritable );
  EwMarkObject( &_this->Password );
  EwMarkObject( &_this->Text3 );
  EwMarkObject( &_this->APN );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppAppSupportPopup_Init( AppAppSupportPopup _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  EwPostSignal( EwNewSlot( _this, AppAppSupportPopup_SetFocus ), ((XObject)_this 
    ));
}

/* 'C' function for method : 'App::AppSupportPopup.SetFocus()' */
void AppAppSupportPopup_SetFocus( AppAppSupportPopup _this, XObject sender )
{
  XString k;
  XString p;
  XString a;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_ObtainFocus((CoreGroup)&_this->KeyWritable.TextEditor1 );
  k = 0;
  p = 0;
  a = 0;
  {
    Command cmd;

    Command0( CMD_GET_APP_SETUP, &cmd );

    k = EwNewStringAnsi( (char*) cmd.int0 );
    p = EwNewStringAnsi( (char*) cmd.int1 );
    a = EwNewStringAnsi( (char*) cmd.int2 );
  }
  AppTextEditor1_OnSetString( &_this->KeyWritable.TextEditor1, k );
  AppTextEditor1_OnSetString( &_this->Password.TextEditor1, p );
  AppTextEditor1_OnSetString( &_this->APN.TextEditor1, a );
}

/* 'C' function for method : 'App::AppSupportPopup.Cancel()' */
void AppAppSupportPopup_Cancel( AppAppSupportPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::AppSupportPopup.OK()' */
void AppAppSupportPopup_OK( AppAppSupportPopup _this, XObject sender )
{
  XString key;
  XString pass;
  XString apn;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  key = AppTextEditor1_OnGetString( &_this->KeyWritable.TextEditor1 );
  pass = AppTextEditor1_OnGetString( &_this->Password.TextEditor1 );
  apn = AppTextEditor1_OnGetString( &_this->APN.TextEditor1 );
  {
    char k[ 40];
    char p[ 20];
    char a[ 40];

    EwStringToAnsi( key, k, 40, '_' );
    EwStringToAnsi( pass, p, 20, '_' );
    EwStringToAnsi( apn, a, 40, '_' );

    // int kn = strlen( k );
    // int pn = strlen( p );

    // if ( k[ kn - 1 ] == '\n' ) k[ kn - 1 ] = 0;
    // if ( p[ pn - 1 ] == '\n' ) p[ pn - 1 ] = 0;

     Command3( CMD_SETUP_APP, (int) k, (int) p, (int) a );
  }
  AppPopup_Hide((AppPopup)_this );
}

/* Variants derived from the class : 'App::AppSupportPopup' */
EW_DEFINE_CLASS_VARIANTS( AppAppSupportPopup )
EW_END_OF_CLASS_VARIANTS( AppAppSupportPopup )

/* Virtual Method Table (VMT) for the class : 'App::AppSupportPopup' */
EW_DEFINE_CLASS( AppAppSupportPopup, AppPopup, "App::AppSupportPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAppSupportPopup )

/* Initializer for the class 'App::TextEditor1' */
void AppTextEditor1__Init( AppTextEditor1 _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  TemplatesTextEditor__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  EffectsBoolEffect__Init( &_this->blinkEffect, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CursorKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->BackspaceKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->DeleteKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->NewlineKeyHandler, &_this->_XObject, 0 );
  CoreKeyPressHandler__Init( &_this->CharacterKeyHandler, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  ViewsLine__Init( &_this->Caret, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppTextEditor1 );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0570 );
  _this->blinkEffect.Value2 = 0;
  _this->blinkEffect.Value1 = 1;
  EffectsBoolEffect_OnSetCycleDuration( &_this->blinkEffect, 500 );
  EffectsBoolEffect_OnSetInterCycleDelay( &_this->blinkEffect, 500 );
  _this->CursorKeyHandler.Filter = CoreKeyCodeCursorKeys;
  _this->BackspaceKeyHandler.Filter = CoreKeyCodeBackspace;
  _this->DeleteKeyHandler.Filter = CoreKeyCodeDelete;
  _this->NewlineKeyHandler.Filter = CoreKeyCodeEnter;
  _this->CharacterKeyHandler.Filter = CoreKeyCodeCharacterKeys;
  CoreView_OnSetLayout((CoreView)&_this->SlideTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0571 );
  _this->SlideTouchHandler.SlideHorz = 0;
  CoreSlideTouchHandler_OnSetFriction( &_this->SlideTouchHandler, 0.050000f );
  CoreView_OnSetLayout((CoreView)&_this->SimpleTouchHandler, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0572 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0573 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0574 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const012E );
  CoreSimpleTouchHandler_OnSetMaxStrikeCount( &_this->SimpleTouchHandler, 3 );
  CoreView_OnSetLayout((CoreView)&_this->Text, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Text, _Const0575 );
  ViewsText_OnSetWrapText( &_this->Text, 1 );
  ViewsText_OnSetAlignment( &_this->Text, ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter 
  );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const018B ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, _Const0576 );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, _Const0577 );
  ViewsLine_OnSetWidth2( &_this->Caret, 2 );
  ViewsLine_OnSetWidth1( &_this->Caret, 2 );
  ViewsLine_OnSetColor( &_this->Caret, _Const000E );
  ViewsLine_OnSetVisible( &_this->Caret, 0 );
  _this->WrapText = 1;
  _this->Alignment = ViewsTextAlignmentAlignHorzLeft | ViewsTextAlignmentAlignVertCenter;
  EwRetainString( &_this->String, EwLoadString( &_Const0068 ));
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Caret ), 0 );
  _this->blinkEffect.Outlet = EwNewRef( &_this->Caret, ViewsLine_OnGetVisible, ViewsLine_OnSetVisible 
  );
  _this->CursorKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onCursorKey 
  );
  _this->CursorKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onCursorKey 
  );
  _this->BackspaceKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onBackspaceKey 
  );
  _this->BackspaceKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onBackspaceKey 
  );
  _this->DeleteKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onDeleteKey 
  );
  _this->DeleteKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onDeleteKey 
  );
  _this->NewlineKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onNewlineKey 
  );
  _this->NewlineKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onNewlineKey 
  );
  _this->CharacterKeyHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onCharacterKey 
  );
  _this->CharacterKeyHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onCharacterKey 
  );
  _this->SimpleTouchHandler.OnDrag = EwNewSlot( _this, AppTextEditor1_onDragTouch 
  );
  _this->SimpleTouchHandler.OnHold = EwNewSlot( _this, AppTextEditor1_onHoldTouch 
  );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, AppTextEditor1_onReleaseTouch 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, AppTextEditor1_onPressTouch 
  );
  ViewsText_OnSetOnUpdate( &_this->Text, EwNewSlot( _this, AppTextEditor1_updateCaret 
  ));
  ViewsText_OnSetSlideHandler( &_this->Text, &_this->SlideTouchHandler );
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &ResourcesFontMedium, ResourcesFont 
  ));
  _this->Font = EwLoadResource( &ResourcesFontMedium, ResourcesFont );
}

/* Re-Initializer for the class 'App::TextEditor1' */
void AppTextEditor1__ReInit( AppTextEditor1 _this )
{
  /* At first re-initialize the super class ... */
  TemplatesTextEditor__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  EffectsBoolEffect__ReInit( &_this->blinkEffect );
  CoreKeyPressHandler__ReInit( &_this->CursorKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__ReInit( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsText__ReInit( &_this->Text );
  ViewsLine__ReInit( &_this->Caret );
}

/* Finalizer method for the class 'App::TextEditor1' */
void AppTextEditor1__Done( AppTextEditor1 _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppTextEditor1 );

  /* Finalize all embedded objects */
  EffectsBoolEffect__Done( &_this->blinkEffect );
  CoreKeyPressHandler__Done( &_this->CursorKeyHandler );
  CoreKeyPressHandler__Done( &_this->BackspaceKeyHandler );
  CoreKeyPressHandler__Done( &_this->DeleteKeyHandler );
  CoreKeyPressHandler__Done( &_this->NewlineKeyHandler );
  CoreKeyPressHandler__Done( &_this->CharacterKeyHandler );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsText__Done( &_this->Text );
  ViewsLine__Done( &_this->Caret );

  /* Release all used strings */
  EwReleaseString( &_this->String );

  /* Don't forget to deinitialize the super class ... */
  TemplatesTextEditor__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::TextEditor1' */
void AppTextEditor1__Mark( AppTextEditor1 _this )
{
  EwMarkObject( _this->magnifyingBack );
  EwMarkObject( _this->magnifyingView );
  EwMarkObject( &_this->blinkEffect );
  EwMarkObject( &_this->CursorKeyHandler );
  EwMarkObject( &_this->BackspaceKeyHandler );
  EwMarkObject( &_this->DeleteKeyHandler );
  EwMarkObject( &_this->NewlineKeyHandler );
  EwMarkObject( &_this->CharacterKeyHandler );
  EwMarkObject( &_this->SlideTouchHandler );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->Caret );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( _this->Font );

  /* Give the super class a chance to mark its objects and references */
  TemplatesTextEditor__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppTextEditor1_UpdateViewState( AppTextEditor1 _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );

  if ((( aState & CoreViewStateFocused ) == CoreViewStateFocused ))
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  else
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    ViewsLine_OnSetVisible( &_this->Caret, 0 );
  }
}

/* This slot method is called after the caret has been adjusted. Its job is to adjust 
   too the position of the magnifying glass view where the augmented text content 
   around the caret is shown. */
void AppTextEditor1_updateMagnifyingView( AppTextEditor1 _this, XObject sender )
{
  XRect srcArea;
  XRect extent;
  XRect bounds;
  XPoint caret;
  XInt32 srcX;
  XInt32 dstX;
  XPoint ofs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView == 0 )
    return;

  srcArea = _this->magnifyingView->Super1.SourceArea;
  extent = CoreView__GetExtent( _this->magnifyingView );
  bounds = _this->Super3.Bounds;
  caret = _this->Caret.Super1.Point1;
  srcX = caret.X - ( EwGetRectW( srcArea ) / 2 );

  if ( srcX < 0 )
    srcX = 0;

  if (( srcX + EwGetRectW( srcArea )) > EwGetRectW( bounds ))
    srcX = EwGetRectW( bounds ) - EwGetRectW( srcArea );

  ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwSetRectOrigin( 
  _this->magnifyingView->Super1.SourceArea, EwNewPoint( srcX, caret.Y )));
  dstX = ( bounds.Point1.X + caret.X ) - (( caret.X - srcX ) * 2 );
  ofs = EwNewPoint( dstX - extent.Point1.X, ( bounds.Point1.Y + caret.Y ) - extent.Point2.Y 
  );
  CoreView__MoveView( _this->magnifyingView, ofs, 0 );
  CoreView__MoveView( _this->magnifyingBack, ofs, 0 );
}

/* This slot method is called after a short delay when the user has moved the caret 
   or modified the text. Its job is to ensure that the caret is still visible. If 
   necessary, the editor content is scrolled. */
void AppTextEditor1_updateScrollOffset( AppTextEditor1 _this, XObject sender )
{
  XRect bounds;
  XInt32 ofsX;
  XInt32 ofsY;
  XPoint size;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  bounds = _this->Text.Super1.Bounds;
  ofsX = 0;
  ofsY = 0;

  if ( _this->Caret.Super1.Point1.X < bounds.Point1.X )
    ofsX = bounds.Point1.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.X > bounds.Point2.X )
    ofsX = bounds.Point2.X - _this->Caret.Super1.Point1.X;

  if ( _this->Caret.Super1.Point1.Y < bounds.Point1.Y )
    ofsY = bounds.Point1.Y - _this->Caret.Super1.Point1.Y;

  if ( _this->Caret.Super1.Point2.Y > bounds.Point2.Y )
    ofsY = bounds.Point2.Y - _this->Caret.Super1.Point2.Y;

  if (( ofsX != 0 ) || ( ofsY != 0 ))
    ViewsText_OnSetScrollOffset( &_this->Text, EwMovePointPos( _this->Text.ScrollOffset, 
    EwNewPoint( ofsX, ofsY )));

  ofsX = _this->Text.ScrollOffset.X;
  ofsY = _this->Text.ScrollOffset.Y;
  size = EwGetRectSize( ViewsText_GetContentArea( &_this->Text ));

  if ( size.X <= EwGetRectW( _this->Text.Super1.Bounds ))
    ofsX = 0;

  if ( size.Y <= EwGetRectH( _this->Text.Super1.Bounds ))
    ofsY = 0;

  ViewsText_OnSetScrollOffset( &_this->Text, EwNewPoint( ofsX, ofsY ));
}

/* This slot method is attached to the Text view. Each time the Text view has rearranged 
   the text, this method is called. Its job is to adjust the caret to the evtl. 
   new position. */
void AppTextEditor1_updateCaret( AppTextEditor1 _this, XObject sender )
{
  XPoint rowCol;
  XPoint pos;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rowCol = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );
  pos = ViewsText_RowCol2Position( &_this->Text, rowCol );
  CoreLineView_OnSetPoint1((CoreLineView)&_this->Caret, EwMovePointNeg( pos, EwNewPoint( 
  0, _this->Font->Ascent )));
  CoreLineView_OnSetPoint2((CoreLineView)&_this->Caret, EwMovePointPos( pos, EwNewPoint( 
  0, _this->Font->Descent )));

  if ( _this->blinkEffect.Enabled )
  {
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 0 );
    EffectsBoolEffect_OnSetEnabled( &_this->blinkEffect, 1 );
  }

  if ( _this->autoScroll )
  {
    EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateScrollOffset ), ((XObject)_this 
      ));
    _this->autoScroll = 0;
  }

  if ( _this->magnifyingView != 0 )
    EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateMagnifyingView ), ((XObject)_this 
      ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   hide the magnifying glass view again. */
void AppTextEditor1_onReleaseTouch( AppTextEditor1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingView ));
    CoreGroup__Remove( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ));
    _this->magnifyingView = 0;
    _this->magnifyingBack = 0;
    CoreGroup__OnSetBuffered( _this, 0 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   move the caret accordingly to the user's finger movement. */
void AppTextEditor1_onDragTouch( AppTextEditor1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->magnifyingView != 0 )
  {
    XPoint rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
      );
    XInt32 newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

    if ( newCaretIndex != _this->caretIndex )
    {
      _this->caretIndex = newCaretIndex;
      EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateCaret ), ((XObject)_this 
        ));
      _this->autoScroll = 1;
    }
  }
  else
  {
    XPoint ofs = EwMovePointNeg( _this->SimpleTouchHandler.CurrentPos, _this->SimpleTouchHandler.HittingPos 
      );
    XInt32 limit = CoreView__GetRoot( _this )->CursorDragLimit;

    if (((( ofs.X < -limit ) || ( ofs.X > limit )) || ( ofs.Y < -limit )) || ( ofs.Y 
        > limit ))
      CoreRoot_DeflectCursor( CoreView__GetRoot( _this ), ((CoreView)&_this->SlideTouchHandler 
      ), _Const0052 );
  }
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   activate the caret movement mode if the user has pressed the finger on the screen 
   for a while. The method also shows a small magnifying glass where the text around 
   the caret is shown. This should help the user to navigate the caret with the 
   finger. */
void AppTextEditor1_onHoldTouch( AppTextEditor1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if (( _this->SimpleTouchHandler.HoldPeriod >= 300 ) && ( _this->magnifyingView 
      == 0 ))
  {
    XInt32 height = _this->Caret.Super1.Point2.Y - _this->Caret.Super1.Point1.Y;
    XInt32 width = height * 3;

    if ( height > EwGetRectH( _this->Super3.Bounds ))
      height = EwGetRectH( _this->Super3.Bounds );

    if ( width > EwGetRectW( _this->Super3.Bounds ))
      width = EwGetRectW( _this->Super3.Bounds );

    CoreGroup__OnSetBuffered( _this, 1 );
    _this->magnifyingView = EwNewObject( ViewsWarpGroup, 0 );
    _this->magnifyingBack = EwNewObject( ViewsRectangle, 0 );
    ViewsWarpGroup_OnSetGroup( _this->magnifyingView, ((CoreGroup)_this ));
    ViewsWarpView_OnSetQuality((ViewsWarpView)_this->magnifyingView, 1 );
    ViewsWarpGroup_OnSetOpacity( _this->magnifyingView, 200 );
    ViewsWarpView_OnSetSourceArea((ViewsWarpView)_this->magnifyingView, EwNewRect( 
    0, 0, width, height ));
    CoreQuadView__OnSetPoint2( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point2, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointX( _this->magnifyingView->Super2.Point3, 
    width * 2 ));
    CoreQuadView__OnSetPoint3( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point3, 
    height * 2 ));
    CoreQuadView__OnSetPoint4( _this->magnifyingView, EwSetPointY( _this->magnifyingView->Super2.Point4, 
    height * 2 ));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectSize( _this->magnifyingBack->Super1.Bounds, 
    EwMovePointPos( EwNewPoint( width * 2, height * 2 ), _Const018E )));
    CoreRectView__OnSetBounds( _this->magnifyingBack, EwSetRectOrigin( _this->magnifyingBack->Super1.Bounds, 
    _Const018F ));
    ViewsRectangle_OnSetColor( _this->magnifyingBack, _Const0190 );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingBack ), 0 );
    CoreGroup__Add( _this->Super4.Owner, ((CoreView)_this->magnifyingView ), 0 );
    EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateMagnifyingView ), ((XObject)_this 
      ));
  }

  if ( _this->magnifyingView != 0 )
    EwSignal( EwNewSlot( _this, AppTextEditor1_onDragTouch ), ((XObject)_this ));
}

/* This method is called from the corresponding SimpleTouchHandler. Its job is to 
   obtain the focused state for the editor so the user can interact with the editor 
   content and to place the caret at the touched position. */
void AppTextEditor1_onPressTouch( AppTextEditor1 _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !CoreGroup_HasViewState((CoreGroup)_this, CoreViewStateFocused ))
    CoreGroup_ObtainFocus((CoreGroup)_this );

  rc = ViewsText_Position2RowCol( &_this->Text, _this->SimpleTouchHandler.CurrentPos 
  );
  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if (( newCaretIndex != _this->caretIndex ) || ( _this->caretIndex == 0 ))
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   move the caret up/down/left or right in the editor text. */
void AppTextEditor1_onCursorKey( AppTextEditor1 _this, XObject sender )
{
  XPoint rc;
  XInt32 newCaretIndex;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Font == 0 )
    return;

  rc = ViewsText_StringIndex2RowCol( &_this->Text, _this->caretIndex );

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeLeft )
  {
    rc.X = ( rc.X - 1 );

    if ( rc.X < 0 )
    {
      rc.Y = ( rc.Y - 1 );
      rc.X = EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y ));
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeRight )
  {
    rc.X = ( rc.X + 1 );

    if ( rc.X == EwGetStringLength( ViewsText_GetRowString( &_this->Text, rc.Y )))
    {
      rc.Y = ( rc.Y + 1 );
      rc.X = 0;
    }
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeUp )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointNeg( pos, EwNewPoint( 
    0, rowHeight )));
  }

  if ( _this->CursorKeyHandler.Code == CoreKeyCodeDown )
  {
    XPoint pos = ViewsText_RowCol2Position( &_this->Text, rc );
    XInt32 rowHeight = ( _this->Font->Ascent + _this->Font->Descent ) + _this->Font->Leading;
    rc = ViewsText_Position2RowCol( &_this->Text, EwMovePointPos( pos, EwNewPoint( 
    0, rowHeight )));
  }

  newCaretIndex = ViewsText_RowCol2StringIndex( &_this->Text, rc );

  if ( newCaretIndex != _this->caretIndex )
  {
    _this->caretIndex = newCaretIndex;
    EwPostSignal( EwNewSlot( _this, AppTextEditor1_updateCaret ), ((XObject)_this 
      ));
    _this->autoScroll = 1;
  }
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign preceding the current caret position and to move the caret accordingly. */
void AppTextEditor1_onBackspaceKey( AppTextEditor1 _this, XObject sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex == 0 )
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex - 1 );
  count = 1;

  if ((( _this->caretIndex > 1 ) && ( ch == '^' )) && ( EwGetStringChar( _this->Text.String, 
      _this->caretIndex - 2 ) == 0x00A0 ))
    count = 2;
  else
    if ((( ch == '^' ) || ( ch == '~' )) || ( ch == '%' ))
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex 
  - count, count ));
  _this->caretIndex = _this->caretIndex - count;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   delete the sign at the current caret position. */
void AppTextEditor1_onDeleteKey( AppTextEditor1 _this, XObject sender )
{
  XChar ch;
  XInt32 count;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->caretIndex >= ( EwGetStringLength( _this->Text.String ) - 1 ))
    return;

  ch = EwGetStringChar( _this->Text.String, _this->caretIndex );
  count = 1;

  if ( ch == '%' )
    count = 2;
  else
    if ( ch == 0x00A0 )
      count = 2;

  ViewsText_OnSetString( &_this->Text, EwStringRemove( _this->Text.String, _this->caretIndex, 
  count ));
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the <new line> sign and to move the caret 
   to the next row. */
void AppTextEditor1_onNewlineKey( AppTextEditor1 _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, EwLoadString( 
  &_Const0191 ), _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + 1;
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* This method is called from the corresponding keyboard handler. Its job is to 
   insert at the current caret position the sign which has been input by the user 
   and to move the caret to the next column. */
void AppTextEditor1_onCharacterKey( AppTextEditor1 _this, XObject sender )
{
  XChar ch;
  XString str;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  ch = _this->CharacterKeyHandler.CharCode;
  str = EwNewStringChar( ch, 1 );

  if (((( ch == '^' ) || ( ch == '~' )) || ( ch == 0x00AD )) || ( ch == '%' ))
    str = EwConcatStringChar( EwLoadString( &_Const0192 ), ch );
  else
    if ( ch == 0x0020 )
      str = EwLoadString( &_Const0193 );

  ViewsText_OnSetString( &_this->Text, EwStringInsert( _this->Text.String, str, 
  _this->caretIndex ));
  _this->caretIndex = _this->caretIndex + EwGetStringLength( str );
  _this->autoScroll = 1;
  EwPostSignal( _this->OnChange, ((XObject)_this ));
}

/* 'C' function for method : 'App::TextEditor1.OnSetWrapText()' */
void AppTextEditor1_OnSetWrapText( AppTextEditor1 _this, XBool value )
{
  if ( _this->WrapText == value )
    return;

  _this->WrapText = value;
  ViewsText_OnSetWrapText( &_this->Text, value );
  _this->SlideTouchHandler.SlideHorz = (XBool)!value;
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0052 );
}

/* 'C' function for method : 'App::TextEditor1.OnSetAlignment()' */
void AppTextEditor1_OnSetAlignment( AppTextEditor1 _this, XSet value )
{
  if ( _this->Alignment == value )
    return;

  if ((( value & ViewsTextAlignmentAlignHorzJustified ) == ViewsTextAlignmentAlignHorzJustified 
      ))
    value = ( value & ~ViewsTextAlignmentAlignHorzJustified ) | ViewsTextAlignmentAlignHorzLeft;

  _this->Alignment = value;
  ViewsText_OnSetAlignment( &_this->Text, value );
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0052 );
}

/* 'C' function for method : 'App::TextEditor1.OnGetString()' */
XString AppTextEditor1_OnGetString( AppTextEditor1 _this )
{
  XString str = _this->Text.String;
  XInt32 inx = EwStringFindChar( str, 0x00A0, 0 );

  while ( inx >= 0 )
  {
    if ( EwGetStringChar( str, inx + 1 ) == '^' )
    {
      str = EwStringRemove( str, inx, 1 );
      str = EwSetStringChar( str, inx, 0x0020 );
    }

    inx = EwStringFindChar( str, 0x00A0, inx + 1 );
  }

  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringRemove( str, inx, 1 );
    inx = EwStringFindChar( str, '%', inx + 1 );
  }

  return EwStringLeft( str, EwGetStringLength( str ) - 1 );
}

/* 'C' function for method : 'App::TextEditor1.OnSetString()' */
void AppTextEditor1_OnSetString( AppTextEditor1 _this, XString value )
{
  XString str;
  XInt32 inx;

  if ( !EwCompString( _this->String, value ))
    return;

  EwRetainString( &_this->String, value );
  str = EwShareString( value );
  inx = EwStringFindChar( str, '%', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '%', inx + 2 );
  }

  inx = EwStringFindChar( str, '^', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '^', inx + 2 );
  }

  inx = EwStringFindChar( str, '~', 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, '~', inx + 2 );
  }

  inx = EwStringFindChar( str, 0x00AD, 0 );

  while ( inx >= 0 )
  {
    str = EwStringInsert( str, EwLoadString( &_Const0192 ), inx );
    inx = EwStringFindChar( str, 0x00AD, inx + 2 );
  }

  inx = EwStringFindChar( str, 0x0020, 0 );

  while ( inx >= 0 )
  {
    str = EwSetStringChar( str, inx, 0x00A0 );
    str = EwStringInsert( str, EwLoadString( &_Const0194 ), inx + 1 );
    inx = EwStringFindChar( str, 0x0020, inx + 2 );
  }

  if ( _this->caretIndex > EwGetStringLength( str ))
    _this->caretIndex = EwGetStringLength( str );

  ViewsText_OnSetString( &_this->Text, EwConcatString( str, EwLoadString( &_Const0195 
  )));
  _this->autoScroll = 1;
  ViewsText_OnSetScrollOffset( &_this->Text, _Const0052 );
}

/* Variants derived from the class : 'App::TextEditor1' */
EW_DEFINE_CLASS_VARIANTS( AppTextEditor1 )
EW_END_OF_CLASS_VARIANTS( AppTextEditor1 )

/* Virtual Method Table (VMT) for the class : 'App::TextEditor1' */
EW_DEFINE_CLASS( AppTextEditor1, TemplatesTextEditor, "App::TextEditor1" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  AppTextEditor1_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppTextEditor1 )

/* Initializer for the class 'App::Writable1' */
void AppWritable1__Init( AppWritable1 _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsBevel__Init( &_this->Bevel, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle9, &_this->_XObject, 0 );
  AppTextEditor1__Init( &_this->TextEditor1, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppWritable1 );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0578 );
  CoreView_OnSetLayout((CoreView)&_this->Bevel, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Bevel, _Const0579 );
  ViewsBevel_OnSetWidth( &_this->Bevel, 2 );
  ViewsBevel_OnSetColorL( &_this->Bevel, _Const0180 );
  ViewsBevel_OnSetColorR( &_this->Bevel, _Const0181 );
  ViewsBevel_OnSetColorB( &_this->Bevel, _Const0139 );
  ViewsBevel_OnSetColorT( &_this->Bevel, _Const0180 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle9, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle9, _Const057A );
  ViewsRectangle_OnSetColor( &_this->Rectangle9, _Const0000 );
  CoreView_OnSetLayout((CoreView)&_this->TextEditor1, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->TextEditor1, _Const057B );
  AppTextEditor1_OnSetWrapText( &_this->TextEditor1, 0 );
  AppTextEditor1_OnSetAlignment( &_this->TextEditor1, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  CoreGroup__Add( _this, ((CoreView)&_this->Bevel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle9 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TextEditor1 ), 0 );
  CoreGroup__OnSetFocus( _this, ((CoreView)&_this->TextEditor1 ));

  /* Call the user defined constructor */
  AppWritable1_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::Writable1' */
void AppWritable1__ReInit( AppWritable1 _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsBevel__ReInit( &_this->Bevel );
  ViewsRectangle__ReInit( &_this->Rectangle9 );
  AppTextEditor1__ReInit( &_this->TextEditor1 );
}

/* Finalizer method for the class 'App::Writable1' */
void AppWritable1__Done( AppWritable1 _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppWritable1 );

  /* Finalize all embedded objects */
  ViewsBevel__Done( &_this->Bevel );
  ViewsRectangle__Done( &_this->Rectangle9 );
  AppTextEditor1__Done( &_this->TextEditor1 );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::Writable1' */
void AppWritable1__Mark( AppWritable1 _this )
{
  EwMarkObject( &_this->Bevel );
  EwMarkObject( &_this->Rectangle9 );
  EwMarkObject( &_this->TextEditor1 );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppWritable1_UpdateLayout( AppWritable1 _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppWritable1_UpdateViewState( AppWritable1 _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppWritable1_Init( AppWritable1 _this, XHandle aArg )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( aArg );
}

/* Variants derived from the class : 'App::Writable1' */
EW_DEFINE_CLASS_VARIANTS( AppWritable1 )
EW_END_OF_CLASS_VARIANTS( AppWritable1 )

/* Virtual Method Table (VMT) for the class : 'App::Writable1' */
EW_DEFINE_CLASS( AppWritable1, CoreGroup, "App::Writable1" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppWritable1_UpdateLayout,
  AppWritable1_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppWritable1 )

/* Bitmap resource : 'App::cosmall' */
EW_DEFINE_BITMAP_RES( Appcosmall )
  EW_BITMAP_FRAMES( Appcosmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 0, 0, 25, 25, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appcosmall, Default )                   /* ratio 39.84 % */
    0xE3F1F500, 0xB8D90FF7, 0xECE6FF71, 0xCB4FF5D2, 0xB2FF572B, 0x71156AB8, 0x128A4562,
    0x78CC5A31, 0x8FC723B1, 0x1C6A431B, 0x16A2D1E9, 0xD8D31057, 0x968FF5B2, 0xF0FF6D36,
    0xF2D7DBED, 0xB432BFE5, 0x09249566, 0x9DC8A792, 0xFD067B40, 0x97E39429, 0xB9FEB058,
    0x9FED76BA, 0x7D43A417, 0xB54A8D4A, 0x53ABD128, 0x85C9BE39, 0xAF562AAB, 0x0D5ABF59,
    0x96DFF64B, 0x8ED36087, 0x22167A05, 0xE36BB417, 0x765B9D8A, 0xFF9C9A2D, 0xF5E2F0F6,
    0x5CAE8EAF, 0x5DE0D2FF, 0xBFDA0D15, 0xFDB8DC62, 0xD7CBE3FB, 0xC378333F, 0x71493D40,
    0xFF58AC8C, 0x07FC2CF0, 0xB32DD6E7, 0x3D02E970, 0x4A61D109, 0x09868ABC, 0x58A917FB,
    0xCED87FB1, 0x2E97FB99, 0xE47FBC1E, 0x97FBB5DE, 0x7FBA1D2D, 0xFBCDE8F0, 0xBD1EAF27,
    0xEDDCE37F, 0xDCEE86B6, 0xC2E264BF, 0xCCF51BFD, 0xE7693FD9, 0x0733FDCA, 0x6BBFDDEF,
    0xB9B9FFB2, 0x54EE52C5, 0xF57D8BD2, 0x1DAE27FA, 0xEAF47FBB, 0x9C6F83D5, 0xF6797CFE,
    0xBF87E7EE, 0x79FEDE9F, 0xCF73C9FB, 0xF80CF17C, 0x1A04814F, 0xED7CE028, 0x3592D708,
    0x1963FCD6, 0x2501E666, 0x98D65406, 0xF37F9DA3, 0x3D9FC871, 0x9F53CCFF, 0xF7F62487,
    0xDDFF88DF, 0x07822203, 0x3BCE681A, 0xC9D3FCEE, 0xD3FCCA32, 0x7D756845, 0x9F2E0735,
    0x889C7889, 0xDCD361F3, 0x8324973F, 0xFC813FCC, 0x852A58E2, 0x774E83FD, 0x08E90DBC,
    0x23FCC331, 0x39D39288, 0xE03FCCD3, 0x81CEB3B0, 0xE2C71CF6, 0xF36CDC2F, 0xBCB017CF,
    0x896896A2, 0x700C1308, 0x8E3335F5, 0x81A8FF38, 0x62582017, 0x6B3FE462, 0x3FCB42D4,
    0xCC030486, 0x4388CD3F, 0x24CA2667, 0xC8250FF3, 0x9FA7C31C, 0xDB08F109, 0x67D4F090,
    0x890DA349, 0x5C1D2156, 0x97CEB971, 0x08C71E95, 0xF2D18195, 0xC5B37827, 0xD42BE0E3,
    0x180FF34C, 0x5362F550, 0x3705F53C, 0x28DD311C, 0xA93FD946, 0x9C0D1348, 0x0CD281C7,
    0x5441A033, 0x60925AE1, 0xEB3FEA1A, 0x3FCF23D0, 0xCFF7A87C, 0x039E921B, 0x02067123,
    0x924C0DB3, 0xABAAC525, 0x1F38021E, 0x77BCEE39, 0x309B4423, 0x61700CB3, 0x744CE3FE,
    0xE6B65E12, 0x0A249554, 0x0CF58326, 0xA59B8877, 0x90CD99FE, 0x4B1BB4F1, 0x0542AFAB,
    0x0621994C, 0xDE315FB8, 0x3FEC5374, 0xE60AF8AB, 0x576A1971, 0xCCB22CC6, 0xAA22140B,
    0x3C8EE3FD, 0x1F3C24F1, 0x21930EC3, 0xC1AB6A6F, 0x9C350D52, 0x200FF791, 0x0E4346D2,
    0x6C48AA42, 0xD4CF340A, 0x805FA909, 0x6FCEA365, 0x2B2BB4F0, 0x7526684C, 0xFEDD57EC,
    0xEFC48AC3, 0x9C621C80, 0x8C724AF0, 0x020CFF31, 0x4B102FCC, 0xBB3B4E4C, 0x3FE1A355,
    0xC84956A3, 0xD29CFFD5, 0xA8EB3724, 0xC3BE22D3, 0xD1E7B259, 0xEBB45239, 0x3AAA9825,
    0xF9F3895C, 0xE281A218, 0xC077EC8A, 0xE2C7EE62, 0x93BCFF82, 0xD09B3FEF, 0xFFDC31A8,
    0x332901A0, 0xE1D7C6F0, 0xC81B827F, 0xE20AE5E2, 0xFCE6E093, 0x6D8EB7CD, 0xB8C7ADE9,
    0x99A63669, 0x80FF84D6, 0xC43FEEA2, 0x37CFFC34, 0x9C7BB369, 0x7D062080, 0x6E318BDC,
    0x0DDA8EC3, 0x70F8670E, 0x8A5D38EC, 0xDDC69996, 0xA96FAED1, 0x6D50B8C9, 0x3FCB52D8,
    0x4FF754A2, 0x83FF2B2B, 0xF2BF344A, 0xFF2ECBC1, 0x4E8B319C, 0x8FFD4C91, 0xE9E38A26,
    0x6BCBAED8, 0xE9F1BEAA, 0xE915FFB3, 0xBEBE2FED, 0xA1CD53FC, 0xC5E8430B, 0x8CFCFFAF,
    0x2ED78193, 0x18D870DD, 0x943C7630, 0x060B6474, 0x44FF1FCC, 0x28B4BC93, 0xF96D2290,
    0x919E2787, 0x23E47AB3, 0x46C92D1F, 0x8771FE36, 0x2DE3FCBD, 0xFBA05AC6, 0x58140846,
    0xD213A661, 0x027D4763, 0x00000002, 0x00000000

  EW_BITMAPS_TABLE( Appcosmall )
    EW_BITMAP( Appcosmall, Default )
EW_END_OF_BITMAP_RES( Appcosmall )

/* Table with links to derived variants of the bitmap resource : 'App::cosmall' */
EW_RES_WITHOUT_VARIANTS( Appcosmall )

/* Bitmap resource : 'App::evacuate40csmall' */
EW_DEFINE_BITMAP_RES( Appevacuate40csmall )
  EW_BITMAP_FRAMES( Appevacuate40csmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 1, 21, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appevacuate40csmall, Default )          /* ratio 37.12 % */
    0x04080100, 0x3D1BEBF0, 0x516C930C, 0xD3C7241B, 0xBC297330, 0x2017F1F0, 0x157F9407,
    0x68C4662F, 0x8EC6A391, 0x1C82431B, 0xC7A4B1F9, 0xA89E1993, 0x13A707F9, 0x5C897731,
    0x4BD4A32D, 0x0311BDDB, 0x20C41A09, 0x621ECC43, 0x399C9816, 0xD164D229, 0x4876047F,
    0x07A067F9, 0x74027F95, 0x924A2144, 0x47AAD1AA, 0xF2F9181F, 0x389604CF, 0x93617ED8,
    0xC2E12287, 0xAA8F43A0, 0x87E08AAD, 0x749E7F95, 0xED87FB3D, 0x617FBD9C, 0xCAB29914,
    0xBFD5ED77, 0xC90412FF, 0xA98FCFF2, 0x3E1A9B63, 0x6AB7DBF4, 0xFE602485, 0xEFA793A9,
    0xC2CB659F, 0x0C6BBDB0, 0x8EE7B198, 0x51ACA621, 0xE7E27117, 0x282B1DCE, 0xDE6ECC89,
    0x62FE7FBE, 0x0D9623FF, 0xA7DBE71E, 0x32B886F9, 0xDFD63707, 0x5E475517, 0xE5F2AF37,
    0x164FB5D9, 0x0634F1E0, 0x6EFF3A98, 0x7D13B18C, 0xD2EA757A, 0xE1775BB1, 0x20027A05,
    0x078B7384, 0x3FF84FFE, 0xD32FC6E2, 0x71F1BDB6, 0x2AF073E4, 0xEFD7E3EF, 0xF7FAFCDF,
    0xDFB7D3ED, 0xF83FDFCF, 0xC2E3FCF9, 0x86F87817, 0x992781DA, 0xC76BDAD7, 0x059277AD,
    0xE0B3FDAB, 0x68561471, 0x4DFE6C59, 0x0580D956, 0x6320878E, 0x6147A1E6, 0x53CCE435,
    0x3018845E, 0xC5848621, 0x390D3851, 0x4BA25977, 0x48C8FF37, 0xC4FF8DA3, 0x4C3009C1,
    0x818550F5, 0x01363240, 0xE390FF64, 0xC9B03E0E, 0x98889C76, 0x3FCC62CC, 0x1AF3D4EF,
    0x47B1C886, 0x5E41879E, 0x7F149559, 0x374FF270, 0x8FF3DCEA, 0x9859FB3E, 0x260D7FA4,
    0x559AE587, 0x3FD4A00D, 0x54F0F807, 0x09CA739C, 0xFE749DA7, 0x7A1782A3, 0x2D4943FC,
    0x4F63FCD2, 0x7951F53E, 0xA8C3951C, 0x8B87E5A9, 0x24C6949E, 0x0EE3FCB2, 0x43D5953D,
    0xF2963FE8, 0xF4A5E983, 0x21E9A3E0, 0x4FF328AB, 0xF31CAB22, 0x5E653F0F, 0xFB3EA546,
    0x2887E7F8, 0x28C964BE, 0x922C6082, 0xDCF13FCA, 0xF5A5A9A3, 0x7EE63AF1, 0x0D12DE54,
    0xD394FF3B, 0x1A143D4E, 0xF289197A, 0x6F0233FC, 0x58CB46B2, 0xF2286B0E, 0x2C6D0F4F,
    0xFFB66D72, 0x3A0D6304, 0xE4986A14, 0x165E4A85, 0xD1AF3D8F, 0xD21F8640, 0x6026CA36,
    0xCDF32CB3, 0x6B96C999, 0x8DFE7D19, 0xCA36CC02, 0x2ACFF731, 0xCFF3B8CB, 0x4B34DA30,
    0xB6EFB5AD, 0xCA2C526B, 0xBDA87BCC, 0x4F03A2F4, 0x7222D480, 0xA0881692, 0xBA3C8FF2,
    0x3ECF83FE, 0x07311DF5, 0x9C970A23, 0x98FF1A52, 0x1E390C52, 0xC3DF53EB, 0x4C0951FE,
    0xE3FCEA35, 0xD89420C5, 0xC73FF38C, 0x850E1358, 0x59B37CCE, 0x51C85608, 0x6C109632,
    0xE935F035, 0x7F697A08, 0x2F87FAE4, 0x0D575385, 0xBE5192B5, 0x741742D6, 0x556EED1C,
    0x0C92B88C, 0x2D4E66BD, 0x12CD364C, 0xC5898DB3, 0xDB4FFDAC, 0x36E31A26, 0xB220FFDC,
    0xB4FF320A, 0x2AC98575, 0x2E09DB45, 0xB31BD4CC, 0xC3FE686C, 0x78EB328A, 0x1449EB3D,
    0x3FC6512C, 0x4731682C, 0x01DE583B, 0xE4FF308A, 0xE6D932E3, 0x130FFBA2, 0x709CE479,
    0xC15024C2, 0xCD313C46, 0xB95715A4, 0x2254B9B9, 0x8D7D8CAC, 0x535A6239, 0x145D5DCE,
    0x5FE8E5E2, 0x5BE7149B, 0x0B926871, 0x33C1352A, 0x09605782, 0x6DA35E16, 0x18E27161,
    0x04A050FF, 0xBE2FBCF4, 0x8A27EFD1, 0xD42E0EA1, 0x4E4363D4, 0xCF8378C4, 0x629C7F09,
    0x8DA1268C, 0xD56F5BB6, 0xE3B8CE2B, 0x4721615D, 0xCF0FC13C, 0x0539F7BD, 0x00000004,
    0x00000000

  EW_BITMAPS_TABLE( Appevacuate40csmall )
    EW_BITMAP( Appevacuate40csmall, Default )
EW_END_OF_BITMAP_RES( Appevacuate40csmall )

/* Table with links to derived variants of the bitmap resource : 'App::evacuate40csmall' */
EW_RES_WITHOUT_VARIANTS( Appevacuate40csmall )

/* Bitmap resource : 'App::evacuatesmall' */
EW_DEFINE_BITMAP_RES( Appevacuatesmall )
  EW_BITMAP_FRAMES( Appevacuatesmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 1, 2, 23, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appevacuatesmall, Default )             /* ratio 39.52 % */
    0xCB95FF00, 0xB1DEE0A4, 0xC1F08E2B, 0xDF2FC042, 0xF0FF002B, 0x912882B9, 0x1788C4E2,
    0xC8B4622B, 0x8D47A371, 0xEC8A3320, 0x2B629218, 0xFDEEF701, 0x9FC901D2, 0xEE0E48B6,
    0x4690FAE9, 0x257600E1, 0x49D48E3F, 0x9FCE6772, 0xA4F6833E, 0x3D004AF8, 0x29142699,
    0xE80F000C, 0x9D509E50, 0x6B27CBFE, 0x1059C441, 0x87C566AE, 0x7C57AB55, 0x0D4412B1,
    0xD49F206A, 0x9AC742B3, 0x9B4F7884, 0xD2F27FA9, 0x972B839D, 0x77B8DCEE, 0xE6C3D2EB,
    0xB12BE229, 0x45A5F352, 0x447094FB, 0x99EB5658, 0xE52FF633, 0x2129C6BD, 0xB92C763F,
    0x1177BD71, 0xCA8DAA57, 0x56C670AA, 0x366F4185, 0x3DB1A598, 0xAB29957B, 0xB1FABC8E,
    0x22DF73BC, 0xD9B07AC6, 0x53CEBE70, 0x1A068B07, 0x32332220, 0x9F0B59A9, 0xBDB53C3C,
    0x4DECFF7A, 0x55B1145B, 0xF339C36F, 0xDD2882AD, 0xCBE7E7B3, 0x4E0EB780, 0xC6F73BBC,
    0xC445B2ED, 0xE0F6A225, 0x62C7D6CF, 0xBB7C5ED7, 0xFEC3757B, 0xED8763D1, 0xF279BD5F,
    0x619AFB1A, 0xA0F43D3E, 0x5EE77DEB, 0x1290DF7B, 0xD8973711, 0xFC7E9F87, 0x4F9FE7FD,
    0x511801BB, 0x57B60276, 0x94E03E1C, 0x9036D112, 0x3DDF9828, 0xD3A7F5FB, 0xB73D1800,
    0x05E67553, 0x1F3D4F78, 0x854F13D6, 0x21A861DE, 0x61C0D33E, 0xE8F03C9F, 0x12888327,
    0x300F8891, 0xCB854C5B, 0x65A63C0A, 0x34362F0F, 0xF8700C96, 0x63477344, 0x9F2370EF,
    0x276E2F3C, 0x441B90A3, 0x53230D74, 0x914142D5, 0x4C872402, 0xC385F61C, 0xE9CE54CB,
    0x246DE614, 0x2B1539B2, 0x6612BA3E, 0x390A5E74, 0xBCDC7242, 0xA3374F85, 0x3A8EF5C0,
    0x1B286511, 0xD9167260, 0x9CB63E51, 0xE23B1C90, 0x128BB3DD, 0x4F66F668, 0xE7248A34,
    0x75F62C0D, 0xDA7D8AE3, 0x329112B0, 0xDA26DA36, 0xC3C1106D, 0xCE81388E, 0x51A19618,
    0x3498D515, 0x0E172486, 0x32BD532E, 0xB8F33FC1, 0xC4724E43, 0x2D9F619C, 0x4B772440,
    0xD2D4F9B0, 0xFEA4AB02, 0x57AA2A63, 0x83E84582, 0x4B03E5E9, 0xD3A8F656, 0xD2363128,
    0x1135CEB3, 0x8A1E52D9, 0xDBD4EA0E, 0x9B2DBD6D, 0xF80A61EA, 0xA37FA265, 0x49D206E2,
    0x07833D8D, 0xD3B8F2AE, 0x44D53B18, 0xAC064B24, 0x1E4CF4FE, 0x85E33911, 0x9340E77D,
    0x24A136DC, 0xF8AC4D17, 0x2C6A1348, 0x0B154408, 0x11D21303, 0xE29534D1, 0x7E14CC23,
    0x374F7589, 0xCF3654A2, 0x161CBF38, 0x84B83DF1, 0x732B1110, 0xA692479E, 0x1E52E953,
    0x99DCB43E, 0x4C292E8F, 0xF897CB25, 0x55C7D35C, 0xCB05440E, 0x73091101, 0x04C94444,
    0xA836CF59, 0x7C888C28, 0x58D3D0F4, 0xF2F911D4, 0xDCBB54C3, 0x53C92B80, 0xB86E92C1,
    0x4AB370F8, 0x8118C644, 0xDE803C6B, 0xF8A00F03, 0x444352FC, 0x7401D8D4, 0x7910BBBF,
    0xDDF53B4F, 0x703CCF63, 0x444ED3C1, 0x9F21B8C8, 0xBD60BE38, 0x8919D823, 0x6934111D,
    0xDEA39658, 0x4C53E1C8, 0xCDCB7012, 0xE9D1D055, 0x512FA736, 0x1D4CD444, 0x86231D11,
    0x03E78D6F, 0xAE6F104C, 0x9E372FDB, 0x074B73E2, 0x49434AB8, 0x9A54D772, 0x573C2D0F,
    0x39DCC7A3, 0x01CAC3CD, 0x11F43D66, 0x76342A2E, 0xF18D328E, 0x2EBF7269, 0x308E2447,
    0x4C53A18D, 0x7C94E663, 0x50C039CF, 0xE23E3D9F, 0x45FBC2B4, 0x00127CE2, 0x4308F63A,
    0x05821F84, 0x133DCDF0, 0xCF15C3F5, 0xCF5818DC, 0x15F88233, 0x3A22B427, 0xF8BC1CF4,
    0x9CFFEFF0, 0x3DC8D269, 0x7B0EC340, 0x5F0302CC, 0x0E244970, 0x705C8FA0, 0x416007C0,
    0xD1EE2F80, 0x0F35F719, 0x0A93F871, 0x8FE000FB, 0x1EC388EA, 0xC0C0A8B5, 0x05033164,
    0x00000404, 0x00000000

  EW_BITMAPS_TABLE( Appevacuatesmall )
    EW_BITMAP( Appevacuatesmall, Default )
EW_END_OF_BITMAP_RES( Appevacuatesmall )

/* Table with links to derived variants of the bitmap resource : 'App::evacuatesmall' */
EW_RES_WITHOUT_VARIANTS( Appevacuatesmall )

/* Bitmap resource : 'App::fire_alarmsmall' */
EW_DEFINE_BITMAP_RES( Appfire_alarmsmall )
  EW_BITMAP_FRAMES( Appfire_alarmsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 1, 21, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appfire_alarmsmall, Default )           /* ratio 48.64 % */
    0xA1518D00, 0x18574092, 0x89725635, 0xD72D6351, 0x74FE3518, 0x5127FC3D, 0x1589C50D,
    0xC8CC5A2F, 0x8DC7A311, 0xEC8A351F, 0x43A2D208, 0x98D30A88, 0xCE66C893, 0x186A352F,
    0x26A322E8, 0xEC34C38B, 0xA90C8E48, 0x9FCF27B3, 0xF5067725, 0xBD6171B9, 0xA4F90B5D,
    0x8CEBC6CC, 0x5ABE7F9B, 0x2BDA9542, 0xBB7F9C0D, 0xCA11ACC8, 0x5EBFE895, 0x6D40E26B,
    0x596C6743, 0xAACD645F, 0xAAE6A5ED, 0xBB278CD7, 0x4D67E455, 0xF97FA994, 0xABC3C5E0,
    0x6B3B5FF7, 0x3B61FED8, 0x309FEAC5, 0x02BA7A3A, 0x5D75B8BD, 0xF6FF69B4, 0x7917BBDD,
    0x92CA6572, 0x37665B31, 0x5FBFDACD, 0xECA6BD69, 0xAC9BB197, 0xF5FCFF5A, 0xB52FF7EB,
    0x55B0D6BF, 0xEE67A6B3, 0x8364BFDC, 0x1A0E2912, 0xDA3FF10C, 0x1F0B61B6, 0x3FB5BC4E,
    0x59FEFC7E, 0x6DF7750B, 0x288E66C8, 0x2B66FBFD, 0xBC70BFD7, 0xB743FD7E, 0x773FD9AC,
    0xBBFDB6D9, 0x3FDDAEC7, 0xFDD6EA7B, 0x1047C62B, 0xB35BACD7, 0xFC656AA1, 0xF8FBF175,
    0xF79BC9F3, 0x3F9E186F, 0x8CA571BB, 0xD3FC8C21, 0x61A82C4D, 0xA9365DA7, 0x6E4C87D0,
    0xCA335CFF, 0x88220629, 0x886C1955, 0xFF860BB4, 0x2ECB7380, 0xA22885F8, 0x7399AF3F,
    0xF0FF328C, 0x011BC682, 0x1B4662EE, 0x48F338FF, 0xC329DB25, 0xCCFA3FCC, 0xF370CF43,
    0x3FCE438C, 0x0841F8C6, 0xA4524290, 0x7A1C8695, 0x4C88A208, 0x3D0FA7E2, 0xA439063B,
    0xD1D8C357, 0x0C7D9007, 0xFF5595F2, 0x81487328, 0xDC38F8F2, 0xF3B8ED3D, 0x609333CF,
    0x1956E462, 0x92A1986D, 0x9E89324D, 0x23C4F87A, 0xDDC86A4F, 0x0122C866, 0x2D0B1372,
    0xCFB3F4FF, 0xA3A9E73E, 0x30D53FCE, 0x82320FF7, 0x378F06E8, 0x5AB6A4E0, 0x0A10FAA0,
    0xF4BD2E4E, 0x291F8787, 0x87E1D8AE, 0x0F088A71, 0xF3FCDD37, 0xE0DC368E, 0x7B325C99,
    0x6A1A6806, 0xE2470DAE, 0x0AA6A76B, 0xFC99250D, 0xB12B0DB3, 0x340EB3FC, 0x8D43B190,
    0xF2D9A667, 0xE472304F, 0xA192E9F1, 0x374F07DE, 0x8D877CDF, 0xC9EAAA36, 0x2AC857A7,
    0xA427CD5B, 0x3F6D4B48, 0xDF53E8F9, 0x35EE753F, 0x896C9F20, 0x2E589605, 0x74E6E8C2,
    0x2922E8B6, 0xFB35B26B, 0xA2D1B3CF, 0xFD778CA3, 0x22AAC9E4, 0xE2F9B601, 0xE8B06757,
    0xB234240C, 0x8135CD53, 0x3D5C93EE, 0xDFD3A0E7, 0x74F6571D, 0x55D133A4, 0xDE771A88,
    0x3D8F53ED, 0x2CEA130D, 0xB330FFB4, 0x9CFF2448, 0x8632CC93, 0x8B47B1D1, 0xE145D61C,
    0x5A94DB3B, 0xFCC6310E, 0xDFAE6B73, 0x6B1C7A80, 0xCB32BCDC, 0x544F019A, 0x25EE1ECC,
    0xF19F0853, 0xBDCE137C, 0x0FF378DC, 0x73E4F93F, 0xB8BFC92F, 0x2CA74751, 0x2FD1673A,
    0xCBED6C6F, 0x6728721A, 0x875365D7, 0xAB29982B, 0x2C0DC3FC, 0xCE23CA80, 0x553A2938,
    0xF51350F4, 0x655469E2, 0xD5DFB3E9, 0xB5BD66D1, 0x483122D7, 0xDCD5671F, 0xA760B4B6,
    0xD4EB3DB4, 0x7253E0F7, 0x53FC9223, 0xF4C8314E, 0x771F0757, 0x53D4D807, 0xEF87F37E,
    0x5E775A67, 0xD6B1859A, 0x443A4E83, 0xD4ACF90E, 0xED33B9C2, 0xD7FCC43F, 0xEB84CBF2,
    0x6157F9F4, 0xE88F38E1, 0x478B2324, 0xC4CD4FDD, 0xF34A62E6, 0xB0EC2A39, 0x34D9EB09,
    0xA942809B, 0xDC831EB8, 0x2FA6E50C, 0xC12F8E26, 0x2E0B574C, 0x5E63B5E3, 0x6398FFAD,
    0xECE1E64C, 0x6167CBE2, 0x59759E77, 0x4D133CEA, 0xEC2231C8, 0xC9C2ECD7, 0x713023FD,
    0x507D91DC, 0xC61A7B4D, 0x943263A4, 0x6A12433D, 0x001E862A, 0x00750FF1, 0xC07530CB,
    0x227462DD, 0xC799F0A5, 0xC540A41A, 0x40D3DA7A, 0x32234868, 0xEC8CA0F6, 0x3D9EB1B2,
    0xF77FE204, 0x0EB446F2, 0xE07E1A84, 0x12E06AC3, 0xF13434D7, 0xC3A47F89, 0xA080D019,
    0x43C6F104, 0x3B4FA5A2, 0x4660D212, 0x3CBB45D2, 0xBA370800, 0x1F0A1F79, 0x25F32D15,
    0x89AC4F03, 0x7500DBD5, 0x230A1CC3, 0x8D195C82, 0xB8A80A57, 0x8BF04D6B, 0xA3C8CC3D,
    0x4A8D1522, 0xFB652268, 0x9C330EDA, 0xF8638FF1, 0x940D10A1, 0xD2B90E9F, 0x01682A09,
    0x4889271B, 0xA2C45448, 0x8C0EE577, 0xC447A15C, 0x7F9B537E, 0x741C23C8, 0xC3219FD3,
    0xC47F8E21, 0x3C8D1C03, 0xD1FF0ECC, 0xA18C2E0A, 0x8349151D, 0x8F00D442, 0x9011863F,
    0x7F564AD8, 0x97CA365C, 0xA794830D, 0xE230597C, 0x3E3F3C30, 0x59121F84, 0xF15E2543,
    0x40403785, 0x03586217, 0x86A9701D, 0x1F64A468, 0x3061449E, 0x7A06939D, 0x2E12C4A4,
    0x02078372, 0x00000002, 0x00000000

  EW_BITMAPS_TABLE( Appfire_alarmsmall )
    EW_BITMAP( Appfire_alarmsmall, Default )
EW_END_OF_BITMAP_RES( Appfire_alarmsmall )

/* Table with links to derived variants of the bitmap resource : 'App::fire_alarmsmall' */
EW_RES_WITHOUT_VARIANTS( Appfire_alarmsmall )

/* Bitmap resource : 'App::fire_routingsmall' */
EW_DEFINE_BITMAP_RES( Appfire_routingsmall )
  EW_BITMAP_FRAMES( Appfire_routingsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 0, 0, 25, 25, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appfire_routingsmall, Default )         /* ratio 54.40 % */
    0xDBE9F900, 0x31DC4FF7, 0xC976FF66, 0x55EFF401, 0x5CFF3496, 0x71134161, 0x128A4562,
    0x78CC5A31, 0x8FC723B1, 0x1C6A431B, 0xC3E371E9, 0xDCD0B67F, 0x966D97F9, 0xF0FA7FAE,
    0xEB4963E1, 0x73322CE5, 0xB904924A, 0x9FCEA453, 0x0CFA813C, 0x179631CA, 0xB9ACFF37,
    0x560FF5AA, 0x7B423697, 0xF40A8D4A, 0x58A1D124, 0xE5CC72A7, 0x56550FA6, 0x21E97D16,
    0xA3D92FF4, 0x8962FF4B, 0xAAF54381, 0xCEB39F56, 0x6CB7F9D0, 0xBC7FA6D2, 0x688A04EC,
    0x2D436B35, 0x3AB67E6A, 0xA4116C59, 0x8DD4F67F, 0x5F2FC7FB, 0x88E67FBC, 0x4AD7FB05,
    0x6DB7520C, 0x933AC27D, 0x65339D13, 0x9BEDFAFF, 0x391E6FF7, 0x0D7EFF6F, 0xE3199452,
    0x6D50A749, 0xEF5AF1CD, 0xD675BFF4, 0x96DBFDA2, 0x7C3FD70B, 0x0BFDD4F1, 0x44576BD7,
    0x6E1A6C2F, 0xB96AFC09, 0x9BCEE672, 0x8ACC0F43, 0x9271E04B, 0xF723AB11, 0x5A2D1B0F,
    0xB36DDCFF, 0xB81CF886, 0xF8EABA7F, 0x39D11E79, 0xEA665AC7, 0x2B8703FC, 0xD2763FD7,
    0x5763E210, 0x38AC9FEE, 0x0A83FC7B, 0x370C6716, 0xD130308C, 0xBA70CED3, 0x2C4DE6F8,
    0x60F3FCB0, 0x084A1384, 0x5E1485A1, 0x2F2F0E18, 0x3C8FA3F5, 0x89F318FF, 0x629CFF28,
    0x22211945, 0xFB3FC8F2, 0x7DCEE3D4, 0xA1232CD1, 0xD36E112C, 0xE4FF2B0A, 0x391E46D2,
    0x3FC7C1BA, 0x0F93F8FF, 0xC3DCFF90, 0x462F3D98, 0x39290A23, 0x3FC831EA, 0xA4478CED,
    0x091A443D, 0x564595A4, 0x5B95E5A9, 0x3D641966, 0x8C9394FF, 0x72DCFF31, 0x5CFF1FC7,
    0xA12B8AD3, 0x96A5387D, 0x6218B4FE, 0x53FC9322, 0xC9F219CB, 0x44388E43, 0x95240982,
    0xCEF3DCFC, 0x63B8F93F, 0xD0FD904E, 0x8B9FE6F3, 0x9528D622, 0x28EA468C, 0x43F0FEA3,
    0xF5FD7EDA, 0x8F3C0F83, 0x950FE902, 0xCB12C8DA, 0x21A0B43F, 0x8D50519F, 0x40990C53,
    0xABE939FA, 0xA8BAC290, 0xE3FA603F, 0xF8FD3FA6, 0xB79069F9, 0xA528A3F2, 0x2C1905A3,
    0x49B6BEA5, 0xF24197DA, 0x6A2C6543, 0x51D455CC, 0x0C7390FF, 0x2A767D32, 0x6AD8AC69,
    0xA03498B7, 0x34E50284, 0xCED6FCCD, 0x729CD7A1, 0xD8B86ECA, 0x2F3E1A12, 0x2B4AF362,
    0x6A2370FF, 0x79858E68, 0x4CFF314C, 0x4528CA23, 0x3A9DC3AE, 0xD94324CE, 0x8B3DC917,
    0x8ED4B494, 0xE73FCEB6, 0xB44C0310, 0x8E47D8BE, 0x13952F2F, 0xF2452F0C, 0xD73B26F7,
    0x89E02350, 0x4A9368FF, 0xC3C0FF2A, 0x712835CD, 0x782CCFF6, 0x3C0F9430, 0x0632A687,
    0x11CCB954, 0x2CF33EA0, 0x9E268CDC, 0x16CAA3FC, 0xCD83BD14, 0xD340FF34, 0x5D942749,
    0xD1C1A051, 0x39ED4322, 0x0A4820C7, 0xC3FC6616, 0xB110168A, 0x5BD645B2, 0x2ACD53FF,
    0x660A78AA, 0x837CE43C, 0x40892097, 0xE73D5D96, 0x320FF384, 0x62125890, 0xC8B6DE27,
    0x50C53FCE, 0xCE3FC982, 0x8B0A0274, 0xCB6C8682, 0x72F8FF2D, 0xD4FF2348, 0xDFD98E53,
    0x2B5C62F8, 0x11D1AC5C, 0x731AD1AA, 0x3CC5C30C, 0x61148A2C, 0x28CD0550, 0x2BF906FC,
    0xF3DD8CAD, 0xDB1A3DE2, 0x8ADB8E83, 0x398F56A3, 0x0E93DB66, 0xD390F49F, 0x88F43FCD,
    0x8BE24DB3, 0xEDCE3EE3, 0xCF7EDFB5, 0xF6DBB8EC, 0x7471194A, 0xFF600AF4, 0x26493334,
    0x0B76D9A5, 0xA2B55E1D, 0x5A05D274, 0xFB34205F, 0xA3ABFA7A, 0xE02BF8F8, 0xC285731A,
    0x44A03FF9, 0x5227F9D1, 0x284FF180, 0xCFF18C56, 0x7A93E42A, 0xE8B67AC7, 0x6E2B57B1,
    0x14C9D4AC, 0xE75F4B9D, 0xEC400146, 0xFF3AC609, 0x082E46F8, 0x08660E87, 0x4883184C,
    0x6100305B, 0x23047F88, 0x073C1510, 0xA9D18832, 0x152F887B, 0x47439068, 0xAA857156,
    0x3C0E02DD, 0x1302C6F2, 0x60C58E97, 0x68EA1FEA, 0xA172C086, 0x8FCC4107, 0x09F9AD40,
    0x12B0D82D, 0x5086E477, 0x3E0FE8ED, 0x759BF314, 0xE71DD0B8, 0x3C62D7E8, 0x5C779DC8,
    0x7B323743, 0x90CACAC3, 0x82646713, 0x5D818813, 0x189514B2, 0x1403413E, 0x01450A24,
    0x9F464331, 0xB68702B4, 0xFE1D8350, 0xD83C0C01, 0x787717F0, 0xA70B1C63, 0xC4323A17,
    0x08607617, 0x23F0E42E, 0x11C22061, 0x334748FF, 0xC7A9A340, 0xB6376C28, 0xF22ECA60,
    0xF9A5C378, 0x896F8CA5, 0x26B05024, 0xF14831A0, 0x8FB0BA1B, 0x21E416B2, 0x1A83B910,
    0x3087F8CE, 0xAB08C108, 0x39921251, 0xCE662544, 0x48CA9148, 0xE89B1991, 0x1350ED59,
    0xE3C4D227, 0x87F8DA1B, 0x32B49634, 0x9544E434, 0x24A60C8F, 0xAAC24283, 0xF76D0301,
    0xF8C786C1, 0xED418F81, 0xE2831EC3, 0x41642CC6, 0x07B21E2A, 0x6614C398, 0x4922FA43,
    0x79219059, 0x3406A0EA, 0x7418F4DA, 0xBE5C233C, 0xAF0543F8, 0xA66C1106, 0xD11C9B52,
    0xD2F842C5, 0x725247CE, 0x93407317, 0x8B22C858, 0x95914830, 0x54E6CCEF, 0x6E4ED21C,
    0x220C6A92, 0x1E2E86EC, 0x24310B36, 0xD5109DCF, 0x08734126, 0x6E482D8B, 0xC883CBA2,
    0x2E713A33, 0x4C03D47C, 0x718598D8, 0x27875178, 0x11302F2D, 0xA9406815, 0x482F8B12,
    0x309C19D1, 0xF1D8EE05, 0x000080A2, 0x00000000

  EW_BITMAPS_TABLE( Appfire_routingsmall )
    EW_BITMAP( Appfire_routingsmall, Default )
EW_END_OF_BITMAP_RES( Appfire_routingsmall )

/* Table with links to derived variants of the bitmap resource : 'App::fire_routingsmall' */
EW_RES_WITHOUT_VARIANTS( Appfire_routingsmall )

/* Bitmap resource : 'App::functionsmall' */
EW_DEFINE_BITMAP_RES( Appfunctionsmall )
  EW_BITMAP_FRAMES( Appfunctionsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 1, 21, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appfunctionsmall, Default )             /* ratio 41.76 % */
    0x04080100, 0xBA996B70, 0xA4A8230C, 0x07201501, 0x1F0D7F94, 0x4037FC46, 0x1E7F9447,
    0x47F990A0, 0x7F9CCC03, 0x01DCCA3A, 0x48E49229, 0xFCE8621B, 0xCD256133, 0xAA3F04BF,
    0x53387440, 0x3889CD22, 0x709CD26F, 0x4DB00BC4, 0x18919AB8, 0x8660D048, 0x10F06118,
    0x21F369CB, 0xFE5A2204, 0xEB254241, 0xE973B81F, 0xA7CBE1FE, 0xAFBF9FEF, 0xFD86C2FF,
    0xBE9FEFEA, 0xA1FEFC7D, 0x1FEEF76B, 0xFECE63AE, 0xE712E8C1, 0x358B009F, 0x4BD532F3,
    0x3594C433, 0x2B4970D8, 0xC2E12287, 0x1C2513BD, 0x96EFF2E1, 0x236266B1, 0xB94C9E4B,
    0xF176E472, 0x929BFDE6, 0xA6DF1127, 0x6067439F, 0x62166622, 0x222F159A, 0xB2CAD512,
    0xC5B0D7EB, 0x79A793BE, 0x763C1987, 0xBD3E8075, 0xA76F675B, 0x0B66A245, 0xF1B62E47,
    0x81B194E3, 0xCA422E2B, 0xA1BCD099, 0xA1A7FEFB, 0x68B31849, 0x1EDF6B91, 0x6D355956,
    0xD91824FF, 0xF977FD22, 0x98A4217F, 0x7B7ECEE1, 0x28FFF7BF, 0x1145AAAD, 0x7DFBF46F,
    0xBFDFB7D5, 0x3B3FEC9D, 0x8FF28094, 0x714C3D01, 0xADE9745E, 0xFF82DFC7, 0x348CD2FC,
    0x4F93DCFF, 0x93B9963E, 0x702F3FD9, 0xD381C6F1, 0x8320944D, 0x4701220B, 0x3184FF20,
    0xD4FF2488, 0x923E0F73, 0x3FD5B3D9, 0xA1C1D528, 0x51442079, 0x81605786, 0x7011DDB8,
    0x16D79200, 0xCFF2387F, 0xF36CD632, 0xBCA422CF, 0x334C52F2, 0x6313C686, 0x559398DF,
    0xA859603F, 0xF1968E99, 0x305EE3E8, 0x799B9159, 0x831799F8, 0xD1B17517, 0xA4FF2688,
    0xFF1B0580, 0x370D7330, 0x4E359638, 0xA830EC3A, 0xE2619365, 0xA34D21D9, 0x1CC4C75D,
    0xE353FC83, 0xA77CC98D, 0xB15D3E95, 0xFF3C8F03, 0x655695A0, 0xE929E677, 0xEA52609E,
    0xFC5D1224, 0x3E1BC473, 0x1F06B106, 0x0EE3A4FF, 0xA8F6593C, 0x36A8A567, 0x0545D779,
    0xAB6060F0, 0x0FFABAAF, 0xF1483B01, 0x8C4F074F, 0xA55B16A1, 0xA4E9696E, 0x00A5EEA9,
    0x61925E10, 0x3D8D2508, 0xD030CFF6, 0x346CB358, 0xED030ECE, 0x7804753F, 0xB6BBAE6B,
    0x2CA9A905, 0x3FC6E168, 0xC9C24070, 0x7704103F, 0x2415936A, 0xB43FC5E1, 0x3FCCB310,
    0xCE638CDB, 0x92C0993F, 0x84873FCB, 0xFABE0AC2, 0x146FBBF2, 0xAD721C77, 0x4B696BAE,
    0x682B9DD9, 0xC83FC6D1, 0x3FCD9350, 0xCD5340C4, 0x21381C3F, 0xA57BB9C6, 0xA5230FF6,
    0x388D9928, 0xC2C3FCE5, 0xD0BEDF16, 0xF0FF1C05, 0x086E0670, 0xAE17B930, 0x290AF304,
    0xA45DB9A7, 0x45D71301, 0xBE2B2CEC, 0x014FF318, 0x934C6205, 0xF1644303, 0x78DA33CF,
    0x8A1A4FF3, 0x164FF25C, 0x8FF2347E, 0x03F2148B, 0x9C9C201F, 0x51B95A12, 0x648E8945,
    0xD2157612, 0x86717B48, 0xD6733FC8, 0x79B021F9, 0x3FDE3045, 0x35F394DD, 0x11EC6910,
    0x55F42B1F, 0xCC314B56, 0x1A84079C, 0x0CF306A0, 0xF210FF35, 0xCA4B2A89, 0x600CD7B4,
    0x3ACFF1C8, 0x8FF3C4EF, 0xC9B0590A, 0x040B44F6, 0xC53FC571, 0x3FCD7344, 0xEDDBEDAB,
    0xFDC8DEC2, 0xD0F33C0F, 0x02C00FF3, 0xAD4039E7, 0x26899A4D, 0x439CE437, 0x3DE7759D,
    0xC011C360, 0xD3B4C744, 0x459E4B90, 0x13FC8C1F, 0x35E41141, 0x42160420, 0x0F40779B,
    0x0423FC54, 0x5DC07D1B, 0x74813FFB, 0xA1CD4A82, 0x12037031, 0x41A058CC, 0x70702407,
    0xECD816C4, 0x7EF47CF5, 0x3FCA6268, 0xCED3ACE5, 0x7BC8DC3F, 0xFCDD3674, 0xF9360CE3,
    0xFF3FDFEF, 0xFFA003FA, 0x02BFF802, 0xC53863FE, 0xFEFC8731, 0xCC548911, 0xF0081FE2,
    0x13A6E281, 0x41582081, 0x4140211D, 0x94406E0B, 0x1D63445E, 0x12C0C827, 0xBD8B20C2,
    0x2D56CAD0, 0xB43FD0D0, 0x947FB510, 0xF89510E1, 0x11101987, 0x90D619C3, 0xA1C43286,
    0xC378730D, 0x0BA3FE1E, 0x3FC47880, 0x1906306E, 0x0F342AC1, 0x30330A80, 0x70680B91,
    0x01012070, 0x00000000

  EW_BITMAPS_TABLE( Appfunctionsmall )
    EW_BITMAP( Appfunctionsmall, Default )
EW_END_OF_BITMAP_RES( Appfunctionsmall )

/* Table with links to derived variants of the bitmap resource : 'App::functionsmall' */
EW_RES_WITHOUT_VARIANTS( Appfunctionsmall )

/* Bitmap resource : 'App::general_inputsmall' */
EW_DEFINE_BITMAP_RES( Appgeneral_inputsmall )
  EW_BITMAP_FRAMES( Appgeneral_inputsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appgeneral_inputsmall, Default )        /* ratio 38.40 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0xBCF6A07F, 0x95F127C2, 0x6C865433,
    0x285531C1, 0x388205D6, 0xF4127A07, 0x442A05AA, 0x22956EB7, 0x28DF8B54, 0x85FEB340,
    0x294B13EA, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x3F289FF5, 0xCA2D574D,
    0xCC54EFD5, 0xC102A464, 0x20D0420A, 0x45419FC2, 0x2FE591FD, 0x57BB576B, 0xABBDE6B7,
    0xBD5FAF17, 0x52AA315F, 0x4A5B2B84, 0x15502357, 0x686585B2, 0x237CBFD1, 0x990C9DEF,
    0x4DCBDF72, 0x8555D28F, 0x949E5728, 0xAD268F10, 0x65B31A4C, 0x3F51A5C9, 0x14318B95,
    0xE72D6858, 0x4A47FEA5, 0x8753D250, 0xFD664D6C, 0x5D23958F, 0xDA415CFF, 0x71787C15,
    0x1B91C2E2, 0x39BC7E4F, 0x8DCBE7F3, 0x8F596D57, 0xA35CECE3, 0x46DBFD86, 0x54BFDBED,
    0x7CA16E8B, 0x3837566A, 0xA5FEE46C, 0x3D4EB72B, 0xD7EDF77B, 0x1F2F7FC7, 0xF8FAFDBE,
    0xA723A3DF, 0xA7A8AACE, 0x960551D6, 0xD6BA0352, 0xF4972C54, 0xE53A0FF2, 0x344D97F4,
    0x0A73FCDD, 0x92A1BA22, 0x8CE73FDB, 0x1C3C9FD3, 0x3CA1C3FE, 0x61F8761E, 0x688E2088,
    0x962888A2, 0x2C3C61D8, 0x3FD257FA, 0xCC0268B4, 0xC2C8C43F, 0xE2368D0C, 0xB4316378,
    0x37CFF334, 0xCFF384D8, 0xB3FE443B, 0x7CD12F4C, 0xEC3FD847, 0x890ED3AC, 0xE2A89E50,
    0x58A65194, 0xC62C8825, 0xC849E2E3, 0x7A8D02D8, 0x4E97F4E6, 0x798A6098, 0xB4EE7F4E,
    0xDF940EE3, 0x3FCE2368, 0xCB9230AB, 0x695E593F, 0x5A7794A7, 0x559D6239, 0x9C11F605,
    0x0B33FE72, 0x4A08BF26, 0xFA85A1A8, 0xFF31CAA2, 0x3A0E3398, 0x4B79920B, 0x02A5DA28,
    0x9CEA3FD4, 0x9C9E1ED3, 0x9529E9EA, 0x67D8B67B, 0x0655271F, 0x00CC478A, 0xE9A44D23,
    0x294BA3FC, 0x91E578C4, 0xB865BA85, 0x8279A7E1, 0x5AA86B8A, 0x69AA5A8E, 0x49C8C206,
    0x228CB8A1, 0x5973528C, 0x1A862B45, 0xA76CEAE6, 0xEA2962BA, 0x79FEA46A, 0x69DA289D,
    0x8984A103, 0xB2D556E8, 0xEBBB3EB6, 0xB9F254B8, 0xC9B38BDA, 0x652F8982, 0x334D63FE,
    0xE17848DA, 0x0B34E8B2, 0xDAD1B8AD, 0xFF536E69, 0xBB2EA49D, 0xCC82B8C0, 0x5C0F013F,
    0xC4C13FF0, 0xD576CC92, 0x3B8EF778, 0xCC93FCEF, 0x92A65F2E, 0xAA4C2E08, 0x1CBDE4F3,
    0xBEE50B93, 0x51CB555E, 0xB924B732, 0xFCEC3A4E, 0x2BCA7273, 0x3FF28CAB, 0x0F03BCF0,
    0x038CDB9B, 0x76759CE8, 0x1FCEAF9C, 0xC8AFCB4F, 0xC8D2AD1E, 0x326CB49C, 0x1B47D163,
    0xAB2FCFFD, 0x39E8EA30, 0x0B87B660, 0x9A5DDFB6, 0x673CCA69, 0xFDC82B8D, 0xA9DA6B5A,
    0xCC033518, 0xEA69EA34, 0x7EB129AA, 0xF6B814D5, 0xBE75AC7A, 0x09C47B5C, 0x43E0AB1E,
    0x2AEA80DA, 0x33270B58, 0x795556F2, 0x4DA380FF, 0xD398EA7A, 0x1B87E15E, 0x88E2A98E,
    0xE3F89E2F, 0x78DE478E, 0x9275557D, 0x0CF92B47, 0xD2244652, 0xE7DA7DA8, 0xA9647A7D,
    0x5C618378, 0xA7A73FFA, 0xA6EAA4BE, 0xEB7AEEAF, 0x88955BB0, 0x636C981A, 0x88722DD6,
    0xBC6CD645, 0x6ABBEB03, 0xCA53FFC0, 0xE3F8B420, 0x38BA234A, 0xB84D9342, 0x9F8CA2DD,
    0xFD1F07BD, 0x669B7EE7, 0x90E62E71, 0x302D07F2, 0x1F4A0410, 0xCAA104B4, 0x2368B822,
    0x4BD53F9A, 0xEBE83BFF, 0x2D7C3557, 0x4B960CFE, 0xF2CDAE39, 0xC9394E45, 0x3F090B15,
    0x6C206679, 0x3E45887B, 0xAFC047A6, 0xFB1601ED, 0xB62C0948, 0x89E4BC71, 0xC02F36C2,
    0x0202001F, 0x00000000

  EW_BITMAPS_TABLE( Appgeneral_inputsmall )
    EW_BITMAP( Appgeneral_inputsmall, Default )
EW_END_OF_BITMAP_RES( Appgeneral_inputsmall )

/* Table with links to derived variants of the bitmap resource : 'App::general_inputsmall' */
EW_RES_WITHOUT_VARIANTS( Appgeneral_inputsmall )

/* Bitmap resource : 'App::greencall2small' */
EW_DEFINE_BITMAP_RES( Appgreencall2small )
  EW_BITMAP_FRAMES( Appgreencall2small, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 3, 0, 19, 24, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appgreencall2small, Default )           /* ratio 37.60 % */
    0x1408FF00, 0x1D910650, 0x960C641D, 0xCEC89323, 0x210E863F, 0x31386C3E, 0x8932C522,
    0x239BFCEE, 0x3D3FD029, 0x0C7D0E98, 0x48245239, 0x964F2493, 0x52C787FC, 0x21308AA1,
    0xC8A323F2, 0x8833274E, 0x21F878EE, 0x4598C090, 0xAC308073, 0xA24C6CC3, 0x2A24FD3A,
    0xA2D4B8A5, 0xF48D34C3, 0x6D2633FC, 0xFB7CBFD9, 0x97D3FDF4, 0xAC576AF5, 0x0D7AC15A,
    0xBC1D95DB, 0x74E2FF77, 0x8C71498C, 0xED6E7C41, 0x88A31370, 0xD8B88E4E, 0xCA6BFA20,
    0x7FDF69D6, 0xFA0D2874, 0xB89CCDF7, 0x2B13887F, 0xF1B8CC5E, 0xFEFB7DD6, 0xEAC5C28D,
    0x12BF461F, 0x7BD9D6DD, 0xCDC25994, 0x1D33437C, 0xBFF2F0ED, 0xFD94D062, 0xB1DAC7F3,
    0xB58CD7EB, 0xEFF6F389, 0x7F3FA44D, 0x8CE41A95, 0xDF6E7499, 0x63BDD7A6, 0xF1B8BB07,
    0xFF92FC7F, 0xD52B650B, 0x9FD0DEEF, 0xB66D35FF, 0xC5EBF1DD, 0xF783C9DF, 0x42254EAF,
    0x174745D2, 0x7562996F, 0xF71DE8EC, 0x1FEFD7F3, 0xC2BC62AD, 0x9E4F26FB, 0xE9EB3C3A,
    0xFD9B6F8F, 0xD675B84F, 0x4BF3FCFE, 0x37C8C633, 0x96087CDE, 0xF97DDE66, 0x314B671D,
    0x0D83FCBD, 0xD6ACDB38, 0xD20580DA, 0x3081A097, 0x835F87D9, 0x21183DB0, 0x6374E136,
    0x72188061, 0x0A81E1A8, 0x801E743A, 0x0FC3F5C8, 0x62DD8A88, 0xD1B2844C, 0x2B8A6306,
    0x69A1B8AA, 0x8D4368D1, 0x73FE1484, 0x2CE93B0E, 0xD87B5EB6, 0x2E8C32CD, 0x4D030CFF,
    0xB6458F32, 0xF8C232CB, 0x688722C8, 0x3FC7922C, 0xC7B2346B, 0x6300AE3F, 0x90DD3FCB,
    0xCA3FCE03, 0x89CCF358, 0x8F98CE31, 0xF6295A3E, 0x7DDD998A, 0xB3278FF7, 0x1E4FF29C,
    0xE5A22098, 0xB19E3DA0, 0xC0FF1E08, 0x971E56B1, 0x37CD6488, 0x8B53FCDA, 0xD349F131,
    0xDD8B35CD, 0x9C8F6679, 0x96E9D86E, 0x4D8335E4, 0xF9E29934, 0xA69EA129, 0xA26FAA0A,
    0x2B98AA92, 0xEAAA6CBF, 0x6A9EB374, 0x96A3AB2B, 0x2DAA0B7A, 0x2647A872, 0xCB728A82,
    0x0264FF2A, 0xA4FF28CB, 0x3D5488C1, 0x2D983606, 0x6C23FE37, 0xF354CA65, 0xC60F8C26,
    0x88846D07, 0xAF095290, 0xC664521D, 0x126CFFA1, 0x29C8290B, 0xE83B0E57, 0x24C723FC,
    0x88A1951E, 0xF209E446, 0xB24623C9, 0x8F3FCEA3, 0x3FC9B2A4, 0x8972988C, 0xF314CC80,
    0x2C9C1F8F, 0xFF94E512, 0x2C0BB2A0, 0x07944AE0, 0x22C4FFB0, 0x3CFF2E0C, 0x8B34CD93,
    0x3D0F63CD, 0x4CA2ECFF, 0x52CAE530, 0xE2F6748A, 0xE1394DEB, 0x2B8963FC, 0x8EA3FCA1,
    0xA571C43B, 0x34D331D5, 0x0DC5F153, 0x45311C3F, 0xC9929C8D, 0x63E0F63F, 0x5CCD7A0F,
    0xF7BD6A43, 0xCB72B3FE, 0xA98370D3, 0x83E0F763, 0x6CD03FCF, 0x3F2C73DC, 0xD348143B,
    0x8FF34AA2, 0xB394E838, 0x5CF93E18, 0xAFA468FD, 0xD32BB304, 0x0FFCB32A, 0x83FF6E2C,
    0xC0F93E8F, 0xE439CE19, 0xC90C9C84, 0x63DC430E, 0xE17C6F14, 0xD087188C, 0xF2448FB1,
    0x54ACA46A, 0x0A62CC9D, 0xB3B4E89C, 0x18FFB3AF, 0xFFDC288A, 0xC1CE3DEC, 0x72E2289A,
    0x6B48A02B, 0x1CFF2A8B, 0xFF248A12, 0x2F30DA68, 0x45E86F82, 0x63C06F20, 0xC42A1CE8,
    0x76424C65, 0x1FD306F0, 0x7AD2309C, 0x82926730, 0xA8FF2B4B, 0x7D872621, 0x380FFE84,
    0xBD0E7CE7, 0x5F3FD1F4, 0x7FD6F4FD, 0xB9C989BE, 0x3BC75221, 0x85951C61, 0x64107F40,
    0x0C351E08, 0xABADCD25, 0xF26F3696, 0xA63F2BCB, 0x1FCFF0FC, 0xB39AF2FF, 0x663A8755,
    0x15478228, 0x1543F855, 0x0010100C, 0x00000000

  EW_BITMAPS_TABLE( Appgreencall2small )
    EW_BITMAP( Appgreencall2small, Default )
EW_END_OF_BITMAP_RES( Appgreencall2small )

/* Table with links to derived variants of the bitmap resource : 'App::greencall2small' */
EW_RES_WITHOUT_VARIANTS( Appgreencall2small )

/* Bitmap resource : 'App::heatA1Rsmall' */
EW_DEFINE_BITMAP_RES( AppheatA1Rsmall )
  EW_BITMAP_FRAMES( AppheatA1Rsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 1, 2, 23, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppheatA1Rsmall, Default )              /* ratio 51.68 % */
    0x1408FF00, 0x9E0FAA50, 0xE0F8A219, 0xCF6A25F1, 0x1CA37D9D, 0x67788BE6, 0x168A44A2,
    0x78DC622B, 0x7F9E4FB1, 0xBC823CA3, 0xC9635248, 0x3E1B288C, 0x59C7990C, 0x04463C44,
    0x4A6021FE, 0xA41A1D4F, 0xC6C1E0F6, 0x9EC8A412, 0xF9FD04A7, 0xA492AB47, 0x5932B77F,
    0x51AAE7FA, 0x7B1F9F22, 0x3549FD4A, 0x58A8556A, 0x0ADD5AA7, 0x513AE152, 0x1934EE7A,
    0xD69710A5, 0x0106A87F, 0x174CE7FA, 0xCCEE7FAE, 0xF72B8399, 0xE472BB5F, 0x9753C1FE,
    0x6CB91FEE, 0xD2E1FED8, 0x291FE974, 0x5EB27A3F, 0x313879ED, 0x516B422A, 0xAFF40A15,
    0x8A3E2014, 0x93E54AB9, 0x872858C7, 0xC65A7AFC, 0xB0988D6C, 0x2998DB7F, 0x53EBB7FB,
    0x4EC17FA7, 0x8C57FA95, 0x84C12A95, 0xC57B1DFF, 0x6DB95FEA, 0xDA7758D9, 0x2FF8B994,
    0x71FEA252, 0x5FECD67B, 0xFECE6837, 0xEB55C331, 0x7E40A99F, 0x884CF78A, 0x3BE7DF87,
    0xC2DA45A1, 0x389FE954, 0xA9FED56B, 0xDFE8343A, 0xFEB95D33, 0xEF57B3E5, 0xF87C3EDF,
    0x3723B1FE, 0xC82A5FEE, 0xCA171CFF, 0xD378E83F, 0x4922768D, 0xE43AD946, 0x2294D5E4,
    0xC82219FE, 0x0308D33F, 0x5CB53FCC, 0x1F820932, 0x681DE771, 0xCAD3153D, 0x535CFF2A,
    0x04FF310C, 0xF03D5D95, 0x3F0FF3C0, 0x62F3E8FA, 0x48CA338C, 0xFCA92ACC, 0x10234AF3,
    0x3A0E93C2, 0xCB23FE1C, 0x93FC9024, 0x14E0384E, 0xB02C8C87, 0x29CC03FC, 0xE1E904A4,
    0xC47DE177, 0x389E284B, 0xFF734CE7, 0x3B4F25AD, 0x2628D4ED, 0xD6EE328C, 0xE9E42DDB,
    0xB3905FC7, 0x38246910, 0x4C859E49, 0x63024D2C, 0x6D67944A, 0xE087D0A7, 0x651FF4F5,
    0x581368E5, 0x93654F53, 0xD263320C, 0x447E0FA8, 0x5B091251, 0x8FF2DCB9, 0xC2F0BF34,
    0xC0E99BA6, 0x4E9D24A9, 0x9EE529DE, 0xC7F63254, 0xB340FF1E, 0xC1EE2E8B, 0x9D2E8FF7,
    0x3DCFF268, 0x2623CCF3, 0xF344D238, 0x34902C4F, 0x4C6017E2, 0x91697539, 0xD579C699,
    0x9A7A759C, 0x825348A7, 0x8E2BD578, 0x5E66A22C, 0xDAF280BB, 0x43FCD479, 0xACEF3BCF,
    0xE7AB89CA, 0x3FCDC370, 0x186930C9, 0x29BEBF62, 0x76C4572C, 0xC862E78A, 0x66ACAA82,
    0xCAA30D22, 0xF7A1E629, 0x3CD1378F, 0xEC3C8FF3, 0x350FF3AC, 0x4D779A16, 0x320CA77A,
    0xB55CB1D4, 0x72A6AC09, 0xBAE76A72, 0x6EE876F0, 0xF8A9579F, 0xFA8E2CCF, 0xD137EBC6,
    0xBF6FB340, 0x0CA364FF, 0x3314D5A2, 0x2967904C, 0xC5A6EE6C, 0xB25C5C42, 0x4AA47F14,
    0xE8161321, 0x8CEB3FCD, 0xC1C68E23, 0xBF31EC71, 0x324C8AFE, 0x5C232731, 0xB2C1CA9C,
    0xDDA7EEAC, 0x61D22A85, 0x2CEB32A4, 0xDA05C4AB, 0x833F34B3, 0xD53FF42C, 0x7ADC5D10,
    0xED22F1ED, 0x02810C3F, 0x264D2CEE, 0x932BF0DD, 0xD90BE302, 0x4BDD98A2, 0xA246B7DC,
    0x5655CC2B, 0xB93FD976, 0x3FC9826C, 0xF56BD2F2, 0xFD60DF3F, 0x7323D071, 0x7B68B5ED,
    0x324CB367, 0x0D234F84, 0xF32CCC6A, 0xB395368F, 0x677C4BB5, 0x7109E2E9, 0x5AB32CDA,
    0xFE93966A, 0x84E23A8F, 0x7C8F23A3, 0x5AD69DE6, 0xEFA340DE, 0x5E0DE979, 0x0F88D678,
    0xA3D3F45D, 0x2D8B774A, 0xB6C2C5BA, 0x855FC4D1, 0xF899270B, 0x0A704DA6, 0x68D67EB6,
    0x88E24642, 0x0ADB57F2, 0x7789C874, 0xAB573BBD, 0x81085224, 0xB7E60A06, 0xCD1AE476,
    0xFC87228A, 0x19F84E73, 0x9FB7886E, 0x8CD37200, 0x3350E1E5, 0xD784F50D, 0xBAF6387A,
    0x258B5907, 0x36071A1B, 0x568FF1AE, 0x28110230, 0x00A91DE3, 0xB061A176, 0x6A7A4722,
    0x13ACBBDA, 0xA6D03E88, 0xC661B715, 0x8DA794EF, 0x6B4F59FC, 0xBB1C5BD9, 0x87AE42A2,
    0xA46BCBFD, 0x1A59DDE8, 0xB8581BA3, 0x60CD3502, 0x182D0506, 0x8D3DE741, 0x9082CC5C,
    0x0FF5B62E, 0x83A36C73, 0x07C698DF, 0xEDB8A773, 0x4360A905, 0x926ADC71, 0xA8C33681,
    0xD8B82450, 0x18046144, 0x022C5698, 0x49516781, 0x91F69C3F, 0x3DA21855, 0xF5CBEA3E,
    0x7041D87C, 0x5B7F7108, 0xB9025ED3, 0xF9090A92, 0xFAAB87E5, 0x410E7A9C, 0x0E4DC888,
    0x9E228F63, 0x12A1FA42, 0x3130DC88, 0xD515D2B8, 0x6D8DC7D4, 0xC518E894, 0x4A921D38,
    0xA9140C64, 0x131178B1, 0xB1B89B92, 0xEE3DCBA5, 0x1B62731F, 0x21E68D0B, 0x18A41852,
    0x5D9D7B46, 0xE14982F0, 0xA846E3FD, 0x60319FC0, 0x16358AD1, 0x48AC8587, 0xE4742184,
    0x0F410808, 0x43C15D92, 0x87914634, 0x1440F43C, 0xD1874106, 0x731AF6C4, 0x49915214,
    0x2C2F868A, 0x5DF28A55, 0x80FE3B85, 0xD9A72E26, 0x83CC3C2E, 0x82D19C14, 0x0A10084C,
    0x08E1D83D, 0x3083B909, 0x0F0FB228, 0x7B0FD275, 0xFA75C7E0, 0xEE730FC0, 0xE9DD9DC9,
    0x49DF3CA3, 0xB3D678CF, 0x4954F79D, 0x8D121468, 0x0B61E086, 0x0208109F, 0x00000202,
    0x00000000

  EW_BITMAPS_TABLE( AppheatA1Rsmall )
    EW_BITMAP( AppheatA1Rsmall, Default )
EW_END_OF_BITMAP_RES( AppheatA1Rsmall )

/* Table with links to derived variants of the bitmap resource : 'App::heatA1Rsmall' */
EW_RES_WITHOUT_VARIANTS( AppheatA1Rsmall )

/* Bitmap resource : 'App::heatsmall' */
EW_DEFINE_BITMAP_RES( Appheatsmall )
  EW_BITMAP_FRAMES( Appheatsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 1, 21, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appheatsmall, Default )                 /* ratio 43.68 % */
    0x1408FF00, 0x9E0FAA50, 0xE0F8A219, 0xCF6A25F1, 0x1CA37D9D, 0x67788BE6, 0x168A44A2,
    0x78DC622B, 0x8F46A3B1, 0xFC724319, 0xC3E1B158, 0x38F27D51, 0x88C7888B, 0x4C043FC0,
    0x8343A9E9, 0xD83C1ED4, 0xA7F9E650, 0x9F4A6793, 0xFD0A7B3B, 0x9F100A69, 0x3D24B27F,
    0xD34B77FA, 0x20B17FA5, 0xEA57FA35, 0x58A01ECF, 0xA9FD0687, 0x85572B35, 0xB9E944EB,
    0x429464D3, 0x72D35D5C, 0xCFA80A25, 0x58AE633F, 0x8E4763FD, 0xE877BFDC, 0x576BFDCE,
    0x74BBEECE, 0xFBA5FEE8, 0xB01FEDE6, 0x5AA8A252, 0x31B5BAF5, 0xF366C7E3, 0x90E50B18,
    0x5DC75A9F, 0xF5AADD9B, 0x6934DC0F, 0xF28578FF, 0xA917EFF4, 0xAD5AC6C4, 0x13EBB7FA,
    0x4EC17FA7, 0x0E37FA95, 0xC47FB59B, 0xBC82A556, 0xAC6F7316, 0xA3F0F109, 0xEFF2C77C,
    0x355EFFCB, 0x9DCFF452, 0x97C97339, 0xFAA62BFF, 0xF379BDDF, 0x97CBEDFE, 0x75BC5FEF,
    0x9ACDFEEB, 0xA43C74B4, 0x75BCE87F, 0x2AE7EAA3, 0x833FF7F2, 0xDF0CAF0F, 0xE8D268B1,
    0xFABFB308, 0x7E3FDD5D, 0x5FF3E8FA, 0x080A0380, 0xFCBA2F0D, 0x82214A93, 0x380EA3FC,
    0x4AC3FCE0, 0xE6F08622, 0xC8FF85DB, 0x18719C47, 0x254B4576, 0x97D5EC92, 0xD2008482,
    0x017A39DC, 0x058AA028, 0x300D33FE, 0xCAD3FCBE, 0x06088722, 0x14FF37CE, 0x167D5475,
    0x7CD0A866, 0x13D8F1C5, 0x21E87D29, 0x3D4D7E98, 0x2C826075, 0x775DB8B2, 0xCA3298C0,
    0xF68CBD3F, 0x20CA368F, 0xF190A3D3, 0x9721B8FD, 0x8A83098E, 0x8360FF29, 0xC0FF31CC,
    0xDE22C8F2, 0x8B1E13B1, 0x0E338CEC, 0xF2389152, 0x64DA394F, 0x9B2E0FF3, 0x71E5B260,
    0x21A4EE80, 0xB8F6817D, 0x90FF2060, 0xB035CD83, 0x33A642A5, 0x4FF2E0BA, 0x33D8F63E,
    0x75AB2B1D, 0xFF334CE3, 0x318C8364, 0x2857B98A, 0xF70A3E98, 0xEEA8A8E5, 0x9B278BA4,
    0x3FE285DC, 0xCB42DCCC, 0x43D0F83F, 0xE4CD3FCF, 0xE63FCB62, 0x3FCDA36C, 0x20D218AA,
    0x1A0E3CA9, 0x9D8FAA64, 0xD11F8822, 0x3A8F1731, 0xCB8331FE, 0x1ADEB5AE, 0xFCBB2F4D,
    0x7FA6CDC3, 0xB1AC8876, 0x2A1B761C, 0x1839EA7A, 0xB4F2844E, 0xD3AC0EC3, 0x3FEB6AD2,
    0x2DBB66D7, 0xDB22C4A7, 0xEEF5B813, 0x6C238AF4, 0x254982DA, 0x5FE3ADDE, 0x0B56ED33,
    0x72DAB62F, 0xF8B8AF9B, 0x2913FBDA, 0x4B99187E, 0x1621A59F, 0x52B97870, 0x09BC6EFB,
    0x29A85BD3, 0x0AB5B881, 0x83FC8522, 0x1688210A, 0xDEA125EB, 0x55F1063A, 0x4CE340DE,
    0xF34CD467, 0xE6EBBA4F, 0xD6BB8B7A, 0x63EF3C22, 0x2DB836C1, 0x8846E633, 0xB0DC374E,
    0xC8AB49D6, 0x63F2DC35, 0xE32518A5, 0x3C048822, 0x1B3B2E70, 0x5DCFF1CC, 0x78ECCB29,
    0xD6EC814B, 0x7310C635, 0x10FF6017, 0x4E576469, 0x7B4A5B8B, 0xCCB336DA, 0x0344DF3F,
    0xE2EACDCD, 0x07CF358A, 0xC3B0ABCB, 0x8AF3193B, 0xF3BCF45C, 0xAF6CB8CE, 0x43D3EC7C,
    0x2A9D44FE, 0x8B4328FF, 0x89BB372C, 0x6F7CA46B, 0x6263B7FD, 0x29D8BDA7, 0x69D1FC83,
    0xFCC65A32, 0xA311DA4C, 0xA69776BE, 0x4F6E2CB2, 0xCB6732FB, 0xFC5C9425, 0x6A92A40F,
    0x58E6F3ED, 0x34B7B339, 0xA572F4BE, 0xEAF0C932, 0xD892522B, 0xA72A4C39, 0xBDF16618,
    0x63CB878A, 0x93C15755, 0xFF563A4E, 0xED3B4F33, 0xEEB98EDC, 0xD8EC7B7E, 0x32FA358C,
    0x6B4A284A, 0x8321AC02, 0x204A73FC, 0x3C5962CC, 0xF7037237, 0x011049A3, 0x5354558E,
    0xE56FF2DD, 0xE51C91E1, 0x663D87AC, 0x5C5662D8, 0x5290DFD3, 0x74500BC7, 0xB0992982,
    0x432A7004, 0x63143C24, 0xC5313D61, 0x8EE28E1F, 0x49674073, 0xF35E58FF, 0x68A684CC,
    0x187842FC, 0xA24297B4, 0xE43C8A31, 0x30A207A1, 0xB8523A08, 0xE2450F93, 0x46B0E21F,
    0x0EB1FE35, 0x78638471, 0x21C553C5, 0xC7C347DA, 0xA41E6704, 0xB41E43E0, 0x840212F0,
    0x38760F42, 0x20EE4242, 0x43EC8A0C, 0x9FBC583E, 0x9F238516, 0x1F8C4451, 0x1647E362,
    0x3145B8B9, 0x668C7196, 0x567D22E4, 0x6C3C10D8, 0x410213E1, 0x00004040, 0x00000000

  EW_BITMAPS_TABLE( Appheatsmall )
    EW_BITMAP( Appheatsmall, Default )
EW_END_OF_BITMAP_RES( Appheatsmall )

/* Table with links to derived variants of the bitmap resource : 'App::heatsmall' */
EW_RES_WITHOUT_VARIANTS( Appheatsmall )

/* Bitmap resource : 'App::input_alarmsmall' */
EW_DEFINE_BITMAP_RES( Appinput_alarmsmall )
  EW_BITMAP_FRAMES( Appinput_alarmsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_alarmsmall, Default )          /* ratio 50.72 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0xBCF6A07F, 0x95F127C2, 0x6C865433,
    0x285531C1, 0x388205D6, 0xF4127A07, 0x442A05AA, 0x22956EB7, 0x28DF8B54, 0x85FEB340,
    0x294B13EA, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x3F289FF5, 0xCA2D574D,
    0xCC54EFD5, 0xC102A464, 0x20D0420A, 0x45419FC2, 0x2FE591FD, 0x57BB576B, 0xABBDE6B7,
    0xBD5FAF17, 0x52AA315F, 0x4A5B2B84, 0x15502357, 0x686585B2, 0x237CBFD1, 0x990C9DEF,
    0x4DCBDF72, 0x8555D28F, 0x949E5728, 0xAD268F10, 0x65B31A4C, 0x3F51A5C9, 0x14318B95,
    0xE72D6858, 0x4A47FEA5, 0x8753D250, 0x151E4D6C, 0x4EADE928, 0x0EFDFEC2, 0x70385C3E,
    0x6567C1E3, 0x54EFF5F2, 0x36B5A4A3, 0xBD4E4301, 0xC75B7178, 0xC7ACB6AB, 0x51AE7671,
    0xA36DFEC3, 0xAA5FEDF6, 0x3E50B745, 0xD708954D, 0xDFF076BF, 0x4EDF87C7, 0xF870FD7E,
    0xFFD989FF, 0x7FFF860F, 0x8FF80487, 0x67DA043A, 0xB0FF7D20, 0xA255A0A3, 0x551DD53C,
    0xA1152960, 0x72C54D6B, 0xA0FF2F49, 0xFF3A8E53, 0x374D1364, 0x1BA221CD, 0x9821EE7B,
    0x30FF89CE, 0xC83FE2A3, 0x27CFF8B4, 0x9FF7F630, 0xB3FE3425, 0xFCFF8DC2, 0x2E8B23A2,
    0x3FE3E33E, 0xE09904EB, 0xF6055582, 0x68B43FD1, 0xB2311D32, 0x930FF330, 0x4FF9424E,
    0xF334B431, 0x84D837CF, 0x5C3BCFF3, 0x2F4CB3FE, 0xCAA3FCD1, 0x67C62522, 0xC4FF99CA,
    0x523FE6A0, 0x13CFF9B4, 0xC4A3FE70, 0x6144FF9C, 0xE4483FE7, 0x6D9DE759, 0x0B0FF14A,
    0xCBB3FE80, 0xC3B243A0, 0xDA2C4960, 0xE93FCD02, 0xA361C398, 0xE8CA3A8F, 0xD3BA1C39,
    0xC8FF3B8E, 0xDA95E9A3, 0x2ACFF388, 0xA062E48C, 0x33FEA42A, 0x40FFA9C3, 0x28A32AA3,
    0xAB0E989E, 0xEB0ABAAF, 0xFAD4B63F, 0xFEB8084F, 0x85AECC03, 0xA8127A1E, 0xC982CEA2,
    0x4B08FF2F, 0xF8FFB1AC, 0xFF31CAA2, 0x3A0E3398, 0x4B7A4A19, 0x560DE128, 0xBEB27D66,
    0x7D3FEDA1, 0x7CE07B74, 0xCE57D6E0, 0x616CFFB8, 0xA4913FEE, 0x8682A06B, 0x49C7D916,
    0x11E28195, 0x1348C033, 0x94BAABED, 0x1E578C42, 0x7D6DF891, 0xE692EE83, 0x1C16089A,
    0x24DA3FEE, 0x0C0F8FFC, 0x364D9877, 0xDAB912EB, 0x169247BB, 0x109C2D21, 0xC128CB8B,
    0x55973285, 0x9F5C1AFE, 0x23FCCF8F, 0x8CFFC9C2, 0x06BFCE5B, 0x1128BAAA, 0x9F83FF30,
    0xCBB20896, 0xAA0FC520, 0xA22E54D6, 0x87CDA784, 0x5BA225CD, 0x639EFE55, 0x244D3FF4,
    0x4C344FFD, 0xD3C233FF, 0x9E537E57, 0x632A06C8, 0x64473FF5, 0x66C2B08D, 0x3A28CD74,
    0xE88916AF, 0xC260B26C, 0x58FFA41C, 0xCD368CD3, 0x7B5E66E5, 0xC247E732, 0x2C90FFDC,
    0xAE9F0C23, 0x36CB0AB2, 0x3FC91BA7, 0xF79E046D, 0xFE1445DE, 0x9CE639CF, 0x6549F373,
    0x2B8C0733, 0xB90AE8C8, 0x130791E4, 0x55E2324B, 0xEE3BDE53, 0x324FF3BC, 0xA63A2CBB,
    0x89E7367B, 0xA4803FC4, 0xAC264FFE, 0xEBC2A3FF, 0xCA92A5E6, 0xFED4D83F, 0xFFB823CF,
    0xFF093733, 0x3FFBE2C8, 0xB80F045E, 0x7BBB36E0, 0x84B73252, 0x863A4EB9, 0xF33CDF2E,
    0xCF0F4240, 0xBA64F03B, 0x8CDB37E9, 0x06A869F3, 0x0BAC48EA, 0x4B3B17E0, 0xFF949552,
    0xFFE806CF, 0x36FAC023, 0xDEF7A8E2, 0x0FF25A34, 0xFDD7F40A, 0xFF13F163, 0xB4A888DA,
    0xFFA48748, 0x2FCE9BFD, 0x672CC156, 0xEB51AE29, 0x7A2E07F8, 0x18C22626, 0x44094828,
    0x61FF0485, 0xA3FE0A84, 0x07FC1814, 0x0FF8361E, 0x4C507806, 0x088462A5, 0x7F8514F7,
    0xBD84E2F0, 0x1A535FC2, 0xC8D32F04, 0x00CD230B, 0x952634C6, 0x62985D40, 0x4A695F5F,
    0x33660EC8, 0x4330F871, 0x309680E8, 0x2C8FF886, 0xD41FF118, 0x8EE1E248, 0x51C53466,
    0xC2FC854D, 0xB0F02708, 0xAC587C0A, 0x50C36529, 0x1D31382D, 0x150558D6, 0x390F4887,
    0xC38E61BE, 0xE755E391, 0xD119A338, 0xB234C6A8, 0x8C6B8DF1, 0xE8E31BA3, 0xA555682C,
    0x45687913, 0x8651063E, 0x87234848, 0xD8A409A7, 0xA00A9230, 0xD63DD034, 0x1322A43A,
    0x360748C9, 0x8C8E9112, 0x92AA7BA4, 0x62603508, 0x85B9661B, 0x9642C41C, 0x34D278D9,
    0x64D9D49F, 0x5A08314A, 0x8D15C3F8, 0x682385D0, 0xDCDC1362, 0x0A461942, 0x494120A5,
    0xB178AECB, 0x85C9EC32, 0x07F14839, 0x2080C05A, 0x2D03E8A0, 0x6D3A3082, 0xB71FC688,
    0x452CE5AC, 0xD6524B29, 0xC9831FC2, 0x335C3945, 0x24E42F8B, 0x05897227, 0x19E27E09,
    0x0F66C10A, 0x2C87C8B1, 0x3DC2E9C7, 0x291F62C0, 0x5036C581, 0xD8514AA9, 0x04D705E6,
    0x00004040, 0x00000000

  EW_BITMAPS_TABLE( Appinput_alarmsmall )
    EW_BITMAP( Appinput_alarmsmall, Default )
EW_END_OF_BITMAP_RES( Appinput_alarmsmall )

/* Table with links to derived variants of the bitmap resource : 'App::input_alarmsmall' */
EW_RES_WITHOUT_VARIANTS( Appinput_alarmsmall )

/* Bitmap resource : 'App::input_callpointsmall' */
EW_DEFINE_BITMAP_RES( Appinput_callpointsmall )
  EW_BITMAP_FRAMES( Appinput_callpointsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_callpointsmall, Default )      /* ratio 53.44 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0xF8D4622C, 0x589F542F, 0xDC862F19, 0xC9A39228, 0x62492892, 0x15E7B504, 0x9CAF893E,
    0x0B6432A1, 0xB142A98E, 0x39DC102E, 0x57A093D0, 0xBA21502D, 0xA114AB75, 0x0146FC5A,
    0x63F1D59A, 0xA11E9053, 0xB4FA8D3A, 0x53ABD52A, 0x5ADD4AB3, 0x901F9455, 0xEAE516AB,
    0x32668A77, 0x05608152, 0xA1106821, 0xFEA2A250, 0x9587F2C8, 0x5AAB5D6B, 0x7BCDDAF1,
    0xAF5E6FB7, 0xC2295518, 0xABA58D95, 0xD90AA811, 0xA91462C2, 0xF590BDDF, 0x993C7E4A,
    0x4A9065AF, 0x9442AAE7, 0x884B0F2B, 0x1E52994A, 0x466BF7FD, 0x9E971B40, 0xB57A1A66,
    0x55B0D6EB, 0xDA8D66C7, 0xD0AFA875, 0x0D23CE60, 0xA6209492, 0x92D90EA7, 0xAFA3171C,
    0x89FEC754, 0x5FEE4703, 0xA1CEE7BA, 0x9D174F3F, 0xD8EAF4FA, 0x7E876BAF, 0x7FB9DCCE,
    0xFB4D7ECC, 0xAD106A47, 0xFF791C7A, 0xD86A35CB, 0xBED46DBF, 0xE8B54BFD, 0x4E503FD6,
    0xE7FF0951, 0x8EB4196C, 0x4FF284A1, 0x27660430, 0x24E6741D, 0x0C2CCFF8, 0x83C993FE,
    0xC9B8420E, 0xB36DEF84, 0x94E6760D, 0x9A2D5DF3, 0x55923300, 0x9506DDA6, 0xD25CB169,
    0x94E83FCB, 0xD93FCEA3, 0x3FCDD344, 0x5C3220A7, 0xA7D8892A, 0x48FF8DC9, 0x293FE3A0,
    0x2B8FF8F4, 0xCE73FE40, 0x6369D890, 0x24403FE4, 0x4C004FF9, 0x00E4D92E, 0xC6F3FE50,
    0x6824FF94, 0x7CB8760E, 0xB4471EE2, 0x310FF874, 0x65F330B2, 0x598A6398, 0xFCCD2D0C,
    0xE1360DF3, 0x9BCEF3FC, 0x4BD32CFF, 0x8608FF34, 0xE4D13FCB, 0x7C24CFF9, 0x9FC723FE,
    0xE82168FF, 0x8A14BC3F, 0x194C831D, 0x033FE8A0, 0xA3902A31, 0xC1F3FC00, 0x6314FFA4,
    0x7E5A9629, 0xFF2D8C88, 0x8ACE63A5, 0xA9FA829E, 0xE8ACE773, 0xFCEE3B4E, 0x6AAACF23,
    0x9D4E236A, 0xCE59DC8B, 0xA8DCFFAC, 0xE4383FC9, 0xBC240FFA, 0xAFCC73FE, 0x2C22A9D8,
    0xDA36C4A4, 0xFC06A2A8, 0x98B2C643, 0x2AD2296E, 0x20B2E48C, 0x5B4CBF26, 0xFED42CED,
    0xC92A8BE3, 0x3A0E3399, 0x4B7A8E28, 0x68D1EE28, 0xFDF6511F, 0x713FC729, 0x074FFBB4,
    0xC6C3FEF0, 0x6318FFBC, 0xA4A97CEF, 0x8DA3EC52, 0x3FC03942, 0x8FFC043F, 0xE9630411,
    0x5118B389, 0xCC488A06, 0xB84D2300, 0x0A52E9D4, 0x3600FF31, 0x81F78D5F, 0x1B3FCA02,
    0x0B4FFC74, 0xC983FF20, 0x6208FFC8, 0xA4B53FF2, 0x02BEAF8C, 0xA46FBCB4, 0x4FFCC404,
    0xA3FF3414, 0x2306CDC4, 0x2088D95C, 0xB549C2D1, 0x4C228CB8, 0x65557247, 0x0A4490AE,
    0x6A3FF4A3, 0x0E8FFD34, 0xCD53FF50, 0x6321D8D4, 0x64613FF5, 0x09A5292D, 0xB20FFD74,
    0xF621D4FF, 0x9D948E3F, 0xE5EA87F3, 0xDA7B8A22, 0x226308B8, 0xF47551C3, 0x43FCE5AC,
    0x48FFDDCB, 0x83A077A1, 0x81B7E1F6, 0x782389D4, 0x627EF7BD, 0x241E3FF8, 0xE880A00E,
    0xDA2CDE34, 0x0B255597, 0x3738BE26, 0x68CD35AA, 0x477EE303, 0x9FB9E297, 0xFA21CE80,
    0xFE94743F, 0x57A821CF, 0xD676E0A9, 0xEBCE4741, 0x7B20A0FF, 0x8288A2C5, 0xE1D7E3A2,
    0x9387F072, 0x2B8C0E57, 0x7BF3FCC8, 0x180FC3F0, 0x55EF324B, 0xEE3BDF23, 0x324FF3BC,
    0xE767FCBB, 0xCF54BF3F, 0x64218FA3, 0xDC05CFFF, 0x878C0F0B, 0xFACB838D, 0x7F94E03F,
    0xA427EA7A, 0xAFE9BA4F, 0x47367FB4, 0xE742DCC9, 0xF3B0E93A, 0xE3F6FD0F, 0xFFFD7F7F,
    0x3C0EF3C0, 0x37D562AA, 0x580E31B6, 0xC93AE9DD, 0xB4D62048, 0xFE0683C6, 0xFC1008A3,
    0x08263587, 0x49187FB8, 0xC39BA273, 0xC1C0DC3F, 0x83E1FC7F, 0xFBC4CA11, 0x6908D59E,
    0x1E1362D1, 0x510A613A, 0x7455BD48, 0xF1DF1C6B, 0x81FE3AD4, 0x47CDB58B, 0xCEB9F611,
    0x8D23BE90, 0x1A63FE1E, 0xE187FC40, 0x680FF13E, 0x1782B118, 0x961747FC, 0x380C0FF8,
    0xBB026011, 0x98471484, 0x0C2DC8B0, 0xC600CD23, 0x8E71D278, 0x14C2EA19, 0x480AF314,
    0x728FF2DE, 0xD74AE38C, 0xC70552B1, 0x5D0B1D77, 0xFC700C68, 0xF8E620C7, 0xF1D83C8F,
    0xE3C8961F, 0x8B75C0ED, 0x138D0C4E, 0x3E055878, 0xC99A6346, 0x9C16A89D, 0xAA7150F0,
    0x3CA61682, 0x40D51843, 0x77C439D1, 0xB259D6A0, 0x47FC3B82, 0x3CF93633, 0x79102605,
    0x3486D449, 0x448A745E, 0x831F22D4, 0xA4244328, 0xB99DC621, 0x38A62EF2, 0x25A03FCA,
    0x32CE5A2D, 0x25ACB75A, 0xCBC96D2E, 0x9752FA5D, 0x4D1184C0, 0x3588A1FE, 0x651B6260,
    0xC21C85B9, 0x38F51632, 0x8CCF7233, 0x614A650C, 0xA2B87F1E, 0xC470BA11, 0x9C12724D,
    0x62C3285B, 0x34257CD1, 0x4595C9C7, 0xB9468652, 0xFE290730, 0x10180B40, 0x08B43F04,
    0xA5622A82, 0xC3F8D08D, 0xA714E49C, 0x1779F334, 0x1FC2D66A, 0x3945C982, 0x2F8B336E,
    0x712784F0, 0x84090589, 0xE51119D2, 0xC8B10F66, 0x6A273847, 0x62C03DC5, 0xC5812C1F,
    0x4D99AE36, 0x05E6FC51, 0x40400507, 0x00000000, 0x00000000

  EW_BITMAPS_TABLE( Appinput_callpointsmall )
    EW_BITMAP( Appinput_callpointsmall, Default )
EW_END_OF_BITMAP_RES( Appinput_callpointsmall )

/* Table with links to derived variants of the bitmap resource : 'App::input_callpointsmall' */
EW_RES_WITHOUT_VARIANTS( Appinput_callpointsmall )

/* Bitmap resource : 'App::input_faultsmall' */
EW_DEFINE_BITMAP_RES( Appinput_faultsmall )
  EW_BITMAP_FRAMES( Appinput_faultsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_faultsmall, Default )          /* ratio 50.72 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0xBCF6A07F, 0x95F127C2, 0x6C865433,
    0x285531C1, 0x388205D6, 0xF4127A07, 0x442A05AA, 0x22956EB7, 0x28DF8B54, 0x85FEB340,
    0x294B13EA, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x3F289FF5, 0xCA2D574D,
    0xCC54EFD5, 0xC102A464, 0x20D0420A, 0x45419FC2, 0x2FE591FD, 0x57BB576B, 0xABBDE6B7,
    0xBD5FAF17, 0x52AA315F, 0x4A5B2B84, 0x15502357, 0x686585B2, 0x237CBFD1, 0x990C9DEF,
    0x4DCBDF72, 0x8555D28F, 0x949E5728, 0xAD268F10, 0x65B31A4C, 0x3F51A5C9, 0x14318B95,
    0xE72D6858, 0x4A47FEA5, 0x8753D250, 0xFD664D6C, 0x5D23958F, 0xDA415CFF, 0x71787C15,
    0x1B91C2E2, 0x39BC7E4F, 0x8DCBE7F3, 0x8F596D57, 0xA35CECE3, 0x46DBFD86, 0x54BFDBED,
    0x7CA16E8B, 0x3837566A, 0xA5FEE46C, 0x3D4EB72B, 0xD7EDF77B, 0x4DD707B7, 0xC664BFDC,
    0xF713FD98, 0xF87CBD2D, 0x0E87FE00, 0x2558EA39, 0x51D653CA, 0x0B529605, 0x2C54D6BA,
    0x0FF2F497, 0x9814E53A, 0xFCDD344D, 0xBA220A73, 0x3FDB92A1, 0xA0538CE7, 0x43FE243C,
    0xB0FF3CA2, 0xCB3FE2A3, 0x1C4FF8B4, 0xC4A3FE30, 0x61F8FF8C, 0xE4D43FE3, 0x3C3B4FF8,
    0x89E2589A, 0xA423C4FF, 0x43FD2581, 0xFCC0268B, 0xFA2C8C43, 0x9324D92D, 0x4B4314FF,
    0x837CFF33, 0xBCFF384D, 0xBD8B25A3, 0x611DF344, 0x4ED3AE29, 0x63564390, 0xA4863FE6,
    0x6C14CFF9, 0x9BC453FE, 0xC499C26E, 0x6170FF9C, 0xE48C3FE7, 0x7C370FF9, 0x9F8F1992,
    0x8C849E44, 0x67A8D02D, 0x1CE9814E, 0xE7A2286A, 0x3B4EE814, 0xE288F8EE, 0xB7D8DA37,
    0xA8B9230A, 0xFF3A4E97, 0x3FE9E27C, 0x8FFA8454, 0x59C6A411, 0x96A3A984, 0x32AAC6EA,
    0x11AA48D2, 0xEB2154FF, 0x9AD4AA3F, 0x05558AE2, 0x973FD1F6, 0x260B3A66, 0x6BF3FCBF,
    0xE3FEC3B0, 0xFCC72A8B, 0xE838CE63, 0x2DE8A84C, 0x0A9768A1, 0xA3222C50, 0xA2D8149F,
    0xDBA9E6FA, 0xB7C5FAA2, 0xEE2238FF, 0xAB94483F, 0xA4629C2D, 0xDE378FFB, 0x1F6B9778,
    0x8A065527, 0x2300CC47, 0xEA9CB38D, 0x5E310A52, 0x6EA1E479, 0xCCA30CC7, 0x7C14513F,
    0x2E70B72E, 0xB63FF0A1, 0x20CFFC34, 0x6A8C1F10, 0xCBAF1418, 0xEEF081AE, 0xB482DA4A,
    0x2E2C1270, 0xD4A308A3, 0xFBFD565C, 0x1703C04F, 0xE5C4851C, 0x254FF122, 0x8DF95730,
    0xFCD46F77, 0x48499CCF, 0x1618714C, 0xBC71837B, 0x8B9555A6, 0x8369DA28, 0xE88986A1,
    0x28C99556, 0xB7706C13, 0xF52192DD, 0x736CDB76, 0x44FF3B2B, 0xD83FF5A3, 0xC573A14A,
    0x6B9CFAEC, 0x82C9B391, 0xFE8B2F89, 0xDA334D63, 0xD321F868, 0x32BD3B02, 0x615E70D4,
    0xE4733FF7, 0x7C384FFD, 0xDFCBD3FF, 0x35F12AAD, 0xBCFF61CF, 0x0368D9AB, 0xFF320AE3,
    0xE3B8CE28, 0x4B1304FF, 0xE355DB32, 0xBCEE3BDD, 0x852EDF73, 0x2E0892A6, 0xA5432A2C,
    0xCB7712CA, 0x6E59E9C7, 0xA9EAC8F9, 0xA9F74AC2, 0x386CF73B, 0xE2DCC947, 0x60E93AE5,
    0xB9EEBB8D, 0x3FFBB3FF, 0x8F03BCF0, 0x336E55A4, 0x4E98AF0E, 0x30B34E88, 0x160FF257,
    0x337EB7D0, 0xFF54B09D, 0xFFD8368F, 0xA818AE93, 0x3FFDE11E, 0x54AF845A, 0xBEF8A128,
    0x9EEF7B4E, 0x99234AB4, 0x9249B2D2, 0xFEFFC3EE, 0x92ACBF3F, 0x18E7B2EC, 0x442E1EDA,
    0x3AAD477F, 0x969AC0E7, 0x2F35A734, 0x5C80E221, 0x161AD6CB, 0xBD9A8FF8, 0xEAE65C81,
    0x41203FDA, 0xC359B541, 0x9CD3A91A, 0x3E94FE90, 0x5E66998D, 0x30066918, 0x739EA1A6,
    0xA61747B4, 0x9A57D7E0, 0x8D10B262, 0x722547E8, 0xC1FF0C87, 0x43FE1A8C, 0x87FC380D,
    0x0FF87613, 0x1FF0F83A, 0x3FE208D8, 0x20291864, 0x81836901, 0xF02707FA, 0x6C7C0AB0,
    0x936629AC, 0x91382D50, 0xA554DE24, 0x8700FF3C, 0x0EA3D236, 0x8BA7B473, 0xFEA2F45F,
    0x0C8D83B6, 0xC11742F5, 0xC036C6F2, 0xFE304631, 0xFC6E8DC3, 0x913A554F, 0x63E45687,
    0x84886510, 0x9A785634, 0x230D8E3E, 0x60CF12D3, 0x5A483740, 0x8890A981, 0x0922A43C,
    0x324348B9, 0x49557412, 0xB1301A84, 0x42DCB30D, 0xCB21620E, 0xB419366C, 0x93E6AA4E,
    0x20C528FF, 0x570FE168, 0x8E174234, 0x704D89A0, 0xE8650B73, 0x84A0938A, 0x68AD1F65,
    0xC2E5CF1A, 0x03F8A41C, 0x1040602D, 0x1681F450, 0x22C55041, 0xD10DA170, 0xB19683F8,
    0x951FA4F4, 0xD6511559, 0xC9831FC2, 0x335C3945, 0x24E42F8B, 0x05897227, 0x19E27E09,
    0x0F66C107, 0x2C87C8B1, 0x3DC1F9C7, 0x291F62C0, 0x4C36C581, 0xD8514A89, 0x04D705E6,
    0x00004040, 0x00000000

  EW_BITMAPS_TABLE( Appinput_faultsmall )
    EW_BITMAP( Appinput_faultsmall, Default )
EW_END_OF_BITMAP_RES( Appinput_faultsmall )

/* Table with links to derived variants of the bitmap resource : 'App::input_faultsmall' */
EW_RES_WITHOUT_VARIANTS( Appinput_faultsmall )

/* Bitmap resource : 'App::input_routing_acksmall' */
EW_DEFINE_BITMAP_RES( Appinput_routing_acksmall )
  EW_BITMAP_FRAMES( Appinput_routing_acksmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_routing_acksmall, Default )    /* ratio 51.36 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0xBCF6A07F, 0x95F127C2, 0x6C865433,
    0x285531C1, 0x388205D6, 0xF4127A07, 0x442A05AA, 0x22956EB7, 0x28DF8B54, 0x85FEB340,
    0x294B13EA, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x3F289FF5, 0xCA2D574D,
    0xCC54EFD5, 0xC102A464, 0x20D0420A, 0x45419FC2, 0x2FE591FD, 0x57BB576B, 0xABBDE6B7,
    0xBD5FAF17, 0x52AA315F, 0x4A5B2B84, 0x15502357, 0x686585B2, 0x237CBFD1, 0x990C9DEF,
    0x4DCBDF72, 0x8555D28F, 0x949E5728, 0xAD268F10, 0x65B31A4C, 0x3F51A5C9, 0x14318B95,
    0xE72D6858, 0x4A47FEA5, 0x8753D250, 0xDAFE4D6C, 0xA4A254D4, 0xFAF52EB1, 0x30134B47,
    0x1F91C6E2, 0x393CBE2F, 0x9FD0E573, 0xE9A59F3F, 0x4D43ED17, 0x5569E53B, 0x5CECE38F,
    0xDBFD86A3, 0xBFDBED46, 0xA16E8B54, 0xE9343A7C, 0xFECD6432, 0x0FFF9B85, 0xF4F97D9C,
    0xA7FFE9C9, 0xFDFF1C9F, 0x5FE7FDFD, 0xF814DE80, 0x1E0838CF, 0xC9336098, 0x294FF33C,
    0x11E66488, 0x55296056, 0x054D6BA1, 0xE53A1C37, 0x364FF3A8, 0xCFF374D1, 0x06E88829,
    0xFCE38297, 0xFF8ACCA3, 0x3FE2E144, 0xDE38C46D, 0x6808DB36, 0xA6088063, 0xFF8ECB38,
    0x3FE3E0F8, 0x4FF90481, 0xF8A24437, 0x1C9C2D8F, 0xC473D1C7, 0x3FCCC2C8, 0xE5193E4D,
    0x12D0C53F, 0x84D837DF, 0x5C3BCFF3, 0x2F4CB3FE, 0x48888CD1, 0x62B4FF2D, 0xA4463FE6,
    0x6C268FF9, 0x9BC6C3FE, 0xE7218CFF, 0x49D48E3F, 0x3A759DA7, 0x7C21CFF2, 0x5062F8B6,
    0xE821A1EA, 0xFA14743F, 0xFE88274F, 0x1F2EDC13, 0x2D8C83FD, 0x8E93FCD0, 0x5A4E1E39,
    0x9E92A529, 0xED3BA1E3, 0x3C8FF3B8, 0x8DF3FEA0, 0x63FCE236, 0xFCB421CA, 0xFFAAC693,
    0x3FEAE018, 0x0FFAC449, 0x33FEB40B, 0x14FFADC0, 0x043FEBA0, 0xAFABCAF4, 0x0FF012BD,
    0x43FEC403, 0x88FFB1C6, 0xC2AFECA0, 0x3FECE11E, 0x264244AB, 0x9230AB47, 0x60B33FCB,
    0xDBB65D62, 0x2F8FFB6A, 0x8FF31CAA, 0xF3A0E339, 0xDE983A0F, 0x3F788A12, 0x206416E9,
    0xC02ABEAD, 0x2BCCFFBC, 0xAEF4BD40, 0x253FEFA0, 0xAD6B3BF4, 0xCFFC041A, 0x43FF040B,
    0xC8FFC1C1, 0x153FF0A0, 0x304FFC34, 0x4B73FF10, 0x5A34C127, 0x311E2819, 0xE7348C03,
    0x3FCE939A, 0x8C4294BA, 0xFBB51E57, 0xFF28210F, 0xFFCAC4A3, 0x3FF2E1C8, 0xB0CCC46B,
    0xFCD493C3, 0xFF38254F, 0x30CEC983, 0xCFCAFCCB, 0xCB6CB32A, 0x6140FFD0, 0xDA4590F4,
    0xA6C5B142, 0x271C4861, 0x8A32E1D6, 0x65CD4A30, 0xFE79C995, 0x36D6CBC3, 0x3FCE07DA,
    0xE3DD8444, 0xFD94618F, 0xFF681D4F, 0xFFDAC5E3, 0x3FF6E1E4, 0x0FFDC452, 0x33FF741F,
    0x4CFFDDC5, 0x4B91F7A3, 0x53F4D77B, 0x9E2288B9, 0x988E2136, 0x9D556E88, 0xFFE2CCB8,
    0x3FF8E1E0, 0x8FFE44DC, 0xF3FF9436, 0x20FFE5C3, 0xBD3FF9A0, 0x35CFFE74, 0xBA1E7FA0,
    0x43FFA435, 0x54FF35BA, 0xD7E8BAA3, 0xEBCE23FC, 0xE13DF712, 0x82C94DDF, 0x62922F89,
    0xDA334D6A, 0x3FDB988C, 0xC9C80627, 0x1D94FFF0, 0x24663FC6, 0xCC114FFF, 0xDEBCDF2F,
    0xE008DCD3, 0x6F5203F4, 0x73159223, 0xC0EE3B64, 0x3FCC82B8, 0xFE1F7FDD, 0x3324B1C3,
    0xBDE6355E, 0xFF3BCEE3, 0xA44BB324, 0x1EA228A9, 0xE816098E, 0xE3F63FCD, 0x01FE606F,
    0xFFBD6FF6, 0x91E00BD5, 0x8F3D9138, 0x6116E324, 0xD83A475A, 0x32050FF1, 0x5C0D81D0,
    0xF1E03FE0, 0x2A7C780E, 0x46D8DF54, 0x08B1548A, 0x804F485C, 0x08A0FC00, 0xFDC24843,
    0xAB51AF60, 0x68B5C468, 0xB4E589B1, 0xFC2F3890, 0x45C42AC5, 0x6EE473AE, 0x85C0FF1D,
    0x8893CEE0, 0x87EFFDF9, 0x08E20420, 0x02B13885, 0x1834C6B6, 0x803348C3, 0x9C74BD11,
    0x30BA8703, 0x0378C8C5, 0xE7D512BC, 0xA20C253E, 0xC5B88716, 0x16A3FD1C, 0x1E04E42F,
    0xD20F8156, 0xC376C854, 0xBC9245A9, 0xB4AAB562, 0x40CC1FE7, 0xF3EA3386, 0x91652D0D,
    0x91C4788B, 0x0C945238, 0x1407C461, 0x3E456882, 0x48865106, 0xB38A8348, 0xCD150CA9,
    0xA9F8A642, 0x841E8387, 0x49243FE4, 0xD24E0EC9, 0x248C9592, 0x41E93726, 0x29220C52,
    0x25C35089, 0x5B9661B6, 0x642C41C8, 0x4EED2449, 0x4A554AC3, 0xA08314A6, 0xD15C3F85,
    0x82385D08, 0xCDC13626, 0x9811942D, 0x95D2AE56, 0x6B0A6CBE, 0x448A9958, 0xA41CC2E4,
    0x602D03F8, 0xF4501040, 0x80411681, 0xE34436A4, 0xF302618F, 0x0BD4BF9A, 0x8FE16B2C,
    0x1CA2E4C1, 0x17C599AE, 0xB9139272, 0x3F0482C4, 0x60860CF1, 0xE45887B3, 0x89AA9B03,
    0x025255A7, 0x73D07D8B, 0xA5B4B41B, 0x02F36C28, 0x20200272, 0x00000000

  EW_BITMAPS_TABLE( Appinput_routing_acksmall )
    EW_BITMAP( Appinput_routing_acksmall, Default )
EW_END_OF_BITMAP_RES( Appinput_routing_acksmall )

/* Table with links to derived variants of the bitmap resource : 'App::input_routing_acksmall' */
EW_RES_WITHOUT_VARIANTS( Appinput_routing_acksmall )

/* Bitmap resource : 'App::input_silencesmall' */
EW_DEFINE_BITMAP_RES( Appinput_silencesmall )
  EW_BITMAP_FRAMES( Appinput_silencesmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appinput_silencesmall, Default )        /* ratio 50.56 % */
    0x1C080100, 0x9FD3F028, 0x154A1057, 0x1405859A, 0x3EC2589F, 0x6F3579E9, 0xFF591F94,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0xBCF6A07F, 0x95F127C2, 0x6C865433,
    0x285531C1, 0x388205D6, 0xF4127A07, 0x442A05AA, 0x22956EB7, 0x28DF8B54, 0x85FEB340,
    0x294B13EA, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x3F289FF5, 0xCA2D574D,
    0xCC54EFD5, 0xC102A464, 0x20D0420A, 0x45419FC2, 0x2FE591FD, 0x57BB576B, 0xABBDE6B7,
    0xBD5FAF17, 0x52AA315F, 0x4A5B2B84, 0x15502357, 0x686585B2, 0x237CBFD1, 0x990C9DEF,
    0x4DCBDF72, 0x8555D28F, 0x949E5728, 0xAD268F10, 0x65B31A4C, 0x3F51A5C9, 0x14318B95,
    0xE72D6858, 0x4A47FEA5, 0x8753D250, 0xFD664D6C, 0x5D23958F, 0x0A6D6CFF, 0x2756EFF6,
    0x278FC561, 0xB99C6E47, 0xA3CBE6F2, 0x5CAE9F43, 0xFF5F2596, 0x38E3D65A, 0x61A8D73B,
    0xFB51B6FF, 0xA2D52FF6, 0x9A9F285B, 0x1B0E0DD5, 0xD8ED7FB9, 0x6EDF83B5, 0xF5FB7D7E,
    0xC767CFE9, 0xFFB69FFF, 0xA023ACFF, 0x47DE047E, 0x80D53720, 0xDC53D5E3, 0x52960551,
    0x54D6BA0F, 0xF2F4972C, 0xA8E53A0F, 0xD1364FF3, 0x29CFF374, 0x4A86E888, 0x339CFF6E,
    0xA4EE868E, 0x067E6058, 0x8BCDB81A, 0xE320D4FF, 0xF8D4573F, 0xFE3833CF, 0x2B3B1FC3,
    0x82A087CE, 0x0FF47D81, 0xF3009A2D, 0x30B2310F, 0x4B926473, 0x2D0C592A, 0x0DF3FCCD,
    0xF3FCE136, 0x2CFF95CE, 0xE5344BD3, 0x3AE3A611, 0x4EE8A5F3, 0xA7FE648F, 0xA4313FCD,
    0x6C004FF9, 0x9BC253FE, 0xE7224CFF, 0x79D4EA3F, 0x955E8260, 0xB6320FF4, 0x3A4FF340,
    0xA80868E6, 0x79FE81A0, 0x8CED8A0E, 0x52A2CF29, 0x3FCE236A, 0xCB822CAA, 0x4A54E63F,
    0xFE3B81A6, 0xFEA6CE43, 0x0C669801, 0xAA140CFF, 0x6010FF40, 0xA4553FEA, 0xD93661BA,
    0x308CA3FC, 0xD279E4CE, 0xF2E48C2A, 0xFC982CCF, 0xBBAE6B72, 0x2A8BEAEA, 0x0E3A50C7,
    0x7A16173A, 0x79E0284B, 0xFF2B07E2, 0x3FECE1E8, 0x264B44D2, 0x13FED433, 0xB6ABB5C7,
    0x00A8E9FA, 0x022DEB70, 0xC873FEE0, 0x50B4FFB8, 0xF4A2A802, 0xA0655271, 0x300CC478,
    0xCE9B14D2, 0x4294BA3F, 0xFCFFAC8C, 0xFC28DBA4, 0xBFC3E3FE, 0xF02344FF, 0xFC14D53F,
    0xFF08110F, 0x9DC2CB13, 0xA8ADB99E, 0x2E0A9310, 0x620CFF02, 0x6C233FF1, 0xEB82C270,
    0x90E1269A, 0xCB8AE89C, 0x3285C828, 0x24A95597, 0x9D81A932, 0x128FFCB4, 0xC423FF30,
    0x6278FFCC, 0x99FD8EB3, 0x119AA689, 0xC4EA2B77, 0xF19C5F15, 0xAC76E9C6, 0x88B9535A,
    0x1D369E02, 0x6E88987E, 0x72BCA555, 0xD973027E, 0x90FFD5C2, 0xD2B435A0, 0xC3F3A81A,
    0x0FFCF6A4, 0x820F16D0, 0x36F8C6B1, 0xB23FF478, 0xA0DD8260, 0xCCD358FF, 0x96E9B899,
    0xE4C97A32, 0xA1CD332D, 0x28128DF4, 0xC473FCA0, 0x6338FFE0, 0x833BC378, 0xE1CFF62A,
    0x3FF8E216, 0x02B08028, 0x8DB642C7, 0x20AE301D, 0x9AE60FF3, 0x304FFE73, 0x5E1324B1,
    0xE3BDE435, 0x24FF3BCE, 0x9B9F8BB3, 0x3FCA91F0, 0x4FFEC459, 0xCCE3B42D, 0xE4AFA663,
    0xBC148FFE, 0xEFCD83FF, 0x2A2B7B89, 0x33FC019B, 0x2AAEF1C4, 0xAE3FCCA3, 0xD154D298,
    0x0B732642, 0xC3A4EB97, 0x5BD7F563, 0xF0F6A01F, 0x3FCF03BC, 0xE523CA8B, 0x9794E336,
    0xA4E27A08, 0xF98B297F, 0xE23EE379, 0xC11B7760, 0x61E4FFFC, 0x1A769D3F, 0x1CE523F8,
    0xAD88D2AD, 0x9184D8B4, 0x01403802, 0xAB17E3FE, 0xC6399608, 0x993F8E71, 0xC0FF1D63,
    0x03CAD285, 0x839D3A14, 0x1F5A6247, 0xA2F3E67E, 0x0683FC6D, 0x1007FC20, 0x8630A846,
    0x2D4349D5, 0xA0FECFCA, 0xB4C9B6A7, 0x00CD230B, 0x050C34C6, 0xE2985D41, 0xCA695F5E,
    0x22637488, 0x8528A914, 0x8090241B, 0x228CD820, 0x40538A6A, 0x3D0AD324, 0xAC3C09C2,
    0x79A41F02, 0x542CDB50, 0x89184E0B, 0xCF595537, 0x8DA1C03F, 0x1C839CF7, 0x1862FAF3,
    0x322258C1, 0x638CB18A, 0xD71A234C, 0x11134678, 0x58AE184B, 0x913A3FC6, 0x63E45687,
    0x84886510, 0x9A787234, 0x4825563E, 0x60E0A8A9, 0x48483526, 0x8890A979, 0x0922A43C,
    0x324348B9, 0x49555272, 0xB1301A84, 0x42DCB30D, 0xCB21620E, 0xB1E9366C, 0x32ADAE4E,
    0x2D0418A5, 0x468AE1FC, 0x3411C2E8, 0x6E6E09B1, 0x71208CA1, 0xF49E93F2, 0x564E6AE3,
    0xC2E59499, 0x03F8A41C, 0x1040602D, 0x1681F450, 0x2E148841, 0x7F1A21B4, 0xAF963160,
    0x42DAE594, 0x0C7F0B59, 0x70E51726, 0x90BE2CCD, 0x25C89C93, 0x89F82416, 0x9B042467,
    0x1F22C43D, 0x69A70CC9, 0x7D8B0252, 0xA51B7390, 0x6C28A53C, 0x026A82F3, 0x00002020,
    0x00000000

  EW_BITMAPS_TABLE( Appinput_silencesmall )
    EW_BITMAP( Appinput_silencesmall, Default )
EW_END_OF_BITMAP_RES( Appinput_silencesmall )

/* Table with links to derived variants of the bitmap resource : 'App::input_silencesmall' */
EW_RES_WITHOUT_VARIANTS( Appinput_silencesmall )

/* Bitmap resource : 'App::pirsmall' */
EW_DEFINE_BITMAP_RES( Apppirsmall )
  EW_BITMAP_FRAMES( Apppirsmall, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 2, 20, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Apppirsmall, Default )                  /* ratio 53.92 % */
    0x1C080100, 0xA3CDF028, 0x4CE61057, 0xCD25856A, 0xCCC25322, 0x8F352A24, 0xFF54230D,
    0x98D4622C, 0x8DC762F1, 0x0C8A391E, 0xC9A41249, 0x9912687F, 0xA26677C2, 0x5E963B33,
    0xC90371C1, 0x388205D4, 0x4469AE07, 0x4A9DC5AA, 0x89CD6EAE, 0x1B9F8AC4, 0xA9FEA947,
    0x294A7459, 0x974DA753, 0x152A7D46, 0x58AAD5AA, 0xCA9D6AA9, 0x8F1ADFF5, 0xEAC12E79,
    0xAB126747, 0xA11A6D64, 0x20D0420A, 0x6F403B42, 0x2FEB51B1, 0x56BB576B, 0x039536BF,
    0x38BFD549, 0x5E02AD7D, 0x244E4FF5, 0xE23173C2, 0xABD5BC5D, 0x60963D47, 0xE8A36B65,
    0x0C8508D4, 0x7C65170D, 0xBF5F29F7, 0xFAB52A79, 0x3FECC767, 0xFDBADA6D, 0x9B8D86B3,
    0xB0CF64D5, 0xAE270BFD, 0xA2453FDC, 0x4485FD6E, 0x5FAB5338, 0xE2A92CFF, 0x26902FF5,
    0x1F1B5758, 0xCF0FE54D, 0x1C7958A5, 0x3CB612A2, 0x69A6E779, 0x76833231, 0x6933DFED,
    0xFABB21DD, 0x6B9B2D97, 0xFDCCE171, 0xD82B251B, 0x9EC7603F, 0xEE3723FD, 0xA3463FDC,
    0x83E3FD72, 0x70383909, 0x9E83FCE4, 0xE360D77A, 0x0CBD3FCD, 0x1F758CA3, 0x2A48B579,
    0x114448D0, 0x07B20C67, 0xCE00385C, 0xFF3A0E37, 0x340CB320, 0x8A6244FF, 0x52F0FF2E,
    0xB09B880C, 0x18638BD2, 0x320C02D9, 0x49A1FCFF, 0x41DCFF2C, 0x4CD068C9, 0xE06CCDA3,
    0x871F46D8, 0x20B300B8, 0x52992985, 0x6614470F, 0xC9304FF7, 0x200FF34C, 0x4FF2C89B,
    0xF2ECA925, 0x1CDA36CF, 0xB5278858, 0x27886830, 0x4FF78A52, 0xF2DA3090, 0x8956318B,
    0x5D27C869, 0x9A0B92AE, 0xA1478DA1, 0x68520D5E, 0xFE4E32CC, 0xDF37CFF8, 0x55662804,
    0xCAF2607D, 0x33FE5193, 0xDA3C2B14, 0x562A0936, 0x938CD326, 0xCDF374DC, 0xA792827E,
    0x38CC6B8D, 0x0B690D23, 0x57D78831, 0xC8D85127, 0x7961BA28, 0x84DD37A0, 0xA0224FF3,
    0x259562D0, 0x618890A9, 0xB2FCB480, 0x14B82AE0, 0xAF278FF3, 0x1D4FF2F8, 0x0A92529D,
    0x325C7B71, 0x4CDC3728, 0xF6388E3A, 0x31CB82A9, 0x6A06369E, 0xD9D14F9D, 0x1DC02BC9,
    0x9C2D8A02, 0x52569A22, 0x8C398D89, 0x033CCD7C, 0x029BA3A2, 0x7482CC63, 0x610921D2,
    0xC76A22C0, 0x55A9198D, 0x14BF6058, 0xAE27A0B3, 0x556148AC, 0x59E922D3, 0xA36CDB60,
    0xFDF538DA, 0xD533CCA3, 0x69ABFB74, 0xCFF3661F, 0x56A8D734, 0xFABC9295, 0xFF87CC9A,
    0x3FF0C32C, 0x5DD344CC, 0xF300B329, 0x34C22E4F, 0xAD268FF3, 0x9CD8DBF8, 0x48C5E525,
    0xF8A89A53, 0x1CD935CF, 0x9B31CBE8, 0x3FEE892A, 0x6562A897, 0xC929A369, 0xDCC930CB,
    0xFF36CD8C, 0x3FDB922C, 0xABA2F4B3, 0xC20E88BB, 0x4CD19489, 0x8F874D63, 0x8B1D7B46,
    0xAF6762D4, 0xF1C1FA88, 0x3F005F88, 0xE2378DE5, 0x81CDB95C, 0x65DD3A4A, 0xC3FE5936,
    0x38C22E0A, 0xA52414D8, 0x29A212E0, 0xB7FD937E, 0x2BFEE17E, 0x1955CC6D, 0x6DDAD846,
    0x6B8D433F, 0x0C32D8A9, 0x0A1481D8, 0x114394A5, 0xF2320C16, 0x8D5DF331, 0xCAFA2094,
    0x72FEBA2E, 0x6631338C, 0x348C9C82, 0x9A0BC2C6, 0x60CD799F, 0x7E251EC0, 0x8CDF9ED8,
    0xBA8721A3, 0x99B2A30C, 0xDB686268, 0xEDE4B328, 0xB1492346, 0x41AE8B92, 0x3FF54D26,
    0xE0C346FA, 0x998CB396, 0x48D03FF2, 0xA36870D3, 0xED14DE19, 0x17EC0D8A, 0xA389E76A,
    0xFE20899E, 0xE33FFAA1, 0x3661C390, 0x8783FF4B, 0xC365E468, 0x0FA62D74, 0x56AC5C1E,
    0xC98B1289, 0x3FDDC8E0, 0xE0AC91BA, 0x1E4562AC, 0x241D586B, 0x85982881, 0xEC1065EA,
    0xF4EE308A, 0x82AC4C8F, 0x04F95544, 0x8CB3802C, 0x1A0FE972, 0x2107FBD9, 0x3E25213A,
    0xAA60CEE9, 0x74290472, 0x112A1553, 0x90D31A47, 0x8766BC4D, 0xB08CC6B8, 0xC5E8AF7A,
    0xA0B87282, 0x1FE4C43D, 0x9A05D8B0, 0xE437060A, 0xC08343FD, 0x9835C6A9, 0x310EBDC6,
    0x08885363, 0x91BA6E85, 0x90A87FAA, 0xDEA18D85, 0x0D61A83F, 0x13E21DA6, 0x0D54FAAE,
    0xDD37C2BB, 0x097D9098, 0x4488C47B, 0x0D5709E8, 0x78C61FE8, 0xA154D022, 0x4350689F,
    0xC580A262, 0x9480DE8A, 0x13A20C7F, 0xD3102BD5, 0x62956732, 0x5B7B278D, 0x682643F3,
    0x987FC0E4, 0xC0A210C1, 0xE1928507, 0x89E9868C, 0xD498DB1B, 0x0CC18F0C, 0x16829127,
    0x5E1D90C4, 0xEFA56384, 0xBE658774, 0x78D6CEFA, 0xFDEF1FA2, 0x18870CE3, 0x10AC3E45,
    0x63484487, 0xD389785A, 0x3391B03F, 0x2ACD64EF, 0x85257484, 0x252AE8BE, 0x8C914D32,
    0xB483208C, 0x6C478760, 0x90AE34A3, 0x11301E83, 0x53087E8B, 0x5AFCD799, 0x87141936,
    0x0FA3F8C3, 0x2385989A, 0x78936268, 0xD8970329, 0xD536A74C, 0xC96FBB29, 0x30B07E6E,
    0x06CE1A87, 0x21A48203, 0x43C96B11, 0x1CB1B464, 0x9D6C087F, 0x3B251500, 0x55CDD2F1,
    0xAF9F43F8, 0x1E1AC728, 0xE49C85F4, 0x108D0D44, 0xE7E60905, 0xF42C3C8A, 0x8340D014,
    0x8F914C22, 0x99547A6D, 0x3EE8D869, 0x700DB48A, 0x2F31338A, 0x02002870, 0x00000002,
    0x00000000

  EW_BITMAPS_TABLE( Apppirsmall )
    EW_BITMAP( Apppirsmall, Default )
EW_END_OF_BITMAP_RES( Apppirsmall )

/* Table with links to derived variants of the bitmap resource : 'App::pirsmall' */
EW_RES_WITHOUT_VARIANTS( Apppirsmall )

/* Bitmap resource : 'App::silenced_small' */
EW_DEFINE_BITMAP_RES( Appsilenced_small )
  EW_BITMAP_FRAMES( Appsilenced_small, Default, EW_DRIVER_VARIANT_RGBA8888, 23, 17, 0 )
    EW_BITMAP_FRAME( 2, 5, 9, 7, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appsilenced_small, Default )            /* ratio 30.69 % */
    0x1C080100, 0xC1A0B048, 0x2E090883, 0x80C2C858, 0x220760C3, 0x11407A36, 0x0900C0C2,
    0xC8DC6A33, 0x88C0E3B1, 0xBC0CD807, 0x811F7037, 0x2E16B093, 0xA3D17158, 0x053097CB,
    0x66D9980A, 0x037FC0E4, 0xC014CDFB, 0x27CF812C, 0x1D0A632D, 0x4D67703A, 0xE2052481,
    0x80337A54, 0x13207953, 0xA0BA985D, 0x419955A8, 0x8AD82A05, 0x8F88E401, 0x4CF8071A,
    0x598101A0, 0xDA8D080F, 0xC016CA64, 0xF503B752, 0xD03584ED, 0x053240CC, 0xC06192F2,
    0x065F0A37, 0xDA9A4015, 0x19640E49, 0x124F32B0, 0x98B3B1C8, 0xD2C70343, 0xB70B5CD2,
    0x37CBDBED, 0x1A765B33, 0x4EE29F80, 0xE124155B, 0xBBB38EDC, 0x50BC05BC, 0x3384007C,
    0xC6FACE37, 0xE02C91C6, 0x95A48028, 0xACB66373, 0x736F7759, 0x768F1F45, 0xBF276E8A,
    0xE338F79D, 0x6068BD43, 0x71B6DA02, 0xBBCDF6EF, 0xE800753A, 0xC018260E, 0x81C9511D,
    0x032E76FE, 0x5AA36219, 0xABA7BDA4, 0x605ECF4F, 0x7F27C4F6, 0x79C6A670, 0xA479E71F,
    0x6C41CB15, 0xF6EDFCF0, 0xDD67ADD7, 0x6044E85B, 0xA19C0EE0, 0x8F3E59C3, 0x10D201C5,
    0x99C3B19C, 0x01712A3D, 0x0602651D, 0xE774E008, 0x670C96A0, 0xC8E480F5, 0x25541754,
    0x418F00D0, 0xDC38D9C1, 0x0FCE700D, 0x90401230, 0x686DD27F, 0xCDE175A3, 0x4E58CC44,
    0x034666A0, 0xD1A04E40, 0x06A1C201, 0x458A4206, 0xFC6E6377, 0x670CF670, 0x49D6709E,
    0x26A09D8B, 0x103658C9, 0x18925305, 0x63CFC802, 0x008598A6, 0xC7395A5A, 0x900999C1,
    0x5901E6A0, 0x9711D969, 0x8FE5B5E8, 0xF1D66269, 0xB9189DCF, 0x3B4767A9, 0x00271489,
    0x8D54CD3A, 0x340C5798, 0x7A889EC0, 0x2D0ED7F4, 0x2958F34A, 0x6860A58F, 0x040504A2,
    0x00000000

  EW_BITMAPS_TABLE( Appsilenced_small )
    EW_BITMAP( Appsilenced_small, Default )
EW_END_OF_BITMAP_RES( Appsilenced_small )

/* Table with links to derived variants of the bitmap resource : 'App::silenced_small' */
EW_RES_WITHOUT_VARIANTS( Appsilenced_small )

/* Bitmap resource : 'App::smoke2small' */
EW_DEFINE_BITMAP_RES( Appsmoke2small )
  EW_BITMAP_FRAMES( Appsmoke2small, Default, EW_DRIVER_VARIANT_RGBA8888, 25, 25, 0 )
    EW_BITMAP_FRAME( 2, 1, 21, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appsmoke2small, Default )               /* ratio 37.12 % */
    0x1408FF00, 0x0CE0A730, 0xC17D0839, 0x8E2FB859, 0xE30E7CC3, 0x2FA87440, 0x72843FE2,
    0x98D4222E, 0x3EBFE311, 0x19D5FF20, 0x9C216FF9, 0x4E230F86, 0xE5B2A894, 0xE3289343,
    0x44693338, 0x26021FE0, 0xE6C44469, 0x8F46E7B1, 0xA3FE8276, 0x51A39443, 0x2919199F,
    0xE9AB87FD, 0x8F503DBF, 0x91DA9CFE, 0x118CD4AA, 0x526C99D7, 0xA42E0E70, 0xFD768D57,
    0xD3ECABA7, 0x8E3D60A8, 0x9B6FF3AC, 0xE2CA7FDB, 0x276A0BFE, 0x77AB5A6C, 0xC93318E5,
    0x8DDDAF2F, 0xF3FF02A8, 0x58DFF845, 0xFF12B1BF, 0x5FF8C7BB, 0xE961C7A7, 0xF943E3FE,
    0x0EAC556F, 0xEBF5F1F9, 0x7FE79137, 0x8BFF42F2, 0x3FF2DA44, 0xA9FFA849, 0xF5ADDD56,
    0xF51E8B3F, 0xAB67FEC8, 0x7AD93FF6, 0xBCD4474C, 0xDFDE2FB0, 0x1A15FF97, 0xF19DEFFE,
    0x9B92C57F, 0xB57CC436, 0xFFD07DEA, 0xB62E99F9, 0xC2B35920, 0x0EB61BB2, 0xE066F776,
    0x5F8911A6, 0x799BD8DC, 0x3BD293D3, 0x7DA96F5F, 0xFFF051D8, 0xAFFF9BD1, 0xDEB0FD92,
    0x7F06737B, 0x697AFFAA, 0x58969A00, 0x7739EB2C, 0x3D6181C9, 0xF63FC9D6, 0x5394C834,
    0x5DF665DD, 0x56497E70, 0x05EB85CE, 0x6B584A86, 0x87CDA3FD, 0xE223F5EB, 0x1894803F,
    0xFE282B16, 0xFF3EDD03, 0x7E0C2764, 0x1E07EA12, 0xB8D4AB58, 0xFCEF719E, 0x618EC783,
    0x6823E23D, 0xCE7739A2, 0x15099190, 0xF0FF3297, 0xB53FE4A3, 0x1C630934, 0x1BE1C1BC,
    0x62055685, 0x64E63FE5, 0xB47462A9, 0x1CDDB974, 0xCBF981D5, 0xD888FF98, 0xCE23994F,
    0x875866A2, 0x3C4FF9B4, 0xCFA3FE70, 0x16A5A79C, 0x86139421, 0x7C2ED635, 0x3924B926,
    0x5363FE80, 0x63E23F8F, 0x24EE7AE8, 0x88788FFA, 0x344FF984, 0xCD77AE90, 0x193E5FA4,
    0x356194E5, 0xF77929A2, 0x7B60E830, 0x19458496, 0xE798FF1F, 0x8E23884D, 0x1EA54BF9,
    0x9CAAE281, 0xEB23CE74, 0xAAD4903F, 0x82528C5B, 0xBC355635, 0x2DE679A2, 0xDD69EAC0,
    0xE8B25B80, 0xCDB7A99C, 0x7D4811E6, 0xB3CE03FC, 0x5833F27E, 0x71D14461, 0x06329E2B,
    0xFF215C37, 0x3FCEEA24, 0x0FFB84EC, 0x4586E421, 0x8AE0212E, 0xF2685CEB, 0xBBC8E3FC,
    0xEF22B961, 0xFBD4FE3F, 0x48E4A00F, 0x987EDD47, 0x55AB9B61, 0x8FF23E3E, 0x33FCF3AC,
    0x1543C1CD, 0x0C325605, 0xB4A4A7AF, 0xB092EE7C, 0x61E51EB5, 0x1AED9031, 0xB6AD0F8A,
    0x49946BF2, 0xD60C80FD, 0x03FF2422, 0xA8FFC9CF, 0x8673161A, 0x3A9EBB14, 0x1B9B2730,
    0xBCD49C58, 0x8B38339E, 0x1EC79244, 0xC88FE445, 0xF421DD56, 0xFD14D83F, 0x874832CF,
    0xD1D2CAD5, 0xAB8FFAFA, 0xCA9698A0, 0x62AB4DD4, 0x597E69B5, 0xE75F9BB4, 0xA0E91A3E,
    0xF623191E, 0xF39A597A, 0x1D7E4851, 0xF93FC978, 0x284FFDB4, 0x9E0D6370, 0x5D727945,
    0x188195AE, 0x37DECC85, 0x5F992CE7, 0xF823721D, 0x22BAF23F, 0x96FD9537, 0x61E1ED94,
    0xD34B66D5, 0x33AE44C7, 0xFB6F1E5B, 0xCF982F4F, 0x1BCF1425, 0xE7130CF9, 0xF243FF88,
    0xF3DA9E22, 0x6BA8340F, 0x24E8175E, 0xE31B889A, 0x5116673D, 0x65FBAC31, 0x0CFF2AB5,
    0x7EBE8E79, 0xEFE33EC0, 0x8D1445C1, 0x84603D49, 0x5556ED4E, 0xCC2C8FFB, 0xF3CA53FF,
    0x71EE87BE, 0xA444F344, 0xBC044D85, 0x1111FDA1, 0x4C511309, 0xBE26ECFC, 0xD943E4EC,
    0xF72C3F55, 0xE33F5183, 0xF87ED943, 0x7EEFC3E5, 0xBF0D18FC, 0x213616D0, 0x00001010,
    0x00000000

  EW_BITMAPS_TABLE( Appsmoke2small )
    EW_BITMAP( Appsmoke2small, Default )
EW_END_OF_BITMAP_RES( Appsmoke2small )

/* Table with links to derived variants of the bitmap resource : 'App::smoke2small' */
EW_RES_WITHOUT_VARIANTS( Appsmoke2small )

/* Bitmap resource : 'App::meshunit_fill' */
EW_DEFINE_BITMAP_RES( Appmeshunit_fill )
  EW_BITMAP_FRAMES( Appmeshunit_fill, Default, EW_DRIVER_VARIANT_ALPHA8, 278, 23, 0 )
    EW_BITMAP_FRAME( 6, 0, 266, 23, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appmeshunit_fill, Default )             /* ratio 2.88 % */
    0x14080100, 0xC19FE278, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2,
    0x788C6A33, 0x0047A062, 0x1C6C3E56, 0xC9A4B249, 0xAA532893, 0xCAC1F924, 0x632B0047,
    0xB3499CCA, 0x1E934DA6, 0xC9DCDCAD, 0x9FCFA7B3, 0x04C25D24, 0xD1A8B44A, 0x22053BA3,
    0xA9B4CA5D, 0x44008A53, 0xB54A9D3E, 0x56A951EA, 0xCADD6AB3, 0xAFD7ABB5, 0x1D8AC360,
    0xD9ACB64B, 0xAAD368B3, 0xADB6CB5D, 0xE370B7DB, 0xB74B9DCA, 0x78BBDDAE, 0x8BDDE659,
    0xBE50C3F7, 0x0D2AE580, 0x40ADF84C, 0xA713859D, 0xB1583A15, 0x432FB163, 0xB5CC9E3E,
    0x94824BE5, 0xE8ED5333, 0x00002031, 0x00000000

  EW_BITMAPS_TABLE( Appmeshunit_fill )
    EW_BITMAP( Appmeshunit_fill, Default )
EW_END_OF_BITMAP_RES( Appmeshunit_fill )

/* Table with links to derived variants of the bitmap resource : 'App::meshunit_fill' */
EW_RES_WITHOUT_VARIANTS( Appmeshunit_fill )

/* Bitmap resource : 'App::meshunit_outline' */
EW_DEFINE_BITMAP_RES( Appmeshunit_outline )
  EW_BITMAP_FRAMES( Appmeshunit_outline, Default, EW_DRIVER_VARIANT_RGBA8888, 290, 25, 0 )
    EW_BITMAP_FRAME( 15, 23, 270, 2, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appmeshunit_outline, Default )          /* ratio 3.56 % */
    0x1C080100, 0x4160B048, 0x61FF083A, 0xDFE180D8, 0x12FF8787, 0x0FF04834, 0x037FC582,
    0x08D40A31, 0x8CC7A380, 0xEC863720, 0xC8A3F238, 0x9A512493, 0xA572C94C, 0x553092CB,
    0xF3396CC6, 0x349BCCA5, 0xC9CCDA71, 0x9ACFA773, 0xED067540, 0xD0A7F439, 0x1A9144A3,
    0xA974CA4D, 0x9550A2D3, 0xF53A6D46, 0x54ABD4A9, 0xCACD5AB1, 0xAAD7AB75, 0xED86B560,
    0xD8ABF63A, 0x9AD164B3, 0xA3D6CB4D, 0x2F150845, 0xA178A44A, 0x1E0DBFEE, 0xC42BFC36,
    0xBFC1A397, 0x1E0B0380, 0x8FB0584C, 0x5EDC3E20, 0xC422410C, 0xE390043F, 0x608C85C2,
    0x98B2E5AD, 0xBB6E66D5, 0xCFE6B2F9, 0x0E7B419C, 0xE9B47A4D, 0xA745A8CE, 0xB4FABD2E,
    0x61ACD7EA, 0x7B4D8EBB, 0xB8D6EDB6, 0x2B7D1765, 0xCA8331F9, 0x04343818, 0xF1648040,
    0xFB92077F, 0xB9BCCC2D, 0xA2188373, 0x449256F7, 0x51293FC9, 0xCE7F2CA4, 0xEFF7BBBD,
    0x1F8BC3E0, 0xF9BCBE4F, 0xABD3E8F3, 0xBDBECF5F, 0xE3F0F7FB, 0xBF4F9FCB, 0xF8FBFDBE,
    0x4EEFEBF3, 0x7FA51249, 0x84211442, 0x303D956F, 0x38FF03C1, 0xFB76E0A2, 0x05010001,
    0x57083D70, 0xF0A4280A, 0x709E270F, 0x1C8360C2, 0x87E1E876, 0xE2288620, 0x68962488,
    0xA62889E2, 0x2C8AE2A8, 0x1344A73A, 0x2066F1D6, 0x961E1D82, 0x398C6F18, 0x3C8EE2D6,
    0x8FE3E8F6, 0xE4290640, 0x69164490, 0x49F791E4, 0x08768551, 0x729C86FC, 0xC74421F6,
    0xA861C747, 0x66589221, 0x5C96E5A9, 0x97E5E976, 0x26298660, 0x52C8B57C, 0x645A3FCB,
    0xC74605A1, 0x86C855F1, 0x10D42DEA, 0x3769D86F, 0xE6789DE6, 0x7C9EE7A9, 0x9FE7E9F6,
    0x4735FE80, 0x163C731C, 0xC97A5E19, 0xFFA2C167, 0x8E820084, 0xE92A4681, 0x6A5694A4,
    0x6698A5E9, 0x2C0A580A, 0x05D75858, 0xD737A670, 0xA85A9C3F, 0xA6A8A9E9, 0xACAAEAAA,
    0x7B2AEAB6, 0x1F2A8DC7, 0x6ABDBC6F, 0xE6B8ADEB, 0xBCAEEBAA, 0x45EB4966, 0x595A19F5,
    0x6B16C4AF, 0x26C8B1EC, 0x1277ACAB, 0x48EC16F6, 0xED2B46CB, 0x6B56D4B4, 0xAD949F2D,
    0xD7B69F24, 0xB7EDEB76, 0x6E2B86E0, 0x74CAB583, 0x7EA1A95C, 0xECB8EDC7, 0xBBEEEBB6,
    0x6E5BC6F0, 0x0A9A1457, 0xE6F1BADE, 0xFCBEEFAB, 0xB36AEBF6, 0xF02045BC, 0xF739C753,
    0x26FE5C2B, 0x0CC2F0AC, 0xC0262C37, 0xF122DD17, 0x60AD7D5E, 0x0F054FF1, 0xC3936A36,
    0xC7F1EC3A, 0x722C8720, 0x34471C88, 0xB800BA51, 0x2EB0B2A1, 0xA2D05BCD, 0x1C242816,
    0x6CD723CA, 0xE738CDF3, 0x0171D82C, 0x40F34CF4, 0x72C23A0A, 0x25FA7549, 0x0C418027,
    0x3A7FDFD8, 0xD3F4ED37, 0x8A5BFB50, 0x8CB0A529, 0x4106CFE8, 0x0052F5A2, 0x090F5948,
    0xF4809026, 0x6D975180, 0x4768D9F6, 0x2709325B, 0xD626ED88, 0xB7211581, 0xFDD4524B,
    0x4378374F, 0x253D6362, 0xDA5D68BF, 0xF82E0780, 0x56F293E0, 0xFC3E0FF2, 0x97613700,
    0x71D2FE34, 0xC0D37778, 0x32879430, 0xA5BC3E23, 0x9CE126B9, 0xE7F9EE77, 0x4751CE41,
    0xD475C4A1, 0xACFF0073, 0xCDE2FAA2, 0x00133B35, 0xC9D02B91, 0x404489EC, 0xD4F20441,
    0xA4A0DC7A, 0xEFFBEE83, 0xDEBF07C0, 0x4E6B55D4, 0x480E3FE0, 0x8C3FC0E0, 0x773ACF34,
    0x5054EF7E, 0x631C02E4, 0x003D147D, 0x203943D1, 0xB651DC65, 0xEF393B86, 0x5F95BA6D,
    0x9BE76E5B, 0xECFA7E4F, 0xFA3EEFAF, 0xFF0FABEF, 0xDFD7F2FC, 0xDBF7FD3E, 0xFCFE7F1F,
    0x497FEFEF, 0x004DEB07, 0x082733A3, 0x2580C455, 0xFED8D7AB, 0x21B136C1, 0x5BAA714E,
    0xC3BEF3C5, 0x8F4A0A85, 0x81DB9130, 0xB471C094, 0x64C07C87, 0xFE1F1914, 0x11BFA7FE,
    0x2884B09A, 0x5509DFEC, 0xB2124298, 0x8C2E85F0, 0xD8650AE1, 0xB0DA19C2, 0x61843886,
    0xAA380259, 0x2F25DD4F, 0x7E937B14, 0x9705C82A, 0x00000404, 0x00000000

  EW_BITMAPS_TABLE( Appmeshunit_outline )
    EW_BITMAP( Appmeshunit_outline, Default )
EW_END_OF_BITMAP_RES( Appmeshunit_outline )

/* Table with links to derived variants of the bitmap resource : 'App::meshunit_outline' */
EW_RES_WITHOUT_VARIANTS( Appmeshunit_outline )

/* Bitmap resource : 'App::meshunit_outline_thin' */
EW_DEFINE_BITMAP_RES( Appmeshunit_outline_thin )
  EW_BITMAP_FRAMES( Appmeshunit_outline_thin, Default, EW_DRIVER_VARIANT_RGBA8888, 290, 25, 0 )
    EW_BITMAP_FRAME( 15, 24, 270, 1, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( Appmeshunit_outline_thin, Default )     /* ratio 2.90 % */
    0x1C080100, 0x4160B048, 0x0DFF082B, 0x5FF02854, 0xFE090682, 0x10C89841, 0x0B8BC540,
    0x68D43633, 0x8DC62391, 0xFC863B20, 0xC924B228, 0x8E531E93, 0x25926954, 0x5B3095CA,
    0xB3297CC6, 0x2E9BCD26, 0x69D4CE73, 0x9DCE2793, 0xFD067B40, 0xD128B429, 0x0E933EA3,
    0x29946A55, 0x9B50A5D2, 0xB52A7D46, 0x4EABD52A, 0x6AD54EB3, 0xADD62B95, 0xFD86BB60,
    0xCDECB62A, 0x52241089, 0x23D1187C, 0x0D152B42, 0xB74B9DCA, 0x06BBDDAE, 0xE39DE957,
    0x21104851, 0x1E0AF099, 0xE1B0B84C, 0x2B1388C3, 0xB1B8CC5E, 0x2390C7E3, 0xB94C9E4B,
    0x98CBE5B2, 0xCCDE6B33, 0xCFE7B3B9, 0x1E8B43A0, 0x602FD82D, 0xF1577A8F, 0x91976D25,
    0xDF0B3F6B, 0x4592D3FE, 0xA65296CB, 0xCD60FD4A, 0xDFEFB7BB, 0x1F0B83C0, 0xF1B8BC4E,
    0x2B93C8E3, 0x323CCE5F, 0x6DB4DD6E, 0x9AE85ECB, 0xA9DEEC11, 0x00246545, 0x3A9CCC80,
    0x1F346273, 0xF9BCBE4F, 0xABD3E8F3, 0xBDBECF5F, 0xBFBDF7FB, 0x9DC00787, 0xBDECC2CC,
    0xBB46C9FF, 0xFFFFBE02, 0xE0280600, 0x68160480, 0xF20881E0, 0x2174DFC6, 0x83C85675,
    0x00842CCF, 0x90EC0803, 0x661885E0, 0x1C86E1A8, 0x87E1E876, 0x61361A20, 0x583D0B85,
    0x319B8448, 0x1D73D168, 0x8BE2E884, 0xE328C630, 0x68D6348C, 0xC62C5DA3, 0xFF67D096,
    0x1F23E100, 0xE4290637, 0x69164490, 0x7A4891E4, 0x401023E6, 0x8F59B836, 0xE4910A3E,
    0x69565494, 0x665895E5, 0x5292E089, 0x9419A93A, 0xE5A08C40, 0x69966498, 0xA66899E6,
    0x6292D909, 0x5C59997A, 0xE729C66A, 0x69D6749C, 0x7E7090E7, 0x7C9EE779, 0x9FE7E9F6,
    0xE7979E80, 0x6A16819B, 0x2688A1E8, 0x1862E8AA, 0x0A4FF771, 0x2830A42C, 0x6A2E9363,
    0x6698A5E9, 0x1598E9AA, 0x0A52E3C1, 0xE8CA4828, 0x6A96A4A6, 0x86A8A9EA, 0xAC044FF8,
    0xA39493BA, 0x66D98187, 0x6AD6B4AA, 0x06B8ADEB, 0xB742E6C7, 0x898EEAF4, 0x2C20ACFF,
    0x060AB04E, 0x26B99766, 0xCCB2ECAB, 0x97187B36, 0x972AED0B, 0x83FED41B, 0xA127B5C0,
    0x4B436955, 0xB7ECE936, 0x6E2B86E0, 0xEB46DDAA, 0x3974ACE3, 0xD8B5AEA2, 0x1445247A,
    0xE2A5C452, 0x6B8E393F, 0xE6F8BDEF, 0x16BD671B, 0x241858A9, 0x80051300, 0x345A2889,
    0x26FA85A2, 0x0CC2F0AC, 0x89707907, 0xC4563210, 0x614927C4, 0x25FAA0F1, 0x1CC35FC4,
    0xC7F1EC77, 0xA3B82DFF, 0x625D899B, 0x15293F72, 0x1B7E102B, 0x789F27D5, 0xF32CC720,
    0xF6B334CC, 0xDDDD7D32, 0x937697A7, 0x04014041, 0x5054C728, 0x9BF5D775, 0xE5B77450,
    0x4CCD5BB6, 0xD3F4ED37, 0x03F73D73, 0x8D12F3D2, 0x284D1299, 0x4140CF91, 0x6A574497,
    0x5A6499AB, 0x6D975060, 0x8F1DD9F6, 0x9C5EDA8D, 0x3D36E171, 0xD854735C, 0xA5B10BBC,
    0xE55E5A56, 0x66DE963D, 0xDFD64DF1, 0xF7BE077E, 0x0E137DE0, 0x1782E1B8, 0x8BE1F8AE,
    0xE3F8CE27, 0xF88E478E, 0x0E538DE4, 0x5792E5B9, 0x9BE5F9AE, 0x40CFE4B3, 0x0F740CFC,
    0x25A0E55A, 0xB8E05B0E, 0x6E68B235, 0x40CEF173, 0x4FD40B5B, 0x00000040, 0x00000000

  EW_BITMAPS_TABLE( Appmeshunit_outline_thin )
    EW_BITMAP( Appmeshunit_outline_thin, Default )
EW_END_OF_BITMAP_RES( Appmeshunit_outline_thin )

/* Table with links to derived variants of the bitmap resource : 'App::meshunit_outline_thin' */
EW_RES_WITHOUT_VARIANTS( Appmeshunit_outline_thin )

/* Initializer for the class 'App::UnitNumber' */
void AppUnitNumber__Init( AppUnitNumber _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  XObject__Init( &_this->_Super, aLink, aArg );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppUnitNumber );
}

/* Re-Initializer for the class 'App::UnitNumber' */
void AppUnitNumber__ReInit( AppUnitNumber _this )
{
  /* At first re-initialize the super class ... */
  XObject__ReInit( &_this->_Super );
}

/* Finalizer method for the class 'App::UnitNumber' */
void AppUnitNumber__Done( AppUnitNumber _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppUnitNumber );

  /* Don't forget to deinitialize the super class ... */
  XObject__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::UnitNumber' */
void AppUnitNumber__Mark( AppUnitNumber _this )
{
  /* Give the super class a chance to mark its objects and references */
  XObject__Mark( &_this->_Super );
}

/* Variants derived from the class : 'App::UnitNumber' */
EW_DEFINE_CLASS_VARIANTS( AppUnitNumber )
EW_END_OF_CLASS_VARIANTS( AppUnitNumber )

/* Virtual Method Table (VMT) for the class : 'App::UnitNumber' */
EW_DEFINE_CLASS( AppUnitNumber, XObject, "App::UnitNumber" )
EW_END_OF_CLASS( AppUnitNumber )

/* Initializer for the class 'App::LogChoice' */
void AppLogChoice__Init( AppLogChoice _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton2, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppLogChoice );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const057C );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const057D );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const057E );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const057F 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton1, _Const0580 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton1, EwLoadString( &_Const0581 
  ));
  CoreRectView__OnSetBounds( &_this->PushButton2, _Const0582 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton2, EwLoadString( &_Const0049 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton2 ), 0 );
  _this->PushButton.OnActivate = EwNewSlot( _this, AppLogChoice_MainSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton1.OnActivate = EwNewSlot( _this, AppLogChoice_MeshSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButton2.OnActivate = EwNewSlot( _this, AppLogChoice_CancelSlot );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::LogChoice' */
void AppLogChoice__ReInit( AppLogChoice _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  WidgetSetPushButton__ReInit( &_this->PushButton );
  WidgetSetPushButton__ReInit( &_this->PushButton1 );
  WidgetSetPushButton__ReInit( &_this->PushButton2 );
}

/* Finalizer method for the class 'App::LogChoice' */
void AppLogChoice__Done( AppLogChoice _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppLogChoice );

  /* Finalize all embedded objects */
  WidgetSetPushButton__Done( &_this->PushButton );
  WidgetSetPushButton__Done( &_this->PushButton1 );
  WidgetSetPushButton__Done( &_this->PushButton2 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::LogChoice' */
void AppLogChoice__Mark( AppLogChoice _this )
{
  EwMarkObject( &_this->PushButton );
  EwMarkObject( &_this->PushButton1 );
  EwMarkObject( &_this->PushButton2 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* 'C' function for method : 'App::LogChoice.MainSlot()' */
void AppLogChoice_MainSlot( AppLogChoice _this, XObject sender )
{
  AppPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  pop = ((AppPopup)EwNewObject( AppLogPopup, 0 ));
  AppPopup_Show( pop, CoreView__GetRoot( _this ));
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::LogChoice.MeshSlot()' */
void AppLogChoice_MeshSlot( AppLogChoice _this, XObject sender )
{
  AppPopup pop;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  pop = ((AppPopup)EwNewObject( AppMeshLogPopup2, 0 ));
  AppPopup_Show( pop, CoreView__GetRoot( _this ));
  AppPopup_Hide((AppPopup)_this );
}

/* 'C' function for method : 'App::LogChoice.CancelSlot()' */
void AppLogChoice_CancelSlot( AppLogChoice _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* Variants derived from the class : 'App::LogChoice' */
EW_DEFINE_CLASS_VARIANTS( AppLogChoice )
EW_END_OF_CLASS_VARIANTS( AppLogChoice )

/* Virtual Method Table (VMT) for the class : 'App::LogChoice' */
EW_DEFINE_CLASS( AppLogChoice, AppPopup, "App::LogChoice" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppLogChoice )

/* Initializer for the class 'App::AdditionalPopup' */
void AppAdditionalPopup__Init( AppAdditionalPopup _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  AppPopup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  AppListViewer__Init( &_this->ListViewer, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButtonCancel, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButtonOK, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButtonOK1, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButtonOK2, &_this->_XObject, 0 );
  CoreSystemEventHandler__Init( &_this->SystemEventHandler3, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAdditionalPopup );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0583 );
  CoreRectView__OnSetBounds( &_this->Super1.Background, _Const0584 );
  ViewsRectangle_OnSetColor( &_this->Super1.Background, _Const0501 );
  CoreRectView__OnSetBounds( &_this->ListViewer, _Const0585 );
  AppListViewer_OnSetItemClass( &_this->ListViewer, EW_CLASS( AppAdditionalUnit 
  ));
  AppListViewer_OnSetItemHeight( &_this->ListViewer, 40 );
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, 20 );
  CoreRectView__OnSetBounds( &_this->PushButtonCancel, _Const0586 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButtonCancel, EwLoadString( &_Const0049 
  ));
  CoreRectView__OnSetBounds( &_this->PushButtonOK, _Const0587 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButtonOK, EwLoadString( &_Const0588 
  ));
  CoreRectView__OnSetBounds( &_this->PushButtonOK1, _Const0589 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButtonOK1, EwLoadString( &_Const058A 
  ));
  CoreRectView__OnSetBounds( &_this->PushButtonOK2, _Const058B );
  WidgetSetPushButton_OnSetLabel( &_this->PushButtonOK2, EwLoadString( &_Const058C 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->ListViewer ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButtonCancel ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButtonOK ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButtonOK1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButtonOK2 ), 0 );
  _this->ListViewer.OnLoadItem = EwNewSlot( _this, AppAdditionalPopup_OnLoadItem 
  );
  _this->ListViewer.onRefreshAll = EwNewSlot( _this, AppAdditionalPopup_OnRefreshAll1 
  );
  _this->PushButtonCancel.OnActivate = EwNewSlot( _this, AppAdditionalPopup_Cancel 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButtonCancel, EwGetAutoObject( 
  &AppNormalPushButton, WidgetSetPushButtonConfig ));
  _this->PushButtonOK.OnActivate = EwNewSlot( _this, AppAdditionalPopup_AddDevices 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButtonOK, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButtonOK1.OnActivate = EwNewSlot( _this, AppAdditionalPopup_SelectAll 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButtonOK1, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->PushButtonOK2.OnActivate = EwNewSlot( _this, AppAdditionalPopup_SelectAll 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButtonOK2, EwGetAutoObject( &AppNormalPushButton, 
  WidgetSetPushButtonConfig ));
  _this->SystemEventHandler3.OnEvent = EwNewSlot( _this, AppAdditionalPopup_onEvent 
  );
  CoreSystemEventHandler_OnSetEvent( &_this->SystemEventHandler3, &EwGetAutoObject( 
  &AppDevices, AppDeviceClass )->MeshListChangeEvent );

  /* Call the user defined constructor */
  AppAdditionalPopup_Init( _this, aArg );
}

/* Re-Initializer for the class 'App::AdditionalPopup' */
void AppAdditionalPopup__ReInit( AppAdditionalPopup _this )
{
  /* At first re-initialize the super class ... */
  AppPopup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  AppListViewer__ReInit( &_this->ListViewer );
  WidgetSetPushButton__ReInit( &_this->PushButtonCancel );
  WidgetSetPushButton__ReInit( &_this->PushButtonOK );
  WidgetSetPushButton__ReInit( &_this->PushButtonOK1 );
  WidgetSetPushButton__ReInit( &_this->PushButtonOK2 );
  CoreSystemEventHandler__ReInit( &_this->SystemEventHandler3 );
}

/* Finalizer method for the class 'App::AdditionalPopup' */
void AppAdditionalPopup__Done( AppAdditionalPopup _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAdditionalPopup );

  /* Finalize all embedded objects */
  AppListViewer__Done( &_this->ListViewer );
  WidgetSetPushButton__Done( &_this->PushButtonCancel );
  WidgetSetPushButton__Done( &_this->PushButtonOK );
  WidgetSetPushButton__Done( &_this->PushButtonOK1 );
  WidgetSetPushButton__Done( &_this->PushButtonOK2 );
  CoreSystemEventHandler__Done( &_this->SystemEventHandler3 );

  /* Don't forget to deinitialize the super class ... */
  AppPopup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AdditionalPopup' */
void AppAdditionalPopup__Mark( AppAdditionalPopup _this )
{
  EwMarkObject( &_this->ListViewer );
  EwMarkObject( &_this->PushButtonCancel );
  EwMarkObject( &_this->PushButtonOK );
  EwMarkObject( &_this->PushButtonOK1 );
  EwMarkObject( &_this->PushButtonOK2 );
  EwMarkObject( &_this->SystemEventHandler3 );

  /* Give the super class a chance to mark its objects and references */
  AppPopup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppAdditionalPopup_UpdateViewState( AppAdditionalPopup _this, XSet aState )
{
  XInt32 numItems;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_EXTRA_RADIO_UNITS, &cmd );

    numItems = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numItems );
}

/* The method Init() is invoked automatically after the component has been created. 
   This method can be overridden and filled with logic containing additional initialization 
   statements. */
void AppAdditionalPopup_Init( AppAdditionalPopup _this, XHandle aArg )
{
  XInt32 numItems;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aArg );

  numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_EXTRA_RADIO_UNITS, &cmd );

    numItems = cmd.int0;
  }
  AppListViewer_OnSetNoOfItems( &_this->ListViewer, numItems );
}

/* 'C' function for method : 'App::AdditionalPopup.OnLoadItem()' */
void AppAdditionalPopup_OnLoadItem( AppAdditionalPopup _this, XObject sender )
{
  XInt32 itemNo;
  AppAdditionalUnit view;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  view = EwCastObject( _this->ListViewer.VerticalList.View, AppAdditionalUnit );

  if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
  {
    XInt32 intptr = 0;
    AppRadioUnit ru;
    CoreGroup__OnSetVisible( view, 1 );
    {
      Command cmd;

      cmd.int0 = itemNo;
      Command0( CMD_GET_EXTRA_RADIO_NUM, &cmd );

      intptr = cmd.int1;
    }
    ru = AppLibClass_GetRadioFromPtr( EwGetAutoObject( &AppLib, AppLibClass ), intptr 
    );

    if ( ru != 0 )
    {
      view->Index = itemNo;
      WidgetSetToggleButton_OnSetChecked( &view->UnitCheckBox, (XBool)(( ru->valid 
      & 32 ) == 32 ));
      ViewsText_OnSetString( &view->DescriptionText, AppLibClass_GetCombiName( EwGetAutoObject( 
      &AppLib, AppLibClass ), ru->combination ));

      if ( ru->zonenum < 1 )
        ru->zonenum = 1;

      CoreVerticalList_OnSetScrollOffset( &view->ZoneSpinner.VerticalList1, ( ru->zonenum 
      - 1 ) * view->ZoneSpinner.VerticalList1.ItemHeight );
      CoreRectView__OnSetBounds( view, EwSetRectSize( view->Super2.Bounds, EwNewPoint( 
      EwGetRectW( _this->ListViewer.VerticalList.Super2.Bounds ), _this->ListViewer.VerticalList.ItemHeight 
      )));
    }
  }
  else
  {
    CoreGroup__OnSetVisible( view, 0 );
  }

  CoreGroup_InvalidateViewState((CoreGroup)view );
}

/* 'C' function for method : 'App::AdditionalPopup.OnRefreshAll1()' */
void AppAdditionalPopup_OnRefreshAll1( AppAdditionalPopup _this, XObject sender )
{
  XInt32 itemNo;
  AppAdditionalUnit view;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->ListViewer.Item;
  view = EwCastObject( _this->ListViewer.VerticalList.Super1.first, AppAdditionalUnit 
  );

  while ( view != 0 )
  {
    if (( itemNo >= 0 ) && ( itemNo < _this->ListViewer.NoOfItems ))
    {
      XInt32 intptr = 0;
      AppRadioUnit ru;
      {
        Command cmd;

        cmd.int0 = itemNo;
        Command0( CMD_GET_EXTRA_RADIO_NUM, &cmd );

        intptr = cmd.int1;
      }
      ru = AppLibClass_GetRadioFromPtr( EwGetAutoObject( &AppLib, AppLibClass ), 
      intptr );

      if ( ru != 0 )
      {
        CoreGroup__OnSetVisible( view, 1 );
        view->Index = itemNo;
        WidgetSetToggleButton_OnSetChecked( &view->UnitCheckBox, (XBool)(( ru->valid 
        & 32 ) == 32 ));
        ViewsText_OnSetString( &view->DescriptionText, AppLibClass_GetCombiName( 
        EwGetAutoObject( &AppLib, AppLibClass ), ru->combination ));

        if ( ru->zonenum < 1 )
          ru->zonenum = 1;

        CoreVerticalList_OnSetScrollOffset( &view->ZoneSpinner.VerticalList1, ( 
        ru->zonenum - 1 ) * view->ZoneSpinner.VerticalList1.ItemHeight );
        CoreRectView__OnSetBounds( view, EwSetRectSize( view->Super2.Bounds, EwNewPoint( 
        EwGetRectW( _this->ListViewer.VerticalList.Super2.Bounds ), _this->ListViewer.VerticalList.ItemHeight 
        )));
        view = EwCastObject( view->Super3.next, AppAdditionalUnit );

        if ( view == 0 )
          return;
      }
    }
    else
    {
      CoreGroup__OnSetVisible( view, 0 );
      CoreGroup_InvalidateViewState((CoreGroup)view );
      view = EwCastObject( view->Super3.next, AppAdditionalUnit );
    }

    itemNo = itemNo + 1;
  }
}

/* 'C' function for method : 'App::AdditionalPopup.SelectAll()' */
void AppAdditionalPopup_SelectAll( AppAdditionalPopup _this, XObject sender )
{
  XBool select = (XBool)( sender == ((XObject)&_this->PushButtonOK2 ));
  XInt32 numItems = 8;
  {
    Command cmd;

    Command0( CMD_GET_NUM_EXTRA_RADIO_UNITS, &cmd );

    numItems = cmd.int0;

     for (  cmd.int0 = 0; cmd.int0 < numItems; cmd.int0++ )
     {

       Command0( CMD_GET_EXTRA_RADIO_NUM, &cmd );

       RadioUnit* r = (RadioUnit*)   cmd.int1;

        if ( r != NULL )
        {
            if ( select )
            { 
               r->valid |= 32;
             }
             else
             {
               r->valid &= ~32;
             } 

         }     
     }
  }
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'App::AdditionalPopup.AddDevices()' */
void AppAdditionalPopup_AddDevices( AppAdditionalPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( _this );
  EW_UNUSED_ARG( sender );

  Command1( CMD_ADD_ADDITIONAL, 1);
}

/* 'C' function for method : 'App::AdditionalPopup.Cancel()' */
void AppAdditionalPopup_Cancel( AppAdditionalPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  AppPopup_Hide((AppPopup)_this );
}

/* This slot method is executed when the associated system event handler 'SystemEventHandler3' 
   receives an event. */
void AppAdditionalPopup_onEvent( AppAdditionalPopup _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'App::AdditionalPopup' */
EW_DEFINE_CLASS_VARIANTS( AppAdditionalPopup )
EW_END_OF_CLASS_VARIANTS( AppAdditionalPopup )

/* Virtual Method Table (VMT) for the class : 'App::AdditionalPopup' */
EW_DEFINE_CLASS( AppAdditionalPopup, AppPopup, "App::AdditionalPopup" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppPopup_UpdateLayout,
  AppAdditionalPopup_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAdditionalPopup )

/* Initializer for the class 'App::AdditionalUnit' */
void AppAdditionalUnit__Init( AppAdditionalUnit _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsText__Init( &_this->DescriptionText, &_this->_XObject, 0 );
  WidgetSetToggleButton__Init( &_this->UnitCheckBox, &_this->_XObject, 0 );
  AppZoneSpinner__Init( &_this->ZoneSpinner, &_this->_XObject, 0 );
  ViewsText__Init( &_this->Text, &_this->_XObject, 0 );
  WidgetSetPushButton__Init( &_this->PushButton, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppAdditionalUnit );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const058D );
  CoreRectView__OnSetBounds( &_this->DescriptionText, _Const058E );
  ViewsText_OnSetColorBL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorBR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTR( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetColorTL( &_this->DescriptionText, _Const000E );
  ViewsText_OnSetAlignment( &_this->DescriptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->DescriptionText, 0 );
  ViewsText_OnSetColor( &_this->DescriptionText, _Const000E );
  CoreRectView__OnSetBounds( &_this->UnitCheckBox, _Const058F );
  CoreGroup_OnSetEnabled((CoreGroup)&_this->UnitCheckBox, 1 );
  WidgetSetToggleButton_OnSetLabel( &_this->UnitCheckBox, 0 );
  CoreRectView__OnSetBounds( &_this->ZoneSpinner, _Const0590 );
  CoreRectView__OnSetBounds( &_this->Text, _Const0591 );
  ViewsText_OnSetString( &_this->Text, EwLoadString( &_Const0592 ));
  ViewsText_OnSetColor( &_this->Text, _Const000E );
  CoreView_OnSetLayout((CoreView)&_this->PushButton, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PushButton, _Const0593 );
  WidgetSetPushButton_OnSetLabel( &_this->PushButton, EwLoadString( &_Const0594 
  ));
  CoreGroup__Add( _this, ((CoreView)&_this->DescriptionText ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->UnitCheckBox ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ZoneSpinner ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Text ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PushButton ), 0 );
  ViewsText_OnSetFont( &_this->DescriptionText, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->UnitCheckBox.OnSwitchOn = EwNewSlot( _this, AppAdditionalUnit_ToggleSlot 
  );
  _this->UnitCheckBox.OnSwitchOff = EwNewSlot( _this, AppAdditionalUnit_ToggleSlot 
  );
  WidgetSetToggleButton_OnSetAppearance( &_this->UnitCheckBox, EwGetAutoObject( 
  &AppNormalCheckBox, WidgetSetToggleButtonConfig ));
  ViewsText_OnSetFont( &_this->Text, EwLoadResource( &AppFontVerdanaProCondSemiBold18, 
  ResourcesFont ));
  _this->PushButton.OnActivate = EwNewSlot( _this, AppAdditionalUnit_LocateSlot 
  );
  WidgetSetPushButton_OnSetAppearance( &_this->PushButton, EwGetAutoObject( &AppSmallPushButton, 
  WidgetSetPushButtonConfig ));
}

/* Re-Initializer for the class 'App::AdditionalUnit' */
void AppAdditionalUnit__ReInit( AppAdditionalUnit _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsText__ReInit( &_this->DescriptionText );
  WidgetSetToggleButton__ReInit( &_this->UnitCheckBox );
  AppZoneSpinner__ReInit( &_this->ZoneSpinner );
  ViewsText__ReInit( &_this->Text );
  WidgetSetPushButton__ReInit( &_this->PushButton );
}

/* Finalizer method for the class 'App::AdditionalUnit' */
void AppAdditionalUnit__Done( AppAdditionalUnit _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppAdditionalUnit );

  /* Finalize all embedded objects */
  ViewsText__Done( &_this->DescriptionText );
  WidgetSetToggleButton__Done( &_this->UnitCheckBox );
  AppZoneSpinner__Done( &_this->ZoneSpinner );
  ViewsText__Done( &_this->Text );
  WidgetSetPushButton__Done( &_this->PushButton );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::AdditionalUnit' */
void AppAdditionalUnit__Mark( AppAdditionalUnit _this )
{
  EwMarkObject( &_this->DescriptionText );
  EwMarkObject( &_this->UnitCheckBox );
  EwMarkObject( &_this->ZoneSpinner );
  EwMarkObject( &_this->Text );
  EwMarkObject( &_this->PushButton );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppAdditionalUnit_UpdateLayout( AppAdditionalUnit _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppAdditionalUnit_UpdateViewState( AppAdditionalUnit _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* 'C' function for method : 'App::AdditionalUnit.ToggleSlot()' */
void AppAdditionalUnit_ToggleSlot( AppAdditionalUnit _this, XObject sender )
{
  XInt32 itemNo;
  XBool checked;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->Index;
  checked = _this->UnitCheckBox.Checked;
  {
    Command cmd;

    cmd.int0 = itemNo;
    Command0( CMD_GET_EXTRA_RADIO_NUM, &cmd );

    RadioUnit* rad = (RadioUnit*) cmd.int1;

    if ( rad != NULL )
    {
      if ( checked )
      {
          rad->valid |= 32;
      }
      else
      {
           rad->valid &= 223;
       }
    }
  }
}

/* 'C' function for method : 'App::AdditionalUnit.LocateSlot()' */
void AppAdditionalUnit_LocateSlot( AppAdditionalUnit _this, XObject sender )
{
  XInt32 itemNo;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->Index;
  {
    Command cmd;

    cmd.int0 = itemNo;
    Command0( CMD_FLASH_EXTRA_RADIO_NUM, &cmd );
  }
}

/* Variants derived from the class : 'App::AdditionalUnit' */
EW_DEFINE_CLASS_VARIANTS( AppAdditionalUnit )
EW_END_OF_CLASS_VARIANTS( AppAdditionalUnit )

/* Virtual Method Table (VMT) for the class : 'App::AdditionalUnit' */
EW_DEFINE_CLASS( AppAdditionalUnit, CoreGroup, "App::AdditionalUnit" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppAdditionalUnit_UpdateLayout,
  AppAdditionalUnit_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppAdditionalUnit )

/* Initializer for the class 'App::ZoneSpinner' */
void AppZoneSpinner__Init( AppZoneSpinner _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsRectangle__Init( &_this->Rectangle, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle1, &_this->_XObject, 0 );
  ViewsRectangle__Init( &_this->Rectangle2, &_this->_XObject, 0 );
  CoreVerticalList__Init( &_this->VerticalList1, &_this->_XObject, 0 );
  ViewsBorder__Init( &_this->BorderCurrent, &_this->_XObject, 0 );
  CoreSlideTouchHandler__Init( &_this->SlideTouchHandler, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( AppZoneSpinner );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0595 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle, _Const0596 );
  ViewsRectangle_OnSetColor( &_this->Rectangle, _Const0283 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle1, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle1, _Const0597 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle1, _Const0134 );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle1, _Const0134 );
  CoreView_OnSetLayout((CoreView)&_this->Rectangle2, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert 
  );
  CoreRectView__OnSetBounds( &_this->Rectangle2, _Const0598 );
  ViewsRectangle_OnSetColorBL( &_this->Rectangle2, _Const011D );
  ViewsRectangle_OnSetColorBR( &_this->Rectangle2, _Const0599 );
  ViewsRectangle_OnSetColorTR( &_this->Rectangle2, _Const0134 );
  ViewsRectangle_OnSetColorTL( &_this->Rectangle2, _Const0134 );
  CoreView_OnSetLayout((CoreView)&_this->VerticalList1, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->VerticalList1, _Const059A );
  CoreVerticalList_OnSetNoOfItems( &_this->VerticalList1, 96 );
  CoreView_OnSetLayout((CoreView)&_this->BorderCurrent, CoreLayoutAlignToBottom 
  | CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->BorderCurrent, _Const0595 );
  ViewsBorder_OnSetWidth( &_this->BorderCurrent, 3 );
  ViewsBorder_OnSetColor( &_this->BorderCurrent, _Const04B8 );
  ViewsBorder_OnSetVisible( &_this->BorderCurrent, 1 );
  CoreRectView__OnSetBounds( &_this->SlideTouchHandler, _Const0595 );
  CoreSlideTouchHandler_OnSetFriction( &_this->SlideTouchHandler, 0.100000f );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Rectangle2 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->VerticalList1 ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BorderCurrent ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->SlideTouchHandler ), 0 );
  _this->VerticalList1.OnLoadItem = EwNewSlot( _this, AppZoneSpinner_OnLoadItem1 
  );
  CoreVerticalList_OnSetSlideHandler( &_this->VerticalList1, &_this->SlideTouchHandler 
  );
  _this->SlideTouchHandler.OnEnd = EwNewSlot( _this, AppZoneSpinner_SlideEnd );
}

/* Re-Initializer for the class 'App::ZoneSpinner' */
void AppZoneSpinner__ReInit( AppZoneSpinner _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsRectangle__ReInit( &_this->Rectangle );
  ViewsRectangle__ReInit( &_this->Rectangle1 );
  ViewsRectangle__ReInit( &_this->Rectangle2 );
  CoreVerticalList__ReInit( &_this->VerticalList1 );
  ViewsBorder__ReInit( &_this->BorderCurrent );
  CoreSlideTouchHandler__ReInit( &_this->SlideTouchHandler );
}

/* Finalizer method for the class 'App::ZoneSpinner' */
void AppZoneSpinner__Done( AppZoneSpinner _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( AppZoneSpinner );

  /* Finalize all embedded objects */
  ViewsRectangle__Done( &_this->Rectangle );
  ViewsRectangle__Done( &_this->Rectangle1 );
  ViewsRectangle__Done( &_this->Rectangle2 );
  CoreVerticalList__Done( &_this->VerticalList1 );
  ViewsBorder__Done( &_this->BorderCurrent );
  CoreSlideTouchHandler__Done( &_this->SlideTouchHandler );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'App::ZoneSpinner' */
void AppZoneSpinner__Mark( AppZoneSpinner _this )
{
  EwMarkObject( &_this->Rectangle );
  EwMarkObject( &_this->Rectangle1 );
  EwMarkObject( &_this->Rectangle2 );
  EwMarkObject( &_this->VerticalList1 );
  EwMarkObject( &_this->BorderCurrent );
  EwMarkObject( &_this->SlideTouchHandler );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void AppZoneSpinner_UpdateLayout( AppZoneSpinner _this, XPoint aSize )
{
  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void AppZoneSpinner_UpdateViewState( AppZoneSpinner _this, XSet aState )
{
  CoreGroup_UpdateViewState((CoreGroup)_this, aState );
}

/* This method is called by 'VerticalList1' every time the list loads or updates 
   an item. */
void AppZoneSpinner_OnLoadItem1( AppZoneSpinner _this, XObject sender )
{
  XInt32 itemNo;
  ViewsText itemView;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  itemNo = _this->VerticalList1.Item;
  itemView = EwCastObject( _this->VerticalList1.View, ViewsText );

  if ( itemView == 0 )
    return;

  ViewsText_OnSetString( itemView, EwNewStringInt( itemNo + 1, 0, 10 ));
  ViewsText_OnSetFont( itemView, EwLoadResource( &AppFontMediumBold, ResourcesFont 
  ));
  ViewsText_OnSetColor( itemView, _Const000E );
  CoreRectView__OnSetBounds( itemView, EwSetRectSize( itemView->Super1.Bounds, EwNewPoint( 
  EwGetRectW( _this->VerticalList1.Super2.Bounds ), _this->VerticalList1.ItemHeight 
  )));
}

/* 'C' function for method : 'App::ZoneSpinner.SlideEnd()' */
void AppZoneSpinner_SlideEnd( AppZoneSpinner _this, XObject sender )
{
  XInt32 itemNo;
  XInt32 zone;
  AppAdditionalUnit u;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreVerticalList_OnSetScrollOffset( &_this->VerticalList1, (( _this->VerticalList1.ScrollOffset 
  - ( _this->VerticalList1.ItemHeight / 2 )) / _this->VerticalList1.ItemHeight ) 
  * _this->VerticalList1.ItemHeight );
  CoreVerticalList_OnSetSelectedItem( &_this->VerticalList1, -_this->VerticalList1.ScrollOffset 
  / _this->VerticalList1.ItemHeight );
  itemNo = 0;
  zone = _this->VerticalList1.SelectedItem + 1;
  u = EwCastObject( _this->Super3.Owner, AppAdditionalUnit );

  if ( u == 0 )
    return;

  itemNo = u->Index;
  {
    Command cmd;

    cmd.int0 = itemNo;
    Command0( CMD_GET_EXTRA_RADIO_NUM, &cmd );

    RadioUnit* rad = (RadioUnit*) cmd.int1;

    if ( rad != NULL )
    {
      rad->zone= zone;

    }
  }
}

/* Variants derived from the class : 'App::ZoneSpinner' */
EW_DEFINE_CLASS_VARIANTS( AppZoneSpinner )
EW_END_OF_CLASS_VARIANTS( AppZoneSpinner )

/* Virtual Method Table (VMT) for the class : 'App::ZoneSpinner' */
EW_DEFINE_CLASS( AppZoneSpinner, CoreGroup, "App::ZoneSpinner" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_OnSetVisible,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  AppZoneSpinner_UpdateLayout,
  AppZoneSpinner_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( AppZoneSpinner )

/* Bitmap resource : 'App::Bmp_1bar' */
EW_DEFINE_BITMAP_RES( AppBmp_1bar )
  EW_BITMAP_FRAMES( AppBmp_1bar, Default, EW_DRIVER_VARIANT_ALPHA8, 27, 23, 0 )
    EW_BITMAP_FRAME( 1, 17, 5, 5, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppBmp_1bar, Default )                  /* ratio 40.58 % */
    0x1BCDB300, 0x0D1E2F38, 0xB9E70475, 0xA12EF19B, 0x12F21CB9, 0x42679336, 0x4868C582,
    0x28B04DF2, 0x6F929D61, 0x5BFC2F1C, 0x4964AFF2, 0x002AF273, 0x632CD958, 0xD2009580,
    0xB306E129, 0x279348C0, 0x996CC253, 0x994AE5EF, 0x24DA5734, 0x4AA51389, 0x02612E96,
    0xA8B379AD, 0x953DA44E, 0xD44A64CE, 0x499DD1A4, 0xFA154E7F, 0x452243AF, 0x79B91560,
    0xCFA7800A, 0xD8015B98, 0x26130024, 0x8352B359, 0xB6C7FDAA, 0x59B7802D, 0x6B5DCAD1,
    0xB2D1EEF7, 0x23766579, 0xDD013840, 0xFEA378BE, 0x9FCFC204, 0x06F37F63, 0xF70BFE20,
    0x840187E7, 0x8C9E4B09, 0x0FCC7155, 0x3E27437D, 0x68740E9B, 0x9A95A3BB, 0x3296ED3E,
    0x629F7E92, 0x9AB7BA7F, 0x3B9DDFB5, 0x7DD99CBA, 0xDB5D4C26, 0x00EE59B7, 0x70EDFACE,
    0x1F29A2E2, 0x44BA8E47, 0x96D0E784, 0x90298733, 0xD315BC60, 0x000406ED, 0x00000000

  EW_BITMAPS_TABLE( AppBmp_1bar )
    EW_BITMAP( AppBmp_1bar, Default )
EW_END_OF_BITMAP_RES( AppBmp_1bar )

/* Table with links to derived variants of the bitmap resource : 'App::Bmp_1bar' */
EW_RES_WITHOUT_VARIANTS( AppBmp_1bar )

/* Bitmap resource : 'App::Bmp_2bar' */
EW_DEFINE_BITMAP_RES( AppBmp_2bar )
  EW_BITMAP_FRAMES( AppBmp_2bar, Default, EW_DRIVER_VARIANT_ALPHA8, 27, 23, 0 )
    EW_BITMAP_FRAME( 7, 12, 6, 10, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppBmp_2bar, Default )                  /* ratio 36.71 % */
    0x1BCD9900, 0x8E1E4F38, 0xC1E70472, 0xA12ED19B, 0x12F11A3A, 0x63373366, 0x4A62C582,
    0x38B065FA, 0x7F929BE1, 0x0C7E4320, 0x399E4FF9, 0x02520011, 0x252068CB, 0x49236E00,
    0x126904C6, 0x2E964AA5, 0x39049261, 0x9749E4B3, 0x4CB5FB2B, 0xCF6773A9, 0x1271409A,
    0xE8EFF9ED, 0x73429BCF, 0xC8C11D32, 0x79475591, 0x3A08029E, 0x07D325F4, 0xE56A5D2E,
    0x3FE7752A, 0x8C0161B0, 0x2CD5EA55, 0xA36BB0DA, 0x569B752E, 0x6CADCDAD, 0x47E109B9,
    0xBA82DF32, 0x5B72BB71, 0x61814081, 0xDAEA0705, 0xE5F72A4D, 0xEF80C50A, 0x18FA2592,
    0x79C95C32, 0x194E5B2B, 0xCFA59317, 0x1E6F34F1, 0x9C0C647B, 0x20DA70D3, 0xF2562CD8,
    0x4996D611, 0x7B2C86C3, 0x0513E036, 0x6D7B0B72, 0x7F362D3B, 0xE8EB81C0, 0x0020369D,
    0x00000000

  EW_BITMAPS_TABLE( AppBmp_2bar )
    EW_BITMAP( AppBmp_2bar, Default )
EW_END_OF_BITMAP_RES( AppBmp_2bar )

/* Table with links to derived variants of the bitmap resource : 'App::Bmp_2bar' */
EW_RES_WITHOUT_VARIANTS( AppBmp_2bar )

/* Bitmap resource : 'App::Bmp_3bar' */
EW_DEFINE_BITMAP_RES( AppBmp_3bar )
  EW_BITMAP_FRAMES( AppBmp_3bar, Default, EW_DRIVER_VARIANT_ALPHA8, 27, 23, 0 )
    EW_BITMAP_FRAME( 14, 6, 5, 16, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppBmp_3bar, Default )                  /* ratio 34.78 % */
    0x1BCD8300, 0x8F5E4F38, 0xC1E70470, 0x612EE19B, 0x12F21BBA, 0x23C6CB36, 0x4E5EC582,
    0xB8DBFDF4, 0x8E470971, 0x33FE3E4A, 0x8005CD97, 0x8A32B993, 0xE43228F4, 0x51269247,
    0xF2C8FCAA, 0x308E4BA3, 0xA948024F, 0x7FC8A691, 0x94E63737, 0x4D6393D9, 0xEE872290,
    0xA7F4699C, 0xA2834107, 0x5253420E, 0x3F95CF27, 0x59D4E813, 0x91562895, 0xE802B75A,
    0xC768B4BA, 0xC6C762AC, 0x63F5FB2C, 0xAF64ADD8, 0xCF02047E, 0xEB7B5D9E, 0xCB8DA40C,
    0xB48B2374, 0xFD9AF980, 0x58B017F7, 0x1B0B22C1, 0x2E56BAE6, 0xD58BC547, 0x4F92755A,
    0x8CC88AE4, 0xC2A11727, 0x02140A99, 0x0DF24F98, 0xE934786D, 0x9C9D8DBD, 0x85450BDE,
    0x57AA626B, 0xADA5656F, 0xB21AED76, 0x000406B7, 0x00000000

  EW_BITMAPS_TABLE( AppBmp_3bar )
    EW_BITMAP( AppBmp_3bar, Default )
EW_END_OF_BITMAP_RES( AppBmp_3bar )

/* Table with links to derived variants of the bitmap resource : 'App::Bmp_3bar' */
EW_RES_WITHOUT_VARIANTS( AppBmp_3bar )

/* Bitmap resource : 'App::Bmp_4bar' */
EW_DEFINE_BITMAP_RES( AppBmp_4bar )
  EW_BITMAP_FRAMES( AppBmp_4bar, Default, EW_DRIVER_VARIANT_ALPHA8, 27, 23, 0 )
    EW_BITMAP_FRAME( 21, 1, 5, 21, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( AppBmp_4bar, Default )                  /* ratio 31.56 % */
    0x1B9D8300, 0x0C9CAE78, 0x85CF046E, 0x612E3183, 0x12E61D35, 0xAFF732DA, 0x1624C562,
    0xF8C92A2D, 0x8E141F6F, 0xC46628D9, 0x466371C8, 0x5A45208F, 0xA4D19924, 0x43199445,
    0x91A96472, 0x328B4C23, 0xE7FC7247, 0x8ACDE2B2, 0xECEE5739, 0x23C411D9, 0xB1214848,
    0xA8717951, 0xA200014D, 0x8FFA654A, 0xFBA24566, 0x4A8D4AA0, 0xA7CF2AD5, 0x74CEB95B,
    0xD6EB527A, 0xF0813BAE, 0x402EF8CB, 0x39680058, 0xA040187E, 0x67B3012E, 0xCB7DCAC7,
    0x0FC66E37, 0xB5FADF7C, 0x5E703808, 0x4F0D7B9D, 0x0AA428E5, 0xB660C798, 0x38BC500C,
    0x86CA10A3, 0xDCC65EA9, 0xCEE73197, 0x15BF3F96, 0x0B9CB096, 0x020361D1, 0x00000000

  EW_BITMAPS_TABLE( AppBmp_4bar )
    EW_BITMAP( AppBmp_4bar, Default )
EW_END_OF_BITMAP_RES( AppBmp_4bar )

/* Table with links to derived variants of the bitmap resource : 'App::Bmp_4bar' */
EW_RES_WITHOUT_VARIANTS( AppBmp_4bar )

/* Embedded Wizard */
