/*******************************************************************************
*
* E M B E D D E D   W I Z A R D   P R O J E C T
*
*                                                Copyright (c) TARA Systems GmbH
*                                    written by Paul Banach and Manfred Schweyer
*
********************************************************************************
*
* This file was generated automatically by Embedded Wizard Studio.
*
* Please do not make any modifications of this file! The modifications are lost
* when the file is generated again by Embedded Wizard Studio!
*
* The template of this heading text can be found in the file 'head.ewt' in the
* directory 'Platforms' of your Embedded Wizard installation directory. If you
* wish to adapt this text, please copy the template file 'head.ewt' into your
* project directory and edit the copy only. Please avoid any modifications of
* the original template file!
*
* Version  : 9.00
* Profile  : STM32F746
* Platform : STM.STM32.RGB565
*
*******************************************************************************/

#include "ewlocale.h"
#include "_CoreSimpleTouchHandler.h"
#include "_CoreView.h"
#include "_GraphicsCanvas.h"
#include "_ResourcesBitmap.h"
#include "_ResourcesFont.h"
#include "_ViewsImage.h"
#include "_ViewsText.h"
#include "_XFlatAnalogDisplay.h"
#include "_XFlatCheckBox.h"
#include "_XFlatHorzBarSlider.h"
#include "_XFlatRadioButton.h"
#include "_XFlatSwitch.h"
#include "Core.h"
#include "Views.h"
#include "XFlat.h"

/* Compressed strings for the language 'Default'. */
static const unsigned int _StringsDefault0[] =
{
  0x00000046, /* ratio 91.43 % */
  0xB8000D00, 0x80000452, 0x1860001A, 0xA0902004, 0x200012C1, 0xB030641A, 0x00218020,
  0x032800D0, 0x35800C60, 0x78008400, 0xC2CF0003, 0x4A0D1504, 0x00061001, 0x46690019,
  0x10199C2E, 0x00000000
};

/* Constant values used in this 'C' module only. */
static const XRect _Const0000 = {{ 0, 0 }, { 260, 260 }};
static const XRect _Const0001 = {{ 0, 70 }, { 260, 190 }};
static const XStringRes _Const0002 = { _StringsDefault0, 0x0003 };
static const XStringRes _Const0003 = { _StringsDefault0, 0x0009 };
static const XRect _Const0004 = {{ 0, 0 }, { 190, 50 }};
static const XPoint _Const0005 = { 0, 50 };
static const XPoint _Const0006 = { 190, 50 };
static const XPoint _Const0007 = { 190, 0 };
static const XPoint _Const0008 = { 0, 0 };
static const XRect _Const0009 = {{ 0, 0 }, { 30, 30 }};
static const XRect _Const000A = {{ 50, 0 }, { 190, 50 }};
static const XStringRes _Const000B = { _StringsDefault0, 0x000F };
static const XRect _Const000C = {{ 10, 5 }, { 30, 25 }};
static const XRect _Const000D = {{ 40, 0 }, { 139, 30 }};
static const XStringRes _Const000E = { _StringsDefault0, 0x001B };
static const XRect _Const000F = {{ 0, 0 }, { 75, 44 }};
static const XPoint _Const0010 = { 0, 43 };
static const XPoint _Const0011 = { 74, 43 };
static const XPoint _Const0012 = { 74, 0 };
static const XRect _Const0013 = {{ 0, 0 }, { 220, 90 }};
static const XPoint _Const0014 = { 60, 72 };
static const XPoint _Const0015 = { 126, 72 };
static const XPoint _Const0016 = { 126, 40 };
static const XPoint _Const0017 = { 60, 40 };
static const XRect _Const0018 = {{ 0, 0 }, { 220, 20 }};
static const XRect _Const0019 = {{ 0, 0 }, { 110, 90 }};
static const XRect _Const001A = {{ 110, 0 }, { 220, 90 }};

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorXFlatBlue = { 0x14, 0x88, 0xD7, 0xFF };

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorXFlatMagenta = { 0xC7, 0x0B, 0x6A, 0xFF };

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorXFlatYellow = { 0xFD, 0xD9, 0x1C, 0xFF };

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorXFlatGray = { 0xD5, 0xD5, 0xD5, 0xFF };

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorEnabled = { 0xFF, 0xFF, 0xFF, 0xFF };

/* Font resources used for the different widgets. If you want to change the fonts 
   within your project, just create a variant of these font resources and define 
   the attributes of the font resources according your design ideas. */
EW_DEFINE_FONT_RES( XFlatFontNumbersXXL, 57, 15, 0, 16, 0x0001, 0x000C )
  EW_GLYPH( 0x0001, 3, -43, 21, 43, 27, 0x00000000 ),
  EW_GLYPH( 0x0025, 3, -43, 39, 44, 44, 0x00000780 ),           /* '%' */
  EW_GLYPH( 0x0030, 3, -43, 27, 44, 33, 0x0000144E ),           /* '0' */
  EW_GLYPH( 0x0031, 5, -43, 16, 43, 33, 0x00001CB3 ),           /* '1' */
  EW_GLYPH( 0x0032, 3, -43, 28, 43, 33, 0x00002043 ),           /* '2' */
  EW_GLYPH( 0x0033, 2, -43, 28, 44, 33, 0x000028C5 ),           /* '3' */
  EW_GLYPH( 0x0034, 2, -43, 31, 43, 33, 0x0000326D ),           /* '4' */
  EW_GLYPH( 0x0035, 4, -43, 27, 44, 33, 0x00003A0B ),           /* '5' */
  EW_GLYPH( 0x0036, 3, -43, 28, 44, 33, 0x000042DC ),           /* '6' */
  EW_GLYPH( 0x0037, 2, -43, 29, 43, 33, 0x00004C64 ),           /* '7' */
  EW_GLYPH( 0x0038, 3, -43, 28, 44, 33, 0x00005406 ),           /* '8' */
  EW_GLYPH( 0x0039, 2, -43, 28, 43, 33, 0x00005E8E ),           /* '9' */

  EW_FONT_PIXEL( XFlatFontNumbersXXL, 0x000067FB )              /* ratio 46.33 % */
    0xBDEF7BFF, 0xEF7BDEF7, 0x7BDEF7BD, 0x00001FEF, 0x7BDEE710, 0xDEF7BDEF, 0x0C16EF7B,
    0xE3BC0013, 0x000FCD61, 0xF2F83EB2, 0x4267C001, 0x39800BD6, 0x80063B81, 0xF9501F19,
    0x012AF802, 0xC6A0055F, 0xC05E9805, 0x358802C9, 0x003E7C81, 0x8BE098BE, 0x0FA8C009,
    0x380015CC, 0x07C66063, 0xF8BE4F00, 0xA780006A, 0x00038D42, 0x1F375EBC, 0x8E6A2000,
    0x4E0000FA, 0x0000989C, 0x0002B235, 0x0000B940, 0xA0000B94, 0x00005646, 0x0131389C,
    0xD4735100, 0xBD780007, 0xC0003E6E, 0x01C6A153, 0xF8BE4F00, 0x19C0006A, 0x003E3303,
    0x5CC0FA8C, 0x1317C001, 0xC401317C, 0x1F3E409A, 0x9C05E980, 0x02AF802C, 0x2A02E350,
    0x255F005F, 0x3000C770, 0x2F5903E3, 0x5F04E600, 0x4CF8003E, 0x64001F98, 0x0013287D,
    0x9C41E3BC, 0xF7BDEF7B, 0xBDEF7BDE, 0x0000005B, 0x3DCEFD60, 0x000015BF, 0x5D39E000,
    0x03EFAA21, 0xF9800000, 0x05BE2005, 0x34600000, 0xFEF73BE3, 0x00002E8A, 0xFD9E1B80,
    0x787BF504, 0x63000001, 0x0DF00FC8, 0x15F80059, 0x003F1F80, 0xDE007F2F, 0x524015FA,
    0x30048A00, 0x410051A6, 0x80260802, 0x09802E2B, 0x86B00000, 0x00000039, 0x1B2BE400,
    0x00000980, 0x800BC378, 0x01040120, 0x000B32CC, 0xF1400A7F, 0x00D96880, 0xBC00FC50,
    0x1D0BF06C, 0xFC863000, 0x03E43D00, 0x0079E3CF, 0xFD9E1B80, 0xBC5BF504, 0x007E2D10,
    0xEF8CD180, 0x562BFBDC, 0x000EA741, 0x404BF980, 0xD5350DBC, 0xFEA00004, 0x7D18856F,
    0x0BC57827, 0xEFE60000, 0x8057B3DC, 0x00026F4E, 0xD3180000, 0x00000058, 0x0170DC00,
    0x58000000, 0x00001CC3, 0x95F20000, 0xFFEF502F, 0x005BFFDE, 0x1786F000, 0x499BF7C4,
    0x0017DFCE, 0x14F29E00, 0x7801FFC4, 0x880001FE, 0x6F81F89F, 0xF7BFF588, 0x007C61DF,
    0x80E85F80, 0x93BFC4A7, 0x03D53B5C, 0x1351EA00, 0xC8037E1C, 0xBC001797, 0xF25105E2,
    0x0461A801, 0x09BD3A00, 0x78A00292, 0x58D31800, 0x7000E4C0, 0xB86E0009, 0x00000000,
    0x000D61AC, 0xF9000000, 0x000806CA, 0x786F0000, 0x000E2C01, 0xF28C0087, 0x01418014,
    0xB1803C50, 0x928007EB, 0x4693C00F, 0x005F8C00, 0x401BF0E0, 0x0000F8FE, 0x7F894F00,
    0xA876B927, 0xF0000009, 0xF7FEB10D, 0x07E43BFE, 0xFE200000, 0x00ED400F, 0xBE200000,
    0x7E7C933D, 0xAC4000BF, 0xF9EF7FEF, 0x80002B7F, 0x493F6EF8, 0x0BF7D3E4, 0x027DD400,
    0x00B73C40, 0xF78C17D4, 0xBFFDEF7F, 0x900AF883, 0xCF77885F, 0x86FDCE44, 0x213812F8,
    0xFCC013FE, 0x0CF01C42, 0x9AA0007A, 0x98CBC0F1, 0x5E0E6000, 0x000BC18C, 0x228318F8,
    0x0CC0001E, 0x0028FC7E, 0x6C914500, 0x527F0000, 0x60000906, 0x01E26310, 0x13313000,
    0x31200001, 0x00000082, 0x000032E2, 0x00009C90, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C000001, 0x000032E2,
    0x0020DC10, 0x22440800, 0xE40C0001, 0x300004C4, 0x00183331, 0x1E910600, 0xCD800036,
    0x0002A6C3, 0x079B0F10, 0x82B00013, 0x00178B22, 0x5C0C63F0, 0x9D0005E2, 0x9CC550BC,
    0xF5167800, 0x1B782F80, 0x2F11FAC0, 0xFD60FF10, 0xDDCE40D7, 0x8C04BE21, 0xEFBD927F,
    0x1077FFBD, 0x7B18015F, 0x2DCF0006, 0xDF7BC400, 0xF4F90467, 0x800002F9, 0x4007FFD1,
    0x095EFFAE, 0x9DFFB5C8, 0xDFFB5C80, 0xF7F31003, 0x1FD181EF, 0xF4616F7C, 0xC809AF7F,
    0x8095EFFE, 0x12BFFB5C, 0x0007B780, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFDFEA800,
    0x5BFB3DEF, 0xFF580009, 0xC624AADF, 0x00DFFFD3, 0x004EEE40, 0x6A005ED4, 0xCEFD620F,
    0xA27767BD, 0x82F8C03F, 0x1882BA75, 0xB3C1DFEB, 0x6BE21380, 0xBC17D600, 0x07E92B09,
    0x3E25EA00, 0x0009A978, 0x09E264AC, 0x23E0001A, 0x001C9B06, 0xC3C98500, 0x48900002,
    0x80003F92, 0x00664600, 0xFF040800, 0x00027FFF, 0x00002448, 0x000A21E0, 0x00A7F000,
    0x38A30000, 0x66800000, 0xF0000014, 0x00000D14, 0x0014F344, 0xF8A5F000, 0xAB000001,
    0x000002F8, 0x002ACD3C, 0x547E3000, 0x3C800003, 0x00003F21, 0x0DC53710, 0x4FF00000,
    0x00004FF1, 0x06FC1BF0, 0x8B780000, 0x000001F7, 0x0026B26B, 0xD3CD9800, 0x9AA00000,
    0xC00000FA, 0x01F8C2F8, 0x213C8000, 0x200000FF, 0x001B8A6E, 0xE29FE000, 0xE000009F,
    0x0037C437, 0x745BC000, 0x9E800001, 0x000009AC, 0x003662E6, 0xBCC68800, 0xEF7BDEF7,
    0x7BDEF7BD, 0xDEF7BDEF, 0x00000AFB, 0x00000000, 0xDFE8C000, 0xBFB3DEFF, 0xB9800095,
    0xC624AAF7, 0x00DFFFD3, 0x0077EE40, 0x180376A0, 0xF7F3107B, 0xDFFEF7BF, 0x7900FAC2,
    0x4ADF7982, 0xE4EDFCE4, 0xDE4DE069, 0x3D8C0037, 0x629E0358, 0x1388004D, 0x1A32F0BC,
    0x13C5C800, 0x0003E0E4, 0x0A1450F8, 0x7F046000, 0x0000910E, 0x07CC8106, 0xD2498000,
    0x000FFFFF, 0x00004580, 0x00092400, 0x06C11800, 0x64BC0000, 0xCF000001, 0x00000FC3,
    0x01351FA8, 0x17FA2000, 0x400007C6, 0xD45DEF3E, 0xB9E0003F, 0xFFFBDEF7, 0x17EFC866,
    0x7C800000, 0x0000001F, 0x000FDBF9, 0xEF7BDCF0, 0xC62EBF3D, 0x200001F7, 0x0FFEFD6A,
    0x00000FCF, 0x17A9AFC8, 0x16B00000, 0x00000073, 0x0000693A, 0x000A8F80, 0x01E14000,
    0xD2240000, 0x00000318, 0xEF7B1881, 0x08000001, 0x0400003C, 0x000B8322, 0x50F1E240,
    0x31140000, 0x0005C9FC, 0xC998A3E0, 0x9D00003B, 0xFF8978BC, 0xF1730000, 0xFF13540C,
    0xC97E8005, 0xE88B581F, 0x9F2256F3, 0x06F22CF7, 0xF3125FD0, 0xFEF7BFF7, 0x4ED419BF,
    0x09DFE780, 0x02FDF180, 0x5BFFEB00, 0xBDEAC895, 0x0000001F, 0x0177BDEF, 0x09A80000,
    0x5E000000, 0xD0000000, 0x00000009, 0x00000963, 0x005E1C00, 0xE53A0000, 0x30000002,
    0x00002F16, 0x00A79700, 0x10F40000, 0x0000003F, 0x000BF263, 0x3C370000, 0x8000000F,
    0x000FC435, 0x74BE4000, 0x38000000, 0x000026A1, 0x0BC43580, 0x5F200000, 0x0000013A,
    0x0013509C, 0xE21CC000, 0x90000005, 0x00009BCD, 0x1630DE00, 0x59800000, 0x000000E2,
    0x004DE6C8, 0x186F0000, 0xC000000B, 0x0001712C, 0x07334400, 0x2F800000, 0x00000364,
    0x00038A78, 0xAC7E2000, 0xE0000001, 0xEF7BAC17, 0x7BDEF7BD, 0xA2F7BDEF, 0xDEF7BDEF,
    0x000000F1, 0x00000000, 0xBDEF7B80, 0xEF7BDEF7, 0x7BDEF7BD, 0x7BDF45EF, 0x0003BDEF,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0xBDDF8000, 0xEF7BDEF7, 0x7BDEF7BD, 0xBEF7BDEF, 0x00000160,
    0x00000010, 0xEF7BBF24, 0x7BDEF7BD, 0xDEF7BDEF, 0x016042FB, 0x04890000, 0x02160000,
    0x12480000, 0x4C100000, 0x21C00000, 0x83000000, 0x08000001, 0x6000000E, 0x80000012,
    0x80000124, 0x000002C0, 0x00000912, 0xDE78842C, 0xFFFDEE7D, 0x6410007A, 0x239BF7BC,
    0x3F7B5AC8, 0x33B8C900, 0x07DF1800, 0x77A844B8, 0xEEEF7B9F, 0x2407E781, 0x11CDFEC6,
    0x417F6B18, 0xB1EDE07D, 0xD9E000F6, 0x58C0F3C9, 0x9E4001BB, 0x800001A0, 0x001392F1,
    0x1FC15800, 0x78B00000, 0x9B000000, 0xC0000018, 0x000004C2, 0x00000912, 0x00000000,
    0x81000000, 0x00EF7BC8, 0x12303000, 0xC2C00013, 0x0000D834, 0x2C50C4FE, 0x0F0F0000,
    0x0002623F, 0x28CFE49E, 0x2680003A, 0x3FC43A26, 0x1A4BE000, 0x03D8CBC6, 0x6A1EFC40,
    0xFDC8B582, 0xF7AC899B, 0x7403E316, 0xEFFEF507, 0x0CDFFFBD, 0x6B001FEA, 0xF7C8003F,
    0x77E40017, 0xD64119FA, 0x0027FDFA, 0xDFECE400, 0x0017DCFF, 0xEFFFB980, 0x00000CAA,
    0x000779D6, 0x83BB9000, 0xEFFDFEA8, 0xD8C0017D, 0x5BFBEC83, 0xF1800095, 0x057FD60F,
    0x0FF90000, 0x00006BF1, 0x0BFC4270, 0x10F40000, 0x000000DF, 0x00059939, 0x68C2FC00,
    0x16200000, 0x6000002F, 0x00007C86, 0x003E3F00, 0x0A0C4000, 0xC4500000, 0xE7DDE780,
    0x256FFFDE, 0x75853F80, 0xAC8239BE, 0x18097FFE, 0x00EFF1A4, 0xF00FD9E0, 0xE29FEA70,
    0xDEF7FEF9, 0x137C49DD, 0xCF0BE704, 0x58C49EFE, 0x481E85FF, 0x4BF788CC, 0x0712FD00,
    0x004DF081, 0x805C8B98, 0x93A0002E, 0x000B180F, 0x0B0E47E0, 0x1580001F, 0x001E04FC,
    0x0030F100, 0x0F060000, 0x21C00000, 0x6000004C, 0x00000020, 0x0000B020, 0x00018900,
    0xFE0C2240, 0x061C0000, 0xC000050F, 0x144FE4C3, 0x360E4000, 0xC0003495, 0x8C7C2C47,
    0xA4C40009, 0x04E92B02, 0x82F05F00, 0x8009B897, 0xD500E62E, 0xBC007EE4, 0x6B017C8B,
    0x899EDF11, 0x2F24CEB1, 0xF182FE80, 0xBBBDEFFE, 0x8013B183, 0x20013F67, 0xE400077A,
    0x8467DF77, 0x0B3BF318, 0xDEF7BBF0, 0xF7BDEF7B, 0xBDEF7BDE, 0xEF7BDEF7, 0x000EF7BD,
    0x00000000, 0xDFC88000, 0x7BDEF7BD, 0xDEF7BDEF, 0xF7BDEF7B, 0x561F7BDE, 0xF2000000,
    0x000007E1, 0x0012A3F0, 0x0B8B1000, 0xC3300000, 0x80000028, 0x00000F97, 0x00988660,
    0x2F1F0000, 0x0D400000, 0x00000131, 0x00002B2E, 0x01F8A300, 0x54BC0000, 0xF2000002,
    0x000002E1, 0x00028C7C, 0x03E4C400, 0x21980000, 0xC0000026, 0x00000BC7, 0x004C5330,
    0x158F8000, 0x1A800000, 0x000000FC, 0x0000952E, 0x005C5180, 0x51978000, 0x2C800000,
    0x8000003E, 0x0004C42F, 0x00BC9800, 0xC42B0000, 0xF8000004, 0x00000158, 0x001F9278,
    0x254BC000, 0x06A00000, 0xE0000017, 0x00000A32, 0x0007C590, 0x2623F000, 0x16200000,
    0xC000002F, 0x0002621B, 0x00564C00, 0xF0660000, 0xF8000003, 0x00000951, 0x000B9278,
    0xBF58C000, 0xFFF7BDFF, 0x5000035B, 0xB225777B, 0x0007EF7A, 0xC000DFBE, 0xF6003EF8,
    0xF7FF7A83, 0x785BFFDE, 0x837E0076, 0xC899BFDC, 0xE325FBF9, 0xF6316603, 0x507B5000,
    0x1388FC0B, 0xBC138800, 0x009BC950, 0xC1E25F20, 0x60002626, 0x27831705, 0x898A0000,
    0x48000249, 0xC0000006, 0x00000005, 0x00009260, 0x0F0624FE, 0xE1458000, 0xC0004C47,
    0x8A31FC93, 0x4D00005F, 0x3F21BC15, 0xD14BF000, 0x1ED47F20, 0x7E2EC600, 0x30BE7803,
    0xE449EFF6, 0xBE21EDF3, 0x45D9E007, 0xEF7BFF7D, 0xFDA87BFF, 0x09BF9000, 0x004BF980,
    0x8009FF3C, 0xBE001FB9, 0xFEFCC52F, 0x37FFDEF7, 0x00BEF8C3, 0xFBAC3F62, 0xDE7C893E,
    0x01FE78BB, 0x0EBE21BE, 0x185FD100, 0xEFC5587F, 0x8FCF0001, 0x0F9978D1, 0xCC59E000,
    0x001F8334, 0x63C43780, 0x40001233, 0x0A2CFC3C, 0x219B0000, 0x480000B9, 0x00000004,
    0x00001704, 0x0000C909, 0x78A221C0, 0xA2800002, 0x0002626C, 0x8356C998, 0xB2000077,
    0x27134989, 0xA0DE4001, 0x0BDC8B51, 0xCF277300, 0xFF449E84, 0xFD5112BB, 0x03E7837F,
    0xF5C837DE, 0xCF7BDFFB, 0x1FD1256F, 0x0033BCC0, 0x002F7310, 0xAADF3DE2, 0xEEFCD644,
    0x7A80009B, 0xFFF7B9F7, 0x300001EB, 0x8239BFFF, 0x03F7B5AC, 0x137BF100, 0x007DF180,
    0xF988BFC4, 0xBFFEF73B, 0xF006CF07, 0x2B7DD41F, 0x83DBE7C8, 0xE0F403F1, 0xD8C005F9,
    0x93902D45, 0x4BE000FA, 0xF10E80DE, 0xC4388002, 0x0266288B, 0x5898A300, 0x700007C1,
    0x12336289, 0xCD82A000, 0x280000A2, 0x0000E48A, 0x060527F0, 0x04490000, 0x2600004C,
    0x00001612, 0x00000200, 0x001FC110, 0x00192000, 0x13C50000, 0xE07E0000, 0x80004C47,
    0x5E0C6098, 0x802F8000, 0x80017897, 0x9833C02E, 0x65DE000B, 0x7E827020, 0xD53D8C01,
    0xC17E40C5, 0x9C81AFFC, 0x6FD43DBF, 0x4FF50112, 0xF7BDF7B2, 0x27F316FF, 0x19EC6049,
    0x397EC600, 0xB7BC404C, 0xBDEAC92B, 0x00FE1E07, 0xF7FEFD62, 0x806B7FFE, 0x00000141,
    0x0000621E, 0x000B2E00, 0x1F0F9000, 0x19A00000, 0x78000003, 0x00001A1E, 0x029E3F18,
    0x1FE30000, 0x000007F2, 0x09C43FD6, 0xFE620000, 0x007FC43B, 0xEFD6B200, 0x03D8C9BE,
    0xF7BDC600, 0xA20AEBFF, 0x00000277, 0x000B3DE3, 0xFACF1C80, 0x00009ECE
EW_END_OF_FONT_RES( XFlatFontNumbersXXL )

/* Table with links to derived variants of the font resource : 'XFlat::FontNumbersXXL' */
EW_RES_WITHOUT_VARIANTS( XFlatFontNumbersXXL )

/* Bitmap resources used for the different widgets. The implementation of the widgets 
   depends on these bitmap resources. */
EW_DEFINE_BITMAP_RES( XFlatWheelLargeBack )
  EW_BITMAP_FRAMES( XFlatWheelLargeBack, Default, EW_DRIVER_VARIANT_ALPHA8, 200, 200, 0 )
    EW_BITMAP_FRAME( 63, 180, 74, 13, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatWheelLargeBack, Default )          /* ratio 6.63 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xE110C85C, 0xCC541983, 0x8AB4CA64, 0x187FC599,
    0xC8B46233, 0x3344D56C, 0x683C6654, 0xC9A4B248, 0xAA532893, 0x82B0D95C, 0x989F3790,
    0xB348D3E5, 0xF99ACDA6, 0x237A7D98, 0x9FCB02A4, 0x1D0A8340, 0x1BC6709A, 0x2A6EE454,
    0x2314CA5D, 0x666F5439, 0xB54A9D10, 0x6F10D52A, 0xCA6BD968, 0x7B52ABB5, 0xB084DEB4,
    0xD9ACB64A, 0x79204283, 0xEDB6CAF3, 0x84906F4D, 0x174B9D9C, 0xE7480FE8, 0x4BDDEADC,
    0x1FA41CF3, 0x4E0B0375, 0x524FC1B8, 0xFF1388BE, 0xC367E723, 0x9D75C7E0, 0x994C52D0,
    0x90272D32, 0xC0655333, 0xCFE56D66, 0x61B1BD8A, 0xCAF4B9A0, 0x81DA8A0A, 0x9DB94D5E,
    0x63A69F22, 0x6900AC33, 0x8ADBEB2B, 0x2D8241ED, 0x0940F7BB, 0x1EE1E687, 0x21DE794E,
    0x0F65BE09, 0xB88F0360, 0xD8F0CA73, 0xE33D2F24, 0x94EBF3D9, 0x2E9D499F, 0xEC2641F8,
    0x1A6729E0, 0x182E7DC9, 0x23D3E1D5, 0x7CA6076E, 0xD4C616D9, 0xAC6C4FCB, 0x03A9FB85,
    0xCF9BF0FC, 0x3F3F2F9F, 0x5417DC03, 0x67F5F108, 0x8CC65EE0, 0x5A4AE025, 0x83E07708,
    0xC5A3CD6E, 0xF0192882, 0x18EA819D, 0x661BC993, 0x87C3318C, 0xC2A415F6, 0x21983C0C,
    0xA8C62647, 0x06266073, 0x07924850, 0x0ED7C8C9, 0x4878872D, 0x8D0F4B1E, 0xE82D0871,
    0x078C97A5, 0x84242E2E, 0xB3B5E08A, 0x9C27180A, 0xAB18C275, 0x3A9D78F4, 0x50790572,
    0xB75D3317, 0x403C204D, 0xDB2043C6, 0x174F9760, 0xC6F41652, 0x924CED75, 0x4C396C83,
    0x6F70E4E2, 0x22902984, 0x8B13E5CE, 0x67262D13, 0x54B11380, 0x52229C39, 0x7109F00E,
    0x9C81C8EA, 0x41C81280, 0x049F6E24, 0x930260B8, 0x025A26E1, 0x86902652, 0x02D1B767,
    0x0C127DE9, 0x60361B83, 0x00E6EA28, 0xDB836060, 0x57728330, 0x61AC7581, 0x079BA133,
    0x6B2A2169, 0xDBE6F0CF, 0x66B0CC03, 0xB2751E0F, 0x7801907A, 0x331A06D8, 0x4096CA37,
    0x02C5A081, 0x790BAEA4, 0xC66B0B10, 0x019B1A5C, 0xCDE6ACBD, 0xB496C812, 0xF595A504,
    0xA5696B92, 0x210FC680, 0x50DB56CE, 0xF7EC8702, 0x1DB12959, 0x59391A02, 0x0F128B8A,
    0x48765587, 0x76806969, 0x9AEEAC8B, 0xA02E8154, 0x109991A5, 0x0FC62AE6, 0x84FEF91E,
    0xF189C047, 0x1860A513, 0xBB1945E4, 0x6F050305, 0x7BE0E765, 0x52D100D6, 0x11A94C66,
    0xB10124B3, 0xE9E2F589, 0x66547B5C, 0x3142C769, 0x751ED95A, 0x28994C01, 0xD3FCA323,
    0xA650A200, 0x38155CF0, 0x3223589C, 0x6508D553, 0x00359B15, 0xD1C98ABF, 0x50725573,
    0x53CC4BA6, 0x7B58AC95, 0x06055747, 0x355B2C65, 0x117BC203, 0x7855B51C, 0x7E1DBC08,
    0xE7C622A8, 0x99C164D6, 0x034C33D8, 0xE86275D5, 0xB7565D92, 0x143D6989, 0x15EE7A09,
    0x536EB6CB, 0x7CA34065, 0x510243D9, 0x4C95EF7C, 0x955779B8, 0xD1888C40, 0x8912D432,
    0xE1716385, 0x4E105554, 0x6502D462, 0xE57C9740, 0x65E435F3, 0x5BB750CD, 0xD29DE0DB,
    0xC18D7CDA, 0xC4635D39, 0x0E0493FD, 0xE9CA25EE, 0xD7CCD575, 0xA4A31C3C, 0x90DE5F2E,
    0x0C5CFB06, 0x2116EB60, 0x16EEB5A7, 0x4EEE673F, 0xB3580E57, 0x0DE3CF35, 0xF017CCFD,
    0x0845D7C6, 0x84A33C62, 0x616EAF81, 0x64F47A23, 0x5EAAF019, 0xD28060F6, 0xD3F17BF4,
    0xF174F72E, 0x25F41880, 0x5EDCD031, 0x982FA096, 0xA3C17C25, 0xF06C493B, 0xF2ED4ED5,
    0x9AC1259B, 0x490E916C, 0xB63BE006, 0x817FABF8, 0xBC5ED7A9, 0x4483B691, 0x68DB2F81,
    0x72AD0220, 0x8144BE39, 0x0BD34424, 0x18282615, 0x1745F02A, 0xF241090D, 0x0E0CF2BA,
    0x6D6C260E, 0x148287E1, 0x60BE0812, 0x718184C6, 0xB1025F02, 0x4E4C0190, 0xA184252F,
    0x96C85060, 0x00104870, 0x15CBE03F, 0x2D182874, 0x093005F0, 0x7C5B90B9, 0xD8C0C448,
    0x48992F70, 0xD80000C8, 0x51343A95, 0x4BD87530, 0x84281A3B, 0x7F83D8BD, 0x048B2C57,
    0x2416C7B0, 0x7A7E841A, 0x03185D79, 0xC4B73B23, 0x743720EF, 0x38D6F9CB, 0x65E9F517,
    0xC0F1071B, 0x4741B05E, 0x2DAF7CC1, 0x028822C7, 0x3E87E2DD, 0x7B0FC606, 0x02412039,
    0x192496C7, 0xD8272E92, 0x3208E28B, 0x45763200, 0x8C0C8F1A, 0x8F32F434, 0x2F60E591,
    0x5D24CAF3, 0x1B16E76E, 0x7A8B2410, 0xCB28A399, 0x18B74762, 0xD0AB206D, 0x395716CB,
    0x65EA2997, 0x17890415, 0xCB46DA5B, 0x2DADC0B3, 0x054818E4, 0x5E8662F6, 0x7B0CC5CE,
    0xF5174D81, 0x9E6302A2, 0x897B0545, 0x32DCD252, 0xC596674B, 0x13696E96, 0x96E4FE00,
    0x2CF3585B, 0x27CBD0B7, 0xB72B5204, 0x659BF0D0, 0x985B5F21, 0xB5F79021, 0x24E88365,
    0x02DD078B, 0x6048000F, 0x678C8E2F, 0x17A92255, 0x7C00C009, 0x4B27D43F, 0xAEB9F006,
    0x6E81E0C0, 0xC94086A9, 0x44BD0D52, 0x996D9A61, 0xC2A942E4, 0xC1C8AEC8, 0xC4996D6C,
    0x0932AB44, 0x138228BD, 0x46E2B17A, 0xB6CA82A7, 0x7A15C270, 0x8948D301, 0xC4B74462,
    0x415E6402, 0xB2894AC2, 0xE318B6CC, 0xE5315E8F, 0xCFF2854C, 0x2D91C5EC, 0x4FE9DC2B,
    0x7097A042, 0xCC2D8CE8, 0x3049EA13, 0xB87817A0, 0x52C12D93, 0xC01E4AAA, 0xE579E149,
    0x0955527E, 0x5593C203, 0xABB570A0, 0x560F092C, 0xAD926AC1, 0x512F4F82, 0xA8492B25,
    0x7AA7A11A, 0x4D6AA925, 0xF9E95308, 0x3504AF53, 0x2A2C21AE, 0x53A2BB4E, 0xA7A492BC,
    0xA686C16D, 0xBF5322DC, 0x6CA6A492, 0xDD4A0631, 0x32C352A2, 0x716DA5A4, 0x22DD4805,
    0xA42EC752, 0x04E16CA4, 0x51A2D946, 0xA3A42ECB, 0x4404516E, 0xCF5122D9, 0xAE9C2422,
    0x145B6844, 0x3484DA6A, 0x00512DD4, 0x11F25B2C, 0x5412C750, 0xA7B8302F, 0x5AD9F25E,
    0x2DD3F082, 0x576B71C8, 0x825BD9E0, 0xE496415C, 0x8AFB0BD4, 0xB275102B, 0xD4DB9D85,
    0x3B99378B, 0x549AD410, 0x4AF5A320, 0xCD8B9935, 0xB11368B6, 0x7311096C, 0x814D105B,
    0xC52F530C, 0xF5322EA4, 0x7A5D1BC2, 0xFDC59785, 0x82090F65, 0x56D6590A, 0x0B65DDAD,
    0xBF92082A, 0x95B73254, 0x40A0116D, 0xE64A0066, 0x302DB292, 0x2F55A4A0, 0x464DDCC9,
    0xED156628, 0xFB2D6F0A, 0x641A88DB, 0x64296D90, 0x17A9116B, 0x8F440E45, 0x6B63E17A,
    0x4095DAF7, 0x72730412, 0x43106D34, 0xBA34108C, 0x9586BE05, 0x68DE5B2F, 0xE5BB1590,
    0xE31D968B, 0x9058CC5E, 0xB2A5B2FC, 0x5B2CC57E, 0x174121D4, 0x7E8985B7, 0x685EA27D,
    0xB700107C, 0xED785565, 0x69545F02, 0xD0920290, 0x8AF43CB0, 0xC2D21837, 0xAD50BCBD,
    0x432735AA, 0x1C97B844, 0x5DCB35AA, 0xAC436151, 0x76E216EB, 0x25D29E75, 0x12DB9849,
    0xD056B03A, 0xB14403CB, 0x5526E45B, 0xBEEE81D2, 0x272FE902, 0x125526FF, 0x022BD258,
    0xA803086E, 0xEED295D8, 0x515DC234, 0xE21958C7, 0x6E54B75C, 0x9E7B8CA7, 0x95DD0EF5,
    0x0194EDDC, 0xF89E5575, 0x02BCE250, 0x6EC0F4CF, 0x2A4A1EA9, 0x10AF60B0, 0x9BC8A56F,
    0x52175C1D, 0x2378B6E9, 0x807CE8AD, 0x5CB2BD95, 0x310FFC94, 0x1B685C6A, 0x93460965,
    0xA62F59F8, 0x10EA6813, 0xDC956403, 0xD39A2F79, 0x5310E7A7, 0x9A64A067, 0x67438E2F,
    0xE96BDC05, 0x2BDA40A1, 0xE1E6B383, 0x9FE8E312, 0xB7313A18, 0x0D219ED8, 0x11F066C0,
    0xD642287A, 0x29338C0B, 0x655290E3, 0xCB6E6800, 0x6A5944D8, 0x2AADA0BE, 0x5B611830,
    0x63C7DCF8, 0x091F85EB, 0x12D38AB6, 0x2E3EB503, 0x2355313B, 0xF2F7BB4B, 0x776635CA,
    0x4B2DD32F, 0xEAA328CE, 0x2F9BF626, 0x0FCB3B41, 0x5116DE04, 0x067E5BA8, 0xA87FB618,
    0xA385964C, 0x4BFD709B, 0x12F7C4C0, 0x30665AF1, 0xF598C931, 0x38802AE9, 0xD002DCC5,
    0xC3F8D943, 0x89BBBE58, 0x55E74D01, 0xCB4141F9, 0xE9EE61A7, 0xE0F932A7, 0x5BD660B1,
    0xBD205D19, 0x4D02FB67, 0xEA83337A, 0x61639CC4, 0x51C21390, 0x6E4A1315, 0x3010EB79,
    0x48B91A3F, 0x40D96F2E, 0xF8E1356B, 0x109CD472, 0xE2E8C4EA, 0x161983E4, 0xD771686B,
    0xDBE08588, 0x7256697C, 0x3F2B6568, 0x064DDDE0, 0x11A703F0, 0xE5532C03, 0x2AAA313B,
    0x136EAB98, 0x6A64F72B, 0xBC386653, 0x06600C7B, 0x5486833D, 0xB2C04A02, 0x360E4370,
    0x093DDDA4, 0x3FB70360, 0x27D38B13, 0xC5930067, 0xED8AA04D, 0xEA1D429B, 0x7A009C36,
    0x9B7B366C, 0xEA42947C, 0x2941F9BD, 0x7D9A0E96, 0xCF4C694B, 0x4B7892B9, 0xEC408303,
    0x64DA357A, 0xCF881695, 0x02106D9A, 0x021181EC, 0x9C3F3C21, 0x5759407C, 0x70FD583F,
    0x6686648C, 0x6905459A, 0x89708558, 0xB3E00E43, 0x81EAEB2A, 0x61142DC7, 0xBED01B06,
    0x81B01224, 0x8B711419, 0xEAC73FF5, 0xFD74F31D, 0x90CC0ED1, 0x06607509, 0xA221F045,
    0x521F0063, 0x07506604, 0x8C0CC099, 0xD1FF1E06, 0x21074633, 0x18106119, 0x731011A8,
    0x81B7F034, 0xFF81B81A, 0x73648000, 0x10582030, 0x9030381B, 0x18181F03, 0x1F520F82,
    0x0F1E73B0, 0xA1FD82E2, 0x3B070D0E, 0xF364600F, 0x61F38341, 0x3A76B809, 0x3B4E5033,
    0xC1FC8288, 0x3F239B0C, 0xCF7FE069, 0x01E083C1, 0x41361E0F, 0xAD08400F, 0xF84C1CE6,
    0x0840F31C, 0x1240883F, 0x778B08A0, 0x1C38551B, 0xF708A0F6, 0x701541C7, 0x1AB81308,
    0xED1AC85F, 0xC7570870, 0x7DC29241, 0x9F8691AC, 0xE0690DB1, 0x04B47D7A, 0x8985D0A8,
    0x61898721, 0x6970A50F, 0x6000F4DF, 0x48683190, 0x0BD1AB84, 0xD6859060, 0xC6241854,
    0x58187C17, 0x3655218D, 0xE87008A0, 0x15C88F16, 0x7D08A0DB, 0x901E5605, 0x8530B106,
    0x3789715C, 0x90B10F31, 0x58662606, 0xE214702D, 0x98A214A7, 0x06F14F11, 0x2E5CC7CB,
    0xC09C06F1, 0x1188A00C, 0xCC0F387C, 0xD13C09C0, 0x00C5C586, 0x14112110, 0x60F911C1,
    0x11613910, 0x2009911E, 0x76930331, 0x00010134, 0x00000000

  EW_BITMAPS_TABLE( XFlatWheelLargeBack )
    EW_BITMAP( XFlatWheelLargeBack, Default )
EW_END_OF_BITMAP_RES( XFlatWheelLargeBack )

/* Table with links to derived variants of the bitmap resource : 'XFlat::WheelLargeBack' */
EW_RES_WITHOUT_VARIANTS( XFlatWheelLargeBack )

/* Bitmap resources used for the different widgets. The implementation of the widgets 
   depends on these bitmap resources. */
EW_DEFINE_BITMAP_RES( XFlatWheelLargeIndicator )
  EW_BITMAP_FRAMES( XFlatWheelLargeIndicator, Default, EW_DRIVER_VARIANT_ALPHA8, 102, 102, 0 )
    EW_BITMAP_FRAME( 60, 9, 42, 15, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatWheelLargeIndicator, Default )     /* ratio 7.34 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0x9FF0C85C, 0x231087C3, 0xB0C87C4A, 0x188BC5A2,
    0xC898320F, 0x8FC663B1, 0x7C0E4320, 0xC424B1D0, 0xAA532279, 0xA4C1885C, 0x632B784B,
    0xC24814CA, 0x3370C9A5, 0x61B4A673, 0x9D3624B3, 0xE9223F40, 0xD058D1D9, 0x10BB16A3,
    0xA90B18E5, 0x96788553, 0xB4F4FC4E, 0x524CC1AA, 0xCAB22A25, 0xACADE055, 0xE574E511,
    0xC42C0D8A, 0x1AAB632B, 0xA1F667E0, 0x614FB48D, 0x01587DB4, 0x73A553AE, 0xDA45DA51,
    0x6ABFEE68, 0xF30E917B, 0xD0702A8B, 0xE2FCF604, 0x87340C31, 0x184B7FDF, 0xD7EA8CEB,
    0x839CE483, 0x3CBBB6E7, 0x5BDFB113, 0x792E659C, 0x4C7427BC, 0x987F7EAC, 0x9DA03956,
    0x56097CDF, 0x77ED1CA7, 0x9F94EC98, 0x1DBA071E, 0xC7BCC192, 0x1C83783C, 0x00DDB8F3,
    0x3D931FE1, 0xA33C852E, 0x9A5AC7DC, 0xD8F51463, 0x16E9031E, 0xEBF5B03D, 0x4545BB0A,
    0xF745FF8F, 0x6FC2B0BE, 0x9362F6BF, 0xF977D857, 0x121B857A, 0x3EF2163F, 0xDBF0A5A1,
    0xB1E423EA, 0xFD58AFDD, 0x4CF00D05, 0x05D4F978, 0x84694120, 0x07288FF7, 0x79C1B412,
    0xE0D0A98F, 0x0828A540, 0x080084DA, 0x453FE0A1, 0x39C15860, 0x2183320A, 0x88295F00,
    0x6C7B8604, 0xFC84D468, 0x835F486D, 0x61B39015, 0x500E132F, 0xC0FC7862, 0x1B7DE130,
    0x21E1325A, 0x0F33FE1B, 0x18260D06, 0x6A0762E4, 0xD2785FD1, 0x10A07018, 0xCFC904F9,
    0x00F2005B, 0x1C9082A1, 0x1B7C8488, 0x7E9D7386, 0xA5294451, 0xB1B1FA6A, 0xD5A582A4,
    0x4124C037, 0x71CBA43E, 0x637055EF, 0xB818E790, 0xB6320F1E, 0x2F3F0FF9, 0x99C787AE,
    0x5E49A61B, 0xF9E8BA05, 0x7A702F50, 0x869E4427, 0x061E49D6, 0x90EA19D4, 0x374A543D,
    0x48F01B00, 0x4E3F10EA, 0x80C39778, 0x5FF43A9A, 0x12701B73, 0x489343EA, 0x62264217,
    0x7220CA9E, 0xA8027C2D, 0x2A24ABA4, 0x9CAE0CDB, 0x4E2D111A, 0x1C8186CA, 0x10FAEAA0,
    0x9685EA2D, 0x08B415C0, 0xBD2AD12B, 0x1441265E, 0x6CAA649F, 0xBAD89F44, 0x284B0317,
    0x1CB4CD22, 0x0617BAA5, 0x89019839, 0xC496DC31, 0xCC0C5586, 0x66120330, 0x3309C1EC,
    0x91CB9657, 0x253C543D, 0x54E75CEF, 0x66BDD48A, 0x556442E9, 0x8FC54AFC, 0x4C055D1F,
    0x5A7D3914, 0xBA4DB065, 0xC2D5C9D8, 0x176C0D25, 0x13791CC4, 0x4714C4DC, 0x1897C8D4,
    0x348FFC67, 0x310C76FA, 0x1B34723C, 0xFC9CC658, 0xC0C4192B, 0xC19A18E8, 0x19CC24C9,
    0x7644CCBF, 0xC8BABC9B, 0xF9B4DABC, 0x7482D27C, 0x875362C2, 0x6A85C8C3, 0x9264288F,
    0xAE3DA867, 0x7AEC5144, 0x0A83AA41, 0x17EB1C15, 0x847E301E, 0xED59A07C, 0x0FC782D0,
    0x53D88F26, 0x5288CC3E, 0x8C1B1207, 0xFC43D098, 0x2BB6E330, 0x86626499, 0xA0483316,
    0x010145B6, 0x00000000

  EW_BITMAPS_TABLE( XFlatWheelLargeIndicator )
    EW_BITMAP( XFlatWheelLargeIndicator, Default )
EW_END_OF_BITMAP_RES( XFlatWheelLargeIndicator )

/* Table with links to derived variants of the bitmap resource : 'XFlat::WheelLargeIndicator' */
EW_RES_WITHOUT_VARIANTS( XFlatWheelLargeIndicator )

/* Font resources used for the different widgets. If you want to change the fonts 
   within your project, just create a variant of these font resources and define 
   the attributes of the font resources according your design ideas. */
EW_DEFINE_FONT_RES( XFlatFontL, 28, 8, 0, 16, 0x0001, 0x00C0 )
  EW_GLYPH( 0x0001, 1, -21, 11, 21, 13, 0x00000000 ),
  EW_GLYPH( 0x0020, 0, 0, 0, 0, 7, 0x00000297 ),                /* ' ' */
  EW_GLYPH( 0x0021, 2, -21, 3, 21, 7, 0x00000297 ),             /* '!' */
  EW_GLYPH( 0x0022, 2, -23, 5, 7, 9, 0x0000031B ),              /* '"' */
  EW_GLYPH( 0x0023, 1, -21, 17, 21, 17, 0x00000371 ),           /* '#' */
  EW_GLYPH( 0x0024, 1, -25, 15, 28, 17, 0x000006E6 ),           /* '$' */
  EW_GLYPH( 0x0025, 1, -21, 20, 21, 22, 0x00000B03 ),           /* '%' */
  EW_GLYPH( 0x0026, 1, -21, 17, 21, 18, 0x00000F6D ),           /* '&' */
  EW_GLYPH( 0x0027, 1, -23, 3, 7, 5, 0x0000137C ),              /* ''' */
  EW_GLYPH( 0x0028, 2, -24, 8, 31, 10, 0x000013A8 ),            /* '(' */
  EW_GLYPH( 0x0029, 0, -24, 8, 31, 10, 0x000015DD ),            /* ')' */
  EW_GLYPH( 0x002A, 0, -21, 13, 12, 13, 0x0000180B ),           /* '*' */
  EW_GLYPH( 0x002B, 1, -18, 15, 17, 17, 0x000019D5 ),           /* '+' */
  EW_GLYPH( 0x002C, 0, -3, 4, 7, 6, 0x00001B6A ),               /* ',' */
  EW_GLYPH( 0x002D, 0, -10, 8, 2, 9, 0x00001BBB ),              /* '-' */
  EW_GLYPH( 0x002E, 2, -3, 3, 3, 7, 0x00001BED ),               /* '.' */
  EW_GLYPH( 0x002F, 0, -21, 11, 23, 12, 0x00001C1D ),           /* '/' */
  EW_GLYPH( 0x0030, 2, -21, 14, 21, 17, 0x00001E21 ),           /* '0' */
  EW_GLYPH( 0x0031, 2, -21, 9, 21, 17, 0x00002105 ),            /* '1' */
  EW_GLYPH( 0x0032, 1, -21, 15, 21, 17, 0x0000223D ),           /* '2' */
  EW_GLYPH( 0x0033, 1, -21, 14, 21, 17, 0x00002552 ),           /* '3' */
  EW_GLYPH( 0x0034, 1, -21, 16, 21, 17, 0x000028AA ),           /* '4' */
  EW_GLYPH( 0x0035, 2, -21, 14, 21, 17, 0x00002B16 ),           /* '5' */
  EW_GLYPH( 0x0036, 2, -21, 14, 21, 17, 0x00002E31 ),           /* '6' */
  EW_GLYPH( 0x0037, 1, -21, 15, 21, 17, 0x0000317A ),           /* '7' */
  EW_GLYPH( 0x0038, 1, -21, 15, 21, 17, 0x00003416 ),           /* '8' */
  EW_GLYPH( 0x0039, 1, -21, 14, 21, 17, 0x000037C4 ),           /* '9' */
  EW_GLYPH( 0x003A, 2, -17, 3, 17, 6, 0x00003B1E ),             /* ':' */
  EW_GLYPH( 0x003B, 0, -17, 5, 21, 6, 0x00003BAA ),             /* ';' */
  EW_GLYPH( 0x003C, 1, -16, 13, 13, 15, 0x00003C7A ),           /* '<' */
  EW_GLYPH( 0x003D, 2, -14, 13, 8, 17, 0x00003E8C ),            /* '=' */
  EW_GLYPH( 0x003E, 1, -16, 14, 13, 16, 0x00003F99 ),           /* '>' */
  EW_GLYPH( 0x003F, 1, -21, 12, 21, 14, 0x000041B2 ),           /* '?' */
  EW_GLYPH( 0x0040, 1, -21, 25, 28, 27, 0x000043FD ),           /* '@' */
  EW_GLYPH( 0x0041, 0, -21, 19, 21, 19, 0x00004B60 ),           /* 'A' */
  EW_GLYPH( 0x0042, 2, -21, 15, 21, 18, 0x00004EE2 ),           /* 'B' */
  EW_GLYPH( 0x0043, 1, -21, 17, 21, 19, 0x000051EA ),           /* 'C' */
  EW_GLYPH( 0x0044, 2, -21, 16, 21, 20, 0x00005562 ),           /* 'D' */
  EW_GLYPH( 0x0045, 2, -21, 14, 21, 17, 0x00005811 ),           /* 'E' */
  EW_GLYPH( 0x0046, 2, -21, 14, 21, 17, 0x00005A27 ),           /* 'F' */
  EW_GLYPH( 0x0047, 2, -21, 17, 21, 21, 0x00005C0E ),           /* 'G' */
  EW_GLYPH( 0x0048, 2, -21, 17, 21, 21, 0x00005FA4 ),           /* 'H' */
  EW_GLYPH( 0x0049, 3, -21, 2, 21, 8, 0x0000618A ),             /* 'I' */
  EW_GLYPH( 0x004A, 1, -21, 14, 21, 17, 0x000061C0 ),           /* 'J' */
  EW_GLYPH( 0x004B, 2, -21, 17, 21, 19, 0x000063BE ),           /* 'K' */
  EW_GLYPH( 0x004C, 2, -21, 13, 21, 16, 0x000066C3 ),           /* 'L' */
  EW_GLYPH( 0x004D, 2, -21, 22, 21, 26, 0x0000680B ),           /* 'M' */
  EW_GLYPH( 0x004E, 2, -21, 17, 21, 21, 0x00006BB8 ),           /* 'N' */
  EW_GLYPH( 0x004F, 1, -21, 18, 21, 20, 0x00006E43 ),           /* 'O' */
  EW_GLYPH( 0x0050, 2, -21, 15, 21, 18, 0x000071EB ),           /* 'P' */
  EW_GLYPH( 0x0051, 1, -21, 18, 25, 20, 0x0000746B ),           /* 'Q' */
  EW_GLYPH( 0x0052, 2, -21, 16, 21, 19, 0x000078AA ),           /* 'R' */
  EW_GLYPH( 0x0053, 1, -21, 16, 21, 18, 0x00007B82 ),           /* 'S' */
  EW_GLYPH( 0x0054, 0, -21, 18, 21, 18, 0x00007F89 ),           /* 'T' */
  EW_GLYPH( 0x0055, 2, -21, 16, 21, 20, 0x0000818C ),           /* 'U' */
  EW_GLYPH( 0x0056, 0, -21, 19, 21, 19, 0x000083D1 ),           /* 'V' */
  EW_GLYPH( 0x0057, 0, -21, 27, 21, 27, 0x0000872F ),           /* 'W' */
  EW_GLYPH( 0x0058, 0, -21, 18, 21, 18, 0x00008C26 ),           /* 'X' */
  EW_GLYPH( 0x0059, 0, -21, 18, 21, 18, 0x00008FDC ),           /* 'Y' */
  EW_GLYPH( 0x005A, 1, -21, 16, 21, 18, 0x000092A2 ),           /* 'Z' */
  EW_GLYPH( 0x005B, 2, -24, 6, 29, 7, 0x00009591 ),             /* '[' */
  EW_GLYPH( 0x005C, 0, -21, 12, 23, 12, 0x00009678 ),           /* '\' */
  EW_GLYPH( 0x005D, 0, -24, 5, 29, 7, 0x0000988C ),             /* ']' */
  EW_GLYPH( 0x005E, 0, -21, 11, 10, 12, 0x00009951 ),           /* '^' */
  EW_GLYPH( 0x005F, 0, 0, 13, 2, 13, 0x00009A8C ),              /* '_' */
  EW_GLYPH( 0x0060, 1, -22, 6, 4, 9, 0x00009ADC ),              /* '`' */
  EW_GLYPH( 0x0061, 1, -16, 14, 16, 16, 0x00009B33 ),           /* 'a' */
  EW_GLYPH( 0x0062, 2, -23, 14, 23, 17, 0x00009DE8 ),           /* 'b' */
  EW_GLYPH( 0x0063, 1, -16, 13, 16, 15, 0x0000A088 ),           /* 'c' */
  EW_GLYPH( 0x0064, 1, -23, 14, 23, 17, 0x0000A2EC ),           /* 'd' */
  EW_GLYPH( 0x0065, 1, -16, 14, 16, 16, 0x0000A58C ),           /* 'e' */
  EW_GLYPH( 0x0066, 1, -23, 10, 23, 10, 0x0000A84E ),           /* 'f' */
  EW_GLYPH( 0x0067, 1, -16, 14, 22, 17, 0x0000A9DE ),           /* 'g' */
  EW_GLYPH( 0x0068, 2, -23, 12, 23, 16, 0x0000AD1E ),           /* 'h' */
  EW_GLYPH( 0x0069, 2, -22, 3, 22, 7, 0x0000AEDD ),             /* 'i' */
  EW_GLYPH( 0x006A, -2, -22, 7, 28, 7, 0x0000AF5F ),            /* 'j' */
  EW_GLYPH( 0x006B, 2, -23, 13, 23, 15, 0x0000B0A1 ),           /* 'k' */
  EW_GLYPH( 0x006C, 2, -23, 3, 23, 7, 0x0000B2EF ),             /* 'l' */
  EW_GLYPH( 0x006D, 2, -16, 23, 16, 27, 0x0000B340 ),           /* 'm' */
  EW_GLYPH( 0x006E, 2, -16, 12, 16, 16, 0x0000B615 ),           /* 'n' */
  EW_GLYPH( 0x006F, 1, -16, 15, 16, 17, 0x0000B789 ),           /* 'o' */
  EW_GLYPH( 0x0070, 2, -16, 14, 22, 17, 0x0000BA4B ),           /* 'p' */
  EW_GLYPH( 0x0071, 1, -16, 14, 22, 17, 0x0000BCFA ),           /* 'q' */
  EW_GLYPH( 0x0072, 2, -16, 8, 16, 10, 0x0000BFA1 ),            /* 'r' */
  EW_GLYPH( 0x0073, 1, -16, 13, 16, 15, 0x0000C083 ),           /* 's' */
  EW_GLYPH( 0x0074, 0, -20, 9, 20, 10, 0x0000C34F ),            /* 't' */
  EW_GLYPH( 0x0075, 2, -16, 12, 16, 16, 0x0000C48E ),           /* 'u' */
  EW_GLYPH( 0x0076, 0, -16, 14, 16, 14, 0x0000C5EE ),           /* 'v' */
  EW_GLYPH( 0x0077, 0, -16, 22, 16, 23, 0x0000C825 ),           /* 'w' */
  EW_GLYPH( 0x0078, 0, -16, 14, 16, 15, 0x0000CBAB ),           /* 'x' */
  EW_GLYPH( 0x0079, 0, -16, 14, 22, 14, 0x0000CE14 ),           /* 'y' */
  EW_GLYPH( 0x007A, 1, -16, 13, 16, 15, 0x0000D0FF ),           /* 'z' */
  EW_GLYPH( 0x007B, 1, -23, 9, 29, 10, 0x0000D315 ),            /* '{' */
  EW_GLYPH( 0x007C, 2, -21, 3, 25, 7, 0x0000D53C ),             /* '|' */
  EW_GLYPH( 0x007D, 0, -23, 9, 29, 10, 0x0000D593 ),            /* '}' */
  EW_GLYPH( 0x007E, 2, -12, 17, 6, 21, 0x0000D7B4 ),            /* '~' */
  EW_GLYPH( 0x00A0, 0, 0, 0, 0, 7, 0x0000D914 ),
  EW_GLYPH( 0x00A1, 2, -16, 3, 21, 7, 0x0000D914 ),
  EW_GLYPH( 0x00A2, 1, -19, 14, 23, 16, 0x0000D995 ),
  EW_GLYPH( 0x00A3, 1, -21, 15, 21, 17, 0x0000DC7F ),
  EW_GLYPH( 0x00A4, 1, -19, 20, 20, 22, 0x0000DF33 ),
  EW_GLYPH( 0x00A5, 0, -21, 18, 21, 18, 0x0000E3B4 ),
  EW_GLYPH( 0x00A6, 2, -21, 3, 25, 7, 0x0000E71E ),
  EW_GLYPH( 0x00A7, 1, -21, 16, 28, 18, 0x0000E78D ),
  EW_GLYPH( 0x00A8, 2, -22, 9, 3, 13, 0x0000ED16 ),
  EW_GLYPH( 0x00A9, 1, -21, 22, 21, 24, 0x0000ED74 ),
  EW_GLYPH( 0x00AA, 2, -21, 9, 11, 13, 0x0000F32D ),
  EW_GLYPH( 0x00AB, 1, -14, 12, 12, 14, 0x0000F4BA ),
  EW_GLYPH( 0x00AC, 1, -11, 13, 6, 16, 0x0000F678 ),
  EW_GLYPH( 0x00AD, 0, -10, 8, 2, 9, 0x0000F728 ),
  EW_GLYPH( 0x00AE, 1, -21, 22, 21, 24, 0x0000F75A ),
  EW_GLYPH( 0x00AF, 1, -22, 11, 2, 13, 0x0000FCA9 ),
  EW_GLYPH( 0x00B0, 1, -21, 9, 8, 11, 0x0000FCEC ),
  EW_GLYPH( 0x00B1, 1, -19, 14, 19, 16, 0x0000FDD9 ),
  EW_GLYPH( 0x00B2, 1, -21, 9, 12, 11, 0x0000FFAA ),
  EW_GLYPH( 0x00B3, 1, -21, 9, 12, 11, 0x00010118 ),
  EW_GLYPH( 0x00B4, 1, -22, 6, 4, 8, 0x000102AF ),
  EW_GLYPH( 0x00B5, 2, -16, 13, 22, 17, 0x000102FF ),
  EW_GLYPH( 0x00B6, 1, -21, 11, 21, 14, 0x000104D3 ),
  EW_GLYPH( 0x00B7, 2, -12, 3, 3, 7, 0x00010661 ),
  EW_GLYPH( 0x00B8, 1, 0, 5, 6, 7, 0x0001068D ),
  EW_GLYPH( 0x00B9, 1, -21, 6, 12, 11, 0x00010711 ),
  EW_GLYPH( 0x00BA, 2, -21, 10, 11, 14, 0x000107A6 ),
  EW_GLYPH( 0x00BB, 1, -14, 12, 12, 14, 0x0001091E ),
  EW_GLYPH( 0x00BC, 1, -21, 20, 21, 22, 0x00010AE8 ),
  EW_GLYPH( 0x00BD, 1, -21, 20, 21, 23, 0x00010E73 ),
  EW_GLYPH( 0x00BE, 2, -21, 21, 21, 23, 0x00011245 ),
  EW_GLYPH( 0x00BF, 1, -16, 12, 21, 14, 0x000116D5 ),
  EW_GLYPH( 0x00C0, 0, -27, 19, 27, 19, 0x00011914 ),
  EW_GLYPH( 0x00C1, 0, -27, 19, 27, 19, 0x00011D55 ),
  EW_GLYPH( 0x00C2, 0, -27, 19, 27, 19, 0x0001218C ),
  EW_GLYPH( 0x00C3, 0, -29, 19, 29, 19, 0x000125FF ),
  EW_GLYPH( 0x00C4, 0, -27, 19, 27, 19, 0x00012AC3 ),
  EW_GLYPH( 0x00C5, 0, -29, 19, 29, 19, 0x00012F10 ),
  EW_GLYPH( 0x00C6, 0, -21, 27, 21, 27, 0x000133B1 ),
  EW_GLYPH( 0x00C7, 1, -21, 17, 27, 19, 0x00013838 ),
  EW_GLYPH( 0x00C8, 2, -27, 14, 27, 17, 0x00013C96 ),
  EW_GLYPH( 0x00C9, 2, -27, 14, 27, 17, 0x00013F4D ),
  EW_GLYPH( 0x00CA, 2, -27, 14, 27, 17, 0x000141FA ),
  EW_GLYPH( 0x00CB, 2, -27, 14, 27, 17, 0x000144E3 ),
  EW_GLYPH( 0x00CC, 0, -27, 6, 27, 8, 0x000147A6 ),
  EW_GLYPH( 0x00CD, 2, -27, 6, 27, 8, 0x000148A1 ),
  EW_GLYPH( 0x00CE, 0, -27, 9, 27, 8, 0x00014992 ),
  EW_GLYPH( 0x00CF, 0, -27, 9, 27, 8, 0x00014B10 ),
  EW_GLYPH( 0x00D0, 0, -21, 19, 21, 20, 0x00014C68 ),
  EW_GLYPH( 0x00D1, 2, -29, 17, 29, 21, 0x00014FB3 ),
  EW_GLYPH( 0x00D2, 1, -27, 18, 27, 20, 0x00015370 ),
  EW_GLYPH( 0x00D3, 1, -27, 18, 27, 20, 0x000157D1 ),
  EW_GLYPH( 0x00D4, 1, -27, 18, 27, 20, 0x00015C28 ),
  EW_GLYPH( 0x00D5, 1, -29, 18, 29, 20, 0x000160BB ),
  EW_GLYPH( 0x00D6, 1, -27, 18, 27, 20, 0x0001659D ),
  EW_GLYPH( 0x00D7, 1, -14, 14, 13, 16, 0x00016A0A ),
  EW_GLYPH( 0x00D8, 1, -22, 18, 23, 20, 0x00016C59 ),
  EW_GLYPH( 0x00D9, 2, -27, 16, 27, 20, 0x00017107 ),
  EW_GLYPH( 0x00DA, 2, -27, 16, 27, 20, 0x000173F9 ),
  EW_GLYPH( 0x00DB, 2, -27, 16, 27, 20, 0x000176E1 ),
  EW_GLYPH( 0x00DC, 2, -27, 16, 27, 20, 0x00017A05 ),
  EW_GLYPH( 0x00DD, 0, -27, 18, 27, 18, 0x00017D03 ),
  EW_GLYPH( 0x00DE, 2, -21, 15, 21, 18, 0x00018078 ),
  EW_GLYPH( 0x00DF, 2, -23, 15, 23, 18, 0x000182EB ),
  EW_GLYPH( 0x00E0, 1, -22, 14, 22, 16, 0x00018601 ),
  EW_GLYPH( 0x00E1, 1, -22, 14, 22, 16, 0x00018957 ),
  EW_GLYPH( 0x00E2, 1, -22, 14, 22, 16, 0x00018CA3 ),
  EW_GLYPH( 0x00E3, 1, -24, 14, 24, 16, 0x0001902B ),
  EW_GLYPH( 0x00E4, 1, -22, 14, 22, 16, 0x000193FA ),
  EW_GLYPH( 0x00E5, 1, -24, 14, 24, 16, 0x0001975C ),
  EW_GLYPH( 0x00E6, 1, -16, 24, 16, 25, 0x00019B08 ),
  EW_GLYPH( 0x00E7, 1, -16, 13, 22, 15, 0x00019FD0 ),
  EW_GLYPH( 0x00E8, 1, -22, 14, 22, 16, 0x0001A301 ),
  EW_GLYPH( 0x00E9, 1, -22, 14, 22, 16, 0x0001A664 ),
  EW_GLYPH( 0x00EA, 1, -22, 14, 22, 16, 0x0001A9BD ),
  EW_GLYPH( 0x00EB, 1, -22, 14, 22, 16, 0x0001AD52 ),
  EW_GLYPH( 0x00EC, -1, -22, 6, 22, 7, 0x0001B0C1 ),
  EW_GLYPH( 0x00ED, 2, -22, 6, 22, 7, 0x0001B19E ),
  EW_GLYPH( 0x00EE, -1, -22, 9, 22, 7, 0x0001B271 ),
  EW_GLYPH( 0x00EF, -1, -22, 9, 22, 7, 0x0001B3C2 ),
  EW_GLYPH( 0x00F0, 2, -23, 14, 23, 17, 0x0001B4ED ),
  EW_GLYPH( 0x00F1, 2, -24, 12, 24, 16, 0x0001B8B5 ),
  EW_GLYPH( 0x00F2, 1, -22, 15, 22, 17, 0x0001BB33 ),
  EW_GLYPH( 0x00F3, 1, -22, 15, 22, 17, 0x0001BE9C ),
  EW_GLYPH( 0x00F4, 1, -22, 15, 22, 17, 0x0001C1FB ),
  EW_GLYPH( 0x00F5, 1, -24, 15, 24, 17, 0x0001C596 ),
  EW_GLYPH( 0x00F6, 1, -22, 15, 22, 17, 0x0001C97A ),
  EW_GLYPH( 0x00F7, 1, -17, 15, 14, 17, 0x0001CCEF ),
  EW_GLYPH( 0x00F8, 1, -18, 15, 20, 17, 0x0001CE66 ),
  EW_GLYPH( 0x00F9, 2, -22, 12, 22, 16, 0x0001D20E ),
  EW_GLYPH( 0x00FA, 2, -22, 12, 22, 16, 0x0001D403 ),
  EW_GLYPH( 0x00FB, 2, -22, 12, 22, 16, 0x0001D5EE ),
  EW_GLYPH( 0x00FC, 2, -22, 12, 22, 16, 0x0001D815 ),
  EW_GLYPH( 0x00FD, 0, -22, 14, 28, 14, 0x0001DA16 ),
  EW_GLYPH( 0x00FE, 2, -23, 14, 29, 17, 0x0001DD98 ),
  EW_GLYPH( 0x00FF, 0, -22, 14, 28, 14, 0x0001E09F ),

  EW_FONT_PIXEL( XFlatFontL, 0x0001E437 )                       /* ratio 57.95 % */
    0xBDEF7BBF, 0x33FBDEF7, 0xDEF7BDEE, 0xCC07A83B, 0x7F80EF8F, 0xED40C631, 0x9DC5EF81,
    0x0118D290, 0x01F7CFDE, 0xC048E463, 0x39801EFF, 0x028E600A, 0x1803DFF8, 0xEF024723,
    0x4A40FBE7, 0x2F7C0463, 0x0318C4EE, 0x01DF07B5, 0x301EA2FF, 0xF7BDC63F, 0xE7877BDE,
    0x8000003E, 0xEE780009, 0x679CF000, 0xFFF1D9C7, 0x1C0B9EBF, 0x0C10A460, 0x7180B042,
    0x4016F207, 0x802940C5, 0x007703FF, 0x00550DA8, 0x7F910319, 0x7FBDEF78, 0xF1EF7BBF,
    0x0002FBDD, 0x677BDEF0, 0x1AEF7BDD, 0x3C17DEF7, 0x3004C603, 0x806CF0FE, 0x01E32161,
    0x0CB12278, 0x1EC0FD80, 0x7DEF77E0, 0xE77BDEEA, 0x002EF7B8, 0x1EF77E00, 0xF5EF7BBF,
    0x3C177BDE, 0x60078626, 0x0031E244, 0x01DC0FFE, 0x26780E60, 0xDC87F180, 0x02FFE000,
    0x00000000, 0x3BEA0000, 0x7C02F739, 0xBD1827BF, 0xEFC9FA03, 0xE31BFBDC, 0x4FDCCC43,
    0x78AABB50, 0x1DA00BE2, 0x4E460242, 0x1CC03FA6, 0xF0039C8C, 0x77F8E8BB, 0xD67CF002,
    0xE012B7FF, 0xFFD59D39, 0xFF5800DF, 0x02F6A2BD, 0xF474FA30, 0xF7F58003, 0x8C037F8A,
    0x0039111A, 0x8049EA24, 0x02F1FE14, 0xD5662A9E, 0x7EF1827E, 0xDF1ABE2E, 0x78CF77B9,
    0x9EFBF10B, 0x813DAC60, 0x777A3BE7, 0x00000002, 0xBCF77EA0, 0xAFE60001, 0x0001DCC4,
    0xCE9EFB9D, 0x540FBC17, 0x53D6219C, 0x18427350, 0xE7784FF0, 0x7B408000, 0x1FF01841,
    0x1502F98C, 0xE29EB077, 0xEC7A0156, 0x2B5F3B7B, 0x57F3007F, 0x6F91D9E2, 0xDDFA8007,
    0x99F785F3, 0xF3CF0000, 0xBFF7FEB2, 0x4DEFC400, 0x0FECA75F, 0x3D4B97E0, 0x9FFEFFCF,
    0x2E7A80A7, 0x5F94BF3B, 0x835DE06E, 0x68266098, 0xE630000D, 0x4CC1310B, 0xE760AB98,
    0x0DCBF297, 0x3E6A0BCF, 0x9E7FFBFF, 0x53B78002, 0xDF9E07F6, 0xF0017BB9, 0xFF46157E,
    0x77C66A00, 0x01351EEF, 0x7187BF7F, 0x207A406C, 0xB4808401, 0x9C42D701, 0xFE4F0131,
    0x007F6D42, 0x5BFD7C67, 0x598C003B, 0xF000FDEB, 0xE80010CC, 0x27A79D6F, 0xF5AD62A8,
    0x782E9EFA, 0xC69F7CAF, 0xA640DF57, 0xD5F05E27, 0x123AE549, 0x1389D6F8, 0xB7C0284B,
    0xDB0ACFFE, 0xD11C801B, 0x933D8D54, 0x1A29FF5C, 0xBFFBE55F, 0xF639DFF7, 0x7DF88B9C,
    0xB7F3924F, 0x33F4FBC7, 0x058203EE, 0x80BE2012, 0xC5F04FF8, 0x139F303F, 0x5E039E88,
    0xE02B982F, 0x189C0F89, 0xE23029E0, 0x1C031E0F, 0x52018413, 0x14800000, 0x4C700C20,
    0xC46018F0, 0xF80A781F, 0x3E2B00C7, 0x68056B10, 0x099E882F, 0xCF8073E6, 0x21FE202F,
    0x3F3C605F, 0x82F9FF10, 0x7A816778, 0x8273A05E, 0xB2701FAC, 0x1883F940, 0x38265405,
    0xA6094826, 0x00008603, 0x72C02900, 0x98E01A41, 0xC62122A0, 0x93836502, 0xE07D640F,
    0x6CC60B97, 0x883CF388, 0xCC60FCFF, 0x0EE3001F, 0x18000800, 0xC7800620, 0xA895FFDA,
    0x7F397CF7, 0xFD8FFDF5, 0xAA7FDE7B, 0xF987BFF7, 0x63C12BDF, 0xFD18013E, 0xE009CFBE,
    0x1F8DF2E4, 0x7E21C778, 0x2FDF84CF, 0x9802F4F1, 0x910001FF, 0x00000000, 0x00000000,
    0xEFFC0000, 0x7DB6F7BD, 0x07F7BDEF, 0x7BDFF800, 0xDEFB6DEF, 0x000FEF7B, 0x00000000,
    0x00000000, 0x9D600000, 0x80BBF001, 0x6E463E60, 0x18FFCB9D, 0xEF7BDEF7, 0xFA9D600F,
    0x1FC5FFE2, 0xC600FEC0, 0x3E5F00B8, 0x9801EB00, 0x2BFC01F1, 0x807F5901, 0xB3C0262F,
    0x803F2A00, 0x9E200633, 0x098CC01F, 0x2A0055F0, 0x0B3FC00F, 0x5801EB10, 0x957C01F1,
    0xC00E3180, 0xB9801E2F, 0x00F89E00, 0x3DCEFCF0, 0xBEF807BF, 0x07DF510A, 0xEE77E4FD,
    0x6269F2F9, 0x3C427EE6, 0xF19A6737, 0x78BF900B, 0x6CB00B6C, 0xC6200473, 0x15801723,
    0x10000000, 0x00000000, 0xC8000200, 0x99A66009, 0xB69C8801, 0x19B69809, 0xE37C826F,
    0x0CF63311, 0x4998DCF1, 0x3DCF78CF, 0xEF0D3E5F, 0xF7D442AF, 0x303B9801, 0xE783BCFA,
    0x3C18D7B7, 0xFFEFD55F, 0x057FFE60, 0x00009BCF, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xFFEE77EA, 0xAFEF007B, 0x0FDF3E42, 0xF77EB3BC, 0xC5EB379E, 0x115F9F33,
    0xDE4CC6F3, 0x957C80F8, 0x08600B1C, 0xC69000E1, 0x015B005D, 0x0013E620, 0xD000FCF8,
    0xD6000BF5, 0xB3000F5A, 0xDF300367, 0x79E005E7, 0xFA800F9F, 0xF5001F3D, 0xF5001F3D,
    0xC6003F3D, 0x7000FCF7, 0xF7BDEEA3, 0x5DEF7BDE, 0xFCC00002, 0x137E7B9D, 0x215BFF8C,
    0x9C41DDEA, 0xE7BDF67C, 0x674FE357, 0x5FA8837F, 0x0172B28D, 0x007D6DAE, 0x802EF08F,
    0xC74001C7, 0xCFF9C804, 0xDEFFC02F, 0x0176BBFF, 0x7FE01560, 0xFBE6F9EF, 0xB7E78801,
    0x8E80099E, 0x519E000F, 0x2B0007FF, 0x8C678037, 0x28E8059C, 0x303BDFAF, 0xFAAF95BE,
    0xEF7BEE62, 0xCF06F27E, 0xEF510AED, 0xF758013F, 0x02F90007, 0xC0012700, 0xF200171A,
    0xCE00035D, 0x79580068, 0x73BC6000, 0x06CDC000, 0x000BCE80, 0x0003BE63, 0xE8002E6E,
    0xD630003C, 0xF470009B, 0x7BDEF7BD, 0x1237BDD5, 0xBDEF7000, 0xAF7BDEF7, 0x0006F7BA,
    0x00000000, 0xEF000000, 0x7BDEF7BD, 0x0241BDEF, 0xDEF79580, 0x37BDEF7B, 0x910009C8,
    0x00074800, 0x59300121, 0x9BFFDCFB, 0x423D7E90, 0x8D713DCE, 0x67BBDCF7, 0xFDFBC5BC,
    0x57DE3067, 0xD6600F13, 0x7BF80018, 0x0008F000, 0xE00AFC60, 0x807F5111, 0x06B1C9ED,
    0xAE18CF50, 0x3EB9277F, 0xFF59F8CD, 0x6F1DFF7B, 0x906BD9E1, 0xCC404F73, 0x60177FEF,
    0x8049F7DD, 0xFFDFCDAF, 0xB53EF02E, 0x66A04ADF, 0xC74012FD, 0x378E4007, 0xAC547800,
    0xC0EEEE7D, 0x611EEC3F, 0xFE983BAC, 0xEEF7FFA3, 0x2221FE27, 0xB7C64AEF, 0x401389A2,
    0xC02462E7, 0x97000313, 0x13330000, 0x03EB88E0, 0xAE4F9958, 0x78F8BE02, 0xF183D7E3,
    0x5F51727B, 0xAEEF7DAC, 0x0D7B50BC, 0xFC9FFA31, 0xDEF7BDEF, 0xF7BDEF7B, 0xF8880006,
    0xBDEF7BDF, 0x637BDEF7, 0x1F8CC001, 0x049EFC00, 0x0017CCC0, 0x78001ABE, 0x778005C6,
    0xBC6A0014, 0x00F9D000, 0x001F8C60, 0x8C004C74, 0x8DE0017A, 0x667C8009, 0x1F17E000,
    0x04AD7200, 0x007E2FC0, 0x80095588, 0xCC001A37, 0xB7E7B9DF, 0x15BFFC80, 0x709FFAA2,
    0x9EF77EB3, 0x93C5E46F, 0x6788AFCF, 0x17B64E57, 0x006936D0, 0x40486086, 0xD01A7E4A,
    0xBF3F463E, 0x1E9EFD42, 0xDDFCDF58, 0x5BF37F7B, 0xF8060060, 0xF7BBF5DE, 0x61FBD6FE,
    0xEA15FD3D, 0xC779A7EB, 0x469AAC02, 0x18EC00FC, 0x01B08000, 0x9A8E45FC, 0xA919E780,
    0xC6077DE3, 0x8BEA69FB, 0x7BBDEFB9, 0xDBA857C6, 0xFBE8C423, 0xFB9F6B00, 0xEEE4137F,
    0x09EE7211, 0xDEEFD477, 0x561F7B7F, 0xD722BF3E, 0x1F17CD17, 0xCC9F3350, 0xD3D9F009,
    0x30C8C801, 0xFD398C00, 0x01E23001, 0x06CAC918, 0x7D63A0F2, 0x191DEC83, 0xBECF1FE2,
    0xFF9EBFF7, 0x86BB8C98, 0x1227EFA8, 0xDF9EFBD1, 0xF001FCA3, 0x1AC003C6, 0xD9D58013,
    0x3BB58C40, 0xD9EE780E, 0x400F6A3D, 0xC4BFDAD6, 0xFFC5F53A, 0x053AFF8B, 0xAC000000,
    0xBFFC5F53, 0xF14EB3F8, 0xFE2F9FC5, 0x000053AC, 0x00000000, 0x0200BBF0, 0xA6E461F3,
    0x003FF173, 0x1800DF90, 0xA803FFBF, 0x0DFAAEDF, 0x99EFF678, 0xEE615FFF, 0x89BEFA2F,
    0xFFBD7FF9, 0xB5CDE015, 0x6B9BC027, 0xFFF3003F, 0x002BFEF9, 0xEFA2FECF, 0xFF67809B,
    0x15FFF99E, 0xA9FB7EA0, 0xDF1800DF, 0xF7BFF1FF, 0xBDEF7BDE, 0xE0003EF7, 0xF7BDEF7F,
    0x7DEF7BDE, 0x00000000, 0xEF7BFF00, 0x7BDEF7BD, 0xC60003EF, 0xD9E00037, 0x7E3002BF,
    0x03F6FD4F, 0xE57FDF50, 0xD9009FF7, 0x57FEF5E7, 0x6FFFCC00, 0xF5006DF6, 0x5001ACFB,
    0xC01ACFBF, 0x9F66FFFC, 0xC6F3EC86, 0xDF505FFB, 0x27B7E57F, 0x7EA7BF18, 0xF67801FB,
    0xFE6000AF, 0x09BFFDCE, 0xCE42B7BF, 0xBF55BC5D, 0x4F8CF77B, 0xC62BF1CE, 0x5E53C4FB,
    0xC05548E0, 0x9802FE62, 0x035BC00A, 0x202F17E0, 0xC4093CF6, 0x2F801DDF, 0x5A8809FF,
    0x800E9001, 0x00001771, 0x18000000, 0xF8A80167, 0x003C5400, 0xBFF7E620, 0x01F7ECF7,
    0xF7DEF100, 0xEFCC6249, 0x9EC6002C, 0xEF7FEFE6, 0xFF537FFD, 0x5CFF5002, 0x3E44ADF7,
    0x07F559EF, 0x00EBF3F2, 0x82F1DFA0, 0x60005FE3, 0xE39899AE, 0xF7FFA01D, 0x1F9D097C,
    0xFE41637E, 0x0F678A57, 0x5F2A1EF8, 0xEFFD7270, 0x995098E9, 0x1AC0F9FE, 0x131E29DD,
    0xBC0AA586, 0x900A60B5, 0x89E17919, 0xA400C20B, 0x2051FE07, 0x184A6005, 0x0013700F,
    0x09881330, 0x32000064, 0xC030F0C0, 0xFC035900, 0x66134C62, 0x3903D781, 0x1FE034A7,
    0xA7BF185F, 0x5E38C3C6, 0x3E661B91, 0x7BE7EEE7, 0x77FFFBE3, 0x0953C17E, 0xFE7889F7,
    0x78E55F95, 0x07E7E176, 0x0DF39DF9, 0x97CF77EA, 0x00166A30, 0x37C6F000, 0xFE400000,
    0x0000BFE2, 0x7FE9F3C0, 0xFF46208F, 0xAECF0013, 0x7BDCFB5C, 0x00035AF6, 0x2557B7F2,
    0x002FEE63, 0x009DDF00, 0x007F2880, 0x04AA8AC0, 0x7D7CBE00, 0x2F8C6000, 0x3F0001EB,
    0x00167F8F, 0x0E2B4ACC, 0x13F89E00, 0x89C00155, 0x40131B85, 0xF89E0556, 0x582E3C00,
    0x78BE0039, 0x5403E7C0, 0x02E4602E, 0x89E01F1C, 0x7BECA209, 0x2EF7BDEF, 0x0002B07F,
    0xDDF9F095, 0xF7BDEF7B, 0x18C3E5DE, 0xF17C00A3, 0x2003E7E0, 0x13198B2B, 0x89E3AF00,
    0x54630009, 0xBDEF7BAC, 0x137FFEF7, 0xFFDEB200, 0x7BDEEF80, 0xFE55F9EF, 0x6FD44003,
    0x9F8004C6, 0x00A4003F, 0xD0009480, 0x7EA200FE, 0xF77C2ACF, 0x6FCF7BDE, 0x79000D7E,
    0xDEF77C06, 0x9FBFEF7B, 0xD72000FF, 0xDF200076, 0x4860007C, 0x6C000000, 0xA3318009,
    0xC7FE8C00, 0xDEF77C1B, 0xB15EEF7B, 0xF3188016, 0xFBE780DF, 0x04DFBBDF, 0x649EFEE4,
    0xBC837FCC, 0xDEE77C63, 0xE17AE77F, 0x209FB3E4, 0x78B31ED7, 0xB8807D46, 0x8C01A39A,
    0x031AA467, 0x0786AD80, 0xE5ABEB00, 0x0C9E2000, 0x00000000, 0x00020000, 0x88003960,
    0x00078727, 0x06352BEB, 0x1A395B00, 0xCF48D640, 0x271017A8, 0x7EE7271A, 0xAC7B9C82,
    0xBE31DE42, 0x1DFFEF73, 0xF7F720DD, 0x2F6B18A4, 0xDEF7BDC4, 0x005BF77B, 0x1EDFCC60,
    0xEF7BDE60, 0xFC63BFFD, 0xBB9C800B, 0x58004BE3, 0x58002F1D, 0x780006A3, 0x6C780015,
    0x00272000, 0x00000000, 0x00000000, 0xA0009C88, 0x2AF0006C, 0x06A35800, 0x05E3BA00,
    0xF8AF7390, 0x7BDEF312, 0xB51DFFEF, 0xF98C400B, 0xBDC625FB, 0xEF7BDEF7, 0x01FEF7BD,
    0x7BDEFA00, 0xDEF7BDEF, 0x0000003F, 0x00000000, 0xD0000000, 0xEF7BDEF7, 0x000177BD,
    0xBDEF7BE8, 0x00BBDEF7, 0x00000000, 0x00000000, 0x40000000, 0xBDEF7BDF, 0x017BDEF7,
    0xBDEF7180, 0xEF7BDEF7, 0x80007FBD, 0x7BDEF7BE, 0x0FF7BDEF, 0x00000000, 0x00000000,
    0xBDF40000, 0xEF7BDEF7, 0xFA00005D, 0xBDEF7BDE, 0x00002EF7, 0x00000000, 0x00000000,
    0x00000000, 0xFAC40000, 0x3BF67B9D, 0x0AEDCF00, 0xC0FEE631, 0x9DF9E2FC, 0x3E6FFF7B,
    0x7DF1D91B, 0xD7FCE415, 0x03F47458, 0x9E2BC5F0, 0xC562009C, 0xDE001F28, 0x0000D23B,
    0x9000058E, 0x00000000, 0xBDEF7180, 0x0487DEF7, 0xC6098E00, 0x66DEF7BD, 0xC54000D8,
    0x78CC0002, 0x67378001, 0x13883803, 0xC624CF6B, 0xE31633DC, 0xBFFBC63F, 0xD477ECF7,
    0x3DFD8C4E, 0xBFDAD649, 0xC002EE34, 0x00001773, 0x00000000, 0x00000000, 0x00000000,
    0x7D000000, 0xDEF7BDEF, 0x00FDEF7B, 0x7BDF4000, 0xDEF7BDEF, 0x00003F7B, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00FFFC00, 0x00000000, 0x006F7800, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0DEB0000, 0x0399C180, 0x20147260,
    0x5F8CC647, 0xCC47AF00, 0xBB504FDC, 0x7E67A5F2, 0xC8DFDEE7, 0x4F7F7813, 0xC1FFD18A,
    0xFE400BB8, 0xDC40014F, 0xE20015F1, 0x4002BE3F, 0x001747FC, 0x013BC7FC, 0x09DE37E0,
    0x135ABF00, 0x1AB57E00, 0x0D5ABE00, 0x2F13DF00, 0x88CF7C00, 0xB3EF000F, 0x400D53F6,
    0xF58DF6AC, 0x7F8D9800, 0x81C006FE, 0x80024E38, 0x0003CBF1, 0x003E3D3C, 0x02CF3D60,
    0x0FD1BE00, 0xDFCFF000, 0x9C710000, 0x00017718, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBDEF7D00, 0x2F7BDEF7, 0x16F71800,
    0x3BDCF000, 0x03800070, 0x180049E2, 0x007CB095, 0x8F60F9F0, 0x4F588009, 0x00263780,
    0x27804E33, 0x51BE003F, 0x800C6F80, 0xCD203F27, 0x4C4E0178, 0x600AA880, 0x8DE004D4,
    0x007CF817, 0xAC41318C, 0xC6F00127, 0x000E3303, 0x37C2F93C, 0x637C000A, 0x0001F950,
    0x4C6E5E33, 0x22AA2000, 0xBC00026B, 0x003E7F31, 0xF5BE3180, 0x37800024, 0xF00000E3,
    0xEB0028E4, 0xF75800BE, 0xC0001661, 0xCCC0001B, 0x3DF0001F, 0xFC0003CF, 0x200017E2,
    0x0003F17E, 0x0099E79E, 0x003B2FC0, 0x01F1BC40, 0x026B3500, 0x02766F00, 0x005E2700,
    0x005AAC60, 0x01378F40, 0x0000EB80, 0x00068E63, 0x003FCC7A, 0x40003C70, 0xAB0000BE,
    0xEFFEF500, 0x1005BFFD, 0x724CDFBF, 0x62017EFE, 0x7BFFBE57, 0x3FD66FFF, 0x3FE7CBE0,
    0x67FF9C93, 0x1F1AA87C, 0x38AA37C0, 0xA1D7002E, 0xB2300072, 0xAC001464, 0xC000E9C8,
    0x0000045F, 0x00000000, 0xCB000008, 0x18BF8001, 0x22B00051, 0x1800393D, 0x80175C59,
    0x3E3550EB, 0xE1546F80, 0x267FCF1B, 0x1F93F739, 0xFDF2BFC4, 0x477FFBDF, 0xFBF100ED,
    0xEFE724CD, 0xBDEF7817, 0xF67BDEF7, 0x6310003B, 0xBDF617EE, 0xEFFBDEF7, 0xB9002F98,
    0x8001CE76, 0x3C001F6C, 0x0190001E, 0xA0003200, 0xD788003C, 0x9DAE401F, 0xEF7BEC55,
    0x59DFF7BD, 0xFCC6003F, 0x7BDF60FD, 0x2DFBBDEF, 0x00000000, 0x00000000, 0x00000000,
    0xFDF50000, 0x00EFDDEF, 0x49EFDF88, 0x805FDCC6, 0xFFDE35D8, 0x9F37FFBD, 0xD9F2F83F,
    0xAFF9C933, 0xFAA9E1F1, 0x19E37E00, 0xED002F1C, 0x500246A3, 0x00050CB1, 0x005D3115,
    0x00049218, 0x00000000, 0x98000900, 0x390C002E, 0x84540014, 0x8A80031A, 0xB400D1C5,
    0x03EAA78F, 0xE0678DF8, 0x24CF67CB, 0x0FC6BFE7, 0xFF78D762, 0x7CDFFEF7, 0xF7E201FE,
    0x0831927B, 0xF7FEFA80, 0x5F9F3DEE, 0xD76F0000, 0x7D60004E, 0xCF0001A3, 0xDEF73CFE,
    0xFB3DEF7B, 0x3188004D, 0xDEFA0DFF, 0x2BDDEF7B, 0xF4600356, 0x9000958E, 0xCB0003ED,
    0x00010000, 0xB2C00008, 0x1E3B2001, 0x78ED7200, 0xBDEF7D13, 0x2F5BFEF7, 0x40BDA800,
    0x3DEF7BDF, 0xE2001331, 0x78002F97, 0xF0000E6A, 0xD10001C5, 0xD66000D9, 0x75E0001C,
    0x63BE4001, 0xDEFBBD41, 0xF1026FFF, 0xD641CDFB, 0xAEC42FFB, 0x3DEFFEF1, 0xE2BF27BF,
    0x24CF67CD, 0x94BCFBEA, 0xF333C01F, 0xB6001911, 0xA00999BF, 0x013AEBCE, 0x71AD4220,
    0xBFD0013B, 0xFBFFFF5C, 0xDFED4004, 0xDF3BF31C, 0xECF7A800, 0x00BF67CE, 0x8DFFF58C,
    0xED4001F9, 0x00022A7A, 0x00A7BF6D, 0x0FEFE348, 0x393C63C0, 0xB6BC4027, 0x93DFDE37,
    0x53E6EB18, 0xFBEA3FEA, 0xC7777BDF, 0x6FF630FC, 0xFD63108E, 0xF7BDC65F, 0xBDEF7BDE,
    0x6F7BDEF7, 0xEE300000, 0x2BDEF7BD, 0xDEF7BDEF, 0x0000001B, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00EEB000, 0x0005DC60, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x916004C0, 0xB10C00FE, 0x2A7C003C, 0xBE00FC9F, 0xE7CBF4AC, 0xFB9C933F,
    0x23B88FC9, 0xFFBDFFDF, 0xC81B8C77, 0x3E493DFD, 0xFB9E4EDF, 0xBFDC4002, 0x4C001627,
    0x000A331F, 0x039F933F, 0xC60A8E40, 0x39F000A8, 0xE0058BF0, 0xFC660789, 0x88172A01,
    0x7DFC04AA, 0xD600F1C0, 0x07E54018, 0x7803F13C, 0x13138072, 0xA883E7E0, 0x1631800A,
    0x2F80174C, 0x01F2FC1E, 0x8C65C560, 0x15510007, 0x70007E7E, 0x00C67962, 0xE57FCA80,
    0x753C0007, 0x9F000163, 0xB20000AA, 0x0FE7001C, 0xE005DE60, 0x800CA87F, 0x3E44036D,
    0x654015FC, 0xCA6CA005, 0x0A7C5406, 0x0A2315B0, 0x17958FF0, 0x19503150, 0x80AA3D40,
    0xC0AD82C8, 0x031DBFC8, 0x83650D94, 0x81F89E52, 0xC0B320AD, 0x814F246F, 0x899504CA,
    0x91EC3F18, 0x2B602C88, 0xA147852C, 0xEC5CA06C, 0x63FCC81C, 0x50B2202B, 0x95079E05,
    0x55327801, 0x11E3B06C, 0xE57F0059, 0xD8A80F1F, 0x5B2806CA, 0x5B2A803D, 0x9958C401,
    0x7CCDC07F, 0x7CA80046, 0x4679402C, 0x23BDB001, 0x1B3E3100, 0x01F88A80, 0x001465F8,
    0x3CA0051E, 0x002EF780, 0x9BC3FCF2, 0xE27000EF, 0x805C4E0D, 0xAC616635, 0xF9BE40D1,
    0xC039CE82, 0x5C701789, 0x300AB1E8, 0xCCC668E6, 0x0D63D006, 0x89C001D7, 0x000E63D3,
    0x346B9BE4, 0x00FC9800, 0x03789F80, 0xF9E79E00, 0xF88007C5, 0x6A79EFC5, 0x2FC5F002,
    0x6013B2FC, 0x6F10F3D6, 0xFCEC80BC, 0x80B53D41, 0xBF00DE37, 0xCD56137C, 0x838DE202,
    0xA805F37C, 0x2F139A39, 0xF1CE6F00, 0xEC001FDC, 0x02AA9E3B, 0x787319E0, 0x68E801A3,
    0xB0058E72, 0xBC740DF2, 0x163BC401, 0x8E8178E8, 0x0998E606, 0xB8053E63, 0x00D1D0D1,
    0x53C53E63, 0x68E8026F, 0xF100173A, 0x01B2B98E, 0x5BDF8D60, 0xD4E8000F, 0x03194000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBDEF7B8C, 0xEF7BDEF7, 0x000077BD,
    0xBDEF7B8C, 0xEF7BDEF7, 0x64000D6B, 0xE380068F, 0x4E8F4000, 0x4E6B3C00, 0x5F2FC400,
    0x001CF800, 0x00077AE8, 0x000B3D6A, 0x000FE6F1, 0x80013CBE, 0x30003D55, 0x70005ADE,
    0xE5F0007C, 0xCF980017, 0x8F64002A, 0x718E8006, 0xDEF7BDEF, 0x6FBDEF7B, 0x7BDE0000,
    0xE7001DEF, 0x000001DE, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0x710077B9,
    0x0B51005E, 0x800F1380, 0x53C003CA, 0x01F3E009, 0x38007AC8, 0x389E0059, 0x000AAC00,
    0x63004C5F, 0x397C007C, 0x00F8AC00, 0x4E002D44, 0x1F95004C, 0x0018DF00, 0xA8801FA6,
    0x0789C009, 0x800713C0, 0xBDEF7959, 0x4DEF707F, 0x00000000, 0x00000000, 0x00000000,
    0xF7000000, 0xFFC004DE, 0x0D64F007, 0x02F95BC0, 0x0157CE35, 0x0BD33E4E, 0x26A27CF9,
    0x6379317C, 0x8C60AE62, 0xBC1F158F, 0xE0357CA3, 0xBDEF7BC9, 0xEF7BDEF7, 0x90007FBD,
    0x7FE41FE7, 0x2F5D187C, 0xBE44CCE6, 0x27777BFF, 0x8C99FF58, 0xF3AB0BB5, 0x19EEF73D,
    0x9EE6F05F, 0x2C6778C1, 0xFC017CF1, 0x805BF15C, 0xF5000001, 0x3DEF73EE, 0x1CDFBF10,
    0xF1AFF001, 0xF7BDEFFE, 0xCF7319E0, 0xC03F4804, 0xF1780500, 0xD724AF44, 0x476431FF,
    0xB7FDEFFF, 0x27EE60BF, 0x31FFBD44, 0x000EEB1E, 0x00000000, 0x00000000, 0xCC000000,
    0x03BBB9DF, 0x1856FDCC, 0xF674276B, 0xE55FDEFF, 0x5257B185, 0x4E89CABF, 0x03C7F5E0,
    0x48002AC8, 0x00238009, 0x011C0000, 0x01324780, 0xC09D0A39, 0x67718FEB, 0x131ABF52,
    0xEFFEF1BF, 0xA81E55FD, 0x6B1846BB, 0x7FF7C827, 0x73015ECF, 0xF7A314CF, 0xFFF579E0,
    0x1FF33DDE, 0x192BFE3A, 0xE4FBC76F, 0x67CAC01C, 0x97F401FB, 0x66B3C006, 0xCC000002,
    0x018C8001, 0xD803F6C0, 0x8039C9E7, 0xFF8E9467, 0xA2FF464A, 0xDFFEAF3D, 0x27F8D7BB,
    0xA314CF73, 0x718000F7, 0x00000017, 0x00000000, 0x40000000, 0x137E7BEF, 0xA21AFFC8,
    0x64E13DDE, 0x77FDEEFD, 0x5FA8E636, 0xFC0F6B91, 0x6A3640BD, 0x7861E024, 0x0001C000,
    0xC001C000, 0x8D4000F0, 0xBDFC4C04, 0xA8E63440, 0x2773915F, 0xEEFD47FC, 0x85E3BFFD,
    0x58C43DD8, 0x9DF50177, 0x78137FFB, 0xB9C84F7F, 0x7E67781F, 0x6FDBFEF7, 0x1FB1CCF0,
    0xBCD17D72, 0x959A806E, 0xFE006A39, 0x3C03FA6A, 0xBDEF784E, 0x8F7BDEF7, 0xEEF80000,
    0x7BDEF7BD, 0x04977DEF, 0x0007E640, 0x5100FCBF, 0x33D9E7CC, 0xE0BFB9C8, 0xF73DE39B,
    0xC0FF5FFE, 0xA3149FBB, 0xDF8C03FF, 0xFF503BB9, 0xC6F0230A, 0xE460F73A, 0x6D3021D3,
    0x70000300, 0xF7BBE7EF, 0xFDEE0006, 0x00DEF77C, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x2F67BEF4, 0x5FF91771, 0x09DE8C43, 0xDEEFC727, 0x1CC1E77F, 0x7B5C8BB5,
    0xB205EFE0, 0x0F012351, 0x384001E9, 0xC2000000, 0x007A4001, 0x260246A0, 0xC688178E,
    0xE457EA33, 0xA3FE03DC, 0x5FFEF77E, 0x887BB10D, 0x5807FFD1, 0x2CBD9EFB, 0x5837F000,
    0x25958C01, 0x5C92BBDF, 0x1BF268FF, 0xDFF7BFFD, 0xDFEA0FD1, 0xC5EE7215, 0x000001FD,
    0x00000000, 0x00000000, 0x17BBDF6B, 0xE8C1EEE4, 0xE7BE4E1F, 0x51EA2F9E, 0xE78867B1,
    0x54137873, 0x3300A34E, 0x0000002D, 0x00000000, 0x00000000, 0xE0000000, 0x7B8DCF39,
    0x01E73EE3, 0x0000FB9E, 0x00000000, 0x8EC06758, 0x61FC760F, 0x6000029D, 0x000001DD,
    0x00000000, 0x00000000, 0x00000000, 0x7CC0BF80, 0x5F7B9F22, 0x5DE308AF, 0x0000177E,
    0x00000000, 0x00000000, 0x4EEF8000, 0x4EF3DF00, 0x4EF3DF80, 0x13BD5F80, 0x04EF57E0,
    0x013BD5F8, 0xF009EABE, 0x9E007E3D, 0xF00BC7B7, 0x09CCF5CE, 0x07A37C98, 0x0009C700,
    0x4007E5F9, 0xEB003575, 0xDF000F59, 0x07758DF8, 0x00000000, 0x00000000, 0xEFCF0DEF,
    0xA89BFFDC, 0x0DF3DCEF, 0x2157DF18, 0xDFDE1EE7, 0x0FD9E213, 0x7BFF5ADE, 0xE77DC577,
    0x4FFDEFB3, 0x4EBEA0BF, 0xECC72FC6, 0x13EF906F, 0x31E02CC5, 0xF9FC7016, 0xC03F7F00,
    0x09004823, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0xFEE00000, 0xBD9EFB58, 0xC43DFF20, 0x8EEB1FE8, 0x45F3DCF7, 0x433D863D, 0x9BCB9F3C,
    0x051962A0, 0x0002D278, 0x00000000, 0x00000000, 0x00000000, 0x9DF9E000, 0x100F7E7B,
    0xD442AFBF, 0x35FE03B7, 0x37CF73BE, 0x6A3D1FC6, 0x5D9E213F, 0x01F199A3, 0x662A98BE,
    0x0D466200, 0x8E36C01B, 0x01BA6005, 0x005AE200, 0x006C33A6, 0x0198A8DB, 0xC6651988,
    0xD262F807, 0xE213F6A3, 0xFF1A35D9, 0xE7B9DF1A, 0xF10FE31B, 0x7D442AFB, 0xAC37583B,
    0x00EEEE7D, 0xB1847BB9, 0xF789C276, 0xE46FEF7F, 0xB5267B01, 0x00E898C7, 0x60263FAE,
    0x9E00078C, 0x011C0048, 0x42000B80, 0x6489E000, 0xD078C601, 0xE47F5C01, 0x31ED419E,
    0xB9EF5E26, 0x40F237F7, 0xAC611EED, 0xFB58827F, 0x0000DDDC, 0x00000000, 0x20000000,
    0x97B3DF7A, 0xD7B91771, 0x84F7A310, 0xF7BBF59B, 0xCAC3F9DF, 0x36B915FA, 0xFE40BCFC,
    0x98095188, 0x2E0001A4, 0x2E000000, 0x4000D200, 0xC2C04A8C, 0xC5E205E7, 0x722BF51C,
    0xEB2701EE, 0xD5FFEF77, 0xC435FF90, 0xF403FFE8, 0x002F67BE, 0x00000000, 0x00000000,
    0xFFBE577E, 0x533D8CDB, 0xEF77C770, 0x7407EC4B, 0x00000F00, 0x00000000, 0x00000000,
    0x7B9DFCC0, 0xF7E2137E, 0x777A8856, 0xF7DAABF2, 0x978D5FDE, 0xFA81BF1A, 0x09888D55,
    0x4D4629E8, 0x7B43BC60, 0xA80AB7CF, 0x77FA78FD, 0xCEFC84BE, 0xBB3C556F, 0x59DFEA80,
    0xF44005F1, 0x00DE7A8A, 0x05F319FC, 0x7D72B16C, 0x599BE303, 0xF7D9F271, 0x65E4FDDE,
    0x8C42BBFC, 0x77BC27FE, 0x00000000, 0xDF69DEEB, 0x7BAC00BB, 0x02EF7DA7, 0x00000000,
    0x00000000, 0x01638000, 0x8AC086E1, 0xFC43F73A, 0x01FDE44B, 0x00002EFC, 0x00000000,
    0x00000000, 0x00000000, 0x8F003E40, 0x86F00F15, 0xFA8337E3, 0x7BC66A4D, 0x1555FDEE,
    0x9F215BEF, 0x05BAC7EF, 0xE339DCF0, 0xF158DC00, 0xC2AA2014, 0x71580789, 0xFF00E278,
    0xC80AAC2C, 0xE133E07A, 0x3F9183F1, 0xBE018DF8, 0x01F8E491, 0x0267C7D3, 0x054F0F51,
    0x7918E4E0, 0xBEF89E00, 0xB5AC0078, 0x88FF0016, 0x1CCA800F, 0xDE037FC0, 0xA773C09B,
    0x0F2C011A, 0x816D95B0, 0x1A81B111, 0xC5F06CA9, 0x22CC80AC, 0x9FAD40AA, 0x63B1B282,
    0xE47FE460, 0x52851D85, 0x414F28A8, 0xF8DC8C15, 0x4628BF15, 0x390F506C, 0x94FF232E,
    0x27947605, 0x11EC550A, 0x09FB6CA0, 0x0A7873FC, 0x3FA8AA88, 0x7E2AFC54, 0x05A63D80,
    0x80188D56, 0x7B008DF2, 0x64600AFC, 0xC62780FE, 0x401E5005, 0x05BBF029, 0xC5F2DDF8,
    0x255ACC0B, 0x7442F97E, 0x16679E36, 0xF2FC073E, 0x201CD665, 0x47A37CDE, 0xBFCE6A03,
    0xF1CDE003, 0xFE1C8026, 0x79F31C00, 0x77E8D600, 0x6F1802FC, 0x5C07D74D, 0x84D6631F,
    0xD1E81D1E, 0xC13558C9, 0x01F13875, 0xEF358E63, 0x5AEE7804, 0x4F5C01F1, 0x544018D4,
    0xAC07E3A5, 0x00F953F8, 0xB2F858FF, 0x3302AA20, 0xA2074C0E, 0x02CBF02A, 0x1E391627,
    0xF1E3F2A0, 0x7E91BE01, 0x37D30123, 0xF51007C6, 0x380162FC, 0x3C002B39, 0x33001719,
    0x16B2001E, 0x001F3E00, 0x3000C731, 0xFC02F1FE, 0x00F51EEE, 0x803F5CA4, 0xF7BDEF75,
    0x0DEF7BDE, 0xEF758400, 0xDBDEF7BD, 0x7EA800DE, 0xE37E4016, 0x001C7003, 0xC025F8EF,
    0x1801EB9C, 0x67100D5D, 0x71BE007C, 0x37EBA002, 0x1F359E00, 0x0BD5FC80, 0xBDEEA3A0,
    0xEF7BDEF7, 0xC800002F, 0xA3B9816F, 0x37EB79E0, 0x9503F3A0, 0xE00C301F, 0x0000405A,
    0xC3004000, 0x60235100, 0xBB85E3FC, 0x03007BF3, 0x0FBCFDDC, 0x10345F18, 0x030C0195,
    0x00000020, 0x807A400E, 0x77880F8A, 0xFAD6B034, 0xF7EDE806, 0x000000DC, 0x00000000,
    0x5F580000, 0x827B1502, 0x01F7ABF1, 0x97C06CBE, 0x58030C05, 0x00001C00, 0x00690000,
    0x37802A31, 0xEF9E01BE, 0x018C17D9, 0x17DCEF3C, 0x22037E3A, 0x0003480B, 0xB8008000,
    0x2F8123C0, 0x0378F40A, 0xC16B5BE3, 0xED406ECF, 0xF400DE7B, 0x310DF9E3, 0xFD2B016F,
    0xE333DF72, 0x9E31E07B, 0xCFDE21E8, 0x597EA1D7, 0x5F3C0F7F, 0x5E7F73AC, 0x9DD409FF,
    0x9CF2BEA1, 0xB13EC4E7, 0x1800F39F, 0x900001F7, 0x78000000, 0x0000006F, 0xA7B58000,
    0x7FC826FB, 0x82EE620F, 0xF7BBF59B, 0xE741BEDF, 0x7D722BF3, 0x01F13CD1, 0x2E472B35,
    0x5D35BF80, 0x030F3A80, 0x18000040, 0xC02E9800, 0x05C8D5F8, 0xF13CB550, 0xA18EF901,
    0xB115F9F3, 0xF59B8BB6, 0x6FB4F7BB, 0x883DFF20, 0x7B580BB9, 0x00026FBA, 0x00000000,
    0x9EFFEF90, 0x9ECF00BD, 0x13FF4629, 0xFFD62FC6, 0x0BE55FDE, 0xF527746F, 0x58A81AAB,
    0x3C4451C0, 0x8002EA80, 0x40000358, 0xE0000000, 0xF7BAAF77, 0x00003FDE, 0xBCCDEEFC,
    0x003FDEF7, 0x0000C000, 0x02200011, 0x003C6200, 0xF000E330, 0x7BDDF6DE, 0xDEF7BDEF,
    0x0110000B, 0xFFF04400, 0xEFFEF507, 0xF883BFFD, 0x1FF1A9FF, 0x724CDFBF, 0x47FE5FEE,
    0xCAEC6BD1, 0xFFEF7FF7, 0xD58FFACD, 0x33FF30E8, 0xA29FF9C9, 0x02F58DE1, 0xB11A33BC,
    0x8EF00346, 0x0178AC19, 0x2AE28BE0, 0x64FE5800, 0x04840004, 0x02320000, 0x2D724200,
    0xACFE5800, 0x17E000F8, 0x00D1AC45, 0x3F0339BC, 0xA77805EB, 0xFCC4710F, 0x7FE724CF,
    0xC7FC1386, 0xFFEF95BA, 0xCF9BFFDE, 0x6A1FE35D, 0x337EFC75, 0xE8BFB9C9, 0xEA374335,
    0x7FFBDFFD, 0xE713FA07, 0x6EE30004, 0x700346F1, 0x0398D65D, 0x70398E60, 0x1A3A2035,
    0xE807ACC6, 0x0D1D00E8, 0x88131CC6, 0x017686CE, 0x53C998E6, 0xF1B80073, 0x8C00D1D2,
    0x07674F59, 0xD67A3A00, 0xF7BDC404, 0x7BA8C89E, 0x0003FDEF, 0xDEF7B880, 0xF7BDD57B,
    0x00003FDE, 0xBDEF7B88, 0xEF7BDD57, 0x800003FD, 0x7BDEF7B8, 0xDEF7BDD5, 0x0000003F,
    0xC0000000, 0x0000037B, 0x006F7800, 0x00000DEF, 0xF7E60000, 0x3DFFF7BF, 0x4FBFF8C0,
    0x13B7CF92, 0x77E7CFF9, 0x39BFFDEE, 0x5FD17E0E, 0x8D773905, 0x100B13C5, 0x72000DAF,
    0x003C543C, 0xDF9BC7FA, 0x10F5003B, 0xF7FEE6B7, 0x5C935000, 0xDE05BCFB, 0x5BFBEE77,
    0x97EFE623, 0xA1BF598C, 0x6B3BFF7A, 0xE40B8F0F, 0x02B8CFFA, 0x1C8D6F00, 0x545B0006,
    0xF8000FBC, 0x88067B7C, 0x8FFA872F, 0x1ADF9EF1, 0x3178F739, 0xBD5157F6, 0x17FCEFFF,
    0x9BE77E78, 0xE7802441, 0xFE7ABF3D, 0x7EA0078C, 0x0DF54C6B, 0xFD2B9F00, 0xB313C000,
    0x17E5DA00, 0x7C82AFBF, 0xE79393F6, 0xEE77E78D, 0x5C637FFD, 0xC92BB798, 0x9F49DBE7,
    0x44FD3C81, 0x89E789E1, 0x7803C542, 0xFFBDFFBE, 0x798001EF, 0xE7C927BE, 0xEFC0133B,
    0xDEE77F35, 0x0FDE9BF3, 0xBEE7ABF0, 0xFBBD4415, 0xABA07E79, 0xF77F30BF, 0xADF91EFC,
    0x8B5AE46A, 0xB7D44B7E, 0x1E9339E8, 0xEFB1AD4D, 0x78378DFD, 0x70FA8FC7, 0x1BA83FE3,
    0x6232DF85, 0x630199E1, 0xCCE45606, 0x2DE01C40, 0x00C02C44, 0x00300180, 0x40CCC460,
    0x8857E01C, 0x9E162398, 0x660A3019, 0xC6E1F5A4, 0x1E37507F, 0x68DF937C, 0xEF7D8E6A,
    0x3BC1BC6F, 0xC5AD723E, 0xDF510EFB, 0x744CE7A2, 0xBEE617F5, 0x6FC8F7E7, 0x3D5F8355,
    0xEA20ADF7, 0x03F3CFDD, 0x77F35EFC, 0xE9BF3DEE, 0xF3CC00FD, 0xDF3E493D, 0xFFF44099,
    0x7FC4379E, 0x1CDB98A5, 0xF279EE7D, 0xF10ACFB9, 0x420FEFF3, 0xDEFFDF18, 0xC127ED4B,
    0xF7B9DFCD, 0x8B90ACB2, 0xFF7BEE5F, 0x0EF58C5F, 0xC167ECF1, 0x893AC93A, 0x6F1A76F1,
    0x3933CE27, 0x3E37C4CF, 0x3E61F1BE, 0x41D3E61D, 0x35D94D76, 0x35D90001, 0xF984D765,
    0x074F9874, 0x1BE3E37C, 0xE4CF381F, 0xDBC6133C, 0xE39DBC69, 0xBDEF7BDE, 0x03FBDEF7,
    0x7BDEE300, 0x5EF7BDEF, 0x00000000, 0x7BDEE300, 0x0001FDEF, 0x7BFF7F31, 0xC000F7F7,
    0xE3256FBA, 0x400FFEF9, 0xE77F36EC, 0x8CF7FFDE, 0x3FE205EF, 0xC82B7DE6, 0x3F35DBE7,
    0x8DEFCBF0, 0xECF7BDFF, 0x99EB7F29, 0x201FA7A8, 0x4FD2FBC6, 0xF426B707, 0x4CD777BD,
    0x0BA8A67E, 0xE620B460, 0x000289E7, 0x078C65F8, 0xC0C77180, 0xEF7D0090, 0x0000EBDD,
    0xE30133C0, 0xFBDEFA01, 0xF2183E7F, 0x27900289, 0x5111BF02, 0xF3100017, 0x6005ADC7,
    0xD499F87A, 0x05FF0FD3, 0x3A7E96E3, 0x0DEF8DF0, 0x39ADFC80, 0x7DE6BFC1, 0xDBE7C82B,
    0x7E205F35, 0xBDCEFE6D, 0xBF19EFFF, 0x6FBAC017, 0xFEF9E325, 0xF7BDD605, 0x7DEF7BDE,
    0xBBED4000, 0xC61BE30B, 0x77DCE837, 0x8C3D5367, 0xD18100B7, 0xE741E8C3, 0xF5347BBE,
    0x8057E30D, 0x2FB8002A, 0x00000000, 0x00000000, 0xBDEEFC00, 0x7BDE56F7, 0x80017DEF,
    0xDEF7BDDF, 0xBDEF7BCA, 0x0000002F, 0x00000000, 0x58001FB0, 0x7100000D, 0xDEF7BDEF,
    0x01BDEF7B, 0xDCEF8800, 0x09FB137F, 0xF66F3EB9, 0xA4F1FFBD, 0xDD16C8B5, 0x78C12230,
    0x7FF180DF, 0xE7FF3C16, 0x7F7BFD07, 0x05FF3DF0, 0xEF7DC9EB, 0xF2007FBD, 0x21DFF73B,
    0xFD7213F7, 0xCF7BBE7D, 0x0FBDEA33, 0xD90222D1, 0x3FF7B851, 0xC16401FF, 0x27EDE7BD,
    0x7F62B102, 0xE71588BB, 0xD3DEEFE4, 0x215D9F39, 0x6EFC0EE7, 0x679756F1, 0x97ADC5CE,
    0xDC600775, 0x00000005, 0x00000000, 0x00000000, 0x98000000, 0x0501B000, 0x10BE402B,
    0x06E722FF, 0xFDEEFC63, 0xDF707EBF, 0x816EB90A, 0xDFF73BF9, 0x00017711, 0x00000000,
    0xF6400000, 0x97DEF73E, 0xB008D7B5, 0x00D9003A, 0x0006003E, 0x60008013, 0x78017002,
    0x009B8012, 0x10013F72, 0x2F75FDDF, 0x17AD6A20, 0x00000000, 0x00000000, 0xEC7679D6,
    0x1879DB1D, 0xF38D7BF1, 0x279E2D5B, 0x77FFAAC4, 0xFD10AFF7, 0x88AEEFA9, 0xDEA813DF,
    0x006B7E25, 0x00000000, 0xCE77F300, 0x56FBC1EF, 0x98CB7D44, 0x2FEF77E3, 0xA8A73F3B,
    0x184CCBE3, 0x40020099, 0xCC8C2664, 0xE3A833BF, 0x7BEC7357, 0xF786B97F, 0xDAFA88AD,
    0x3EE30FB8, 0x8C2FD630, 0xF1E80BF5, 0xA703E3D1, 0x8C16A716, 0x2EAC65D5, 0xE7437CE8,
    0x3103101B, 0xAC2F8D60, 0x5DE305F1, 0x70ABBC65, 0xE8D9B9B3, 0x8C1E743C, 0xFD634BF5,
    0x00FE8812, 0x15DDF500, 0x9EFC4000, 0x4BF10091, 0x13FEFCF0, 0x7C4257A0, 0x0BCC6005,
    0x01CCE000, 0x005ED000, 0x005F3180, 0x000AB700, 0xDF0FE660, 0xEEC8007D, 0x78001EA0,
    0x0FBC499F, 0x79E7EFC0, 0x0BE6FC5E, 0x64DEFC40, 0x5F8007D6, 0x017FA22E, 0xDF173D40,
    0xAEF0007A, 0x002F5CC1, 0xEE3D135A, 0x0377DBBD, 0x000085F2, 0xBDEE215F, 0x0DDF6EF7,
    0xF4400000, 0xEFA80007, 0xE20000AE, 0xC4048CF7, 0xF7E7812F, 0x095E809F, 0x31802BE2,
    0x3380002F, 0x7B400007, 0x7CC60001, 0x2ADC0001, 0x3F998000, 0x6FFB9EF1, 0xB11DD900,
    0x03F5C867, 0xCDE99F78, 0x2A3FF7BE, 0x9E7BF7E1, 0x2D916B17, 0xA4DEFC40, 0xF824461B,
    0xEF1802E5, 0x02E7A80C, 0xE0D3FF8C, 0xFCF0035D, 0x0D681F9F, 0x07F7BF58, 0xEFE80BE4,
    0x015F00BF, 0xF7BEE573, 0x02003FDE, 0xFEE77E40, 0xDC40003B, 0x03FAE427, 0x7BDF3780,
    0xC40A33CF, 0x93DBE12F, 0x257A0168, 0x147640E4, 0xEE01798C, 0xC07FCFFD, 0x59000399,
    0xF7005ED0, 0xC61FB79E, 0x8855017C, 0x055B9B15, 0xAC43DF38, 0xF0FE6638, 0x77D787DD,
    0xD99CE9EF, 0xE303D41D, 0x3B9C84FF, 0xEF1267DE, 0xEE77C603, 0x79E78DFF, 0x002F9BF1,
    0xB326F7E2, 0xE5F8003E, 0x0017FA22, 0x5BE2E7A8, 0x6BBC000F, 0x000BD730, 0xF71E89AD,
    0x01BBEDDE, 0x000085F2, 0x7BDC42BE, 0x1BBEDDEF, 0xBC000000, 0x58CC0127, 0x002C6600,
    0x000049EF, 0xF0000000, 0x243004DE, 0xA007A8C0, 0xD403F9FE, 0xC600FF97, 0x9C00ECF7,
    0xBE5401FC, 0xE405B600, 0x2AC0126F, 0xD5780FC7, 0xF8C9D58A, 0xC5F1998D, 0xABBBDFFA,
    0x14CF6A5E, 0xF201FDE3, 0x900003FC, 0x0001F1FF, 0x0017AE8C, 0x004CCE60, 0x0097F780,
    0xF8000000, 0x440004EE, 0x560003F9, 0xF0002554, 0x0003EBE5, 0x0F597C63, 0xFC79F800,
    0x566000B3, 0xF000715A, 0x0AA89FC4, 0xDC2C4E00, 0x2AB20098, 0xE007C4F0, 0x01CAC171,
    0x3E03C5F0, 0x0172A01F, 0xF8E01723, 0x104C4F00, 0xEF7BDF65, 0x83F977BD, 0x84A80015,
    0x7BDEEFCF, 0x2EF7BDEF, 0x0518C61F, 0x3F078BE0, 0x5959001F, 0x780098CC, 0x004C4F1D,
    0x0002A318, 0x80005BBF, 0x8000BAB7, 0x0005CE67, 0x0002F5B8, 0x00003F7C, 0x777C0000,
    0xFCA20002, 0xAA2B0001, 0xF2F80012, 0x318001F5, 0x0007ACBE, 0x59FE3CFC, 0xAD2B3000,
    0xE2780038, 0x0005544F, 0x4C6E1627, 0x78155900, 0xB8F003E2, 0xF800E560, 0x0F9F01E2,
    0x9180B950, 0x807C700B, 0xB2882627, 0xDEF7BDEF, 0x0AC1FCBB, 0xE7C25400, 0xF7BDEF77,
    0x0F977BDE, 0xF0028C63, 0x0F9F83C5, 0x662CAC80, 0x8EBC004C, 0x8C002627, 0xDDF00151,
    0xAEC40005, 0xE4002FD5, 0xFE7BAFCE, 0xFE5F8002, 0x01355ACA, 0xBE83EF78, 0x0000000B,
    0x0013BBE0, 0x000FE510, 0x00955158, 0x0FAF97C0, 0x65F18C00, 0xE7E0003D, 0x8002CFF1,
    0x01C56959, 0xA27F13C0, 0xB138002A, 0xC8026370, 0x1F13C0AA, 0x2B05C780, 0x0F17C007,
    0xCA807CF8, 0x805C8C05, 0x313C03E3, 0xEF7D9441, 0xE5DEF7BD, 0xA000560F, 0x7BBF3E12,
    0xDEF7BDEF, 0x63187CBB, 0x1E2F8014, 0x64007CFC, 0x02633165, 0x313C75E0, 0x0A8C6001,
    0xE4001000, 0xFB817EEF, 0xD9E53800, 0xA804C565, 0xFC6FDEF1, 0xC800D76E, 0xEA5D9E9C,
    0xC8FF3005, 0x0025FDDF, 0x00000000, 0x013BBE00, 0x00FE5100, 0x09551580, 0xFAF97C00,
    0x5F18C000, 0x7E0003D6, 0x002CFF1E, 0x1C569598, 0x27F13C00, 0x138002AA, 0x8026370B,
    0xF13C0AAC, 0xB05C7801, 0xF17C0072, 0xA807CF80, 0x05C8C05C, 0x13C03E38, 0xF7D94413,
    0x5DEF7BDE, 0x000560FE, 0xBBF3E12A, 0xEF7BDEF7, 0x3187CBBD, 0xE2F80146, 0x4007CFC1,
    0x26331656, 0x13C75E00, 0xA8C60013, 0xF2067D00, 0x144F0034, 0x7800789E, 0x00F150A2,
    0x9C6067D0, 0x00000006, 0x77C00000, 0xCA200027, 0xA2B0001F, 0x2F80012A, 0x18001F5F,
    0x007ACBE3, 0x9FE3CFC0, 0xD2B30005, 0x2780038A, 0x005544FE, 0xC6E16270, 0x81559004,
    0x8F003E27, 0x800E560B, 0xF9F01E2F, 0x180B9500, 0x07C700B9, 0x28826278, 0xEF7BDEFB,
    0xAC1FCBBD, 0x7C254000, 0x7BDEF77E, 0xF977BDEF, 0x0028C630, 0xF9F83C5F, 0x62CAC800,
    0xEBC004C6, 0xC0026278, 0xFC801518, 0x80003DDD, 0x007BEFBB, 0x513CB0C0, 0x00560000,
    0xCF3CB0C0, 0xBEEE0003, 0xC8001FEF, 0x0003DDDF, 0xEF800000, 0x9440004E, 0x4560003F,
    0x5F000255, 0x30003EBE, 0x00F597C6, 0x3FC79F80, 0xA566000B, 0x4F000715, 0x00AA89FC,
    0x8DC2C4E0, 0x02AB2009, 0x1E007C4F, 0x001CAC17, 0xF3E03C5F, 0x30172A01, 0x0F8E0172,
    0x5104C4F0, 0xDEF7BDF6, 0x583F977B, 0xF84A8001, 0xF7BDEEFC, 0xF2EF7BDE, 0x00518C61,
    0xF3F078BE, 0xC5959001, 0xD780098C, 0x8004C4F1, 0xA0002A31, 0xDEF7BDEE, 0xF7BDEF7B,
    0x006F0005, 0x4E740000, 0xF7BDEF7D, 0x005F7BDE, 0x000FACE4, 0x877AF000, 0x4F000003,
    0x000004CD, 0x0C2D97E2, 0x34740000, 0x63000004, 0x000003D6, 0xEEB21AB8, 0x7BDEF7BD,
    0x731AC017, 0xF1000000, 0xEF790346, 0xBBDEF7BD, 0x00E8BF00, 0xF5000031, 0x00AC098C,
    0xBDC6BC00, 0x0B7BDEF7, 0x0012B000, 0xDAF90001, 0xEF7BDEF7, 0x780013BD, 0x06000D63,
    0x06CA9E00, 0xE8800210, 0xFB5C0038, 0xBDEF7BDE, 0x39CEAEF7, 0xE0000000, 0xEEF7FEF9,
    0xBFB90137, 0xDFF31927, 0xDF18EF20, 0xB9DFF7B9, 0xECF9385E, 0xC7B5C827, 0x1F519E2C,
    0x68E6AE20, 0xA919E300, 0xAB6000C6, 0xFAC001E1, 0x8800396A, 0x00000327, 0x80000000,
    0x0E580000, 0xE1C9E200, 0x4AFAC001, 0x56C0018D, 0x3590068E, 0x05EA33D2, 0xC9C689C4,
    0xE7209FB9, 0x7790AB1E, 0xFBDCEF8C, 0xC837477F, 0xC6293DFD, 0xF9E00BDA, 0x9DDBF1FE,
    0x7BF11800, 0xBF38C001, 0x9E2000D5, 0xAC400027, 0x77C003FA, 0xF200AFF7, 0xFC8003FC,
    0xA3000F8F, 0x9CC005EB, 0x7F780099, 0x71800009, 0xDEF7BDEF, 0x7FBDEF7B, 0xF7BE8000,
    0xBDEF7BDE, 0x00000FF7, 0x00000000, 0x00000000, 0xDEF7BDF4, 0x005DEF7B, 0x7BDEFA00,
    0x2EF7BDEF, 0x00000000, 0x00000000, 0x00000000, 0x7BDEF7D0, 0x5EF7BDEF, 0x77E00000,
    0xBAB7800B, 0x2E733C00, 0x00BD6E00, 0x00007EF8, 0xF7BDEE30, 0xBDEF7BDE, 0xD0000FF7,
    0xEF7BDEF7, 0x01FEF7BD, 0x00000000, 0x00000000, 0xF7BE8000, 0xBDEF7BDE, 0xDF40000B,
    0xF7BDEF7B, 0x000005DE, 0x00000000, 0x00000000, 0xDEFA0000, 0xF7BDEF7B, 0x00000BDE,
    0x62005DDF, 0x9017EAD7, 0xF9EEBF3B, 0x5FCBF00B, 0x7826AB59, 0x0BBE83EF, 0x7BDC6000,
    0xDEF7BDEF, 0x001FEF7B, 0xF7BDEFA0, 0xFDEF7BDE, 0x00000003, 0x00000000, 0x7D000000,
    0xDEF7BDEF, 0x8000177B, 0x7BDEF7BE, 0x000BBDEF, 0x00000000, 0x00000000, 0xF4000000,
    0x7BDEF7BD, 0x0017BDEF, 0x3C819F40, 0x3C289E0D, 0x0A2780F1, 0x33E80F15, 0x00034E30,
    0xDEE30000, 0xF7BDEF7B, 0x00FF7BDE, 0xBDEF7D00, 0xEF7BDEF7, 0x0000001F, 0x00000000,
    0xE8000000, 0xF7BDEF7B, 0x0000BBDE, 0xDEF7BDF4, 0x005DEF7B, 0x00000000, 0x00000000,
    0xA0000000, 0xDEF7BDEF, 0x00BDEF7B, 0x907F9E40, 0x7461F1FF, 0x133398BD, 0xFC012FEF,
    0x000000FF, 0x00000000, 0x00000000, 0x00000000, 0x5BC5BBF0, 0x17399E5D, 0x3F7C5EB7,
    0x007FFE00, 0x00000000, 0x00000000, 0x00000000, 0xBBE00000, 0xEAD7620B, 0x75F9DC97,
    0xF2FC5FCF, 0xF9AAD657, 0x177D07DE, 0x00FFFC00, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x067D0000, 0x8513F4F2, 0x0A279E27, 0x819F4F15, 0x00001A71,
    0x0000FFFC, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7BDFF800,
    0x6FFFBDEF, 0xF3E40002, 0xBDC0079E, 0x7BF3DEF7, 0x10006BE2, 0x3D62FDF5, 0xC7FA8000,
    0xBC60000F, 0x660000B1, 0x7880006C, 0xCA40000A, 0xF7BA6F75, 0x001005DE, 0xA6F75800,
    0x005DEF7B, 0x00080000, 0x00024780, 0x80000C62, 0x30000FD7, 0xA0002C66, 0x8003F1FE,
    0x58BF7E7C, 0x7BDEE00F, 0xFCABFFEF, 0xF3E4001A, 0x80001FFD, 0xFDDFC800, 0x9C01F702,
    0x62B2ECF2, 0xFBDE3502, 0x1AEDDF8D, 0xECF4E640, 0xFE602F52, 0x4BFBBF91, 0x00000000,
    0x0017DD60, 0x02CC3EEB, 0x00037800, 0x0003F998, 0x0079E7BE, 0x02FC5F80, 0x7E2FC400,
    0x3CF3C000, 0x65F80013, 0x37880007, 0x66A0003E, 0xCDE0004D, 0xC4E0004E, 0x558C000B,
    0xF1E8000B, 0x1D700026, 0xD1CC6000, 0xF98F4000, 0x078E0007, 0x0017C800, 0xCF201560,
    0xFC80003F, 0x30000F8F, 0xC0005EBA, 0x8000999C, 0x000097F7, 0xFFBD4000, 0x016FFF7B,
    0x9337EFC4, 0x805FBF9C, 0xFFEF95D8, 0xF59BFFDE, 0xF9F2F80F, 0xFFE724CF, 0xC6AA1F19,
    0x2A8DF007, 0x75C00B8E, 0x8C001CA8, 0x0005192C, 0x003A722B, 0x000117F0, 0x00000000,
    0xC0000200, 0x2FE00072, 0xAC001446, 0x000E4F48, 0x05D71646, 0x8D543AE0, 0x551BE00F,
    0x9FF3C6F8, 0xE4FDCE49, 0x7CAFF107, 0xDFFEF7FF, 0xFC403B51, 0xF9C9337E, 0xF80005FB,
    0xDE0002DD, 0xCF0002EA, 0xB8000B9C, 0xBE0002F5, 0x0000001F, 0xBDFFDEA0, 0xE200B7FF,
    0xCE499BF7, 0xEC402FDF, 0xEF7FF7CA, 0x07FACDFF, 0x67FCF97C, 0x8CFFF392, 0x03E3550F,
    0xC71546F8, 0x543AE005, 0x9646000E, 0x1580028C, 0xF8001D39, 0x0000008B, 0x00000000,
    0x39600001, 0x2317F000, 0xA456000A, 0x23000727, 0x7002EB8B, 0x07C6AA1D, 0x7C2A8DF0,
    0x24CFF9E3, 0x83F27EE7, 0xFFBE57F8, 0xA8EFFF7B, 0xBF7E201D, 0xFDFCE499, 0x5DDF0002,
    0xAD762000, 0x3B90017E, 0x0BF9EEBF, 0x95FCBF00, 0x78026AB5, 0x0BBE83EF, 0xF5000000,
    0xBFFDEFFE, 0xDFBF1005, 0x7EFE724C, 0xBE576201, 0x6FFF7BFF, 0xCBE03FD6, 0x9C933FE7,
    0xA87C67FF, 0x37C01F1A, 0x002E38AA, 0x0072A1D7, 0x1464B230, 0xE9C8AC00, 0x045FC000,
    0x00000000, 0x00080000, 0x8001CB00, 0x005118BF, 0x393D22B0, 0x5C591800, 0x50EB8017,
    0x6F803E35, 0xCF1BE154, 0xF739267F, 0xBFC41F93, 0xFBDFFDF2, 0x00ED477F, 0x24CDFBF1,
    0x0017EFE7, 0x7F200100, 0x07DC0BF7, 0x976794E0, 0xE3501315, 0xDDF8DFBD, 0x9CC801AE,
    0x05EA5D9E, 0xEFE47F98, 0x000012FE, 0xD4000000, 0xFFF7BFFB, 0x7EFC4016, 0xFBF9C933,
    0xF95D8805, 0xBFFDEFFE, 0x2F80FF59, 0x724CFF9F, 0xA1F19FFE, 0xDF007C6A, 0x00B8E2A8,
    0x01CA875C, 0x5192C8C0, 0xA722B000, 0x117F0003, 0x00000000, 0x00200000, 0x00072C00,
    0x014462FE, 0xE4F48AC0, 0x71646000, 0x43AE005D, 0xBE00F8D5, 0x3C6F8551, 0xDCE499FF,
    0xFF107E4F, 0xEF7FF7CA, 0x03B51DFF, 0x9337EFC4, 0x005FBF9C, 0xD3C819F4, 0x3C289E00,
    0xA27800F1, 0xE800F150, 0x034E3033, 0x00000000, 0xF7FF7A80, 0x8802DFFE, 0x39266FDF,
    0xB100BF7F, 0xBDFFDF2B, 0x1FEB37FF, 0x9FF3E5F0, 0x33FFCE49, 0x0F8D543E, 0x1C551BE0,
    0x50EB8017, 0x59180039, 0x56000A32, 0xE00074E4, 0x0000022F, 0x00000000, 0xE5800004,
    0x8C5FC000, 0x91580028, 0x8C001C9E, 0xC00BAE2C, 0x1F1AA875, 0xF0AA37C0, 0x933FE78D,
    0x0FC9FB9C, 0xFEF95FE2, 0xA3BFFDEF, 0xFDF88076, 0xF7F39266, 0xC006F80B, 0x03FEA25B,
    0xFC5FE6F8, 0xCF7C07FD, 0x4EFE32F3, 0xC1F3CFD2, 0xBD9B8FF8, 0xFF180F9E, 0x007D57B1,
    0xC0178563, 0x004E239C, 0xCBFB5BE6, 0x8EF9807F, 0x07F8F54F, 0x983FC7AA, 0x5F53F8EF,
    0x3BE603FE, 0x1FE79E7E, 0x00FF7CC0, 0xF5049E00, 0xBFFDEFFE, 0x7E227745, 0xFCE499BF,
    0x10759EFD, 0xDFFDF2BB, 0x7D4F7E7B, 0xFACBE06B, 0x7BEA24CF, 0x0FC6AA24, 0x14F19E30,
    0x799C0347, 0xD00B2A1C, 0x63251CDE, 0x797AC601, 0xE03FA722, 0x0111C53E, 0x0003F1D0,
    0x0000ECC6, 0x00803D6E, 0x65C0FE56, 0x17F7C8BA, 0xC0C64520, 0x45601E79, 0xFCAC2A7A,
    0xEAE2CA80, 0x76803B7C, 0x99F79AA8, 0xF0AA37C0, 0x7208E665, 0xC0FC9FFE, 0xBDCFB9C8,
    0x076B37FF, 0x37FFCF7C, 0x5FBF9C93, 0xBD57AD40, 0x6FFF7BFF, 0x0FF3C801, 0xF8FFC800,
    0x7AE8C000, 0x999CC001, 0x25FDE000, 0xEEB00000, 0x05DC6000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x6004C000, 0x0C00FE91, 0x7C003CB1,
    0x00FC9F2A, 0xCBF4ACBE, 0x9C933FE7, 0xB88FC9FB, 0xBDFFDF23, 0x1B8C77FF, 0x493DFDC8,
    0x004EDF3E, 0xC0016EFC, 0x78005D5B, 0x70005CE6, 0xDF0005EB, 0xB000000F, 0xDC6000EE,
    0x00000005, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x04C00000,
    0x00FE9160, 0x003CB10C, 0xFC9F2A7C, 0xF4ACBE00, 0x933FE7CB, 0x8FC9FB9C, 0xFFDF23B8,
    0x8C77FFBD, 0x3DFDC81B, 0x4EDF3E49, 0x005DDF00, 0x5FAB5D88, 0xEBF3B900, 0xFC00BF9E,
    0xAAD657F2, 0x83EF7809, 0x00000BBE, 0xC6000EEB, 0x0000005D, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x4C000000, 0x0FE91600, 0x03CB10C0, 0xC9F2A7C0,
    0x4ACBE00F, 0x33FE7CBF, 0xFC9FB9C9, 0xFDF23B88, 0xC77FFBDF, 0xDFDC81B8, 0xEDF3E493,
    0xE40CFA04, 0x8513C069, 0x13C01E27, 0xD0078A85, 0x069C6067, 0xC0000000, 0x718003BA,
    0x00000017, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x13000000,
    0x03FA4580, 0x00F2C430, 0xF27CA9F0, 0xD2B2F803, 0x4CFF9F2F, 0x3F27EE72, 0xFF7C8EE2,
    0x31DFFEF7, 0xF7F7206E, 0x3B7CF924, 0x0B77E001, 0x0BAB7800, 0x2E733C00, 0x0BD6E000,
    0x007EF800, 0xF73C0000, 0x8EFB0007, 0x7800AAA7, 0x68DE1CC6, 0x9C9A3A00, 0x7CAC0163,
    0x006F1D03, 0x3A058EF1, 0x81A3A05E, 0x98C26639, 0x346E014F, 0x98C03474, 0x9BD4F14F,
    0xCE9A3A00, 0x63BC4005, 0x58006CAE, 0x03D6F7E3, 0x00353A00, 0x0000C650, 0x00000000,
    0x00000000, 0x00000000, 0xE3000000, 0x0000002E, 0x00000000, 0xDEF7BDF4, 0x10009BF3,
    0xBE84EEF5, 0xBE7BDEF7, 0xF1002E31, 0x001B27EC, 0x4000F17E, 0x0C000654, 0x00006000,
    0x2F800195, 0xECF1001E, 0xEF7D1B27, 0x637CF7BD, 0xDEA2005C, 0xDEF7D09D, 0x026FCF7B,
    0x00000000, 0x7FFA2000, 0xE401EFCF, 0x6BEA295E, 0xDF67CDE0, 0xC82AC6FB, 0xFE60DF1A,
    0xE07CA1FC, 0x803C7091, 0x5CA09080, 0x00F9B800, 0x0007EAA0, 0x52000B7F, 0x00484000,
    0xA8005E38, 0x600076B7, 0x000EF2FE, 0x00FFCDD4, 0x05C7FC40, 0x00C67880, 0x1E200000,
    0x04F7F309, 0x2027CECF, 0x7EF73BEA, 0xED607E39, 0x1DDEA299, 0x001FE790, 0x007C7FE4,
    0x002F5D18, 0xC004CCE6, 0x00004BFB, 0xBDFFDF20, 0xFFAC13BB, 0x85DAC64C, 0x7B9EF9D5,
    0x782F8CF7, 0xBC60CF73, 0xBE789633, 0xF8AE7E00, 0x0000C02D, 0xB9F77A80, 0xDF881EF7,
    0xF8008E6F, 0xF7FF78D7, 0x8CF07BDE, 0xA40267B9, 0x0280601F, 0x57A278BC, 0x18FFEB92,
    0xF7FFA3B2, 0x305FDBFE, 0xDEA213F7, 0x000F18FF, 0xBC005BBF, 0x99E005D5, 0xEB700173,
    0x03F7C005, 0xFDF20000, 0xC13BBBDF, 0xAC64CFFA, 0xEF9D585D, 0xF8CF77B9, 0x0CF73782,
    0x89633BC6, 0xE7E00BE7, 0x0C02DF8A, 0x77A80000, 0x81EF7B9F, 0x08E6FDF8, 0xF78D7F80,
    0x07BDEF7F, 0x267B98CF, 0x0601FA40, 0x278BC028, 0xFEB9257A, 0xFA3B218F, 0xFDBFEF7F,
    0x213F7305, 0xF18FFDEA, 0x00BBBE00, 0x2FD5AEC4, 0xDD7E7720, 0x97E017F3, 0x4D56B2BF,
    0x7D07DEF0, 0xF2000017, 0x3BBBDFFD, 0x64CFFAC1, 0x9D585DAC, 0xCF77B9EF, 0xF73782F8,
    0x633BC60C, 0xE00BE789, 0x02DF8AE7, 0xA800000C, 0xEF7B9F77, 0xE6FDF881, 0x8D7F8008,
    0xBDEF7FF7, 0x7B98CF07, 0x01FA4026, 0x8BC02806, 0xB9257A27, 0x3B218FFE, 0xBFEF7FFA,
    0x3F7305FD, 0x8FFDEA21, 0x804000F1, 0x702FDDFC, 0xD9E5381F, 0x8D44C565, 0x77E37EF7,
    0xA73206BB, 0x617A9767, 0xFBBF91FE, 0x0000004B, 0xEFFEF900, 0xFD609DDD, 0x2ED63267,
    0xDCF7CEAC, 0xC17C67BB, 0xE3067B9B, 0xF3C4B19D, 0xC573F005, 0x0006016F, 0xCFBBD400,
    0xFC40F7BD, 0xC004737E, 0xBFFBC6BF, 0x6783DEF7, 0x20133DCC, 0x140300FD, 0xBD13C5E0,
    0xC7FF5C92, 0xBFFD1D90, 0x82FEDFF7, 0xF5109FB9, 0xA078C7FE, 0x069E40CF, 0x789E144F,
    0x8A8513C0, 0x1819F407, 0x000001A7, 0xBFFBE400, 0xF5827777, 0xBB58C99F, 0x73DF3AB0,
    0x05F19EEF, 0x8C19EE6F, 0xCF12C677, 0x15CFC017, 0x001805BF, 0x3EEF5000, 0xF103DEF7,
    0x0011CDFB, 0xFFEF1AFF, 0x9E0F7BDE, 0x804CF731, 0x500C03F4, 0xF44F1780, 0x1FFD724A,
    0xFFF47643, 0x0BFB7FDE, 0xD4427EE6, 0x01E31FFB, 0x00F777F2, 0x0F7DF770, 0x513CB0C0,
    0x3002B000, 0x00F3CF2C, 0x3FDF7DDC, 0x3DDDFC80, 0xBE400000, 0x27777BFF, 0x8C99FF58,
    0xF3AB0BB5, 0x19EEF73D, 0x9EE6F05F, 0x2C6778C1, 0xFC017CF1, 0x805BF15C, 0xF5000001,
    0x3DEF73EE, 0x1CDFBF10, 0xF1AFF001, 0xF7BDEFFE, 0xCF7319E0, 0xC03F4804, 0xF1780500,
    0xD724AF44, 0x476431FF, 0xB7FDEFFF, 0x27EE60BF, 0x31FFBD44, 0x73BF981E, 0x6B10AFCF,
    0xC817B3DF, 0xFA8856FD, 0x887BB1B5, 0x19C4FFD1, 0xBCF7BBF5, 0x9F3FE6B1, 0xF27EEF7D,
    0x15FA8CF0, 0xF46F3F31, 0x1CDF1837, 0x540B88D3, 0xE3780B1A, 0x4C029E6F, 0x00F3C02F,
    0x81900580, 0xEF73EEF1, 0xEF7FE5BD, 0x3BDEF7BD, 0x0473DE85, 0xC5730000, 0x7BDEF7DA,
    0xDEF7BDCB, 0x37BDEF7B, 0x003DFEFE, 0x03998009, 0x188003C0, 0x01DE9C80, 0x50AFC540,
    0x7FAF1EEF, 0x53DCE40F, 0x7BDDFA8F, 0xE7FC737F, 0xEF7BED67, 0xF764CDFF, 0x7FEF5908,
    0x4423DBA8, 0xF7C829F5, 0x015ECF7F, 0xA314CF73, 0xF579E0F7, 0xF33DDEFF, 0x2BFE3A1F,
    0xFBC76F19, 0xCAC01CE4, 0xF401FB67, 0xB3C00697, 0x00000266, 0x8C8001CC, 0x03F6C001,
    0x39C9E7D8, 0x8E946780, 0xFF464AFF, 0xFEAF3DA2, 0xF8D7BBDF, 0x14CF7327, 0x7C80F7A3,
    0x2BDBF1FF, 0x2F7E2300, 0xAB7E7180, 0x04F3C401, 0x07F55880, 0x15FEEEF8, 0x001FE790,
    0x007C7FE4, 0x002F5D18, 0xC004CCE6, 0x00004BFB, 0xFEE77D40, 0xDFDE04DF, 0x07EE7213,
    0xBDDF99DE, 0x3C1BF6FF, 0x5C87EC73, 0x1BAF345F, 0x8E6566A0, 0x9ABF801A, 0x138F00FE,
    0xBDEF7BDE, 0x0023DEF7, 0xEF7BBE00, 0x7BDEF7BD, 0x900125DF, 0x2FC001F9, 0xF314403F,
    0x720CF679, 0xE6F82FEE, 0xFFBDCF78, 0xEEF03FD7, 0xFFE8C527, 0x05BBF000, 0x005D5BC0,
    0x0017399E, 0x7C005EB7, 0x8000003F, 0xBFFDCEFA, 0x27BFBC09, 0xBC0FDCE4, 0xFF7BBF33,
    0xE67837ED, 0xBEB90FD8, 0x40375E68, 0x351CCACD, 0xFD357F00, 0xBC271E01, 0xEF7BDEF7,
    0x000047BD, 0x7BDEF77C, 0xBEF7BDEF, 0xF320024B, 0x7E5F8003, 0xF3E62880, 0xDCE419EC,
    0xF1CDF05F, 0xAFFF7B9E, 0x4FDDE07F, 0x01FFD18A, 0x1002EEF8, 0x80BF56BB, 0xCF75F9DC,
    0xFE5F805F, 0xC1355ACA, 0x5DF41F7B, 0xDF500000, 0x8137FFB9, 0x9C84F7F7, 0xE67781FB,
    0xFDBFEF77, 0xFB1CCF06, 0xCD17D721, 0x59A806EB, 0xE006A399, 0xC03FA6AF, 0xDEF784E3,
    0xF7BDEF7B, 0xEF800008, 0xBDEF7BDE, 0x4977DEF7, 0x007E6400, 0x100FCBF0, 0x3D9E7CC5,
    0x0BFB9C83, 0x73DE39BE, 0x0FF5FFEF, 0x3149FBBC, 0xCFA03FFA, 0x4F069E40, 0xC0789E14,
    0x078A8513, 0xA71819F4, 0x00000001, 0xFFDCEFA8, 0x7BFBC09B, 0xC0FDCE42, 0xF7BBF33B,
    0x67837EDF, 0xEB90FD8E, 0x0375E68B, 0x51CCACD4, 0xD357F003, 0xC271E01F, 0xF7BDEF7B,
    0x00047BDE, 0xBDEF77C0, 0xEF7BDEF7, 0x320024BB, 0xE5F8003F, 0x3E628807, 0xCE419ECF,
    0x1CDF05FD, 0xFFF7B9EF, 0xFDDE07FA, 0x1FFD18A4, 0xFC83FCF2, 0xEBA30F8F, 0x78999CC5,
    0xDD60097F, 0x00000001, 0x00000000, 0x00000000, 0xAB78B77E, 0xE2E733CB, 0x07EF8BD6,
    0x0001DD60, 0x00000000, 0x00000000, 0xDDF00000, 0xF56BB105, 0xBAFCEE4B, 0xF97E2FE7,
    0x7CD56B2B, 0x0BBE83EF, 0x001DD600, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0xD3C819F4, 0x789E144F, 0x3C54289E, 0x69C6067D, 0xEEB00000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x7BF98000, 0xEFAFF000, 0xBE0B113F, 0xCE777CCE, 0xFF5883FB,
    0x7BBFC72F, 0x05179E03, 0x5737EF88, 0xFB1BC05C, 0xE81B27ED, 0x3317E0DF, 0x16378800,
    0xFF73BF3C, 0xFC6C78EF, 0xF7390ABE, 0xF2AFC597, 0x35EEF73B, 0xEC6AA233, 0x0FFD1827,
    0xC600DC79, 0x8001CACB, 0x8000009C, 0xF001F223, 0x803C5644, 0x5F9F9631, 0x3B27D702,
    0x8F6A4AF6, 0xFD1D5839, 0xE637F7BF, 0x533FEB0B, 0x8002F7D4, 0x17EEFE40, 0x3CA70FB8,
    0x6A98ACBB, 0xBF1BF7BC, 0x4E6435DB, 0x32F52ECF, 0xFDDFC8FF, 0x80000025, 0x7BED63FB,
    0xF7FC82F6, 0xAC7FA310, 0xCF73DE3B, 0xF618F517, 0x2E7CF10C, 0x658A826F, 0x0B49E014,
    0x00000000, 0x00000000, 0x00000000, 0x9E400000, 0xFF20007F, 0xD18003E3, 0x9CC002F5,
    0xFEF00099, 0xC0000012, 0xFCF73BF3, 0x5F7E201E, 0x076FA885, 0xE77C6BFC, 0x3F8C6F9E,
    0x427ED47A, 0x3346BB3C, 0x317C03E3, 0xC400CC55, 0x80361A8C, 0xC00B1C6D, 0xC4000374,
    0x674C00B5, 0x51B600D8, 0x33100331, 0xF00F8CCA, 0xED47A4C5, 0x6BB3C427, 0xBE35FE34,
    0xC637CF73, 0x55F7E21F, 0x0076FA88, 0x000B77E0, 0xF001756F, 0x7000B9CC, 0xEF8005EB,
    0xE0000007, 0x7E7B9DF9, 0xAFBF100F, 0x03B7D442, 0x73BE35FE, 0x1FC637CF, 0x213F6A3D,
    0x99A35D9E, 0x98BE01F1, 0x6200662A, 0xC01B0D46, 0x60058E36, 0xE20001BA, 0x33A6005A,
    0xA8DB006C, 0x19880198, 0xF807C665, 0xF6A3D262, 0x35D9E213, 0xDF1AFF1A, 0xE31BE7B9,
    0x2AFBF10F, 0x003B7D44, 0x8800BBBE, 0x805FAB5D, 0xCF75F9DC, 0xFCBF005F, 0x026AB595,
    0x77D07DEF, 0xCF000001, 0x7BF3DCEF, 0x157DF880, 0xF01DBEA2, 0x7B9DF1AF, 0xE8FE31BE,
    0xF109FB51, 0x8CCD1AEC, 0x54C5F00F, 0x33100331, 0xB600D86A, 0xD3002C71, 0xD710000D,
    0x619D3002, 0xC546D803, 0x28CC400C, 0x17C03E33, 0x9FB51E93, 0xD1AECF10, 0xCEF8D7F8,
    0x7F18DF3D, 0x2157DF88, 0x0001DBEA, 0xFDDFC802, 0xA701F702, 0x98ACBB3C, 0xDFBDE350,
    0x01AEDDF8, 0x4BB3D399, 0x91FE60BD, 0x004BFBBF, 0xF0000000, 0xBF3DCEFC, 0x57DF8807,
    0x01DBEA21, 0xB9DF1AFF, 0x8FE31BE7, 0x109FB51E, 0xCCD1AECF, 0x4C5F00F8, 0x31003315,
    0x600D86A3, 0x3002C71B, 0x710000DD, 0x19D3002D, 0x546D8036, 0x8CC400CC, 0x7C03E332,
    0xFB51E931, 0x1AECF109, 0xEF8D7F8D, 0xF18DF3DC, 0x157DF887, 0xA01DBEA2, 0x069E40CF,
    0xF13C289E, 0x2A144F00, 0xC0CFA01E, 0x00000D38, 0xDF9E0000, 0x00F7E7B9, 0x442AFBF1,
    0x5FE03B7D, 0x7CF73BE3, 0xA3D1FC63, 0xD9E213F6, 0x1F199A35, 0x62A98BE0, 0xD4662006,
    0xE36C01B0, 0x1BA60058, 0x05AE2000, 0x06C33A60, 0x198A8DB0, 0x66519880, 0x262F807C,
    0x213F6A3D, 0xF1A35D9E, 0x7B9DF1AF, 0x10FE31BE, 0xD442AFBF, 0xDD6003B7, 0x00170005,
    0x0000BBE8, 0x00000000, 0xF7BDEF70, 0xBDEF7BDE, 0x8000BEF7, 0xF7BDEF7B, 0xBDEF7BDE,
    0x000005F7, 0xC0000000, 0x2E000BBA, 0x0BC60000, 0x7CF01A00, 0x7ADF9EE7, 0xEFBF107E,
    0x063D5109, 0x73BF2BFC, 0xC7F18EEF, 0x413F631A, 0x6F2F1EAF, 0x7E78C09C, 0x58A8AC73,
    0x2FA57709, 0xF950D86A, 0xE84C91E3, 0x5403A495, 0xA16030FE, 0xC33A6257, 0x5B07F2A0,
    0x95E8FC56, 0x1DE51988, 0x5F07F2B3, 0xBF46B0AC, 0x6BB3C52B, 0xB93FF8BC, 0x18DF3DEE,
    0x54F5887F, 0x4076FA88, 0xF73BEFE5, 0xBF601EFC, 0xFE790001, 0xF1FF9001, 0x2F5D1801,
    0x01333980, 0x0004BFBC, 0xDF803FB8, 0x00000005, 0x00000000, 0x00000000, 0xC8000000,
    0xE2B1E007, 0xFC70DE01, 0x49BF5066, 0xBDCF78CD, 0x7DE2AABF, 0xFDF3E42B, 0x02DDF800,
    0xF00BAB78, 0x6E00B9CC, 0x1FBE00BD, 0x01FDC000, 0x00002EFC, 0x00000000, 0x00000000,
    0x00000000, 0x8F003E40, 0x86F00F15, 0xFA8337E3, 0x7BC66A4D, 0x1555FDEE, 0x9F215BEF,
    0xEEF807EF, 0xD5AEC402, 0x5F9DC82F, 0x7E05FCF7, 0xD56B2BF9, 0xF41F7BC4, 0xFEE0005D,
    0x00177E00, 0x00000000, 0x00000000, 0x00000000, 0x801F2000, 0x78078AC7, 0x419BF1C3,
    0xE33526FD, 0xAAFEF73D, 0x90ADF78A, 0x3E83F7CF, 0x4F1A7903, 0xF0789E14, 0x41E2A144,
    0x1A71819F, 0xFDC00000, 0x002EFC01, 0x00000000, 0x00000000, 0x00000000, 0x003E4000,
    0xF00F158F, 0x8337E386, 0xC66A4DFA, 0x55FDEE7B, 0x215BEF15, 0x8007EF9F, 0xDE002DDF,
    0xCCF002EA, 0xF5B800B9, 0x01FBE002, 0x09DE6000, 0xE2B5DCF0, 0xA89EB803, 0x4AA88031,
    0xF1580FC7, 0xFE01F2A7, 0x4165F0B1, 0x1C660554, 0x55440E98, 0x4E0597E0, 0x403C722C,
    0x03E3C7E5, 0x46FD237C, 0x8C6FA602, 0xF9EA200F, 0x727002C5, 0x32780056, 0x3C66002E,
    0x002D6400, 0x62003E7C, 0xFC60018E, 0xDDF805E3, 0x4801EA3D, 0xEF007EB9, 0x0000000D,
    0x00000000, 0x00000000, 0xEE7DAC00, 0xEFF3C05E, 0x03FF4611, 0xF7B9EF5E, 0xF60FF237,
    0xF18F6A0C, 0x3AE00DE0, 0x1F230078, 0x00115800, 0x00000018, 0x45600018, 0x0F918090,
    0x3C1D701A, 0x1ED419FF, 0x3DE7E0F5, 0xF8C6FEF7, 0x611AF6A0, 0xBD100EF4, 0x000BDDCF,
    0x00000000, 0x00000000, 0xD3C819F4, 0x13C289E0, 0x50A2780F, 0x033E80F1, 0x000034E3,
    0x04EF3000, 0xF15AEE78, 0xD44F5C01, 0xA5544018, 0xF8AC07E3, 0xFF00F953, 0x20B2F858,
    0x0E3302AA, 0x2AA2074C, 0x2702CBF0, 0xA01E3916, 0x01F1E3F2, 0x237E91BE, 0xC637D301,
    0xFCF51007, 0x39380162, 0x193C002B, 0x1E330017, 0x0016B200, 0x31001F3E, 0xFE3000C7,
    0xEEFC02F1, 0xA400F51E, 0x00003F5C
EW_END_OF_FONT_RES( XFlatFontL )

/* Table with links to derived variants of the font resource : 'XFlat::FontL' */
EW_RES_WITHOUT_VARIANTS( XFlatFontL )

/* Initializer for the class 'XFlat::AnalogDisplay' */
void XFlatAnalogDisplay__Init( XFlatAnalogDisplay _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  ViewsImage__Init( &_this->Background, &_this->_XObject, 0 );
  ViewsText__Init( &_this->PercentText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( XFlatAnalogDisplay );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0000 );
  _this->MaxValue = 100;
  _this->CurrentValue = 50;
  CoreView_OnSetLayout((CoreView)&_this->Background, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->Background, _Const0000 );
  ViewsImage_OnSetColor( &_this->Background, XFlatColorXFlatGray );
  CoreView_OnSetLayout((CoreView)&_this->PercentText, CoreLayoutAlignToLeft | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop );
  CoreRectView__OnSetBounds( &_this->PercentText, _Const0001 );
  ViewsText_OnSetAlignment( &_this->PercentText, ViewsTextAlignmentAlignHorzCenter 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->PercentText, EwLoadString( &_Const0002 ));
  ViewsText_OnSetColor( &_this->PercentText, XFlatColorEnabled );
  _this->IndicatorAngle = 0.000000f;
  _this->BarColor = XFlatColorXFlatYellow;
  CoreGroup__Add( _this, ((CoreView)&_this->Background ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->PercentText ), 0 );
  ViewsImage_OnSetBitmap( &_this->Background, EwLoadResource( &XFlatWheelLargeBack, 
  ResourcesBitmap ));
  ViewsText_OnSetFont( &_this->PercentText, EwLoadResource( &XFlatFontNumbersXXL, 
  ResourcesFont ));
  _this->Indicator = EwLoadResource( &XFlatWheelLargeIndicator, ResourcesBitmap 
  );
}

/* Re-Initializer for the class 'XFlat::AnalogDisplay' */
void XFlatAnalogDisplay__ReInit( XFlatAnalogDisplay _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  ViewsImage__ReInit( &_this->Background );
  ViewsText__ReInit( &_this->PercentText );
}

/* Finalizer method for the class 'XFlat::AnalogDisplay' */
void XFlatAnalogDisplay__Done( XFlatAnalogDisplay _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( XFlatAnalogDisplay );

  /* Finalize all embedded objects */
  ViewsImage__Done( &_this->Background );
  ViewsText__Done( &_this->PercentText );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'XFlat::AnalogDisplay' */
void XFlatAnalogDisplay__Mark( XFlatAnalogDisplay _this )
{
  EwMarkObject( &_this->Background );
  EwMarkObject( &_this->PercentText );
  EwMarkObject( _this->Indicator );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method Draw() is invoked automatically if parts of the view should be redrawn 
   on the screen. This can occur when e.g. the view has been moved or the appearance 
   of the view has changed before.
   Draw() is invoked automatically by the framework, you never will need to invoke 
   this method directly. However you can request an invocation of this method by 
   calling the method InvalidateArea() of the views @Owner. Usually this is also 
   unnecessary unless you are developing your own view.
   The passed parameters determine the drawing destination aCanvas and the area 
   to redraw aClip in the coordinate space of the canvas. The parameter aOffset 
   contains the displacement between the origin of the views owner and the origin 
   of the canvas. You will need it to convert views coordinates into these of the 
   canvas.
   The parameter aOpacity contains the opacity descended from this view's @Owner. 
   It lies in range 0 .. 255. If the view implements its own 'Opacity', 'Color', 
   etc. properties, the Draw() method should calculate the resulting real opacity 
   by mixing the values of these properties with the one passed in aOpacity parameter.
   The parameter aBlend contains the blending mode descended from this view's @Owner. 
   It determines, whether the view should be drawn with alpha-blending active or 
   not. If aBlend is false, the outputs of the view should overwrite the corresponding 
   pixel in the drawing destination aCanvas. If aBlend is true, the outputs should 
   be mixed with the pixel already stored in aCanvas. For this purpose all Graphics 
   Engine functions provide a parameter to specify the mode for the respective drawing 
   operation. If the view implements its own 'Blend' property, the Draw() method 
   should calculate the resulting real blend mode by using logical AND operation 
   of the value of the property and the one passed in aBlend parameter. */
void XFlatAnalogDisplay_Draw( XFlatAnalogDisplay _this, GraphicsCanvas aCanvas, 
  XRect aClip, XPoint aOffset, XInt32 aOpacity, XBool aBlend )
{
  XInt32 dx = ( _this->Super2.Bounds.Point1.X + (( _this->Background.Super1.Bounds.Point1.X 
    + _this->Background.Super1.Bounds.Point2.X ) / 2 )) + aOffset.X;
  XInt32 dy = ( _this->Super2.Bounds.Point1.Y + (( _this->Background.Super1.Bounds.Point1.Y 
    + _this->Background.Super1.Bounds.Point2.Y ) / 2 )) + aOffset.Y;

  CoreGroup_Draw((CoreGroup)_this, aCanvas, aClip, aOffset, aOpacity, aBlend );
  XFlatAnalogDisplay_drawIndicator( _this, aCanvas, aClip, dx, dy, _this->IndicatorAngle, 
  _this->BarColor, aOpacity, aBlend );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void XFlatAnalogDisplay_UpdateViewState( XFlatAnalogDisplay _this, XSet aState )
{
  XFloat ratio;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( aState );

  ratio = 0.000000f;

  if ((( _this->MaxValue > _this->MinValue ) && ( _this->CurrentValue >= _this->MinValue 
      )) && ( _this->CurrentValue <= _this->MaxValue ))
  {
    if ( _this->CurrentValue > _this->MinValue )
      ratio = (XFloat)( _this->CurrentValue - _this->MinValue ) / (XFloat)( _this->MaxValue 
      - _this->MinValue );

    if ( ratio > 1.000000f )
      ratio = 1.000000f;

    _this->IndicatorAngle = ratio * 360.000000f;
  }

  ViewsText_OnSetString( &_this->PercentText, EwConcatString( EwNewStringInt((XInt32)(( 
  ratio * 100.000000f ) + 0.500000f ), 0, 10 ), EwLoadString( &_Const0003 )));
  CoreGroup__InvalidateArea( _this, EwGetRectORect( _this->Super2.Bounds ));
}

/* The method 'drawIndicator' is used to draw the colored indicator over the background. */
void XFlatAnalogDisplay_drawIndicator( XFlatAnalogDisplay _this, GraphicsCanvas 
  aCanvas, XRect aClip, XInt32 aX, XInt32 aY, XFloat aAngle, XColor aColor, XInt32 
  aOpacity, XBool aBlend )
{
  XFloat sinA;
  XFloat cosA;
  XFloat p1x;
  XFloat p1y;
  XFloat p2x;
  XFloat p2y;
  XFloat p3x;
  XFloat p3y;
  XFloat p4x;
  XFloat p4y;
  XRect clip;
  XColor c = aColor;
  XInt32 opacity = ((( aOpacity + 1 ) * _this->Super1.Opacity ) >> 8 ) + 1;
  XInt32 w;
  XInt32 h;
  XFloat quadAngle;

  aBlend = (XBool)( aBlend && (( _this->Super3.viewState & CoreViewStateAlphaBlended 
  ) == CoreViewStateAlphaBlended ));

  if ( opacity < 256 )
    c.Alpha = (XUInt8)(( c.Alpha * opacity ) >> 8 );

  if ( _this->Indicator == 0 )
    return;

  w = _this->Indicator->FrameSize.X;
  h = _this->Indicator->FrameSize.Y;
  quadAngle = 0.000000f;

  if ( aAngle >= 360.000000f )
    aAngle = 360.000000f;

  while ( aAngle >= 90.000000f )
  {
    sinA = EwMathSin( 90.000000f + quadAngle );
    cosA = EwMathCos( 90.000000f + quadAngle );
    p1x = (((XFloat)-w ) * cosA ) + ((XFloat)h * sinA );
    p1y = (((XFloat)-h ) * cosA ) - ((XFloat)w * sinA );
    p2x = (XFloat)h * sinA;
    p2y = ((XFloat)-h ) * cosA;
    p3x = 0.000000f;
    p3y = 0.000000f;
    p4x = ((XFloat)-w ) * cosA;
    p4y = ((XFloat)-w ) * sinA;

    if ( quadAngle == 0.000000f )
      clip = EwNewRect( aX, -10000, 10000, aY );
    else
      if ( quadAngle == 90.000000f )
        clip = EwNewRect( aX, aY, 10000, 10000 );
      else
        if ( quadAngle == 180.000000f )
          clip = EwNewRect( -10000, aY, aX, 10000 );
        else
          clip = EwNewRect( -10000, -10000, aX, aY );

    GraphicsCanvas_WarpBitmap( aCanvas, EwIntersectRect( aClip, clip ), _this->Indicator, 
    0, p1x + (XFloat)aX, p1y + (XFloat)aY, 1.000000f, p2x + (XFloat)aX, p2y + (XFloat)aY, 
    1.000000f, p3x + (XFloat)aX, p3y + (XFloat)aY, 1.000000f, p4x + (XFloat)aX, 
    p4y + (XFloat)aY, 1.000000f, EwNewRect( 0, 0, w, h ), c, c, c, c, aBlend, 1 
    );
    quadAngle = quadAngle + 90.000000f;

    if ( quadAngle >= 360.000000f )
      quadAngle = quadAngle - 360.000000f;

    aAngle = aAngle - 90.000000f;
  }

  sinA = EwMathSin( aAngle + quadAngle );
  cosA = EwMathCos( aAngle + quadAngle );
  p1x = (((XFloat)-w ) * cosA ) + ((XFloat)h * sinA );
  p1y = (((XFloat)-h ) * cosA ) - ((XFloat)w * sinA );
  p2x = (XFloat)h * sinA;
  p2y = ((XFloat)-h ) * cosA;
  p3x = 0.000000f;
  p3y = 0.000000f;
  p4x = ((XFloat)-w ) * cosA;
  p4y = ((XFloat)-w ) * sinA;

  if ( quadAngle == 0.000000f )
    clip = EwNewRect( aX, -10000, 10000, aY );
  else
    if ( quadAngle == 90.000000f )
      clip = EwNewRect( aX, aY, 10000, 10000 );
    else
      if ( quadAngle == 180.000000f )
        clip = EwNewRect( -10000, aY, aX, 10000 );
      else
        clip = EwNewRect( -10000, -10000, aX, aY );

  GraphicsCanvas_WarpBitmap( aCanvas, EwIntersectRect( aClip, clip ), _this->Indicator, 
  0, p1x + (XFloat)aX, p1y + (XFloat)aY, 1.000000f, p2x + (XFloat)aX, p2y + (XFloat)aY, 
  1.000000f, p3x + (XFloat)aX, p3y + (XFloat)aY, 1.000000f, p4x + (XFloat)aX, p4y 
  + (XFloat)aY, 1.000000f, EwNewRect( 0, 0, w, h ), c, c, c, c, aBlend, 1 );
}

/* Variants derived from the class : 'XFlat::AnalogDisplay' */
EW_DEFINE_CLASS_VARIANTS( XFlatAnalogDisplay )
EW_END_OF_CLASS_VARIANTS( XFlatAnalogDisplay )

/* Virtual Method Table (VMT) for the class : 'XFlat::AnalogDisplay' */
EW_DEFINE_CLASS( XFlatAnalogDisplay, CoreGroup, "XFlat::AnalogDisplay" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  XFlatAnalogDisplay_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  CoreGroup_UpdateLayout,
  XFlatAnalogDisplay_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( XFlatAnalogDisplay )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatButtonLeft )
  EW_BITMAP_FRAMES( XFlatButtonLeft, Default, EW_DRIVER_VARIANT_ALPHA8, 44, 44, 0 )
    EW_BITMAP_FRAME( 16, 1, 5, 1, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 27, 7, 11, 30, 0x00000260, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatButtonLeft, Default )              /* ratio 26.34 % */
    0x1C080100, 0x0320B048, 0x61648724, 0x9F4FA773, 0x0CB26BBB, 0xB0506121, 0x008BC5A2,
    0x75512002, 0x8F479FEF, 0xFC7E3AF7, 0x92154F77, 0x12531800, 0x23CD029C, 0x8A785CBE,
    0x90202078, 0x78228780, 0x18F3E172, 0x8C4A8A6D, 0xCC797624, 0x4FC246B6, 0x79B46B09,
    0x67E245DC, 0xFEF12DC1, 0xC022DB91, 0x5B0140E9, 0xA78BFDC8, 0x42006AC5, 0xB451331E,
    0x4793506A, 0x06532842, 0x0AF244C0, 0x3A578C59, 0xF17B4A52, 0x3F783FD0, 0x01FCA6DE,
    0x8C21DFEF, 0x03D5FE59, 0x906557A2, 0x58B0FF7A, 0x9FEF2124, 0xB12AC2DB, 0xA23793FC,
    0x904C50A2, 0xA7FA669D, 0xA914E0AB, 0x3A4E3163, 0x0370A457, 0x060652AD, 0xABAFF688,
    0xECFF70CA, 0xE5BBD5E5, 0x49B4B45F, 0xAAAB61FE, 0x7B5F46D2, 0xC80AF43C, 0xC0890FF6,
    0x58D4FF54, 0xDFEF31CD, 0xD57A1CBC, 0x600543FC, 0x467CBDC1, 0x77B0F2AD, 0x095BC6D7,
    0x402DEEF9, 0x0FEF59C2, 0xBC66F0EE, 0xD0DC55D5, 0x8B853C3F, 0x83076F70, 0x867F9E2C,
    0x5D2BFD64, 0x7FBE4918, 0x5560B4EA, 0x72C8FF11, 0x641D3FCD, 0xEA7FC4B6, 0x0794E09C,
    0xCEC35CFF, 0x0664053F, 0x48FC1500, 0x054A94D5, 0x784EC3FC, 0x45740A16, 0x7538D586,
    0x8E21881D, 0x03384FF8, 0x84DD74FC, 0xE1866615, 0xC838E73F, 0x7A0787A1, 0x0C145990,
    0x8460F0AA, 0x17A7F1FA, 0xE80A008F, 0xBA051194, 0x0B5E9F07, 0x591F43FE, 0x4477E079,
    0x77F96F79, 0x09647A97, 0xD8758475, 0x95DF2591, 0x00B785DF, 0x6724A800, 0x45DD79D5,
    0xE4409D37, 0x4A5BC365, 0xDD0739DB, 0x73FDC35B, 0xFDAB4084, 0xB04FC5B3, 0x6D585701,
    0x8525D0D0, 0x34A80D54, 0xBDB33849, 0xA93FDA75, 0x661EC411, 0x59B46221, 0xD08D0567,
    0x56916298, 0x953C5924, 0x3D581455, 0x904A6442, 0x6A61DC10, 0x89785D91, 0x7E5F000A,
    0x3DD6C5A9, 0x85AA6459, 0xF45D745C, 0x849A4795, 0x660357A6, 0x559683FD, 0x0E554458,
    0x516E7455, 0x918F56CE, 0xFF7B0235, 0x4A5D9510, 0x14A1B012, 0x06169D67, 0xE0FF4B45,
    0x334C4BA3, 0x1E1374D5, 0x0FF4ECBA, 0xA85A8D34, 0x8DDC2A51, 0xB148D214, 0xAA9272A5,
    0x086121D5, 0x93B4D62C, 0x58ED3E4F, 0x5B218B03, 0x00101592, 0x1C080100, 0x0320B048,
    0x49688724, 0x9FF0C7FB, 0x90875A34, 0xB1482830, 0x458145A2, 0xC86BE556, 0x55BE63B1,
    0x2C8A2E45, 0xC7586368, 0xD9872893, 0x84317918, 0x5130942B, 0xB2C10ABA, 0x31769160,
    0x176C7673, 0x360026B2, 0x6D0A74FC, 0x4D4D8FC8, 0x36934348, 0x8DF23484, 0x8CFFA7D2,
    0x14122C5A, 0x3D7E526A, 0x6780860B, 0x9A3C29F5, 0x85757505, 0x9520ABAA, 0x88306CA4,
    0xE0854B1D, 0x001EA1C2, 0x56360024, 0x4A25C0DA, 0x6B903D93, 0x8112EBB2, 0x9B1A9EAB,
    0xD758C0C8, 0x41ED7255, 0xC000961D, 0xED566483, 0x156BC025, 0xCC07E358, 0x34212EAC,
    0x09635756, 0x8A12A0CF, 0x2DDFF635, 0xBC2A0003, 0x5AAB1A4D, 0x50B47FE9, 0xB4A6C057,
    0xABD7CE1A, 0xB0D80006, 0x8DBB692D, 0xD2A1FFAF, 0x3E6922AD, 0x0387AFE0, 0x675550F0,
    0x73A5DBBE, 0x7B40C003, 0xA5D73B68, 0x3EC6C95D, 0xB1E91AB4, 0x1EAF53DA, 0xD7738B1A,
    0x8B4000D8, 0xB4F5D246, 0x9150CCE3, 0xD4FC5024, 0x8DC8FBF3, 0xECB53D51, 0x5455B218,
    0x18C52918, 0x958D8500, 0xC53978D5, 0x565F4095, 0x59D035D9, 0x01E1B143, 0x44156C5D,
    0xD143704B, 0xD0085142, 0x3B528861, 0x44241560, 0xC4721E73, 0xB117108F, 0x5249E251,
    0x8AD4845D, 0x12C5310C, 0xE5162550, 0x74420013, 0x283B5638, 0x084008DE, 0xA2174581,
    0x6494008F, 0x56444A95, 0x397D1194, 0x925203D9, 0x04802522, 0x0330AE21, 0xB8CC3E5C,
    0x377C8842, 0x00000406, 0x00000000

  EW_BITMAPS_TABLE( XFlatButtonLeft )
    EW_BITMAP( XFlatButtonLeft, Default )
EW_END_OF_BITMAP_RES( XFlatButtonLeft )

/* Table with links to derived variants of the bitmap resource : 'XFlat::ButtonLeft' */
EW_RES_WITHOUT_VARIANTS( XFlatButtonLeft )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatButtonRight )
  EW_BITMAP_FRAMES( XFlatButtonRight, Default, EW_DRIVER_VARIANT_ALPHA8, 44, 44, 0 )
    EW_BITMAP_FRAME( 16, 1, 5, 1, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 6, 7, 10, 30, 0x00000260, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatButtonRight, Default )             /* ratio 26.24 % */
    0x1C080100, 0x0320B048, 0x61648724, 0x9F4FA773, 0x0CB26BBB, 0xB0506121, 0x008BC5A2,
    0x75512002, 0x8F479FEF, 0xFC7E3AF7, 0x92154F77, 0x12531800, 0x23CD029C, 0x8A785CBE,
    0x90202078, 0x78228780, 0x18F3E172, 0x8C4A8A6D, 0xCC797624, 0x4FC246B6, 0x79B46B09,
    0x67E245DC, 0xFEF12DC1, 0xC022DB91, 0x5B0140E9, 0xA78BFDC8, 0x42006AC5, 0xB451331E,
    0x4793506A, 0x06532842, 0x0AF244C0, 0x3A578C59, 0xF17B4A52, 0x3F783FD0, 0x01FCA6DE,
    0x8C21DFEF, 0x03D5FE59, 0x906557A2, 0x58B0FF7A, 0x9FEF2124, 0xB12AC2DB, 0xA23793FC,
    0x904C50A2, 0xA7FA669D, 0xA914E0AB, 0xD8DADF63, 0x03654AE6, 0x060652AD, 0xABAFF688,
    0xCF7D19DE, 0xE5B95019, 0x49B4B45F, 0xFAAB61FE, 0x7FBB45B6, 0x14FC90F9, 0x709FED90,
    0xA9FEA900, 0x1D42ABD1, 0xD55625F0, 0x600543FC, 0x467CBDC1, 0x07389EC9, 0x09590A3C,
    0x402DEEF9, 0x092DF9C2, 0xE8A8FCAD, 0xD0DC65D5, 0x43643C3F, 0x16FC7FA0, 0xB2433FCF,
    0xEAB115FE, 0x7E3FDC21, 0xC456405D, 0xF35CB23F, 0x6D4E074F, 0x60478DE0, 0x3FC1E664,
    0x4FF3B0D7, 0xB06D3F01, 0x6463478D, 0xFF014006, 0x539E13B0, 0x869478C9, 0xF75D0286,
    0xFE214FE1, 0x008906F3, 0x8521275C, 0xA228292A, 0x63B21C86, 0x2E0907A0, 0x90864FF8,
    0x7E91083D, 0x4FF7F9FC, 0x41198583, 0x59F07BA0, 0x017FDF25, 0x7DC795EA, 0xD6479447,
    0x46B9FF79, 0x58475096, 0xDB5BDD87, 0x51DF47FD, 0x00002DE1, 0xC731CA2A, 0x4DD17A5D,
    0xD9791027, 0x735646F0, 0xDC570DDD, 0xF6AD0211, 0xB58516CF, 0x033A9CE0, 0x340FF6D0,
    0x55214974, 0x50C18503, 0x9D29694D, 0x046A4FF6, 0x8B1987B1, 0x59D66D17, 0xA6342341,
    0x4905A418, 0x15654F16, 0x108F5605, 0x84240E98, 0x6461893D, 0xF2A15E17, 0x6C5A97E5,
    0xA40593DD, 0xD745C85A, 0xA4795F45, 0x357A6849, 0x683FD660, 0x54458559, 0x16F550E5,
    0xF56CE556, 0xB02353A5, 0xD9510FF7, 0x1B0124A5, 0x69C6714A, 0xF4B45061, 0xC4BA3E0F,
    0x374D5334, 0x4ECBA1E1, 0xA1AA327F, 0x3A90A946, 0xFD234852, 0x272A4F63, 0x121D5A85,
    0x4D62C086, 0xD3E4F93B, 0x18B0358E, 0x01592592, 0x00000001, 0x1C080100, 0x0320B048,
    0x49688724, 0x9FF0C7FB, 0x90875A34, 0xB1482830, 0x458145A2, 0xC86BE556, 0x55BE63B1,
    0x2C8A2E45, 0xC7586368, 0xD9872893, 0x84317918, 0x5130942B, 0xB2C10ABA, 0x31769160,
    0x176C7673, 0x360026B2, 0x6D0A74FC, 0x4D4D8FC8, 0x36934348, 0x8DF23484, 0x8CFFA7D2,
    0x14122C5A, 0x3D7E526A, 0x6780860B, 0x9A3C29F5, 0x85757505, 0x9520ABAA, 0x9192FFB1,
    0x0A949288, 0x995D85C1, 0x6180003D, 0x036950A3, 0x26958C97, 0x5B818001, 0x5C08974A,
    0x055AB5D5, 0xAE9EB4BF, 0x9EC09002, 0xFC186C55, 0x2F6A7CBE, 0xDBA85E81, 0x40180036,
    0x4212EAD8, 0x1E69BD50, 0xA12C6A80, 0x79C34F58, 0x6D0A2CD8, 0xC94A6AAC, 0xF684FD81,
    0x439C355F, 0xC81091C9, 0x76BFF6A9, 0x04AE8576, 0xBFF7C960, 0x0E75C17C, 0x1F3BEA47,
    0x05B2A16E, 0x0EDDAF16, 0x00E8D276, 0x86ADA37A, 0x816AA95A, 0x02C6C7B4, 0x6B3454FD,
    0x66AC48D3, 0x2BAA5CDE, 0x238FC692, 0x195A8693, 0xD5AB6940, 0x8A4E77E4, 0xC358E30A,
    0x15952992, 0x7349565C, 0xE9550558, 0x6740D784, 0x0A8CF58D, 0x16E50D6C, 0xA7198941,
    0x85142D13, 0x27859CF0, 0x415603B5, 0x21C82442, 0xC45C4251, 0x491D88C6, 0x28731175,
    0x5012C532, 0x13E5161C, 0x386C4200, 0xCE253B56, 0xFB084008, 0x87CAB575, 0x9250023A,
    0x59052A55, 0xE98E4651, 0x46480F64, 0x1200948A, 0x8CC2B884, 0xE330F95D, 0xCDEF210A,
    0x00001018, 0x00000000

  EW_BITMAPS_TABLE( XFlatButtonRight )
    EW_BITMAP( XFlatButtonRight, Default )
EW_END_OF_BITMAP_RES( XFlatButtonRight )

/* Table with links to derived variants of the bitmap resource : 'XFlat::ButtonRight' */
EW_RES_WITHOUT_VARIANTS( XFlatButtonRight )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatButtonDay )
  EW_BITMAP_FRAMES( XFlatButtonDay, Default, EW_DRIVER_VARIANT_ALPHA8, 44, 44, 0 )
    EW_BITMAP_FRAME( 20, 15, 5, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 11, 3, 22, 6, 0x00000300, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatButtonDay, Default )               /* ratio 34.19 % */
    0x1C080100, 0x0320B048, 0x61648724, 0x9F4FA773, 0x0CB26BBB, 0xB0506121, 0x008BC5A2,
    0x75512002, 0x8F479FEF, 0xFC7E3AF7, 0x92154F77, 0x12531800, 0x23CD029C, 0x8A785CBE,
    0x90202078, 0x78228780, 0x18F3E172, 0x8C4A8A6D, 0xCC797624, 0x4FC246B6, 0x79B46B09,
    0x67E245DC, 0xFEF12DC1, 0xC022DB91, 0x5B0140E9, 0xA78BFDC8, 0x42006AC5, 0xB451331E,
    0x4793506A, 0x06532842, 0x0AF244C0, 0x3A578C59, 0xF17B4A52, 0x3F783FD0, 0x01FCA6DE,
    0x8C21DFEF, 0x03D5FE59, 0x36C1F3F2, 0xD4834E0C, 0x22C587FB, 0xDCFF7909, 0xAFF0F4FE,
    0xFF2C5585, 0x28A88DE4, 0x15411314, 0xB6522E51, 0xE909D16C, 0xE9FE9981, 0xEA45382A,
    0xF8458158, 0xC038B18D, 0x5D8B0252, 0xD82939F8, 0x8194AB40, 0xEBFDA201, 0x3F0A905A,
    0xC8AF6430, 0x5FE5B8B6, 0xFE49B4B4, 0xF15AAB61, 0x0407BE4A, 0x3ED99867, 0xE5826083,
    0xFB640516, 0xAA604487, 0x62306A7F, 0xDBC5D817, 0x66DE7FC8, 0x516D7C0B, 0x00543FCD,
    0x67CBDC16, 0x55826534, 0xCAB48DEF, 0x90492A6D, 0x200B3DCF, 0xA24FDAA1, 0x198E1478,
    0xC6605588, 0xE2AD1E36, 0x19E42E94, 0x2A1E0FF2, 0x3011E151, 0xC09001F4, 0xF1751E2D,
    0x18FF1E13, 0x453FCB22, 0x3FCD54A8, 0x915620ED, 0x13FCE704, 0x152A00CE, 0xD72C8FF1,
    0x4A41D3FC, 0x06F4782D, 0xC4786346, 0x5D944A83, 0x053FCEC3, 0x3FE1E4A4, 0x8154601B,
    0x5461F247, 0x1CEC3FC0, 0xFF7B9158, 0x1A400270, 0x1290191E, 0x30021B3F, 0xE0E74789,
    0x5A7ED058, 0x0CC15416, 0x64F98833, 0xF94D1794, 0xC0066CCF, 0xFB458159, 0x4624D92D,
    0x06C3FE41, 0xA9186046, 0xF4EC95D2, 0xD84A81E8, 0x416328C0, 0x26A8DA34, 0xD8AE4946,
    0x7C574A62, 0xB4026218, 0x4A9C8478, 0x21A8EC46, 0xE2A12A87, 0x186036D1, 0x2F1740F5,
    0x538AE3FE, 0xC478A479, 0xF5E51882, 0xC51F805F, 0x2A109B72, 0x7E847509, 0xCF35D5FC,
    0xF970607A, 0x3DF23851, 0x18258F00, 0x00208819, 0xD157A6A6, 0x491CF321, 0x99DB0B50,
    0x36414301, 0x7D917B2C, 0x60A001F8, 0xD40DD436, 0x757AB545, 0xE245466B, 0x408473FD,
    0x05B3FDC1, 0x345C21A4, 0x560424C0, 0x047F41B4, 0x5D0D0735, 0x80D54852, 0xD591A355,
    0x11BF3FDB, 0x4E67A184, 0x6A556C15, 0x023415AB, 0xC4FD8D64, 0x3A7B30C0, 0x9B3C5985,
    0x3D581455, 0x9295EABC, 0x8630F610, 0x89785D91, 0x7E5F117C, 0x3DD6C5A9, 0x905CA859,
    0x75D17216, 0x691E57D1, 0x66C1A212, 0x65D683FD, 0xD5439551, 0xB395585B, 0x8D646495,
    0x443FE180, 0x1B2CDBF1, 0xB1D6A94A, 0xF4B450C8, 0xC4BA3E0F, 0x374D5334, 0x4ECBA1E1,
    0xB09340FF, 0x912119CC, 0x8523C94A, 0xA93D9EF4, 0x4576449C, 0x8B021A09, 0x93E4ED35,
    0xC0D63B4F, 0x64AFC862, 0x00000405, 0x1C080100, 0x0320B048, 0x49688724, 0x9FF0C7FB,
    0x90875A34, 0xB1482830, 0x458145A2, 0xC86BE556, 0x55BE63B1, 0x2C8A2E45, 0xC7586368,
    0xD9872893, 0x84317918, 0x5130942B, 0xB2C10ABA, 0x31769160, 0x176C7673, 0x360026B2,
    0x6D0A74FC, 0x4D4D8FC8, 0x36934348, 0x8DF23484, 0x8CFFA7D2, 0x74122C5A, 0xE7123C28,
    0x59EBF294, 0xA53C0430, 0x542C00E1, 0x41668F0A, 0xBDAB275D, 0xEC761944, 0x396E58C9,
    0x05482AEA, 0x9C01AEA5, 0x634BF250, 0x01A8A50F, 0x215260B1, 0xAAE39718, 0xA2949F01,
    0xDA531BC2, 0x513925C0, 0x90DAF819, 0xCCCBA659, 0x9C63DA38, 0x55C08973, 0x13FF293A,
    0x88607665, 0x09E70CBC, 0x4120055D, 0x06F6A15F, 0x1AF2A45B, 0x43C80276, 0x90F408BB,
    0x4CBAAB29, 0x4DD60424, 0x50D084BA, 0xA87E00D6, 0xA0448CD6, 0x0284A4A8, 0x4001550B,
    0xED93D642, 0x50F00030, 0x6AAC6755, 0x40031D42, 0x4093930A, 0xE1AB4293, 0x5C9C89D4,
    0x5102754C, 0xF1B76CEB, 0xFF31D9A4, 0x0FAC092C, 0x43800073, 0x41840951, 0xC3E51C77,
    0x30EA471F, 0xED46CCC3, 0x3FDF17BD, 0x0EA828F9, 0x97ACF94C, 0xC4937893, 0x4379C9F4,
    0x509E03B5, 0xDD775427, 0x3771DA4E, 0xE9D23554, 0xCA408A84, 0x678F6475, 0x54362400,
    0x750DC62C, 0x7C244085, 0xA23C1382, 0x14400750, 0x8482114A, 0x13FCC050, 0xF44E45DB,
    0x4850CBD5, 0x1E1396B8, 0x49F6500C, 0x06A1BB69, 0xE86903CF, 0x00024F64, 0x941312A0,
    0xCD2435E8, 0xD33C9965, 0x46583251, 0xA24C1186, 0x52661030, 0x13126668, 0xD4318557,
    0x1530378E, 0xE4475B55, 0x7891D858, 0x16D541C2, 0x36C8FF54, 0x0D4F2D10, 0x142D14FA,
    0x4EA7E085, 0xA130F0F3, 0x3950ED52, 0x12041090, 0x423F139A, 0xA686C45C, 0x11754943,
    0xC4C2A079, 0x95404B14, 0x3E5151DA, 0xA3C42001, 0x69D3B69A, 0x008400AB, 0x58ABA95A,
    0x84496ADA, 0x54EB44AA, 0x9309ECAB, 0x3AFD203D, 0x10480252, 0x0C82CAE2, 0x908AE845,
    0x1014FA5C, 0x00000000

  EW_BITMAPS_TABLE( XFlatButtonDay )
    EW_BITMAP( XFlatButtonDay, Default )
EW_END_OF_BITMAP_RES( XFlatButtonDay )

/* Table with links to derived variants of the bitmap resource : 'XFlat::ButtonDay' */
EW_RES_WITHOUT_VARIANTS( XFlatButtonDay )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatButtonNight )
  EW_BITMAP_FRAMES( XFlatButtonNight, Default, EW_DRIVER_VARIANT_ALPHA8, 44, 44, 0 )
    EW_BITMAP_FRAME( 28, 28, 5, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 24, 7, 14, 19, 0x0000030C, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatButtonNight, Default )             /* ratio 35.12 % */
    0x1C080100, 0x0320B048, 0x61648724, 0x9F4FA773, 0x0CB26BBB, 0xB0506121, 0x008BC5A2,
    0x75512002, 0x8F479FEF, 0xFC7E3AF7, 0x92154F77, 0x12531800, 0x23CD029C, 0x8A785CBE,
    0x90202078, 0x78228780, 0x18F3E172, 0x8C4A8A6D, 0xCC797624, 0x4FC246B6, 0x79B46B09,
    0x67E245DC, 0xFEF12DC1, 0xC022DB91, 0x5B0140E9, 0xA78BFDC8, 0x42006AC5, 0xB451331E,
    0x4793506A, 0x06532842, 0x0AF244C0, 0x3A578C59, 0xF17B4A52, 0x3F783FD0, 0x01FCA6DE,
    0x8C21DFEF, 0x03D5FE59, 0x906557A2, 0x58B0FF7A, 0x9FEF2124, 0x96038B5B, 0xEE164A4C,
    0xA26636DF, 0x88C58CA2, 0x11BC9FE5, 0x82628515, 0xC8DD472C, 0x3D14F6D3, 0x9FE99948,
    0xA45382AE, 0xC1E81E6E, 0xB77B47D8, 0xB4CA4132, 0x76C7B4CA, 0xD0363051, 0x8060652A,
    0x16BAFF68, 0x1FF7D25C, 0x2A032BB3, 0x11F588FE, 0xFF2DC60F, 0xF24DA5A2, 0x82555B0F,
    0xB3FDF245, 0x90A54727, 0x5CF71E73, 0x1FED9014, 0xFEA98112, 0xA21829A9, 0xAB6C47F9,
    0xE8AEACA8, 0x27479AA1, 0x0FF1A917, 0x702C002A, 0x11463E4F, 0x2369CB74, 0x0187B3C1,
    0x55A06D15, 0x240DB33B, 0x2CF73E41, 0x156B8480, 0x3B4FF2B9, 0x8661ECA8, 0xE5689F1C,
    0x54183251, 0xFF3F03C4, 0x2E917210, 0x8FF219EE, 0x60B51575, 0x78C91091, 0x05534E14,
    0x3CCFF289, 0xC78415FB, 0xF2C8863F, 0x0D7A114F, 0x02905969, 0x1751E0CD, 0x8FF11516,
    0xD3FCD72C, 0x78666141, 0x95454B14, 0x07916295, 0xCEC35CFF, 0x0614053F, 0xF11E2580,
    0xD53FE3D0, 0x3FC05458, 0x266860EC, 0xF3B40C00, 0xF9052F4F, 0x0745D771, 0x92A739CA,
    0x8754101E, 0x33E67C47, 0x82669966, 0x0418CFF9, 0x9BA3F205, 0xE8195670, 0xA3FCDE9C,
    0xB63E4108, 0x46985FC9, 0x30273922, 0x503978FF, 0x645604A5, 0xD23294C4, 0xAB8C2668,
    0x4783640C, 0x07945869, 0x38704791, 0x64FF33E7, 0xFF2A1032, 0x50916820, 0x6BE81847,
    0xF3D80961, 0xFC00794F, 0x162711E0, 0x0021985D, 0xD857CEBC, 0x00E51E15, 0xCDA60900,
    0x024581B3, 0x3661BA96, 0x60B5BDDF, 0xB0540338, 0x5866478D, 0x473FDEC4, 0x3FDC7408,
    0x8515E85B, 0x51387E47, 0x5C933FD9, 0x74341D84, 0x03552149, 0x1E808564, 0xF47CBD3F,
    0xFDC34597, 0x30411C53, 0x06D4E68E, 0x06083695, 0x56BDAD46, 0x298D08D0, 0xB7AF13F6,
    0x67015271, 0x5156815B, 0xF108F560, 0x60F318D3, 0x15930666, 0xC6AC6109, 0xD785D916,
    0x75F5D29C, 0x916B45F0, 0x03CD0594, 0x5D172169, 0x8FF58338, 0xD5921526, 0x022D5980,
    0x5116129D, 0x5BD54395, 0xD5B39558, 0x008D6463, 0x25443FE3, 0x6C049298, 0xC89AE528,
    0xD2D14185, 0x12E8F83F, 0xDD354CD3, 0x3B2E8784, 0xC2CD03FD, 0x8A946B34, 0x848523B1,
    0xF1272A5A, 0x8686905C, 0x3B4D62C0, 0x8ED3E4F9, 0x1218B035, 0x0101592C, 0x1C080100,
    0x0320B048, 0x49688724, 0x9FF0C7FB, 0x90875A34, 0xB1482830, 0x458145A2, 0xC86BE556,
    0x55BE63B1, 0x2C8A2E45, 0xC7586368, 0xD9872893, 0x84317918, 0x5130942B, 0xB2C10ABA,
    0x31769160, 0x176C7673, 0x360026B2, 0x6D0A74FC, 0x4D4D8FC8, 0x36934348, 0x8DF23484,
    0x8CFFA7D2, 0x14122C5A, 0x3D7E526A, 0x9780860B, 0x362D1F93, 0x20003C36, 0xAB8BA331,
    0xD1E14379, 0x262BA82C, 0x2E1546BF, 0x55C3A826, 0x5482AEA7, 0x31CB8662, 0x33120130,
    0x8950CC6F, 0x4BC2502B, 0x2E08549D, 0x81EB4944, 0xAAA819C0, 0x64E60472, 0xD29D21E0,
    0xA9812E06, 0x048000CB, 0xC2F6748D, 0xCE909020, 0xA1570225, 0xE098E6F4, 0xEAAB2A09,
    0x42A70C76, 0xAB9CAC60, 0x8943DB3E, 0x4203E2E4, 0xDB923B1B, 0x5A024000, 0x6C12F698,
    0xF8A51946, 0x1A994215, 0xD02E2181, 0xC393B9C6, 0x93D80006, 0x98698973, 0x5AF63B8B,
    0xB6C3C009, 0x30005D93, 0xD0927D90, 0x0487AB6D, 0x8FFF6092, 0x31514099, 0xCAB35563,
    0x27409330, 0x45A58927, 0xC4E0D54C, 0x08693FDF, 0xE9471264, 0x3B5310A9, 0x8F37F1C1,
    0xD1080004, 0x3C002051, 0x113E5310, 0x001F17F2, 0x88A470E1, 0x781A1B40, 0x71023860,
    0xEA1F91C2, 0x81DFB83D, 0x0754D10C, 0x08380083, 0xC1EF3553, 0x030003F8, 0x15D34436,
    0x63077DF9, 0x94317948, 0xC496408C, 0x30120844, 0x00030432, 0x05743466, 0x78980600,
    0xEC091212, 0x00726076, 0x300FF684, 0x13118D02, 0x88C0A897, 0xFCC6408A, 0x0C5C4DB3,
    0x99D31390, 0x63011400, 0xA3F01E6F, 0x6502090E, 0xE1565392, 0x408AE53D, 0xD622C481,
    0x3665394F, 0x794F9150, 0x4200DA43, 0x6207840C, 0x14F2D105, 0xF40D6B39, 0xD13A27C0,
    0x56085142, 0x5F6534EA, 0x53A3A863, 0x2412953B, 0x713A6484, 0x995940C2, 0x3F1287D0,
    0x46C45A8D, 0x75493993, 0x9EB45211, 0x404B14C4, 0x5150CAE5, 0x29D8553E, 0x1AC4ED7F,
    0xC1AA086C, 0xC1A94AB8, 0x55925002, 0xD53B352A, 0x64E65A2A, 0x8ED2480F, 0xAE2117E4,
    0x3E5C1330, 0x64B2B8CC, 0x0406C102, 0x00000000

  EW_BITMAPS_TABLE( XFlatButtonNight )
    EW_BITMAP( XFlatButtonNight, Default )
EW_END_OF_BITMAP_RES( XFlatButtonNight )

/* Table with links to derived variants of the bitmap resource : 'XFlat::ButtonNight' */
EW_RES_WITHOUT_VARIANTS( XFlatButtonNight )

/* Bitmap resources used for the radio button widgets. All bitmap resource contain 
   two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatRadio )
  EW_BITMAP_FRAMES( XFlatRadio, Default, EW_DRIVER_VARIANT_ALPHA8, 36, 36, 0 )
    EW_BITMAP_FRAME( 19, 34, 5, 1, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 12, 12, 12, 12, 0x000001A0, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatRadio, Default )                   /* ratio 35.96 % */
    0x1C080100, 0x08605048, 0xB19CA635, 0x9D8FA7D3, 0x426A5333, 0x71489C14, 0xC62D00E0,
    0x78D469FE, 0x7FC6DEEF, 0x19658CFE, 0x1164B150, 0x61D31A6C, 0x80A272C2, 0xB02802C0,
    0x11A74A60, 0x0592915B, 0xF8D26411, 0x92CB8AAC, 0xD33CAC05, 0x4E012998, 0xFD981600,
    0xC046678B, 0xC80281D1, 0xCCC7FBC4, 0x280AC942, 0x3A7895A5, 0x7FB484B1, 0x54502AD8,
    0x309FEC80, 0x42295C08, 0x990FF610, 0xFE9D8982, 0xB6907B49, 0x9EAF83E2, 0x07F9160A,
    0x92DD448F, 0xB112A624, 0x99DFED78, 0xFCD138BF, 0x401246BB, 0x9CD07F96, 0x0028AE22,
    0x022CBFDA, 0x32ABFD8B, 0x7F95A719, 0xF08800C4, 0x67408E77, 0x89FCEAA0, 0xD30FF348,
    0xFE9A9C69, 0xEFF521A5, 0x5892EBCA, 0x9A1A95FE, 0x14C576E2, 0xFBB59EFF, 0xC177D3F7,
    0xE5D8FF02, 0xE2BC67BB, 0x9BCB7CBD, 0xBC3E7C53, 0xC80074B8, 0x7DEBFE1D, 0x67F0205D,
    0x07776DB4, 0xEB149B90, 0xC401E34C, 0x74BA334E, 0x25A902F7, 0xFD2F166A, 0x8F81680A,
    0x7CAF4B23, 0xC280E059, 0x98A74868, 0x40019235, 0xF97E52C4, 0x833FD816, 0x5C89B411,
    0xD776BD74, 0x444C9B3F, 0x75685996, 0x6F5B56B6, 0x5C95844D, 0x15E6215B, 0x54556258,
    0xA14B3281, 0x0251E051, 0x329531A0, 0x93A49625, 0x6158D146, 0x454144DD, 0x69021443,
    0x3FD85111, 0x058264E9, 0x84C13F0A, 0x2D342685, 0x035D60D6, 0x3F8C5164, 0x91F4751F,
    0xF48CC53F, 0x9068085A, 0xF9728CD2, 0x290CD3B0, 0x54744868, 0x00000040, 0x1C080100,
    0x08605048, 0xB19CA635, 0x9D8FA7D3, 0x426A5333, 0x71489C14, 0xC62D00E0, 0x78D469FE,
    0x7FC6DEEF, 0x19658CFE, 0x1164B150, 0x61D31A6C, 0x80A272C2, 0xB02802C0, 0x11A74A60,
    0x0592915B, 0xF8D26411, 0x92CB8AAC, 0xD33CAC05, 0x4E012998, 0xFD981600, 0xC046678B,
    0xC80281D1, 0xCCC7FBC4, 0x280AC942, 0x3A7895A5, 0x7FB484B1, 0x54502AD8, 0x309FEC80,
    0x42295C08, 0x990FF610, 0xFE9D8982, 0xB6907B49, 0x9EAF83E2, 0x07F9160A, 0x92DD448F,
    0xB112A624, 0x19DFED78, 0x52949993, 0x22B374CD, 0x48D77F9A, 0x0FF2C802, 0x2489D39A,
    0x38FC7D86, 0x0144EFCC, 0x1165FED0, 0x155FEC58, 0x6DDA3F8A, 0x078EDCDE, 0x88FF2B45,
    0xEFE11001, 0xF0CC011C, 0x3BEEAF56, 0x7F3A80B1, 0xC3FCD222, 0x6E981144, 0x6A28C0DD,
    0xD48697FA, 0x85132BBF, 0x642E3F1C, 0xA57F9622, 0x6898A686, 0x4B6EBA69, 0x7BFC5313,
    0xC127FAA6, 0x5757DE6D, 0x5D8FFDEB, 0xF3147BBE, 0x8F0CDFA5, 0xEF7CBDE2, 0x98FFCFE3,
    0xF2BE7ECF, 0x9FB7A113, 0xE7B0DB46, 0x15DB3FD0, 0xFF80DDD4, 0x78905780, 0x5D0738CF,
    0x5831D241, 0x91D7415D, 0xC5265C22, 0x44DC980D, 0x9B41A5CB, 0x96A9986D, 0x119E3B5E,
    0x123F9BE4, 0x41613695, 0x5C78983C, 0x115D146B, 0x5994409B, 0xC6091146, 0x41229721,
    0xD02689A0, 0x81A18500, 0x30FC5298, 0x8F4958C3, 0x00197359, 0xE3F52C44, 0xF605045F,
    0x6D0460CF, 0x545D1722, 0x3FD77412, 0x96444C9B, 0x09756859, 0xBD6D5AC0, 0x72561135,
    0x57A5456D, 0x51558960, 0x852CCA05, 0x094793C6, 0xCA54C680, 0x4E9259C8, 0x8563451A,
    0x15051479, 0xA408510D, 0xFF614445, 0x160993A4, 0x1304FC28, 0x04D09A16, 0x0D759619,
    0xFE314590, 0x47D1D47C, 0x923314FE, 0x41A10699, 0xE5EE334A, 0xA4334EC3, 0x51D121A0,
    0x00000101, 0x00000000

  EW_BITMAPS_TABLE( XFlatRadio )
    EW_BITMAP( XFlatRadio, Default )
EW_END_OF_BITMAP_RES( XFlatRadio )

/* Table with links to derived variants of the bitmap resource : 'XFlat::Radio' */
EW_RES_WITHOUT_VARIANTS( XFlatRadio )

/* Bitmap resources used for the checkbox widgets. All bitmap resource contain two 
   frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatCheck )
  EW_BITMAP_FRAMES( XFlatCheck, Default, EW_DRIVER_VARIANT_ALPHA8, 36, 36, 0 )
    EW_BITMAP_FRAME( 4, 0, 28, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 2, 1, 19, 15, 0x000000B0, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatCheck, Default )                   /* ratio 14.20 % */
    0x689C0100, 0xC19FEF25, 0x2A130883, 0xD5AF285C, 0xDE280009, 0x71489C2D, 0xAD143BE2,
    0x00E2D5FE, 0x8FC7A3A0, 0xC48A4320, 0xAB5FEB50, 0x8830FF79, 0x6432C95C, 0x0CF17F86,
    0x13399CB6, 0x229BCD21, 0xD9DCE26D, 0x9C4F2751, 0x0CD27F3E, 0xD125B42A, 0x228F2BA2,
    0xE974A90D, 0x7B4EA6C7, 0x12CA8C1E, 0x4EAB546A, 0x8AD52EB1, 0xAF516B94, 0x14FEC142,
    0x4EEC93CB, 0x52A740B3, 0x2D76A9CD, 0xE137B448, 0xD6EB6D0E, 0x749ADCA3, 0x883002EB,
    0x8EDE8332, 0xBC65E32F, 0x866EB7E5, 0x484F265B, 0xE2B8C8AC, 0x5A2587BB, 0xD94C6CC5,
    0x0012E0A0, 0x00000202, 0x586C0100, 0xC19FEE75, 0x2A130883, 0xD56E785C, 0xDA2A0006,
    0x71489C2D, 0xAE153B62, 0xF8DC6A2A, 0x8E3CD5CF, 0x0BC21720, 0xC9A4B249, 0xAA532893,
    0x2132C95C, 0x5AB1303F, 0x05D7E42E, 0x32558180, 0xC004D211, 0x9CA94073, 0xECF276FF,
    0xCBE649F9, 0x0D0281A1, 0x28F2C4CD, 0x950640CF, 0xD2A49CF2, 0x07A80029, 0x945002A5,
    0x85520C12, 0xF49AB95A, 0x56A274FA, 0x5EC92542, 0x2B1528AD, 0x355F31C8, 0xB7092526,
    0x757FD02C, 0x1335DED7, 0xBB5F2817, 0x05F4F140, 0xDE80CC6A, 0xB93906BB, 0xB1B8CC45,
    0x2990C7E3, 0x2F0C747E, 0x1155E3A3, 0x213BB71B, 0xA0391510, 0x0C3D50E4, 0x00000008,
    0x00000000

  EW_BITMAPS_TABLE( XFlatCheck )
    EW_BITMAP( XFlatCheck, Default )
EW_END_OF_BITMAP_RES( XFlatCheck )

/* Table with links to derived variants of the bitmap resource : 'XFlat::Check' */
EW_RES_WITHOUT_VARIANTS( XFlatCheck )

/* Initializer for the class 'XFlat::CheckBox' */
void XFlatCheckBox__Init( XFlatCheckBox _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->BoxImage, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( XFlatCheckBox );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0004 );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0005 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0006 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0007 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0008 );
  CoreRectView__OnSetBounds( &_this->BoxImage, _Const0009 );
  ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorEnabled );
  ViewsImage_OnSetFrameNumber( &_this->BoxImage, 0 );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const000A );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const000B ));
  ViewsText_OnSetColor( &_this->CaptionText, XFlatColorEnabled );
  EwRetainString( &_this->Caption, EwLoadString( &_Const000B ));
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BoxImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  _this->TouchHandler.OnLeave = EwNewSlot( _this, XFlatCheckBox_enterLeaveSlot );
  _this->TouchHandler.OnEnter = EwNewSlot( _this, XFlatCheckBox_enterLeaveSlot );
  _this->TouchHandler.OnRelease = EwNewSlot( _this, XFlatCheckBox_pressReleaseSlot 
  );
  _this->TouchHandler.OnPress = EwNewSlot( _this, XFlatCheckBox_pressReleaseSlot 
  );
  ViewsImage_OnSetBitmap( &_this->BoxImage, EwLoadResource( &XFlatCheck, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &XFlatFontL, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'XFlat::CheckBox' */
void XFlatCheckBox__ReInit( XFlatCheckBox _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsImage__ReInit( &_this->BoxImage );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'XFlat::CheckBox' */
void XFlatCheckBox__Done( XFlatCheckBox _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( XFlatCheckBox );

  /* Finalize all embedded objects */
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsImage__Done( &_this->BoxImage );
  ViewsText__Done( &_this->CaptionText );

  /* Release all used strings */
  EwReleaseString( &_this->Caption );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'XFlat::CheckBox' */
void XFlatCheckBox__Mark( XFlatCheckBox _this )
{
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->BoxImage );
  EwMarkObject( &_this->CaptionText );
  EwMarkRef( _this->Outlet );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void XFlatCheckBox_UpdateLayout( XFlatCheckBox _this, XPoint aSize )
{
  XInt32 s;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  s = aSize.Y;
  CoreRectView__OnSetBounds( &_this->BoxImage, EwNewRect( 0, 0, s, s ));
  CoreRectView__OnSetBounds( &_this->CaptionText, EwNewRect( s, 0, aSize.X, aSize.Y 
  ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void XFlatCheckBox_UpdateViewState( XFlatCheckBox _this, XSet aState )
{
  XBool touched = (XBool)( _this->TouchHandler.Down && _this->TouchHandler.Inside 
    );

  if (( _this->Checked && !touched ) || ( !_this->Checked && touched ))
    ViewsImage_OnSetFrameNumber( &_this->BoxImage, 1 );
  else
    ViewsImage_OnSetFrameNumber( &_this->BoxImage, 0 );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorEnabled );
    ViewsText_OnSetColor( &_this->CaptionText, XFlatColorEnabled );
  }
  else
  {
    ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorDisabled );
    ViewsText_OnSetColor( &_this->CaptionText, XFlatColorDisabled );
  }
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatCheckBox_enterLeaveSlot( XFlatCheckBox _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatCheckBox_pressReleaseSlot( XFlatCheckBox _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Down && _this->TouchHandler.Inside )
  {
    XFlatCheckBox_OnSetChecked( _this, (XBool)!_this->Checked );

    if ( _this->Outlet.Object != 0 )
      EwOnSetBool( _this->Outlet, _this->Checked );

    EwNotifyRefObservers( _this->Outlet, 0 );
    EwIdleSignal( _this->OnChange, ((XObject)_this ));
  }
}

/* 'C' function for method : 'XFlat::CheckBox.OnSetCaption()' */
void XFlatCheckBox_OnSetCaption( XFlatCheckBox _this, XString value )
{
  EwRetainString( &_this->Caption, value );
  ViewsText_OnSetString( &_this->CaptionText, value );
}

/* This slot method will receive a signal, if the value of the property assigned 
   to @Outlet has been changed by another widget or by the application logic. In 
   response to this notification, the widget will update itself. */
void XFlatCheckBox_outletSlot( XFlatCheckBox _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Outlet.Object != 0 )
    XFlatCheckBox_OnSetChecked( _this, EwOnGetBool( _this->Outlet ));
}

/* 'C' function for method : 'XFlat::CheckBox.OnSetOutlet()' */
void XFlatCheckBox_OnSetOutlet( XFlatCheckBox _this, XRef value )
{
  if ( !EwCompRef( _this->Outlet, value ))
    return;

  if ( _this->Outlet.Object != 0 )
    EwDetachRefObserver( EwNewSlot( _this, XFlatCheckBox_outletSlot ), _this->Outlet, 
      0 );

  _this->Outlet = value;

  if ( value.Object != 0 )
    EwAttachRefObserver( EwNewSlot( _this, XFlatCheckBox_outletSlot ), value, 0 
      );

  if ( value.Object != 0 )
    EwPostSignal( EwNewSlot( _this, XFlatCheckBox_outletSlot ), ((XObject)_this 
      ));
}

/* 'C' function for method : 'XFlat::CheckBox.OnSetChecked()' */
void XFlatCheckBox_OnSetChecked( XFlatCheckBox _this, XBool value )
{
  if ( _this->Checked == value )
    return;

  _this->Checked = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* Variants derived from the class : 'XFlat::CheckBox' */
EW_DEFINE_CLASS_VARIANTS( XFlatCheckBox )
EW_END_OF_CLASS_VARIANTS( XFlatCheckBox )

/* Virtual Method Table (VMT) for the class : 'XFlat::CheckBox' */
EW_DEFINE_CLASS( XFlatCheckBox, CoreGroup, "XFlat::CheckBox" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  XFlatCheckBox_UpdateLayout,
  XFlatCheckBox_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( XFlatCheckBox )

/* Initializer for the class 'XFlat::RadioButton' */
void XFlatRadioButton__Init( XFlatRadioButton _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->BoxImage, &_this->_XObject, 0 );
  ViewsText__Init( &_this->CaptionText, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( XFlatRadioButton );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0004 );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0005 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0006 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0007 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0008 );
  CoreRectView__OnSetBounds( &_this->BoxImage, _Const000C );
  ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorEnabled );
  ViewsImage_OnSetFrameNumber( &_this->BoxImage, 0 );
  CoreRectView__OnSetBounds( &_this->CaptionText, _Const000D );
  ViewsText_OnSetAlignment( &_this->CaptionText, ViewsTextAlignmentAlignHorzLeft 
  | ViewsTextAlignmentAlignVertCenter );
  ViewsText_OnSetString( &_this->CaptionText, EwLoadString( &_Const000E ));
  ViewsText_OnSetColor( &_this->CaptionText, XFlatColorEnabled );
  EwRetainString( &_this->Caption, EwLoadString( &_Const000E ));
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->BoxImage ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->CaptionText ), 0 );
  _this->TouchHandler.OnLeave = EwNewSlot( _this, XFlatRadioButton_enterLeaveSlot 
  );
  _this->TouchHandler.OnEnter = EwNewSlot( _this, XFlatRadioButton_enterLeaveSlot 
  );
  _this->TouchHandler.OnRelease = EwNewSlot( _this, XFlatRadioButton_pressReleaseSlot 
  );
  _this->TouchHandler.OnPress = EwNewSlot( _this, XFlatRadioButton_pressReleaseSlot 
  );
  ViewsImage_OnSetBitmap( &_this->BoxImage, EwLoadResource( &XFlatRadio, ResourcesBitmap 
  ));
  ViewsText_OnSetFont( &_this->CaptionText, EwLoadResource( &XFlatFontL, ResourcesFont 
  ));
}

/* Re-Initializer for the class 'XFlat::RadioButton' */
void XFlatRadioButton__ReInit( XFlatRadioButton _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsImage__ReInit( &_this->BoxImage );
  ViewsText__ReInit( &_this->CaptionText );
}

/* Finalizer method for the class 'XFlat::RadioButton' */
void XFlatRadioButton__Done( XFlatRadioButton _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( XFlatRadioButton );

  /* Finalize all embedded objects */
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsImage__Done( &_this->BoxImage );
  ViewsText__Done( &_this->CaptionText );

  /* Release all used strings */
  EwReleaseString( &_this->Caption );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'XFlat::RadioButton' */
void XFlatRadioButton__Mark( XFlatRadioButton _this )
{
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->TouchHandler );
  EwMarkObject( &_this->BoxImage );
  EwMarkObject( &_this->CaptionText );
  EwMarkRef( _this->Outlet );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void XFlatRadioButton_UpdateLayout( XFlatRadioButton _this, XPoint aSize )
{
  XInt32 s;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  s = aSize.Y;
  CoreRectView__OnSetBounds( &_this->BoxImage, EwNewRect( 0, 0, s, s ));
  CoreRectView__OnSetBounds( &_this->CaptionText, EwNewRect( s, 0, aSize.X, aSize.Y 
  ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void XFlatRadioButton_UpdateViewState( XFlatRadioButton _this, XSet aState )
{
  if ( _this->Selected || ( _this->TouchHandler.Down && _this->TouchHandler.Inside 
      ))
    ViewsImage_OnSetFrameNumber( &_this->BoxImage, 1 );
  else
    ViewsImage_OnSetFrameNumber( &_this->BoxImage, 0 );

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorEnabled );
    ViewsText_OnSetColor( &_this->CaptionText, XFlatColorEnabled );
  }
  else
  {
    ViewsImage_OnSetColor( &_this->BoxImage, XFlatColorDisabled );
    ViewsText_OnSetColor( &_this->CaptionText, XFlatColorDisabled );
  }
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatRadioButton_enterLeaveSlot( XFlatRadioButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatRadioButton_pressReleaseSlot( XFlatRadioButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Down && _this->TouchHandler.Inside )
  {
    XFlatRadioButton_OnSetSelected( _this, 1 );

    if ( _this->Outlet.Object != 0 )
      EwOnSetInt32( _this->Outlet, _this->OutletSelector );

    EwNotifyRefObservers( _this->Outlet, 0 );
    EwIdleSignal( _this->OnChange, ((XObject)_this ));
  }
}

/* 'C' function for method : 'XFlat::RadioButton.OnSetCaption()' */
void XFlatRadioButton_OnSetCaption( XFlatRadioButton _this, XString value )
{
  EwRetainString( &_this->Caption, value );
  ViewsText_OnSetString( &_this->CaptionText, value );
}

/* This slot method will receive a signal, if the value of the property assigned 
   to @Outlet has been changed by another widget or by the application logic. In 
   response to this notification, the widget will update itself. */
void XFlatRadioButton_outletSlot( XFlatRadioButton _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( _this->Outlet.Object != 0 )
    XFlatRadioButton_OnSetSelected( _this, (XBool)( EwOnGetInt32( _this->Outlet 
    ) == _this->OutletSelector ));
}

/* 'C' function for method : 'XFlat::RadioButton.OnSetOutlet()' */
void XFlatRadioButton_OnSetOutlet( XFlatRadioButton _this, XRef value )
{
  if ( !EwCompRef( _this->Outlet, value ))
    return;

  if ( _this->Outlet.Object != 0 )
    EwDetachRefObserver( EwNewSlot( _this, XFlatRadioButton_outletSlot ), _this->Outlet, 
      0 );

  _this->Outlet = value;

  if ( value.Object != 0 )
    EwAttachRefObserver( EwNewSlot( _this, XFlatRadioButton_outletSlot ), value, 
      0 );

  if ( value.Object != 0 )
    EwPostSignal( EwNewSlot( _this, XFlatRadioButton_outletSlot ), ((XObject)_this 
      ));
}

/* 'C' function for method : 'XFlat::RadioButton.OnSetSelected()' */
void XFlatRadioButton_OnSetSelected( XFlatRadioButton _this, XBool value )
{
  if ( _this->Selected == value )
    return;

  _this->Selected = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'XFlat::RadioButton.OnSetOutletSelector()' */
void XFlatRadioButton_OnSetOutletSelector( XFlatRadioButton _this, XInt32 value )
{
  _this->OutletSelector = value;

  if ( _this->Outlet.Object != 0 )
    XFlatRadioButton_OnSetSelected( _this, (XBool)( EwOnGetInt32( _this->Outlet 
    ) == _this->OutletSelector ));
}

/* Variants derived from the class : 'XFlat::RadioButton' */
EW_DEFINE_CLASS_VARIANTS( XFlatRadioButton )
EW_END_OF_CLASS_VARIANTS( XFlatRadioButton )

/* Virtual Method Table (VMT) for the class : 'XFlat::RadioButton' */
EW_DEFINE_CLASS( XFlatRadioButton, CoreGroup, "XFlat::RadioButton" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  XFlatRadioButton_UpdateLayout,
  XFlatRadioButton_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( XFlatRadioButton )

/* Color constant representing a theme color of the widget kit. If you want to change 
   this color within your project, just create a variant of this color constant 
   and select a new color value that meets your design ideas. */
const XColor XFlatColorDisabled = { 0x93, 0x93, 0x93, 0xFF };

/* Bitmap resources used for the checkbox widgets. All bitmap resource contain two 
   frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatSwitchFrame )
  EW_BITMAP_FRAMES( XFlatSwitchFrame, Default, EW_DRIVER_VARIANT_ALPHA8, 75, 44, 0 )
    EW_BITMAP_FRAME( 16, 42, 43, 1, 0x00000000, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatSwitchFrame, Default )             /* ratio 18.55 % */
    0x1C080100, 0x0120B048, 0x2548781D, 0x9DCEB6EB, 0x231087C3, 0x70F89C4A, 0xA464B75D,
    0x5020E8F0, 0x8FC7A3B0, 0x82707902, 0xC9A4AFF7, 0xAA532893, 0x1E12A95C, 0x63201E27,
    0xAC523C16, 0x8563BF64, 0x7090B4A6, 0x8FCFA640, 0x98B42407, 0xBF590852, 0xFC8CC592,
    0x55E1C8F4, 0x34777149, 0x54BA9D2C, 0x25711DC3, 0x0AA0715F, 0x7FBB0A00, 0xE018CCEB,
    0x81A7D64A, 0xB1FEE632, 0x8FF5327B, 0x24A57FBF, 0x13EB9D94, 0xFE7FA942, 0xF47CFCFC,
    0xBA195F2F, 0xC98E7D80, 0xCC91EFF7, 0x29E8FF42, 0xA418CC0D, 0x06FF7A91, 0x57D29481,
    0x1FCBE348, 0x27F3E485, 0x778823C5, 0x1E60C2FF, 0xBFCC11DD, 0xEA3A2077, 0xB48A07FA,
    0xFEA0826B, 0xE4E82AE9, 0xAF0839DF, 0xF7384373, 0x664109CF, 0x1EE4BEFF, 0xB31FE5FE,
    0x69FE4581, 0x373C3013, 0x8AFF6E81, 0xAFF53408, 0x6FE1F34D, 0xA00299FE, 0x0ABE5EA0,
    0xD05773D7, 0x72414F57, 0xF787E15E, 0x9FE84E8A, 0xF5B9F49E, 0xEB1423FC, 0xAFF811DF,
    0x658BFC8F, 0xFC07DFED, 0x8FF07DAE, 0x00155F35, 0x80066920, 0x073DCF95, 0x3E0F86BA,
    0x20D3D8FA, 0xD3E4F769, 0x4D1C3FCE, 0x6A0158D8, 0x074FF361, 0xC1A6361A, 0xF2CCD73F,
    0x3221110F, 0xB33FC416, 0x1D8FF218, 0xC7760629, 0xF124873F, 0x02312E0F, 0x493FCB86,
    0x0460F030, 0xC1159639, 0xA0000D83, 0x04683FCA, 0xFF1A5649, 0x131022A8, 0xE4A73224,
    0xF35C0252, 0x0502130F, 0x583FCD30, 0x1654B94C, 0xC01348FF, 0x13FC5740, 0xCA5E030E,
    0x565600C4, 0x3FCBE414, 0x1319A494, 0xD2F8FF25, 0xFCF40991, 0x1E9C8543, 0x3CCFF151,
    0xC5C47826, 0xC0DCF53F, 0x403A4127, 0x8A4805C6, 0x0E4F03FC, 0x03C00287, 0x14C48749,
    0xB6842700, 0xF615A729, 0x98C9C3FC, 0x12522296, 0xC92A6825, 0x20FF9D00, 0x5B4FAA02,
    0x162663CC, 0x40288652, 0xB3CD5816, 0xAC265705, 0x7219E037, 0x19C12835, 0x4BD3FE56,
    0xB15D65A0, 0xE0F83FE5, 0x1D110772, 0x011AF864, 0x0771101E, 0x2494F82E, 0x0574A68D,
    0xD52A84B0, 0x450F749E, 0xD10B86E0, 0xA3E1283D, 0x32AB12CA, 0x871200C6, 0x3B8D72C8,
    0xEF24B184, 0x73B8F9BC, 0x20872C8D, 0x014FEA51, 0x00000001, 0x00000000

  EW_BITMAPS_TABLE( XFlatSwitchFrame )
    EW_BITMAP( XFlatSwitchFrame, Default )
EW_END_OF_BITMAP_RES( XFlatSwitchFrame )

/* Table with links to derived variants of the bitmap resource : 'XFlat::SwitchFrame' */
EW_RES_WITHOUT_VARIANTS( XFlatSwitchFrame )

/* Initializer for the class 'XFlat::Switch' */
void XFlatSwitch__Init( XFlatSwitch _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSimpleTouchHandler__Init( &_this->TouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Frame, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->Button, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( XFlatSwitch );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const000F );
  CoreView_OnSetLayout((CoreView)&_this->TouchHandler, CoreLayoutAlignToBottom | 
  CoreLayoutAlignToLeft | CoreLayoutAlignToRight | CoreLayoutAlignToTop | CoreLayoutResizeHorz 
  | CoreLayoutResizeVert );
  CoreQuadView__OnSetPoint4( &_this->TouchHandler, _Const0010 );
  CoreQuadView__OnSetPoint3( &_this->TouchHandler, _Const0011 );
  CoreQuadView__OnSetPoint2( &_this->TouchHandler, _Const0012 );
  CoreQuadView__OnSetPoint1( &_this->TouchHandler, _Const0008 );
  CoreView_OnSetLayout((CoreView)&_this->Frame, 0 );
  CoreRectView__OnSetBounds( &_this->Frame, _Const000C );
  ViewsImage_OnSetColor( &_this->Frame, XFlatColorEnabled );
  ViewsImage_OnSetFrameNumber( &_this->Frame, 0 );
  CoreView_OnSetLayout((CoreView)&_this->Button, 0 );
  CoreRectView__OnSetBounds( &_this->Button, _Const000C );
  ViewsImage_OnSetColor( &_this->Button, XFlatColorEnabled );
  ViewsImage_OnSetFrameNumber( &_this->Button, 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->TouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Frame ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->Button ), 0 );
  _this->TouchHandler.OnLeave = EwNewSlot( _this, XFlatSwitch_enterLeaveSlot );
  _this->TouchHandler.OnEnter = EwNewSlot( _this, XFlatSwitch_enterLeaveSlot );
  _this->TouchHandler.OnRelease = EwNewSlot( _this, XFlatSwitch_pressReleaseSlot 
  );
  _this->TouchHandler.OnPress = EwNewSlot( _this, XFlatSwitch_pressReleaseSlot );
  ViewsImage_OnSetBitmap( &_this->Frame, EwLoadResource( &XFlatSwitchFrame, ResourcesBitmap 
  ));
  ViewsImage_OnSetBitmap( &_this->Button, EwLoadResource( &XFlatButtonEmpty, ResourcesBitmap 
  ));
  _this->ButtonImage = EwLoadResource( &XFlatButtonEmpty, ResourcesBitmap );
}

/* Re-Initializer for the class 'XFlat::Switch' */
void XFlatSwitch__ReInit( XFlatSwitch _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSimpleTouchHandler__ReInit( &_this->TouchHandler );
  ViewsImage__ReInit( &_this->Frame );
  ViewsImage__ReInit( &_this->Button );
}

/* Finalizer method for the class 'XFlat::Switch' */
void XFlatSwitch__Done( XFlatSwitch _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( XFlatSwitch );

  /* Finalize all embedded objects */
  CoreSimpleTouchHandler__Done( &_this->TouchHandler );
  ViewsImage__Done( &_this->Frame );
  ViewsImage__Done( &_this->Button );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'XFlat::Switch' */
void XFlatSwitch__Mark( XFlatSwitch _this )
{
  EwMarkSlot( _this->OnSwitchOff );
  EwMarkSlot( _this->OnSwitchOn );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->TouchHandler );
  EwMarkRef( _this->Outlet );
  EwMarkObject( &_this->Frame );
  EwMarkObject( &_this->Button );
  EwMarkObject( _this->ButtonImage );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void XFlatSwitch_UpdateLayout( XFlatSwitch _this, XPoint aSize )
{
  XInt32 w;
  XInt32 h;
  XInt32 x;
  XInt32 y;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  w = _this->Frame.Bitmap->FrameSize.X;
  h = _this->Frame.Bitmap->FrameSize.Y;
  x = ( aSize.X - w ) / 2;
  y = ( aSize.Y - h ) / 2;
  CoreRectView__OnSetBounds( &_this->Frame, EwNewRect( x, y, x + w, y + h ));
  CoreRectView__OnSetBounds( &_this->Button, EwNewRect( x, y, x + w, y + h ));
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void XFlatSwitch_UpdateViewState( XFlatSwitch _this, XSet aState )
{
  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsImage_OnSetColor( &_this->Frame, XFlatColorEnabled );
    ViewsImage_OnSetColor( &_this->Button, XFlatColorEnabled );
  }
  else
  {
    ViewsImage_OnSetColor( &_this->Frame, XFlatColorDisabled );
    ViewsImage_OnSetColor( &_this->Button, XFlatColorDisabled );
  }

  if ( _this->Active )
    ViewsImage_OnSetFrameNumber( &_this->Button, 1 );
  else
    ViewsImage_OnSetFrameNumber( &_this->Button, 0 );

  if ( _this->TouchHandler.Down && _this->TouchHandler.Inside )
    ViewsImage_OnSetAlignment( &_this->Button, ViewsImageAlignmentAlignHorzCenter 
    | ViewsImageAlignmentAlignVertCenter );
  else
    if ( _this->Active )
      ViewsImage_OnSetAlignment( &_this->Button, ViewsImageAlignmentAlignHorzRight 
      | ViewsImageAlignmentAlignVertCenter );
    else
      ViewsImage_OnSetAlignment( &_this->Button, ViewsImageAlignmentAlignHorzLeft 
      | ViewsImageAlignmentAlignVertCenter );
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatSwitch_pressReleaseSlot( XFlatSwitch _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  if ( !_this->TouchHandler.Down && _this->TouchHandler.Inside )
  {
    XFlatSwitch_OnSetActive( _this, (XBool)!_this->Active );

    if ( _this->Outlet.Object != 0 )
      EwOnSetBool( _this->Outlet, _this->Active );

    EwNotifyRefObservers( _this->Outlet, 0 );
    EwIdleSignal( _this->OnChange, ((XObject)_this ));

    if ( _this->Active )
      EwPostSignal( _this->OnSwitchOn, ((XObject)_this ));
    else
      EwPostSignal( _this->OnSwitchOff, ((XObject)_this ));
  }
}

/* 'C' function for method : 'XFlat::Switch.OnSetActive()' */
void XFlatSwitch_OnSetActive( XFlatSwitch _this, XBool value )
{
  if ( _this->Active == value )
    return;

  _this->Active = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatSwitch_enterLeaveSlot( XFlatSwitch _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'XFlat::Switch.OnSetButtonImage()' */
void XFlatSwitch_OnSetButtonImage( XFlatSwitch _this, ResourcesBitmap value )
{
  _this->ButtonImage = value;
  ViewsImage_OnSetBitmap( &_this->Button, value );
}

/* Variants derived from the class : 'XFlat::Switch' */
EW_DEFINE_CLASS_VARIANTS( XFlatSwitch )
EW_END_OF_CLASS_VARIANTS( XFlatSwitch )

/* Virtual Method Table (VMT) for the class : 'XFlat::Switch' */
EW_DEFINE_CLASS( XFlatSwitch, CoreGroup, "XFlat::Switch" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  XFlatSwitch_UpdateLayout,
  XFlatSwitch_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( XFlatSwitch )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatButtonEmpty )
  EW_BITMAP_FRAMES( XFlatButtonEmpty, Default, EW_DRIVER_VARIANT_ALPHA8, 44, 44, 0 )
    EW_BITMAP_FRAME( 16, 1, 5, 1, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 7, 6, 30, 32, 0x000001F8, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatButtonEmpty, Default )             /* ratio 20.87 % */
    0x1C080100, 0x0320B048, 0x61648724, 0x9F4FA773, 0x0CB26BBB, 0xB0506121, 0x008BC5A2,
    0x75512002, 0x8F479FEF, 0xFC7E3AF7, 0x92154F77, 0x12531800, 0x23CD029C, 0x8A785CBE,
    0x90202078, 0x78228780, 0x18F3E172, 0x8C4A8A6D, 0xCC797624, 0x4FC246B6, 0x79B46B09,
    0x67E245DC, 0xFEF12DC1, 0xC022DB91, 0x5B0140E9, 0xA78BFDC8, 0x42006AC5, 0xB451331E,
    0x4793506A, 0x06532842, 0x0AF244C0, 0x3A578C59, 0xF17B4A52, 0x3F783FD0, 0x01FCA6DE,
    0x8C21DFEF, 0x03D5FE59, 0x906557A2, 0x58B0FF7A, 0x9FEF2124, 0xB12AC2DB, 0xA23793FC,
    0x904C50A2, 0xA7FA669D, 0xA914E0AB, 0x6CA73363, 0xC0CA55A0, 0x75FED100, 0xCB73FD15,
    0x936968BF, 0x9556C3FC, 0xD9014AB5, 0x981121FE, 0xDB1A9FEA, 0x43FCD54E, 0xBDC16005,
    0xAB81467C, 0xDEEF9094, 0x959C2402, 0xDBA5D53B, 0xD23C3FD0, 0x67F9E27F, 0x22BFD648,
    0xF91655D9, 0xBFDAEB27, 0x7A53E10E, 0xDD8D77F8, 0x31E902BF, 0xAEC7F816, 0xC794FC79,
    0x78BFDFED, 0xFDFC3DDC, 0x8EC7CD05, 0x58001E79, 0x7D107AD0, 0x46412067, 0x761D6790,
    0x07940A0B, 0x17444777, 0x1D420021, 0x11721C61, 0x001CE732, 0xA116F8A8, 0x0001C470,
    0xEDB5365D, 0x473FDB87, 0x3FDA8408, 0x1AE8185B, 0x21497434, 0x91FB0355, 0x04698FF6,
    0x7DD98751, 0xD056759B, 0x96298D08, 0x54F1649E, 0xF5605156, 0x109E1108, 0x918624F6,
    0xC749785D, 0xB16A5F97, 0xC0164F75, 0x5D172169, 0x91E57D17, 0xD5E9A126, 0xA0FF5980,
    0x51161565, 0x5BD54395, 0xD5B39558, 0x408D6463, 0x25443FDD, 0x6C049297, 0x9299C528,
    0xD2D14185, 0x12E8F83F, 0xDD354CD3, 0x3B2E8784, 0x8F0D03FD, 0x4A9469A2, 0x34852394,
    0xA4F63FD2, 0xCF765272, 0x358B0219, 0x4F93E4ED, 0x62C0D63B, 0x05648688, 0x00000004,
    0x1C080100, 0x0320B048, 0x49688724, 0x9FF0C7FB, 0x90875A34, 0xB1482830, 0x458145A2,
    0xC86BE556, 0x55BE63B1, 0x2C8A2E45, 0xC7586368, 0xD9872893, 0x84317918, 0x5130942B,
    0xB2C10ABA, 0x31769160, 0x176C7673, 0x360026B2, 0x6D0A74FC, 0x4D4D8FC8, 0x36934348,
    0x8DF23484, 0x8CFFA7D2, 0x14122C5A, 0x3D7E526A, 0x6780860B, 0x9A3C29F5, 0x85757505,
    0x9520ABAA, 0x10A956B1, 0xA9F6885C, 0xDA4B81B4, 0x70225D5A, 0xABA85C95, 0x77B02400,
    0x04BDA9F7, 0x5D3EFB71, 0x53F04842, 0x2B0CB142, 0x714D558D, 0x1D386AD2, 0x51B76D0B,
    0x957CCEB2, 0x17CCC72D, 0x76CC3359, 0xACC33D8D, 0xCA345896, 0x9F4D8558, 0xF5448424,
    0x5D7B2449, 0x000BFC37, 0xA8866C95, 0x97FEDE30, 0xB7EAAD95, 0x56BACF03, 0x6A96904B,
    0x7443145A, 0x6C0EDCB6, 0x25552141, 0x917213F3, 0x17A9668D, 0xCA663A91, 0xA2E0A812,
    0x5908013E, 0xF51DB63E, 0xD84200F0, 0x39CABB45, 0xAD25007A, 0x315F7CAA, 0xF69D5F23,
    0x9917D240, 0x57210900, 0x0F9654CC, 0x96B0AE33, 0x01017840, 0x00000000

  EW_BITMAPS_TABLE( XFlatButtonEmpty )
    EW_BITMAP( XFlatButtonEmpty, Default )
EW_END_OF_BITMAP_RES( XFlatButtonEmpty )

/* Table with links to derived variants of the bitmap resource : 'XFlat::ButtonEmpty' */
EW_RES_WITHOUT_VARIANTS( XFlatButtonEmpty )

/* Initializer for the class 'XFlat::HorzBarSlider' */
void XFlatHorzBarSlider__Init( XFlatHorzBarSlider _this, XObject aLink, XHandle aArg )
{
  /* At first initialize the super class ... */
  CoreGroup__Init( &_this->_Super, aLink, aArg );

  /* ... then construct all embedded objects */
  CoreSimpleTouchHandler__Init( &_this->SimpleTouchHandler, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->ImageBack, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->ImageFront, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->ImageLow, &_this->_XObject, 0 );
  ViewsImage__Init( &_this->ImageHigh, &_this->_XObject, 0 );

  /* Setup the VMT pointer */
  _this->_VMT = EW_CLASS( XFlatHorzBarSlider );

  /* ... and initialize objects, variables, properties, etc. */
  CoreRectView__OnSetBounds( _this, _Const0013 );
  _this->MaxValue = 100;
  _this->CurrentValue = 50;
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, _Const0014 );
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, _Const0015 );
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, _Const0016 );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, _Const0017 );
  CoreRectView__OnSetBounds( &_this->ImageBack, _Const0018 );
  ViewsImage_OnSetColor( &_this->ImageBack, XFlatColorEnabled );
  CoreRectView__OnSetBounds( &_this->ImageFront, _Const0018 );
  ViewsImage_OnSetColor( &_this->ImageFront, XFlatColorEnabled );
  ViewsImage_OnSetAlignment( &_this->ImageFront, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertCenter );
  ViewsImage_OnSetFrameNumber( &_this->ImageFront, 1 );
  CoreView_OnSetLayout((CoreView)&_this->ImageLow, CoreLayoutAlignToBottom | CoreLayoutAlignToLeft 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->ImageLow, _Const0019 );
  ViewsImage_OnSetAlignment( &_this->ImageLow, ViewsImageAlignmentAlignHorzLeft 
  | ViewsImageAlignmentAlignVertTop );
  CoreView_OnSetLayout((CoreView)&_this->ImageHigh, CoreLayoutAlignToBottom | CoreLayoutAlignToRight 
  | CoreLayoutAlignToTop | CoreLayoutResizeHorz | CoreLayoutResizeVert );
  CoreRectView__OnSetBounds( &_this->ImageHigh, _Const001A );
  ViewsImage_OnSetAlignment( &_this->ImageHigh, ViewsImageAlignmentAlignHorzRight 
  | ViewsImageAlignmentAlignVertTop );
  ViewsImage_OnSetFrameNumber( &_this->ImageHigh, 1 );
  CoreGroup__Add( _this, ((CoreView)&_this->SimpleTouchHandler ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ImageBack ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ImageFront ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ImageLow ), 0 );
  CoreGroup__Add( _this, ((CoreView)&_this->ImageHigh ), 0 );
  _this->SimpleTouchHandler.OnDrag = EwNewSlot( _this, XFlatHorzBarSlider_onDragSlot 
  );
  _this->SimpleTouchHandler.OnRelease = EwNewSlot( _this, XFlatHorzBarSlider_onReleaseSlot 
  );
  _this->SimpleTouchHandler.OnPress = EwNewSlot( _this, XFlatHorzBarSlider_onPressSlot 
  );
  ViewsImage_OnSetBitmap( &_this->ImageBack, EwLoadResource( &XFlatHorzBarImage, 
  ResourcesBitmap ));
  ViewsImage_OnSetBitmap( &_this->ImageFront, EwLoadResource( &XFlatHorzBarImage, 
  ResourcesBitmap ));
  _this->MinIcon = EwLoadResource( &XFlatSymbolFan, ResourcesBitmap );
  _this->MaxIcon = EwLoadResource( &XFlatSymbolFan, ResourcesBitmap );
  ViewsImage_OnSetBitmap( &_this->ImageLow, EwLoadResource( &XFlatSymbolFan, ResourcesBitmap 
  ));
  ViewsImage_OnSetBitmap( &_this->ImageHigh, EwLoadResource( &XFlatSymbolFan, ResourcesBitmap 
  ));
}

/* Re-Initializer for the class 'XFlat::HorzBarSlider' */
void XFlatHorzBarSlider__ReInit( XFlatHorzBarSlider _this )
{
  /* At first re-initialize the super class ... */
  CoreGroup__ReInit( &_this->_Super );

  /* ... then re-construct all embedded objects */
  CoreSimpleTouchHandler__ReInit( &_this->SimpleTouchHandler );
  ViewsImage__ReInit( &_this->ImageBack );
  ViewsImage__ReInit( &_this->ImageFront );
  ViewsImage__ReInit( &_this->ImageLow );
  ViewsImage__ReInit( &_this->ImageHigh );
}

/* Finalizer method for the class 'XFlat::HorzBarSlider' */
void XFlatHorzBarSlider__Done( XFlatHorzBarSlider _this )
{
  /* Finalize this class */
  _this->_VMT = EW_CLASS( XFlatHorzBarSlider );

  /* Finalize all embedded objects */
  CoreSimpleTouchHandler__Done( &_this->SimpleTouchHandler );
  ViewsImage__Done( &_this->ImageBack );
  ViewsImage__Done( &_this->ImageFront );
  ViewsImage__Done( &_this->ImageLow );
  ViewsImage__Done( &_this->ImageHigh );

  /* Don't forget to deinitialize the super class ... */
  CoreGroup__Done( &_this->_Super );
}

/* Garbage Collector method for the class 'XFlat::HorzBarSlider' */
void XFlatHorzBarSlider__Mark( XFlatHorzBarSlider _this )
{
  EwMarkRef( _this->Outlet );
  EwMarkSlot( _this->OnApply );
  EwMarkSlot( _this->OnChange );
  EwMarkObject( &_this->SimpleTouchHandler );
  EwMarkObject( &_this->ImageBack );
  EwMarkObject( &_this->ImageFront );
  EwMarkObject( _this->MinIcon );
  EwMarkObject( _this->MaxIcon );
  EwMarkObject( &_this->ImageLow );
  EwMarkObject( &_this->ImageHigh );

  /* Give the super class a chance to mark its objects and references */
  CoreGroup__Mark( &_this->_Super );
}

/* The method UpdateViewState() is invoked automatically after the state of the 
   component has been changed. This method can be overridden and filled with logic 
   to ensure the visual aspect of the component does reflect its current state. 
   For example, the 'enabled' state of the component can affect its colors (disabled 
   components may appear pale). In this case the logic of the method should modify 
   the respective color properties accordingly to the current 'enabled' state. 
   The current state of the component is passed as a set in the parameter aState. 
   It reflects the very basic component state like its visibility or the ability 
   to react to user inputs. Beside this common state, the method can also involve 
   any other variables used in the component as long as they reflect its current 
   state. For example, the toggle switch component can take in account its toggle 
   state 'on' or 'off' and change accordingly the location of the slider, etc.
   Usually, this method will be invoked automatically by the framework. Optionally 
   you can request its invocation by using the method @InvalidateViewState(). */
void XFlatHorzBarSlider_UpdateViewState( XFlatHorzBarSlider _this, XSet aState )
{
  XInt32 pos = 0;

  if ((( _this->MaxValue > _this->MinValue ) && ( _this->CurrentValue >= _this->MinValue 
      )) && ( _this->CurrentValue <= _this->MaxValue ))
  {
    pos = ( EwGetRectW( _this->ImageBack.Super1.Bounds ) * ( _this->CurrentValue 
    - _this->MinValue )) / ( _this->MaxValue - _this->MinValue );
  }

  CoreRectView__OnSetBounds( &_this->ImageFront, EwSetRectW( _this->ImageFront.Super1.Bounds, 
  pos ));

  if ((( aState & CoreViewStateEnabled ) == CoreViewStateEnabled ))
  {
    ViewsImage_OnSetColor( &_this->ImageFront, XFlatColorEnabled );
    ViewsImage_OnSetColor( &_this->ImageBack, XFlatColorEnabled );
    ViewsImage_OnSetColor( &_this->ImageLow, XFlatColorEnabled );
    ViewsImage_OnSetColor( &_this->ImageHigh, XFlatColorEnabled );
  }
  else
  {
    ViewsImage_OnSetColor( &_this->ImageFront, XFlatColorDisabled );
    ViewsImage_OnSetColor( &_this->ImageBack, XFlatColorDisabled );
    ViewsImage_OnSetColor( &_this->ImageLow, XFlatColorDisabled );
    ViewsImage_OnSetColor( &_this->ImageHigh, XFlatColorDisabled );
  }
}

/* The method UpdateLayout() is invoked automatically after the size of the component 
   has been changed. This method can be overridden and filled with logic to perform 
   a sophisticated arrangement calculation for one or more enclosed views. In this 
   case the parameter aSize can be used. It contains the current size of the component. 
   Usually, all enclosed views are arranged automatically accordingly to their @Layout 
   property. UpdateLayout() gives the derived components a chance to extend this 
   automatism by a user defined algorithm. */
void XFlatHorzBarSlider_UpdateLayout( XFlatHorzBarSlider _this, XPoint aSize )
{
  XInt32 s;
  XInt32 x;

  CoreGroup_UpdateLayout((CoreGroup)_this, aSize );
  s = _this->ImageBack.Bitmap->FrameSize.Y;
  x = ( aSize.X - _this->ImageBack.Bitmap->FrameSize.X ) / 2;
  CoreRectView__OnSetBounds( &_this->ImageBack, EwNewRect( x, aSize.Y - ( 2 * s 
  ), x + _this->ImageBack.Bitmap->FrameSize.X, aSize.Y - s ));
  CoreRectView__OnSetBounds( &_this->ImageFront, _this->ImageBack.Super1.Bounds 
  );
  CoreQuadView__OnSetPoint1( &_this->SimpleTouchHandler, EwNewPoint( _this->ImageBack.Super1.Bounds.Point1.X 
  - 10, _this->ImageBack.Super1.Bounds.Point1.Y - 10 ));
  CoreQuadView__OnSetPoint2( &_this->SimpleTouchHandler, EwNewPoint( _this->ImageBack.Super1.Bounds.Point1.X 
  - 10, _this->ImageBack.Super1.Bounds.Point2.Y + 10 ));
  CoreQuadView__OnSetPoint3( &_this->SimpleTouchHandler, EwNewPoint( _this->ImageBack.Super1.Bounds.Point2.X 
  + 10, _this->ImageBack.Super1.Bounds.Point2.Y + 10 ));
  CoreQuadView__OnSetPoint4( &_this->SimpleTouchHandler, EwNewPoint( _this->ImageBack.Super1.Bounds.Point2.X 
  + 10, _this->ImageBack.Super1.Bounds.Point1.Y - 10 ));
}

/* 'C' function for method : 'XFlat::HorzBarSlider.OnSetMaxValue()' */
void XFlatHorzBarSlider_OnSetMaxValue( XFlatHorzBarSlider _this, XInt32 value )
{
  if ( _this->MaxValue == value )
    return;

  _this->MaxValue = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* 'C' function for method : 'XFlat::HorzBarSlider.OnSetCurrentValue()' */
void XFlatHorzBarSlider_OnSetCurrentValue( XFlatHorzBarSlider _this, XInt32 value )
{
  if ( value < _this->MinValue )
    value = _this->MinValue;

  if ( value > _this->MaxValue )
    value = _this->MaxValue;

  if ( _this->CurrentValue == value )
    return;

  _this->CurrentValue = value;
  CoreGroup_InvalidateViewState((CoreGroup)_this );
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatHorzBarSlider_onPressSlot( XFlatHorzBarSlider _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
  _this->startValue = _this->CurrentValue;
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatHorzBarSlider_onDragSlot( XFlatHorzBarSlider _this, XObject sender )
{
  XInt32 oldValue;
  XInt32 ofs;

  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  oldValue = _this->CurrentValue;
  ofs = _this->SimpleTouchHandler.CurrentPos.X - _this->SimpleTouchHandler.HittingPos.X;

  if ((( _this->MaxValue > _this->MinValue ) && ( _this->CurrentValue >= _this->MinValue 
      )) && ( _this->CurrentValue <= _this->MaxValue ))
  {
    ofs = ( ofs * ( _this->MaxValue - _this->MinValue )) / EwGetRectW( _this->ImageBack.Super1.Bounds 
    );
  }
  else
    ofs = 0;

  XFlatHorzBarSlider_OnSetCurrentValue( _this, _this->startValue + ofs );

  if ( _this->CurrentValue != oldValue )
  {
    if ( _this->Outlet.Object != 0 )
      EwOnSetInt32( _this->Outlet, _this->CurrentValue );

    EwNotifyRefObservers( _this->Outlet, 0 );
    EwIdleSignal( _this->OnChange, ((XObject)_this ));
  }
}

/* This internal slot method is used to receive the corresponding signals form the 
   touch handler. */
void XFlatHorzBarSlider_onReleaseSlot( XFlatHorzBarSlider _this, XObject sender )
{
  /* Dummy expressions to avoid the 'C' warning 'unused argument'. */
  EW_UNUSED_ARG( sender );

  CoreGroup_InvalidateViewState((CoreGroup)_this );
  EwPostSignal( _this->OnApply, ((XObject)_this ));
}

/* 'C' function for method : 'XFlat::HorzBarSlider.OnSetMinIcon()' */
void XFlatHorzBarSlider_OnSetMinIcon( XFlatHorzBarSlider _this, ResourcesBitmap 
  value )
{
  _this->MinIcon = value;
  ViewsImage_OnSetBitmap( &_this->ImageLow, value );
}

/* 'C' function for method : 'XFlat::HorzBarSlider.OnSetMaxIcon()' */
void XFlatHorzBarSlider_OnSetMaxIcon( XFlatHorzBarSlider _this, ResourcesBitmap 
  value )
{
  _this->MaxIcon = value;
  ViewsImage_OnSetBitmap( &_this->ImageHigh, value );
}

/* Variants derived from the class : 'XFlat::HorzBarSlider' */
EW_DEFINE_CLASS_VARIANTS( XFlatHorzBarSlider )
EW_END_OF_CLASS_VARIANTS( XFlatHorzBarSlider )

/* Virtual Method Table (VMT) for the class : 'XFlat::HorzBarSlider' */
EW_DEFINE_CLASS( XFlatHorzBarSlider, CoreGroup, "XFlat::HorzBarSlider" )
  CoreRectView_initLayoutContext,
  CoreView_GetRoot,
  CoreGroup_Draw,
  CoreView_HandleEvent,
  CoreGroup_CursorHitTest,
  CoreRectView_ArrangeView,
  CoreRectView_MoveView,
  CoreRectView_GetExtent,
  CoreGroup_ChangeViewState,
  CoreGroup_OnSetBounds,
  CoreGroup_OnSetFocus,
  CoreGroup_OnSetBuffered,
  CoreGroup_OnSetOpacity,
  CoreGroup_DispatchEvent,
  CoreGroup_BroadcastEvent,
  XFlatHorzBarSlider_UpdateLayout,
  XFlatHorzBarSlider_UpdateViewState,
  CoreGroup_InvalidateArea,
  CoreGroup_FindSiblingView,
  CoreGroup_RestackBehind,
  CoreGroup_RestackTop,
  CoreGroup_Restack,
  CoreGroup_Remove,
  CoreGroup_Add,
EW_END_OF_CLASS( XFlatHorzBarSlider )

/* Bitmap resources used for the checkbox widgets. All bitmap resource contain two 
   frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatHorzBarImage )
  EW_BITMAP_FRAMES( XFlatHorzBarImage, Default, EW_DRIVER_VARIANT_ALPHA8, 220, 20, 0 )
    EW_BITMAP_FRAME( 9, 0, 202, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 9, 0, 202, 20, 0x00000164, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatHorzBarImage, Default )            /* ratio 6.41 % */
    0x14080100, 0xADCD8128, 0x2A12FF6D, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2,
    0xB89C6A33, 0x091B16ED, 0x18024303, 0xC6DE0750, 0xAA532893, 0xE5B2C95C, 0x06757846,
    0x2B706488, 0x3222A961, 0xC9DCEA45, 0x9FCFA7B3, 0x1D0A8340, 0xD1A8B44A, 0x224748A3,
    0x16F09529, 0x74038183, 0x24B723FD, 0x58ABD5A9, 0xCADD6AB3, 0x7212E815, 0xDCE56EFF,
    0x855CEFF3, 0xAAD368AE, 0x6936CB5D, 0xF0FF7385, 0xEF30C000, 0x78B6915F, 0xBBDDEAF3,
    0x79BFC8B5, 0xE27EC818, 0xE121340B, 0xFB0F869F, 0xA758AC4C, 0x807B7FA8, 0x98D1E3FD,
    0x21CAE327, 0xA81E632F, 0x7F8F3319, 0x4BFDD4C0, 0x676459B0, 0xFF51A7CC, 0xC1303D2B,
    0x33ACBFD4, 0x200D8EAF, 0x8ADB6575, 0x4D83F1E7, 0xD8ECF6BB, 0x270715B8, 0x69345BAC,
    0x26F9C3DA, 0xB4BBFE57, 0x2992726B, 0x7A5E6F23, 0x78EB5EF9, 0xF3C6807F, 0xEC6F54AF,
    0xA787C178, 0x1EE9998E, 0xF6AAFFBA, 0xF7BECF5E, 0x0018BF92, 0xBEDB3770, 0x6FC3FDBE,
    0x401C0AE3, 0xFB93AA6B, 0x96980600, 0x92D16013, 0xF40C0013, 0x07121362, 0x83E0E80A,
    0x54B00D41, 0x153CBA42, 0x987200D2, 0x1C86D2E4, 0x87E1E876, 0x4723C12A, 0xC03D2183,
    0x80D82D06, 0x2C8AE2A8, 0x361288B6, 0x80F1B0B4, 0x00010148, 0x14080100, 0xBB16A338,
    0x2A12FF7D, 0xA1B0C85C, 0x231087C3, 0xB1489C4A, 0x188BC5A2, 0x989C6A33, 0x102A5D2F,
    0xD8024303, 0xC9A36CE0, 0xAA532893, 0xA4D2C95C, 0x44095E3F, 0xB2D7C922, 0x389BCDA6,
    0x678CD673, 0x7E0E2062, 0x1D0A833A, 0x3CE7544A, 0xB00C000C, 0xA9B4CA2B, 0x9F12A7D3,
    0xB5042801, 0x42ABD5AA, 0xCAC3A08D, 0x8DD7ABB5, 0x1D8ABEC7, 0xBD61964B, 0x62D368B2,
    0xADB6A7ED, 0xE370B7DB, 0xB74B9DCA, 0x767F4A6E, 0x6885EAF3, 0xBFDEDCEF, 0x05518F7F,
    0x11AEB84C, 0xC31385A5, 0x07000A95, 0xCB90C542, 0x44881D1E, 0x5ECBE45F, 0x890CF5E5,
    0xCFE619A1, 0x8AE5FD50, 0x8BA05229, 0x8268EB59, 0xDF138D5E, 0x441D54B9, 0x00000406,
    0x00000000

  EW_BITMAPS_TABLE( XFlatHorzBarImage )
    EW_BITMAP( XFlatHorzBarImage, Default )
EW_END_OF_BITMAP_RES( XFlatHorzBarImage )

/* Table with links to derived variants of the bitmap resource : 'XFlat::HorzBarImage' */
EW_RES_WITHOUT_VARIANTS( XFlatHorzBarImage )

/* Bitmap resources used for the different button widgets. All bitmap resources 
   used for buttons contain two frames, representing the inactive / active states. */
EW_DEFINE_BITMAP_RES( XFlatSymbolFan )
  EW_BITMAP_FRAMES( XFlatSymbolFan, Default, EW_DRIVER_VARIANT_ALPHA8, 36, 36, 0 )
    EW_BITMAP_FRAME( 16, 20, 3, 2, 0x00000000, 0x00000000 ),
    EW_BITMAP_FRAME( 16, 17, 5, 2, 0x000000F0, 0x00000000 )

  EW_BITMAP_PIXEL_R180( XFlatSymbolFan, Default )               /* ratio 22.22 % */
    0x1C080100, 0xC1A0B048, 0x2A130883, 0xA1B0C85C, 0x231087C3, 0x2158944A, 0x0F0304A2,
    0x158A7D81, 0x0642C248, 0x4A955C78, 0x2A21B186, 0xD07E0015, 0xA0E0C40A, 0x9CBA3C01,
    0xEB10D800, 0x485D0561, 0x95E90A04, 0x330FC063, 0xD0D8063F, 0x0E604515, 0x32202160,
    0x01290528, 0xA8BD0600, 0x6DCA9BFD, 0x84034B56, 0x18947968, 0x019697A5, 0x658AA6C4,
    0x30CC00F6, 0x26071330, 0x2A6CE390, 0xA68A0924, 0x34E362FA, 0x5328C12D, 0x3138005B,
    0x835D8B55, 0x5AD2A62D, 0x8CEA6B12, 0x8B0B06BF, 0xB10C07FD, 0xC4AF0641, 0x98EADAA2,
    0x334889E0, 0x6CA8F10C, 0x001E06D0, 0x26727269, 0x000D8428, 0x0F479B30, 0x0006F1FC,
    0x07AA1C9B, 0xC00420C2, 0x00D8CA0F, 0x8002AC12, 0x4E6E2EAA, 0x1EE14A7B, 0x80C84068,
    0x2B93C8E1, 0xB9BCCE5F, 0xA3D0E7F3, 0x1018574B, 0x1C080100, 0xC1A0B048, 0x2A130883,
    0xA1B0C85C, 0x231087C3, 0xE1585C4A, 0x635A33D6, 0x804C4C1E, 0x603250E4, 0x01760A1E,
    0x2D0EA366, 0x3A348478, 0x1D47204C, 0x503C3DB0, 0xA21829E1, 0x27810A9D, 0x940BB53E,
    0x3780E160, 0x10CD5CEA, 0x0E5CE1B8, 0xC1C85D83, 0x15021818, 0x5B091B36, 0x54B5D348,
    0x756D8920, 0x07513A10, 0x75146086, 0x3A644257, 0x265CEFF7, 0x69C88113, 0x8CD5B821,
    0x62D21542, 0x2278186D, 0x787FBDDD, 0x2653EAF1, 0x52856061, 0x342E8EDE, 0x1EDDA7E0,
    0xD8420006, 0x5E98CBCB, 0x5A0F0008, 0x90E9EA36, 0x6973A944, 0x6665E53A, 0x655E5989,
    0x6A89DAA5, 0x2C461131, 0x0DA1787F, 0x19E03000, 0xE66379DE, 0x0F981C4E, 0x8D81A2AF,
    0x5D9BE6F0, 0x695E1C90, 0xC34807AB, 0xC1378E4B, 0x79339B49, 0xF8C93BC6, 0x18F00F40,
    0xD21785E7, 0xF322C0B9, 0x622BCFA4, 0x7687A09D, 0xABAECAE3, 0xB9E07DDE, 0xE418000A,
    0xA07E5D5B, 0xDAF0CA3D, 0x3037FC13, 0xF6C87CBE, 0x9F6FE401, 0xFBBB7F20, 0x5AB3F102,
    0xE801C502, 0x482763CD, 0xAB002003, 0x2A05D574, 0x8C91460B, 0xB5ACC304, 0xD0F62360,
    0x1C82DEC2, 0x87E1E876, 0x1017DE20, 0x00000000

  EW_BITMAPS_TABLE( XFlatSymbolFan )
    EW_BITMAP( XFlatSymbolFan, Default )
EW_END_OF_BITMAP_RES( XFlatSymbolFan )

/* Table with links to derived variants of the bitmap resource : 'XFlat::SymbolFan' */
EW_RES_WITHOUT_VARIANTS( XFlatSymbolFan )

/* Embedded Wizard */
